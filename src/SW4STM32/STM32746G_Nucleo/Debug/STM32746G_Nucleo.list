
STM32746G_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011410  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000caec  080115e0  080115e0  000215e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e0cc  0801e0cc  0002e0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e0d4  0801e0d4  0002e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e0d8  0801e0d8  0002e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000000  0801e0dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ced8  20000200  0801e2d8  00030200  2**3
                  ALLOC
  8 ._user_heap_stack 00000660  2000d0d8  0801e2d8  0003d0d8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .TxDescripSection 00000080  2004c080  2004c080  0003c080  2**2
                  ALLOC
 11 .debug_line   00043ee1  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00044163  00000000  00000000  0007410d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a39a  00000000  00000000  000b8270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  000c2610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011d871  00000000  00000000  000c45a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003538  00000000  00000000  001e1e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000262bb  00000000  00000000  001e5358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000369e7  00000000  00000000  0020b613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00241ffa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007694  00000000  00000000  0024204c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .RxDecripSection 00000080  2004c000  2004c000  0003c000  2**2
                  ALLOC
 22 .RxarraySection 000017d0  2004c100  2004c100  0003c100  2**0
                  ALLOC
 23 .TxarraySection 000017d0  2004d8d0  2004d8d0  0003d8d0  2**0
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080115c8 	.word	0x080115c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080115c8 	.word	0x080115c8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fb2:	e003      	b.n	8000fbc <LoopCopyDataInit>

08000fb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fba:	3104      	adds	r1, #4

08000fbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc4:	d3f6      	bcc.n	8000fb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fc8:	e002      	b.n	8000fd0 <LoopFillZerobss>

08000fca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fcc:	f842 3b04 	str.w	r3, [r2], #4

08000fd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fd4:	d3f9      	bcc.n	8000fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f001 f86d 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f00d fb2d 	bl	800e638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f000 ff0d 	bl	8001dfc <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000fe8:	0801e0dc 	.word	0x0801e0dc
  ldr  r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ff0:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8000ff4:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8000ff8:	2000d0d8 	.word	0x2000d0d8

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <_sbrk+0x38>)
 8001002:	6811      	ldr	r1, [r2, #0]
{
 8001004:	b508      	push	{r3, lr}
 8001006:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001008:	b909      	cbnz	r1, 800100e <_sbrk+0xe>
		heap_end = &end;
 800100a:	490c      	ldr	r1, [pc, #48]	; (800103c <_sbrk+0x3c>)
 800100c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800100e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	prev_heap_end = heap_end;
 8001012:	6810      	ldr	r0, [r2, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8001014:	f8d1 1d08 	ldr.w	r1, [r1, #3336]	; 0xd08
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8001018:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800101a:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800101c:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8001020:	428b      	cmp	r3, r1
 8001022:	d906      	bls.n	8001032 <_sbrk+0x32>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001024:	f00d fb02 	bl	800e62c <__errno>
 8001028:	230c      	movs	r3, #12
 800102a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001030:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001032:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001034:	e7fc      	b.n	8001030 <_sbrk+0x30>
 8001036:	bf00      	nop
 8001038:	2000021c 	.word	0x2000021c
 800103c:	20000308 	.word	0x20000308

08001040 <_gettimeofday>:
 * _gettimeofday primitive (Stub function)
 * */
int _gettimeofday (struct timeval * tp, struct timezone * tzp)
{
  /* Return fixed data for the timezone.  */
  if (tzp)
 8001040:	b111      	cbz	r1, 8001048 <_gettimeofday+0x8>
    {
      tzp->tz_minuteswest = 0;
 8001042:	2300      	movs	r3, #0
      tzp->tz_dsttime = 0;
 8001044:	e9c1 3300 	strd	r3, r3, [r1]
    }

  return 0;
}
 8001048:	2000      	movs	r0, #0
 800104a:	4770      	bx	lr

0800104c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800104c:	2001      	movs	r0, #1
 800104e:	4770      	bx	lr

08001050 <_kill>:

int _kill(int pid, int sig)
{
 8001050:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001052:	f00d faeb 	bl	800e62c <__errno>
 8001056:	2316      	movs	r3, #22
 8001058:	6003      	str	r3, [r0, #0]
	return -1;
}
 800105a:	f04f 30ff 	mov.w	r0, #4294967295
 800105e:	bd08      	pop	{r3, pc}

08001060 <_exit>:

void _exit (int status)
{
 8001060:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001062:	f00d fae3 	bl	800e62c <__errno>
 8001066:	2316      	movs	r3, #22
 8001068:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 800106a:	e7fe      	b.n	800106a <_exit+0xa>

0800106c <_write>:
}

int _write(int file, char *ptr, int len)
{
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	460d      	mov	r5, r1
 8001070:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	460e      	mov	r6, r1
 8001074:	1b73      	subs	r3, r6, r5
 8001076:	429c      	cmp	r4, r3
 8001078:	dc01      	bgt.n	800107e <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 800107a:	4620      	mov	r0, r4
 800107c:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 800107e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001082:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	e7f5      	b.n	8001074 <_write+0x8>

08001088 <_close>:

int _close(int file)
{
	return -1;
}
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	4770      	bx	lr

0800108e <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001092:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001094:	604b      	str	r3, [r1, #4]
}
 8001096:	4770      	bx	lr

08001098 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001098:	2001      	movs	r0, #1
 800109a:	4770      	bx	lr

0800109c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800109c:	2000      	movs	r0, #0
 800109e:	4770      	bx	lr

080010a0 <_read>:

int _read(int file, char *ptr, int len)
{
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	460d      	mov	r5, r1
 80010a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	460e      	mov	r6, r1
 80010a8:	1b73      	subs	r3, r6, r5
 80010aa:	429c      	cmp	r4, r3
 80010ac:	dc01      	bgt.n	80010b2 <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80010ae:	4620      	mov	r0, r4
 80010b0:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	e7f5      	b.n	80010a8 <_read+0x8>

080010bc <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 80010bc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80010c0:	f013 0f01 	tst.w	r3, #1
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <User_notification+0x1c>)
 80010c6:	d002      	beq.n	80010ce <User_notification+0x12>
  {
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
    DHCP_state = DHCP_LINK_DOWN;
#endif  /* USE_DHCP */
   /* Turn On LED 3 to indicate ETH and LwIP init error */
   BSP_LED_On(LED3);
  } 
}
 80010cc:	4770      	bx	lr
    DHCP_state = DHCP_LINK_DOWN;
 80010ce:	2205      	movs	r2, #5
   BSP_LED_On(LED3);
 80010d0:	2002      	movs	r0, #2
    DHCP_state = DHCP_LINK_DOWN;
 80010d2:	701a      	strb	r2, [r3, #0]
   BSP_LED_On(LED3);
 80010d4:	f000 bfd2 	b.w	800207c <BSP_LED_On>
 80010d8:	20000220 	.word	0x20000220

080010dc <DHCP_thread>:
* @brief  DHCP Process
* @param  argument: network interface
* @retval None
*/
void DHCP_thread(void const * argument)
{
 80010dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e0:	4604      	mov	r4, r0
 80010e2:	b085      	sub	sp, #20
  ip_addr_t gw;
  struct dhcp *dhcp;
  
  for (;;)
  {
    switch (DHCP_state)
 80010e4:	4d21      	ldr	r5, [pc, #132]	; (800116c <DHCP_thread+0x90>)
            
            /* Stop DHCP */
            dhcp_stop(netif);
            
            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 80010e6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001170 <DHCP_thread+0x94>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80010ea:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8001174 <DHCP_thread+0x98>
    switch (DHCP_state)
 80010ee:	782b      	ldrb	r3, [r5, #0]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	b2de      	uxtb	r6, r3
 80010f4:	d00d      	beq.n	8001112 <DHCP_thread+0x36>
 80010f6:	2e05      	cmp	r6, #5
 80010f8:	d033      	beq.n	8001162 <DHCP_thread+0x86>
 80010fa:	2e01      	cmp	r6, #1
 80010fc:	d115      	bne.n	800112a <DHCP_thread+0x4e>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 80010fe:	2300      	movs	r3, #0
        dhcp_start(netif);
 8001100:	4620      	mov	r0, r4
        ip_addr_set_zero_ip4(&netif->netmask);
 8001102:	e9c4 3301 	strd	r3, r3, [r4, #4]
        ip_addr_set_zero_ip4(&netif->gw);       
 8001106:	60e3      	str	r3, [r4, #12]
        dhcp_start(netif);
 8001108:	f007 f892 	bl	8008230 <dhcp_start>
        DHCP_state = DHCP_WAIT_ADDRESS;
 800110c:	2302      	movs	r3, #2
      break;
  case DHCP_LINK_DOWN:
    {
      /* Stop DHCP */
      dhcp_stop(netif);
      DHCP_state = DHCP_OFF; 
 800110e:	702b      	strb	r3, [r5, #0]
    }
    break;
 8001110:	e00b      	b.n	800112a <DHCP_thread+0x4e>
        if (dhcp_supplied_address(netif)) 
 8001112:	4620      	mov	r0, r4
 8001114:	f007 f81e 	bl	8008154 <dhcp_supplied_address>
 8001118:	b158      	cbz	r0, 8001132 <DHCP_thread+0x56>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 800111a:	2303      	movs	r3, #3
 800111c:	702b      	strb	r3, [r5, #0]
          BSP_LED_Off(LED3);
 800111e:	4630      	mov	r0, r6
 8001120:	f000 ffba 	bl	8002098 <BSP_LED_Off>
          BSP_LED_On(LED1); 
 8001124:	2000      	movs	r0, #0
 8001126:	f000 ffa9 	bl	800207c <BSP_LED_On>
    default: break;
    }
    
    /* wait 250 ms */
    osDelay(250);
 800112a:	20fa      	movs	r0, #250	; 0xfa
 800112c:	f004 f9f3 	bl	8005516 <osDelay>
    switch (DHCP_state)
 8001130:	e7dd      	b.n	80010ee <DHCP_thread+0x12>
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001134:	799b      	ldrb	r3, [r3, #6]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d911      	bls.n	800115e <DHCP_thread+0x82>
            DHCP_state = DHCP_TIMEOUT;
 800113a:	2304      	movs	r3, #4
            dhcp_stop(netif);
 800113c:	4620      	mov	r0, r4
            DHCP_state = DHCP_TIMEOUT;
 800113e:	702b      	strb	r3, [r5, #0]
            dhcp_stop(netif);
 8001140:	f007 f9c6 	bl	80084d0 <dhcp_stop>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8001144:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001148:	aa02      	add	r2, sp, #8
 800114a:	a901      	add	r1, sp, #4
 800114c:	4620      	mov	r0, r4
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 800114e:	f8cd 8004 	str.w	r8, [sp, #4]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8001152:	e9cd 3902 	strd	r3, r9, [sp, #8]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001156:	ab03      	add	r3, sp, #12
 8001158:	f008 ff78 	bl	800a04c <netif_set_addr>
            BSP_LED_Off(LED3);
 800115c:	e7df      	b.n	800111e <DHCP_thread+0x42>
            BSP_LED_On(LED3);
 800115e:	4630      	mov	r0, r6
 8001160:	e7e1      	b.n	8001126 <DHCP_thread+0x4a>
      dhcp_stop(netif);
 8001162:	4620      	mov	r0, r4
 8001164:	f007 f9b4 	bl	80084d0 <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 8001168:	2300      	movs	r3, #0
 800116a:	e7d0      	b.n	800110e <DHCP_thread+0x32>
 800116c:	20000220 	.word	0x20000220
 8001170:	0a00a8c0 	.word	0x0a00a8c0
 8001174:	0100a8c0 	.word	0x0100a8c0

08001178 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8001178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800117c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8001210 <low_level_output+0x98>
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 8001180:	f04f 0800 	mov.w	r8, #0
{
 8001184:	460c      	mov	r4, r1
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8001186:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800118a:	f8da 602c 	ldr.w	r6, [sl, #44]	; 0x2c
  uint32_t framelength = 0;
 800118e:	4647      	mov	r7, r8
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8001190:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 8001192:	b92c      	cbnz	r4, 80011a0 <low_level_output+0x28>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 8001194:	4639      	mov	r1, r7
 8001196:	481e      	ldr	r0, [pc, #120]	; (8001210 <low_level_output+0x98>)
 8001198:	f001 f984 	bl	80024a4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800119c:	4620      	mov	r0, r4
 800119e:	e004      	b.n	80011aa <low_level_output+0x32>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80011a0:	6832      	ldr	r2, [r6, #0]
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	da0f      	bge.n	80011c6 <low_level_output+0x4e>
      errval = ERR_USE;
 80011a6:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80011aa:	f8da 3000 	ldr.w	r3, [sl]
 80011ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	0692      	lsls	r2, r2, #26
 80011b6:	d503      	bpl.n	80011c0 <low_level_output+0x48>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 80011b8:	2220      	movs	r2, #32
 80011ba:	615a      	str	r2, [r3, #20]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 80011c0:	b003      	add	sp, #12
 80011c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 80011c6:	8962      	ldrh	r2, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011c8:	4645      	mov	r5, r8
    payloadoffset = 0;
 80011ca:	f04f 0900 	mov.w	r9, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011ce:	eb05 0802 	add.w	r8, r5, r2
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80011d2:	6861      	ldr	r1, [r4, #4]
 80011d4:	1958      	adds	r0, r3, r5
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011d6:	45d8      	cmp	r8, fp
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80011d8:	4449      	add	r1, r9
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011da:	d808      	bhi.n	80011ee <low_level_output+0x76>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80011dc:	e9cd 2300 	strd	r2, r3, [sp]
 80011e0:	f00d fa5e 	bl	800e6a0 <memcpy>
    framelength = framelength + byteslefttocopy;
 80011e4:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 80011e6:	6824      	ldr	r4, [r4, #0]
    framelength = framelength + byteslefttocopy;
 80011e8:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 80011ea:	9b01      	ldr	r3, [sp, #4]
 80011ec:	e7d1      	b.n	8001192 <low_level_output+0x1a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80011ee:	ebab 0505 	sub.w	r5, fp, r5
 80011f2:	462a      	mov	r2, r5
 80011f4:	f00d fa54 	bl	800e6a0 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80011f8:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80011fa:	6833      	ldr	r3, [r6, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dbd2      	blt.n	80011a6 <low_level_output+0x2e>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8001200:	44a9      	add	r9, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8001202:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8001204:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8001206:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
      bufferoffset = 0;
 800120a:	2500      	movs	r5, #0
 800120c:	e7df      	b.n	80011ce <low_level_output+0x56>
 800120e:	bf00      	nop
 8001210:	20000224 	.word	0x20000224

08001214 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8001214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001218:	4681      	mov	r9, r0
 800121a:	b085      	sub	sp, #20
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800121c:	4d3d      	ldr	r5, [pc, #244]	; (8001314 <ethernetif_input+0x100>)
    {
      do
      {
        LOCK_TCPIP_CORE();
 800121e:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8001318 <ethernetif_input+0x104>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8001222:	f04f 31ff 	mov.w	r1, #4294967295
 8001226:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8001228:	f004 f9e7 	bl	80055fa <osSemaphoreWait>
 800122c:	4607      	mov	r7, r0
 800122e:	2800      	cmp	r0, #0
 8001230:	d1f7      	bne.n	8001222 <ethernetif_input+0xe>
        LOCK_TCPIP_CORE();
 8001232:	4658      	mov	r0, fp
 8001234:	f00d f9ae 	bl	800e594 <sys_mutex_lock>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 8001238:	4628      	mov	r0, r5
 800123a:	f001 f9a3 	bl	8002584 <HAL_ETH_GetReceivedFrame_IT>
 800123e:	4606      	mov	r6, r0
 8001240:	b130      	cbz	r0, 8001250 <ethernetif_input+0x3c>
    return NULL;
 8001242:	2400      	movs	r4, #0
          {
            pbuf_free(p);
          }
        }

        UNLOCK_TCPIP_CORE();
 8001244:	4658      	mov	r0, fp
 8001246:	f00d f9aa 	bl	800e59e <sys_mutex_unlock>

      }while(p!=NULL);
 800124a:	2c00      	cmp	r4, #0
 800124c:	d1f1      	bne.n	8001232 <ethernetif_input+0x1e>
 800124e:	e7e8      	b.n	8001222 <ethernetif_input+0xe>
  len = EthHandle.RxFrameInfos.length;
 8001250:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  if (len > 0)
 8001252:	b9e1      	cbnz	r1, 800128e <ethernetif_input+0x7a>
  struct pbuf *p = NULL, *q = NULL;
 8001254:	2400      	movs	r4, #0
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8001256:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8001258:	2200      	movs	r2, #0
 800125a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800125c:	4282      	cmp	r2, r0
 800125e:	d151      	bne.n	8001304 <ethernetif_input+0xf0>
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8001260:	682b      	ldr	r3, [r5, #0]
  EthHandle.RxFrameInfos.SegCount =0;
 8001262:	63af      	str	r7, [r5, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8001264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	0612      	lsls	r2, r2, #24
 800126c:	d502      	bpl.n	8001274 <ethernetif_input+0x60>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	615a      	str	r2, [r3, #20]
    EthHandle.Instance->DMARPDR = 0;
 8001272:	609f      	str	r7, [r3, #8]
        if (p != NULL)
 8001274:	2c00      	cmp	r4, #0
 8001276:	d0e4      	beq.n	8001242 <ethernetif_input+0x2e>
          if (netif->input( p, netif) != ERR_OK )
 8001278:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800127c:	4649      	mov	r1, r9
 800127e:	4620      	mov	r0, r4
 8001280:	4798      	blx	r3
 8001282:	2800      	cmp	r0, #0
 8001284:	d0de      	beq.n	8001244 <ethernetif_input+0x30>
            pbuf_free(p);
 8001286:	4620      	mov	r0, r4
 8001288:	f009 f892 	bl	800a3b0 <pbuf_free>
 800128c:	e7da      	b.n	8001244 <ethernetif_input+0x30>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800128e:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8001292:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8001296:	f009 f8f3 	bl	800a480 <pbuf_alloc>
  if (p != NULL)
 800129a:	4604      	mov	r4, r0
 800129c:	2800      	cmp	r0, #0
 800129e:	d0d9      	beq.n	8001254 <ethernetif_input+0x40>
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 80012a0:	f8cd 8004 	str.w	r8, [sp, #4]
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 80012a4:	4680      	mov	r8, r0
 80012a6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
      byteslefttocopy = q->len;
 80012aa:	f8b8 e00a 	ldrh.w	lr, [r8, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012ae:	46b4      	mov	ip, r6
      payloadoffset = 0;
 80012b0:	2300      	movs	r3, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012b2:	9a01      	ldr	r2, [sp, #4]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012b4:	eb0c 060e 	add.w	r6, ip, lr
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80012bc:	eb02 010c 	add.w	r1, r2, ip
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012c4:	4418      	add	r0, r3
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012c6:	4296      	cmp	r6, r2
 80012c8:	d808      	bhi.n	80012dc <ethernetif_input+0xc8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80012ca:	4672      	mov	r2, lr
 80012cc:	f00d f9e8 	bl	800e6a0 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80012d0:	f8d8 8000 	ldr.w	r8, [r8]
 80012d4:	f1b8 0f00 	cmp.w	r8, #0
 80012d8:	d1e7      	bne.n	80012aa <ethernetif_input+0x96>
 80012da:	e7bc      	b.n	8001256 <ethernetif_input+0x42>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012dc:	f5cc 62be 	rsb	r2, ip, #1520	; 0x5f0
 80012e0:	9303      	str	r3, [sp, #12]
 80012e2:	3204      	adds	r2, #4
 80012e4:	9202      	str	r2, [sp, #8]
 80012e6:	f00d f9db 	bl	800e6a0 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80012ea:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80012ee:	f2a6 5ef4 	subw	lr, r6, #1524	; 0x5f4
        bufferoffset = 0;
 80012f2:	f04f 0c00 	mov.w	ip, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80012f6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80012fa:	9301      	str	r3, [sp, #4]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80012fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001300:	4413      	add	r3, r2
        bufferoffset = 0;
 8001302:	e7d6      	b.n	80012b2 <ethernetif_input+0x9e>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8001304:	6819      	ldr	r1, [r3, #0]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8001306:	3201      	adds	r2, #1
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8001308:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800130c:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800130e:	68db      	ldr	r3, [r3, #12]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8001310:	e7a4      	b.n	800125c <ethernetif_input+0x48>
 8001312:	bf00      	nop
 8001314:	20000224 	.word	0x20000224
 8001318:	20006994 	.word	0x20006994

0800131c <HAL_ETH_MspInit>:
{
 800131c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4c36      	ldr	r4, [pc, #216]	; (80013f8 <HAL_ETH_MspInit+0xdc>)
{
 8001320:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8001322:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001324:	4835      	ldr	r0, [pc, #212]	; (80013fc <HAL_ETH_MspInit+0xe0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001328:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6323      	str	r3, [r4, #48]	; 0x30
 8001330:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6323      	str	r3, [r4, #48]	; 0x30
 8001342:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6323      	str	r3, [r4, #48]	; 0x30
 8001354:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800135e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001364:	6323      	str	r3, [r4, #48]	; 0x30
 8001366:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136c:	9303      	str	r3, [sp, #12]
 800136e:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8001374:	2302      	movs	r3, #2
 8001376:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800137a:	230b      	movs	r3, #11
 800137c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800137e:	2386      	movs	r3, #134	; 0x86
 8001380:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001382:	f001 fb31 	bl	80029e8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8001386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800138a:	a907      	add	r1, sp, #28
 800138c:	481c      	ldr	r0, [pc, #112]	; (8001400 <HAL_ETH_MspInit+0xe4>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 800138e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001390:	f001 fb2a 	bl	80029e8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8001394:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001396:	a907      	add	r1, sp, #28
 8001398:	481a      	ldr	r0, [pc, #104]	; (8001404 <HAL_ETH_MspInit+0xe8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800139a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800139c:	f001 fb24 	bl	80029e8 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 80013a0:	f642 0304 	movw	r3, #10244	; 0x2804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80013a4:	a907      	add	r1, sp, #28
 80013a6:	4818      	ldr	r0, [pc, #96]	; (8001408 <HAL_ETH_MspInit+0xec>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 80013a8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80013aa:	f001 fb1d 	bl	80029e8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80013ae:	462a      	mov	r2, r5
 80013b0:	2107      	movs	r1, #7
 80013b2:	203d      	movs	r0, #61	; 0x3d
 80013b4:	f000 fee6 	bl	8002184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80013b8:	203d      	movs	r0, #61	; 0x3d
 80013ba:	f000 ff15 	bl	80021e8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 80013be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c4:	6323      	str	r3, [r4, #48]	; 0x30
 80013c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013cc:	9304      	str	r3, [sp, #16]
 80013ce:	9b04      	ldr	r3, [sp, #16]
 80013d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013d6:	6323      	str	r3, [r4, #48]	; 0x30
 80013d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013de:	9305      	str	r3, [sp, #20]
 80013e0:	9b05      	ldr	r3, [sp, #20]
 80013e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013e8:	6323      	str	r3, [r4, #48]	; 0x30
 80013ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013f0:	9306      	str	r3, [sp, #24]
 80013f2:	9b06      	ldr	r3, [sp, #24]
}
 80013f4:	b00d      	add	sp, #52	; 0x34
 80013f6:	bd30      	pop	{r4, r5, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40021800 	.word	0x40021800

0800140c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800140c:	4b01      	ldr	r3, [pc, #4]	; (8001414 <HAL_ETH_RxCpltCallback+0x8>)
 800140e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001410:	f004 b918 	b.w	8005644 <osSemaphoreRelease>
 8001414:	20000224 	.word	0x20000224

08001418 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800141a:	4604      	mov	r4, r0
{
 800141c:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800141e:	b930      	cbnz	r0, 800142e <ethernetif_init+0x16>
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <ethernetif_init+0xcc>)
 8001422:	f240 12d3 	movw	r2, #467	; 0x1d3
 8001426:	4930      	ldr	r1, [pc, #192]	; (80014e8 <ethernetif_init+0xd0>)
 8001428:	4830      	ldr	r0, [pc, #192]	; (80014ec <ethernetif_init+0xd4>)
 800142a:	f00d fdd3 	bl	800efd4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800142e:	f247 4373 	movw	r3, #29811	; 0x7473
  EthHandle.Instance = ETH;  
 8001432:	4d2f      	ldr	r5, [pc, #188]	; (80014f0 <ethernetif_init+0xd8>)
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8001434:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  netif->name[0] = IFNAME0;
 8001438:	8663      	strh	r3, [r4, #50]	; 0x32

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <ethernetif_init+0xdc>)
 800143c:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <ethernetif_init+0xe0>)
 8001440:	61a3      	str	r3, [r4, #24]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <ethernetif_init+0xe4>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	889b      	ldrh	r3, [r3, #4]
 8001448:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 800144a:	4628      	mov	r0, r5
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 800144c:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;  
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <ethernetif_init+0xe8>)
 8001452:	602b      	str	r3, [r5, #0]
  EthHandle.Init.MACAddr = macaddress;
 8001454:	ab01      	add	r3, sp, #4
 8001456:	616b      	str	r3, [r5, #20]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8001458:	2301      	movs	r3, #1
 800145a:	e9c5 3201 	strd	r3, r2, [r5, #4]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800145e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8001462:	61ab      	str	r3, [r5, #24]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001464:	2300      	movs	r3, #0
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8001466:	60ea      	str	r2, [r5, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001468:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800146c:	61eb      	str	r3, [r5, #28]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800146e:	622a      	str	r2, [r5, #32]
  EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001470:	822b      	strh	r3, [r5, #16]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 8001472:	f001 f97f 	bl	8002774 <HAL_ETH_Init>
 8001476:	b928      	cbnz	r0, 8001484 <ethernetif_init+0x6c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8001478:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8001484:	2304      	movs	r3, #4
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <ethernetif_init+0xec>)
 8001488:	491f      	ldr	r1, [pc, #124]	; (8001508 <ethernetif_init+0xf0>)
  netif->hwaddr[2] =  MAC_ADDR2;
 800148a:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <ethernetif_init+0xd8>)
 800148e:	f000 ff91 	bl	80023b4 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <ethernetif_init+0xf4>)
 8001494:	2304      	movs	r3, #4
 8001496:	491e      	ldr	r1, [pc, #120]	; (8001510 <ethernetif_init+0xf8>)
 8001498:	4815      	ldr	r0, [pc, #84]	; (80014f0 <ethernetif_init+0xd8>)
 800149a:	f000 ffc8 	bl	800242e <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[2] =  MAC_ADDR2;
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <ethernetif_init+0xfc>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80014a0:	4e1d      	ldr	r6, [pc, #116]	; (8001518 <ethernetif_init+0x100>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80014a2:	2101      	movs	r1, #1
 80014a4:	4668      	mov	r0, sp
  osSemaphoreDef(SEM);
 80014a6:	9700      	str	r7, [sp, #0]
  netif->hwaddr[2] =  MAC_ADDR2;
 80014a8:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80014ac:	2306      	movs	r3, #6
 80014ae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80014b2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80014b6:	f043 030a 	orr.w	r3, r3, #10
 80014ba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80014be:	f004 f887 	bl	80055d0 <osSemaphoreCreate>
 80014c2:	64a8      	str	r0, [r5, #72]	; 0x48
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80014c4:	ad03      	add	r5, sp, #12
 80014c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 80014cc:	4621      	mov	r1, r4
 80014ce:	a803      	add	r0, sp, #12
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80014d0:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 80014d2:	f004 f803 	bl	80054dc <osThreadCreate>
  HAL_ETH_Start(&EthHandle);
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <ethernetif_init+0xd8>)
 80014d8:	f001 fa48 	bl	800296c <HAL_ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80014dc:	4638      	mov	r0, r7
 80014de:	b009      	add	sp, #36	; 0x24
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0801a6e9 	.word	0x0801a6e9
 80014e8:	0801b69d 	.word	0x0801b69d
 80014ec:	0801a72c 	.word	0x0801a72c
 80014f0:	20000224 	.word	0x20000224
 80014f4:	08008ad5 	.word	0x08008ad5
 80014f8:	08001179 	.word	0x08001179
 80014fc:	080115e0 	.word	0x080115e0
 8001500:	40028000 	.word	0x40028000
 8001504:	2004d8d0 	.word	0x2004d8d0
 8001508:	2004c080 	.word	0x2004c080
 800150c:	2004c100 	.word	0x2004c100
 8001510:	2004c000 	.word	0x2004c000
 8001514:	000205dc 	.word	0x000205dc
 8001518:	080115e8 	.word	0x080115e8

0800151c <sys_now>:
  * @param  None
  * @retval Time
  */
u32_t sys_now(void)
{
  return HAL_GetTick();
 800151c:	f000 be08 	b.w	8002130 <HAL_GetTick>

08001520 <setHI2C>:
  * @param conn: pointer on connection structure 
  * @retval None
  */

void setHI2C(I2C_HandleTypeDef* hi2c1){
	hi2c = hi2c1;
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <setHI2C+0x14>)
	memset(pressureValues, 0,12);
 8001522:	2200      	movs	r2, #0
	hi2c = hi2c1;
 8001524:	460b      	mov	r3, r1
	memset(pressureValues, 0,12);
 8001526:	604a      	str	r2, [r1, #4]
	hi2c = hi2c1;
 8001528:	f843 0b04 	str.w	r0, [r3], #4
	memset(pressureValues, 0,12);
 800152c:	e9c3 2201 	strd	r2, r2, [r3, #4]
	//start = time(NULL);
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000270 	.word	0x20000270

08001538 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8001538:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	data = (uint8_t)(PRESSURE_DATA_RATE_7Hz | POWER_DOWN);
 800153c:	4d70      	ldr	r5, [pc, #448]	; (8001700 <http_server_netconn_init+0x1c8>)
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 800153e:	2401      	movs	r4, #1
 8001540:	2632      	movs	r6, #50	; 0x32
	data = (uint8_t)(PRESSURE_DATA_RATE_7Hz | POWER_DOWN);
 8001542:	23a0      	movs	r3, #160	; 0xa0
 8001544:	462f      	mov	r7, r5
	  	  data = 0;
 8001546:	f04f 0800 	mov.w	r8, #0
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 800154a:	2220      	movs	r2, #32
 800154c:	21ba      	movs	r1, #186	; 0xba
	data = (uint8_t)(PRESSURE_DATA_RATE_7Hz | POWER_DOWN);
 800154e:	f807 3f34 	strb.w	r3, [r7, #52]!
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001552:	4623      	mov	r3, r4
 8001554:	9700      	str	r7, [sp, #0]
 8001556:	6828      	ldr	r0, [r5, #0]
 8001558:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800155c:	f001 fd10 	bl	8002f80 <HAL_I2C_Mem_Write>
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x10, 1, &data, 1, 50);
 8001560:	4623      	mov	r3, r4
 8001562:	9700      	str	r7, [sp, #0]
 8001564:	2210      	movs	r2, #16
 8001566:	21ba      	movs	r1, #186	; 0xba
 8001568:	6828      	ldr	r0, [r5, #0]
	  	  data = 0;
 800156a:	f885 8034 	strb.w	r8, [r5, #52]	; 0x34
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x10, 1, &data, 1, 50);
 800156e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001572:	f001 fd05 	bl	8002f80 <HAL_I2C_Mem_Write>

	  	  data = POWER_DOWN | 0b00000010;
	  	  HAL_I2C_Mem_Write(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001576:	9700      	str	r7, [sp, #0]
 8001578:	462f      	mov	r7, r5
	  	  data = POWER_DOWN | 0b00000010;
 800157a:	2382      	movs	r3, #130	; 0x82
	  	  HAL_I2C_Mem_Write(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 800157c:	2220      	movs	r2, #32
 800157e:	21be      	movs	r1, #190	; 0xbe
	  	  data = POWER_DOWN | 0b00000010;
 8001580:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	  	  HAL_I2C_Mem_Write(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001584:	4623      	mov	r3, r4
 8001586:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800158a:	f857 0b35 	ldr.w	r0, [r7], #53
 800158e:	f001 fcf7 	bl	8002f80 <HAL_I2C_Mem_Write>

	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3C, 1, &rawT0[0], 1, 50);
 8001592:	4623      	mov	r3, r4
 8001594:	9700      	str	r7, [sp, #0]
 8001596:	462f      	mov	r7, r5
 8001598:	223c      	movs	r2, #60	; 0x3c
 800159a:	21be      	movs	r1, #190	; 0xbe
 800159c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015a0:	f857 0b36 	ldr.w	r0, [r7], #54
 80015a4:	f001 fda2 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3D, 1, &rawT0[1], 1, 50);
 80015a8:	4623      	mov	r3, r4
 80015aa:	9700      	str	r7, [sp, #0]
 80015ac:	462f      	mov	r7, r5
 80015ae:	223d      	movs	r2, #61	; 0x3d
 80015b0:	21be      	movs	r1, #190	; 0xbe
 80015b2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015b6:	f857 0b37 	ldr.w	r0, [r7], #55
 80015ba:	f001 fd97 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3E, 1, &rawT1[0], 1, 50);
 80015be:	4623      	mov	r3, r4
 80015c0:	9700      	str	r7, [sp, #0]
 80015c2:	462f      	mov	r7, r5
 80015c4:	223e      	movs	r2, #62	; 0x3e
 80015c6:	21be      	movs	r1, #190	; 0xbe
 80015c8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015cc:	f857 0b38 	ldr.w	r0, [r7], #56
 80015d0:	f001 fd8c 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3F, 1, &rawT1[1], 1, 50);
 80015d4:	4623      	mov	r3, r4
 80015d6:	9700      	str	r7, [sp, #0]
 80015d8:	462f      	mov	r7, r5
 80015da:	223f      	movs	r2, #63	; 0x3f
 80015dc:	21be      	movs	r1, #190	; 0xbe
 80015de:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015e2:	f857 0b39 	ldr.w	r0, [r7], #57
 80015e6:	f001 fd81 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x32, 1, &Tdeg[0], 1, 50);
 80015ea:	4623      	mov	r3, r4
 80015ec:	9700      	str	r7, [sp, #0]
 80015ee:	462f      	mov	r7, r5
 80015f0:	4632      	mov	r2, r6
 80015f2:	21be      	movs	r1, #190	; 0xbe
 80015f4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015f8:	f857 0b3a 	ldr.w	r0, [r7], #58
 80015fc:	f001 fd76 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x33, 1, &Tdeg[1], 1, 50);
 8001600:	4623      	mov	r3, r4
 8001602:	9700      	str	r7, [sp, #0]
 8001604:	462f      	mov	r7, r5
 8001606:	2233      	movs	r2, #51	; 0x33
 8001608:	21be      	movs	r1, #190	; 0xbe
 800160a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800160e:	f857 0b3b 	ldr.w	r0, [r7], #59
 8001612:	f001 fd6b 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x35, 1, &t0t1MSB, 1, 50);
 8001616:	4623      	mov	r3, r4
 8001618:	9700      	str	r7, [sp, #0]
 800161a:	2235      	movs	r2, #53	; 0x35
 800161c:	21be      	movs	r1, #190	; 0xbe
 800161e:	6828      	ldr	r0, [r5, #0]

	  	  T0 = rawT0[0] + (rawT0[1] << 8);
	  	  T1 = rawT1[0] + (rawT1[1] << 8);

	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001620:	462f      	mov	r7, r5
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x35, 1, &t0t1MSB, 1, 50);
 8001622:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001626:	f001 fd61 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  T0 = rawT0[0] + (rawT0[1] << 8);
 800162a:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
 800162e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001632:	21be      	movs	r1, #190	; 0xbe
	  	  T0 = rawT0[0] + (rawT0[1] << 8);
 8001634:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	  	  T1 = rawT1[0] + (rawT1[1] << 8);
 8001638:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
	  	  T0 = rawT0[0] + (rawT0[1] << 8);
 800163c:	87ab      	strh	r3, [r5, #60]	; 0x3c
	  	  T1 = rawT1[0] + (rawT1[1] << 8);
 800163e:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8001642:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001646:	2236      	movs	r2, #54	; 0x36
	  	  T1 = rawT1[0] + (rawT1[1] << 8);
 8001648:	87eb      	strh	r3, [r5, #62]	; 0x3e
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 800164a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	4623      	mov	r3, r4
 8001652:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001656:	f857 0b41 	ldr.w	r0, [r7], #65
 800165a:	f001 fd47 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x37, 1, &rawH0[1], 1, 50);
 800165e:	4623      	mov	r3, r4
 8001660:	9700      	str	r7, [sp, #0]
 8001662:	462f      	mov	r7, r5
 8001664:	2237      	movs	r2, #55	; 0x37
 8001666:	21be      	movs	r1, #190	; 0xbe
 8001668:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800166c:	f857 0b42 	ldr.w	r0, [r7], #66
 8001670:	f001 fd3c 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3A, 1, &rawH1[0], 1, 50);
 8001674:	4623      	mov	r3, r4
 8001676:	9700      	str	r7, [sp, #0]
 8001678:	462f      	mov	r7, r5
 800167a:	223a      	movs	r2, #58	; 0x3a
 800167c:	21be      	movs	r1, #190	; 0xbe
 800167e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001682:	f857 0b43 	ldr.w	r0, [r7], #67
 8001686:	f001 fd31 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3B, 1, &rawH1[1], 1, 50);
 800168a:	4623      	mov	r3, r4
 800168c:	9700      	str	r7, [sp, #0]
 800168e:	462f      	mov	r7, r5
 8001690:	223b      	movs	r2, #59	; 0x3b
 8001692:	21be      	movs	r1, #190	; 0xbe
 8001694:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001698:	f857 0b44 	ldr.w	r0, [r7], #68
 800169c:	f001 fd26 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x30, 1, &Hdeg[0], 1, 50);
 80016a0:	4623      	mov	r3, r4
 80016a2:	9700      	str	r7, [sp, #0]
 80016a4:	462f      	mov	r7, r5
 80016a6:	2230      	movs	r2, #48	; 0x30
 80016a8:	21be      	movs	r1, #190	; 0xbe
 80016aa:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016ae:	f857 0b45 	ldr.w	r0, [r7], #69
 80016b2:	f001 fd1b 	bl	80030ec <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x31, 1, &Hdeg[1], 1, 50);
 80016b6:	4623      	mov	r3, r4
 80016b8:	2231      	movs	r2, #49	; 0x31
 80016ba:	21be      	movs	r1, #190	; 0xbe
 80016bc:	6828      	ldr	r0, [r5, #0]
 80016be:	9700      	str	r7, [sp, #0]
 80016c0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016c4:	f001 fd12 	bl	80030ec <HAL_I2C_Mem_Read>

	  	  H0 = rawH0[0] + (rawH0[1] << 8);
 80016c8:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
 80016cc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <http_server_netconn_init+0x1cc>)
	  	  H0 = rawH0[0] + (rawH0[1] << 8);
 80016d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016d6:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016da:	9400      	str	r4, [sp, #0]
	  	  H0 = rawH0[0] + (rawH0[1] << 8);
 80016dc:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016e0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <http_server_netconn_init+0x1d0>)
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016ea:	4642      	mov	r2, r8
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016ec:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f4:	f00c ff56 	bl	800e5a4 <sys_thread_new>
}
 80016f8:	b004      	add	sp, #16
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fe:	bf00      	nop
 8001700:	20000270 	.word	0x20000270
 8001704:	08001b5d 	.word	0x08001b5d
 8001708:	0801a754 	.word	0x0801a754

0800170c <DynWebPage>:
		  "Calibri; font-style: normal\"><strong>Station meteo domestique</strong></span></i></b><span style=\"font-size: 13.5pt;\">"
		  "</span></p></div><div class=\"MsoNormal\" style=\"text-align: center;\" align=\"center\"><hr align=\"center\" size=\"3\" "
		  "width=\"100%\"></div><div style=\"position:absolute; width: 100%;\">";

void DynWebPage(struct netconn *conn)
{
 800170c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001710:	ed2d 8b02 	vpush	{d8}
 8001714:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
  //netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
  //<meta http-equiv=\"refresh\" content=\"2\">

  //HAL_Delay(1000);

  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 8001718:	4c43      	ldr	r4, [pc, #268]	; (8001828 <DynWebPage+0x11c>)
  portCHAR valeur[10] = {0};
 800171a:	2100      	movs	r1, #0
  memset(PAGE_BODY, 0,1024);
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
{
 8001720:	4606      	mov	r6, r0
  memset(PAGE_BODY, 0,1024);
 8001722:	a808      	add	r0, sp, #32
  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 8001724:	2501      	movs	r5, #1
 8001726:	2732      	movs	r7, #50	; 0x32
 8001728:	46a0      	mov	r8, r4
  portCHAR valeur[10] = {0};
 800172a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800172e:	e9cd 1105 	strd	r1, r1, [sp, #20]
  memset(PAGE_BODY, 0,1024);
 8001732:	f00c ffdd 	bl	800e6f0 <memset>
  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 8001736:	f104 034a 	add.w	r3, r4, #74	; 0x4a
 800173a:	2228      	movs	r2, #40	; 0x28
 800173c:	21ba      	movs	r1, #186	; 0xba
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	462b      	mov	r3, r5
 8001742:	e9cd 5701 	strd	r5, r7, [sp, #4]
 8001746:	f858 0b4b 	ldr.w	r0, [r8], #75
 800174a:	f001 fccf 	bl	80030ec <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x29, 1, &rawPressureData[1], 1, 50);
 800174e:	462b      	mov	r3, r5
 8001750:	f8cd 8000 	str.w	r8, [sp]
 8001754:	46a0      	mov	r8, r4
 8001756:	2229      	movs	r2, #41	; 0x29
 8001758:	21ba      	movs	r1, #186	; 0xba
 800175a:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800175e:	f858 0b4c 	ldr.w	r0, [r8], #76
 8001762:	f001 fcc3 	bl	80030ec <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2A, 1, &rawPressureData[2], 1, 50);
 8001766:	462b      	mov	r3, r5
 8001768:	f8cd 8000 	str.w	r8, [sp]
 800176c:	46a0      	mov	r8, r4
 800176e:	222a      	movs	r2, #42	; 0x2a
 8001770:	21ba      	movs	r1, #186	; 0xba
 8001772:	e9cd 5701 	strd	r5, r7, [sp, #4]
 8001776:	f858 0b4d 	ldr.w	r0, [r8], #77
 800177a:	f001 fcb7 	bl	80030ec <HAL_I2C_Mem_Read>

  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2B, 1, &rawTemperatureData[0], 1, 50);
 800177e:	462b      	mov	r3, r5
 8001780:	f8cd 8000 	str.w	r8, [sp]
 8001784:	46a0      	mov	r8, r4
 8001786:	222b      	movs	r2, #43	; 0x2b
 8001788:	21ba      	movs	r1, #186	; 0xba
 800178a:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800178e:	f858 0b4e 	ldr.w	r0, [r8], #78
 8001792:	f001 fcab 	bl	80030ec <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2C, 1, &rawTemperatureData[1], 1, 50);
 8001796:	462b      	mov	r3, r5
 8001798:	222c      	movs	r2, #44	; 0x2c
 800179a:	21ba      	movs	r1, #186	; 0xba
 800179c:	f8cd 8000 	str.w	r8, [sp]
 80017a0:	e9cd 5701 	strd	r5, r7, [sp, #4]
 80017a4:	6820      	ldr	r0, [r4, #0]
 80017a6:	f001 fca1 	bl	80030ec <HAL_I2C_Mem_Read>

  pressureData = rawPressureData[0];
  pressureData |= (rawPressureData[1] << 8);
  if(rawPressureData[2] & 0x80){
 80017aa:	f994 204c 	ldrsb.w	r2, [r4, #76]	; 0x4c
 80017ae:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80017b2:	2a00      	cmp	r2, #0
  pressureData |= (rawPressureData[1] << 8);
 80017b4:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
  if(rawPressureData[2] & 0x80){
 80017b8:	ea4f 4303 	mov.w	r3, r3, lsl #16
	  pressureData |= (rawPressureData[2] << 16);
 80017bc:	bfb6      	itet	lt
 80017be:	4303      	orrlt	r3, r0
  	  pressureData |= (0xFF << 24);
  }else{
  	  pressureData |= (rawPressureData[2] << 16);
 80017c0:	4318      	orrge	r0, r3
  	  pressureData |= (0xFF << 24);
 80017c2:	f043 407f 	orrlt.w	r0, r3, #4278190080	; 0xff000000
  	  pressureData |= (rawPressureData[2] << 16);
 80017c6:	6520      	str	r0, [r4, #80]	; 0x50
  }
  pressure = pressureData/4096.0;
 80017c8:	f7fe fedc 	bl	8000584 <__aeabi_i2d>
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <DynWebPage+0x120>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	f7fe ff42 	bl	8000658 <__aeabi_dmul>
 80017d4:	f7ff fa18 	bl	8000c08 <__aeabi_d2f>

  //end = time(NULL);
  if(tcnt > 150){
 80017d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  pressure = pressureData/4096.0;
 80017da:	6560      	str	r0, [r4, #84]	; 0x54
  if(tcnt > 150){
 80017dc:	2b96      	cmp	r3, #150	; 0x96
 80017de:	d947      	bls.n	8001870 <DynWebPage+0x164>
	  start = time(NULL);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f00d fc91 	bl	800f108 <time>
	  for(uint8_t i = 0; i < 11; i++){
		  pressureValues[11 - i] = pressureValues[10 - i];
 80017e6:	222c      	movs	r2, #44	; 0x2c
	  start = time(NULL);
 80017e8:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
		  pressureValues[11 - i] = pressureValues[10 - i];
 80017ec:	4910      	ldr	r1, [pc, #64]	; (8001830 <DynWebPage+0x124>)
 80017ee:	1d08      	adds	r0, r1, #4
 80017f0:	f00c ff64 	bl	800e6bc <memmove>
	  }
	  pressureValues[0] = pressure;
	  pente = 0;
	  for(k = 0; (k < 11) && (pressureValues[k + 1] != 0); k++){
 80017f4:	2200      	movs	r2, #0
	  pressureValues[0] = pressure;
 80017f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
	  pente = 0;
 80017f8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8001834 <DynWebPage+0x128>
	  for(k = 0; (k < 11) && (pressureValues[k + 1] != 0); k++){
 80017fc:	4611      	mov	r1, r2
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <DynWebPage+0x124>)
	  pressureValues[0] = pressure;
 8001800:	6063      	str	r3, [r4, #4]
	  pente = 0;
 8001802:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
	  for(k = 0; (k < 11) && (pressureValues[k + 1] != 0); k++){
 8001806:	66e2      	str	r2, [r4, #108]	; 0x6c
 8001808:	ed90 7a01 	vldr	s14, [r0, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	4605      	mov	r5, r0
 8001810:	3101      	adds	r1, #1
 8001812:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d10d      	bne.n	8001838 <DynWebPage+0x12c>
 800181c:	b1e2      	cbz	r2, 8001858 <DynWebPage+0x14c>
 800181e:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
 8001822:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001824:	e018      	b.n	8001858 <DynWebPage+0x14c>
 8001826:	bf00      	nop
 8001828:	20000270 	.word	0x20000270
 800182c:	3f300000 	.word	0x3f300000
 8001830:	20000274 	.word	0x20000274
 8001834:	00000000 	.word	0x00000000
		  pente += (pressureValues[k + 1] - pressureValues[k]);
 8001838:	edd5 6a00 	vldr	s13, [r5]
	  for(k = 0; (k < 11) && (pressureValues[k + 1] != 0); k++){
 800183c:	290b      	cmp	r1, #11
 800183e:	f100 0004 	add.w	r0, r0, #4
 8001842:	f04f 0201 	mov.w	r2, #1
		  pente += (pressureValues[k + 1] - pressureValues[k]);
 8001846:	ee37 7a66 	vsub.f32	s14, s14, s13
 800184a:	ee77 7a87 	vadd.f32	s15, s15, s14
	  for(k = 0; (k < 11) && (pressureValues[k + 1] != 0); k++){
 800184e:	d1db      	bne.n	8001808 <DynWebPage+0xfc>
 8001850:	460b      	mov	r3, r1
 8001852:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
 8001856:	66e1      	str	r1, [r4, #108]	; 0x6c
	  }
	  pente /= k;
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
	  tcnt = 0;
 8001860:	2300      	movs	r3, #0
	  pente /= k;
 8001862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  tcnt = 0;
 8001866:	65a3      	str	r3, [r4, #88]	; 0x58
	  pente /= k;
 8001868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800186c:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
  }
  tcnt++;
 8001870:	6da3      	ldr	r3, [r4, #88]	; 0x58

  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
  temperature = 42.5 + temperatureData/480.0;


  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 8001872:	2701      	movs	r7, #1
  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
 8001874:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 8001878:	f04f 0932 	mov.w	r9, #50	; 0x32
  tcnt++;
 800187c:	3301      	adds	r3, #1
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 800187e:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8001b58 <DynWebPage+0x44c>
  tcnt++;
 8001882:	65a3      	str	r3, [r4, #88]	; 0x58
  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
 8001884:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8001888:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800188c:	b200      	sxth	r0, r0
 800188e:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
  temperature = 42.5 + temperatureData/480.0;
 8001892:	f7fe fe77 	bl	8000584 <__aeabi_i2d>
 8001896:	2200      	movs	r2, #0
 8001898:	4b9d      	ldr	r3, [pc, #628]	; (8001b10 <DynWebPage+0x404>)
 800189a:	f7ff f807 	bl	80008ac <__aeabi_ddiv>
 800189e:	2200      	movs	r2, #0
 80018a0:	4b9c      	ldr	r3, [pc, #624]	; (8001b14 <DynWebPage+0x408>)
 80018a2:	f7fe fd23 	bl	80002ec <__adddf3>
 80018a6:	f7ff f9af 	bl	8000c08 <__aeabi_d2f>
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 80018aa:	463b      	mov	r3, r7
  temperature = 42.5 + temperatureData/480.0;
 80018ac:	6760      	str	r0, [r4, #116]	; 0x74
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 80018ae:	222a      	movs	r2, #42	; 0x2a
 80018b0:	f8cd 8000 	str.w	r8, [sp]
 80018b4:	21be      	movs	r1, #190	; 0xbe
 80018b6:	e9cd 7901 	strd	r7, r9, [sp, #4]
 80018ba:	6820      	ldr	r0, [r4, #0]
 80018bc:	f001 fc16 	bl	80030ec <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2B, 1, &rawTemperatureData2[1], 1, 50);
 80018c0:	eb08 0307 	add.w	r3, r8, r7
 80018c4:	222b      	movs	r2, #43	; 0x2b
 80018c6:	21be      	movs	r1, #190	; 0xbe
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	463b      	mov	r3, r7
 80018cc:	e9cd 7901 	strd	r7, r9, [sp, #4]
 80018d0:	6820      	ldr	r0, [r4, #0]
 80018d2:	f001 fc0b 	bl	80030ec <HAL_I2C_Mem_Read>

  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 80018d6:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 80018da:	f894 a03b 	ldrb.w	sl, [r4, #59]	; 0x3b
  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 80018de:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 80018e2:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 80018e6:	eb05 2503 	add.w	r5, r5, r3, lsl #8
  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 80018ea:	ea4f 230a 	mov.w	r3, sl, lsl #8
  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 80018ee:	b22d      	sxth	r5, r5
  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 80018f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 80018f4:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 80018f8:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 80018fc:	4418      	add	r0, r3
  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 80018fe:	f40a 7a40 	and.w	sl, sl, #768	; 0x300
  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 8001902:	f7fe fe3f 	bl	8000584 <__aeabi_i2d>
 8001906:	2200      	movs	r2, #0
 8001908:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800190c:	f7fe fea4 	bl	8000658 <__aeabi_dmul>
 8001910:	f7ff f97a 	bl	8000c08 <__aeabi_d2f>
 8001914:	ee08 0a10 	vmov	s16, r0
 8001918:	67e0      	str	r0, [r4, #124]	; 0x7c
  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 800191a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 800191e:	4450      	add	r0, sl
 8001920:	f7fe fe30 	bl	8000584 <__aeabi_i2d>
 8001924:	2200      	movs	r2, #0
 8001926:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800192a:	f7fe fe95 	bl	8000658 <__aeabi_dmul>
 800192e:	f7ff f96b 	bl	8000c08 <__aeabi_d2f>
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001932:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8001936:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 800193a:	ee07 0a90 	vmov	s15, r0
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 800193e:	1aad      	subs	r5, r5, r2
  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 8001940:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001944:	1a9b      	subs	r3, r3, r2
	return (b - a) * alpha + a;
 8001946:	ee77 7ac8 	vsub.f32	s15, s15, s16
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 800194a:	ee07 5a10 	vmov	s14, r5

  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 800194e:	2228      	movs	r2, #40	; 0x28
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001950:	ee06 3a90 	vmov	s13, r3
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 8001954:	f108 0310 	add.w	r3, r8, #16
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 800195c:	21be      	movs	r1, #190	; 0xbe
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 800195e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001962:	ee87 6a26 	vdiv.f32	s12, s14, s13
	return (b - a) * alpha + a;
 8001966:	eea6 8a27 	vfma.f32	s16, s12, s15
  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 800196a:	ed84 8a21 	vstr	s16, [r4, #132]	; 0x84
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	463b      	mov	r3, r7
 8001972:	e9cd 7901 	strd	r7, r9, [sp, #4]
 8001976:	6820      	ldr	r0, [r4, #0]
 8001978:	f001 fbb8 	bl	80030ec <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x29, 1, &rawHumidityData[1], 1, 50);
 800197c:	f108 0311 	add.w	r3, r8, #17
 8001980:	2229      	movs	r2, #41	; 0x29
 8001982:	21be      	movs	r1, #190	; 0xbe
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	463b      	mov	r3, r7
 8001988:	e9cd 7901 	strd	r7, r9, [sp, #4]
 800198c:	6820      	ldr	r0, [r4, #0]
 800198e:	f001 fbad 	bl	80030ec <HAL_I2C_Mem_Read>

  humidityData = rawHumidityData[0] + (rawHumidityData[1] << 8);
 8001992:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 8001996:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
  Halpha = (float)(humidityData - H0)/(H1-H0);
  humidity = lerp(Hdeg[0]/2.0, Hdeg[1]/2.0, Halpha);
 800199a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  humidityData = rawHumidityData[0] + (rawHumidityData[1] << 8);
 800199e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  Halpha = (float)(humidityData - H0)/(H1-H0);
 80019a2:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
  humidityData = rawHumidityData[0] + (rawHumidityData[1] << 8);
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
  Halpha = (float)(humidityData - H0)/(H1-H0);
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	ee07 3a10 	vmov	s14, r3
 80019c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019c4:	eec7 8a87 	vdiv.f32	s17, s15, s14
 80019c8:	edc4 8a23 	vstr	s17, [r4, #140]	; 0x8c
  humidity = lerp(Hdeg[0]/2.0, Hdeg[1]/2.0, Halpha);
 80019cc:	f7fe fdda 	bl	8000584 <__aeabi_i2d>
 80019d0:	2200      	movs	r2, #0
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <DynWebPage+0x40c>)
 80019d4:	f7fe fe40 	bl	8000658 <__aeabi_dmul>
 80019d8:	f7ff f916 	bl	8000c08 <__aeabi_d2f>
 80019dc:	ee08 0a10 	vmov	s16, r0
 80019e0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80019e4:	f7fe fdce 	bl	8000584 <__aeabi_i2d>
 80019e8:	2200      	movs	r2, #0
 80019ea:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <DynWebPage+0x40c>)
 80019ec:	f7fe fe34 	bl	8000658 <__aeabi_dmul>
 80019f0:	f7ff f90a 	bl	8000c08 <__aeabi_d2f>
	return (b - a) * alpha + a;
 80019f4:	ee07 0a90 	vmov	s15, r0

  float t1 = 0.5;
  float t2 = 0.7;
  float t3 = 5.1;

  sprintf(valeur, "%.1f %s", temperature2, "deg C");
 80019f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
	return (b - a) * alpha + a;
 80019fc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001a00:	eea8 8aa7 	vfma.f32	s16, s17, s15
  humidity = lerp(Hdeg[0]/2.0, Hdeg[1]/2.0, Halpha);
 8001a04:	ed84 8a24 	vstr	s16, [r4, #144]	; 0x90
  sprintf(valeur, "%.1f %s", temperature2, "deg C");
 8001a08:	f7fe fdce 	bl	80005a8 <__aeabi_f2d>
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4943      	ldr	r1, [pc, #268]	; (8001b1c <DynWebPage+0x410>)
 8001a10:	4602      	mov	r2, r0
 8001a12:	a805      	add	r0, sp, #20
 8001a14:	9100      	str	r1, [sp, #0]
 8001a16:	4942      	ldr	r1, [pc, #264]	; (8001b20 <DynWebPage+0x414>)
 8001a18:	f00d fb32 	bl	800f080 <siprintf>
  strcat((char *)PAGE_BODY, "<div style=\"position: relative; top:0px; float: left; width: 33%; text-align: center; font-size:30px;\"> Temperature : ");
 8001a1c:	4941      	ldr	r1, [pc, #260]	; (8001b24 <DynWebPage+0x418>)
 8001a1e:	a808      	add	r0, sp, #32
 8001a20:	f00d fb4e 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, valeur);
 8001a24:	a905      	add	r1, sp, #20
 8001a26:	a808      	add	r0, sp, #32
 8001a28:	f00d fb4a 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001a2c:	493e      	ldr	r1, [pc, #248]	; (8001b28 <DynWebPage+0x41c>)
 8001a2e:	a808      	add	r0, sp, #32
 8001a30:	f00d fb46 	bl	800f0c0 <strcat>
  sprintf(valeur, "%.1f %s", pressure, "hPa");
 8001a34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a36:	f7fe fdb7 	bl	80005a8 <__aeabi_f2d>
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	493b      	ldr	r1, [pc, #236]	; (8001b2c <DynWebPage+0x420>)
 8001a3e:	4602      	mov	r2, r0
 8001a40:	a805      	add	r0, sp, #20
 8001a42:	9100      	str	r1, [sp, #0]
 8001a44:	4936      	ldr	r1, [pc, #216]	; (8001b20 <DynWebPage+0x414>)
 8001a46:	f00d fb1b 	bl	800f080 <siprintf>
  strcat((char *)PAGE_BODY, "<div style=\"position: relative; top:0px; float: left; width: 33%; text-align: center; font-size:30px;\"> Pression : ");
 8001a4a:	4939      	ldr	r1, [pc, #228]	; (8001b30 <DynWebPage+0x424>)
 8001a4c:	a808      	add	r0, sp, #32
 8001a4e:	f00d fb37 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, valeur);
 8001a52:	a905      	add	r1, sp, #20
 8001a54:	a808      	add	r0, sp, #32
 8001a56:	f00d fb33 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001a5a:	4933      	ldr	r1, [pc, #204]	; (8001b28 <DynWebPage+0x41c>)
 8001a5c:	a808      	add	r0, sp, #32
 8001a5e:	f00d fb2f 	bl	800f0c0 <strcat>
  sprintf(valeur, "%.1f %s", humidity, "%");
 8001a62:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8001a66:	f7fe fd9f 	bl	80005a8 <__aeabi_f2d>
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4931      	ldr	r1, [pc, #196]	; (8001b34 <DynWebPage+0x428>)
 8001a6e:	4602      	mov	r2, r0
 8001a70:	a805      	add	r0, sp, #20
 8001a72:	9100      	str	r1, [sp, #0]
 8001a74:	492a      	ldr	r1, [pc, #168]	; (8001b20 <DynWebPage+0x414>)
 8001a76:	f00d fb03 	bl	800f080 <siprintf>
  strcat((char *)PAGE_BODY, "<div style=\"position: relative; top:0px; float: left; width: 32%; text-align: center; font-size:30px;\"> Humidite : ");
 8001a7a:	492f      	ldr	r1, [pc, #188]	; (8001b38 <DynWebPage+0x42c>)
 8001a7c:	a808      	add	r0, sp, #32
 8001a7e:	f00d fb1f 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, valeur);
 8001a82:	a905      	add	r1, sp, #20
 8001a84:	a808      	add	r0, sp, #32
 8001a86:	f00d fb1b 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001a8a:	4927      	ldr	r1, [pc, #156]	; (8001b28 <DynWebPage+0x41c>)
 8001a8c:	a808      	add	r0, sp, #32
 8001a8e:	f00d fb17 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001a92:	4925      	ldr	r1, [pc, #148]	; (8001b28 <DynWebPage+0x41c>)
 8001a94:	a808      	add	r0, sp, #32
 8001a96:	f00d fb13 	bl	800f0c0 <strcat>

  strcat((char *)PAGE_BODY, "<div style=\"padding-top: 150px; text-align: center; font-size: 40px\"><div>Prevision :</div>");
 8001a9a:	4928      	ldr	r1, [pc, #160]	; (8001b3c <DynWebPage+0x430>)
 8001a9c:	a808      	add	r0, sp, #32
 8001a9e:	f00d fb0f 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "<div style=\"padding-top: 150px; text-align: center; font-size: 40px; width 50%; position: relative;\"> Condition : ");
 8001aa2:	4927      	ldr	r1, [pc, #156]	; (8001b40 <DynWebPage+0x434>)
 8001aa4:	a808      	add	r0, sp, #32
 8001aa6:	f00d fb0b 	bl	800f0c0 <strcat>
  if(pressure > 955){
 8001aaa:	ed94 7a15 	vldr	s14, [r4, #84]	; 0x54
 8001aae:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001b44 <DynWebPage+0x438>
	  strcat((char *)PAGE_BODY, "anticyclone");
  } else {
	  strcat((char *)PAGE_BODY, "depression");
 8001ab2:	a808      	add	r0, sp, #32
  //strcat((char *)PAGE_BODY, "</div>");
  strcat((char *)PAGE_BODY, "</div>");
  strcat((char *)PAGE_BODY, "</div>");

  strcat((char *)PAGE_BODY, "</body></html>");
  netconn_write(conn, header, strlen(header), NETCONN_COPY);
 8001ab4:	2400      	movs	r4, #0
  if(pressure > 955){
 8001ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  strcat((char *)PAGE_BODY, "anticyclone");
 8001abe:	bfcc      	ite	gt
 8001ac0:	4921      	ldrgt	r1, [pc, #132]	; (8001b48 <DynWebPage+0x43c>)
	  strcat((char *)PAGE_BODY, "depression");
 8001ac2:	4922      	ldrle	r1, [pc, #136]	; (8001b4c <DynWebPage+0x440>)
 8001ac4:	f00d fafc 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001ac8:	4917      	ldr	r1, [pc, #92]	; (8001b28 <DynWebPage+0x41c>)
 8001aca:	a808      	add	r0, sp, #32
 8001acc:	f00d faf8 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001ad0:	4915      	ldr	r1, [pc, #84]	; (8001b28 <DynWebPage+0x41c>)
 8001ad2:	a808      	add	r0, sp, #32
 8001ad4:	f00d faf4 	bl	800f0c0 <strcat>
  strcat((char *)PAGE_BODY, "</body></html>");
 8001ad8:	491d      	ldr	r1, [pc, #116]	; (8001b50 <DynWebPage+0x444>)
 8001ada:	a808      	add	r0, sp, #32
 8001adc:	f00d faf0 	bl	800f0c0 <strcat>
  netconn_write(conn, header, strlen(header), NETCONN_COPY);
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f240 2253 	movw	r2, #595	; 0x253
 8001ae6:	491b      	ldr	r1, [pc, #108]	; (8001b54 <DynWebPage+0x448>)
 8001ae8:	4630      	mov	r0, r6
 8001aea:	9400      	str	r4, [sp, #0]
 8001aec:	f004 fa12 	bl	8005f14 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 8001af0:	a808      	add	r0, sp, #32
 8001af2:	f7fe fb97 	bl	8000224 <strlen>
 8001af6:	2301      	movs	r3, #1
 8001af8:	4602      	mov	r2, r0
 8001afa:	a908      	add	r1, sp, #32
 8001afc:	4630      	mov	r0, r6
 8001afe:	9400      	str	r4, [sp, #0]
 8001b00:	f004 fa08 	bl	8005f14 <netconn_write_partly>

}
 8001b04:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 8001b08:	ecbd 8b02 	vpop	{d8}
 8001b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b10:	407e0000 	.word	0x407e0000
 8001b14:	40454000 	.word	0x40454000
 8001b18:	3fe00000 	.word	0x3fe00000
 8001b1c:	0801a761 	.word	0x0801a761
 8001b20:	0801a759 	.word	0x0801a759
 8001b24:	0801a767 	.word	0x0801a767
 8001b28:	0801a921 	.word	0x0801a921
 8001b2c:	0801a7de 	.word	0x0801a7de
 8001b30:	0801a7e2 	.word	0x0801a7e2
 8001b34:	0801a856 	.word	0x0801a856
 8001b38:	0801a858 	.word	0x0801a858
 8001b3c:	0801a8cc 	.word	0x0801a8cc
 8001b40:	0801a928 	.word	0x0801a928
 8001b44:	446ec000 	.word	0x446ec000
 8001b48:	0801a99b 	.word	0x0801a99b
 8001b4c:	0801a9a7 	.word	0x0801a9a7
 8001b50:	0801a9b2 	.word	0x0801a9b2
 8001b54:	080115fc 	.word	0x080115fc
 8001b58:	200002e8 	.word	0x200002e8

08001b5c <http_server_netconn_thread>:
  conn = netconn_new(NETCONN_TCP);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2010      	movs	r0, #16
{ 
 8001b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  conn = netconn_new(NETCONN_TCP);
 8001b64:	4611      	mov	r1, r2
{ 
 8001b66:	b08c      	sub	sp, #48	; 0x30
  conn = netconn_new(NETCONN_TCP);
 8001b68:	f004 f8ac 	bl	8005cc4 <netconn_new_with_proto_and_callback>
  if (conn!= NULL)
 8001b6c:	4606      	mov	r6, r0
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	f000 8082 	beq.w	8001c78 <http_server_netconn_thread+0x11c>
    err = netconn_bind(conn, NULL, 80);
 8001b74:	2250      	movs	r2, #80	; 0x50
 8001b76:	2100      	movs	r1, #0
 8001b78:	f004 f91c 	bl	8005db4 <netconn_bind>
    if (err == ERR_OK)
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d17b      	bne.n	8001c78 <http_server_netconn_thread+0x11c>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8001b80:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8001ca0 <http_server_netconn_thread+0x144>
      netconn_listen(conn);
 8001b84:	21ff      	movs	r1, #255	; 0xff
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8001b86:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001ca4 <http_server_netconn_thread+0x148>
      netconn_listen(conn);
 8001b8a:	4630      	mov	r0, r6
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8001b8c:	f8df a118 	ldr.w	sl, [pc, #280]	; 8001ca8 <http_server_netconn_thread+0x14c>
      netconn_listen(conn);
 8001b90:	f004 f936 	bl	8005e00 <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 8001b94:	a904      	add	r1, sp, #16
 8001b96:	4630      	mov	r0, r6
 8001b98:	f004 f9da 	bl	8005f50 <netconn_accept>
        if(accept_err == ERR_OK)
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1f9      	bne.n	8001b94 <http_server_netconn_thread+0x38>
          http_server_serve(newconn);
 8001ba0:	9c04      	ldr	r4, [sp, #16]
  recv_err = netconn_recv(conn, &inbuf);
 8001ba2:	a905      	add	r1, sp, #20
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f004 faeb 	bl	8006180 <netconn_recv>
  if (recv_err == ERR_OK)
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d146      	bne.n	8001c3c <http_server_netconn_thread+0xe0>
    if (netconn_err(conn) == ERR_OK) 
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f004 f9bf 	bl	8005f32 <netconn_err>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d141      	bne.n	8001c3c <http_server_netconn_thread+0xe0>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8001bb8:	f10d 020e 	add.w	r2, sp, #14
 8001bbc:	a906      	add	r1, sp, #24
 8001bbe:	9805      	ldr	r0, [sp, #20]
 8001bc0:	f005 fadc 	bl	800717c <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8001bc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d937      	bls.n	8001c3c <http_server_netconn_thread+0xe0>
 8001bcc:	9d06      	ldr	r5, [sp, #24]
 8001bce:	2205      	movs	r2, #5
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f00d fa83 	bl	800f0de <strncmp>
 8001bd8:	bb80      	cbnz	r0, 8001c3c <http_server_netconn_thread+0xe0>
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8001bda:	221b      	movs	r2, #27
 8001bdc:	4649      	mov	r1, r9
 8001bde:	4628      	mov	r0, r5
 8001be0:	f00d fa7d 	bl	800f0de <strncmp>
 8001be4:	4607      	mov	r7, r0
 8001be6:	b970      	cbnz	r0, 8001c06 <http_server_netconn_thread+0xaa>
          fs_open(&file, "/STM32F7xx_files/ST.gif"); 
 8001be8:	4925      	ldr	r1, [pc, #148]	; (8001c80 <http_server_netconn_thread+0x124>)
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8001bea:	a807      	add	r0, sp, #28
 8001bec:	f00c fcfc 	bl	800e5e8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	9700      	str	r7, [sp, #0]
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8001bfa:	f004 f98b 	bl	8005f14 <netconn_write_partly>
          fs_close(&file);
 8001bfe:	a807      	add	r0, sp, #28
 8001c00:	f00c fd12 	bl	800e628 <fs_close>
 8001c04:	e01a      	b.n	8001c3c <http_server_netconn_thread+0xe0>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8001c06:	221e      	movs	r2, #30
 8001c08:	4651      	mov	r1, sl
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f00d fa67 	bl	800f0de <strncmp>
 8001c10:	4607      	mov	r7, r0
 8001c12:	b908      	cbnz	r0, 8001c18 <http_server_netconn_thread+0xbc>
          fs_open(&file, "/STM32F7xx_files/stm32.jpg"); 
 8001c14:	491b      	ldr	r1, [pc, #108]	; (8001c84 <http_server_netconn_thread+0x128>)
 8001c16:	e7e8      	b.n	8001bea <http_server_netconn_thread+0x8e>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/logo.jpg", 29) == 0)                                           
 8001c18:	221d      	movs	r2, #29
 8001c1a:	491b      	ldr	r1, [pc, #108]	; (8001c88 <http_server_netconn_thread+0x12c>)
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f00d fa5e 	bl	800f0de <strncmp>
 8001c22:	4607      	mov	r7, r0
 8001c24:	b908      	cbnz	r0, 8001c2a <http_server_netconn_thread+0xce>
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8001c26:	4919      	ldr	r1, [pc, #100]	; (8001c8c <http_server_netconn_thread+0x130>)
 8001c28:	e7df      	b.n	8001bea <http_server_netconn_thread+0x8e>
        else if(strncmp(buf, "GET /STM32F7xxTASKS.html", 24) == 0)
 8001c2a:	2218      	movs	r2, #24
 8001c2c:	4918      	ldr	r1, [pc, #96]	; (8001c90 <http_server_netconn_thread+0x134>)
 8001c2e:	4628      	mov	r0, r5
 8001c30:	f00d fa55 	bl	800f0de <strncmp>
 8001c34:	b960      	cbnz	r0, 8001c50 <http_server_netconn_thread+0xf4>
        	DynWebPage(conn);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff fd68 	bl	800170c <DynWebPage>
  netconn_close(conn);
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f004 f975 	bl	8005f2c <netconn_close>
  netbuf_delete(inbuf);
 8001c42:	9805      	ldr	r0, [sp, #20]
 8001c44:	f005 fa88 	bl	8007158 <netbuf_delete>
          netconn_delete(newconn);
 8001c48:	9804      	ldr	r0, [sp, #16]
 8001c4a:	f004 f8a5 	bl	8005d98 <netconn_delete>
 8001c4e:	e7a1      	b.n	8001b94 <http_server_netconn_thread+0x38>
        else if((strncmp(buf, "GET /index.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8001c50:	4910      	ldr	r1, [pc, #64]	; (8001c94 <http_server_netconn_thread+0x138>)
 8001c52:	4628      	mov	r0, r5
 8001c54:	f7fe fadc 	bl	8000210 <strcmp>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d0ec      	beq.n	8001c36 <http_server_netconn_thread+0xda>
 8001c5c:	2206      	movs	r2, #6
 8001c5e:	490e      	ldr	r1, [pc, #56]	; (8001c98 <http_server_netconn_thread+0x13c>)
 8001c60:	4628      	mov	r0, r5
 8001c62:	f00d fa3c 	bl	800f0de <strncmp>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d0e5      	beq.n	8001c36 <http_server_netconn_thread+0xda>
          fs_open(&file, "/404.html"); 
 8001c6a:	490c      	ldr	r1, [pc, #48]	; (8001c9c <http_server_netconn_thread+0x140>)
 8001c6c:	a807      	add	r0, sp, #28
 8001c6e:	f00c fcbb 	bl	800e5e8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001c72:	2300      	movs	r3, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	e7bd      	b.n	8001bf4 <http_server_netconn_thread+0x98>
}
 8001c78:	b00c      	add	sp, #48	; 0x30
 8001c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c7e:	bf00      	nop
 8001c80:	0801a9cb 	.word	0x0801a9cb
 8001c84:	0801a9e7 	.word	0x0801a9e7
 8001c88:	0801aa02 	.word	0x0801aa02
 8001c8c:	0801aa06 	.word	0x0801aa06
 8001c90:	0801aa20 	.word	0x0801aa20
 8001c94:	0801aa39 	.word	0x0801aa39
 8001c98:	0801aa49 	.word	0x0801aa49
 8001c9c:	0801aa50 	.word	0x0801aa50
 8001ca0:	0801a9c1 	.word	0x0801a9c1
 8001ca4:	0801a9c7 	.word	0x0801a9c7
 8001ca8:	0801a9e3 	.word	0x0801a9e3

08001cac <StartThread>:
  * @retval None
  */
static void StartThread(void const * argument)
{ 
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001cac:	2100      	movs	r1, #0
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* USE_DHCP */
  
  /* add the network interface */    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001cae:	4c1a      	ldr	r4, [pc, #104]	; (8001d18 <StartThread+0x6c>)
{ 
 8001cb0:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 8001cb2:	4608      	mov	r0, r1
{ 
 8001cb4:	b08d      	sub	sp, #52	; 0x34
  tcpip_init(NULL, NULL);
 8001cb6:	f005 fb39 	bl	800732c <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <StartThread+0x70>)
  ip_addr_set_zero_ip4(&ipaddr);
 8001cbc:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001cbe:	a905      	add	r1, sp, #20
 8001cc0:	9202      	str	r2, [sp, #8]
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <StartThread+0x74>)
  ip_addr_set_zero_ip4(&gw);
 8001cc6:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001cc8:	e9cd 3200 	strd	r3, r2, [sp]
  ip_addr_set_zero_ip4(&netmask);
 8001ccc:	e9cd 3305 	strd	r3, r3, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001cd0:	aa06      	add	r2, sp, #24
 8001cd2:	ab07      	add	r3, sp, #28
 8001cd4:	f008 f9e6 	bl	800a0a4 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f008 fa73 	bl	800a1c4 <netif_set_default>
  
  if (netif_is_link_up(&gnetif))
 8001cde:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8001ce2:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8001ce4:	075b      	lsls	r3, r3, #29
 8001ce6:	d514      	bpl.n	8001d12 <StartThread+0x66>
    netif_set_up(&gnetif);
 8001ce8:	f008 fa72 	bl	800a1d0 <netif_set_up>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001cec:	4d0d      	ldr	r5, [pc, #52]	; (8001d24 <StartThread+0x78>)
  http_server_netconn_init();
 8001cee:	f7ff fc23 	bl	8001538 <http_server_netconn_init>
  User_notification(&gnetif);
 8001cf2:	4809      	ldr	r0, [pc, #36]	; (8001d18 <StartThread+0x6c>)
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001cf4:	ac07      	add	r4, sp, #28
  User_notification(&gnetif);
 8001cf6:	f7ff f9e1 	bl	80010bc <User_notification>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfe:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8001d00:	a807      	add	r0, sp, #28
 8001d02:	4905      	ldr	r1, [pc, #20]	; (8001d18 <StartThread+0x6c>)
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001d04:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8001d06:	f003 fbe9 	bl	80054dc <osThreadCreate>
    osThreadTerminate(NULL);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f003 fbfe 	bl	800550c <osThreadTerminate>
  for( ;; )
 8001d10:	e7fb      	b.n	8001d0a <StartThread+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8001d12:	f008 fa77 	bl	800a204 <netif_set_down>
 8001d16:	e7e9      	b.n	8001cec <StartThread+0x40>
 8001d18:	20000348 	.word	0x20000348
 8001d1c:	080072f1 	.word	0x080072f1
 8001d20:	08001419 	.word	0x08001419
 8001d24:	08011850 	.word	0x08011850

08001d28 <MX_I2C1_Init>:
{
 8001d28:	b510      	push	{r4, lr}
  hi2c1.Init.Timing = 0x00808CD2;
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <MX_I2C1_Init+0x44>)
  hi2c1.Instance = I2C1;
 8001d2c:	4c10      	ldr	r4, [pc, #64]	; (8001d70 <MX_I2C1_Init+0x48>)
  hi2c1.Init.Timing = 0x00808CD2;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_I2C1_Init+0x4c>)
 8001d30:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	2201      	movs	r2, #1
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d38:	65a3      	str	r3, [r4, #88]	; 0x58
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d3a:	e9c4 3210 	strd	r3, r2, [r4, #64]	; 0x40
  hi2c1.Init.OwnAddress2 = 0;
 8001d3e:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d42:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d46:	3438      	adds	r4, #56	; 0x38
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f001 f8c8 	bl	8002ede <HAL_I2C_Init>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	b100      	cbz	r0, 8001d54 <MX_I2C1_Init+0x2c>
  * @retval None
  */
static void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 8001d52:	e7fe      	b.n	8001d52 <MX_I2C1_Init+0x2a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d54:	4620      	mov	r0, r4
 8001d56:	f001 fa85 	bl	8003264 <HAL_I2CEx_ConfigAnalogFilter>
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	b100      	cbz	r0, 8001d60 <MX_I2C1_Init+0x38>
  while(1)
 8001d5e:	e7fe      	b.n	8001d5e <MX_I2C1_Init+0x36>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d60:	4620      	mov	r0, r4
 8001d62:	f001 faa5 	bl	80032b0 <HAL_I2CEx_ConfigDigitalFilter>
 8001d66:	b100      	cbz	r0, 8001d6a <MX_I2C1_Init+0x42>
  while(1)
 8001d68:	e7fe      	b.n	8001d68 <MX_I2C1_Init+0x40>
}
 8001d6a:	bd10      	pop	{r4, pc}
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	20000348 	.word	0x20000348
 8001d74:	00808cd2 	.word	0x00808cd2

08001d78 <HAL_I2C_MspInit>:
{
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	b0a8      	sub	sp, #160	; 0xa0
 8001d7c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	2214      	movs	r2, #20
 8001d80:	2100      	movs	r1, #0
 8001d82:	a802      	add	r0, sp, #8
 8001d84:	f00c fcb4 	bl	800e6f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	2284      	movs	r2, #132	; 0x84
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	a807      	add	r0, sp, #28
 8001d8e:	f00c fcaf 	bl	800e6f0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_I2C_MspInit+0x78>)
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d128      	bne.n	8001dec <HAL_I2C_MspInit+0x74>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9e:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001da0:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da2:	f001 fda3 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	b100      	cbz	r0, 8001daa <HAL_I2C_MspInit+0x32>
  while(1)
 8001da8:	e7fe      	b.n	8001da8 <HAL_I2C_MspInit+0x30>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4c12      	ldr	r4, [pc, #72]	; (8001df4 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dac:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db0:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6323      	str	r3, [r4, #48]	; 0x30
 8001dba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	a902      	add	r1, sp, #8
 8001dd6:	f000 fe07 	bl	80029e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de0:	6423      	str	r3, [r4, #64]	; 0x40
 8001de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	9b01      	ldr	r3, [sp, #4]
}
 8001dec:	b028      	add	sp, #160	; 0xa0
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	40005400 	.word	0x40005400
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400

08001dfc <main>:
{
 8001dfc:	b500      	push	{lr}
 8001dfe:	b093      	sub	sp, #76	; 0x4c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e00:	f240 1501 	movw	r5, #257	; 0x101
  HAL_MPU_Disable();
 8001e04:	f000 f9fe 	bl	8002204 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e08:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e0a:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e0c:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e0e:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e12:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e16:	9509      	str	r5, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e18:	e9cd 4307 	strd	r4, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e1c:	f000 fa10 	bl	8002240 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e20:	f8ad 5018 	strh.w	r5, [sp, #24]
  MPU_InitStruct.BaseAddress = 0x2004C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <main+0x158>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e26:	a806      	add	r0, sp, #24
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001e28:	4d4b      	ldr	r5, [pc, #300]	; (8001f58 <main+0x15c>)
 8001e2a:	e9cd 5307 	strd	r5, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e32:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e34:	f000 fa04 	bl	8002240 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e38:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8001e3c:	9507      	str	r5, [sp, #28]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001e3e:	4d47      	ldr	r5, [pc, #284]	; (8001f5c <main+0x160>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e40:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e42:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001e46:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8001e4a:	e9cd 5308 	strd	r5, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e4e:	f000 f9f7 	bl	8002240 <HAL_MPU_ConfigRegion>
  
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001e52:	2004      	movs	r0, #4
 8001e54:	f000 f9e4 	bl	8002220 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e5c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e60:	4a3f      	ldr	r2, [pc, #252]	; (8001f60 <main+0x164>)
 8001e62:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e6a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e6e:	6953      	ldr	r3, [r2, #20]
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e7a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001e7e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e82:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001e86:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e8a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e8e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e92:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001e96:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e98:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e9c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e9e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ea2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ea4:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001ea8:	d2f9      	bcs.n	8001e9e <main+0xa2>
    } while(sets-- != 0U);
 8001eaa:	3b20      	subs	r3, #32
 8001eac:	f113 0f20 	cmn.w	r3, #32
 8001eb0:	d1f2      	bne.n	8001e98 <main+0x9c>
 8001eb2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001eb6:	6953      	ldr	r3, [r2, #20]
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6153      	str	r3, [r2, #20]
 8001ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ec2:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8001ec6:	f000 f91c 	bl	8002102 <HAL_Init>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eca:	2402      	movs	r4, #2
  MX_I2C1_Init();
 8001ecc:	f7ff ff2c 	bl	8001d28 <MX_I2C1_Init>
  setHI2C(&hi2c1);
 8001ed0:	4824      	ldr	r0, [pc, #144]	; (8001f64 <main+0x168>)
 8001ed2:	f7ff fb25 	bl	8001520 <setHI2C>
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ed6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001eda:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001edc:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ede:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ee0:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eec:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001ef0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001ef4:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ef8:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001efc:	9311      	str	r3, [sp, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efe:	f001 fa35 	bl	800336c <HAL_RCC_OscConfig>
 8001f02:	b100      	cbz	r0, 8001f06 <main+0x10a>
  while(1)
 8001f04:	e7fe      	b.n	8001f04 <main+0x108>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f06:	f001 f9f9 	bl	80032fc <HAL_PWREx_EnableOverDrive>
 8001f0a:	b100      	cbz	r0, 8001f0e <main+0x112>
  while(1)
 8001f0c:	e7fe      	b.n	8001f0c <main+0x110>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001f0e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001f10:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f14:	9003      	str	r0, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f16:	2107      	movs	r1, #7
 8001f18:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f26:	f001 fc0d 	bl	8003744 <HAL_RCC_ClockConfig>
 8001f2a:	4606      	mov	r6, r0
 8001f2c:	b100      	cbz	r0, 8001f30 <main+0x134>
  while(1)
 8001f2e:	e7fe      	b.n	8001f2e <main+0x132>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <main+0x16c>)
  BSP_LED_Init(LED1);
 8001f32:	f000 f873 	bl	800201c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001f36:	4620      	mov	r0, r4
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001f38:	ac06      	add	r4, sp, #24
  BSP_LED_Init(LED3);
 8001f3a:	f000 f86f 	bl	800201c <BSP_LED_Init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f42:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 8001f44:	4631      	mov	r1, r6
 8001f46:	a806      	add	r0, sp, #24
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001f48:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001f4a:	f003 fac7 	bl	80054dc <osThreadCreate>
  osKernelStart();
 8001f4e:	f003 fab9 	bl	80054c4 <osKernelStart>
  for( ;; );
 8001f52:	e7fe      	b.n	8001f52 <main+0x156>
 8001f54:	0301000d 	.word	0x0301000d
 8001f58:	2004c000 	.word	0x2004c000
 8001f5c:	03000007 	.word	0x03000007
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	20000380 	.word	0x20000380
 8001f68:	08011864 	.word	0x08011864

08001f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001f6c:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2036      	movs	r0, #54	; 0x36
{
 8001f72:	b510      	push	{r4, lr}
 8001f74:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001f76:	f000 f905 	bl	8002184 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f7a:	2036      	movs	r0, #54	; 0x36
 8001f7c:	f000 f934 	bl	80021e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f82:	a901      	add	r1, sp, #4
 8001f84:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f88:	f042 0210 	orr.w	r2, r2, #16
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f98:	f001 fc8a 	bl	80038b0 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001f9c:	9b06      	ldr	r3, [sp, #24]
 8001f9e:	b9c3      	cbnz	r3, 8001fd2 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fa0:	f001 fc76 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001fa4:	4c0f      	ldr	r4, [pc, #60]	; (8001fe4 <HAL_InitTick+0x78>)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_InitTick+0x7c>)
 8001fa8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001faa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001fae:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_InitTick+0x80>)
 8001fb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fb6:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8001fb8:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001fba:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001fbc:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8001fbe:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001fc2:	f002 f875 	bl	80040b0 <HAL_TIM_Base_Init>
 8001fc6:	b940      	cbnz	r0, 8001fda <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f001 ff19 	bl	8003e00 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001fce:	b008      	add	sp, #32
 8001fd0:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fd2:	f001 fc5d 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8001fd6:	0040      	lsls	r0, r0, #1
 8001fd8:	e7e4      	b.n	8001fa4 <HAL_InitTick+0x38>
  return HAL_ERROR;
 8001fda:	2001      	movs	r0, #1
 8001fdc:	e7f7      	b.n	8001fce <HAL_InitTick+0x62>
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	200003cc 	.word	0x200003cc
 8001fe8:	40001000 	.word	0x40001000
 8001fec:	000f4240 	.word	0x000f4240

08001ff0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8001ff0:	f000 b892 	b.w	8002118 <HAL_IncTick>

08001ff4 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001ff4:	4801      	ldr	r0, [pc, #4]	; (8001ffc <TIM6_DAC_IRQHandler+0x8>)
 8001ff6:	f001 bf45 	b.w	8003e84 <HAL_TIM_IRQHandler>
 8001ffa:	bf00      	nop
 8001ffc:	200003cc 	.word	0x200003cc

08002000 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002000:	4770      	bx	lr

08002002 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler>

08002004 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002004:	e7fe      	b.n	8002004 <MemManage_Handler>

08002006 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler>

08002008 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002008:	e7fe      	b.n	8002008 <UsageFault_Handler>

0800200a <DebugMon_Handler>:
 800200a:	4770      	bx	lr

0800200c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 800200c:	f003 bb83 	b.w	8005716 <osSystickHandler>

08002010 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8002010:	4801      	ldr	r0, [pc, #4]	; (8002018 <ETH_IRQHandler+0x8>)
 8002012:	f000 bafd 	b.w	8002610 <HAL_ETH_IRQHandler>
 8002016:	bf00      	nop
 8002018:	20000224 	.word	0x20000224

0800201c <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <BSP_LED_Init+0x54>)
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002020:	f042 0202 	orr.w	r2, r2, #2
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
{
 8002028:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4604      	mov	r4, r0
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	b9c8      	cbnz	r0, 8002068 <BSP_LED_Init+0x4c>
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800203c:	4d0e      	ldr	r5, [pc, #56]	; (8002078 <BSP_LED_Init+0x5c>)
 800203e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002040:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002046:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800204a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002054:	f000 fcc8 	bl	80029e8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002058:	463a      	mov	r2, r7
 800205a:	4631      	mov	r1, r6
 800205c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8002060:	f000 fda6 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 8002064:	b009      	add	sp, #36	; 0x24
 8002066:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	9b02      	ldr	r3, [sp, #8]
 800206c:	e7e4      	b.n	8002038 <BSP_LED_Init+0x1c>
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	08011878 	.word	0x08011878
 8002078:	20000000 	.word	0x20000000

0800207c <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <BSP_LED_On+0x14>)
 800207e:	2201      	movs	r2, #1
 8002080:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <BSP_LED_On+0x18>)
 8002086:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800208a:	f000 bd91 	b.w	8002bb0 <HAL_GPIO_WritePin>
 800208e:	bf00      	nop
 8002090:	08011878 	.word	0x08011878
 8002094:	20000000 	.word	0x20000000

08002098 <BSP_LED_Off>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <BSP_LED_Off+0x14>)
 800209a:	2200      	movs	r2, #0
 800209c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <BSP_LED_Off+0x18>)
 80020a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80020a6:	f000 bd83 	b.w	8002bb0 <HAL_GPIO_WritePin>
 80020aa:	bf00      	nop
 80020ac:	08011878 	.word	0x08011878
 80020b0:	20000000 	.word	0x20000000

080020b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b4:	490f      	ldr	r1, [pc, #60]	; (80020f4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020b6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <SystemInit+0x44>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80020ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <SystemInit+0x48>)
 80020de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020e8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80020ee:	608b      	str	r3, [r1, #8]
#endif
}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	24003010 	.word	0x24003010

08002100 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002100:	4770      	bx	lr

08002102 <HAL_Init>:
{
 8002102:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f000 f82b 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800210a:	200f      	movs	r0, #15
 800210c:	f7ff ff2e 	bl	8001f6c <HAL_InitTick>
  HAL_MspInit();
 8002110:	f7ff fff6 	bl	8002100 <HAL_MspInit>
}
 8002114:	2000      	movs	r0, #0
 8002116:	bd08      	pop	{r3, pc}

08002118 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_IncTick+0x10>)
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_IncTick+0x14>)
 800211c:	6811      	ldr	r1, [r2, #0]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	440b      	add	r3, r1
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000418 	.word	0x20000418
 800212c:	20000014 	.word	0x20000014

08002130 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <HAL_GetTick+0x8>)
 8002132:	6818      	ldr	r0, [r3, #0]
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000418 	.word	0x20000418

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b538      	push	{r3, r4, r5, lr}
 800213e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff fff6 	bl	8002130 <HAL_GetTick>
 8002144:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002148:	bf1e      	ittt	ne
 800214a:	4b04      	ldrne	r3, [pc, #16]	; (800215c <HAL_Delay+0x20>)
 800214c:	781b      	ldrbne	r3, [r3, #0]
 800214e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	1b43      	subs	r3, r0, r5
 8002156:	42a3      	cmp	r3, r4
 8002158:	d3fa      	bcc.n	8002150 <HAL_Delay+0x14>
  {
  }
}
 800215a:	bd38      	pop	{r3, r4, r5, pc}
 800215c:	20000014 	.word	0x20000014

08002160 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002162:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800216e:	0412      	lsls	r2, r2, #16
 8002170:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800217c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b530      	push	{r4, r5, lr}
 8002188:	68dc      	ldr	r4, [r3, #12]
 800218a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	2d04      	cmp	r5, #4
 8002196:	bf28      	it	cs
 8002198:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a0:	bf8c      	ite	hi
 80021a2:	3c03      	subhi	r4, #3
 80021a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80021aa:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	fa01 f104 	lsl.w	r1, r1, r4
 80021bc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80021c4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80021c6:	db06      	blt.n	80021d6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80021cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80021d0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021d4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	f000 000f 	and.w	r0, r0, #15
 80021da:	4a02      	ldr	r2, [pc, #8]	; (80021e4 <HAL_NVIC_SetPriority+0x60>)
 80021dc:	5413      	strb	r3, [r2, r0]
 80021de:	e7f9      	b.n	80021d4 <HAL_NVIC_SetPriority+0x50>
 80021e0:	e000ed00 	.word	0xe000ed00
 80021e4:	e000ed14 	.word	0xe000ed14

080021e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021e8:	2800      	cmp	r0, #0
 80021ea:	db08      	blt.n	80021fe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ec:	0942      	lsrs	r2, r0, #5
 80021ee:	2301      	movs	r3, #1
 80021f0:	f000 001f 	and.w	r0, r0, #31
 80021f4:	fa03 f000 	lsl.w	r0, r3, r0
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <HAL_NVIC_EnableIRQ+0x18>)
 80021fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100

08002204 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002204:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_MPU_Disable+0x18>)
 800220a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002212:	2200      	movs	r2, #0
 8002214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_MPU_Enable+0x1c>)
 8002222:	f040 0001 	orr.w	r0, r0, #1
 8002226:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800222a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002236:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002240:	7843      	ldrb	r3, [r0, #1]
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_MPU_ConfigRegion+0x54>)
{
 8002244:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8002246:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 800224a:	7801      	ldrb	r1, [r0, #0]
 800224c:	b1e9      	cbz	r1, 800228a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800224e:	6843      	ldr	r3, [r0, #4]
 8002250:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002254:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002256:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002258:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800225a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800225e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002260:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002262:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002266:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002268:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800226c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800226e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002272:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002278:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800227a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800227e:	7a01      	ldrb	r1, [r0, #8]
 8002280:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002284:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002288:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800228a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800228e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8002292:	e7f9      	b.n	8002288 <HAL_MPU_ConfigRegion+0x48>
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8002298:	2300      	movs	r3, #0
{
 800229a:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 800229c:	9301      	str	r3, [sp, #4]
{
 800229e:	4604      	mov	r4, r0
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022a0:	6803      	ldr	r3, [r0, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a2:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022ae:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b4:	f7ff ff42 	bl	800213c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	9a01      	ldr	r2, [sp, #4]
 80022bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	b002      	add	sp, #8
 80022c4:	bd10      	pop	{r4, pc}
	...

080022c8 <ETH_MACDMAConfig>:
{
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80022cc:	b129      	cbz	r1, 80022da <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 80022ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80022da:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 80022dc:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80022de:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
 80022e0:	6810      	ldr	r0, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80022e2:	bf0c      	ite	eq
 80022e4:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80022e8:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 80022ea:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
 80022ee:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
 80022f0:	430b      	orrs	r3, r1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80022f2:	492c      	ldr	r1, [pc, #176]	; (80023a4 <ETH_MACDMAConfig+0xdc>)
 80022f4:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f6:	2001      	movs	r0, #1
 80022f8:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80022fe:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8002300:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002302:	f7ff ff1b 	bl	800213c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002306:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002308:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800230a:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800230c:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800230e:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8002310:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002312:	f7ff ff13 	bl	800213c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002316:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002318:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800231a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800231c:	2500      	movs	r5, #0
 800231e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002320:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8002322:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002324:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8002328:	0412      	lsls	r2, r2, #16
 800232a:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800232c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002330:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8002332:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002334:	f7ff ff02 	bl	800213c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002338:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800233a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800233c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800233e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8002340:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	f7ff fefb 	bl	800213c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002346:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002348:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->MACVLANTR = tmpreg;
 800234c:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800234e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002352:	6991      	ldr	r1, [r2, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002354:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002356:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800235a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800235e:	6193      	str	r3, [r2, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 8002360:	6995      	ldr	r5, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002362:	f7ff feeb 	bl	800213c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002366:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002368:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->DMAOMR = tmpreg;
 800236c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002370:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002372:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8002374:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002376:	f7ff fee1 	bl	800213c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800237a:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800237c:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002382:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8002384:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002386:	d105      	bne.n	8002394 <ETH_MACDMAConfig+0xcc>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800238e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002392:	61da      	str	r2, [r3, #28]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002394:	6962      	ldr	r2, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002398:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800239a:	6419      	str	r1, [r3, #64]	; 0x40
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800239c:	6812      	ldr	r2, [r2, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
}
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
 80023a2:	bf00      	nop
 80023a4:	ff20810f 	.word	0xff20810f
 80023a8:	f8de3f23 	.word	0xf8de3f23
 80023ac:	02c12080 	.word	0x02c12080
 80023b0:	40028000 	.word	0x40028000

080023b4 <HAL_ETH_DMATxDescListInit>:
{
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80023b6:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80023ba:	2c01      	cmp	r4, #1
 80023bc:	f04f 0402 	mov.w	r4, #2
 80023c0:	d033      	beq.n	800242a <HAL_ETH_DMATxDescListInit+0x76>
 80023c2:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80023c4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80023c8:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80023cc:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80023d0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80023d4:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 80023d8:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 80023da:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 80023de:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 80023e0:	429d      	cmp	r5, r3
 80023e2:	d10b      	bne.n	80023fc <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80023f2:	2300      	movs	r3, #0
 80023f4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80023f8:	4618      	mov	r0, r3
}
 80023fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80023fc:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002400:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002404:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002408:	69c6      	ldr	r6, [r0, #28]
 800240a:	b92e      	cbnz	r6, 8002418 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800240c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8002410:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8002414:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002418:	45ae      	cmp	lr, r5
 800241a:	bf94      	ite	ls
 800241c:	460e      	movls	r6, r1
 800241e:	4626      	movhi	r6, r4
 8002420:	3501      	adds	r5, #1
 8002422:	3420      	adds	r4, #32
 8002424:	f844 6c34 	str.w	r6, [r4, #-52]
  for(i=0; i < TxBuffCount; i++)
 8002428:	e7da      	b.n	80023e0 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 800242a:	4620      	mov	r0, r4
 800242c:	e7e5      	b.n	80023fa <HAL_ETH_DMATxDescListInit+0x46>

0800242e <HAL_ETH_DMARxDescListInit>:
{
 800242e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8002432:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002436:	2c01      	cmp	r4, #1
 8002438:	f04f 0402 	mov.w	r4, #2
 800243c:	d030      	beq.n	80024a0 <HAL_ETH_DMARxDescListInit+0x72>
 800243e:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002440:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002444:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002448:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 800244c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002450:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8002454:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002456:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800245a:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 800245e:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8002460:	42ab      	cmp	r3, r5
 8002462:	d10c      	bne.n	800247e <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002464:	6803      	ldr	r3, [r0, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800246c:	2301      	movs	r3, #1
 800246e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002472:	2300      	movs	r3, #0
 8002474:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002478:	4618      	mov	r0, r3
}
 800247a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800247e:	fb0c 2805 	mla	r8, ip, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002482:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002486:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800248a:	45ae      	cmp	lr, r5
 800248c:	bf94      	ite	ls
 800248e:	4688      	movls	r8, r1
 8002490:	46a0      	movhi	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002492:	f844 7c1c 	str.w	r7, [r4, #-28]
    if(i < (RxBuffCount-1))
 8002496:	3501      	adds	r5, #1
 8002498:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0; i < RxBuffCount; i++)
 800249c:	3420      	adds	r4, #32
 800249e:	e7df      	b.n	8002460 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 80024a0:	4620      	mov	r0, r4
 80024a2:	e7ea      	b.n	800247a <HAL_ETH_DMARxDescListInit+0x4c>

080024a4 <HAL_ETH_TransmitFrame>:
{
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80024a6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f04f 0302 	mov.w	r3, #2
 80024b0:	d064      	beq.n	800257c <HAL_ETH_TransmitFrame+0xd8>
 80024b2:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80024b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80024b8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 80024bc:	b929      	cbnz	r1, 80024ca <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80024be:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80024c2:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80024c6:	4610      	mov	r0, r2
}
 80024c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80024ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80024cc:	681c      	ldr	r4, [r3, #0]
 80024ce:	2c00      	cmp	r4, #0
 80024d0:	da06      	bge.n	80024e0 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80024d2:	2312      	movs	r3, #18
 80024d4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80024d8:	2300      	movs	r3, #0
 80024da:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80024de:	e7f2      	b.n	80024c6 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80024e0:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80024e4:	42a1      	cmp	r1, r4
 80024e6:	d92c      	bls.n	8002542 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80024e8:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80024ec:	fb04 1412 	mls	r4, r4, r2, r1
 80024f0:	b32c      	cbz	r4, 800253e <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 80024f2:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80024f4:	4c22      	ldr	r4, [pc, #136]	; (8002580 <HAL_ETH_TransmitFrame+0xdc>)
 80024f6:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80024fa:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 80024fe:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002500:	fb04 1102 	mla	r1, r4, r2, r1
    for (i=0; i< bufcount; i++)
 8002504:	2400      	movs	r4, #0
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002506:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800250a:	681d      	ldr	r5, [r3, #0]
 800250c:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8002510:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8002512:	b91c      	cbnz	r4, 800251c <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002514:	681d      	ldr	r5, [r3, #0]
 8002516:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800251a:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 800251c:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800251e:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8002520:	d104      	bne.n	800252c <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002522:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002524:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002526:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800252a:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800252c:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 800252e:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002530:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8002534:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002536:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002538:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800253a:	d1e6      	bne.n	800250a <HAL_ETH_TransmitFrame+0x66>
 800253c:	e00d      	b.n	800255a <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 800253e:	2a01      	cmp	r2, #1
 8002540:	d1d8      	bne.n	80024f4 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002542:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002544:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002548:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800254c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800254e:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002556:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	0752      	lsls	r2, r2, #29
 8002566:	d503      	bpl.n	8002570 <HAL_ETH_TransmitFrame+0xcc>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002568:	2204      	movs	r2, #4
 800256a:	615a      	str	r2, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  heth->State = HAL_ETH_STATE_READY;
 8002570:	2301      	movs	r3, #1
 8002572:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002576:	2300      	movs	r3, #0
 8002578:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 800257c:	4618      	mov	r0, r3
 800257e:	e7a3      	b.n	80024c8 <HAL_ETH_TransmitFrame+0x24>
 8002580:	fffffa0c 	.word	0xfffffa0c

08002584 <HAL_ETH_GetReceivedFrame_IT>:
{
 8002584:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8002586:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800258a:	2b01      	cmp	r3, #1
 800258c:	f04f 0302 	mov.w	r3, #2
 8002590:	d03a      	beq.n	8002608 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8002592:	2501      	movs	r5, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002594:	2105      	movs	r1, #5
  heth->State = HAL_ETH_STATE_BUSY;
 8002596:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800259a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800259e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	db01      	blt.n	80025aa <HAL_ETH_GetReceivedFrame_IT+0x26>
 80025a6:	3901      	subs	r1, #1
 80025a8:	d106      	bne.n	80025b8 <HAL_ETH_GetReceivedFrame_IT+0x34>
  heth->State = HAL_ETH_STATE_READY;
 80025aa:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80025ac:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 80025ae:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80025b2:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 80025b6:	e027      	b.n	8002608 <HAL_ETH_GetReceivedFrame_IT+0x84>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80025b8:	681a      	ldr	r2, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80025ba:	68dc      	ldr	r4, [r3, #12]
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80025bc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80025c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80025c4:	d103      	bne.n	80025ce <HAL_ETH_GetReceivedFrame_IT+0x4a>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80025c6:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80025c8:	6385      	str	r5, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80025ca:	6284      	str	r4, [r0, #40]	; 0x28
 80025cc:	e7e7      	b.n	800259e <HAL_ETH_GetReceivedFrame_IT+0x1a>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80025ce:	681e      	ldr	r6, [r3, #0]
      (heth->RxFrameInfos.SegCount)++;
 80025d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80025d2:	f416 7f40 	tst.w	r6, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 80025d6:	f102 0201 	add.w	r2, r2, #1
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80025da:	d101      	bne.n	80025e0 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 80025dc:	6382      	str	r2, [r0, #56]	; 0x38
 80025de:	e7f4      	b.n	80025ca <HAL_ETH_GetReceivedFrame_IT+0x46>
      if ((heth->RxFrameInfos.SegCount) == 1)
 80025e0:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 80025e2:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80025e6:	bf08      	it	eq
 80025e8:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80025f0:	3b04      	subs	r3, #4
 80025f2:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80025f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80025f6:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80025f8:	6284      	str	r4, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80025fa:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002602:	2300      	movs	r3, #0
 8002604:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd70      	pop	{r4, r5, r6, pc}

0800260c <HAL_ETH_TxCpltCallback>:
 800260c:	4770      	bx	lr

0800260e <HAL_ETH_ErrorCallback>:
 800260e:	4770      	bx	lr

08002610 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002610:	6802      	ldr	r2, [r0, #0]
 8002612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 8002616:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002618:	6955      	ldr	r5, [r2, #20]
{
 800261a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800261c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002620:	d025      	beq.n	800266e <HAL_ETH_IRQHandler+0x5e>
    HAL_ETH_RxCpltCallback(heth);
 8002622:	f7fe fef3 	bl	800140c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	2240      	movs	r2, #64	; 0x40
 800262a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262e:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8002630:	2301      	movs	r3, #1
 8002632:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002636:	2300      	movs	r3, #0
 8002638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002646:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	d50e      	bpl.n	800266c <HAL_ETH_IRQHandler+0x5c>
    HAL_ETH_ErrorCallback(heth);
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff ffdd 	bl	800260e <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8002660:	2301      	movs	r3, #1
 8002662:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002666:	2300      	movs	r3, #0
 8002668:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800266c:	bd38      	pop	{r3, r4, r5, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800266e:	6953      	ldr	r3, [r2, #20]
 8002670:	07da      	lsls	r2, r3, #31
 8002672:	d5e3      	bpl.n	800263c <HAL_ETH_IRQHandler+0x2c>
    HAL_ETH_TxCpltCallback(heth);
 8002674:	f7ff ffca 	bl	800260c <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002680:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8002682:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002686:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800268a:	e7d7      	b.n	800263c <HAL_ETH_IRQHandler+0x2c>

0800268c <HAL_ETH_ReadPHYRegister>:
{
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800268e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002692:	4606      	mov	r6, r0
 8002694:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002696:	2b82      	cmp	r3, #130	; 0x82
 8002698:	d031      	beq.n	80026fe <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800269a:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800269c:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800269e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026a2:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80026a6:	8a34      	ldrh	r4, [r6, #16]
  tmpreg = heth->Instance->MACMIIAR;
 80026a8:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80026aa:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 80026ac:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80026ae:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026b0:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026b4:	430c      	orrs	r4, r1
 80026b6:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80026b8:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 80026bc:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80026be:	f7ff fd37 	bl	8002130 <HAL_GetTick>
 80026c2:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026c4:	f014 0401 	ands.w	r4, r4, #1
 80026c8:	d108      	bne.n	80026dc <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026ca:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 80026cc:	4620      	mov	r0, r4
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  return HAL_OK;
 80026da:	e00c      	b.n	80026f6 <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026dc:	f7ff fd28 	bl	8002130 <HAL_GetTick>
 80026e0:	1bc0      	subs	r0, r0, r7
 80026e2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80026e6:	d307      	bcc.n	80026f8 <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 80026e8:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80026ea:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80026ec:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80026f0:	2300      	movs	r3, #0
 80026f2:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
}
 80026f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80026f8:	6833      	ldr	r3, [r6, #0]
 80026fa:	691c      	ldr	r4, [r3, #16]
 80026fc:	e7e2      	b.n	80026c4 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80026fe:	2002      	movs	r0, #2
 8002700:	e7f9      	b.n	80026f6 <HAL_ETH_ReadPHYRegister+0x6a>

08002702 <HAL_ETH_WritePHYRegister>:
{
 8002702:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002704:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002708:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800270a:	2b42      	cmp	r3, #66	; 0x42
 800270c:	d02f      	beq.n	800276e <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800270e:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002710:	0189      	lsls	r1, r1, #6
 8002712:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002714:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002718:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800271c:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg = heth->Instance->MACMIIAR;
 800271e:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002720:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 8002722:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002724:	b2a4      	uxth	r4, r4
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002726:	615a      	str	r2, [r3, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002728:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800272c:	430c      	orrs	r4, r1
 800272e:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002730:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg;
 8002734:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002736:	f7ff fcfb 	bl	8002130 <HAL_GetTick>
 800273a:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800273c:	f014 0401 	ands.w	r4, r4, #1
 8002740:	d104      	bne.n	800274c <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 8002742:	2301      	movs	r3, #1
  return HAL_OK; 
 8002744:	4620      	mov	r0, r4
  heth->State = HAL_ETH_STATE_READY;
 8002746:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800274a:	e00c      	b.n	8002766 <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800274c:	f7ff fcf0 	bl	8002130 <HAL_GetTick>
 8002750:	1b80      	subs	r0, r0, r6
 8002752:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002756:	d307      	bcc.n	8002768 <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 8002758:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800275a:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800275c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002760:	2300      	movs	r3, #0
 8002762:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8002766:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	691c      	ldr	r4, [r3, #16]
 800276c:	e7e6      	b.n	800273c <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800276e:	2002      	movs	r0, #2
 8002770:	e7f9      	b.n	8002766 <HAL_ETH_WritePHYRegister+0x64>
	...

08002774 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8002774:	2300      	movs	r3, #0
{
 8002776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8002778:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 800277a:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800277c:	2800      	cmp	r0, #0
 800277e:	f000 80de 	beq.w	800293e <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8002782:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800278a:	b91b      	cbnz	r3, 8002794 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 800278c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8002790:	f7fe fdc4 	bl	800131c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002794:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <HAL_ETH_Init+0x1d0>)
 8002796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80027a8:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_ETH_Init+0x1d4>)
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80027b0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	6a21      	ldr	r1, [r4, #32]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80027c8:	f7ff fcb2 	bl	8002130 <HAL_GetTick>
 80027cc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	07d0      	lsls	r0, r2, #31
 80027d8:	d41d      	bmi.n	8002816 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 80027da:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80027dc:	f001 f852 	bl	8003884 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80027e0:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_ETH_Init+0x1d8>)
 80027e2:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <HAL_ETH_Init+0x1dc>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80027e4:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80027e8:	4403      	add	r3, r0
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d222      	bcs.n	8002834 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80027ee:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80027f2:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80027f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027f8:	2100      	movs	r1, #0
 80027fa:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80027fc:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80027fe:	f7ff ff80 	bl	8002702 <HAL_ETH_WritePHYRegister>
 8002802:	4605      	mov	r5, r0
 8002804:	b368      	cbz	r0, 8002862 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8002806:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8002808:	2101      	movs	r1, #1
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff fd5c 	bl	80022c8 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002810:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002814:	e00b      	b.n	800282e <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002816:	f7ff fc8b 	bl	8002130 <HAL_GetTick>
 800281a:	1b40      	subs	r0, r0, r5
 800281c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002820:	d9d5      	bls.n	80027ce <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002822:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8002824:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002826:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800282a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800282e:	4628      	mov	r0, r5
 8002830:	b003      	add	sp, #12
 8002832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_ETH_Init+0x1e0>)
 8002836:	4a48      	ldr	r2, [pc, #288]	; (8002958 <HAL_ETH_Init+0x1e4>)
 8002838:	4403      	add	r3, r0
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800283e:	f045 050c 	orr.w	r5, r5, #12
 8002842:	e7d6      	b.n	80027f2 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002844:	4b45      	ldr	r3, [pc, #276]	; (800295c <HAL_ETH_Init+0x1e8>)
 8002846:	4a46      	ldr	r2, [pc, #280]	; (8002960 <HAL_ETH_Init+0x1ec>)
 8002848:	4403      	add	r3, r0
 800284a:	4293      	cmp	r3, r2
 800284c:	d3d1      	bcc.n	80027f2 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800284e:	4b45      	ldr	r3, [pc, #276]	; (8002964 <HAL_ETH_Init+0x1f0>)
 8002850:	4a45      	ldr	r2, [pc, #276]	; (8002968 <HAL_ETH_Init+0x1f4>)
 8002852:	4403      	add	r3, r0
 8002854:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002856:	bf94      	ite	ls
 8002858:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800285c:	f045 0510 	orrhi.w	r5, r5, #16
 8002860:	e7c7      	b.n	80027f2 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8002862:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002866:	f7ff fc69 	bl	800213c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800286a:	6863      	ldr	r3, [r4, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d054      	beq.n	800291a <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8002870:	f7ff fc5e 	bl	8002130 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002874:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002878:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800287a:	466a      	mov	r2, sp
 800287c:	2101      	movs	r1, #1
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff ff04 	bl	800268c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002884:	f7ff fc54 	bl	8002130 <HAL_GetTick>
 8002888:	1b80      	subs	r0, r0, r6
 800288a:	42b8      	cmp	r0, r7
 800288c:	d90b      	bls.n	80028a6 <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 800288e:	2101      	movs	r1, #1
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff fd19 	bl	80022c8 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8002896:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8002898:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800289a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800289e:	2300      	movs	r3, #0
 80028a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80028a4:	e7c3      	b.n	800282e <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80028a6:	9b00      	ldr	r3, [sp, #0]
 80028a8:	0759      	lsls	r1, r3, #29
 80028aa:	d5e6      	bpl.n	800287a <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80028ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028b0:	2100      	movs	r1, #0
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff ff25 	bl	8002702 <HAL_ETH_WritePHYRegister>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1a4      	bne.n	8002806 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 80028bc:	f7ff fc38 	bl	8002130 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80028c0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80028c4:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80028c6:	466a      	mov	r2, sp
 80028c8:	2101      	movs	r1, #1
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff fede 	bl	800268c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80028d0:	f7ff fc2e 	bl	8002130 <HAL_GetTick>
 80028d4:	1b80      	subs	r0, r0, r6
 80028d6:	42b8      	cmp	r0, r7
 80028d8:	d8d9      	bhi.n	800288e <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80028da:	9b00      	ldr	r3, [sp, #0]
 80028dc:	069a      	lsls	r2, r3, #26
 80028de:	d5f2      	bpl.n	80028c6 <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80028e0:	466a      	mov	r2, sp
 80028e2:	211f      	movs	r1, #31
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7ff fed1 	bl	800268c <HAL_ETH_ReadPHYRegister>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d18b      	bne.n	8002806 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80028ee:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80028f0:	f013 0210 	ands.w	r2, r3, #16
 80028f4:	bf18      	it	ne
 80028f6:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80028fa:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 80028fc:	bf58      	it	pl
 80028fe:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8002902:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002904:	bf4c      	ite	mi
 8002906:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 8002908:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 800290a:	2100      	movs	r1, #0
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff fcdb 	bl	80022c8 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8002912:	2301      	movs	r3, #1
 8002914:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002918:	e789      	b.n	800282e <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800291a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800291e:	4629      	mov	r1, r5
 8002920:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002922:	0852      	lsrs	r2, r2, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002924:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8002928:	b292      	uxth	r2, r2
 800292a:	f7ff feea 	bl	8002702 <HAL_ETH_WritePHYRegister>
 800292e:	2800      	cmp	r0, #0
 8002930:	f47f af69 	bne.w	8002806 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002934:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002938:	f7ff fc00 	bl	800213c <HAL_Delay>
 800293c:	e7e5      	b.n	800290a <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 800293e:	2501      	movs	r5, #1
 8002940:	e775      	b.n	800282e <HAL_ETH_Init+0xba>
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40013800 	.word	0x40013800
 800294c:	feced300 	.word	0xfeced300
 8002950:	00e4e1c0 	.word	0x00e4e1c0
 8002954:	fde9f140 	.word	0xfde9f140
 8002958:	017d783f 	.word	0x017d783f
 800295c:	fc6c7900 	.word	0xfc6c7900
 8002960:	02625a00 	.word	0x02625a00
 8002964:	fa0a1f00 	.word	0xfa0a1f00
 8002968:	02faf07f 	.word	0x02faf07f

0800296c <HAL_ETH_Start>:
{  
 800296c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800296e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{  
 8002972:	4604      	mov	r4, r0
 8002974:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
 8002976:	2b01      	cmp	r3, #1
 8002978:	d033      	beq.n	80029e2 <HAL_ETH_Start+0x76>
 800297a:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 800297c:	2500      	movs	r5, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800297e:	6823      	ldr	r3, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8002980:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002984:	4630      	mov	r0, r6
  __IO uint32_t tmpreg = 0;
 8002986:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8002988:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002998:	f7ff fbd0 	bl	800213c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800299c:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800299e:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 80029a4:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f042 0204 	orr.w	r2, r2, #4
 80029ac:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b2:	f7ff fbc3 	bl	800213c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80029b6:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 80029b8:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 80029ba:	9a00      	ldr	r2, [sp, #0]
 80029bc:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 80029be:	f7ff fc6b 	bl	8002298 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80029c2:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80029c4:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80029c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	f042 0202 	orr.w	r2, r2, #2
 80029d8:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 80029da:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80029de:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 80029e2:	b002      	add	sp, #8
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002bac <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f2:	4a6c      	ldr	r2, [pc, #432]	; (8002ba4 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80029f4:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f6:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80029f8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80029fe:	43ac      	bics	r4, r5
 8002a00:	f040 80b6 	bne.w	8002b70 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a04:	684d      	ldr	r5, [r1, #4]
 8002a06:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a0a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a0c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a10:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a14:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a16:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a18:	2f01      	cmp	r7, #1
 8002a1a:	d834      	bhi.n	8002a86 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8002a1c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a1e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a22:	68cf      	ldr	r7, [r1, #12]
 8002a24:	fa07 f708 	lsl.w	r7, r7, r8
 8002a28:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002a2c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a2e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a30:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a34:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002a38:	409f      	lsls	r7, r3
 8002a3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002a3e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002a40:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a44:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a48:	688f      	ldr	r7, [r1, #8]
 8002a4a:	fa07 f708 	lsl.w	r7, r7, r8
 8002a4e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8002a52:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a54:	d119      	bne.n	8002a8a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8002a56:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a5a:	f003 0b07 	and.w	fp, r3, #7
 8002a5e:	f04f 0e0f 	mov.w	lr, #15
 8002a62:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002a66:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002a6a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a6e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002a72:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a76:	690f      	ldr	r7, [r1, #16]
 8002a78:	fa07 f70b 	lsl.w	r7, r7, fp
 8002a7c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8002a80:	f8ca 7020 	str.w	r7, [sl, #32]
 8002a84:	e001      	b.n	8002a8a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a86:	2c03      	cmp	r4, #3
 8002a88:	d1da      	bne.n	8002a40 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8002a8a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a8c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a90:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a94:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a98:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8002a9c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a9e:	d067      	beq.n	8002b70 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8002aa4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aa8:	f003 0703 	and.w	r7, r3, #3
 8002aac:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002ab4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ab8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8002abe:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8002ac2:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8002ac6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8002aca:	9401      	str	r4, [sp, #4]
 8002acc:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ace:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8002ad2:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ad6:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ada:	4c33      	ldr	r4, [pc, #204]	; (8002ba8 <HAL_GPIO_Init+0x1c0>)
 8002adc:	42a0      	cmp	r0, r4
 8002ade:	d04e      	beq.n	8002b7e <HAL_GPIO_Init+0x196>
 8002ae0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ae4:	42a0      	cmp	r0, r4
 8002ae6:	d04c      	beq.n	8002b82 <HAL_GPIO_Init+0x19a>
 8002ae8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002aec:	42a0      	cmp	r0, r4
 8002aee:	d04a      	beq.n	8002b86 <HAL_GPIO_Init+0x19e>
 8002af0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002af4:	42a0      	cmp	r0, r4
 8002af6:	d048      	beq.n	8002b8a <HAL_GPIO_Init+0x1a2>
 8002af8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002afc:	42a0      	cmp	r0, r4
 8002afe:	d046      	beq.n	8002b8e <HAL_GPIO_Init+0x1a6>
 8002b00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b04:	42a0      	cmp	r0, r4
 8002b06:	d044      	beq.n	8002b92 <HAL_GPIO_Init+0x1aa>
 8002b08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b0c:	42a0      	cmp	r0, r4
 8002b0e:	d042      	beq.n	8002b96 <HAL_GPIO_Init+0x1ae>
 8002b10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b14:	42a0      	cmp	r0, r4
 8002b16:	d040      	beq.n	8002b9a <HAL_GPIO_Init+0x1b2>
 8002b18:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b1c:	42a0      	cmp	r0, r4
 8002b1e:	d03e      	beq.n	8002b9e <HAL_GPIO_Init+0x1b6>
 8002b20:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	bf0c      	ite	eq
 8002b28:	2409      	moveq	r4, #9
 8002b2a:	240a      	movne	r4, #10
 8002b2c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b2e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b30:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b34:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8002b3a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	bf54      	ite	pl
 8002b3e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002b40:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b44:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8002b46:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8002b48:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	bf54      	ite	pl
 8002b4c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002b4e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b52:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8002b54:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8002b56:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	bf54      	ite	pl
 8002b5a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002b5c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b60:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002b62:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002b64:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	bf54      	ite	pl
 8002b68:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002b6a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002b6e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b70:	3301      	adds	r3, #1
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	f47f af3e 	bne.w	80029f4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002b78:	b003      	add	sp, #12
 8002b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b7e:	2400      	movs	r4, #0
 8002b80:	e7d4      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b82:	2401      	movs	r4, #1
 8002b84:	e7d2      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b86:	2402      	movs	r4, #2
 8002b88:	e7d0      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b8a:	2403      	movs	r4, #3
 8002b8c:	e7ce      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b8e:	2404      	movs	r4, #4
 8002b90:	e7cc      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b92:	2405      	movs	r4, #5
 8002b94:	e7ca      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b96:	2406      	movs	r4, #6
 8002b98:	e7c8      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b9a:	2407      	movs	r4, #7
 8002b9c:	e7c6      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002b9e:	2408      	movs	r4, #8
 8002ba0:	e7c4      	b.n	8002b2c <HAL_GPIO_Init+0x144>
 8002ba2:	bf00      	nop
 8002ba4:	40013c00 	.word	0x40013c00
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb0:	b10a      	cbz	r2, 8002bb6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bb2:	6181      	str	r1, [r0, #24]
  }
}
 8002bb4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bb6:	0409      	lsls	r1, r1, #16
 8002bb8:	e7fb      	b.n	8002bb2 <HAL_GPIO_WritePin+0x2>

08002bba <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bba:	6803      	ldr	r3, [r0, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	0791      	lsls	r1, r2, #30
 8002bc0:	d501      	bpl.n	8002bc6 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	07d2      	lsls	r2, r2, #31
 8002bca:	d403      	bmi.n	8002bd4 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	619a      	str	r2, [r3, #24]
  }
}
 8002bd4:	4770      	bx	lr
	...

08002bd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bd8:	b530      	push	{r4, r5, lr}
 8002bda:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bdc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002be0:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002be2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8002be4:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bec:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bee:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bf6:	ea20 0002 	bic.w	r0, r0, r2
 8002bfa:	4303      	orrs	r3, r0
 8002bfc:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bfe:	bd30      	pop	{r4, r5, pc}
 8002c00:	03ff63ff 	.word	0x03ff63ff

08002c04 <I2C_IsErrorOccurred>:
{
 8002c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c08:	6803      	ldr	r3, [r0, #0]
{
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	4688      	mov	r8, r1
 8002c0e:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c10:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c12:	f014 0410 	ands.w	r4, r4, #16
 8002c16:	d079      	beq.n	8002d0c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c18:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c20:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	0694      	lsls	r4, r2, #26
 8002c28:	d436      	bmi.n	8002c98 <I2C_IsErrorOccurred+0x94>
 8002c2a:	b10e      	cbz	r6, 8002c30 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8002c2c:	2404      	movs	r4, #4
 8002c2e:	e039      	b.n	8002ca4 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8002c30:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002c34:	d0f6      	beq.n	8002c24 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c36:	f7ff fa7b 	bl	8002130 <HAL_GetTick>
 8002c3a:	1bc0      	subs	r0, r0, r7
 8002c3c:	4540      	cmp	r0, r8
 8002c3e:	d802      	bhi.n	8002c46 <I2C_IsErrorOccurred+0x42>
 8002c40:	f1b8 0f00 	cmp.w	r8, #0
 8002c44:	d1ed      	bne.n	8002c22 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c46:	682b      	ldr	r3, [r5, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8002c4a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c4e:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8002c50:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c52:	0400      	lsls	r0, r0, #16
 8002c54:	d50a      	bpl.n	8002c6c <I2C_IsErrorOccurred+0x68>
 8002c56:	0449      	lsls	r1, r1, #17
 8002c58:	d408      	bmi.n	8002c6c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8002c5a:	2a20      	cmp	r2, #32
 8002c5c:	d006      	beq.n	8002c6c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c64:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002c66:	f7ff fa63 	bl	8002130 <HAL_GetTick>
 8002c6a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	699c      	ldr	r4, [r3, #24]
 8002c70:	f014 0420 	ands.w	r4, r4, #32
 8002c74:	d1d5      	bne.n	8002c22 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c76:	f7ff fa5b 	bl	8002130 <HAL_GetTick>
 8002c7a:	1bc0      	subs	r0, r0, r7
 8002c7c:	2819      	cmp	r0, #25
 8002c7e:	d9f5      	bls.n	8002c6c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c80:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8002c82:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8002c84:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c88:	f043 0320 	orr.w	r3, r3, #32
 8002c8c:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8002c96:	e7e9      	b.n	8002c6c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8002c98:	2e00      	cmp	r6, #0
 8002c9a:	d1c7      	bne.n	8002c2c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9c:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8002c9e:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8002ca0:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca2:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ca8:	05d0      	lsls	r0, r2, #23
 8002caa:	d505      	bpl.n	8002cb8 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cac:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8002cb0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8002cb4:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cb6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cb8:	0551      	lsls	r1, r2, #21
 8002cba:	d505      	bpl.n	8002cc8 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8002cc0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8002cc4:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cc6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cc8:	0592      	lsls	r2, r2, #22
 8002cca:	d521      	bpl.n	8002d10 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cd0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cd4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002cd6:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 8002cd8:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8002cda:	f7ff ff6e 	bl	8002bba <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002cde:	682a      	ldr	r2, [r5, #0]
 8002ce0:	6853      	ldr	r3, [r2, #4]
 8002ce2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002ce6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002cea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002cf4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002cf6:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8002cfa:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002d06:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8002d0a:	e003      	b.n	8002d14 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8002d0c:	4626      	mov	r6, r4
 8002d0e:	e7c9      	b.n	8002ca4 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8002d10:	2e00      	cmp	r6, #0
 8002d12:	d1e0      	bne.n	8002cd6 <I2C_IsErrorOccurred+0xd2>
}
 8002d14:	4630      	mov	r0, r6
 8002d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002d1a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002d1a:	b570      	push	{r4, r5, r6, lr}
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	460d      	mov	r5, r1
 8002d20:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	079b      	lsls	r3, r3, #30
 8002d28:	d501      	bpl.n	8002d2e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002d2a:	2000      	movs	r0, #0
}
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2e:	4632      	mov	r2, r6
 8002d30:	4629      	mov	r1, r5
 8002d32:	4620      	mov	r0, r4
 8002d34:	f7ff ff66 	bl	8002c04 <I2C_IsErrorOccurred>
 8002d38:	b9a0      	cbnz	r0, 8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	1c6a      	adds	r2, r5, #1
 8002d3c:	d0f1      	beq.n	8002d22 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7ff f9f7 	bl	8002130 <HAL_GetTick>
 8002d42:	1b80      	subs	r0, r0, r6
 8002d44:	42a8      	cmp	r0, r5
 8002d46:	d801      	bhi.n	8002d4c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d1ea      	bne.n	8002d22 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d4e:	f043 0320 	orr.w	r3, r3, #32
 8002d52:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	2320      	movs	r3, #32
 8002d56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002d60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d64:	2001      	movs	r0, #1
 8002d66:	e7e1      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08002d68 <I2C_WaitOnFlagUntilTimeout>:
{
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6c:	9f06      	ldr	r7, [sp, #24]
 8002d6e:	4604      	mov	r4, r0
 8002d70:	4688      	mov	r8, r1
 8002d72:	4616      	mov	r6, r2
 8002d74:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	6993      	ldr	r3, [r2, #24]
 8002d7a:	ea38 0303 	bics.w	r3, r8, r3
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	42b3      	cmp	r3, r6
 8002d86:	d001      	beq.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e015      	b.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	1c6b      	adds	r3, r5, #1
 8002d8e:	d0f3      	beq.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d90:	f7ff f9ce 	bl	8002130 <HAL_GetTick>
 8002d94:	1bc0      	subs	r0, r0, r7
 8002d96:	42a8      	cmp	r0, r5
 8002d98:	d801      	bhi.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x36>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d1eb      	bne.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002da0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	f043 0320 	orr.w	r3, r3, #32
 8002da6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	2320      	movs	r3, #32
 8002daa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002db4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002dbc <I2C_RequestMemoryWrite>:
{
 8002dbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002dc0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <I2C_RequestMemoryWrite+0x68>)
{
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	b2f2      	uxtb	r2, r6
 8002dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8002dd0:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dd4:	f7ff ff00 	bl	8002bd8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd8:	4628      	mov	r0, r5
 8002dda:	4642      	mov	r2, r8
 8002ddc:	4639      	mov	r1, r7
 8002dde:	f7ff ff9c 	bl	8002d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002de2:	b118      	cbz	r0, 8002dec <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
}
 8002de6:	b002      	add	sp, #8
 8002de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dec:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dee:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002df0:	d10d      	bne.n	8002e0e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df2:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	2200      	movs	r2, #0
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dfa:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	f8cd 8000 	str.w	r8, [sp]
 8002e02:	f7ff ffb1 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002e06:	3800      	subs	r0, #0
 8002e08:	bf18      	it	ne
 8002e0a:	2001      	movne	r0, #1
 8002e0c:	e7eb      	b.n	8002de6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e0e:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e10:	4639      	mov	r1, r7
 8002e12:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e16:	4642      	mov	r2, r8
 8002e18:	f7ff ff7f 	bl	8002d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d1e1      	bne.n	8002de4 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	e7e6      	b.n	8002df2 <I2C_RequestMemoryWrite+0x36>
 8002e24:	80002000 	.word	0x80002000

08002e28 <I2C_RequestMemoryRead>:
{
 8002e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e2c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <I2C_RequestMemoryRead+0x68>)
{
 8002e30:	4605      	mov	r5, r0
 8002e32:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	b2f2      	uxtb	r2, r6
 8002e38:	2300      	movs	r3, #0
{
 8002e3a:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e3e:	f7ff fecb 	bl	8002bd8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	4628      	mov	r0, r5
 8002e44:	4642      	mov	r2, r8
 8002e46:	4639      	mov	r1, r7
 8002e48:	f7ff ff67 	bl	8002d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4c:	b118      	cbz	r0, 8002e56 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8002e4e:	2001      	movs	r0, #1
}
 8002e50:	b002      	add	sp, #8
 8002e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e56:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e58:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e5a:	d10d      	bne.n	8002e78 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5c:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2140      	movs	r1, #64	; 0x40
 8002e62:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e64:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e66:	463b      	mov	r3, r7
 8002e68:	f8cd 8000 	str.w	r8, [sp]
 8002e6c:	f7ff ff7c 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002e70:	3800      	subs	r0, #0
 8002e72:	bf18      	it	ne
 8002e74:	2001      	movne	r0, #1
 8002e76:	e7eb      	b.n	8002e50 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e78:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	4639      	mov	r1, r7
 8002e7c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e80:	4642      	mov	r2, r8
 8002e82:	f7ff ff4a 	bl	8002d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d1e1      	bne.n	8002e4e <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8a:	682b      	ldr	r3, [r5, #0]
 8002e8c:	e7e6      	b.n	8002e5c <I2C_RequestMemoryRead+0x34>
 8002e8e:	bf00      	nop
 8002e90:	80002000 	.word	0x80002000

08002e94 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	4604      	mov	r4, r0
 8002e98:	460d      	mov	r5, r1
 8002e9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	069b      	lsls	r3, r3, #26
 8002ea2:	d501      	bpl.n	8002ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002ea4:	2000      	movs	r0, #0
}
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea8:	4632      	mov	r2, r6
 8002eaa:	4629      	mov	r1, r5
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff fea9 	bl	8002c04 <I2C_IsErrorOccurred>
 8002eb2:	b990      	cbnz	r0, 8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7ff f93c 	bl	8002130 <HAL_GetTick>
 8002eb8:	1b80      	subs	r0, r0, r6
 8002eba:	42a8      	cmp	r0, r5
 8002ebc:	d801      	bhi.n	8002ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002ebe:	2d00      	cmp	r5, #0
 8002ec0:	d1ec      	bne.n	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ec4:	f043 0320 	orr.w	r3, r3, #32
 8002ec8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002ed6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002eda:	2001      	movs	r0, #1
 8002edc:	e7e3      	b.n	8002ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08002ede <HAL_I2C_Init>:
{
 8002ede:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d04a      	beq.n	8002f7c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eee:	b91b      	cbnz	r3, 8002ef8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002ef0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002ef4:	f7fe ff40 	bl	8001d78 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	2324      	movs	r3, #36	; 0x24
 8002efa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f08:	6862      	ldr	r2, [r4, #4]
 8002f0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f0e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f16:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f18:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f1c:	2901      	cmp	r1, #1
 8002f1e:	d124      	bne.n	8002f6a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f24:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f26:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f2a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f32:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f3c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002f40:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f42:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f48:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f4a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f62:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002f68:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f6e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f70:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f72:	d1d8      	bne.n	8002f26 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e7d4      	b.n	8002f26 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	e7f3      	b.n	8002f68 <HAL_I2C_Init+0x8a>

08002f80 <HAL_I2C_Mem_Write>:
{
 8002f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f84:	b085      	sub	sp, #20
 8002f86:	469b      	mov	fp, r3
 8002f88:	4604      	mov	r4, r0
 8002f8a:	460f      	mov	r7, r1
 8002f8c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002f90:	4692      	mov	sl, r2
 8002f92:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8002f96:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	f040 80a3 	bne.w	80030e8 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8002fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fa4:	b10b      	cbz	r3, 8002faa <HAL_I2C_Mem_Write+0x2a>
 8002fa6:	9b03      	ldr	r3, [sp, #12]
 8002fa8:	b933      	cbnz	r3, 8002fb8 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fae:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
}
 8002fb2:	b005      	add	sp, #20
 8002fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002fb8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f000 8093 	beq.w	80030e8 <HAL_I2C_Mem_Write+0x168>
 8002fc2:	2501      	movs	r5, #1
 8002fc4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002fc8:	f7ff f8b2 	bl	8002130 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fcc:	2319      	movs	r3, #25
 8002fce:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002fd0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fd2:	462a      	mov	r2, r5
 8002fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f7ff fec5 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4680      	mov	r8, r0
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe4:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8002fe6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe8:	4652      	mov	r2, sl
 8002fea:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff0:	2340      	movs	r3, #64	; 0x40
 8002ff2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ffa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002ffc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ffe:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003000:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8003004:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003006:	465b      	mov	r3, fp
 8003008:	f7ff fed8 	bl	8002dbc <I2C_RequestMemoryWrite>
 800300c:	b110      	cbz	r0, 8003014 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800300e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003012:	e7cd      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2bff      	cmp	r3, #255	; 0xff
 800301a:	d955      	bls.n	80030c8 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800301c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800301e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003022:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003024:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003026:	4639      	mov	r1, r7
 8003028:	4620      	mov	r0, r4
 800302a:	f7ff fdd5 	bl	8002bd8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302e:	4632      	mov	r2, r6
 8003030:	4649      	mov	r1, r9
 8003032:	4620      	mov	r0, r4
 8003034:	f7ff fe71 	bl	8002d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003038:	2800      	cmp	r0, #0
 800303a:	d1b9      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800303c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800303e:	6822      	ldr	r2, [r4, #0]
 8003040:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003044:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003046:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003048:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800304a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800304c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800304e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003050:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003052:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003054:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003056:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003058:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800305a:	b29b      	uxth	r3, r3
 800305c:	b1ab      	cbz	r3, 800308a <HAL_I2C_Mem_Write+0x10a>
 800305e:	b9a2      	cbnz	r2, 800308a <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003060:	464b      	mov	r3, r9
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	4620      	mov	r0, r4
 8003066:	9600      	str	r6, [sp, #0]
 8003068:	f7ff fe7e 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 800306c:	2800      	cmp	r0, #0
 800306e:	d19f      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003070:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	2bff      	cmp	r3, #255	; 0xff
 8003076:	d92f      	bls.n	80030d8 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003078:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800307a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800307e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003080:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003082:	4639      	mov	r1, r7
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff fda7 	bl	8002bd8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800308a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1cd      	bne.n	800302e <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	4632      	mov	r2, r6
 8003094:	4649      	mov	r1, r9
 8003096:	4620      	mov	r0, r4
 8003098:	f7ff fefc 	bl	8002e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800309c:	2800      	cmp	r0, #0
 800309e:	d187      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	2120      	movs	r1, #32
 80030a4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80030ac:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80030b0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030be:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80030c6:	e774      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80030c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ce:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80030d0:	b292      	uxth	r2, r2
 80030d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	e7a6      	b.n	8003026 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80030d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030de:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80030e0:	b292      	uxth	r2, r2
 80030e2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	e7cc      	b.n	8003082 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80030e8:	2002      	movs	r0, #2
 80030ea:	e762      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x32>

080030ec <HAL_I2C_Mem_Read>:
{
 80030ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f0:	b085      	sub	sp, #20
 80030f2:	469b      	mov	fp, r3
 80030f4:	4604      	mov	r4, r0
 80030f6:	460f      	mov	r7, r1
 80030f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80030fc:	4692      	mov	sl, r2
 80030fe:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003102:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003108:	2b20      	cmp	r3, #32
 800310a:	f040 80a7 	bne.w	800325c <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800310e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003110:	b10b      	cbz	r3, 8003116 <HAL_I2C_Mem_Read+0x2a>
 8003112:	9b03      	ldr	r3, [sp, #12]
 8003114:	b933      	cbnz	r3, 8003124 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800311a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
}
 800311e:	b005      	add	sp, #20
 8003120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003124:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003128:	2b01      	cmp	r3, #1
 800312a:	f000 8097 	beq.w	800325c <HAL_I2C_Mem_Read+0x170>
 800312e:	2501      	movs	r5, #1
 8003130:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003134:	f7fe fffc 	bl	8002130 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003138:	2319      	movs	r3, #25
 800313a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800313c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800313e:	462a      	mov	r2, r5
 8003140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff fe0f 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4680      	mov	r8, r0
 800314c:	2800      	cmp	r0, #0
 800314e:	d1e5      	bne.n	800311c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003150:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8003152:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003154:	4652      	mov	r2, sl
 8003156:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003158:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315c:	2340      	movs	r3, #64	; 0x40
 800315e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8003162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003166:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003168:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800316a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8003170:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003172:	465b      	mov	r3, fp
 8003174:	f7ff fe58 	bl	8002e28 <I2C_RequestMemoryRead>
 8003178:	b110      	cbz	r0, 8003180 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800317a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800317e:	e7cd      	b.n	800311c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	2bff      	cmp	r3, #255	; 0xff
 8003186:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_I2C_Mem_Read+0x174>)
 8003188:	d958      	bls.n	800323c <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800318a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003192:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003194:	4639      	mov	r1, r7
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff fd1e 	bl	8002bd8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800319c:	464b      	mov	r3, r9
 800319e:	2200      	movs	r2, #0
 80031a0:	2104      	movs	r1, #4
 80031a2:	4620      	mov	r0, r4
 80031a4:	9600      	str	r6, [sp, #0]
 80031a6:	f7ff fddf 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d1b6      	bne.n	800311c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031b4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80031b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80031b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80031ba:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80031bc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80031be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80031c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80031c2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80031c4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80031c6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b1ab      	cbz	r3, 80031fe <HAL_I2C_Mem_Read+0x112>
 80031d2:	b9a2      	cbnz	r2, 80031fe <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031d4:	464b      	mov	r3, r9
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	4620      	mov	r0, r4
 80031da:	9600      	str	r6, [sp, #0]
 80031dc:	f7ff fdc4 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d19b      	bne.n	800311c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2bff      	cmp	r3, #255	; 0xff
 80031ea:	d92f      	bls.n	800324c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ec:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031f2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031f6:	4639      	mov	r1, r7
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7ff fced 	bl	8002bd8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80031fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ca      	bne.n	800319c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	4632      	mov	r2, r6
 8003208:	4649      	mov	r1, r9
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff fe42 	bl	8002e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003210:	2800      	cmp	r0, #0
 8003212:	d183      	bne.n	800311c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	2120      	movs	r1, #32
 8003218:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003220:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003224:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800322e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003232:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003236:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800323a:	e770      	b.n	800311e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800323c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8003244:	b292      	uxth	r2, r2
 8003246:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	e7a3      	b.n	8003194 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800324c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800324e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003252:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003254:	b292      	uxth	r2, r2
 8003256:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	e7cc      	b.n	80031f6 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 800325c:	2002      	movs	r0, #2
 800325e:	e75e      	b.n	800311e <HAL_I2C_Mem_Read+0x32>
 8003260:	80002400 	.word	0x80002400

08003264 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003264:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003266:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800326a:	2b20      	cmp	r3, #32
 800326c:	b2dc      	uxtb	r4, r3
 800326e:	d11d      	bne.n	80032ac <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003274:	2b01      	cmp	r3, #1
 8003276:	d019      	beq.n	80032ac <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	2324      	movs	r3, #36	; 0x24
 800327a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327e:	6803      	ldr	r3, [r0, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800328e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4311      	orrs	r1, r2
 8003294:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80032a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80032a8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80032aa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80032ac:	2002      	movs	r0, #2
 80032ae:	e7fc      	b.n	80032aa <HAL_I2CEx_ConfigAnalogFilter+0x46>

080032b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032b0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	b2dc      	uxtb	r4, r3
 80032ba:	d11c      	bne.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d018      	beq.n	80032f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	2324      	movs	r3, #36	; 0x24
 80032c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ca:	6803      	ldr	r3, [r0, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032d4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032da:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032de:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80032ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80032f2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80032f4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80032f6:	2002      	movs	r0, #2
 80032f8:	e7fc      	b.n	80032f4 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080032fc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80032fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003302:	4c19      	ldr	r4, [pc, #100]	; (8003368 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800331c:	f7fe ff08 	bl	8002130 <HAL_GetTick>
 8003320:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003322:	6863      	ldr	r3, [r4, #4]
 8003324:	03da      	lsls	r2, r3, #15
 8003326:	d50c      	bpl.n	8003342 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003328:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800332a:	4d0f      	ldr	r5, [pc, #60]	; (8003368 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003332:	f7fe fefd 	bl	8002130 <HAL_GetTick>
 8003336:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003338:	686b      	ldr	r3, [r5, #4]
 800333a:	039b      	lsls	r3, r3, #14
 800333c:	d50a      	bpl.n	8003354 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800333e:	2000      	movs	r0, #0
 8003340:	e006      	b.n	8003350 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003342:	f7fe fef5 	bl	8002130 <HAL_GetTick>
 8003346:	1b40      	subs	r0, r0, r5
 8003348:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800334c:	d9e9      	bls.n	8003322 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800334e:	2003      	movs	r0, #3
}
 8003350:	b003      	add	sp, #12
 8003352:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003354:	f7fe feec 	bl	8002130 <HAL_GetTick>
 8003358:	1b00      	subs	r0, r0, r4
 800335a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800335e:	d9eb      	bls.n	8003338 <HAL_PWREx_EnableOverDrive+0x3c>
 8003360:	e7f5      	b.n	800334e <HAL_PWREx_EnableOverDrive+0x52>
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40007000 	.word	0x40007000

0800336c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003370:	4604      	mov	r4, r0
 8003372:	b340      	cbz	r0, 80033c6 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003374:	6803      	ldr	r3, [r0, #0]
 8003376:	07db      	lsls	r3, r3, #31
 8003378:	d410      	bmi.n	800339c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	079f      	lsls	r7, r3, #30
 800337e:	d464      	bmi.n	800344a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	0719      	lsls	r1, r3, #28
 8003384:	f100 80aa 	bmi.w	80034dc <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	075a      	lsls	r2, r3, #29
 800338c:	f100 80cb 	bmi.w	8003526 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003390:	69a2      	ldr	r2, [r4, #24]
 8003392:	2a00      	cmp	r2, #0
 8003394:	f040 8134 	bne.w	8003600 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003398:	2000      	movs	r0, #0
 800339a:	e02b      	b.n	80033f4 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800339c:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f002 020c 	and.w	r2, r2, #12
 80033a4:	2a04      	cmp	r2, #4
 80033a6:	d007      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	f002 020c 	and.w	r2, r2, #12
 80033ae:	2a08      	cmp	r2, #8
 80033b0:	d10b      	bne.n	80033ca <HAL_RCC_OscConfig+0x5e>
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	0256      	lsls	r6, r2, #9
 80033b6:	d508      	bpl.n	80033ca <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b8f      	ldr	r3, [pc, #572]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	039d      	lsls	r5, r3, #14
 80033be:	d5dc      	bpl.n	800337a <HAL_RCC_OscConfig+0xe>
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1d9      	bne.n	800337a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
 80033c8:	e014      	b.n	80033f4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ca:	6862      	ldr	r2, [r4, #4]
 80033cc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80033d0:	d113      	bne.n	80033fa <HAL_RCC_OscConfig+0x8e>
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033da:	f7fe fea9 	bl	8002130 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4e86      	ldr	r6, [pc, #536]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80033e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	6833      	ldr	r3, [r6, #0]
 80033e4:	0398      	lsls	r0, r3, #14
 80033e6:	d4c8      	bmi.n	800337a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fea2 	bl	8002130 <HAL_GetTick>
 80033ec:	1b40      	subs	r0, r0, r5
 80033ee:	2864      	cmp	r0, #100	; 0x64
 80033f0:	d9f7      	bls.n	80033e2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80033f2:	2003      	movs	r0, #3
}
 80033f4:	b002      	add	sp, #8
 80033f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fa:	4d7f      	ldr	r5, [pc, #508]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b992      	cbnz	r2, 8003426 <HAL_RCC_OscConfig+0xba>
 8003400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003404:	602b      	str	r3, [r5, #0]
 8003406:	682b      	ldr	r3, [r5, #0]
 8003408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800340e:	f7fe fe8f 	bl	8002130 <HAL_GetTick>
 8003412:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	0399      	lsls	r1, r3, #14
 8003418:	d5af      	bpl.n	800337a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341a:	f7fe fe89 	bl	8002130 <HAL_GetTick>
 800341e:	1b80      	subs	r0, r0, r6
 8003420:	2864      	cmp	r0, #100	; 0x64
 8003422:	d9f7      	bls.n	8003414 <HAL_RCC_OscConfig+0xa8>
 8003424:	e7e5      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800342a:	d107      	bne.n	800343c <HAL_RCC_OscConfig+0xd0>
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	602b      	str	r3, [r5, #0]
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	602b      	str	r3, [r5, #0]
 800343a:	e7ce      	b.n	80033da <HAL_RCC_OscConfig+0x6e>
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	682b      	ldr	r3, [r5, #0]
 8003444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003448:	e7f6      	b.n	8003438 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344a:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	f012 0f0c 	tst.w	r2, #12
 8003452:	d007      	beq.n	8003464 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	f002 020c 	and.w	r2, r2, #12
 800345a:	2a08      	cmp	r2, #8
 800345c:	d111      	bne.n	8003482 <HAL_RCC_OscConfig+0x116>
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	0252      	lsls	r2, r2, #9
 8003462:	d40e      	bmi.n	8003482 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003464:	4a64      	ldr	r2, [pc, #400]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	079b      	lsls	r3, r3, #30
 800346a:	d502      	bpl.n	8003472 <HAL_RCC_OscConfig+0x106>
 800346c:	68e3      	ldr	r3, [r4, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d1a9      	bne.n	80033c6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	6921      	ldr	r1, [r4, #16]
 8003476:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800347a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800347e:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003480:	e77e      	b.n	8003380 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003482:	68e2      	ldr	r2, [r4, #12]
 8003484:	b1c2      	cbz	r2, 80034b8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8003486:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	4d5b      	ldr	r5, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003490:	f7fe fe4e 	bl	8002130 <HAL_GetTick>
 8003494:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	682b      	ldr	r3, [r5, #0]
 8003498:	079f      	lsls	r7, r3, #30
 800349a:	d507      	bpl.n	80034ac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	6922      	ldr	r2, [r4, #16]
 80034a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80034a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80034a8:	602b      	str	r3, [r5, #0]
 80034aa:	e769      	b.n	8003380 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe fe40 	bl	8002130 <HAL_GetTick>
 80034b0:	1b80      	subs	r0, r0, r6
 80034b2:	2802      	cmp	r0, #2
 80034b4:	d9ef      	bls.n	8003496 <HAL_RCC_OscConfig+0x12a>
 80034b6:	e79c      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80034b8:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	4e4f      	ldr	r6, [pc, #316]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80034c2:	f7fe fe35 	bl	8002130 <HAL_GetTick>
 80034c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c8:	6833      	ldr	r3, [r6, #0]
 80034ca:	0798      	lsls	r0, r3, #30
 80034cc:	f57f af58 	bpl.w	8003380 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fe fe2e 	bl	8002130 <HAL_GetTick>
 80034d4:	1b40      	subs	r0, r0, r5
 80034d6:	2802      	cmp	r0, #2
 80034d8:	d9f6      	bls.n	80034c8 <HAL_RCC_OscConfig+0x15c>
 80034da:	e78a      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034dc:	6963      	ldr	r3, [r4, #20]
 80034de:	4d46      	ldr	r5, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 80034e0:	b183      	cbz	r3, 8003504 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80034e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80034ea:	f7fe fe21 	bl	8002130 <HAL_GetTick>
 80034ee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80034f2:	079b      	lsls	r3, r3, #30
 80034f4:	f53f af48 	bmi.w	8003388 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe fe1a 	bl	8002130 <HAL_GetTick>
 80034fc:	1b80      	subs	r0, r0, r6
 80034fe:	2802      	cmp	r0, #2
 8003500:	d9f6      	bls.n	80034f0 <HAL_RCC_OscConfig+0x184>
 8003502:	e776      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003504:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800350c:	f7fe fe10 	bl	8002130 <HAL_GetTick>
 8003510:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003512:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003514:	079f      	lsls	r7, r3, #30
 8003516:	f57f af37 	bpl.w	8003388 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351a:	f7fe fe09 	bl	8002130 <HAL_GetTick>
 800351e:	1b80      	subs	r0, r0, r6
 8003520:	2802      	cmp	r0, #2
 8003522:	d9f6      	bls.n	8003512 <HAL_RCC_OscConfig+0x1a6>
 8003524:	e765      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 8003528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352a:	00d0      	lsls	r0, r2, #3
 800352c:	d427      	bmi.n	800357e <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003530:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003542:	4d2e      	ldr	r5, [pc, #184]	; (80035fc <HAL_RCC_OscConfig+0x290>)
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	05d9      	lsls	r1, r3, #23
 8003548:	d51b      	bpl.n	8003582 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354a:	68a3      	ldr	r3, [r4, #8]
 800354c:	4d2a      	ldr	r5, [pc, #168]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 800354e:	2b01      	cmp	r3, #1
 8003550:	d127      	bne.n	80035a2 <HAL_RCC_OscConfig+0x236>
 8003552:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800355e:	f7fe fde7 	bl	8002130 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	4e25      	ldr	r6, [pc, #148]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003564:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003568:	079b      	lsls	r3, r3, #30
 800356a:	d53f      	bpl.n	80035ec <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 800356c:	2f00      	cmp	r7, #0
 800356e:	f43f af0f 	beq.w	8003390 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x28c>)
 8003574:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357a:	6413      	str	r3, [r2, #64]	; 0x40
 800357c:	e708      	b.n	8003390 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800357e:	2700      	movs	r7, #0
 8003580:	e7df      	b.n	8003542 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8003582:	682b      	ldr	r3, [r5, #0]
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800358a:	f7fe fdd1 	bl	8002130 <HAL_GetTick>
 800358e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	05da      	lsls	r2, r3, #23
 8003594:	d4d9      	bmi.n	800354a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fe fdcb 	bl	8002130 <HAL_GetTick>
 800359a:	1b80      	subs	r0, r0, r6
 800359c:	2864      	cmp	r0, #100	; 0x64
 800359e:	d9f7      	bls.n	8003590 <HAL_RCC_OscConfig+0x224>
 80035a0:	e727      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a2:	b9ab      	cbnz	r3, 80035d0 <HAL_RCC_OscConfig+0x264>
 80035a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	672b      	str	r3, [r5, #112]	; 0x70
 80035b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80035b8:	f7fe fdba 	bl	8002130 <HAL_GetTick>
 80035bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035c0:	0798      	lsls	r0, r3, #30
 80035c2:	d5d3      	bpl.n	800356c <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fe fdb4 	bl	8002130 <HAL_GetTick>
 80035c8:	1b80      	subs	r0, r0, r6
 80035ca:	4540      	cmp	r0, r8
 80035cc:	d9f7      	bls.n	80035be <HAL_RCC_OscConfig+0x252>
 80035ce:	e710      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035d4:	d103      	bne.n	80035de <HAL_RCC_OscConfig+0x272>
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	672b      	str	r3, [r5, #112]	; 0x70
 80035dc:	e7b9      	b.n	8003552 <HAL_RCC_OscConfig+0x1e6>
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	672b      	str	r3, [r5, #112]	; 0x70
 80035e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80035e6:	f023 0304 	bic.w	r3, r3, #4
 80035ea:	e7b5      	b.n	8003558 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe fda0 	bl	8002130 <HAL_GetTick>
 80035f0:	1b40      	subs	r0, r0, r5
 80035f2:	4540      	cmp	r0, r8
 80035f4:	d9b7      	bls.n	8003566 <HAL_RCC_OscConfig+0x1fa>
 80035f6:	e6fc      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003600:	4d38      	ldr	r5, [pc, #224]	; (80036e4 <HAL_RCC_OscConfig+0x378>)
 8003602:	68ab      	ldr	r3, [r5, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d041      	beq.n	8003690 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 800360c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003614:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003616:	d12e      	bne.n	8003676 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8003618:	f7fe fd8a 	bl	8002130 <HAL_GetTick>
 800361c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	682b      	ldr	r3, [r5, #0]
 8003620:	0199      	lsls	r1, r3, #6
 8003622:	d422      	bmi.n	800366a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800362e:	430b      	orrs	r3, r1
 8003630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003634:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003636:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800363a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800363c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003644:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003646:	682b      	ldr	r3, [r5, #0]
 8003648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800364e:	f7fe fd6f 	bl	8002130 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4d24      	ldr	r5, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8003654:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	682b      	ldr	r3, [r5, #0]
 8003658:	019a      	lsls	r2, r3, #6
 800365a:	f53f ae9d 	bmi.w	8003398 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe fd67 	bl	8002130 <HAL_GetTick>
 8003662:	1b00      	subs	r0, r0, r4
 8003664:	2802      	cmp	r0, #2
 8003666:	d9f6      	bls.n	8003656 <HAL_RCC_OscConfig+0x2ea>
 8003668:	e6c3      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366a:	f7fe fd61 	bl	8002130 <HAL_GetTick>
 800366e:	1b80      	subs	r0, r0, r6
 8003670:	2802      	cmp	r0, #2
 8003672:	d9d4      	bls.n	800361e <HAL_RCC_OscConfig+0x2b2>
 8003674:	e6bd      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003676:	f7fe fd5b 	bl	8002130 <HAL_GetTick>
 800367a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	019b      	lsls	r3, r3, #6
 8003680:	f57f ae8a 	bpl.w	8003398 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fd54 	bl	8002130 <HAL_GetTick>
 8003688:	1b00      	subs	r0, r0, r4
 800368a:	2802      	cmp	r0, #2
 800368c:	d9f6      	bls.n	800367c <HAL_RCC_OscConfig+0x310>
 800368e:	e6b0      	b.n	80033f2 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003690:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8003692:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003694:	f43f ae97 	beq.w	80033c6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	69e1      	ldr	r1, [r4, #28]
 800369e:	428a      	cmp	r2, r1
 80036a0:	f47f ae91 	bne.w	80033c6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a8:	6a21      	ldr	r1, [r4, #32]
 80036aa:	428a      	cmp	r2, r1
 80036ac:	f47f ae8b 	bne.w	80033c6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b6:	401a      	ands	r2, r3
 80036b8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80036bc:	f47f ae83 	bne.w	80033c6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036c2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80036c6:	0852      	lsrs	r2, r2, #1
 80036c8:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ca:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80036ce:	f47f ae7a 	bne.w	80033c6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80036d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036d8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80036dc:	f43f ae5c 	beq.w	8003398 <HAL_RCC_OscConfig+0x2c>
 80036e0:	e671      	b.n	80033c6 <HAL_RCC_OscConfig+0x5a>
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800

080036e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e8:	4913      	ldr	r1, [pc, #76]	; (8003738 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80036ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	688b      	ldr	r3, [r1, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d01b      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x46>
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d11b      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036fa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003700:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003704:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003708:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800370c:	bf1a      	itte	ne
 800370e:	480b      	ldrne	r0, [pc, #44]	; (800373c <HAL_RCC_GetSysClockFreq+0x54>)
 8003710:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	480b      	ldreq	r0, [pc, #44]	; (8003740 <HAL_RCC_GetSysClockFreq+0x58>)
 8003714:	fba1 0100 	umull	r0, r1, r1, r0
 8003718:	f7fd fac6 	bl	8000ca8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_RCC_GetSysClockFreq+0x50>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003724:	3301      	adds	r3, #1
 8003726:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003728:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800372c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372e:	4803      	ldr	r0, [pc, #12]	; (800373c <HAL_RCC_GetSysClockFreq+0x54>)
 8003730:	e7fc      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8003732:	4803      	ldr	r0, [pc, #12]	; (8003740 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003734:	e7fa      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x44>
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	007a1200 	.word	0x007a1200
 8003740:	00f42400 	.word	0x00f42400

08003744 <HAL_RCC_ClockConfig>:
{
 8003744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800374a:	4604      	mov	r4, r0
 800374c:	b910      	cbnz	r0, 8003754 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800374e:	2001      	movs	r0, #1
}
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003754:	4a46      	ldr	r2, [pc, #280]	; (8003870 <HAL_RCC_ClockConfig+0x12c>)
 8003756:	6813      	ldr	r3, [r2, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	428b      	cmp	r3, r1
 800375e:	d328      	bcc.n	80037b2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	0797      	lsls	r7, r2, #30
 8003764:	d430      	bmi.n	80037c8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003766:	07d0      	lsls	r0, r2, #31
 8003768:	d444      	bmi.n	80037f4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800376a:	4a41      	ldr	r2, [pc, #260]	; (8003870 <HAL_RCC_ClockConfig+0x12c>)
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	42ab      	cmp	r3, r5
 8003774:	d867      	bhi.n	8003846 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	0751      	lsls	r1, r2, #29
 800377a:	d470      	bmi.n	800385e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	0713      	lsls	r3, r2, #28
 800377e:	d507      	bpl.n	8003790 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003780:	4a3c      	ldr	r2, [pc, #240]	; (8003874 <HAL_RCC_ClockConfig+0x130>)
 8003782:	6921      	ldr	r1, [r4, #16]
 8003784:	6893      	ldr	r3, [r2, #8]
 8003786:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800378a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800378e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003790:	f7ff ffaa 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_ClockConfig+0x130>)
 8003796:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_RCC_ClockConfig+0x134>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	40d8      	lsrs	r0, r3
 80037a2:	4b36      	ldr	r3, [pc, #216]	; (800387c <HAL_RCC_ClockConfig+0x138>)
 80037a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <HAL_RCC_ClockConfig+0x13c>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	f7fe fbdf 	bl	8001f6c <HAL_InitTick>
  return HAL_OK;
 80037ae:	2000      	movs	r0, #0
 80037b0:	e7ce      	b.n	8003750 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	f023 030f 	bic.w	r3, r3, #15
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	428b      	cmp	r3, r1
 80037c4:	d1c3      	bne.n	800374e <HAL_RCC_ClockConfig+0xa>
 80037c6:	e7cb      	b.n	8003760 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	f012 0f04 	tst.w	r2, #4
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCC_ClockConfig+0x130>)
 80037ce:	d003      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80037d6:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	0716      	lsls	r6, r2, #28
 80037da:	d503      	bpl.n	80037e4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80037e2:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4923      	ldr	r1, [pc, #140]	; (8003874 <HAL_RCC_ClockConfig+0x130>)
 80037e6:	68a0      	ldr	r0, [r4, #8]
 80037e8:	688b      	ldr	r3, [r1, #8]
 80037ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ee:	4303      	orrs	r3, r0
 80037f0:	608b      	str	r3, [r1, #8]
 80037f2:	e7b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f4:	6861      	ldr	r1, [r4, #4]
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_RCC_ClockConfig+0x130>)
 80037f8:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fc:	d11b      	bne.n	8003836 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	d0a4      	beq.n	800374e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003804:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003806:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4f1a      	ldr	r7, [pc, #104]	; (8003874 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380c:	f022 0203 	bic.w	r2, r2, #3
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003814:	f7fe fc8c 	bl	8002130 <HAL_GetTick>
 8003818:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6862      	ldr	r2, [r4, #4]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003826:	d0a0      	beq.n	800376a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003828:	f7fe fc82 	bl	8002130 <HAL_GetTick>
 800382c:	1b80      	subs	r0, r0, r6
 800382e:	4540      	cmp	r0, r8
 8003830:	d9f3      	bls.n	800381a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8003832:	2003      	movs	r0, #3
 8003834:	e78c      	b.n	8003750 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003836:	2902      	cmp	r1, #2
 8003838:	d102      	bne.n	8003840 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800383e:	e7e0      	b.n	8003802 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	f012 0f02 	tst.w	r2, #2
 8003844:	e7dd      	b.n	8003802 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	6813      	ldr	r3, [r2, #0]
 8003848:	f023 030f 	bic.w	r3, r3, #15
 800384c:	432b      	orrs	r3, r5
 800384e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003850:	6813      	ldr	r3, [r2, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	42ab      	cmp	r3, r5
 8003858:	f47f af79 	bne.w	800374e <HAL_RCC_ClockConfig+0xa>
 800385c:	e78b      	b.n	8003776 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385e:	4905      	ldr	r1, [pc, #20]	; (8003874 <HAL_RCC_ClockConfig+0x130>)
 8003860:	68e0      	ldr	r0, [r4, #12]
 8003862:	688b      	ldr	r3, [r1, #8]
 8003864:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003868:	4303      	orrs	r3, r0
 800386a:	608b      	str	r3, [r1, #8]
 800386c:	e786      	b.n	800377c <HAL_RCC_ClockConfig+0x38>
 800386e:	bf00      	nop
 8003870:	40023c00 	.word	0x40023c00
 8003874:	40023800 	.word	0x40023800
 8003878:	08011882 	.word	0x08011882
 800387c:	20000010 	.word	0x20000010
 8003880:	20000018 	.word	0x20000018

08003884 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003884:	4b01      	ldr	r3, [pc, #4]	; (800388c <HAL_RCC_GetHCLKFreq+0x8>)
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000010 	.word	0x20000010

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	4a03      	ldr	r2, [pc, #12]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800389e:	6810      	ldr	r0, [r2, #0]
}
 80038a0:	40d8      	lsrs	r0, r3
 80038a2:	4770      	bx	lr
 80038a4:	40023800 	.word	0x40023800
 80038a8:	08011892 	.word	0x08011892
 80038ac:	20000010 	.word	0x20000010

080038b0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038b0:	230f      	movs	r3, #15
 80038b2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_GetClockConfig+0x34>)
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	f002 0203 	and.w	r2, r2, #3
 80038bc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80038c4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80038cc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80038d6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_RCC_GetClockConfig+0x38>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	600b      	str	r3, [r1, #0]
}
 80038e2:	4770      	bx	lr
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40023c00 	.word	0x40023c00

080038ec <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038ec:	6803      	ldr	r3, [r0, #0]
{
 80038ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038f2:	f013 0601 	ands.w	r6, r3, #1
{
 80038f6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038f8:	d00b      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038fa:	4aaa      	ldr	r2, [pc, #680]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80038fc:	6891      	ldr	r1, [r2, #8]
 80038fe:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003902:	6091      	str	r1, [r2, #8]
 8003904:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003906:	6891      	ldr	r1, [r2, #8]
 8003908:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800390a:	fab6 f686 	clz	r6, r6
 800390e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003910:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003912:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003916:	d012      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003918:	49a2      	ldr	r1, [pc, #648]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800391a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800391c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003920:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003924:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003928:	bf08      	it	eq
 800392a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800392c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003930:	bf16      	itet	ne
 8003932:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003936:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003938:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800393a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800393e:	02d8      	lsls	r0, r3, #11
 8003940:	d510      	bpl.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003942:	4898      	ldr	r0, [pc, #608]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003944:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003946:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800394a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800394e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003952:	ea42 0201 	orr.w	r2, r2, r1
 8003956:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800395a:	f000 8184 	beq.w	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800395e:	2900      	cmp	r1, #0
 8003960:	bf08      	it	eq
 8003962:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003964:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003968:	bf18      	it	ne
 800396a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800396c:	0699      	lsls	r1, r3, #26
 800396e:	d531      	bpl.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003970:	4b8c      	ldr	r3, [pc, #560]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003972:	4f8d      	ldr	r7, [pc, #564]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003976:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398e:	f7fe fbcf 	bl	8002130 <HAL_GetTick>
 8003992:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	05da      	lsls	r2, r3, #23
 8003998:	f140 8167 	bpl.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800399c:	4f81      	ldr	r7, [pc, #516]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800399e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80039a4:	f040 816c 	bne.w	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039aa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80039ae:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80039b2:	4a7c      	ldr	r2, [pc, #496]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039b4:	f040 818a 	bne.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039b8:	6891      	ldr	r1, [r2, #8]
 80039ba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80039be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80039c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80039c6:	4301      	orrs	r1, r0
 80039c8:	6091      	str	r1, [r2, #8]
 80039ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	06d9      	lsls	r1, r3, #27
 80039d8:	d50c      	bpl.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039da:	4a72      	ldr	r2, [pc, #456]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80039e0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80039e4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80039e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80039ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039ee:	4301      	orrs	r1, r0
 80039f0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f4:	045a      	lsls	r2, r3, #17
 80039f6:	d508      	bpl.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f8:	496a      	ldr	r1, [pc, #424]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80039fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a00:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003a04:	4302      	orrs	r2, r0
 8003a06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a0a:	041f      	lsls	r7, r3, #16
 8003a0c:	d508      	bpl.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a0e:	4965      	ldr	r1, [pc, #404]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a10:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003a12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a16:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003a1a:	4302      	orrs	r2, r0
 8003a1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a20:	03d8      	lsls	r0, r3, #15
 8003a22:	d508      	bpl.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a24:	495f      	ldr	r1, [pc, #380]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a26:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003a28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a2c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003a30:	4302      	orrs	r2, r0
 8003a32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a36:	0399      	lsls	r1, r3, #14
 8003a38:	d508      	bpl.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a3a:	495a      	ldr	r1, [pc, #360]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003a3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a42:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003a46:	4302      	orrs	r2, r0
 8003a48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a4c:	065a      	lsls	r2, r3, #25
 8003a4e:	d508      	bpl.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a50:	4954      	ldr	r1, [pc, #336]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a52:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003a54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a58:	f022 0203 	bic.w	r2, r2, #3
 8003a5c:	4302      	orrs	r2, r0
 8003a5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a62:	061f      	lsls	r7, r3, #24
 8003a64:	d508      	bpl.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a66:	494f      	ldr	r1, [pc, #316]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003a6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a6e:	f022 020c 	bic.w	r2, r2, #12
 8003a72:	4302      	orrs	r2, r0
 8003a74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a78:	05d8      	lsls	r0, r3, #23
 8003a7a:	d508      	bpl.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a7c:	4949      	ldr	r1, [pc, #292]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a7e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003a80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a84:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003a88:	4302      	orrs	r2, r0
 8003a8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a8e:	0599      	lsls	r1, r3, #22
 8003a90:	d508      	bpl.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a92:	4944      	ldr	r1, [pc, #272]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a94:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003a96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003a9e:	4302      	orrs	r2, r0
 8003aa0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aa4:	055a      	lsls	r2, r3, #21
 8003aa6:	d508      	bpl.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aa8:	493e      	ldr	r1, [pc, #248]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003aaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003aac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ab0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ab4:	4302      	orrs	r2, r0
 8003ab6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003aba:	051f      	lsls	r7, r3, #20
 8003abc:	d508      	bpl.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003abe:	4939      	ldr	r1, [pc, #228]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ac6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003aca:	4302      	orrs	r2, r0
 8003acc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ad0:	04d8      	lsls	r0, r3, #19
 8003ad2:	d508      	bpl.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ad4:	4933      	ldr	r1, [pc, #204]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003ad6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003ad8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003adc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ae0:	4302      	orrs	r2, r0
 8003ae2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ae6:	0499      	lsls	r1, r3, #18
 8003ae8:	d508      	bpl.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aea:	492e      	ldr	r1, [pc, #184]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003aec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003aee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003af2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003af6:	4302      	orrs	r2, r0
 8003af8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003afc:	025a      	lsls	r2, r3, #9
 8003afe:	d508      	bpl.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b00:	4928      	ldr	r1, [pc, #160]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b02:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003b04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b08:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003b0c:	4302      	orrs	r2, r0
 8003b0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b12:	029f      	lsls	r7, r3, #10
 8003b14:	d50c      	bpl.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b16:	4823      	ldr	r0, [pc, #140]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b18:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003b1a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003b1e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b22:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003b26:	bf08      	it	eq
 8003b28:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003b30:	f013 0f08 	tst.w	r3, #8
 8003b34:	bf18      	it	ne
 8003b36:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b38:	0358      	lsls	r0, r3, #13
 8003b3a:	d508      	bpl.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3c:	4919      	ldr	r1, [pc, #100]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b3e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003b40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b48:	4302      	orrs	r2, r0
 8003b4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b4e:	0219      	lsls	r1, r3, #8
 8003b50:	d509      	bpl.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b52:	4914      	ldr	r1, [pc, #80]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b54:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003b58:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003b5c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003b60:	4302      	orrs	r2, r0
 8003b62:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b66:	2e01      	cmp	r6, #1
 8003b68:	f000 80b4 	beq.w	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b6c:	019a      	lsls	r2, r3, #6
 8003b6e:	f100 80b1 	bmi.w	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b72:	2d01      	cmp	r5, #1
 8003b74:	d175      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b76:	4d0b      	ldr	r5, [pc, #44]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fe fad6 	bl	8002130 <HAL_GetTick>
 8003b84:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b86:	682b      	ldr	r3, [r5, #0]
 8003b88:	009f      	lsls	r7, r3, #2
 8003b8a:	f100 8127 	bmi.w	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	0316      	lsls	r6, r2, #12
 8003b92:	d501      	bpl.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b96:	b14b      	cbz	r3, 8003bac <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003b98:	02d0      	lsls	r0, r2, #11
 8003b9a:	d522      	bpl.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b9e:	bb03      	cbnz	r3, 8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003ba0:	e004      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bac:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb0:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bb8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6961      	ldr	r1, [r4, #20]
 8003bc0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003bc4:	69a1      	ldr	r1, [r4, #24]
 8003bc6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003bca:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bce:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003bd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003bd4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003bd8:	3901      	subs	r1, #1
 8003bda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003bde:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003be2:	0291      	lsls	r1, r2, #10
 8003be4:	d515      	bpl.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003be6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bec:	d111      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bee:	4982      	ldr	r1, [pc, #520]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bf0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bf4:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bf8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003bfc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003c00:	4303      	orrs	r3, r0
 8003c02:	6960      	ldr	r0, [r4, #20]
 8003c04:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c08:	6a20      	ldr	r0, [r4, #32]
 8003c0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c12:	0712      	lsls	r2, r2, #28
 8003c14:	d519      	bpl.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c16:	4a78      	ldr	r2, [pc, #480]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c18:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c1c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c20:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6961      	ldr	r1, [r4, #20]
 8003c2c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003c30:	69e1      	ldr	r1, [r4, #28]
 8003c32:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003c36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c3a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003c3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c40:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c44:	430b      	orrs	r3, r1
 8003c46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c4a:	4c6b      	ldr	r4, [pc, #428]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fe fa6c 	bl	8002130 <HAL_GetTick>
 8003c58:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	f140 80c4 	bpl.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003c62:	2000      	movs	r0, #0
 8003c64:	e009      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8003c66:	2601      	movs	r6, #1
 8003c68:	e67c      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fe fa61 	bl	8002130 <HAL_GetTick>
 8003c6e:	eba0 0008 	sub.w	r0, r0, r8
 8003c72:	2864      	cmp	r0, #100	; 0x64
 8003c74:	f67f ae8e 	bls.w	8003994 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003c78:	2003      	movs	r0, #3
}
 8003c7a:	b003      	add	sp, #12
 8003c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c82:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f43f ae8e 	beq.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c98:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ca0:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003ca2:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca6:	07db      	lsls	r3, r3, #31
 8003ca8:	f57f ae7e 	bpl.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8003cac:	f7fe fa40 	bl	8002130 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003cb4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb8:	0798      	lsls	r0, r3, #30
 8003cba:	f53f ae75 	bmi.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fe fa37 	bl	8002130 <HAL_GetTick>
 8003cc2:	eba0 0008 	sub.w	r0, r0, r8
 8003cc6:	4548      	cmp	r0, r9
 8003cc8:	d9f5      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8003cca:	e7d5      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ccc:	6891      	ldr	r1, [r2, #8]
 8003cce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003cd2:	e679      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8003cd4:	4e48      	ldr	r6, [pc, #288]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd6:	6833      	ldr	r3, [r6, #0]
 8003cd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cdc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003cde:	f7fe fa27 	bl	8002130 <HAL_GetTick>
 8003ce2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce4:	6833      	ldr	r3, [r6, #0]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	d472      	bmi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	07d7      	lsls	r7, r2, #31
 8003cee:	d512      	bpl.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cf2:	b983      	cbnz	r3, 8003d16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cf4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cf8:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d00:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6861      	ldr	r1, [r4, #4]
 8003d08:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003d12:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d16:	0316      	lsls	r6, r2, #12
 8003d18:	d503      	bpl.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003d1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d20:	d005      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003d22:	02d0      	lsls	r0, r2, #11
 8003d24:	d51e      	bpl.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2c:	d11a      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d2e:	4932      	ldr	r1, [pc, #200]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d30:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d34:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d3c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003d40:	4303      	orrs	r3, r0
 8003d42:	6860      	ldr	r0, [r4, #4]
 8003d44:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d48:	68e0      	ldr	r0, [r4, #12]
 8003d4a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d52:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8003d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d58:	f020 001f 	bic.w	r0, r0, #31
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	4303      	orrs	r3, r0
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d64:	01d1      	lsls	r1, r2, #7
 8003d66:	d511      	bpl.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d68:	4923      	ldr	r1, [pc, #140]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d6a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d6e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d72:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003d76:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003d7a:	4303      	orrs	r3, r0
 8003d7c:	6860      	ldr	r0, [r4, #4]
 8003d7e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d82:	6920      	ldr	r0, [r4, #16]
 8003d84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d8c:	0192      	lsls	r2, r2, #6
 8003d8e:	d50d      	bpl.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003d9a:	68e2      	ldr	r2, [r4, #12]
 8003d9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003da0:	68a2      	ldr	r2, [r4, #8]
 8003da2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003dac:	4e12      	ldr	r6, [pc, #72]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dae:	6833      	ldr	r3, [r6, #0]
 8003db0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003db4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003db6:	f7fe f9bb 	bl	8002130 <HAL_GetTick>
 8003dba:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dbc:	6833      	ldr	r3, [r6, #0]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	f53f aed7 	bmi.w	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dc4:	f7fe f9b4 	bl	8002130 <HAL_GetTick>
 8003dc8:	1bc0      	subs	r0, r0, r7
 8003dca:	2864      	cmp	r0, #100	; 0x64
 8003dcc:	d9f6      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003dce:	e753      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dd0:	f7fe f9ae 	bl	8002130 <HAL_GetTick>
 8003dd4:	1bc0      	subs	r0, r0, r7
 8003dd6:	2864      	cmp	r0, #100	; 0x64
 8003dd8:	d984      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003dda:	e74d      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ddc:	f7fe f9a8 	bl	8002130 <HAL_GetTick>
 8003de0:	1b80      	subs	r0, r0, r6
 8003de2:	2864      	cmp	r0, #100	; 0x64
 8003de4:	f67f aecf 	bls.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003de8:	e746      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dea:	f7fe f9a1 	bl	8002130 <HAL_GetTick>
 8003dee:	1b40      	subs	r0, r0, r5
 8003df0:	2864      	cmp	r0, #100	; 0x64
 8003df2:	f67f af32 	bls.w	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003df6:	e73f      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8003df8:	40023800 	.word	0x40023800

08003dfc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d133      	bne.n	8003e70 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e0e:	6803      	ldr	r3, [r0, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e18:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <HAL_TIM_Base_Start_IT+0x74>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01a      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x54>
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d017      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x54>
 8003e24:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x54>
 8003e2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00f      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x54>
 8003e34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x54>
 8003e3c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x54>
 8003e44:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x54>
 8003e4c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e54:	6899      	ldr	r1, [r3, #8]
 8003e56:	4a08      	ldr	r2, [pc, #32]	; (8003e78 <HAL_TIM_Base_Start_IT+0x78>)
 8003e58:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5a:	2a06      	cmp	r2, #6
 8003e5c:	d006      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x6c>
 8003e5e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003e62:	d003      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e6c:	2000      	movs	r0, #0
}
 8003e6e:	4770      	bx	lr
    return HAL_ERROR;
 8003e70:	2001      	movs	r0, #1
 8003e72:	4770      	bx	lr
 8003e74:	40010000 	.word	0x40010000
 8003e78:	00010007 	.word	0x00010007

08003e7c <HAL_TIM_OC_DelayElapsedCallback>:
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_IC_CaptureCallback>:
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIM_TriggerCallback>:
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e84:	6803      	ldr	r3, [r0, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	0791      	lsls	r1, r2, #30
{
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e8e:	d50f      	bpl.n	8003eb0 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	0792      	lsls	r2, r2, #30
 8003e94:	d50c      	bpl.n	8003eb0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e96:	f06f 0202 	mvn.w	r2, #2
 8003e9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	0799      	lsls	r1, r3, #30
 8003ea4:	f000 8085 	beq.w	8003fb2 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea8:	f7ff ffe9 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eac:	2300      	movs	r3, #0
 8003eae:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	0752      	lsls	r2, r2, #29
 8003eb6:	d510      	bpl.n	8003eda <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	0750      	lsls	r0, r2, #29
 8003ebc:	d50d      	bpl.n	8003eda <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ebe:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ed0:	d075      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	f7ff ffd4 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	0711      	lsls	r1, r2, #28
 8003ee0:	d50f      	bpl.n	8003f02 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	0712      	lsls	r2, r2, #28
 8003ee6:	d50c      	bpl.n	8003f02 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ee8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	079b      	lsls	r3, r3, #30
 8003ef8:	d067      	beq.n	8003fca <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	f7ff ffc0 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	2300      	movs	r3, #0
 8003f00:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	06d0      	lsls	r0, r2, #27
 8003f08:	d510      	bpl.n	8003f2c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	06d1      	lsls	r1, r2, #27
 8003f0e:	d50d      	bpl.n	8003f2c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f10:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f18:	2208      	movs	r2, #8
 8003f1a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f22:	d058      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f24:	f7ff ffab 	bl	8003e7e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	07d2      	lsls	r2, r2, #31
 8003f32:	d508      	bpl.n	8003f46 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	07d0      	lsls	r0, r2, #31
 8003f38:	d505      	bpl.n	8003f46 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f3a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f40:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f42:	f7fe f855 	bl	8001ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	0611      	lsls	r1, r2, #24
 8003f4c:	d508      	bpl.n	8003f60 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	0612      	lsls	r2, r2, #24
 8003f52:	d505      	bpl.n	8003f60 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f5c:	f000 f8d9 	bl	8004112 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	05d0      	lsls	r0, r2, #23
 8003f66:	d508      	bpl.n	8003f7a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	0611      	lsls	r1, r2, #24
 8003f6c:	d505      	bpl.n	8003f7a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f74:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003f76:	f000 f8cd 	bl	8004114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	0652      	lsls	r2, r2, #25
 8003f80:	d508      	bpl.n	8003f94 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	0650      	lsls	r0, r2, #25
 8003f86:	d505      	bpl.n	8003f94 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f8c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003f90:	f7ff ff77 	bl	8003e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	0691      	lsls	r1, r2, #26
 8003f9a:	d522      	bpl.n	8003fe2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	0692      	lsls	r2, r2, #26
 8003fa0:	d51f      	bpl.n	8003fe2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003fae:	f000 b8af 	b.w	8004110 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	f7ff ff63 	bl	8003e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7ff ff62 	bl	8003e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fbc:	e776      	b.n	8003eac <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	f7ff ff5d 	bl	8003e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7ff ff5c 	bl	8003e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fc8:	e785      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	f7ff ff57 	bl	8003e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f7ff ff56 	bl	8003e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fd4:	e793      	b.n	8003efe <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	f7ff ff51 	bl	8003e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7ff ff50 	bl	8003e80 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fe0:	e7a2      	b.n	8003f28 <HAL_TIM_IRQHandler+0xa4>
}
 8003fe2:	bd10      	pop	{r4, pc}

08003fe4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003fe6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	4290      	cmp	r0, r2
 8003fea:	d012      	beq.n	8004012 <TIM_Base_SetConfig+0x2e>
 8003fec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ff0:	d00f      	beq.n	8004012 <TIM_Base_SetConfig+0x2e>
 8003ff2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ff6:	4290      	cmp	r0, r2
 8003ff8:	d00b      	beq.n	8004012 <TIM_Base_SetConfig+0x2e>
 8003ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ffe:	4290      	cmp	r0, r2
 8004000:	d007      	beq.n	8004012 <TIM_Base_SetConfig+0x2e>
 8004002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004006:	4290      	cmp	r0, r2
 8004008:	d003      	beq.n	8004012 <TIM_Base_SetConfig+0x2e>
 800400a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800400e:	4290      	cmp	r0, r2
 8004010:	d119      	bne.n	8004046 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004012:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004018:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <TIM_Base_SetConfig+0xc4>)
 800401c:	4290      	cmp	r0, r2
 800401e:	d029      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 8004020:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004024:	d026      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 8004026:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800402a:	4290      	cmp	r0, r2
 800402c:	d022      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 800402e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004032:	4290      	cmp	r0, r2
 8004034:	d01e      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 8004036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800403a:	4290      	cmp	r0, r2
 800403c:	d01a      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 800403e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004042:	4290      	cmp	r0, r2
 8004044:	d016      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 8004046:	4a19      	ldr	r2, [pc, #100]	; (80040ac <TIM_Base_SetConfig+0xc8>)
 8004048:	4290      	cmp	r0, r2
 800404a:	d013      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 800404c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004050:	4290      	cmp	r0, r2
 8004052:	d00f      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 8004054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004058:	4290      	cmp	r0, r2
 800405a:	d00b      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 800405c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004060:	4290      	cmp	r0, r2
 8004062:	d007      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 8004064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004068:	4290      	cmp	r0, r2
 800406a:	d003      	beq.n	8004074 <TIM_Base_SetConfig+0x90>
 800406c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004070:	4290      	cmp	r0, r2
 8004072:	d103      	bne.n	800407c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004078:	68ca      	ldr	r2, [r1, #12]
 800407a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800407c:	694a      	ldr	r2, [r1, #20]
 800407e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004082:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004084:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004086:	688b      	ldr	r3, [r1, #8]
 8004088:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408a:	680b      	ldr	r3, [r1, #0]
 800408c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <TIM_Base_SetConfig+0xc4>)
 8004090:	4298      	cmp	r0, r3
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0xb8>
 8004094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004098:	4298      	cmp	r0, r3
 800409a:	d101      	bne.n	80040a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	690b      	ldr	r3, [r1, #16]
 800409e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	2301      	movs	r3, #1
 80040a2:	6143      	str	r3, [r0, #20]
}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40014000 	.word	0x40014000

080040b0 <HAL_TIM_Base_Init>:
{
 80040b0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80040b2:	4604      	mov	r4, r0
 80040b4:	b350      	cbz	r0, 800410c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80040b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040be:	b91b      	cbnz	r3, 80040c8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80040c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80040c4:	f7ff fe9a 	bl	8003dfc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80040ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d2:	f7ff ff87 	bl	8003fe4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d6:	2301      	movs	r3, #1
  return HAL_OK;
 80040d8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80040e2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80040e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80040ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80040ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004102:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800410a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800410c:	2001      	movs	r0, #1
 800410e:	e7fc      	b.n	800410a <HAL_TIM_Base_Init+0x5a>

08004110 <HAL_TIMEx_CommutCallback>:
 8004110:	4770      	bx	lr

08004112 <HAL_TIMEx_BreakCallback>:
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_Break2Callback>:
 8004114:	4770      	bx	lr

08004116 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004116:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004120:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004122:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800412a:	4770      	bx	lr

0800412c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004130:	4770      	bx	lr

08004132 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004132:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004134:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004136:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004138:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800413e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004140:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004142:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004144:	3301      	adds	r3, #1
 8004146:	6003      	str	r3, [r0, #0]
}
 8004148:	4770      	bx	lr

0800414a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800414a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800414c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800414e:	1c63      	adds	r3, r4, #1
 8004150:	d10a      	bne.n	8004168 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004152:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004158:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800415a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800415c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800415e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004160:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004162:	3301      	adds	r3, #1
 8004164:	6003      	str	r3, [r0, #0]
}
 8004166:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004168:	f100 0208 	add.w	r2, r0, #8
 800416c:	4613      	mov	r3, r2
 800416e:	6852      	ldr	r2, [r2, #4]
 8004170:	6815      	ldr	r5, [r2, #0]
 8004172:	42a5      	cmp	r5, r4
 8004174:	d9fa      	bls.n	800416c <vListInsert+0x22>
 8004176:	e7ed      	b.n	8004154 <vListInsert+0xa>

08004178 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004178:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800417a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800417e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004180:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004186:	bf08      	it	eq
 8004188:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800418a:	2200      	movs	r2, #0
 800418c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	3a01      	subs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004194:	6818      	ldr	r0, [r3, #0]
}
 8004196:	4770      	bx	lr

08004198 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004198:	b510      	push	{r4, lr}
 800419a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800419c:	f001 fc1a 	bl	80059d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80041a2:	f001 fc3b 	bl	8005a1c <vPortExitCritical>

	return xReturn;
}
 80041a6:	fab4 f084 	clz	r0, r4
 80041aa:	0940      	lsrs	r0, r0, #5
 80041ac:	bd10      	pop	{r4, pc}

080041ae <prvCopyDataToQueue>:
{
 80041ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80041b4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041b6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041b8:	b952      	cbnz	r2, 80041d0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041ba:	6807      	ldr	r7, [r0, #0]
 80041bc:	bb47      	cbnz	r7, 8004210 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041be:	6880      	ldr	r0, [r0, #8]
 80041c0:	f001 f8c4 	bl	800534c <xTaskPriorityDisinherit>
 80041c4:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041c6:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041c8:	3601      	adds	r6, #1
}
 80041ca:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041cc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80041ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80041d0:	b965      	cbnz	r5, 80041ec <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041d2:	6840      	ldr	r0, [r0, #4]
 80041d4:	f00a fa64 	bl	800e6a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041dc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041de:	68a2      	ldr	r2, [r4, #8]
 80041e0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041e2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041e4:	d3f0      	bcc.n	80041c8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	6063      	str	r3, [r4, #4]
 80041ea:	e7ed      	b.n	80041c8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041ec:	68c0      	ldr	r0, [r0, #12]
 80041ee:	f00a fa57 	bl	800e6a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	4251      	negs	r1, r2
 80041f8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041fe:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004200:	bf3e      	ittt	cc
 8004202:	68a3      	ldrcc	r3, [r4, #8]
 8004204:	185b      	addcc	r3, r3, r1
 8004206:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004208:	2d02      	cmp	r5, #2
 800420a:	d101      	bne.n	8004210 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800420c:	b116      	cbz	r6, 8004214 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800420e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004210:	2500      	movs	r5, #0
 8004212:	e7d9      	b.n	80041c8 <prvCopyDataToQueue+0x1a>
 8004214:	4635      	mov	r5, r6
 8004216:	e7d7      	b.n	80041c8 <prvCopyDataToQueue+0x1a>

08004218 <prvCopyDataFromQueue>:
{
 8004218:	4603      	mov	r3, r0
 800421a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800421c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800421e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004220:	b162      	cbz	r2, 800423c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004222:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004224:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004226:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004228:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800422a:	60dc      	str	r4, [r3, #12]
}
 800422c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004230:	bf24      	itt	cs
 8004232:	6819      	ldrcs	r1, [r3, #0]
 8004234:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004236:	68d9      	ldr	r1, [r3, #12]
 8004238:	f00a ba32 	b.w	800e6a0 <memcpy>
}
 800423c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004240:	4770      	bx	lr

08004242 <prvUnlockQueue>:
{
 8004242:	b570      	push	{r4, r5, r6, lr}
 8004244:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004246:	f001 fbc5 	bl	80059d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800424a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800424e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004252:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004254:	2d00      	cmp	r5, #0
 8004256:	dc14      	bgt.n	8004282 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8004258:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800425e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004262:	f001 fbdb 	bl	8005a1c <vPortExitCritical>
	taskENTER_CRITICAL();
 8004266:	f001 fbb5 	bl	80059d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800426a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800426e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004270:	2d00      	cmp	r5, #0
 8004272:	dc12      	bgt.n	800429a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004274:	23ff      	movs	r3, #255	; 0xff
 8004276:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800427a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800427e:	f001 bbcd 	b.w	8005a1c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0e7      	beq.n	8004258 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004288:	4630      	mov	r0, r6
 800428a:	f000 ff75 	bl	8005178 <xTaskRemoveFromEventList>
 800428e:	b108      	cbz	r0, 8004294 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004290:	f000 fff6 	bl	8005280 <vTaskMissedYield>
			--cTxLock;
 8004294:	3d01      	subs	r5, #1
 8004296:	b26d      	sxtb	r5, r5
 8004298:	e7dc      	b.n	8004254 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0e9      	beq.n	8004274 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 ff69 	bl	8005178 <xTaskRemoveFromEventList>
 80042a6:	b108      	cbz	r0, 80042ac <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80042a8:	f000 ffea 	bl	8005280 <vTaskMissedYield>
				--cRxLock;
 80042ac:	3d01      	subs	r5, #1
 80042ae:	b26d      	sxtb	r5, r5
 80042b0:	e7de      	b.n	8004270 <prvUnlockQueue+0x2e>

080042b2 <xQueueGenericReset>:
{
 80042b2:	b538      	push	{r3, r4, r5, lr}
 80042b4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80042b6:	4604      	mov	r4, r0
 80042b8:	b950      	cbnz	r0, 80042d0 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	b672      	cpsid	i
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	b662      	cpsie	i
 80042ce:	e7fe      	b.n	80042ce <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80042d0:	f001 fb80 	bl	80059d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042da:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042dc:	434b      	muls	r3, r1
 80042de:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042e0:	1a5b      	subs	r3, r3, r1
 80042e2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042e4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042e6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042e8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042ea:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042ec:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80042ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80042f6:	b9a5      	cbnz	r5, 8004322 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f8:	6923      	ldr	r3, [r4, #16]
 80042fa:	b173      	cbz	r3, 800431a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042fc:	f104 0010 	add.w	r0, r4, #16
 8004300:	f000 ff3a 	bl	8005178 <xTaskRemoveFromEventList>
 8004304:	b148      	cbz	r0, 800431a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8004306:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800431a:	f001 fb7f 	bl	8005a1c <vPortExitCritical>
}
 800431e:	2001      	movs	r0, #1
 8004320:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004322:	f104 0010 	add.w	r0, r4, #16
 8004326:	f7ff fef6 	bl	8004116 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800432a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800432e:	f7ff fef2 	bl	8004116 <vListInitialise>
 8004332:	e7f2      	b.n	800431a <xQueueGenericReset+0x68>

08004334 <xQueueGenericCreate>:
	{
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	460d      	mov	r5, r1
 8004338:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800433a:	4606      	mov	r6, r0
 800433c:	b950      	cbnz	r0, 8004354 <xQueueGenericCreate+0x20>
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	b672      	cpsid	i
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	b662      	cpsie	i
 8004352:	e7fe      	b.n	8004352 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004354:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004356:	3050      	adds	r0, #80	; 0x50
 8004358:	f001 fa12 	bl	8005780 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800435c:	4604      	mov	r4, r0
 800435e:	b158      	cbz	r0, 8004378 <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004360:	b165      	cbz	r5, 800437c <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004362:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004366:	2101      	movs	r1, #1
 8004368:	4620      	mov	r0, r4
 800436a:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800436c:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004370:	f7ff ff9f 	bl	80042b2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004374:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8004378:	4620      	mov	r0, r4
 800437a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437c:	4603      	mov	r3, r0
 800437e:	e7f2      	b.n	8004366 <xQueueGenericCreate+0x32>

08004380 <xQueueCreateCountingSemaphore>:
	{
 8004380:	b510      	push	{r4, lr}
 8004382:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004384:	b950      	cbnz	r0, 800439c <xQueueCreateCountingSemaphore+0x1c>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	b672      	cpsid	i
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	b662      	cpsie	i
 800439a:	e7fe      	b.n	800439a <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800439c:	4288      	cmp	r0, r1
 800439e:	d20a      	bcs.n	80043b6 <xQueueCreateCountingSemaphore+0x36>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	b672      	cpsid	i
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	b662      	cpsie	i
 80043b4:	e7fe      	b.n	80043b4 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80043b6:	2202      	movs	r2, #2
 80043b8:	2100      	movs	r1, #0
 80043ba:	f7ff ffbb 	bl	8004334 <xQueueGenericCreate>
		if( xHandle != NULL )
 80043be:	b100      	cbz	r0, 80043c2 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80043c0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <xQueueGenericSend>:
{
 80043c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043c8:	b085      	sub	sp, #20
 80043ca:	4688      	mov	r8, r1
 80043cc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80043ce:	4604      	mov	r4, r0
{
 80043d0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80043d2:	b950      	cbnz	r0, 80043ea <xQueueGenericSend+0x26>
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	b672      	cpsid	i
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	b662      	cpsie	i
 80043e8:	e7fe      	b.n	80043e8 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ea:	b961      	cbnz	r1, 8004406 <xQueueGenericSend+0x42>
 80043ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043ee:	b153      	cbz	r3, 8004406 <xQueueGenericSend+0x42>
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	b672      	cpsid	i
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	b662      	cpsie	i
 8004404:	e7fe      	b.n	8004404 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004406:	2f02      	cmp	r7, #2
 8004408:	d10d      	bne.n	8004426 <xQueueGenericSend+0x62>
 800440a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d00a      	beq.n	8004426 <xQueueGenericSend+0x62>
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	b672      	cpsid	i
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	b662      	cpsie	i
 8004424:	e7fe      	b.n	8004424 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004426:	f000 ff33 	bl	8005290 <xTaskGetSchedulerState>
 800442a:	4606      	mov	r6, r0
 800442c:	b960      	cbnz	r0, 8004448 <xQueueGenericSend+0x84>
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	b15b      	cbz	r3, 800444a <xQueueGenericSend+0x86>
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	b672      	cpsid	i
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	b662      	cpsie	i
 8004446:	e7fe      	b.n	8004446 <xQueueGenericSend+0x82>
 8004448:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800444a:	f04f 0900 	mov.w	r9, #0
 800444e:	e037      	b.n	80044c0 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004450:	9d01      	ldr	r5, [sp, #4]
 8004452:	b91d      	cbnz	r5, 800445c <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8004454:	f001 fae2 	bl	8005a1c <vPortExitCritical>
			return errQUEUE_FULL;
 8004458:	2000      	movs	r0, #0
 800445a:	e052      	b.n	8004502 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800445c:	b916      	cbnz	r6, 8004464 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800445e:	a802      	add	r0, sp, #8
 8004460:	f000 fec8 	bl	80051f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004464:	f001 fada 	bl	8005a1c <vPortExitCritical>
		vTaskSuspendAll();
 8004468:	f000 fd14 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800446c:	f001 fab2 	bl	80059d4 <vPortEnterCritical>
 8004470:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004474:	2bff      	cmp	r3, #255	; 0xff
 8004476:	d101      	bne.n	800447c <xQueueGenericSend+0xb8>
 8004478:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800447c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004480:	2bff      	cmp	r3, #255	; 0xff
 8004482:	d101      	bne.n	8004488 <xQueueGenericSend+0xc4>
 8004484:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8004488:	f001 fac8 	bl	8005a1c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800448c:	a901      	add	r1, sp, #4
 800448e:	a802      	add	r0, sp, #8
 8004490:	f000 feba 	bl	8005208 <xTaskCheckForTimeOut>
 8004494:	2800      	cmp	r0, #0
 8004496:	d14a      	bne.n	800452e <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004498:	f001 fa9c 	bl	80059d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800449c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800449e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d131      	bne.n	8004508 <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80044a4:	f001 faba 	bl	8005a1c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044a8:	9901      	ldr	r1, [sp, #4]
 80044aa:	f104 0010 	add.w	r0, r4, #16
 80044ae:	f000 fe49 	bl	8005144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7ff fec5 	bl	8004242 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044b8:	f000 fd78 	bl	8004fac <xTaskResumeAll>
 80044bc:	b360      	cbz	r0, 8004518 <xQueueGenericSend+0x154>
 80044be:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80044c0:	f001 fa88 	bl	80059d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80044c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d301      	bcc.n	80044d0 <xQueueGenericSend+0x10c>
 80044cc:	2f02      	cmp	r7, #2
 80044ce:	d1bf      	bne.n	8004450 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044d0:	463a      	mov	r2, r7
 80044d2:	4641      	mov	r1, r8
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7ff fe6a 	bl	80041ae <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044dc:	b11b      	cbz	r3, 80044e6 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044e2:	f000 fe49 	bl	8005178 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80044e6:	b148      	cbz	r0, 80044fc <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80044e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80044ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80044fc:	f001 fa8e 	bl	8005a1c <vPortExitCritical>
				return pdPASS;
 8004500:	2001      	movs	r0, #1
}
 8004502:	b005      	add	sp, #20
 8004504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8004508:	f001 fa88 	bl	8005a1c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff fe98 	bl	8004242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004512:	f000 fd4b 	bl	8004fac <xTaskResumeAll>
 8004516:	e7d2      	b.n	80044be <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8004518:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004520:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	e7c7      	b.n	80044be <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800452e:	4620      	mov	r0, r4
 8004530:	f7ff fe87 	bl	8004242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004534:	f000 fd3a 	bl	8004fac <xTaskResumeAll>
 8004538:	e78e      	b.n	8004458 <xQueueGenericSend+0x94>

0800453a <xQueueCreateMutex>:
	{
 800453a:	b570      	push	{r4, r5, r6, lr}
 800453c:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800453e:	2050      	movs	r0, #80	; 0x50
 8004540:	f001 f91e 	bl	8005780 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004544:	4604      	mov	r4, r0
 8004546:	b188      	cbz	r0, 800456c <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8004548:	2500      	movs	r5, #0
 800454a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800454c:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800454e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004552:	f7ff feae 	bl	80042b2 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004556:	462b      	mov	r3, r5
 8004558:	462a      	mov	r2, r5
 800455a:	4629      	mov	r1, r5
 800455c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800455e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004562:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004564:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004566:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004568:	f7ff ff2c 	bl	80043c4 <xQueueGenericSend>
	}
 800456c:	4620      	mov	r0, r4
 800456e:	bd70      	pop	{r4, r5, r6, pc}

08004570 <xQueueGenericSendFromISR>:
{
 8004570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004574:	4689      	mov	r9, r1
 8004576:	4690      	mov	r8, r2
 8004578:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800457a:	4604      	mov	r4, r0
 800457c:	b950      	cbnz	r0, 8004594 <xQueueGenericSendFromISR+0x24>
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	b672      	cpsid	i
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	b662      	cpsie	i
 8004592:	e7fe      	b.n	8004592 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004594:	b961      	cbnz	r1, 80045b0 <xQueueGenericSendFromISR+0x40>
 8004596:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004598:	b153      	cbz	r3, 80045b0 <xQueueGenericSendFromISR+0x40>
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	b672      	cpsid	i
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	b662      	cpsie	i
 80045ae:	e7fe      	b.n	80045ae <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045b0:	2f02      	cmp	r7, #2
 80045b2:	d10d      	bne.n	80045d0 <xQueueGenericSendFromISR+0x60>
 80045b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d00a      	beq.n	80045d0 <xQueueGenericSendFromISR+0x60>
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	b672      	cpsid	i
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	b662      	cpsie	i
 80045ce:	e7fe      	b.n	80045ce <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045d0:	f001 fafc 	bl	8005bcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045d4:	f3ef 8611 	mrs	r6, BASEPRI
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	b672      	cpsid	i
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d301      	bcc.n	80045f8 <xQueueGenericSendFromISR+0x88>
 80045f4:	2f02      	cmp	r7, #2
 80045f6:	d122      	bne.n	800463e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80045f8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045fc:	463a      	mov	r2, r7
 80045fe:	4649      	mov	r1, r9
 8004600:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004602:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004604:	f7ff fdd3 	bl	80041ae <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004608:	1c6b      	adds	r3, r5, #1
 800460a:	d113      	bne.n	8004634 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800460c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800460e:	b90b      	cbnz	r3, 8004614 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8004610:	2001      	movs	r0, #1
 8004612:	e00b      	b.n	800462c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004614:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004618:	f000 fdae 	bl	8005178 <xTaskRemoveFromEventList>
 800461c:	2800      	cmp	r0, #0
 800461e:	d0f7      	beq.n	8004610 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8004620:	f1b8 0f00 	cmp.w	r8, #0
 8004624:	d0f4      	beq.n	8004610 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004626:	2001      	movs	r0, #1
 8004628:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800462c:	f386 8811 	msr	BASEPRI, r6
}
 8004630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004634:	3501      	adds	r5, #1
 8004636:	b26d      	sxtb	r5, r5
 8004638:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800463c:	e7e8      	b.n	8004610 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800463e:	2000      	movs	r0, #0
 8004640:	e7f4      	b.n	800462c <xQueueGenericSendFromISR+0xbc>

08004642 <xQueueGiveFromISR>:
{
 8004642:	b570      	push	{r4, r5, r6, lr}
 8004644:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004646:	4604      	mov	r4, r0
 8004648:	b950      	cbnz	r0, 8004660 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	b672      	cpsid	i
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	b662      	cpsie	i
 800465e:	e7fe      	b.n	800465e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004660:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004662:	b153      	cbz	r3, 800467a <xQueueGiveFromISR+0x38>
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	b672      	cpsid	i
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	b662      	cpsie	i
 8004678:	e7fe      	b.n	8004678 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800467a:	6803      	ldr	r3, [r0, #0]
 800467c:	b963      	cbnz	r3, 8004698 <xQueueGiveFromISR+0x56>
 800467e:	6883      	ldr	r3, [r0, #8]
 8004680:	b153      	cbz	r3, 8004698 <xQueueGiveFromISR+0x56>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	b672      	cpsid	i
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	b662      	cpsie	i
 8004696:	e7fe      	b.n	8004696 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004698:	f001 fa98 	bl	8005bcc <vPortValidateInterruptPriority>
	__asm volatile
 800469c:	f3ef 8611 	mrs	r6, BASEPRI
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	b672      	cpsid	i
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80046b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d91c      	bls.n	80046f6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80046bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046c0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80046c2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80046c4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046c6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80046c8:	d110      	bne.n	80046ec <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046cc:	b90b      	cbnz	r3, 80046d2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80046ce:	2001      	movs	r0, #1
 80046d0:	e009      	b.n	80046e6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046d6:	f000 fd4f 	bl	8005178 <xTaskRemoveFromEventList>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d0f7      	beq.n	80046ce <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80046de:	2d00      	cmp	r5, #0
 80046e0:	d0f5      	beq.n	80046ce <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046e2:	2001      	movs	r0, #1
 80046e4:	6028      	str	r0, [r5, #0]
	__asm volatile
 80046e6:	f386 8811 	msr	BASEPRI, r6
}
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046ec:	3301      	adds	r3, #1
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046f4:	e7eb      	b.n	80046ce <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80046f6:	2000      	movs	r0, #0
 80046f8:	e7f5      	b.n	80046e6 <xQueueGiveFromISR+0xa4>

080046fa <xQueueReceive>:
{
 80046fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80046fe:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8004700:	4604      	mov	r4, r0
{
 8004702:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004704:	b950      	cbnz	r0, 800471c <xQueueReceive+0x22>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	b672      	cpsid	i
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	b662      	cpsie	i
 800471a:	e7fe      	b.n	800471a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800471c:	b961      	cbnz	r1, 8004738 <xQueueReceive+0x3e>
 800471e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004720:	b153      	cbz	r3, 8004738 <xQueueReceive+0x3e>
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	b672      	cpsid	i
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	b662      	cpsie	i
 8004736:	e7fe      	b.n	8004736 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004738:	f000 fdaa 	bl	8005290 <xTaskGetSchedulerState>
 800473c:	4606      	mov	r6, r0
 800473e:	b960      	cbnz	r0, 800475a <xQueueReceive+0x60>
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	b15b      	cbz	r3, 800475c <xQueueReceive+0x62>
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	b672      	cpsid	i
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	b662      	cpsie	i
 8004758:	e7fe      	b.n	8004758 <xQueueReceive+0x5e>
 800475a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800475c:	f04f 0800 	mov.w	r8, #0
 8004760:	e03d      	b.n	80047de <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004762:	9d01      	ldr	r5, [sp, #4]
 8004764:	b91d      	cbnz	r5, 800476e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8004766:	f001 f959 	bl	8005a1c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800476a:	2000      	movs	r0, #0
 800476c:	e056      	b.n	800481c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800476e:	b916      	cbnz	r6, 8004776 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004770:	a802      	add	r0, sp, #8
 8004772:	f000 fd3f 	bl	80051f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004776:	f001 f951 	bl	8005a1c <vPortExitCritical>
		vTaskSuspendAll();
 800477a:	f000 fb8b 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800477e:	f001 f929 	bl	80059d4 <vPortEnterCritical>
 8004782:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004786:	2bff      	cmp	r3, #255	; 0xff
 8004788:	d101      	bne.n	800478e <xQueueReceive+0x94>
 800478a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800478e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004792:	2bff      	cmp	r3, #255	; 0xff
 8004794:	d101      	bne.n	800479a <xQueueReceive+0xa0>
 8004796:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800479a:	f001 f93f 	bl	8005a1c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800479e:	a901      	add	r1, sp, #4
 80047a0:	a802      	add	r0, sp, #8
 80047a2:	f000 fd31 	bl	8005208 <xTaskCheckForTimeOut>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d141      	bne.n	800482e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047aa:	4620      	mov	r0, r4
 80047ac:	f7ff fcf4 	bl	8004198 <prvIsQueueEmpty>
 80047b0:	b3b8      	cbz	r0, 8004822 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047b2:	9901      	ldr	r1, [sp, #4]
 80047b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047b8:	f000 fcc4 	bl	8005144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047bc:	4620      	mov	r0, r4
 80047be:	f7ff fd40 	bl	8004242 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047c2:	f000 fbf3 	bl	8004fac <xTaskResumeAll>
 80047c6:	b948      	cbnz	r0, 80047dc <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 80047c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80047de:	f001 f8f9 	bl	80059d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	d0bc      	beq.n	8004762 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047e8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047ea:	4639      	mov	r1, r7
 80047ec:	4620      	mov	r0, r4
 80047ee:	f7ff fd13 	bl	8004218 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047f2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	b173      	cbz	r3, 8004816 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047f8:	f104 0010 	add.w	r0, r4, #16
 80047fc:	f000 fcbc 	bl	8005178 <xTaskRemoveFromEventList>
 8004800:	b148      	cbz	r0, 8004816 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8004802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004816:	f001 f901 	bl	8005a1c <vPortExitCritical>
				return pdPASS;
 800481a:	2001      	movs	r0, #1
}
 800481c:	b004      	add	sp, #16
 800481e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8004822:	4620      	mov	r0, r4
 8004824:	f7ff fd0d 	bl	8004242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004828:	f000 fbc0 	bl	8004fac <xTaskResumeAll>
 800482c:	e7d6      	b.n	80047dc <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800482e:	4620      	mov	r0, r4
 8004830:	f7ff fd07 	bl	8004242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004834:	f000 fbba 	bl	8004fac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004838:	4620      	mov	r0, r4
 800483a:	f7ff fcad 	bl	8004198 <prvIsQueueEmpty>
 800483e:	2800      	cmp	r0, #0
 8004840:	d0cc      	beq.n	80047dc <xQueueReceive+0xe2>
 8004842:	e792      	b.n	800476a <xQueueReceive+0x70>

08004844 <xQueueSemaphoreTake>:
{
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8004848:	4604      	mov	r4, r0
{
 800484a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800484c:	b950      	cbnz	r0, 8004864 <xQueueSemaphoreTake+0x20>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	b672      	cpsid	i
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	b662      	cpsie	i
 8004862:	e7fe      	b.n	8004862 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004864:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004866:	b155      	cbz	r5, 800487e <xQueueSemaphoreTake+0x3a>
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	b672      	cpsid	i
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	b662      	cpsie	i
 800487c:	e7fe      	b.n	800487c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800487e:	f000 fd07 	bl	8005290 <xTaskGetSchedulerState>
 8004882:	4606      	mov	r6, r0
 8004884:	b960      	cbnz	r0, 80048a0 <xQueueSemaphoreTake+0x5c>
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	b16b      	cbz	r3, 80048a6 <xQueueSemaphoreTake+0x62>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	b672      	cpsid	i
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	b662      	cpsie	i
 800489e:	e7fe      	b.n	800489e <xQueueSemaphoreTake+0x5a>
 80048a0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80048a2:	2700      	movs	r7, #0
 80048a4:	e055      	b.n	8004952 <xQueueSemaphoreTake+0x10e>
 80048a6:	4605      	mov	r5, r0
 80048a8:	e7fb      	b.n	80048a2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80048aa:	9b01      	ldr	r3, [sp, #4]
 80048ac:	b973      	cbnz	r3, 80048cc <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048ae:	b155      	cbz	r5, 80048c6 <xQueueSemaphoreTake+0x82>
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	b672      	cpsid	i
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	b662      	cpsie	i
 80048c4:	e7fe      	b.n	80048c4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 80048c6:	f001 f8a9 	bl	8005a1c <vPortExitCritical>
					return errQUEUE_EMPTY;
 80048ca:	e062      	b.n	8004992 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 80048cc:	b916      	cbnz	r6, 80048d4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ce:	a802      	add	r0, sp, #8
 80048d0:	f000 fc90 	bl	80051f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80048d4:	f001 f8a2 	bl	8005a1c <vPortExitCritical>
		vTaskSuspendAll();
 80048d8:	f000 fadc 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048dc:	f001 f87a 	bl	80059d4 <vPortEnterCritical>
 80048e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048e4:	2bff      	cmp	r3, #255	; 0xff
 80048e6:	d101      	bne.n	80048ec <xQueueSemaphoreTake+0xa8>
 80048e8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80048ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80048f0:	2bff      	cmp	r3, #255	; 0xff
 80048f2:	d101      	bne.n	80048f8 <xQueueSemaphoreTake+0xb4>
 80048f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048f8:	f001 f890 	bl	8005a1c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048fc:	a901      	add	r1, sp, #4
 80048fe:	a802      	add	r0, sp, #8
 8004900:	f000 fc82 	bl	8005208 <xTaskCheckForTimeOut>
 8004904:	2800      	cmp	r0, #0
 8004906:	d14d      	bne.n	80049a4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004908:	4620      	mov	r0, r4
 800490a:	f7ff fc45 	bl	8004198 <prvIsQueueEmpty>
 800490e:	2800      	cmp	r0, #0
 8004910:	d042      	beq.n	8004998 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	b93b      	cbnz	r3, 8004926 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8004916:	f001 f85d 	bl	80059d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800491a:	68a0      	ldr	r0, [r4, #8]
 800491c:	f000 fcc8 	bl	80052b0 <xTaskPriorityInherit>
 8004920:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8004922:	f001 f87b 	bl	8005a1c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004926:	9901      	ldr	r1, [sp, #4]
 8004928:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800492c:	f000 fc0a 	bl	8005144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004930:	4620      	mov	r0, r4
 8004932:	f7ff fc86 	bl	8004242 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004936:	f000 fb39 	bl	8004fac <xTaskResumeAll>
 800493a:	b948      	cbnz	r0, 8004950 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800493c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004944:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004952:	f001 f83f 	bl	80059d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0a6      	beq.n	80048aa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800495c:	3b01      	subs	r3, #1
 800495e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	b913      	cbnz	r3, 800496a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004964:	f000 fda2 	bl	80054ac <pvTaskIncrementMutexHeldCount>
 8004968:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	b173      	cbz	r3, 800498c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800496e:	f104 0010 	add.w	r0, r4, #16
 8004972:	f000 fc01 	bl	8005178 <xTaskRemoveFromEventList>
 8004976:	b148      	cbz	r0, 800498c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8004978:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800497c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004980:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800498c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800498e:	f001 f845 	bl	8005a1c <vPortExitCritical>
}
 8004992:	4628      	mov	r0, r5
 8004994:	b005      	add	sp, #20
 8004996:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff fc52 	bl	8004242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800499e:	f000 fb05 	bl	8004fac <xTaskResumeAll>
 80049a2:	e7d5      	b.n	8004950 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80049a4:	4620      	mov	r0, r4
 80049a6:	f7ff fc4c 	bl	8004242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049aa:	f000 faff 	bl	8004fac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff fbf2 	bl	8004198 <prvIsQueueEmpty>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d0cb      	beq.n	8004950 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	d0ea      	beq.n	8004992 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 80049bc:	f001 f80a 	bl	80059d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80049c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049c2:	b119      	cbz	r1, 80049cc <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80049c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049c6:	6819      	ldr	r1, [r3, #0]
 80049c8:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049cc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80049ce:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049d0:	f000 fd10 	bl	80053f4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80049d4:	f001 f822 	bl	8005a1c <vPortExitCritical>
 80049d8:	e7db      	b.n	8004992 <xQueueSemaphoreTake+0x14e>

080049da <xQueueReceiveFromISR>:
{
 80049da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049de:	4689      	mov	r9, r1
 80049e0:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80049e2:	4605      	mov	r5, r0
 80049e4:	b950      	cbnz	r0, 80049fc <xQueueReceiveFromISR+0x22>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	b672      	cpsid	i
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	b662      	cpsie	i
 80049fa:	e7fe      	b.n	80049fa <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049fc:	b961      	cbnz	r1, 8004a18 <xQueueReceiveFromISR+0x3e>
 80049fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a00:	b153      	cbz	r3, 8004a18 <xQueueReceiveFromISR+0x3e>
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	b672      	cpsid	i
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	b662      	cpsie	i
 8004a16:	e7fe      	b.n	8004a16 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a18:	f001 f8d8 	bl	8005bcc <vPortValidateInterruptPriority>
	__asm volatile
 8004a1c:	f3ef 8711 	mrs	r7, BASEPRI
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	b672      	cpsid	i
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a34:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a36:	b31c      	cbz	r4, 8004a80 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a38:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a40:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a42:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a44:	f7ff fbe8 	bl	8004218 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a48:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004a4a:	1c73      	adds	r3, r6, #1
 8004a4c:	d113      	bne.n	8004a76 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4e:	692b      	ldr	r3, [r5, #16]
 8004a50:	b90b      	cbnz	r3, 8004a56 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8004a52:	2001      	movs	r0, #1
 8004a54:	e00b      	b.n	8004a6e <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a56:	f105 0010 	add.w	r0, r5, #16
 8004a5a:	f000 fb8d 	bl	8005178 <xTaskRemoveFromEventList>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d0f7      	beq.n	8004a52 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8004a62:	f1b8 0f00 	cmp.w	r8, #0
 8004a66:	d0f4      	beq.n	8004a52 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8004a6e:	f387 8811 	msr	BASEPRI, r7
}
 8004a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a76:	3601      	adds	r6, #1
 8004a78:	b276      	sxtb	r6, r6
 8004a7a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8004a7e:	e7e8      	b.n	8004a52 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8004a80:	4620      	mov	r0, r4
 8004a82:	e7f4      	b.n	8004a6e <xQueueReceiveFromISR+0x94>

08004a84 <uxQueueMessagesWaiting>:
{
 8004a84:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8004a86:	4604      	mov	r4, r0
 8004a88:	b950      	cbnz	r0, 8004aa0 <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	b672      	cpsid	i
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	b662      	cpsie	i
 8004a9e:	e7fe      	b.n	8004a9e <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 8004aa0:	f000 ff98 	bl	80059d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004aa4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004aa6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8004aa8:	f000 ffb8 	bl	8005a1c <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004aac:	9801      	ldr	r0, [sp, #4]
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8004ab2:	b950      	cbnz	r0, 8004aca <uxQueueMessagesWaitingFromISR+0x18>
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	b672      	cpsid	i
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	b662      	cpsie	i
 8004ac8:	e7fe      	b.n	8004ac8 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004aca:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004acc:	4770      	bx	lr
	...

08004ad0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ad0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004ad2:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <vQueueUnregisterQueue+0x24>)
	{
 8004ad4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004ad6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8004ada:	684c      	ldr	r4, [r1, #4]
 8004adc:	4284      	cmp	r4, r0
 8004ade:	d104      	bne.n	8004aea <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004ae6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004ae8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aea:	3301      	adds	r3, #1
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d1f2      	bne.n	8004ad6 <vQueueUnregisterQueue+0x6>
 8004af0:	e7fa      	b.n	8004ae8 <vQueueUnregisterQueue+0x18>
 8004af2:	bf00      	nop
 8004af4:	2000041c 	.word	0x2000041c

08004af8 <vQueueDelete>:
{
 8004af8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8004afa:	4604      	mov	r4, r0
 8004afc:	b950      	cbnz	r0, 8004b14 <vQueueDelete+0x1c>
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	b672      	cpsid	i
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	b662      	cpsie	i
 8004b12:	e7fe      	b.n	8004b12 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8004b14:	f7ff ffdc 	bl	8004ad0 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8004b18:	4620      	mov	r0, r4
}
 8004b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8004b1e:	f000 beb5 	b.w	800588c <vPortFree>
	...

08004b24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <prvResetNextTaskUnblockTime+0x1c>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	b91a      	cbnz	r2, 8004b34 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b30:	605a      	str	r2, [r3, #4]
	}
}
 8004b32:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b38:	68d2      	ldr	r2, [r2, #12]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	e7f8      	b.n	8004b30 <prvResetNextTaskUnblockTime+0xc>
 8004b3e:	bf00      	nop
 8004b40:	2000045c 	.word	0x2000045c

08004b44 <prvAddCurrentTaskToDelayedList.constprop.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8004b44:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b46:	4c12      	ldr	r4, [pc, #72]	; (8004b90 <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8004b48:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8004b4a:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b4c:	68e0      	ldr	r0, [r4, #12]
 8004b4e:	3004      	adds	r0, #4
 8004b50:	f7ff fb12 	bl	8004178 <uxListRemove>
 8004b54:	b938      	cbnz	r0, 8004b66 <prvAddCurrentTaskToDelayedList.constprop.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b56:	68e2      	ldr	r2, [r4, #12]
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	408a      	lsls	r2, r1
 8004b60:	ea23 0302 	bic.w	r3, r3, r2
 8004b64:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8004b66:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b68:	68e3      	ldr	r3, [r4, #12]
 8004b6a:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8004b6c:	d306      	bcc.n	8004b7c <prvAddCurrentTaskToDelayedList.constprop.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b6e:	6960      	ldr	r0, [r4, #20]
 8004b70:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b76:	3104      	adds	r1, #4
 8004b78:	f7ff bae7 	b.w	800414a <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7c:	6820      	ldr	r0, [r4, #0]
 8004b7e:	68e1      	ldr	r1, [r4, #12]
 8004b80:	3104      	adds	r1, #4
 8004b82:	f7ff fae2 	bl	800414a <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	429d      	cmp	r5, r3
 8004b8a:	d200      	bcs.n	8004b8e <prvAddCurrentTaskToDelayedList.constprop.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 8004b8c:	6065      	str	r5, [r4, #4]
}
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	2000045c 	.word	0x2000045c

08004b94 <prvIdleTask>:
{
 8004b94:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b96:	4c13      	ldr	r4, [pc, #76]	; (8004be4 <prvIdleTask+0x50>)
				taskYIELD();
 8004b98:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 8004b9c:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ba2:	b94b      	cbnz	r3, 8004bb8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d9fa      	bls.n	8004ba0 <prvIdleTask+0xc>
				taskYIELD();
 8004baa:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	e7f3      	b.n	8004ba0 <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 8004bb8:	f000 ff0c 	bl	80059d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bbe:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc0:	1d28      	adds	r0, r5, #4
 8004bc2:	f7ff fad9 	bl	8004178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8004bcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8004bd2:	f000 ff23 	bl	8005a1c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004bd6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004bd8:	f000 fe58 	bl	800588c <vPortFree>
			vPortFree( pxTCB );
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 fe55 	bl	800588c <vPortFree>
	}
 8004be2:	e7dd      	b.n	8004ba0 <prvIdleTask+0xc>
 8004be4:	2000045c 	.word	0x2000045c

08004be8 <xTaskCreate>:
	{
 8004be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bec:	0096      	lsls	r6, r2, #2
	{
 8004bee:	4607      	mov	r7, r0
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 fdc3 	bl	8005780 <pvPortMalloc>
			if( pxStack != NULL )
 8004bfa:	4681      	mov	r9, r0
 8004bfc:	b1a0      	cbz	r0, 8004c28 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bfe:	205c      	movs	r0, #92	; 0x5c
 8004c00:	f000 fdbe 	bl	8005780 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004c04:	4604      	mov	r4, r0
 8004c06:	b160      	cbz	r0, 8004c22 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8004c08:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	21a5      	movs	r1, #165	; 0xa5
 8004c10:	4648      	mov	r0, r9
 8004c12:	f009 fd6d 	bl	800e6f0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c16:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 8004c1a:	b945      	cbnz	r5, 8004c2e <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c1c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8004c20:	e013      	b.n	8004c4a <xTaskCreate+0x62>
					vPortFree( pxStack );
 8004c22:	4648      	mov	r0, r9
 8004c24:	f000 fe32 	bl	800588c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c28:	f04f 36ff 	mov.w	r6, #4294967295
 8004c2c:	e088      	b.n	8004d40 <xTaskCreate+0x158>
 8004c2e:	1e6b      	subs	r3, r5, #1
 8004c30:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004c34:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c36:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004c3a:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8004c3e:	b108      	cbz	r0, 8004c44 <xTaskCreate+0x5c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c40:	429d      	cmp	r5, r3
 8004c42:	d1f8      	bne.n	8004c36 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c44:	2300      	movs	r3, #0
 8004c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8004c4c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c50:	f104 0904 	add.w	r9, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c54:	3e04      	subs	r6, #4
 8004c56:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004c58:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c5c:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c5e:	445e      	add	r6, fp
 8004c60:	bf28      	it	cs
 8004c62:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004c64:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004c66:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c68:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c6c:	f7ff fa5e 	bl	800412c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c70:	f104 0018 	add.w	r0, r4, #24
 8004c74:	f7ff fa5a 	bl	800412c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004c78:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	4639      	mov	r1, r7
 8004c80:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c84:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c86:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c88:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c8a:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c8e:	f000 fe77 	bl	8005980 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8004c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c94:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004c96:	b103      	cbz	r3, 8004c9a <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c98:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 8004c9a:	4d30      	ldr	r5, [pc, #192]	; (8004d5c <xTaskCreate+0x174>)
	taskENTER_CRITICAL();
 8004c9c:	f000 fe9a 	bl	80059d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004ca0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004ca2:	f105 0734 	add.w	r7, r5, #52	; 0x34
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8004caa:	68ee      	ldr	r6, [r5, #12]
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	d14a      	bne.n	8004d46 <xTaskCreate+0x15e>
			pxCurrentTCB = pxNewTCB;
 8004cb0:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cb2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d11c      	bne.n	8004cf2 <xTaskCreate+0x10a>
 8004cb8:	46b8      	mov	r8, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cba:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	f7ff fa2a 	bl	8004116 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc2:	f108 0814 	add.w	r8, r8, #20
 8004cc6:	2e07      	cmp	r6, #7
 8004cc8:	d1f7      	bne.n	8004cba <xTaskCreate+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 8004cca:	4e25      	ldr	r6, [pc, #148]	; (8004d60 <xTaskCreate+0x178>)
	vListInitialise( &xDelayedTaskList2 );
 8004ccc:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7ff fa20 	bl	8004116 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f7ff fa1d 	bl	8004116 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cdc:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8004ce0:	f7ff fa19 	bl	8004116 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004ce4:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 8004ce8:	f7ff fa15 	bl	8004116 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cec:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cee:	f8c5 8014 	str.w	r8, [r5, #20]
		uxTaskNumber++;
 8004cf2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8004cf6:	2601      	movs	r6, #1
 8004cf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cfa:	2014      	movs	r0, #20
		uxTaskNumber++;
 8004cfc:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8004cfe:	6929      	ldr	r1, [r5, #16]
 8004d00:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8004d04:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d08:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004d0a:	fa06 f302 	lsl.w	r3, r6, r2
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	4649      	mov	r1, r9
 8004d12:	612b      	str	r3, [r5, #16]
 8004d14:	f7ff fa0d 	bl	8004132 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004d18:	f000 fe80 	bl	8005a1c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004d1c:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8004d20:	b173      	cbz	r3, 8004d40 <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d22:	68eb      	ldr	r3, [r5, #12]
 8004d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d209      	bcs.n	8004d40 <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 8004d2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
	}
 8004d40:	4630      	mov	r0, r6
 8004d42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8004d46:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1d1      	bne.n	8004cf2 <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d4e:	68eb      	ldr	r3, [r5, #12]
 8004d50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d3cc      	bcc.n	8004cf2 <xTaskCreate+0x10a>
					pxCurrentTCB = pxNewTCB;
 8004d58:	60ec      	str	r4, [r5, #12]
 8004d5a:	e7ca      	b.n	8004cf2 <xTaskCreate+0x10a>
 8004d5c:	2000045c 	.word	0x2000045c
 8004d60:	2000051c 	.word	0x2000051c

08004d64 <vTaskDelete>:
	{
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	4605      	mov	r5, r0
 8004d68:	4c2b      	ldr	r4, [pc, #172]	; (8004e18 <vTaskDelete+0xb4>)
		taskENTER_CRITICAL();
 8004d6a:	f000 fe33 	bl	80059d4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004d6e:	b905      	cbnz	r5, 8004d72 <vTaskDelete+0xe>
 8004d70:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d72:	1d2e      	adds	r6, r5, #4
 8004d74:	4630      	mov	r0, r6
 8004d76:	f7ff f9ff 	bl	8004178 <uxListRemove>
 8004d7a:	b958      	cbnz	r0, 8004d94 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d7c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004d7e:	2014      	movs	r0, #20
 8004d80:	fb00 4001 	mla	r0, r0, r1, r4
 8004d84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d86:	b92b      	cbnz	r3, 8004d94 <vTaskDelete+0x30>
 8004d88:	2201      	movs	r2, #1
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	408a      	lsls	r2, r1
 8004d8e:	ea23 0302 	bic.w	r3, r3, r2
 8004d92:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d94:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004d96:	b11b      	cbz	r3, 8004da0 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d98:	f105 0018 	add.w	r0, r5, #24
 8004d9c:	f7ff f9ec 	bl	8004178 <uxListRemove>
			uxTaskNumber++;
 8004da0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004da4:	3301      	adds	r3, #1
 8004da6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	d11c      	bne.n	8004dea <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004db0:	4631      	mov	r1, r6
 8004db2:	481a      	ldr	r0, [pc, #104]	; (8004e1c <vTaskDelete+0xb8>)
 8004db4:	f7ff f9bd 	bl	8004132 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8004db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004dba:	3301      	adds	r3, #1
 8004dbc:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8004dbe:	f000 fe2d 	bl	8005a1c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8004dc2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8004dc6:	b333      	cbz	r3, 8004e16 <vTaskDelete+0xb2>
			if( pxTCB == pxCurrentTCB )
 8004dc8:	68e3      	ldr	r3, [r4, #12]
 8004dca:	42ab      	cmp	r3, r5
 8004dcc:	d123      	bne.n	8004e16 <vTaskDelete+0xb2>
				configASSERT( uxSchedulerSuspended == 0 );
 8004dce:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004dd2:	b1b3      	cbz	r3, 8004e02 <vTaskDelete+0x9e>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	b672      	cpsid	i
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	b662      	cpsie	i
 8004de8:	e7fe      	b.n	8004de8 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 8004dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8004dec:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8004dee:	3b01      	subs	r3, #1
 8004df0:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8004df2:	f000 fd4b 	bl	800588c <vPortFree>
			vPortFree( pxTCB );
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 fd48 	bl	800588c <vPortFree>
				prvResetNextTaskUnblockTime();
 8004dfc:	f7ff fe92 	bl	8004b24 <prvResetNextTaskUnblockTime>
 8004e00:	e7dd      	b.n	8004dbe <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 8004e02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	f3bf 8f6f 	isb	sy
	}
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	2000045c 	.word	0x2000045c
 8004e1c:	20000474 	.word	0x20000474

08004e20 <vTaskStartScheduler>:
{
 8004e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004e22:	4c19      	ldr	r4, [pc, #100]	; (8004e88 <vTaskStartScheduler+0x68>)
 8004e24:	2500      	movs	r5, #0
 8004e26:	2280      	movs	r2, #128	; 0x80
 8004e28:	4918      	ldr	r1, [pc, #96]	; (8004e8c <vTaskStartScheduler+0x6c>)
 8004e2a:	f504 7384 	add.w	r3, r4, #264	; 0x108
 8004e2e:	4818      	ldr	r0, [pc, #96]	; (8004e90 <vTaskStartScheduler+0x70>)
 8004e30:	9500      	str	r5, [sp, #0]
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	462b      	mov	r3, r5
 8004e36:	f7ff fed7 	bl	8004be8 <xTaskCreate>
	if( xReturn == pdPASS )
 8004e3a:	2801      	cmp	r0, #1
 8004e3c:	d114      	bne.n	8004e68 <vTaskStartScheduler+0x48>
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	b672      	cpsid	i
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8004e58:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e5c:	60a5      	str	r5, [r4, #8]
}
 8004e5e:	b003      	add	sp, #12
 8004e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004e64:	f000 be50 	b.w	8005b08 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d10a      	bne.n	8004e82 <vTaskStartScheduler+0x62>
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	b672      	cpsid	i
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	b662      	cpsie	i
 8004e80:	e7fe      	b.n	8004e80 <vTaskStartScheduler+0x60>
}
 8004e82:	b003      	add	sp, #12
 8004e84:	bd30      	pop	{r4, r5, pc}
 8004e86:	bf00      	nop
 8004e88:	2000045c 	.word	0x2000045c
 8004e8c:	0801aa65 	.word	0x0801aa65
 8004e90:	08004b95 	.word	0x08004b95

08004e94 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004e94:	4a03      	ldr	r2, [pc, #12]	; (8004ea4 <vTaskSuspendAll+0x10>)
 8004e96:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000045c 	.word	0x2000045c

08004ea8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004ea8:	4b01      	ldr	r3, [pc, #4]	; (8004eb0 <xTaskGetTickCount+0x8>)
 8004eaa:	6898      	ldr	r0, [r3, #8]
}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	2000045c 	.word	0x2000045c

08004eb4 <xTaskGetTickCountFromISR>:
{
 8004eb4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eb6:	f000 fe89 	bl	8005bcc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004eba:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <xTaskGetTickCountFromISR+0xc>)
 8004ebc:	6898      	ldr	r0, [r3, #8]
}
 8004ebe:	bd08      	pop	{r3, pc}
 8004ec0:	2000045c 	.word	0x2000045c

08004ec4 <xTaskIncrementTick>:
{
 8004ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec8:	4c36      	ldr	r4, [pc, #216]	; (8004fa4 <xTaskIncrementTick+0xe0>)
 8004eca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d161      	bne.n	8004f96 <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ed2:	68a7      	ldr	r7, [r4, #8]
 8004ed4:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8004ed6:	60a7      	str	r7, [r4, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ed8:	b9c7      	cbnz	r7, 8004f0c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	b153      	cbz	r3, 8004ef6 <xTaskIncrementTick+0x32>
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	b672      	cpsid	i
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	b662      	cpsie	i
 8004ef4:	e7fe      	b.n	8004ef4 <xTaskIncrementTick+0x30>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	6962      	ldr	r2, [r4, #20]
 8004efa:	6022      	str	r2, [r4, #0]
 8004efc:	6163      	str	r3, [r4, #20]
 8004efe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8004f02:	3301      	adds	r3, #1
 8004f04:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8004f08:	f7ff fe0c 	bl	8004b24 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f0c:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8004f0e:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f10:	42bb      	cmp	r3, r7
 8004f12:	d910      	bls.n	8004f36 <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f14:	68e3      	ldr	r3, [r4, #12]
 8004f16:	2214      	movs	r2, #20
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	fb02 4303 	mla	r3, r2, r3, r4
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	bf28      	it	cs
 8004f24:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8004f26:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 8004f2a:	2b00      	cmp	r3, #0
}
 8004f2c:	bf0c      	ite	eq
 8004f2e:	4628      	moveq	r0, r5
 8004f30:	2001      	movne	r0, #1
 8004f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8004f36:	f04f 0a01 	mov.w	sl, #1
 8004f3a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004fa8 <xTaskIncrementTick+0xe4>
 8004f3e:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b91b      	cbnz	r3, 8004f50 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8004f4c:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f4e:	e7e1      	b.n	8004f14 <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f56:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004f58:	429f      	cmp	r7, r3
 8004f5a:	d3f7      	bcc.n	8004f4c <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f5c:	f106 0b04 	add.w	fp, r6, #4
 8004f60:	4658      	mov	r0, fp
 8004f62:	f7ff f909 	bl	8004178 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f66:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004f68:	b11b      	cbz	r3, 8004f72 <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f6a:	f106 0018 	add.w	r0, r6, #24
 8004f6e:	f7ff f903 	bl	8004178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f72:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004f74:	4659      	mov	r1, fp
 8004f76:	6922      	ldr	r2, [r4, #16]
 8004f78:	fa0a f300 	lsl.w	r3, sl, r0
 8004f7c:	fb09 8000 	mla	r0, r9, r0, r8
 8004f80:	4313      	orrs	r3, r2
 8004f82:	6123      	str	r3, [r4, #16]
 8004f84:	f7ff f8d5 	bl	8004132 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f88:	68e3      	ldr	r3, [r4, #12]
 8004f8a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	bf28      	it	cs
 8004f92:	2501      	movcs	r5, #1
 8004f94:	e7d5      	b.n	8004f42 <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 8004f96:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8004f9a:	2500      	movs	r5, #0
		++uxPendedTicks;
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004fa2:	e7c0      	b.n	8004f26 <xTaskIncrementTick+0x62>
 8004fa4:	2000045c 	.word	0x2000045c
 8004fa8:	20000490 	.word	0x20000490

08004fac <xTaskResumeAll>:
{
 8004fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004fb0:	4c35      	ldr	r4, [pc, #212]	; (8005088 <xTaskResumeAll+0xdc>)
 8004fb2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004fb6:	b953      	cbnz	r3, 8004fce <xTaskResumeAll+0x22>
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	b672      	cpsid	i
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	b662      	cpsie	i
 8004fcc:	e7fe      	b.n	8004fcc <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8004fce:	f000 fd01 	bl	80059d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004fd2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fdc:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8004fe0:	b135      	cbz	r5, 8004ff0 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8004fe2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004fe4:	f000 fd1a 	bl	8005a1c <vPortExitCritical>
}
 8004fe8:	4620      	mov	r0, r4
 8004fea:	b002      	add	sp, #8
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f5      	beq.n	8004fe2 <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 8004ff6:	2601      	movs	r6, #1
 8004ff8:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8004ffc:	f04f 0814 	mov.w	r8, #20
 8005000:	e01d      	b.n	800503e <xTaskResumeAll+0x92>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005002:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005006:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005008:	f105 0018 	add.w	r0, r5, #24
 800500c:	f7ff f8b4 	bl	8004178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005010:	1d29      	adds	r1, r5, #4
 8005012:	4608      	mov	r0, r1
 8005014:	9101      	str	r1, [sp, #4]
 8005016:	f7ff f8af 	bl	8004178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800501a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	fa06 f300 	lsl.w	r3, r6, r0
 8005022:	9901      	ldr	r1, [sp, #4]
 8005024:	fb08 7000 	mla	r0, r8, r0, r7
 8005028:	4313      	orrs	r3, r2
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	f7ff f881 	bl	8004132 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005030:	68e3      	ldr	r3, [r4, #12]
 8005032:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	429a      	cmp	r2, r3
 8005038:	d301      	bcc.n	800503e <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 800503a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800503e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1dd      	bne.n	8005002 <xTaskResumeAll+0x56>
				if( pxTCB != NULL )
 8005046:	b10d      	cbz	r5, 800504c <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8005048:	f7ff fd6c 	bl	8004b24 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800504c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005050:	b14d      	cbz	r5, 8005066 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8005052:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005054:	f7ff ff36 	bl	8004ec4 <xTaskIncrementTick>
 8005058:	b108      	cbz	r0, 800505e <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800505a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800505e:	3d01      	subs	r5, #1
 8005060:	d1f8      	bne.n	8005054 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 8005062:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 8005066:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0b9      	beq.n	8004fe2 <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 800506e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005076:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005082:	2401      	movs	r4, #1
 8005084:	e7ae      	b.n	8004fe4 <xTaskResumeAll+0x38>
 8005086:	bf00      	nop
 8005088:	2000045c 	.word	0x2000045c

0800508c <vTaskDelay>:
	{
 800508c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800508e:	b950      	cbnz	r0, 80050a6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005090:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005098:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
	}
 80050a4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <vTaskDelay+0x4c>)
 80050a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80050ac:	b153      	cbz	r3, 80050c4 <vTaskDelay+0x38>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	b672      	cpsid	i
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	b662      	cpsie	i
 80050c2:	e7fe      	b.n	80050c2 <vTaskDelay+0x36>
			vTaskSuspendAll();
 80050c4:	f7ff fee6 	bl	8004e94 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050c8:	f7ff fd3c 	bl	8004b44 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 80050cc:	f7ff ff6e 	bl	8004fac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d0dd      	beq.n	8005090 <vTaskDelay+0x4>
 80050d4:	e7e6      	b.n	80050a4 <vTaskDelay+0x18>
 80050d6:	bf00      	nop
 80050d8:	2000045c 	.word	0x2000045c

080050dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <vTaskSwitchContext+0x64>)
 80050de:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 80050e2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050e4:	b11b      	cbz	r3, 80050ee <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 80050ec:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80050ee:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f2:	6913      	ldr	r3, [r2, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050f4:	fab3 f383 	clz	r3, r3
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2114      	movs	r1, #20
 80050fc:	f1c3 031f 	rsb	r3, r3, #31
 8005100:	4359      	muls	r1, r3
 8005102:	1850      	adds	r0, r2, r1
 8005104:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005106:	b954      	cbnz	r4, 800511e <vTaskSwitchContext+0x42>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	b672      	cpsid	i
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	b662      	cpsie	i
 800511c:	e7fe      	b.n	800511c <vTaskSwitchContext+0x40>
 800511e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005120:	4411      	add	r1, r2
 8005122:	6864      	ldr	r4, [r4, #4]
 8005124:	313c      	adds	r1, #60	; 0x3c
 8005126:	428c      	cmp	r4, r1
 8005128:	6384      	str	r4, [r0, #56]	; 0x38
 800512a:	bf04      	itt	eq
 800512c:	6861      	ldreq	r1, [r4, #4]
 800512e:	6381      	streq	r1, [r0, #56]	; 0x38
 8005130:	2114      	movs	r1, #20
 8005132:	fb01 2303 	mla	r3, r1, r3, r2
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	60d3      	str	r3, [r2, #12]
}
 800513c:	e7d6      	b.n	80050ec <vTaskSwitchContext+0x10>
 800513e:	bf00      	nop
 8005140:	2000045c 	.word	0x2000045c

08005144 <vTaskPlaceOnEventList>:
{
 8005144:	b510      	push	{r4, lr}
 8005146:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005148:	b950      	cbnz	r0, 8005160 <vTaskPlaceOnEventList+0x1c>
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	b672      	cpsid	i
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	b662      	cpsie	i
 800515e:	e7fe      	b.n	800515e <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <vTaskPlaceOnEventList+0x30>)
 8005162:	68d9      	ldr	r1, [r3, #12]
 8005164:	3118      	adds	r1, #24
 8005166:	f7fe fff0 	bl	800414a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800516a:	4620      	mov	r0, r4
}
 800516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005170:	f7ff bce8 	b.w	8004b44 <prvAddCurrentTaskToDelayedList.constprop.0>
 8005174:	2000045c 	.word	0x2000045c

08005178 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005178:	68c3      	ldr	r3, [r0, #12]
{
 800517a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800517e:	b955      	cbnz	r5, 8005196 <xTaskRemoveFromEventList+0x1e>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	b672      	cpsid	i
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	b662      	cpsie	i
 8005194:	e7fe      	b.n	8005194 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005196:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519a:	4c15      	ldr	r4, [pc, #84]	; (80051f0 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800519c:	4608      	mov	r0, r1
 800519e:	9101      	str	r1, [sp, #4]
 80051a0:	f7fe ffea 	bl	8004178 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80051a8:	9901      	ldr	r1, [sp, #4]
 80051aa:	b9e3      	cbnz	r3, 80051e6 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051ac:	1d29      	adds	r1, r5, #4
 80051ae:	4608      	mov	r0, r1
 80051b0:	9101      	str	r1, [sp, #4]
 80051b2:	f7fe ffe1 	bl	8004178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051b6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80051b8:	2301      	movs	r3, #1
 80051ba:	6920      	ldr	r0, [r4, #16]
 80051bc:	9901      	ldr	r1, [sp, #4]
 80051be:	4093      	lsls	r3, r2
 80051c0:	4303      	orrs	r3, r0
 80051c2:	2014      	movs	r0, #20
 80051c4:	6123      	str	r3, [r4, #16]
 80051c6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80051ca:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051ce:	f7fe ffb0 	bl	8004132 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	429a      	cmp	r2, r3
 80051da:	d907      	bls.n	80051ec <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 80051dc:	2001      	movs	r0, #1
 80051de:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 80051e2:	b003      	add	sp, #12
 80051e4:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051e6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80051ea:	e7f0      	b.n	80051ce <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 80051ec:	2000      	movs	r0, #0
	return xReturn;
 80051ee:	e7f8      	b.n	80051e2 <xTaskRemoveFromEventList+0x6a>
 80051f0:	2000045c 	.word	0x2000045c

080051f4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <vTaskInternalSetTimeOutState+0x10>)
 80051f6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051fa:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051fc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051fe:	6043      	str	r3, [r0, #4]
}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	2000045c 	.word	0x2000045c

08005208 <xTaskCheckForTimeOut>:
{
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800520c:	4605      	mov	r5, r0
 800520e:	b950      	cbnz	r0, 8005226 <xTaskCheckForTimeOut+0x1e>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	b672      	cpsid	i
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	b662      	cpsie	i
 8005224:	e7fe      	b.n	8005224 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005226:	b951      	cbnz	r1, 800523e <xTaskCheckForTimeOut+0x36>
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	b672      	cpsid	i
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	b662      	cpsie	i
 800523c:	e7fe      	b.n	800523c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800523e:	f000 fbc9 	bl	80059d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005242:	4b0e      	ldr	r3, [pc, #56]	; (800527c <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005244:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005246:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005248:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800524c:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800524e:	4298      	cmp	r0, r3
 8005250:	d001      	beq.n	8005256 <xTaskCheckForTimeOut+0x4e>
 8005252:	428a      	cmp	r2, r1
 8005254:	d910      	bls.n	8005278 <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005256:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005258:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800525a:	4283      	cmp	r3, r0
 800525c:	d90a      	bls.n	8005274 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 800525e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005260:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8005262:	4413      	add	r3, r2
 8005264:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 8005266:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005268:	f7ff ffc4 	bl	80051f4 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 800526c:	f000 fbd6 	bl	8005a1c <vPortExitCritical>
}
 8005270:	4620      	mov	r0, r4
 8005272:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005278:	2401      	movs	r4, #1
 800527a:	e7f7      	b.n	800526c <xTaskCheckForTimeOut+0x64>
 800527c:	2000045c 	.word	0x2000045c

08005280 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <vTaskMissedYield+0xc>)
 8005282:	2201      	movs	r2, #1
 8005284:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	2000045c 	.word	0x2000045c

08005290 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <xTaskGetSchedulerState+0x1c>)
 8005292:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005296:	b132      	cbz	r2, 80052a6 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005298:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
				xReturn = taskSCHEDULER_SUSPENDED;
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2002      	moveq	r0, #2
 80052a2:	2000      	movne	r0, #0
 80052a4:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052a6:	2001      	movs	r0, #1
	}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	2000045c 	.word	0x2000045c

080052b0 <xTaskPriorityInherit>:
	{
 80052b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80052b2:	4604      	mov	r4, r0
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d034      	beq.n	8005322 <xTaskPriorityInherit+0x72>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80052b8:	4d22      	ldr	r5, [pc, #136]	; (8005344 <xTaskPriorityInherit+0x94>)
 80052ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80052bc:	68ea      	ldr	r2, [r5, #12]
 80052be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d236      	bcs.n	8005332 <xTaskPriorityInherit+0x82>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052c4:	6982      	ldr	r2, [r0, #24]
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	db04      	blt.n	80052d4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ca:	68ea      	ldr	r2, [r5, #12]
 80052cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052ce:	f1c2 0207 	rsb	r2, r2, #7
 80052d2:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80052d4:	4f1c      	ldr	r7, [pc, #112]	; (8005348 <xTaskPriorityInherit+0x98>)
 80052d6:	2614      	movs	r6, #20
 80052d8:	6962      	ldr	r2, [r4, #20]
 80052da:	fb06 7303 	mla	r3, r6, r3, r7
 80052de:	429a      	cmp	r2, r3
 80052e0:	d121      	bne.n	8005326 <xTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052e2:	1d21      	adds	r1, r4, #4
 80052e4:	4608      	mov	r0, r1
 80052e6:	9101      	str	r1, [sp, #4]
 80052e8:	f7fe ff46 	bl	8004178 <uxListRemove>
 80052ec:	9901      	ldr	r1, [sp, #4]
 80052ee:	b950      	cbnz	r0, 8005306 <xTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80052f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80052f2:	fb06 5600 	mla	r6, r6, r0, r5
 80052f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80052f8:	b92b      	cbnz	r3, 8005306 <xTaskPriorityInherit+0x56>
 80052fa:	2201      	movs	r2, #1
 80052fc:	692b      	ldr	r3, [r5, #16]
 80052fe:	4082      	lsls	r2, r0
 8005300:	ea23 0302 	bic.w	r3, r3, r2
 8005304:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005306:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005308:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800530e:	2401      	movs	r4, #1
 8005310:	fa04 f203 	lsl.w	r2, r4, r3
 8005314:	4302      	orrs	r2, r0
 8005316:	2014      	movs	r0, #20
 8005318:	fb00 7003 	mla	r0, r0, r3, r7
 800531c:	612a      	str	r2, [r5, #16]
 800531e:	f7fe ff08 	bl	8004132 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8005322:	4620      	mov	r0, r4
		return xReturn;
 8005324:	e003      	b.n	800532e <xTaskPriorityInherit+0x7e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005326:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8005328:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800532e:	b003      	add	sp, #12
 8005330:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005332:	68eb      	ldr	r3, [r5, #12]
 8005334:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005336:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005338:	42a0      	cmp	r0, r4
 800533a:	bf2c      	ite	cs
 800533c:	2000      	movcs	r0, #0
 800533e:	2001      	movcc	r0, #1
 8005340:	e7f5      	b.n	800532e <xTaskPriorityInherit+0x7e>
 8005342:	bf00      	nop
 8005344:	2000045c 	.word	0x2000045c
 8005348:	20000490 	.word	0x20000490

0800534c <xTaskPriorityDisinherit>:
	{
 800534c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800534e:	4604      	mov	r4, r0
 8005350:	b910      	cbnz	r0, 8005358 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8005352:	2000      	movs	r0, #0
	}
 8005354:	b002      	add	sp, #8
 8005356:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005358:	4d24      	ldr	r5, [pc, #144]	; (80053ec <xTaskPriorityDisinherit+0xa0>)
 800535a:	68eb      	ldr	r3, [r5, #12]
 800535c:	4283      	cmp	r3, r0
 800535e:	d00a      	beq.n	8005376 <xTaskPriorityDisinherit+0x2a>
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	b672      	cpsid	i
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	b662      	cpsie	i
 8005374:	e7fe      	b.n	8005374 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	b953      	cbnz	r3, 8005390 <xTaskPriorityDisinherit+0x44>
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	b672      	cpsid	i
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	b662      	cpsie	i
 800538e:	e7fe      	b.n	800538e <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005390:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005392:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005394:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005396:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005398:	4291      	cmp	r1, r2
 800539a:	d0da      	beq.n	8005352 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1d8      	bne.n	8005352 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053a0:	1d01      	adds	r1, r0, #4
 80053a2:	4608      	mov	r0, r1
 80053a4:	9101      	str	r1, [sp, #4]
 80053a6:	f7fe fee7 	bl	8004178 <uxListRemove>
 80053aa:	9901      	ldr	r1, [sp, #4]
 80053ac:	b958      	cbnz	r0, 80053c6 <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053b0:	2014      	movs	r0, #20
 80053b2:	fb00 5006 	mla	r0, r0, r6, r5
 80053b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053b8:	b92b      	cbnz	r3, 80053c6 <xTaskPriorityDisinherit+0x7a>
 80053ba:	2201      	movs	r2, #1
 80053bc:	692b      	ldr	r3, [r5, #16]
 80053be:	40b2      	lsls	r2, r6
 80053c0:	ea23 0302 	bic.w	r3, r3, r2
 80053c4:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80053c8:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ca:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053ce:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80053d2:	2401      	movs	r4, #1
 80053d4:	fa04 f203 	lsl.w	r2, r4, r3
 80053d8:	4302      	orrs	r2, r0
 80053da:	2014      	movs	r0, #20
 80053dc:	612a      	str	r2, [r5, #16]
 80053de:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <xTaskPriorityDisinherit+0xa4>)
 80053e0:	fb00 2003 	mla	r0, r0, r3, r2
 80053e4:	f7fe fea5 	bl	8004132 <vListInsertEnd>
					xReturn = pdTRUE;
 80053e8:	4620      	mov	r0, r4
		return xReturn;
 80053ea:	e7b3      	b.n	8005354 <xTaskPriorityDisinherit+0x8>
 80053ec:	2000045c 	.word	0x2000045c
 80053f0:	20000490 	.word	0x20000490

080053f4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80053f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80053f6:	4604      	mov	r4, r0
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d051      	beq.n	80054a0 <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 80053fc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80053fe:	b952      	cbnz	r2, 8005416 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	b672      	cpsid	i
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	b662      	cpsie	i
 8005414:	e7fe      	b.n	8005414 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005416:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005418:	4299      	cmp	r1, r3
 800541a:	bf38      	it	cc
 800541c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800541e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005420:	428b      	cmp	r3, r1
 8005422:	d03d      	beq.n	80054a0 <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005424:	2a01      	cmp	r2, #1
 8005426:	d13b      	bne.n	80054a0 <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 8005428:	4d1e      	ldr	r5, [pc, #120]	; (80054a4 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800542a:	68ea      	ldr	r2, [r5, #12]
 800542c:	4282      	cmp	r2, r0
 800542e:	d10a      	bne.n	8005446 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	b672      	cpsid	i
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	b662      	cpsie	i
 8005444:	e7fe      	b.n	8005444 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005446:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005448:	2614      	movs	r6, #20
 800544a:	4f17      	ldr	r7, [pc, #92]	; (80054a8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800544c:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 800544e:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005450:	fb06 7303 	mla	r3, r6, r3, r7
 8005454:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005456:	bfa4      	itt	ge
 8005458:	f1c1 0107 	rsbge	r1, r1, #7
 800545c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800545e:	429a      	cmp	r2, r3
 8005460:	d11e      	bne.n	80054a0 <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005462:	1d01      	adds	r1, r0, #4
 8005464:	4608      	mov	r0, r1
 8005466:	9101      	str	r1, [sp, #4]
 8005468:	f7fe fe86 	bl	8004178 <uxListRemove>
 800546c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800546e:	9901      	ldr	r1, [sp, #4]
 8005470:	b948      	cbnz	r0, 8005486 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005472:	fb06 5602 	mla	r6, r6, r2, r5
 8005476:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005478:	b92b      	cbnz	r3, 8005486 <vTaskPriorityDisinheritAfterTimeout+0x92>
 800547a:	2001      	movs	r0, #1
 800547c:	692b      	ldr	r3, [r5, #16]
 800547e:	4090      	lsls	r0, r2
 8005480:	ea23 0300 	bic.w	r3, r3, r0
 8005484:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8005486:	2301      	movs	r3, #1
 8005488:	6928      	ldr	r0, [r5, #16]
 800548a:	4093      	lsls	r3, r2
 800548c:	4303      	orrs	r3, r0
 800548e:	2014      	movs	r0, #20
 8005490:	fb00 7002 	mla	r0, r0, r2, r7
 8005494:	612b      	str	r3, [r5, #16]
	}
 8005496:	b003      	add	sp, #12
 8005498:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800549c:	f7fe be49 	b.w	8004132 <vListInsertEnd>
	}
 80054a0:	b003      	add	sp, #12
 80054a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a4:	2000045c 	.word	0x2000045c
 80054a8:	20000490 	.word	0x20000490

080054ac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80054ac:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <pvTaskIncrementMutexHeldCount+0x14>)
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	b11a      	cbz	r2, 80054ba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80054b2:	68d9      	ldr	r1, [r3, #12]
 80054b4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80054b6:	3201      	adds	r2, #1
 80054b8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80054ba:	68d8      	ldr	r0, [r3, #12]
	}
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2000045c 	.word	0x2000045c

080054c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054c4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80054c6:	f7ff fcab 	bl	8004e20 <vTaskStartScheduler>
  
  return osOK;
}
 80054ca:	2000      	movs	r0, #0
 80054cc:	bd08      	pop	{r3, pc}

080054ce <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ce:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80054d2:	b10b      	cbz	r3, 80054d8 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80054d4:	f7ff bcee 	b.w	8004eb4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80054d8:	f7ff bce6 	b.w	8004ea8 <xTaskGetTickCount>

080054dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054dc:	b530      	push	{r4, r5, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	b085      	sub	sp, #20
 80054e2:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054e4:	8a22      	ldrh	r2, [r4, #16]
 80054e6:	ad03      	add	r5, sp, #12
 80054e8:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 80054ec:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80054ee:	bf14      	ite	ne
 80054f0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054f2:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054f4:	e9d0 1000 	ldrd	r1, r0, [r0]
 80054f8:	e9cd 4500 	strd	r4, r5, [sp]
 80054fc:	f7ff fb74 	bl	8004be8 <xTaskCreate>
 8005500:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005502:	bf0c      	ite	eq
 8005504:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8005506:	2000      	movne	r0, #0
}
 8005508:	b005      	add	sp, #20
 800550a:	bd30      	pop	{r4, r5, pc}

0800550c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800550c:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800550e:	f7ff fc29 	bl	8004d64 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8005512:	2000      	movs	r0, #0
 8005514:	bd08      	pop	{r3, pc}

08005516 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005516:	2801      	cmp	r0, #1
{
 8005518:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800551a:	bf38      	it	cc
 800551c:	2001      	movcc	r0, #1
 800551e:	f7ff fdb5 	bl	800508c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005522:	2000      	movs	r0, #0
 8005524:	bd08      	pop	{r3, pc}

08005526 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005526:	2001      	movs	r0, #1
 8005528:	f7ff b807 	b.w	800453a <xQueueCreateMutex>

0800552c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800552c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800552e:	2400      	movs	r4, #0
 8005530:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8005532:	b1f0      	cbz	r0, 8005572 <osMutexWait+0x46>
 8005534:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005538:	b1ab      	cbz	r3, 8005566 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800553a:	aa01      	add	r2, sp, #4
 800553c:	4621      	mov	r1, r4
 800553e:	f7ff fa4c 	bl	80049da <xQueueReceiveFromISR>
 8005542:	2801      	cmp	r0, #1
 8005544:	d113      	bne.n	800556e <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	b913      	cbnz	r3, 8005550 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800554a:	2000      	movs	r0, #0
}
 800554c:	b002      	add	sp, #8
 800554e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005550:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005558:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e7f1      	b.n	800554a <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005566:	f7ff f96d 	bl	8004844 <xQueueSemaphoreTake>
 800556a:	2801      	cmp	r0, #1
 800556c:	d0ed      	beq.n	800554a <osMutexWait+0x1e>
    return osErrorOS;
 800556e:	20ff      	movs	r0, #255	; 0xff
 8005570:	e7ec      	b.n	800554c <osMutexWait+0x20>
    return osErrorParameter;
 8005572:	2080      	movs	r0, #128	; 0x80
 8005574:	e7ea      	b.n	800554c <osMutexWait+0x20>

08005576 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005576:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8005578:	2400      	movs	r4, #0
 800557a:	9401      	str	r4, [sp, #4]
 800557c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8005580:	b1a3      	cbz	r3, 80055ac <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005582:	a901      	add	r1, sp, #4
 8005584:	f7ff f85d 	bl	8004642 <xQueueGiveFromISR>
 8005588:	2801      	cmp	r0, #1
 800558a:	d115      	bne.n	80055b8 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800558c:	9b01      	ldr	r3, [sp, #4]
 800558e:	b913      	cbnz	r3, 8005596 <osMutexRelease+0x20>
  osStatus result = osOK;
 8005590:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8005592:	b002      	add	sp, #8
 8005594:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005596:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800559a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	e7f1      	b.n	8005590 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80055ac:	461a      	mov	r2, r3
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7fe ff08 	bl	80043c4 <xQueueGenericSend>
 80055b4:	2801      	cmp	r0, #1
 80055b6:	d0eb      	beq.n	8005590 <osMutexRelease+0x1a>
    result = osErrorOS;
 80055b8:	20ff      	movs	r0, #255	; 0xff
 80055ba:	e7ea      	b.n	8005592 <osMutexRelease+0x1c>

080055bc <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80055bc:	b510      	push	{r4, lr}
 80055be:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 80055c2:	b91c      	cbnz	r4, 80055cc <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 80055c4:	f7ff fa98 	bl	8004af8 <vQueueDelete>

  return osOK;
}
 80055c8:	4620      	mov	r0, r4
 80055ca:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80055cc:	2482      	movs	r4, #130	; 0x82
 80055ce:	e7fb      	b.n	80055c8 <osMutexDelete+0xc>

080055d0 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80055d0:	2901      	cmp	r1, #1
{ 
 80055d2:	4608      	mov	r0, r1
 80055d4:	b510      	push	{r4, lr}
  if (count == 1) {
 80055d6:	d10c      	bne.n	80055f2 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80055d8:	2203      	movs	r2, #3
 80055da:	2100      	movs	r1, #0
 80055dc:	f7fe feaa 	bl	8004334 <xQueueGenericCreate>
 80055e0:	4604      	mov	r4, r0
 80055e2:	b120      	cbz	r0, 80055ee <osSemaphoreCreate+0x1e>
 80055e4:	2300      	movs	r3, #0
 80055e6:	461a      	mov	r2, r3
 80055e8:	4619      	mov	r1, r3
 80055ea:	f7fe feeb 	bl	80043c4 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80055ee:	4620      	mov	r0, r4
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 80055f6:	f7fe bec3 	b.w	8004380 <xQueueCreateCountingSemaphore>

080055fa <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80055fa:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80055fc:	2400      	movs	r4, #0
 80055fe:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8005600:	b1f0      	cbz	r0, 8005640 <osSemaphoreWait+0x46>
 8005602:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005606:	b1ab      	cbz	r3, 8005634 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005608:	aa01      	add	r2, sp, #4
 800560a:	4621      	mov	r1, r4
 800560c:	f7ff f9e5 	bl	80049da <xQueueReceiveFromISR>
 8005610:	2801      	cmp	r0, #1
 8005612:	d113      	bne.n	800563c <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	b913      	cbnz	r3, 800561e <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8005618:	2000      	movs	r0, #0
}
 800561a:	b002      	add	sp, #8
 800561c:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800561e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005626:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	e7f1      	b.n	8005618 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005634:	f7ff f906 	bl	8004844 <xQueueSemaphoreTake>
 8005638:	2801      	cmp	r0, #1
 800563a:	d0ed      	beq.n	8005618 <osSemaphoreWait+0x1e>
    return osErrorOS;
 800563c:	20ff      	movs	r0, #255	; 0xff
 800563e:	e7ec      	b.n	800561a <osSemaphoreWait+0x20>
    return osErrorParameter;
 8005640:	2080      	movs	r0, #128	; 0x80
 8005642:	e7ea      	b.n	800561a <osSemaphoreWait+0x20>

08005644 <osSemaphoreRelease>:
 8005644:	f7ff bf97 	b.w	8005576 <osMutexRelease>

08005648 <osSemaphoreDelete>:
 8005648:	f7ff bfb8 	b.w	80055bc <osMutexDelete>

0800564c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800564c:	2200      	movs	r2, #0
 800564e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8005652:	f7fe be6f 	b.w	8004334 <xQueueGenericCreate>

08005656 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005656:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8005658:	2400      	movs	r4, #0
{
 800565a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800565c:	9403      	str	r4, [sp, #12]
 800565e:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8005662:	b1b3      	cbz	r3, 8005692 <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005664:	4623      	mov	r3, r4
 8005666:	aa03      	add	r2, sp, #12
 8005668:	a901      	add	r1, sp, #4
 800566a:	f7fe ff81 	bl	8004570 <xQueueGenericSendFromISR>
 800566e:	2801      	cmp	r0, #1
 8005670:	d117      	bne.n	80056a2 <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005672:	9b03      	ldr	r3, [sp, #12]
 8005674:	b913      	cbnz	r3, 800567c <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005676:	2000      	movs	r0, #0
}
 8005678:	b004      	add	sp, #16
 800567a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800567c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005684:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	e7f1      	b.n	8005676 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005692:	2a01      	cmp	r2, #1
 8005694:	a901      	add	r1, sp, #4
 8005696:	bf38      	it	cc
 8005698:	2201      	movcc	r2, #1
 800569a:	f7fe fe93 	bl	80043c4 <xQueueGenericSend>
 800569e:	2801      	cmp	r0, #1
 80056a0:	d0e9      	beq.n	8005676 <osMessagePut+0x20>
      return osErrorOS;
 80056a2:	20ff      	movs	r0, #255	; 0xff
 80056a4:	e7e8      	b.n	8005678 <osMessagePut+0x22>

080056a6 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80056a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80056a8:	2300      	movs	r3, #0
{
 80056aa:	4604      	mov	r4, r0
 80056ac:	4616      	mov	r6, r2
 80056ae:	4608      	mov	r0, r1
 80056b0:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 80056b2:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80056b4:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 80056b6:	b911      	cbnz	r1, 80056be <osMessageGet+0x18>
    event.status = osErrorParameter;
 80056b8:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	e018      	b.n	80056f0 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80056c4:	b1db      	cbz	r3, 80056fe <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80056c6:	466a      	mov	r2, sp
 80056c8:	a902      	add	r1, sp, #8
 80056ca:	f7ff f986 	bl	80049da <xQueueReceiveFromISR>
      event.status = osOK;
 80056ce:	2801      	cmp	r0, #1
 80056d0:	bf0c      	ite	eq
 80056d2:	2310      	moveq	r3, #16
 80056d4:	2300      	movne	r3, #0
 80056d6:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80056d8:	9b00      	ldr	r3, [sp, #0]
 80056da:	b14b      	cbz	r3, 80056f0 <osMessageGet+0x4a>
 80056dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80056f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80056f8:	4620      	mov	r0, r4
 80056fa:	b004      	add	sp, #16
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80056fe:	a902      	add	r1, sp, #8
 8005700:	f7fe fffb 	bl	80046fa <xQueueReceive>
 8005704:	2801      	cmp	r0, #1
 8005706:	d101      	bne.n	800570c <osMessageGet+0x66>
      event.status = osEventMessage;
 8005708:	2310      	movs	r3, #16
 800570a:	e7d6      	b.n	80056ba <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800570c:	2e00      	cmp	r6, #0
 800570e:	bf18      	it	ne
 8005710:	2640      	movne	r6, #64	; 0x40
 8005712:	9601      	str	r6, [sp, #4]
 8005714:	e7ec      	b.n	80056f0 <osMessageGet+0x4a>

08005716 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005716:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005718:	f7ff fdba 	bl	8005290 <xTaskGetSchedulerState>
 800571c:	2801      	cmp	r0, #1
 800571e:	d003      	beq.n	8005728 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8005720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005724:	f000 b9c6 	b.w	8005ab4 <xPortSysTickHandler>
}
 8005728:	bd08      	pop	{r3, pc}

0800572a <osMessageWaiting>:
 800572a:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 800572e:	b10b      	cbz	r3, 8005734 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005730:	f7ff b9bf 	b.w	8004ab2 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005734:	f7ff b9a6 	b.w	8004a84 <uxQueueMessagesWaiting>

08005738 <osMessageDelete>:
 8005738:	f7ff bf40 	b.w	80055bc <osMutexDelete>

0800573c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <prvInsertBlockIntoFreeList+0x40>)
{
 800573e:	b530      	push	{r4, r5, lr}
 8005740:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005742:	461a      	mov	r2, r3
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4283      	cmp	r3, r0
 8005748:	d3fb      	bcc.n	8005742 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800574a:	6854      	ldr	r4, [r2, #4]
 800574c:	1911      	adds	r1, r2, r4
 800574e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005750:	bf01      	itttt	eq
 8005752:	6841      	ldreq	r1, [r0, #4]
 8005754:	4610      	moveq	r0, r2
 8005756:	1909      	addeq	r1, r1, r4
 8005758:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800575a:	6844      	ldr	r4, [r0, #4]
 800575c:	1901      	adds	r1, r0, r4
 800575e:	428b      	cmp	r3, r1
 8005760:	d106      	bne.n	8005770 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005762:	68a9      	ldr	r1, [r5, #8]
 8005764:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005766:	bf1f      	itttt	ne
 8005768:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800576a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576c:	1909      	addne	r1, r1, r4
 800576e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005770:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005772:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005774:	bf18      	it	ne
 8005776:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005778:	bd30      	pop	{r4, r5, pc}
 800577a:	bf00      	nop
 800577c:	20000574 	.word	0x20000574

08005780 <pvPortMalloc>:
{
 8005780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005784:	4d3f      	ldr	r5, [pc, #252]	; (8005884 <pvPortMalloc+0x104>)
{
 8005786:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005788:	f7ff fb84 	bl	8004e94 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800578c:	68ab      	ldr	r3, [r5, #8]
 800578e:	b9f3      	cbnz	r3, 80057ce <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 8005790:	493d      	ldr	r1, [pc, #244]	; (8005888 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005792:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005794:	bf1b      	ittet	ne
 8005796:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005798:	f501 42c8 	addne.w	r2, r1, #25600	; 0x6400
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800579c:	f44f 42c8 	moveq.w	r2, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a0:	f023 0307 	bicne.w	r3, r3, #7
 80057a4:	bf1c      	itt	ne
 80057a6:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057a8:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 80057aa:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057ac:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057ae:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057b0:	606b      	str	r3, [r5, #4]
	uxAddress -= xHeapStructSize;
 80057b2:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057b4:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 80057b8:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057bc:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 80057be:	60aa      	str	r2, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057c0:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057c4:	e9c5 3303 	strd	r3, r3, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057cc:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057ce:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80057d2:	ea18 0f04 	tst.w	r8, r4
 80057d6:	d14f      	bne.n	8005878 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 80057d8:	2c00      	cmp	r4, #0
 80057da:	d03e      	beq.n	800585a <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 80057dc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057e2:	bf1c      	itt	ne
 80057e4:	f023 0307 	bicne.w	r3, r3, #7
 80057e8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d044      	beq.n	8005878 <pvPortMalloc+0xf8>
 80057ee:	692f      	ldr	r7, [r5, #16]
 80057f0:	429f      	cmp	r7, r3
 80057f2:	d341      	bcc.n	8005878 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 80057f4:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 80057f6:	4823      	ldr	r0, [pc, #140]	; (8005884 <pvPortMalloc+0x104>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057f8:	6872      	ldr	r2, [r6, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d201      	bcs.n	8005802 <pvPortMalloc+0x82>
 80057fe:	6831      	ldr	r1, [r6, #0]
 8005800:	b9b1      	cbnz	r1, 8005830 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8005802:	68a9      	ldr	r1, [r5, #8]
 8005804:	42b1      	cmp	r1, r6
 8005806:	d037      	beq.n	8005878 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005808:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800580a:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800580c:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800580e:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005810:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005812:	d914      	bls.n	800583e <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005814:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005816:	0741      	lsls	r1, r0, #29
 8005818:	d00d      	beq.n	8005836 <pvPortMalloc+0xb6>
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	b672      	cpsid	i
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	b662      	cpsie	i
 800582e:	e7fe      	b.n	800582e <pvPortMalloc+0xae>
 8005830:	4630      	mov	r0, r6
 8005832:	460e      	mov	r6, r1
 8005834:	e7e0      	b.n	80057f8 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005836:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005838:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800583a:	f7ff ff7f 	bl	800573c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800583e:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005840:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005842:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005844:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005846:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800584a:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800584c:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800584e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005852:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005854:	bf38      	it	cc
 8005856:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 8005858:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 800585a:	f7ff fba7 	bl	8004fac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800585e:	0763      	lsls	r3, r4, #29
 8005860:	d00c      	beq.n	800587c <pvPortMalloc+0xfc>
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	b672      	cpsid	i
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	b662      	cpsie	i
 8005876:	e7fe      	b.n	8005876 <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 8005878:	2400      	movs	r4, #0
 800587a:	e7ee      	b.n	800585a <pvPortMalloc+0xda>
}
 800587c:	4620      	mov	r0, r4
 800587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005882:	bf00      	nop
 8005884:	20000574 	.word	0x20000574
 8005888:	2000058c 	.word	0x2000058c

0800588c <vPortFree>:
{
 800588c:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 800588e:	4604      	mov	r4, r0
 8005890:	b388      	cbz	r0, 80058f6 <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005892:	4d19      	ldr	r5, [pc, #100]	; (80058f8 <vPortFree+0x6c>)
 8005894:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005898:	696a      	ldr	r2, [r5, #20]
 800589a:	4213      	tst	r3, r2
 800589c:	d10a      	bne.n	80058b4 <vPortFree+0x28>
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	b672      	cpsid	i
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	b662      	cpsie	i
 80058b2:	e7fe      	b.n	80058b2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058b4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80058b8:	b151      	cbz	r1, 80058d0 <vPortFree+0x44>
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	b672      	cpsid	i
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	b662      	cpsie	i
 80058ce:	e7fe      	b.n	80058ce <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058d0:	ea23 0302 	bic.w	r3, r3, r2
 80058d4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80058d8:	f7ff fadc 	bl	8004e94 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058dc:	692a      	ldr	r2, [r5, #16]
 80058de:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058e2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058e6:	4413      	add	r3, r2
 80058e8:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ea:	f7ff ff27 	bl	800573c <prvInsertBlockIntoFreeList>
}
 80058ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80058f2:	f7ff bb5b 	b.w	8004fac <xTaskResumeAll>
}
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	20000574 	.word	0x20000574

080058fc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058fc:	4808      	ldr	r0, [pc, #32]	; (8005920 <prvPortStartFirstTask+0x24>)
 80058fe:	6800      	ldr	r0, [r0, #0]
 8005900:	6800      	ldr	r0, [r0, #0]
 8005902:	f380 8808 	msr	MSP, r0
 8005906:	f04f 0000 	mov.w	r0, #0
 800590a:	f380 8814 	msr	CONTROL, r0
 800590e:	b662      	cpsie	i
 8005910:	b661      	cpsie	f
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	df00      	svc	0
 800591c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800591e:	0000      	.short	0x0000
 8005920:	e000ed08 	.word	0xe000ed08

08005924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005934 <vPortEnableVFP+0x10>
 8005928:	6801      	ldr	r1, [r0, #0]
 800592a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800592e:	6001      	str	r1, [r0, #0]
 8005930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005932:	0000      	.short	0x0000
 8005934:	e000ed88 	.word	0xe000ed88

08005938 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8005938:	2300      	movs	r3, #0
{
 800593a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800593c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <prvTaskExitError+0x44>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	d00a      	beq.n	800595c <prvTaskExitError+0x24>
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	b672      	cpsid	i
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	b662      	cpsie	i
 800595a:	e7fe      	b.n	800595a <prvTaskExitError+0x22>
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	b672      	cpsid	i
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	b662      	cpsie	i
	while( ulDummy == 0 )
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0fc      	beq.n	8005970 <prvTaskExitError+0x38>
}
 8005976:	b002      	add	sp, #8
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	2000001c 	.word	0x2000001c

08005980 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005984:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005988:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800598c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800598e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005990:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005992:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005994:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005996:	f06f 0302 	mvn.w	r3, #2
 800599a:	6203      	str	r3, [r0, #32]
}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	08005939 	.word	0x08005939
	...

080059b0 <SVC_Handler>:
	__asm volatile (
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <pxCurrentTCBConst2>)
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	6808      	ldr	r0, [r1, #0]
 80059b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	f380 8809 	msr	PSP, r0
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8811 	msr	BASEPRI, r0
 80059ca:	4770      	bx	lr
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst2>:
 80059d0:	20000468 	.word	0x20000468

080059d4 <vPortEnterCritical>:
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
	uxCriticalNesting++;
 80059e8:	4a0b      	ldr	r2, [pc, #44]	; (8005a18 <vPortEnterCritical+0x44>)
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80059ee:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80059f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80059f2:	d110      	bne.n	8005a16 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80059f8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	b153      	cbz	r3, 8005a16 <vPortEnterCritical+0x42>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	b672      	cpsid	i
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	b662      	cpsie	i
 8005a14:	e7fe      	b.n	8005a14 <vPortEnterCritical+0x40>
}
 8005a16:	4770      	bx	lr
 8005a18:	2000001c 	.word	0x2000001c

08005a1c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005a1c:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <vPortExitCritical+0x28>)
 8005a1e:	6813      	ldr	r3, [r2, #0]
 8005a20:	b953      	cbnz	r3, 8005a38 <vPortExitCritical+0x1c>
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	b672      	cpsid	i
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	b662      	cpsie	i
 8005a36:	e7fe      	b.n	8005a36 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a3c:	b90b      	cbnz	r3, 8005a42 <vPortExitCritical+0x26>
	__asm volatile
 8005a3e:	f383 8811 	msr	BASEPRI, r3
}
 8005a42:	4770      	bx	lr
 8005a44:	2000001c 	.word	0x2000001c
	...

08005a50 <PendSV_Handler>:
	__asm volatile
 8005a50:	f3ef 8009 	mrs	r0, PSP
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <pxCurrentTCBConst>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	f01e 0f10 	tst.w	lr, #16
 8005a60:	bf08      	it	eq
 8005a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6a:	6010      	str	r0, [r2, #0]
 8005a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a74:	b672      	cpsid	i
 8005a76:	f380 8811 	msr	BASEPRI, r0
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	b662      	cpsie	i
 8005a84:	f7ff fb2a 	bl	80050dc <vTaskSwitchContext>
 8005a88:	f04f 0000 	mov.w	r0, #0
 8005a8c:	f380 8811 	msr	BASEPRI, r0
 8005a90:	bc09      	pop	{r0, r3}
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	6808      	ldr	r0, [r1, #0]
 8005a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	f01e 0f10 	tst.w	lr, #16
 8005a9e:	bf08      	it	eq
 8005aa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005aa4:	f380 8809 	msr	PSP, r0
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop

08005ab0 <pxCurrentTCBConst>:
 8005ab0:	20000468 	.word	0x20000468

08005ab4 <xPortSysTickHandler>:
{
 8005ab4:	b508      	push	{r3, lr}
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	b672      	cpsid	i
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8005aca:	f7ff f9fb 	bl	8004ec4 <xTaskIncrementTick>
 8005ace:	b128      	cbz	r0, 8005adc <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ad0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005adc:	2300      	movs	r3, #0
 8005ade:	f383 8811 	msr	BASEPRI, r3
}
 8005ae2:	bd08      	pop	{r3, pc}

08005ae4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ae4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005ae8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005aee:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005af0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005af2:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <vPortSetupTimerInterrupt+0x20>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005afa:	3b01      	subs	r3, #1
 8005afc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005afe:	2307      	movs	r3, #7
 8005b00:	6113      	str	r3, [r2, #16]
}
 8005b02:	4770      	bx	lr
 8005b04:	20000010 	.word	0x20000010

08005b08 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b08:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <xPortStartScheduler+0xb8>)
{
 8005b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b0c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b0e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b14:	22ff      	movs	r2, #255	; 0xff
 8005b16:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b18:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <xPortStartScheduler+0xbc>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005b26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b2a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b2c:	2307      	movs	r3, #7
 8005b2e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b30:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005b34:	1e5c      	subs	r4, r3, #1
 8005b36:	0600      	lsls	r0, r0, #24
 8005b38:	d40e      	bmi.n	8005b58 <xPortStartScheduler+0x50>
 8005b3a:	b111      	cbz	r1, 8005b42 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	d013      	beq.n	8005b6a <xPortStartScheduler+0x62>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	b672      	cpsid	i
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	b662      	cpsie	i
 8005b56:	e7fe      	b.n	8005b56 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b58:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f88d 3003 	strb.w	r3, [sp, #3]
 8005b66:	4623      	mov	r3, r4
 8005b68:	e7e2      	b.n	8005b30 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b6a:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b6e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8005b72:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b74:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b76:	9b01      	ldr	r3, [sp, #4]
 8005b78:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <xPortStartScheduler+0xb8>)
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b7e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005b82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b86:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b8a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005b8e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b92:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005b96:	f7ff ffa5 	bl	8005ae4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <xPortStartScheduler+0xc0>)
 8005b9c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005b9e:	f7ff fec1 	bl	8005924 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ba2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8005ba6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005baa:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005bae:	f7ff fea5 	bl	80058fc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005bb2:	f7ff fa93 	bl	80050dc <vTaskSwitchContext>
}
 8005bb6:	4628      	mov	r0, r5
	prvTaskExitError();
 8005bb8:	f7ff febe 	bl	8005938 <prvTaskExitError>
}
 8005bbc:	b003      	add	sp, #12
 8005bbe:	bd30      	pop	{r4, r5, pc}
 8005bc0:	e000e400 	.word	0xe000e400
 8005bc4:	2000698c 	.word	0x2000698c
 8005bc8:	2000001c 	.word	0x2000001c

08005bcc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bcc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bd0:	2b0f      	cmp	r3, #15
 8005bd2:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <vPortValidateInterruptPriority+0x54>)
 8005bd4:	d90f      	bls.n	8005bf6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bd6:	4913      	ldr	r1, [pc, #76]	; (8005c24 <vPortValidateInterruptPriority+0x58>)
 8005bd8:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bda:	7811      	ldrb	r1, [r2, #0]
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	d90a      	bls.n	8005bf6 <vPortValidateInterruptPriority+0x2a>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	b672      	cpsid	i
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	b662      	cpsie	i
 8005bf4:	e7fe      	b.n	8005bf4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bf6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005bfa:	6852      	ldr	r2, [r2, #4]
 8005bfc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d90a      	bls.n	8005c1e <vPortValidateInterruptPriority+0x52>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	b672      	cpsid	i
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	b662      	cpsie	i
 8005c1c:	e7fe      	b.n	8005c1c <vPortValidateInterruptPriority+0x50>
	}
 8005c1e:	4770      	bx	lr
 8005c20:	2000698c 	.word	0x2000698c
 8005c24:	e000e3f0 	.word	0xe000e3f0

08005c28 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005c28:	680a      	ldr	r2, [r1, #0]
{
 8005c2a:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005c2c:	320c      	adds	r2, #12
{
 8005c2e:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005c30:	f001 fb6c 	bl	800730c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8005c34:	b908      	cbnz	r0, 8005c3a <netconn_apimsg+0x12>
    return apimsg->err;
 8005c36:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8005c3a:	bd10      	pop	{r4, pc}

08005c3c <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8005c3c:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005c3e:	b160      	cbz	r0, 8005c5a <netconn_tcp_recvd_msg+0x1e>
 8005c40:	7803      	ldrb	r3, [r0, #0]
 8005c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d107      	bne.n	8005c5a <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8005c4a:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8005c4c:	6091      	str	r1, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4807      	ldr	r0, [pc, #28]	; (8005c70 <netconn_tcp_recvd_msg+0x34>)
}
 8005c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005c56:	f7ff bfe7 	b.w	8005c28 <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <netconn_tcp_recvd_msg+0x38>)
 8005c5c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005c60:	4905      	ldr	r1, [pc, #20]	; (8005c78 <netconn_tcp_recvd_msg+0x3c>)
 8005c62:	4806      	ldr	r0, [pc, #24]	; (8005c7c <netconn_tcp_recvd_msg+0x40>)
 8005c64:	f009 f9b6 	bl	800efd4 <iprintf>
}
 8005c68:	f06f 000f 	mvn.w	r0, #15
 8005c6c:	bd08      	pop	{r3, pc}
 8005c6e:	bf00      	nop
 8005c70:	08006f99 	.word	0x08006f99
 8005c74:	0801aa79 	.word	0x0801aa79
 8005c78:	0801aada 	.word	0x0801aada
 8005c7c:	0801a72c 	.word	0x0801a72c

08005c80 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005c80:	b500      	push	{lr}
 8005c82:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005c84:	b958      	cbnz	r0, 8005c9e <netconn_close_shutdown+0x1e>
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <netconn_close_shutdown+0x34>)
 8005c88:	f240 4247 	movw	r2, #1095	; 0x447
 8005c8c:	490a      	ldr	r1, [pc, #40]	; (8005cb8 <netconn_close_shutdown+0x38>)
 8005c8e:	480b      	ldr	r0, [pc, #44]	; (8005cbc <netconn_close_shutdown+0x3c>)
 8005c90:	f009 f9a0 	bl	800efd4 <iprintf>
 8005c94:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8005c98:	b009      	add	sp, #36	; 0x24
 8005c9a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005c9e:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005ca0:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005ca2:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005ca6:	4669      	mov	r1, sp
 8005ca8:	4805      	ldr	r0, [pc, #20]	; (8005cc0 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005caa:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005cae:	f7ff ffbb 	bl	8005c28 <netconn_apimsg>
  return err;
 8005cb2:	e7f1      	b.n	8005c98 <netconn_close_shutdown+0x18>
 8005cb4:	0801aa79 	.word	0x0801aa79
 8005cb8:	0801aafe 	.word	0x0801aafe
 8005cbc:	0801a72c 	.word	0x0801a72c
 8005cc0:	0800709d 	.word	0x0800709d

08005cc4 <netconn_new_with_proto_and_callback>:
{
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	460d      	mov	r5, r1
 8005cc8:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8005cca:	4611      	mov	r1, r2
 8005ccc:	f000 ff20 	bl	8006b10 <netconn_alloc>
  if (conn != NULL) {
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d03e      	beq.n	8005d54 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8005cd6:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005cd8:	4669      	mov	r1, sp
 8005cda:	4820      	ldr	r0, [pc, #128]	; (8005d5c <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005cdc:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005ce0:	f7ff ffa2 	bl	8005c28 <netconn_apimsg>
    if (err != ERR_OK) {
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d035      	beq.n	8005d54 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	b12b      	cbz	r3, 8005cf8 <netconn_new_with_proto_and_callback+0x34>
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <netconn_new_with_proto_and_callback+0x9c>)
 8005cee:	22a3      	movs	r2, #163	; 0xa3
 8005cf0:	491c      	ldr	r1, [pc, #112]	; (8005d64 <netconn_new_with_proto_and_callback+0xa0>)
 8005cf2:	481d      	ldr	r0, [pc, #116]	; (8005d68 <netconn_new_with_proto_and_callback+0xa4>)
 8005cf4:	f009 f96e 	bl	800efd4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005cf8:	f104 0510 	add.w	r5, r4, #16
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f008 fbe6 	bl	800e4ce <sys_mbox_valid>
 8005d02:	b928      	cbnz	r0, 8005d10 <netconn_new_with_proto_and_callback+0x4c>
 8005d04:	4b16      	ldr	r3, [pc, #88]	; (8005d60 <netconn_new_with_proto_and_callback+0x9c>)
 8005d06:	22a4      	movs	r2, #164	; 0xa4
 8005d08:	4918      	ldr	r1, [pc, #96]	; (8005d6c <netconn_new_with_proto_and_callback+0xa8>)
 8005d0a:	4817      	ldr	r0, [pc, #92]	; (8005d68 <netconn_new_with_proto_and_callback+0xa4>)
 8005d0c:	f009 f962 	bl	800efd4 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005d10:	f104 0014 	add.w	r0, r4, #20
 8005d14:	f008 fbdb 	bl	800e4ce <sys_mbox_valid>
 8005d18:	b128      	cbz	r0, 8005d26 <netconn_new_with_proto_and_callback+0x62>
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <netconn_new_with_proto_and_callback+0x9c>)
 8005d1c:	22a6      	movs	r2, #166	; 0xa6
 8005d1e:	4914      	ldr	r1, [pc, #80]	; (8005d70 <netconn_new_with_proto_and_callback+0xac>)
 8005d20:	4811      	ldr	r0, [pc, #68]	; (8005d68 <netconn_new_with_proto_and_callback+0xa4>)
 8005d22:	f009 f957 	bl	800efd4 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005d26:	f104 060c 	add.w	r6, r4, #12
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f008 fc0f 	bl	800e54e <sys_sem_valid>
 8005d30:	b928      	cbnz	r0, 8005d3e <netconn_new_with_proto_and_callback+0x7a>
 8005d32:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <netconn_new_with_proto_and_callback+0x9c>)
 8005d34:	22a9      	movs	r2, #169	; 0xa9
 8005d36:	490f      	ldr	r1, [pc, #60]	; (8005d74 <netconn_new_with_proto_and_callback+0xb0>)
 8005d38:	480b      	ldr	r0, [pc, #44]	; (8005d68 <netconn_new_with_proto_and_callback+0xa4>)
 8005d3a:	f009 f94b 	bl	800efd4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f008 fc02 	bl	800e548 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8005d44:	4628      	mov	r0, r5
 8005d46:	f008 fb7b 	bl	800e440 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8005d4a:	4621      	mov	r1, r4
      return NULL;
 8005d4c:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8005d4e:	2007      	movs	r0, #7
 8005d50:	f004 f914 	bl	8009f7c <memp_free>
}
 8005d54:	4620      	mov	r0, r4
 8005d56:	b008      	add	sp, #32
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08006ab1 	.word	0x08006ab1
 8005d60:	0801aa79 	.word	0x0801aa79
 8005d64:	0801ab1a 	.word	0x0801ab1a
 8005d68:	0801a72c 	.word	0x0801a72c
 8005d6c:	0801ab3b 	.word	0x0801ab3b
 8005d70:	0801ab50 	.word	0x0801ab50
 8005d74:	0801ab71 	.word	0x0801ab71

08005d78 <netconn_prepare_delete>:
{
 8005d78:	b500      	push	{lr}
 8005d7a:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8005d7c:	b138      	cbz	r0, 8005d8e <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005d7e:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005d80:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005d82:	4669      	mov	r1, sp
 8005d84:	4803      	ldr	r0, [pc, #12]	; (8005d94 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005d86:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005d8a:	f7ff ff4d 	bl	8005c28 <netconn_apimsg>
}
 8005d8e:	b009      	add	sp, #36	; 0x24
 8005d90:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d94:	08006da1 	.word	0x08006da1

08005d98 <netconn_delete>:
{
 8005d98:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	b140      	cbz	r0, 8005db0 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8005d9e:	f7ff ffeb 	bl	8005d78 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8005da2:	4604      	mov	r4, r0
 8005da4:	b910      	cbnz	r0, 8005dac <netconn_delete+0x14>
    netconn_free(conn);
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 fef4 	bl	8006b94 <netconn_free>
}
 8005dac:	4620      	mov	r0, r4
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005db0:	4604      	mov	r4, r0
 8005db2:	e7fb      	b.n	8005dac <netconn_delete+0x14>

08005db4 <netconn_bind>:
{
 8005db4:	b500      	push	{lr}
 8005db6:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005db8:	b958      	cbnz	r0, 8005dd2 <netconn_bind+0x1e>
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <netconn_bind+0x38>)
 8005dbc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005dc0:	490b      	ldr	r1, [pc, #44]	; (8005df0 <netconn_bind+0x3c>)
 8005dc2:	480c      	ldr	r0, [pc, #48]	; (8005df4 <netconn_bind+0x40>)
 8005dc4:	f009 f906 	bl	800efd4 <iprintf>
 8005dc8:	f06f 000f 	mvn.w	r0, #15
}
 8005dcc:	b009      	add	sp, #36	; 0x24
 8005dce:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8005dd4:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	bf08      	it	eq
 8005dda:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005ddc:	4807      	ldr	r0, [pc, #28]	; (8005dfc <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005dde:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005de2:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005de4:	4669      	mov	r1, sp
 8005de6:	f7ff ff1f 	bl	8005c28 <netconn_apimsg>
  return err;
 8005dea:	e7ef      	b.n	8005dcc <netconn_bind+0x18>
 8005dec:	0801aa79 	.word	0x0801aa79
 8005df0:	0801abe4 	.word	0x0801abe4
 8005df4:	0801a72c 	.word	0x0801a72c
 8005df8:	080118b8 	.word	0x080118b8
 8005dfc:	08006ead 	.word	0x08006ead

08005e00 <netconn_listen_with_backlog>:
{
 8005e00:	b500      	push	{lr}
 8005e02:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005e04:	b958      	cbnz	r0, 8005e1e <netconn_listen_with_backlog+0x1e>
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <netconn_listen_with_backlog+0x2c>)
 8005e08:	f240 12bb 	movw	r2, #443	; 0x1bb
 8005e0c:	4908      	ldr	r1, [pc, #32]	; (8005e30 <netconn_listen_with_backlog+0x30>)
 8005e0e:	4809      	ldr	r0, [pc, #36]	; (8005e34 <netconn_listen_with_backlog+0x34>)
 8005e10:	f009 f8e0 	bl	800efd4 <iprintf>
 8005e14:	f06f 000f 	mvn.w	r0, #15
}
 8005e18:	b009      	add	sp, #36	; 0x24
 8005e1a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8005e1e:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8005e20:	4669      	mov	r1, sp
 8005e22:	4805      	ldr	r0, [pc, #20]	; (8005e38 <netconn_listen_with_backlog+0x38>)
 8005e24:	f7ff ff00 	bl	8005c28 <netconn_apimsg>
  return err;
 8005e28:	e7f6      	b.n	8005e18 <netconn_listen_with_backlog+0x18>
 8005e2a:	bf00      	nop
 8005e2c:	0801aa79 	.word	0x0801aa79
 8005e30:	0801ac5c 	.word	0x0801ac5c
 8005e34:	0801a72c 	.word	0x0801a72c
 8005e38:	08006ee1 	.word	0x08006ee1

08005e3c <netconn_write_vectors_partly>:
{
 8005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	469e      	mov	lr, r3
 8005e42:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005e44:	b958      	cbnz	r0, 8005e5e <netconn_write_vectors_partly+0x22>
 8005e46:	f06f 040f 	mvn.w	r4, #15
 8005e4a:	4b2c      	ldr	r3, [pc, #176]	; (8005efc <netconn_write_vectors_partly+0xc0>)
 8005e4c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005e50:	492b      	ldr	r1, [pc, #172]	; (8005f00 <netconn_write_vectors_partly+0xc4>)
 8005e52:	482c      	ldr	r0, [pc, #176]	; (8005f04 <netconn_write_vectors_partly+0xc8>)
 8005e54:	f009 f8be 	bl	800efd4 <iprintf>
}
 8005e58:	4620      	mov	r0, r4
 8005e5a:	b009      	add	sp, #36	; 0x24
 8005e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8005e5e:	7804      	ldrb	r4, [r0, #0]
 8005e60:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8005e64:	2c10      	cmp	r4, #16
 8005e66:	d009      	beq.n	8005e7c <netconn_write_vectors_partly+0x40>
 8005e68:	4b24      	ldr	r3, [pc, #144]	; (8005efc <netconn_write_vectors_partly+0xc0>)
 8005e6a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8005e6e:	4926      	ldr	r1, [pc, #152]	; (8005f08 <netconn_write_vectors_partly+0xcc>)
 8005e70:	4824      	ldr	r0, [pc, #144]	; (8005f04 <netconn_write_vectors_partly+0xc8>)
 8005e72:	f009 f8af 	bl	800efd4 <iprintf>
    return ERR_VAL;
 8005e76:	f06f 0405 	mvn.w	r4, #5
 8005e7a:	e7ed      	b.n	8005e58 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8005e7c:	7e05      	ldrb	r5, [r0, #24]
 8005e7e:	f003 0404 	and.w	r4, r3, #4
 8005e82:	f005 0502 	and.w	r5, r5, #2
 8005e86:	4325      	orrs	r5, r4
 8005e88:	d002      	beq.n	8005e90 <netconn_write_vectors_partly+0x54>
 8005e8a:	2f00      	cmp	r7, #0
 8005e8c:	d0f3      	beq.n	8005e76 <netconn_write_vectors_partly+0x3a>
 8005e8e:	2501      	movs	r5, #1
 8005e90:	2400      	movs	r4, #0
    size += vectors[i].len;
 8005e92:	f101 0c04 	add.w	ip, r1, #4
 8005e96:	4626      	mov	r6, r4
 8005e98:	e004      	b.n	8005ea4 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 8005e9a:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 8005e9e:	199e      	adds	r6, r3, r6
 8005ea0:	d2e9      	bcs.n	8005e76 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 8005ea2:	3401      	adds	r4, #1
 8005ea4:	42a2      	cmp	r2, r4
 8005ea6:	dcf8      	bgt.n	8005e9a <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	d101      	bne.n	8005eb0 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8005eac:	2400      	movs	r4, #0
 8005eae:	e7d3      	b.n	8005e58 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 8005eb0:	da03      	bge.n	8005eba <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 8005eb2:	2f00      	cmp	r7, #0
 8005eb4:	d0df      	beq.n	8005e76 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 8005eb6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8005eba:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005ebe:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 8005ec0:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8005ec2:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005ec4:	4669      	mov	r1, sp
 8005ec6:	4811      	ldr	r0, [pc, #68]	; (8005f0c <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005ec8:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005eca:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8005ece:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005ed2:	f7ff fea9 	bl	8005c28 <netconn_apimsg>
  if (err == ERR_OK) {
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d1bd      	bne.n	8005e58 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 8005edc:	b10f      	cbz	r7, 8005ee2 <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8005ede:	9b06      	ldr	r3, [sp, #24]
 8005ee0:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	d1e2      	bne.n	8005eac <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8005ee6:	9b06      	ldr	r3, [sp, #24]
 8005ee8:	42b3      	cmp	r3, r6
 8005eea:	d0df      	beq.n	8005eac <netconn_write_vectors_partly+0x70>
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <netconn_write_vectors_partly+0xc0>)
 8005eee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005ef2:	4907      	ldr	r1, [pc, #28]	; (8005f10 <netconn_write_vectors_partly+0xd4>)
 8005ef4:	4803      	ldr	r0, [pc, #12]	; (8005f04 <netconn_write_vectors_partly+0xc8>)
 8005ef6:	f009 f86d 	bl	800efd4 <iprintf>
 8005efa:	e7ad      	b.n	8005e58 <netconn_write_vectors_partly+0x1c>
 8005efc:	0801aa79 	.word	0x0801aa79
 8005f00:	0801ac94 	.word	0x0801ac94
 8005f04:	0801a72c 	.word	0x0801a72c
 8005f08:	0801acb0 	.word	0x0801acb0
 8005f0c:	08006fd1 	.word	0x08006fd1
 8005f10:	0801acd2 	.word	0x0801acd2

08005f14 <netconn_write_partly>:
{
 8005f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 8005f16:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8005f1a:	9a06      	ldr	r2, [sp, #24]
 8005f1c:	a902      	add	r1, sp, #8
 8005f1e:	9200      	str	r2, [sp, #0]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f7ff ff8b 	bl	8005e3c <netconn_write_vectors_partly>
}
 8005f26:	b005      	add	sp, #20
 8005f28:	f85d fb04 	ldr.w	pc, [sp], #4

08005f2c <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8005f2c:	2103      	movs	r1, #3
 8005f2e:	f7ff bea7 	b.w	8005c80 <netconn_close_shutdown>

08005f32 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8005f32:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8005f34:	4604      	mov	r4, r0
 8005f36:	b148      	cbz	r0, 8005f4c <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8005f38:	f008 fb44 	bl	800e5c4 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8005f3c:	2300      	movs	r3, #0
  err = conn->pending_err;
 8005f3e:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8005f42:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8005f44:	f008 fb4a 	bl	800e5dc <sys_arch_unprotect>
  return err;
}
 8005f48:	4628      	mov	r0, r5
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	e7fb      	b.n	8005f48 <netconn_err+0x16>

08005f50 <netconn_accept>:
{
 8005f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f52:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005f54:	460e      	mov	r6, r1
 8005f56:	b959      	cbnz	r1, 8005f70 <netconn_accept+0x20>
 8005f58:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <netconn_accept+0xa0>)
 8005f5a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005f5e:	4925      	ldr	r1, [pc, #148]	; (8005ff4 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005f60:	f06f 040f 	mvn.w	r4, #15
 8005f64:	4824      	ldr	r0, [pc, #144]	; (8005ff8 <netconn_accept+0xa8>)
 8005f66:	f009 f835 	bl	800efd4 <iprintf>
}
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	b003      	add	sp, #12
 8005f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005f74:	b920      	cbnz	r0, 8005f80 <netconn_accept+0x30>
 8005f76:	4b1e      	ldr	r3, [pc, #120]	; (8005ff0 <netconn_accept+0xa0>)
 8005f78:	f240 12e3 	movw	r2, #483	; 0x1e3
 8005f7c:	491f      	ldr	r1, [pc, #124]	; (8005ffc <netconn_accept+0xac>)
 8005f7e:	e7ef      	b.n	8005f60 <netconn_accept+0x10>
  err = netconn_err(conn);
 8005f80:	f7ff ffd7 	bl	8005f32 <netconn_err>
 8005f84:	4604      	mov	r4, r0
 8005f86:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d1ed      	bne.n	8005f6a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005f8e:	f105 0714 	add.w	r7, r5, #20
 8005f92:	4638      	mov	r0, r7
 8005f94:	f008 fa9b 	bl	800e4ce <sys_mbox_valid>
 8005f98:	b910      	cbnz	r0, 8005fa0 <netconn_accept+0x50>
    return ERR_CLSD;
 8005f9a:	f06f 040e 	mvn.w	r4, #14
 8005f9e:	e7e4      	b.n	8005f6a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005fa0:	7e2b      	ldrb	r3, [r5, #24]
 8005fa2:	07da      	lsls	r2, r3, #31
 8005fa4:	d4f9      	bmi.n	8005f9a <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8005fa6:	079b      	lsls	r3, r3, #30
 8005fa8:	d508      	bpl.n	8005fbc <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8005faa:	a901      	add	r1, sp, #4
 8005fac:	4638      	mov	r0, r7
 8005fae:	f008 fa7d 	bl	800e4ac <sys_arch_mbox_tryfetch>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d107      	bne.n	8005fc6 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005fb6:	f06f 0406 	mvn.w	r4, #6
 8005fba:	e7d6      	b.n	8005f6a <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	a901      	add	r1, sp, #4
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	f008 fa51 	bl	800e468 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005fc6:	6a2b      	ldr	r3, [r5, #32]
 8005fc8:	b11b      	cbz	r3, 8005fd2 <netconn_accept+0x82>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4628      	mov	r0, r5
 8005fd0:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8005fd2:	f10d 0103 	add.w	r1, sp, #3
 8005fd6:	9801      	ldr	r0, [sp, #4]
 8005fd8:	f000 fd42 	bl	8006a60 <lwip_netconn_is_err_msg>
 8005fdc:	b110      	cbz	r0, 8005fe4 <netconn_accept+0x94>
    return err;
 8005fde:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8005fe2:	e7c2      	b.n	8005f6a <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0d7      	beq.n	8005f9a <netconn_accept+0x4a>
  *new_conn = newconn;
 8005fea:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8005fec:	e7bd      	b.n	8005f6a <netconn_accept+0x1a>
 8005fee:	bf00      	nop
 8005ff0:	0801aa79 	.word	0x0801aa79
 8005ff4:	0801acf5 	.word	0x0801acf5
 8005ff8:	0801a72c 	.word	0x0801a72c
 8005ffc:	0801ad15 	.word	0x0801ad15

08006000 <netconn_recv_data>:
  void *buf = NULL;
 8006000:	2300      	movs	r3, #0
{
 8006002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006004:	4604      	mov	r4, r0
 8006006:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006008:	460d      	mov	r5, r1
  void *buf = NULL;
 800600a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800600c:	b951      	cbnz	r1, 8006024 <netconn_recv_data+0x24>
 800600e:	4b32      	ldr	r3, [pc, #200]	; (80060d8 <netconn_recv_data+0xd8>)
 8006010:	f44f 7212 	mov.w	r2, #584	; 0x248
 8006014:	4931      	ldr	r1, [pc, #196]	; (80060dc <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006016:	4832      	ldr	r0, [pc, #200]	; (80060e0 <netconn_recv_data+0xe0>)
 8006018:	f008 ffdc 	bl	800efd4 <iprintf>
 800601c:	f06f 000f 	mvn.w	r0, #15
}
 8006020:	b003      	add	sp, #12
 8006022:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8006024:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006026:	b920      	cbnz	r0, 8006032 <netconn_recv_data+0x32>
 8006028:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <netconn_recv_data+0xd8>)
 800602a:	f240 224a 	movw	r2, #586	; 0x24a
 800602e:	492d      	ldr	r1, [pc, #180]	; (80060e4 <netconn_recv_data+0xe4>)
 8006030:	e7f1      	b.n	8006016 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006032:	f100 0710 	add.w	r7, r0, #16
 8006036:	4638      	mov	r0, r7
 8006038:	f008 fa49 	bl	800e4ce <sys_mbox_valid>
 800603c:	b938      	cbnz	r0, 800604e <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 800603e:	4620      	mov	r0, r4
 8006040:	f7ff ff77 	bl	8005f32 <netconn_err>
    if (err != ERR_OK) {
 8006044:	2800      	cmp	r0, #0
 8006046:	d1eb      	bne.n	8006020 <netconn_recv_data+0x20>
    return ERR_CONN;
 8006048:	f06f 000a 	mvn.w	r0, #10
 800604c:	e7e8      	b.n	8006020 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800604e:	7e23      	ldrb	r3, [r4, #24]
 8006050:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8006054:	a901      	add	r1, sp, #4
 8006056:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	4333      	orrs	r3, r6
 800605e:	d102      	bne.n	8006066 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8006060:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8006064:	b172      	cbz	r2, 8006084 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8006066:	f008 fa21 	bl	800e4ac <sys_arch_mbox_tryfetch>
 800606a:	3001      	adds	r0, #1
 800606c:	d10c      	bne.n	8006088 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff ff5f 	bl	8005f32 <netconn_err>
      if (err != ERR_OK) {
 8006074:	2800      	cmp	r0, #0
 8006076:	d1d3      	bne.n	8006020 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8006078:	7e23      	ldrb	r3, [r4, #24]
 800607a:	07db      	lsls	r3, r3, #31
 800607c:	d4e4      	bmi.n	8006048 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 800607e:	f06f 0006 	mvn.w	r0, #6
 8006082:	e7cd      	b.n	8006020 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8006084:	f008 f9f0 	bl	800e468 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006088:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800608a:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800608c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006090:	2b10      	cmp	r3, #16
 8006092:	d116      	bne.n	80060c2 <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8006094:	f10d 0103 	add.w	r1, sp, #3
 8006098:	f000 fce2 	bl	8006a60 <lwip_netconn_is_err_msg>
 800609c:	b130      	cbz	r0, 80060ac <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 800609e:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 80060a2:	f110 0f0f 	cmn.w	r0, #15
 80060a6:	bf08      	it	eq
 80060a8:	2000      	moveq	r0, #0
 80060aa:	e7b9      	b.n	8006020 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 80060ac:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 80060ae:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80060b0:	6a23      	ldr	r3, [r4, #32]
 80060b2:	b113      	cbz	r3, 80060ba <netconn_recv_data+0xba>
 80060b4:	2101      	movs	r1, #1
 80060b6:	4620      	mov	r0, r4
 80060b8:	4798      	blx	r3
  *new_buf = buf;
 80060ba:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 80060bc:	2000      	movs	r0, #0
  *new_buf = buf;
 80060be:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 80060c0:	e7ae      	b.n	8006020 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80060c2:	b930      	cbnz	r0, 80060d2 <netconn_recv_data+0xd2>
 80060c4:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <netconn_recv_data+0xd8>)
 80060c6:	f240 2291 	movw	r2, #657	; 0x291
 80060ca:	4907      	ldr	r1, [pc, #28]	; (80060e8 <netconn_recv_data+0xe8>)
 80060cc:	4804      	ldr	r0, [pc, #16]	; (80060e0 <netconn_recv_data+0xe0>)
 80060ce:	f008 ff81 	bl	800efd4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	e7ea      	b.n	80060ae <netconn_recv_data+0xae>
 80060d8:	0801aa79 	.word	0x0801aa79
 80060dc:	0801ad32 	.word	0x0801ad32
 80060e0:	0801a72c 	.word	0x0801a72c
 80060e4:	0801ad50 	.word	0x0801ad50
 80060e8:	0801ad6b 	.word	0x0801ad6b

080060ec <netconn_recv_data_tcp>:
{
 80060ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80060f2:	3010      	adds	r0, #16
{
 80060f4:	460f      	mov	r7, r1
 80060f6:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80060f8:	f008 f9e9 	bl	800e4ce <sys_mbox_valid>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d03c      	beq.n	800617a <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8006100:	f994 2018 	ldrsb.w	r2, [r4, #24]
 8006104:	7e23      	ldrb	r3, [r4, #24]
 8006106:	2a00      	cmp	r2, #0
 8006108:	da12      	bge.n	8006130 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800610a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800610e:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006110:	6a23      	ldr	r3, [r4, #32]
 8006112:	b11b      	cbz	r3, 800611c <netconn_recv_data_tcp+0x30>
 8006114:	2200      	movs	r2, #0
 8006116:	2101      	movs	r1, #1
 8006118:	4620      	mov	r0, r4
 800611a:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800611c:	6863      	ldr	r3, [r4, #4]
 800611e:	bb2b      	cbnz	r3, 800616c <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff ff06 	bl	8005f32 <netconn_err>
        return ERR_RST;
 8006126:	1e05      	subs	r5, r0, #0
 8006128:	bf08      	it	eq
 800612a:	f06f 050d 	mvneq.w	r5, #13
 800612e:	e018      	b.n	8006162 <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8006130:	4632      	mov	r2, r6
 8006132:	4639      	mov	r1, r7
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff ff63 	bl	8006000 <netconn_recv_data>
  if (err != ERR_OK) {
 800613a:	4605      	mov	r5, r0
 800613c:	b988      	cbnz	r0, 8006162 <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800613e:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8006140:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006142:	d405      	bmi.n	8006150 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 8006144:	b187      	cbz	r7, 8006168 <netconn_recv_data_tcp+0x7c>
 8006146:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8006148:	466a      	mov	r2, sp
 800614a:	4620      	mov	r0, r4
 800614c:	f7ff fd76 	bl	8005c3c <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8006150:	b93f      	cbnz	r7, 8006162 <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 8006152:	06f3      	lsls	r3, r6, #27
 8006154:	d5dc      	bpl.n	8006110 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006156:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8006158:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800615c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006160:	7623      	strb	r3, [r4, #24]
}
 8006162:	4628      	mov	r0, r5
 8006164:	b009      	add	sp, #36	; 0x24
 8006166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8006168:	2101      	movs	r1, #1
 800616a:	e7ed      	b.n	8006148 <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800616c:	2101      	movs	r1, #1
 800616e:	4620      	mov	r0, r4
      return ERR_CLSD;
 8006170:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8006174:	f7ff fd84 	bl	8005c80 <netconn_close_shutdown>
      return ERR_CLSD;
 8006178:	e7f3      	b.n	8006162 <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 800617a:	f06f 050a 	mvn.w	r5, #10
 800617e:	e7f0      	b.n	8006162 <netconn_recv_data_tcp+0x76>

08006180 <netconn_recv>:
{
 8006180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006182:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006184:	460e      	mov	r6, r1
 8006186:	b959      	cbnz	r1, 80061a0 <netconn_recv+0x20>
 8006188:	4b22      	ldr	r3, [pc, #136]	; (8006214 <netconn_recv+0x94>)
 800618a:	f240 3263 	movw	r2, #867	; 0x363
 800618e:	4922      	ldr	r1, [pc, #136]	; (8006218 <netconn_recv+0x98>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006190:	f06f 050f 	mvn.w	r5, #15
 8006194:	4821      	ldr	r0, [pc, #132]	; (800621c <netconn_recv+0x9c>)
 8006196:	f008 ff1d 	bl	800efd4 <iprintf>
}
 800619a:	4628      	mov	r0, r5
 800619c:	b003      	add	sp, #12
 800619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80061a0:	2700      	movs	r7, #0
 80061a2:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80061a4:	b920      	cbnz	r0, 80061b0 <netconn_recv+0x30>
 80061a6:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <netconn_recv+0x94>)
 80061a8:	f240 3265 	movw	r2, #869	; 0x365
 80061ac:	491c      	ldr	r1, [pc, #112]	; (8006220 <netconn_recv+0xa0>)
 80061ae:	e7ef      	b.n	8006190 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80061b0:	7803      	ldrb	r3, [r0, #0]
 80061b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d125      	bne.n	8006206 <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80061ba:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 80061bc:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80061be:	f003 fec1 	bl	8009f44 <memp_malloc>
    if (buf == NULL) {
 80061c2:	4604      	mov	r4, r0
 80061c4:	b1e0      	cbz	r0, 8006200 <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 80061c6:	4628      	mov	r0, r5
 80061c8:	463a      	mov	r2, r7
 80061ca:	a901      	add	r1, sp, #4
 80061cc:	f7ff ff8e 	bl	80060ec <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 80061d0:	4605      	mov	r5, r0
 80061d2:	b120      	cbz	r0, 80061de <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 80061d4:	4621      	mov	r1, r4
 80061d6:	2006      	movs	r0, #6
 80061d8:	f003 fed0 	bl	8009f7c <memp_free>
      return err;
 80061dc:	e7dd      	b.n	800619a <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	b933      	cbnz	r3, 80061f0 <netconn_recv+0x70>
 80061e2:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <netconn_recv+0x94>)
 80061e4:	f240 3279 	movw	r2, #889	; 0x379
 80061e8:	490e      	ldr	r1, [pc, #56]	; (8006224 <netconn_recv+0xa4>)
 80061ea:	480c      	ldr	r0, [pc, #48]	; (800621c <netconn_recv+0x9c>)
 80061ec:	f008 fef2 	bl	800efd4 <iprintf>
    buf->p = p;
 80061f0:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 80061f2:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 80061fa:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 80061fc:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 80061fe:	e7cc      	b.n	800619a <netconn_recv+0x1a>
      return ERR_MEM;
 8006200:	f04f 35ff 	mov.w	r5, #4294967295
 8006204:	e7c9      	b.n	800619a <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8006206:	463a      	mov	r2, r7
}
 8006208:	b003      	add	sp, #12
 800620a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800620e:	f7ff bef7 	b.w	8006000 <netconn_recv_data>
 8006212:	bf00      	nop
 8006214:	0801aa79 	.word	0x0801aa79
 8006218:	0801ad32 	.word	0x0801ad32
 800621c:	0801a72c 	.word	0x0801a72c
 8006220:	0801ad50 	.word	0x0801ad50
 8006224:	0801c3c8 	.word	0x0801c3c8

08006228 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8006228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800622c:	4606      	mov	r6, r0
 800622e:	4617      	mov	r7, r2
 8006230:	461d      	mov	r5, r3
 8006232:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8006236:	460c      	mov	r4, r1
 8006238:	b929      	cbnz	r1, 8006246 <recv_udp+0x1e>
 800623a:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <recv_udp+0xa8>)
 800623c:	22e5      	movs	r2, #229	; 0xe5
 800623e:	4925      	ldr	r1, [pc, #148]	; (80062d4 <recv_udp+0xac>)
 8006240:	4825      	ldr	r0, [pc, #148]	; (80062d8 <recv_udp+0xb0>)
 8006242:	f008 fec7 	bl	800efd4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006246:	b99e      	cbnz	r6, 8006270 <recv_udp+0x48>
 8006248:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <recv_udp+0xa8>)
 800624a:	22e6      	movs	r2, #230	; 0xe6
 800624c:	4923      	ldr	r1, [pc, #140]	; (80062dc <recv_udp+0xb4>)
 800624e:	4822      	ldr	r0, [pc, #136]	; (80062d8 <recv_udp+0xb0>)
 8006250:	f008 fec0 	bl	800efd4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8006254:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8006256:	b003      	add	sp, #12
 8006258:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 800625c:	f004 b8a8 	b.w	800a3b0 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006260:	6a33      	ldr	r3, [r6, #32]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d031      	beq.n	80062ca <recv_udp+0xa2>
 8006266:	4630      	mov	r0, r6
}
 8006268:	b003      	add	sp, #12
 800626a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800626e:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006270:	6873      	ldr	r3, [r6, #4]
 8006272:	42a3      	cmp	r3, r4
 8006274:	d005      	beq.n	8006282 <recv_udp+0x5a>
 8006276:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <recv_udp+0xa8>)
 8006278:	22ee      	movs	r2, #238	; 0xee
 800627a:	4919      	ldr	r1, [pc, #100]	; (80062e0 <recv_udp+0xb8>)
 800627c:	4816      	ldr	r0, [pc, #88]	; (80062d8 <recv_udp+0xb0>)
 800627e:	f008 fea9 	bl	800efd4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006282:	f106 0910 	add.w	r9, r6, #16
 8006286:	4648      	mov	r0, r9
 8006288:	f008 f921 	bl	800e4ce <sys_mbox_valid>
 800628c:	2800      	cmp	r0, #0
 800628e:	d0e1      	beq.n	8006254 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006290:	2006      	movs	r0, #6
 8006292:	f003 fe57 	bl	8009f44 <memp_malloc>
  if (buf == NULL) {
 8006296:	4604      	mov	r4, r0
 8006298:	2800      	cmp	r0, #0
 800629a:	d0db      	beq.n	8006254 <recv_udp+0x2c>
    buf->ptr = p;
 800629c:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 80062a0:	b105      	cbz	r5, 80062a4 <recv_udp+0x7c>
 80062a2:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 80062a4:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80062a6:	4621      	mov	r1, r4
 80062a8:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 80062aa:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 80062ac:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 80062b0:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80062b2:	f008 f8cf 	bl	800e454 <sys_mbox_trypost>
 80062b6:	9a01      	ldr	r2, [sp, #4]
 80062b8:	4601      	mov	r1, r0
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0d0      	beq.n	8006260 <recv_udp+0x38>
    netbuf_delete(buf);
 80062be:	4620      	mov	r0, r4
}
 80062c0:	b003      	add	sp, #12
 80062c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 80062c6:	f000 bf47 	b.w	8007158 <netbuf_delete>
}
 80062ca:	b003      	add	sp, #12
 80062cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062d0:	0801ada1 	.word	0x0801ada1
 80062d4:	0801ae02 	.word	0x0801ae02
 80062d8:	0801a72c 	.word	0x0801a72c
 80062dc:	0801ae24 	.word	0x0801ae24
 80062e0:	0801ae43 	.word	0x0801ae43

080062e4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80062e4:	b507      	push	{r0, r1, r2, lr}
 80062e6:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80062e8:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 80062ea:	9001      	str	r0, [sp, #4]
 80062ec:	f004 fcaa 	bl	800ac44 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80062f0:	9801      	ldr	r0, [sp, #4]
 80062f2:	4909      	ldr	r1, [pc, #36]	; (8006318 <setup_tcp+0x34>)
 80062f4:	f004 fcaa 	bl	800ac4c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80062f8:	9801      	ldr	r0, [sp, #4]
 80062fa:	4908      	ldr	r1, [pc, #32]	; (800631c <setup_tcp+0x38>)
 80062fc:	f004 fcbe 	bl	800ac7c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006300:	9801      	ldr	r0, [sp, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	4906      	ldr	r1, [pc, #24]	; (8006320 <setup_tcp+0x3c>)
 8006306:	f004 fced 	bl	800ace4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800630a:	4906      	ldr	r1, [pc, #24]	; (8006324 <setup_tcp+0x40>)
 800630c:	9801      	ldr	r0, [sp, #4]
}
 800630e:	b003      	add	sp, #12
 8006310:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8006314:	f004 bcc8 	b.w	800aca8 <tcp_err>
 8006318:	08006851 	.word	0x08006851
 800631c:	080067e1 	.word	0x080067e1
 8006320:	08006765 	.word	0x08006765
 8006324:	08006921 	.word	0x08006921

08006328 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800632e:	4604      	mov	r4, r0
 8006330:	b930      	cbnz	r0, 8006340 <lwip_netconn_do_writemore+0x18>
 8006332:	4b89      	ldr	r3, [pc, #548]	; (8006558 <lwip_netconn_do_writemore+0x230>)
 8006334:	f240 6273 	movw	r2, #1651	; 0x673
 8006338:	4988      	ldr	r1, [pc, #544]	; (800655c <lwip_netconn_do_writemore+0x234>)
 800633a:	4889      	ldr	r0, [pc, #548]	; (8006560 <lwip_netconn_do_writemore+0x238>)
 800633c:	f008 fe4a 	bl	800efd4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006340:	7863      	ldrb	r3, [r4, #1]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d006      	beq.n	8006354 <lwip_netconn_do_writemore+0x2c>
 8006346:	4b84      	ldr	r3, [pc, #528]	; (8006558 <lwip_netconn_do_writemore+0x230>)
 8006348:	f240 6274 	movw	r2, #1652	; 0x674
 800634c:	4985      	ldr	r1, [pc, #532]	; (8006564 <lwip_netconn_do_writemore+0x23c>)
 800634e:	4884      	ldr	r0, [pc, #528]	; (8006560 <lwip_netconn_do_writemore+0x238>)
 8006350:	f008 fe40 	bl	800efd4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006354:	69e3      	ldr	r3, [r4, #28]
 8006356:	b933      	cbnz	r3, 8006366 <lwip_netconn_do_writemore+0x3e>
 8006358:	4b7f      	ldr	r3, [pc, #508]	; (8006558 <lwip_netconn_do_writemore+0x230>)
 800635a:	f240 6275 	movw	r2, #1653	; 0x675
 800635e:	4982      	ldr	r1, [pc, #520]	; (8006568 <lwip_netconn_do_writemore+0x240>)
 8006360:	487f      	ldr	r0, [pc, #508]	; (8006560 <lwip_netconn_do_writemore+0x238>)
 8006362:	f008 fe37 	bl	800efd4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8006366:	6863      	ldr	r3, [r4, #4]
 8006368:	b933      	cbnz	r3, 8006378 <lwip_netconn_do_writemore+0x50>
 800636a:	4b7b      	ldr	r3, [pc, #492]	; (8006558 <lwip_netconn_do_writemore+0x230>)
 800636c:	f240 6276 	movw	r2, #1654	; 0x676
 8006370:	497e      	ldr	r1, [pc, #504]	; (800656c <lwip_netconn_do_writemore+0x244>)
 8006372:	487b      	ldr	r0, [pc, #492]	; (8006560 <lwip_netconn_do_writemore+0x238>)
 8006374:	f008 fe2e 	bl	800efd4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8006378:	69e3      	ldr	r3, [r4, #28]
 800637a:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800637e:	429a      	cmp	r2, r3
 8006380:	d306      	bcc.n	8006390 <lwip_netconn_do_writemore+0x68>
 8006382:	4b75      	ldr	r3, [pc, #468]	; (8006558 <lwip_netconn_do_writemore+0x230>)
 8006384:	f240 6277 	movw	r2, #1655	; 0x677
 8006388:	4979      	ldr	r1, [pc, #484]	; (8006570 <lwip_netconn_do_writemore+0x248>)
 800638a:	4875      	ldr	r0, [pc, #468]	; (8006560 <lwip_netconn_do_writemore+0x238>)
 800638c:	f008 fe22 	bl	800efd4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8006390:	69e3      	ldr	r3, [r4, #28]
 8006392:	899b      	ldrh	r3, [r3, #12]
 8006394:	b933      	cbnz	r3, 80063a4 <lwip_netconn_do_writemore+0x7c>
 8006396:	4b70      	ldr	r3, [pc, #448]	; (8006558 <lwip_netconn_do_writemore+0x230>)
 8006398:	f240 6279 	movw	r2, #1657	; 0x679
 800639c:	4975      	ldr	r1, [pc, #468]	; (8006574 <lwip_netconn_do_writemore+0x24c>)
 800639e:	4870      	ldr	r0, [pc, #448]	; (8006560 <lwip_netconn_do_writemore+0x238>)
 80063a0:	f008 fe18 	bl	800efd4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80063a4:	69e3      	ldr	r3, [r4, #28]
 80063a6:	7e26      	ldrb	r6, [r4, #24]
 80063a8:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80063ac:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80063b0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8006560 <lwip_netconn_do_writemore+0x238>
 80063b4:	f008 0304 	and.w	r3, r8, #4
 80063b8:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80063ba:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 80063bc:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80063be:	688a      	ldr	r2, [r1, #8]
 80063c0:	690b      	ldr	r3, [r1, #16]
 80063c2:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 80063c4:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80063c8:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80063cc:	6850      	ldr	r0, [r2, #4]
 80063ce:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 80063d2:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 80063d6:	bf2a      	itet	cs
 80063d8:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 80063dc:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 80063e0:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 80063e4:	42aa      	cmp	r2, r5
 80063e6:	d979      	bls.n	80064dc <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	d038      	beq.n	800645e <lwip_netconn_do_writemore+0x136>
          if (!len) {
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	d138      	bne.n	8006462 <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80063f0:	698b      	ldr	r3, [r1, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf0c      	ite	eq
 80063f6:	f06f 0a06 	mvneq.w	sl, #6
 80063fa:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80063fe:	69e3      	ldr	r3, [r4, #28]
 8006400:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006404:	429a      	cmp	r2, r3
 8006406:	d276      	bcs.n	80064f6 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006408:	6a23      	ldr	r3, [r4, #32]
 800640a:	b11b      	cbz	r3, 8006414 <lwip_netconn_do_writemore+0xec>
 800640c:	2200      	movs	r2, #0
 800640e:	2103      	movs	r1, #3
 8006410:	4620      	mov	r0, r4
 8006412:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8006414:	7e23      	ldrb	r3, [r4, #24]
 8006416:	f043 0310 	orr.w	r3, r3, #16
 800641a:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 800641c:	f1ba 0f00 	cmp.w	sl, #0
 8006420:	d17e      	bne.n	8006520 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8006422:	69e3      	ldr	r3, [r4, #28]
 8006424:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006428:	429a      	cmp	r2, r3
 800642a:	d077      	beq.n	800651c <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800642c:	3e00      	subs	r6, #0
 800642e:	bf18      	it	ne
 8006430:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8006432:	6860      	ldr	r0, [r4, #4]
 8006434:	f007 f964 	bl	800d700 <tcp_output>
      if (out_err == ERR_RTE) {
 8006438:	3004      	adds	r0, #4
 800643a:	f040 8084 	bne.w	8006546 <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800643e:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006442:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8006444:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006446:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8006448:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 800644c:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 800644e:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8006450:	2f00      	cmp	r7, #0
 8006452:	d07e      	beq.n	8006552 <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8006454:	300c      	adds	r0, #12
 8006456:	f008 f874 	bl	800e542 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800645a:	4628      	mov	r0, r5
 800645c:	e06b      	b.n	8006536 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800645e:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006462:	442b      	add	r3, r5
 8006464:	4298      	cmp	r0, r3
 8006466:	d206      	bcs.n	8006476 <lwip_netconn_do_writemore+0x14e>
 8006468:	4b3b      	ldr	r3, [pc, #236]	; (8006558 <lwip_netconn_do_writemore+0x230>)
 800646a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800646e:	4942      	ldr	r1, [pc, #264]	; (8006578 <lwip_netconn_do_writemore+0x250>)
 8006470:	4658      	mov	r0, fp
 8006472:	f008 fdaf 	bl	800efd4 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800647a:	429d      	cmp	r5, r3
 800647c:	d102      	bne.n	8006484 <lwip_netconn_do_writemore+0x15c>
 800647e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8006482:	d207      	bcs.n	8006494 <lwip_netconn_do_writemore+0x16c>
 8006484:	fa1f f989 	uxth.w	r9, r9
 8006488:	45a9      	cmp	r9, r5
 800648a:	d129      	bne.n	80064e0 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800648c:	69e3      	ldr	r3, [r4, #28]
 800648e:	899b      	ldrh	r3, [r3, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d925      	bls.n	80064e0 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006494:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8006498:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800649c:	4651      	mov	r1, sl
 800649e:	4643      	mov	r3, r8
 80064a0:	462a      	mov	r2, r5
 80064a2:	6860      	ldr	r0, [r4, #4]
 80064a4:	f006 fbce 	bl	800cc44 <tcp_write>
      if (err == ERR_OK) {
 80064a8:	4682      	mov	sl, r0
 80064aa:	b9e0      	cbnz	r0, 80064e6 <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 80064ac:	69e3      	ldr	r3, [r4, #28]
 80064ae:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80064b0:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 80064b2:	442a      	add	r2, r5
 80064b4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80064ba:	684a      	ldr	r2, [r1, #4]
 80064bc:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 80064be:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80064c0:	d107      	bne.n	80064d2 <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 80064c2:	899a      	ldrh	r2, [r3, #12]
 80064c4:	3a01      	subs	r2, #1
 80064c6:	b292      	uxth	r2, r2
 80064c8:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80064ca:	b112      	cbz	r2, 80064d2 <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 80064cc:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 80064ce:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 80064d0:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	f47f af70 	bne.w	80063ba <lwip_netconn_do_writemore+0x92>
 80064da:	e00a      	b.n	80064f2 <lwip_netconn_do_writemore+0x1ca>
 80064dc:	4615      	mov	r5, r2
 80064de:	e7c0      	b.n	8006462 <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 80064e0:	f04f 0900 	mov.w	r9, #0
 80064e4:	e7da      	b.n	800649c <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d8a9      	bhi.n	8006442 <lwip_netconn_do_writemore+0x11a>
err_mem:
 80064ee:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d183      	bne.n	80063fe <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80064f6:	6863      	ldr	r3, [r4, #4]
 80064f8:	f640 3269 	movw	r2, #2921	; 0xb69
 80064fc:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8006500:	4291      	cmp	r1, r2
 8006502:	d903      	bls.n	800650c <lwip_netconn_do_writemore+0x1e4>
 8006504:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006508:	2b04      	cmp	r3, #4
 800650a:	d987      	bls.n	800641c <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800650c:	6a23      	ldr	r3, [r4, #32]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d084      	beq.n	800641c <lwip_netconn_do_writemore+0xf4>
 8006512:	2200      	movs	r2, #0
 8006514:	2103      	movs	r1, #3
 8006516:	4620      	mov	r0, r4
 8006518:	4798      	blx	r3
 800651a:	e77f      	b.n	800641c <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 800651c:	2601      	movs	r6, #1
 800651e:	e788      	b.n	8006432 <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8006520:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006524:	d18d      	bne.n	8006442 <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8006526:	6860      	ldr	r0, [r4, #4]
 8006528:	f007 f8ea 	bl	800d700 <tcp_output>
      if (out_err == ERR_RTE) {
 800652c:	3004      	adds	r0, #4
 800652e:	d086      	beq.n	800643e <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8006530:	b91e      	cbnz	r6, 800653a <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8006532:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800653a:	69e3      	ldr	r3, [r4, #28]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	b12b      	cbz	r3, 800654c <lwip_netconn_do_writemore+0x224>
 8006540:	f04f 0a00 	mov.w	sl, #0
 8006544:	e77d      	b.n	8006442 <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 8006546:	2e00      	cmp	r6, #0
 8006548:	d1fa      	bne.n	8006540 <lwip_netconn_do_writemore+0x218>
 800654a:	e7f2      	b.n	8006532 <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800654c:	f06f 0a06 	mvn.w	sl, #6
 8006550:	e777      	b.n	8006442 <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 8006552:	4638      	mov	r0, r7
 8006554:	e7ef      	b.n	8006536 <lwip_netconn_do_writemore+0x20e>
 8006556:	bf00      	nop
 8006558:	0801ada1 	.word	0x0801ada1
 800655c:	0801aeda 	.word	0x0801aeda
 8006560:	0801a72c 	.word	0x0801a72c
 8006564:	0801aee7 	.word	0x0801aee7
 8006568:	0801af04 	.word	0x0801af04
 800656c:	0801af1e 	.word	0x0801af1e
 8006570:	0801af34 	.word	0x0801af34
 8006574:	0801af73 	.word	0x0801af73
 8006578:	0801af9b 	.word	0x0801af9b

0800657c <lwip_netconn_do_close_internal>:
{
 800657c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006582:	4604      	mov	r4, r0
 8006584:	b930      	cbnz	r0, 8006594 <lwip_netconn_do_close_internal+0x18>
 8006586:	4b6c      	ldr	r3, [pc, #432]	; (8006738 <lwip_netconn_do_close_internal+0x1bc>)
 8006588:	f240 32a2 	movw	r2, #930	; 0x3a2
 800658c:	496b      	ldr	r1, [pc, #428]	; (800673c <lwip_netconn_do_close_internal+0x1c0>)
 800658e:	486c      	ldr	r0, [pc, #432]	; (8006740 <lwip_netconn_do_close_internal+0x1c4>)
 8006590:	f008 fd20 	bl	800efd4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006594:	7823      	ldrb	r3, [r4, #0]
 8006596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800659a:	2b10      	cmp	r3, #16
 800659c:	d006      	beq.n	80065ac <lwip_netconn_do_close_internal+0x30>
 800659e:	4b66      	ldr	r3, [pc, #408]	; (8006738 <lwip_netconn_do_close_internal+0x1bc>)
 80065a0:	f240 32a3 	movw	r2, #931	; 0x3a3
 80065a4:	4967      	ldr	r1, [pc, #412]	; (8006744 <lwip_netconn_do_close_internal+0x1c8>)
 80065a6:	4866      	ldr	r0, [pc, #408]	; (8006740 <lwip_netconn_do_close_internal+0x1c4>)
 80065a8:	f008 fd14 	bl	800efd4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80065ac:	7863      	ldrb	r3, [r4, #1]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d006      	beq.n	80065c0 <lwip_netconn_do_close_internal+0x44>
 80065b2:	4b61      	ldr	r3, [pc, #388]	; (8006738 <lwip_netconn_do_close_internal+0x1bc>)
 80065b4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80065b8:	4963      	ldr	r1, [pc, #396]	; (8006748 <lwip_netconn_do_close_internal+0x1cc>)
 80065ba:	4861      	ldr	r0, [pc, #388]	; (8006740 <lwip_netconn_do_close_internal+0x1c4>)
 80065bc:	f008 fd0a 	bl	800efd4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	b933      	cbnz	r3, 80065d2 <lwip_netconn_do_close_internal+0x56>
 80065c4:	4b5c      	ldr	r3, [pc, #368]	; (8006738 <lwip_netconn_do_close_internal+0x1bc>)
 80065c6:	f240 32a5 	movw	r2, #933	; 0x3a5
 80065ca:	4960      	ldr	r1, [pc, #384]	; (800674c <lwip_netconn_do_close_internal+0x1d0>)
 80065cc:	485c      	ldr	r0, [pc, #368]	; (8006740 <lwip_netconn_do_close_internal+0x1c4>)
 80065ce:	f008 fd01 	bl	800efd4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80065d2:	69e3      	ldr	r3, [r4, #28]
 80065d4:	b933      	cbnz	r3, 80065e4 <lwip_netconn_do_close_internal+0x68>
 80065d6:	4b58      	ldr	r3, [pc, #352]	; (8006738 <lwip_netconn_do_close_internal+0x1bc>)
 80065d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80065dc:	495c      	ldr	r1, [pc, #368]	; (8006750 <lwip_netconn_do_close_internal+0x1d4>)
 80065de:	4858      	ldr	r0, [pc, #352]	; (8006740 <lwip_netconn_do_close_internal+0x1c4>)
 80065e0:	f008 fcf8 	bl	800efd4 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80065e4:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 80065e6:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80065e8:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80065ea:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80065ec:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80065f0:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80065f4:	d00f      	beq.n	8006616 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 80065f6:	f1ba 0f00 	cmp.w	sl, #0
 80065fa:	d005      	beq.n	8006608 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 80065fc:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 80065fe:	1f5a      	subs	r2, r3, #5
 8006600:	2a01      	cmp	r2, #1
 8006602:	d908      	bls.n	8006616 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8006604:	2b08      	cmp	r3, #8
 8006606:	d006      	beq.n	8006616 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006608:	f1b8 0f00 	cmp.w	r8, #0
 800660c:	d016      	beq.n	800663c <lwip_netconn_do_close_internal+0xc0>
 800660e:	8b6f      	ldrh	r7, [r5, #26]
 8006610:	f017 0710 	ands.w	r7, r7, #16
 8006614:	d004      	beq.n	8006620 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8006616:	2701      	movs	r7, #1
 8006618:	2100      	movs	r1, #0
 800661a:	4628      	mov	r0, r5
 800661c:	f004 fb12 	bl	800ac44 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8006620:	7d2b      	ldrb	r3, [r5, #20]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10c      	bne.n	8006640 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8006626:	2100      	movs	r1, #0
 8006628:	4628      	mov	r0, r5
 800662a:	f004 fb55 	bl	800acd8 <tcp_accept>
  if (shut_close) {
 800662e:	bb27      	cbnz	r7, 800667a <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006630:	4642      	mov	r2, r8
 8006632:	4651      	mov	r1, sl
 8006634:	4628      	mov	r0, r5
 8006636:	f004 ff73 	bl	800b520 <tcp_shutdown>
 800663a:	e021      	b.n	8006680 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 800663c:	4647      	mov	r7, r8
 800663e:	e7ef      	b.n	8006620 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8006640:	f1ba 0f00 	cmp.w	sl, #0
 8006644:	d007      	beq.n	8006656 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8006646:	2100      	movs	r1, #0
 8006648:	4628      	mov	r0, r5
 800664a:	f004 faff 	bl	800ac4c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800664e:	2100      	movs	r1, #0
 8006650:	4628      	mov	r0, r5
 8006652:	f004 fb41 	bl	800acd8 <tcp_accept>
    if (shut_tx) {
 8006656:	f1b8 0f00 	cmp.w	r8, #0
 800665a:	d003      	beq.n	8006664 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 800665c:	2100      	movs	r1, #0
 800665e:	4628      	mov	r0, r5
 8006660:	f004 fb0c 	bl	800ac7c <tcp_sent>
    if (shut_close) {
 8006664:	2f00      	cmp	r7, #0
 8006666:	d0e3      	beq.n	8006630 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8006668:	2200      	movs	r2, #0
 800666a:	4628      	mov	r0, r5
 800666c:	4611      	mov	r1, r2
 800666e:	f004 fb39 	bl	800ace4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006672:	2100      	movs	r1, #0
 8006674:	4628      	mov	r0, r5
 8006676:	f004 fb17 	bl	800aca8 <tcp_err>
      err = tcp_close(tpcb);
 800667a:	4628      	mov	r0, r5
 800667c:	f004 fe82 	bl	800b384 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006680:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8006682:	b160      	cbz	r0, 800669e <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d10a      	bne.n	800669e <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006688:	69e3      	ldr	r3, [r4, #28]
 800668a:	f893 b009 	ldrb.w	fp, [r3, #9]
 800668e:	f1bb 0f00 	cmp.w	fp, #0
 8006692:	d130      	bne.n	80066f6 <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 8006694:	b11f      	cbz	r7, 800669e <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 8006696:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8006698:	4628      	mov	r0, r5
 800669a:	f004 fff7 	bl	800b68c <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800669e:	69e3      	ldr	r3, [r4, #28]
 80066a0:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80066a2:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 80066a8:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80066aa:	b9ce      	cbnz	r6, 80066e0 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 80066ac:	b137      	cbz	r7, 80066bc <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80066ae:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 80066b0:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80066b2:	b11b      	cbz	r3, 80066bc <lwip_netconn_do_close_internal+0x140>
 80066b4:	4632      	mov	r2, r6
 80066b6:	2104      	movs	r1, #4
 80066b8:	4620      	mov	r0, r4
 80066ba:	4798      	blx	r3
      if (shut_rx) {
 80066bc:	f1ba 0f00 	cmp.w	sl, #0
 80066c0:	d005      	beq.n	80066ce <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80066c2:	6a23      	ldr	r3, [r4, #32]
 80066c4:	b11b      	cbz	r3, 80066ce <lwip_netconn_do_close_internal+0x152>
 80066c6:	2200      	movs	r2, #0
 80066c8:	4620      	mov	r0, r4
 80066ca:	4611      	mov	r1, r2
 80066cc:	4798      	blx	r3
      if (shut_tx) {
 80066ce:	f1b8 0f00 	cmp.w	r8, #0
 80066d2:	d005      	beq.n	80066e0 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80066d4:	6a23      	ldr	r3, [r4, #32]
 80066d6:	b11b      	cbz	r3, 80066e0 <lwip_netconn_do_close_internal+0x164>
 80066d8:	2200      	movs	r2, #0
 80066da:	2102      	movs	r1, #2
 80066dc:	4620      	mov	r0, r4
 80066de:	4798      	blx	r3
    if (delayed)
 80066e0:	f1b9 0f00 	cmp.w	r9, #0
 80066e4:	d026      	beq.n	8006734 <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 80066e6:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 80066e8:	f105 000c 	add.w	r0, r5, #12
 80066ec:	f007 ff29 	bl	800e542 <sys_sem_signal>
}
 80066f0:	4630      	mov	r0, r6
 80066f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80066f6:	7d2b      	ldrb	r3, [r5, #20]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d106      	bne.n	800670a <lwip_netconn_do_close_internal+0x18e>
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <lwip_netconn_do_close_internal+0x1bc>)
 80066fe:	f240 4241 	movw	r2, #1089	; 0x441
 8006702:	4914      	ldr	r1, [pc, #80]	; (8006754 <lwip_netconn_do_close_internal+0x1d8>)
 8006704:	480e      	ldr	r0, [pc, #56]	; (8006740 <lwip_netconn_do_close_internal+0x1c4>)
 8006706:	f008 fc65 	bl	800efd4 <iprintf>
    if (shut_tx) {
 800670a:	f1b8 0f00 	cmp.w	r8, #0
 800670e:	d003      	beq.n	8006718 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8006710:	4911      	ldr	r1, [pc, #68]	; (8006758 <lwip_netconn_do_close_internal+0x1dc>)
 8006712:	4628      	mov	r0, r5
 8006714:	f004 fab2 	bl	800ac7c <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8006718:	2201      	movs	r2, #1
 800671a:	4628      	mov	r0, r5
 800671c:	490f      	ldr	r1, [pc, #60]	; (800675c <lwip_netconn_do_close_internal+0x1e0>)
 800671e:	f004 fae1 	bl	800ace4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8006722:	4628      	mov	r0, r5
 8006724:	490e      	ldr	r1, [pc, #56]	; (8006760 <lwip_netconn_do_close_internal+0x1e4>)
 8006726:	f004 fabf 	bl	800aca8 <tcp_err>
    tcp_arg(tpcb, conn);
 800672a:	4621      	mov	r1, r4
 800672c:	4628      	mov	r0, r5
 800672e:	f004 fa89 	bl	800ac44 <tcp_arg>
  return err;
 8006732:	e7dd      	b.n	80066f0 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 8006734:	464e      	mov	r6, r9
 8006736:	e7db      	b.n	80066f0 <lwip_netconn_do_close_internal+0x174>
 8006738:	0801ada1 	.word	0x0801ada1
 800673c:	0801ac87 	.word	0x0801ac87
 8006740:	0801a72c 	.word	0x0801a72c
 8006744:	0801afc6 	.word	0x0801afc6
 8006748:	0801afe4 	.word	0x0801afe4
 800674c:	0801b008 	.word	0x0801b008
 8006750:	0801af04 	.word	0x0801af04
 8006754:	0801b01b 	.word	0x0801b01b
 8006758:	080067e1 	.word	0x080067e1
 800675c:	08006765 	.word	0x08006765
 8006760:	08006921 	.word	0x08006921

08006764 <poll_tcp>:
{
 8006764:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006766:	4604      	mov	r4, r0
 8006768:	b930      	cbnz	r0, 8006778 <poll_tcp+0x14>
 800676a:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <poll_tcp+0x70>)
 800676c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006770:	4919      	ldr	r1, [pc, #100]	; (80067d8 <poll_tcp+0x74>)
 8006772:	481a      	ldr	r0, [pc, #104]	; (80067dc <poll_tcp+0x78>)
 8006774:	f008 fc2e 	bl	800efd4 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8006778:	7861      	ldrb	r1, [r4, #1]
 800677a:	2901      	cmp	r1, #1
 800677c:	d11c      	bne.n	80067b8 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800677e:	4620      	mov	r0, r4
 8006780:	f7ff fdd2 	bl	8006328 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006784:	7e23      	ldrb	r3, [r4, #24]
 8006786:	06da      	lsls	r2, r3, #27
 8006788:	d514      	bpl.n	80067b4 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800678a:	6862      	ldr	r2, [r4, #4]
 800678c:	b192      	cbz	r2, 80067b4 <poll_tcp+0x50>
 800678e:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8006792:	f640 3169 	movw	r1, #2921	; 0xb69
 8006796:	4288      	cmp	r0, r1
 8006798:	d90c      	bls.n	80067b4 <poll_tcp+0x50>
 800679a:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800679e:	2a04      	cmp	r2, #4
 80067a0:	d808      	bhi.n	80067b4 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80067a2:	f023 0310 	bic.w	r3, r3, #16
 80067a6:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80067a8:	6a23      	ldr	r3, [r4, #32]
 80067aa:	b11b      	cbz	r3, 80067b4 <poll_tcp+0x50>
 80067ac:	2200      	movs	r2, #0
 80067ae:	2102      	movs	r1, #2
 80067b0:	4620      	mov	r0, r4
 80067b2:	4798      	blx	r3
}
 80067b4:	2000      	movs	r0, #0
 80067b6:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 80067b8:	2904      	cmp	r1, #4
 80067ba:	d1e3      	bne.n	8006784 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80067bc:	69e2      	ldr	r2, [r4, #28]
 80067be:	b11a      	cbz	r2, 80067c8 <poll_tcp+0x64>
 80067c0:	7a53      	ldrb	r3, [r2, #9]
 80067c2:	b10b      	cbz	r3, 80067c8 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 80067c4:	3b01      	subs	r3, #1
 80067c6:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80067c8:	2101      	movs	r1, #1
 80067ca:	4620      	mov	r0, r4
 80067cc:	f7ff fed6 	bl	800657c <lwip_netconn_do_close_internal>
 80067d0:	e7d8      	b.n	8006784 <poll_tcp+0x20>
 80067d2:	bf00      	nop
 80067d4:	0801ada1 	.word	0x0801ada1
 80067d8:	0801aeda 	.word	0x0801aeda
 80067dc:	0801a72c 	.word	0x0801a72c

080067e0 <sent_tcp>:
{
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80067e4:	4604      	mov	r4, r0
 80067e6:	b970      	cbnz	r0, 8006806 <sent_tcp+0x26>
 80067e8:	4b16      	ldr	r3, [pc, #88]	; (8006844 <sent_tcp+0x64>)
 80067ea:	f240 1293 	movw	r2, #403	; 0x193
 80067ee:	4916      	ldr	r1, [pc, #88]	; (8006848 <sent_tcp+0x68>)
 80067f0:	4816      	ldr	r0, [pc, #88]	; (800684c <sent_tcp+0x6c>)
 80067f2:	f008 fbef 	bl	800efd4 <iprintf>
}
 80067f6:	2000      	movs	r0, #0
 80067f8:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80067fa:	2904      	cmp	r1, #4
 80067fc:	d108      	bne.n	8006810 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80067fe:	2101      	movs	r1, #1
 8006800:	f7ff febc 	bl	800657c <lwip_netconn_do_close_internal>
 8006804:	e004      	b.n	8006810 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8006806:	7841      	ldrb	r1, [r0, #1]
 8006808:	2901      	cmp	r1, #1
 800680a:	d1f6      	bne.n	80067fa <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800680c:	f7ff fd8c 	bl	8006328 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0ef      	beq.n	80067f6 <sent_tcp+0x16>
 8006816:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800681a:	f640 3269 	movw	r2, #2921	; 0xb69
 800681e:	4291      	cmp	r1, r2
 8006820:	d9e9      	bls.n	80067f6 <sent_tcp+0x16>
 8006822:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006826:	2b04      	cmp	r3, #4
 8006828:	d8e5      	bhi.n	80067f6 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800682a:	7e23      	ldrb	r3, [r4, #24]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006832:	6a23      	ldr	r3, [r4, #32]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0de      	beq.n	80067f6 <sent_tcp+0x16>
 8006838:	462a      	mov	r2, r5
 800683a:	2102      	movs	r1, #2
 800683c:	4620      	mov	r0, r4
 800683e:	4798      	blx	r3
  return ERR_OK;
 8006840:	e7d9      	b.n	80067f6 <sent_tcp+0x16>
 8006842:	bf00      	nop
 8006844:	0801ada1 	.word	0x0801ada1
 8006848:	0801aeda 	.word	0x0801aeda
 800684c:	0801a72c 	.word	0x0801a72c

08006850 <recv_tcp>:
{
 8006850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	4606      	mov	r6, r0
 8006856:	4615      	mov	r5, r2
 8006858:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800685a:	460f      	mov	r7, r1
 800685c:	b931      	cbnz	r1, 800686c <recv_tcp+0x1c>
 800685e:	4b29      	ldr	r3, [pc, #164]	; (8006904 <recv_tcp+0xb4>)
 8006860:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006864:	4928      	ldr	r1, [pc, #160]	; (8006908 <recv_tcp+0xb8>)
 8006866:	4829      	ldr	r0, [pc, #164]	; (800690c <recv_tcp+0xbc>)
 8006868:	f008 fbb4 	bl	800efd4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800686c:	bb4e      	cbnz	r6, 80068c2 <recv_tcp+0x72>
 800686e:	4b25      	ldr	r3, [pc, #148]	; (8006904 <recv_tcp+0xb4>)
 8006870:	f240 122d 	movw	r2, #301	; 0x12d
 8006874:	4926      	ldr	r1, [pc, #152]	; (8006910 <recv_tcp+0xc0>)
 8006876:	4825      	ldr	r0, [pc, #148]	; (800690c <recv_tcp+0xbc>)
 8006878:	f008 fbac 	bl	800efd4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800687c:	bb14      	cbnz	r4, 80068c4 <recv_tcp+0x74>
    return ERR_VAL;
 800687e:	f06f 0405 	mvn.w	r4, #5
}
 8006882:	4620      	mov	r0, r4
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8006888:	4638      	mov	r0, r7
 800688a:	8929      	ldrh	r1, [r5, #8]
 800688c:	f004 f986 	bl	800ab9c <tcp_recved>
      pbuf_free(p);
 8006890:	4628      	mov	r0, r5
 8006892:	f003 fd8d 	bl	800a3b0 <pbuf_free>
 8006896:	e7f4      	b.n	8006882 <recv_tcp+0x32>
  if (p != NULL) {
 8006898:	b16d      	cbz	r5, 80068b6 <recv_tcp+0x66>
    len = p->tot_len;
 800689a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800689c:	4629      	mov	r1, r5
 800689e:	4640      	mov	r0, r8
 80068a0:	f007 fdd8 	bl	800e454 <sys_mbox_trypost>
 80068a4:	4604      	mov	r4, r0
 80068a6:	b948      	cbnz	r0, 80068bc <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80068a8:	6a33      	ldr	r3, [r6, #32]
 80068aa:	b343      	cbz	r3, 80068fe <recv_tcp+0xae>
 80068ac:	4601      	mov	r1, r0
 80068ae:	463a      	mov	r2, r7
 80068b0:	4630      	mov	r0, r6
 80068b2:	4798      	blx	r3
 80068b4:	e7e5      	b.n	8006882 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80068b6:	4d17      	ldr	r5, [pc, #92]	; (8006914 <recv_tcp+0xc4>)
    len = 0;
 80068b8:	2700      	movs	r7, #0
 80068ba:	e7ef      	b.n	800689c <recv_tcp+0x4c>
    return ERR_MEM;
 80068bc:	f04f 34ff 	mov.w	r4, #4294967295
 80068c0:	e7df      	b.n	8006882 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80068c2:	b144      	cbz	r4, 80068d6 <recv_tcp+0x86>
 80068c4:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <recv_tcp+0xb4>)
 80068c6:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80068ca:	4913      	ldr	r1, [pc, #76]	; (8006918 <recv_tcp+0xc8>)
 80068cc:	480f      	ldr	r0, [pc, #60]	; (800690c <recv_tcp+0xbc>)
 80068ce:	f008 fb81 	bl	800efd4 <iprintf>
  if (conn == NULL) {
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	d0d3      	beq.n	800687e <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80068d6:	6873      	ldr	r3, [r6, #4]
 80068d8:	42bb      	cmp	r3, r7
 80068da:	d006      	beq.n	80068ea <recv_tcp+0x9a>
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <recv_tcp+0xb4>)
 80068de:	f240 1235 	movw	r2, #309	; 0x135
 80068e2:	490e      	ldr	r1, [pc, #56]	; (800691c <recv_tcp+0xcc>)
 80068e4:	4809      	ldr	r0, [pc, #36]	; (800690c <recv_tcp+0xbc>)
 80068e6:	f008 fb75 	bl	800efd4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80068ea:	f106 0810 	add.w	r8, r6, #16
 80068ee:	4640      	mov	r0, r8
 80068f0:	f007 fded 	bl	800e4ce <sys_mbox_valid>
 80068f4:	4604      	mov	r4, r0
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d1ce      	bne.n	8006898 <recv_tcp+0x48>
    if (p != NULL) {
 80068fa:	2d00      	cmp	r5, #0
 80068fc:	d1c4      	bne.n	8006888 <recv_tcp+0x38>
    return ERR_OK;
 80068fe:	2400      	movs	r4, #0
 8006900:	e7bf      	b.n	8006882 <recv_tcp+0x32>
 8006902:	bf00      	nop
 8006904:	0801ada1 	.word	0x0801ada1
 8006908:	0801b03e 	.word	0x0801b03e
 800690c:	0801a72c 	.word	0x0801a72c
 8006910:	0801b060 	.word	0x0801b060
 8006914:	0801189c 	.word	0x0801189c
 8006918:	0801b07f 	.word	0x0801b07f
 800691c:	0801b097 	.word	0x0801b097

08006920 <err_tcp>:
{
 8006920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006924:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006926:	4604      	mov	r4, r0
 8006928:	b930      	cbnz	r0, 8006938 <err_tcp+0x18>
 800692a:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <err_tcp+0x120>)
 800692c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006930:	4944      	ldr	r1, [pc, #272]	; (8006a44 <err_tcp+0x124>)
 8006932:	4845      	ldr	r0, [pc, #276]	; (8006a48 <err_tcp+0x128>)
 8006934:	f008 fb4e 	bl	800efd4 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8006938:	f007 fe44 	bl	800e5c4 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800693c:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 800693e:	2600      	movs	r6, #0
  old_state = conn->state;
 8006940:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8006942:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8006946:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8006948:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800694a:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 800694c:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800694e:	f007 fe45 	bl	800e5dc <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006952:	6a23      	ldr	r3, [r4, #32]
 8006954:	b11b      	cbz	r3, 800695e <err_tcp+0x3e>
 8006956:	4632      	mov	r2, r6
 8006958:	2104      	movs	r1, #4
 800695a:	4620      	mov	r0, r4
 800695c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800695e:	6a23      	ldr	r3, [r4, #32]
 8006960:	b11b      	cbz	r3, 800696a <err_tcp+0x4a>
 8006962:	2200      	movs	r2, #0
 8006964:	4620      	mov	r0, r4
 8006966:	4611      	mov	r1, r2
 8006968:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800696a:	6a23      	ldr	r3, [r4, #32]
 800696c:	b11b      	cbz	r3, 8006976 <err_tcp+0x56>
 800696e:	2200      	movs	r2, #0
 8006970:	2102      	movs	r1, #2
 8006972:	4620      	mov	r0, r4
 8006974:	4798      	blx	r3
  switch (err) {
 8006976:	f105 030f 	add.w	r3, r5, #15
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d846      	bhi.n	8006a0e <err_tcp+0xee>
 8006980:	4a32      	ldr	r2, [pc, #200]	; (8006a4c <err_tcp+0x12c>)
 8006982:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006986:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006988:	f104 0810 	add.w	r8, r4, #16
 800698c:	4640      	mov	r0, r8
 800698e:	f007 fd9e 	bl	800e4ce <sys_mbox_valid>
 8006992:	b118      	cbz	r0, 800699c <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8006994:	4631      	mov	r1, r6
 8006996:	4640      	mov	r0, r8
 8006998:	f007 fd5c 	bl	800e454 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800699c:	f104 0814 	add.w	r8, r4, #20
 80069a0:	4640      	mov	r0, r8
 80069a2:	f007 fd94 	bl	800e4ce <sys_mbox_valid>
 80069a6:	b118      	cbz	r0, 80069b0 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80069a8:	4631      	mov	r1, r6
 80069aa:	4640      	mov	r0, r8
 80069ac:	f007 fd52 	bl	800e454 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80069b0:	2f01      	cmp	r7, #1
 80069b2:	d002      	beq.n	80069ba <err_tcp+0x9a>
 80069b4:	1efb      	subs	r3, r7, #3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d834      	bhi.n	8006a24 <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80069ba:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80069bc:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 80069c0:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 80069c2:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 80069c4:	d439      	bmi.n	8006a3a <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80069c6:	69e3      	ldr	r3, [r4, #28]
 80069c8:	b933      	cbnz	r3, 80069d8 <err_tcp+0xb8>
 80069ca:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <err_tcp+0x120>)
 80069cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80069d0:	491f      	ldr	r1, [pc, #124]	; (8006a50 <err_tcp+0x130>)
 80069d2:	481d      	ldr	r0, [pc, #116]	; (8006a48 <err_tcp+0x128>)
 80069d4:	f008 fafe 	bl	800efd4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80069d8:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 80069da:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 80069dc:	bf14      	ite	ne
 80069de:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 80069e0:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80069e2:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 80069e4:	bf08      	it	eq
 80069e6:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80069e8:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80069ea:	4628      	mov	r0, r5
 80069ec:	f007 fdaf 	bl	800e54e <sys_sem_valid>
 80069f0:	b930      	cbnz	r0, 8006a00 <err_tcp+0xe0>
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <err_tcp+0x120>)
 80069f4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80069f8:	4916      	ldr	r1, [pc, #88]	; (8006a54 <err_tcp+0x134>)
 80069fa:	4813      	ldr	r0, [pc, #76]	; (8006a48 <err_tcp+0x128>)
 80069fc:	f008 faea 	bl	800efd4 <iprintf>
      conn->current_msg = NULL;
 8006a00:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8006a02:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8006a04:	61e3      	str	r3, [r4, #28]
}
 8006a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8006a0a:	f007 bd9a 	b.w	800e542 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8006a0e:	b13d      	cbz	r5, 8006a20 <err_tcp+0x100>
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <err_tcp+0x120>)
 8006a12:	227d      	movs	r2, #125	; 0x7d
 8006a14:	4910      	ldr	r1, [pc, #64]	; (8006a58 <err_tcp+0x138>)
 8006a16:	2600      	movs	r6, #0
 8006a18:	480b      	ldr	r0, [pc, #44]	; (8006a48 <err_tcp+0x128>)
 8006a1a:	f008 fadb 	bl	800efd4 <iprintf>
 8006a1e:	e7b3      	b.n	8006988 <err_tcp+0x68>
      return NULL;
 8006a20:	462e      	mov	r6, r5
 8006a22:	e7b1      	b.n	8006988 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006a24:	69e3      	ldr	r3, [r4, #28]
 8006a26:	b143      	cbz	r3, 8006a3a <err_tcp+0x11a>
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <err_tcp+0x120>)
 8006a2a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006a2e:	490b      	ldr	r1, [pc, #44]	; (8006a5c <err_tcp+0x13c>)
 8006a30:	4805      	ldr	r0, [pc, #20]	; (8006a48 <err_tcp+0x128>)
}
 8006a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006a36:	f008 bacd 	b.w	800efd4 <iprintf>
}
 8006a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3e:	bf00      	nop
 8006a40:	0801ada1 	.word	0x0801ada1
 8006a44:	0801aeda 	.word	0x0801aeda
 8006a48:	0801a72c 	.word	0x0801a72c
 8006a4c:	0801189c 	.word	0x0801189c
 8006a50:	0801af04 	.word	0x0801af04
 8006a54:	0801b0c5 	.word	0x0801b0c5
 8006a58:	0801b0b5 	.word	0x0801b0b5
 8006a5c:	0801b0de 	.word	0x0801b0de

08006a60 <lwip_netconn_is_err_msg>:
{
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8006a64:	460c      	mov	r4, r1
 8006a66:	b929      	cbnz	r1, 8006a74 <lwip_netconn_is_err_msg+0x14>
 8006a68:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <lwip_netconn_is_err_msg+0x40>)
 8006a6a:	2285      	movs	r2, #133	; 0x85
 8006a6c:	490d      	ldr	r1, [pc, #52]	; (8006aa4 <lwip_netconn_is_err_msg+0x44>)
 8006a6e:	480e      	ldr	r0, [pc, #56]	; (8006aa8 <lwip_netconn_is_err_msg+0x48>)
 8006a70:	f008 fab0 	bl	800efd4 <iprintf>
  if (msg == &netconn_aborted) {
 8006a74:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <lwip_netconn_is_err_msg+0x4c>)
 8006a76:	f103 0210 	add.w	r2, r3, #16
 8006a7a:	4295      	cmp	r5, r2
 8006a7c:	d103      	bne.n	8006a86 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 8006a7e:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8006a80:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8006a82:	7023      	strb	r3, [r4, #0]
}
 8006a84:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8006a86:	f103 0211 	add.w	r2, r3, #17
 8006a8a:	4295      	cmp	r5, r2
 8006a8c:	d101      	bne.n	8006a92 <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 8006a8e:	23f2      	movs	r3, #242	; 0xf2
 8006a90:	e7f6      	b.n	8006a80 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8006a92:	429d      	cmp	r5, r3
 8006a94:	d101      	bne.n	8006a9a <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8006a96:	23f1      	movs	r3, #241	; 0xf1
 8006a98:	e7f2      	b.n	8006a80 <lwip_netconn_is_err_msg+0x20>
  return 0;
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e7f2      	b.n	8006a84 <lwip_netconn_is_err_msg+0x24>
 8006a9e:	bf00      	nop
 8006aa0:	0801ada1 	.word	0x0801ada1
 8006aa4:	0801b0f8 	.word	0x0801b0f8
 8006aa8:	0801a72c 	.word	0x0801a72c
 8006aac:	0801189c 	.word	0x0801189c

08006ab0 <lwip_netconn_do_newconn>:
{
 8006ab0:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8006ab2:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8006ab4:	6805      	ldr	r5, [r0, #0]
{
 8006ab6:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006ab8:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006aba:	6868      	ldr	r0, [r5, #4]
 8006abc:	bb28      	cbnz	r0, 8006b0a <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006abe:	782b      	ldrb	r3, [r5, #0]
 8006ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d014      	beq.n	8006af2 <lwip_netconn_do_newconn+0x42>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d11c      	bne.n	8006b06 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006acc:	f007 fc08 	bl	800e2e0 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8006ad0:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006ad2:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8006ad4:	6850      	ldr	r0, [r2, #4]
 8006ad6:	b150      	cbz	r0, 8006aee <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006ad8:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006ada:	490c      	ldr	r1, [pc, #48]	; (8006b0c <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006adc:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006ade:	bf04      	itt	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006ae4:	f007 fbb6 	bl	800e254 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	b96b      	cbnz	r3, 8006b0a <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 8006aee:	23ff      	movs	r3, #255	; 0xff
 8006af0:	e00a      	b.n	8006b08 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006af2:	f004 feaf 	bl	800b854 <tcp_new_ip_type>
 8006af6:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006af8:	6820      	ldr	r0, [r4, #0]
 8006afa:	6843      	ldr	r3, [r0, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f6      	beq.n	8006aee <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8006b00:	f7ff fbf0 	bl	80062e4 <setup_tcp>
 8006b04:	e7f0      	b.n	8006ae8 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8006b06:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8006b08:	7123      	strb	r3, [r4, #4]
}
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	08006229 	.word	0x08006229

08006b10 <netconn_alloc>:
{
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006b14:	2007      	movs	r0, #7
{
 8006b16:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006b18:	f003 fa14 	bl	8009f44 <memp_malloc>
  if (conn == NULL) {
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	b388      	cbz	r0, 8006b84 <netconn_alloc+0x74>
  conn->type = t;
 8006b20:	7005      	strb	r5, [r0, #0]
 8006b22:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8006b26:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8006b28:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8006b2a:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8006b2c:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8006b2e:	d00e      	beq.n	8006b4e <netconn_alloc+0x3e>
 8006b30:	2d20      	cmp	r5, #32
 8006b32:	d00c      	beq.n	8006b4e <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006b34:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <netconn_alloc+0x78>)
 8006b36:	f240 22e5 	movw	r2, #741	; 0x2e5
 8006b3a:	4914      	ldr	r1, [pc, #80]	; (8006b8c <netconn_alloc+0x7c>)
 8006b3c:	4814      	ldr	r0, [pc, #80]	; (8006b90 <netconn_alloc+0x80>)
 8006b3e:	f008 fa49 	bl	800efd4 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8006b42:	4621      	mov	r1, r4
 8006b44:	2007      	movs	r0, #7
  return NULL;
 8006b46:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8006b48:	f003 fa18 	bl	8009f7c <memp_free>
  return NULL;
 8006b4c:	e01a      	b.n	8006b84 <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006b4e:	f104 0710 	add.w	r7, r4, #16
 8006b52:	2106      	movs	r1, #6
 8006b54:	4638      	mov	r0, r7
 8006b56:	f007 fc63 	bl	800e420 <sys_mbox_new>
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d1f0      	bne.n	8006b42 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006b60:	f104 000c 	add.w	r0, r4, #12
 8006b64:	f007 fcbb 	bl	800e4de <sys_sem_new>
 8006b68:	4605      	mov	r5, r0
 8006b6a:	b118      	cbz	r0, 8006b74 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f007 fc67 	bl	800e440 <sys_mbox_free>
    goto free_and_return;
 8006b72:	e7e6      	b.n	8006b42 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006b74:	f104 0014 	add.w	r0, r4, #20
 8006b78:	f007 fcae 	bl	800e4d8 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8006b7c:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 8006b7e:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8006b80:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 8006b84:	4620      	mov	r0, r4
 8006b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b88:	0801ada1 	.word	0x0801ada1
 8006b8c:	0801b104 	.word	0x0801b104
 8006b90:	0801a72c 	.word	0x0801a72c

08006b94 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006b94:	6843      	ldr	r3, [r0, #4]
{
 8006b96:	b513      	push	{r0, r1, r4, lr}
 8006b98:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006b9a:	b133      	cbz	r3, 8006baa <netconn_free+0x16>
 8006b9c:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <netconn_free+0x64>)
 8006b9e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006ba2:	4916      	ldr	r1, [pc, #88]	; (8006bfc <netconn_free+0x68>)
 8006ba4:	4816      	ldr	r0, [pc, #88]	; (8006c00 <netconn_free+0x6c>)
 8006ba6:	f008 fa15 	bl	800efd4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006baa:	f104 0010 	add.w	r0, r4, #16
 8006bae:	f007 fc8e 	bl	800e4ce <sys_mbox_valid>
 8006bb2:	b130      	cbz	r0, 8006bc2 <netconn_free+0x2e>
 8006bb4:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <netconn_free+0x64>)
 8006bb6:	f240 3223 	movw	r2, #803	; 0x323
 8006bba:	4912      	ldr	r1, [pc, #72]	; (8006c04 <netconn_free+0x70>)
 8006bbc:	4810      	ldr	r0, [pc, #64]	; (8006c00 <netconn_free+0x6c>)
 8006bbe:	f008 fa09 	bl	800efd4 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006bc2:	f104 0014 	add.w	r0, r4, #20
 8006bc6:	f007 fc82 	bl	800e4ce <sys_mbox_valid>
 8006bca:	b130      	cbz	r0, 8006bda <netconn_free+0x46>
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <netconn_free+0x64>)
 8006bce:	f240 3226 	movw	r2, #806	; 0x326
 8006bd2:	490d      	ldr	r1, [pc, #52]	; (8006c08 <netconn_free+0x74>)
 8006bd4:	480a      	ldr	r0, [pc, #40]	; (8006c00 <netconn_free+0x6c>)
 8006bd6:	f008 f9fd 	bl	800efd4 <iprintf>
  sys_sem_free(&conn->op_completed);
 8006bda:	f104 000c 	add.w	r0, r4, #12
 8006bde:	9001      	str	r0, [sp, #4]
 8006be0:	f007 fcb2 	bl	800e548 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006be4:	9801      	ldr	r0, [sp, #4]
 8006be6:	f007 fcb7 	bl	800e558 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8006bea:	4621      	mov	r1, r4
 8006bec:	2007      	movs	r0, #7
}
 8006bee:	b002      	add	sp, #8
 8006bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8006bf4:	f003 b9c2 	b.w	8009f7c <memp_free>
 8006bf8:	0801ada1 	.word	0x0801ada1
 8006bfc:	0801b12a 	.word	0x0801b12a
 8006c00:	0801a72c 	.word	0x0801a72c
 8006c04:	0801b158 	.word	0x0801b158
 8006c08:	0801b192 	.word	0x0801b192

08006c0c <netconn_drain>:
{
 8006c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006c0e:	f100 0510 	add.w	r5, r0, #16
{
 8006c12:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006c14:	4628      	mov	r0, r5
 8006c16:	f007 fc5a 	bl	800e4ce <sys_mbox_valid>
 8006c1a:	b158      	cbz	r0, 8006c34 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006c1c:	a901      	add	r1, sp, #4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f007 fc44 	bl	800e4ac <sys_arch_mbox_tryfetch>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d118      	bne.n	8006c5a <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f007 fc09 	bl	800e440 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f007 fc52 	bl	800e4d8 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006c34:	3414      	adds	r4, #20
 8006c36:	4620      	mov	r0, r4
 8006c38:	f007 fc49 	bl	800e4ce <sys_mbox_valid>
 8006c3c:	b158      	cbz	r0, 8006c56 <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006c3e:	a901      	add	r1, sp, #4
 8006c40:	4620      	mov	r0, r4
 8006c42:	f007 fc33 	bl	800e4ac <sys_arch_mbox_tryfetch>
 8006c46:	3001      	adds	r0, #1
 8006c48:	d11a      	bne.n	8006c80 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f007 fbf8 	bl	800e440 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8006c50:	4620      	mov	r0, r4
 8006c52:	f007 fc41 	bl	800e4d8 <sys_mbox_set_invalid>
}
 8006c56:	b002      	add	sp, #8
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006c5a:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006c5c:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d109      	bne.n	8006c7a <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006c66:	f10d 0103 	add.w	r1, sp, #3
 8006c6a:	f7ff fef9 	bl	8006a60 <lwip_netconn_is_err_msg>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d1d4      	bne.n	8006c1c <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8006c72:	9801      	ldr	r0, [sp, #4]
 8006c74:	f003 fb9c 	bl	800a3b0 <pbuf_free>
 8006c78:	e7d0      	b.n	8006c1c <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 8006c7a:	f000 fa6d 	bl	8007158 <netbuf_delete>
 8006c7e:	e7cd      	b.n	8006c1c <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006c80:	f10d 0103 	add.w	r1, sp, #3
 8006c84:	9801      	ldr	r0, [sp, #4]
 8006c86:	f7ff feeb 	bl	8006a60 <lwip_netconn_is_err_msg>
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d1d6      	bne.n	8006c3e <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8006c90:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7ff ffba 	bl	8006c0c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8006c98:	6868      	ldr	r0, [r5, #4]
 8006c9a:	b110      	cbz	r0, 8006ca2 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8006c9c:	f004 fcf6 	bl	800b68c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8006ca0:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f7ff ff76 	bl	8006b94 <netconn_free>
 8006ca8:	e7c9      	b.n	8006c3e <netconn_drain+0x32>
	...

08006cac <accept_function>:
{
 8006cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cae:	460f      	mov	r7, r1
 8006cb0:	4616      	mov	r6, r2
  if (conn == NULL) {
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	b920      	cbnz	r0, 8006cc0 <accept_function+0x14>
    return ERR_VAL;
 8006cb6:	f06f 0405 	mvn.w	r4, #5
}
 8006cba:	4620      	mov	r0, r4
 8006cbc:	b003      	add	sp, #12
 8006cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8006cc0:	f100 0414 	add.w	r4, r0, #20
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f007 fc02 	bl	800e4ce <sys_mbox_valid>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d0f3      	beq.n	8006cb6 <accept_function+0xa>
  if (newpcb == NULL) {
 8006cce:	b96f      	cbnz	r7, 8006cec <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006cd0:	492f      	ldr	r1, [pc, #188]	; (8006d90 <accept_function+0xe4>)
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f007 fbbe 	bl	800e454 <sys_mbox_trypost>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d1eb      	bne.n	8006cb6 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006cde:	6a2b      	ldr	r3, [r5, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0e8      	beq.n	8006cb6 <accept_function+0xa>
 8006ce4:	4601      	mov	r1, r0
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	4798      	blx	r3
 8006cea:	e7e4      	b.n	8006cb6 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8006cec:	b136      	cbz	r6, 8006cfc <accept_function+0x50>
 8006cee:	4b29      	ldr	r3, [pc, #164]	; (8006d94 <accept_function+0xe8>)
 8006cf0:	f240 222a 	movw	r2, #554	; 0x22a
 8006cf4:	4928      	ldr	r1, [pc, #160]	; (8006d98 <accept_function+0xec>)
 8006cf6:	4829      	ldr	r0, [pc, #164]	; (8006d9c <accept_function+0xf0>)
 8006cf8:	f008 f96c 	bl	800efd4 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8006cfc:	6a29      	ldr	r1, [r5, #32]
 8006cfe:	7828      	ldrb	r0, [r5, #0]
 8006d00:	f7ff ff06 	bl	8006b10 <netconn_alloc>
  if (newconn == NULL) {
 8006d04:	4606      	mov	r6, r0
 8006d06:	b968      	cbnz	r0, 8006d24 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006d08:	4921      	ldr	r1, [pc, #132]	; (8006d90 <accept_function+0xe4>)
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f007 fba2 	bl	800e454 <sys_mbox_trypost>
 8006d10:	4602      	mov	r2, r0
 8006d12:	b920      	cbnz	r0, 8006d1e <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006d14:	6a2b      	ldr	r3, [r5, #32]
 8006d16:	b113      	cbz	r3, 8006d1e <accept_function+0x72>
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4798      	blx	r3
    return ERR_MEM;
 8006d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006d22:	e7ca      	b.n	8006cba <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8006d24:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8006d26:	f7ff fadd 	bl	80062e4 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	f007 fb91 	bl	800e454 <sys_mbox_trypost>
 8006d32:	4604      	mov	r4, r0
 8006d34:	b318      	cbz	r0, 8006d7e <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8006d36:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8006d38:	2100      	movs	r1, #0
 8006d3a:	9001      	str	r0, [sp, #4]
 8006d3c:	f003 ff82 	bl	800ac44 <tcp_arg>
    tcp_recv(pcb, NULL);
 8006d40:	9801      	ldr	r0, [sp, #4]
 8006d42:	2100      	movs	r1, #0
 8006d44:	f003 ff82 	bl	800ac4c <tcp_recv>
    tcp_sent(pcb, NULL);
 8006d48:	9801      	ldr	r0, [sp, #4]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f003 ff96 	bl	800ac7c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8006d50:	2200      	movs	r2, #0
 8006d52:	9801      	ldr	r0, [sp, #4]
 8006d54:	4611      	mov	r1, r2
 8006d56:	f003 ffc5 	bl	800ace4 <tcp_poll>
    tcp_err(pcb, NULL);
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	f003 ffa3 	bl	800aca8 <tcp_err>
    newconn->pcb.tcp = NULL;
 8006d62:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8006d64:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8006d68:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8006d6a:	9001      	str	r0, [sp, #4]
 8006d6c:	f007 fb68 	bl	800e440 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8006d70:	9801      	ldr	r0, [sp, #4]
 8006d72:	f007 fbb1 	bl	800e4d8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8006d76:	4630      	mov	r0, r6
 8006d78:	f7ff ff0c 	bl	8006b94 <netconn_free>
    return ERR_MEM;
 8006d7c:	e7cf      	b.n	8006d1e <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006d7e:	6a2b      	ldr	r3, [r5, #32]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d09a      	beq.n	8006cba <accept_function+0xe>
 8006d84:	4602      	mov	r2, r0
 8006d86:	4601      	mov	r1, r0
 8006d88:	4628      	mov	r0, r5
 8006d8a:	4798      	blx	r3
 8006d8c:	e795      	b.n	8006cba <accept_function+0xe>
 8006d8e:	bf00      	nop
 8006d90:	080118ac 	.word	0x080118ac
 8006d94:	0801ada1 	.word	0x0801ada1
 8006d98:	0801b1ce 	.word	0x0801b1ce
 8006d9c:	0801a72c 	.word	0x0801a72c

08006da0 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8006da0:	6803      	ldr	r3, [r0, #0]
{
 8006da2:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8006da4:	785d      	ldrb	r5, [r3, #1]
{
 8006da6:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8006da8:	b16d      	cbz	r5, 8006dc6 <lwip_netconn_do_delconn+0x26>
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d006      	beq.n	8006dc2 <lwip_netconn_do_delconn+0x22>
 8006db4:	4b37      	ldr	r3, [pc, #220]	; (8006e94 <lwip_netconn_do_delconn+0xf4>)
 8006db6:	f240 425e 	movw	r2, #1118	; 0x45e
 8006dba:	4937      	ldr	r1, [pc, #220]	; (8006e98 <lwip_netconn_do_delconn+0xf8>)
 8006dbc:	4837      	ldr	r0, [pc, #220]	; (8006e9c <lwip_netconn_do_delconn+0xfc>)
 8006dbe:	f008 f909 	bl	800efd4 <iprintf>
  if (((state != NETCONN_NONE) &&
 8006dc2:	2d02      	cmp	r5, #2
 8006dc4:	d121      	bne.n	8006e0a <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 8006dc6:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8006dc8:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8006dca:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8006dcc:	f7ff ff1e 	bl	8006c0c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	6850      	ldr	r0, [r2, #4]
 8006dd4:	b160      	cbz	r0, 8006df0 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006dd6:	7813      	ldrb	r3, [r2, #0]
 8006dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d022      	beq.n	8006e26 <lwip_netconn_do_delconn+0x86>
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d102      	bne.n	8006dea <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 8006de4:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 8006de6:	f007 fa47 	bl	800e278 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	6a03      	ldr	r3, [r0, #32]
 8006df4:	b113      	cbz	r3, 8006dfc <lwip_netconn_do_delconn+0x5c>
 8006df6:	2200      	movs	r2, #0
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	6a03      	ldr	r3, [r0, #32]
 8006e00:	b15b      	cbz	r3, 8006e1a <lwip_netconn_do_delconn+0x7a>
 8006e02:	2200      	movs	r2, #0
 8006e04:	2102      	movs	r1, #2
 8006e06:	4798      	blx	r3
 8006e08:	e007      	b.n	8006e1a <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8006e0a:	2d03      	cmp	r5, #3
 8006e0c:	d103      	bne.n	8006e16 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	7e1b      	ldrb	r3, [r3, #24]
 8006e12:	075b      	lsls	r3, r3, #29
 8006e14:	d4d7      	bmi.n	8006dc6 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8006e16:	23fb      	movs	r3, #251	; 0xfb
 8006e18:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006e1a:	6820      	ldr	r0, [r4, #0]
}
 8006e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006e20:	300c      	adds	r0, #12
 8006e22:	f007 bb94 	b.w	800e54e <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006e26:	69d3      	ldr	r3, [r2, #28]
 8006e28:	b133      	cbz	r3, 8006e38 <lwip_netconn_do_delconn+0x98>
 8006e2a:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <lwip_netconn_do_delconn+0xf4>)
 8006e2c:	f240 4294 	movw	r2, #1172	; 0x494
 8006e30:	491b      	ldr	r1, [pc, #108]	; (8006ea0 <lwip_netconn_do_delconn+0x100>)
 8006e32:	481a      	ldr	r0, [pc, #104]	; (8006e9c <lwip_netconn_do_delconn+0xfc>)
 8006e34:	f008 f8ce 	bl	800efd4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006e3c:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8006e3e:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006e40:	2303      	movs	r3, #3
 8006e42:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8006e44:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006e46:	f7ff fb99 	bl	800657c <lwip_netconn_do_close_internal>
 8006e4a:	b308      	cbz	r0, 8006e90 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d006      	beq.n	8006e62 <lwip_netconn_do_delconn+0xc2>
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <lwip_netconn_do_delconn+0xf4>)
 8006e56:	f240 429a 	movw	r2, #1178	; 0x49a
 8006e5a:	4912      	ldr	r1, [pc, #72]	; (8006ea4 <lwip_netconn_do_delconn+0x104>)
 8006e5c:	480f      	ldr	r0, [pc, #60]	; (8006e9c <lwip_netconn_do_delconn+0xfc>)
 8006e5e:	f008 f8b9 	bl	800efd4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8006e62:	4811      	ldr	r0, [pc, #68]	; (8006ea8 <lwip_netconn_do_delconn+0x108>)
 8006e64:	f007 fb9b 	bl	800e59e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006e68:	6820      	ldr	r0, [r4, #0]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	300c      	adds	r0, #12
 8006e6e:	f007 fb4d 	bl	800e50c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8006e72:	480d      	ldr	r0, [pc, #52]	; (8006ea8 <lwip_netconn_do_delconn+0x108>)
 8006e74:	f007 fb8e 	bl	800e594 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	b143      	cbz	r3, 8006e90 <lwip_netconn_do_delconn+0xf0>
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <lwip_netconn_do_delconn+0xf4>)
 8006e80:	f240 429e 	movw	r2, #1182	; 0x49e
 8006e84:	4907      	ldr	r1, [pc, #28]	; (8006ea4 <lwip_netconn_do_delconn+0x104>)
 8006e86:	4805      	ldr	r0, [pc, #20]	; (8006e9c <lwip_netconn_do_delconn+0xfc>)
}
 8006e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006e8c:	f008 b8a2 	b.w	800efd4 <iprintf>
}
 8006e90:	bd70      	pop	{r4, r5, r6, pc}
 8006e92:	bf00      	nop
 8006e94:	0801ada1 	.word	0x0801ada1
 8006e98:	0801b1f5 	.word	0x0801b1f5
 8006e9c:	0801a72c 	.word	0x0801a72c
 8006ea0:	0801b209 	.word	0x0801b209
 8006ea4:	0801b224 	.word	0x0801b224
 8006ea8:	20006994 	.word	0x20006994

08006eac <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8006eac:	6803      	ldr	r3, [r0, #0]
{
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8006eb2:	6858      	ldr	r0, [r3, #4]
 8006eb4:	b188      	cbz	r0, 8006eda <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ebc:	2b10      	cmp	r3, #16
 8006ebe:	d007      	beq.n	8006ed0 <lwip_netconn_do_bind+0x24>
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d10a      	bne.n	8006eda <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006ec4:	89a2      	ldrh	r2, [r4, #12]
 8006ec6:	68a1      	ldr	r1, [r4, #8]
 8006ec8:	f007 f84a 	bl	800df60 <udp_bind>
  msg->err = err;
 8006ecc:	7120      	strb	r0, [r4, #4]
}
 8006ece:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006ed0:	89a2      	ldrh	r2, [r4, #12]
 8006ed2:	68a1      	ldr	r1, [r4, #8]
 8006ed4:	f003 fd72 	bl	800a9bc <tcp_bind>
        break;
 8006ed8:	e7f8      	b.n	8006ecc <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006eda:	f06f 0005 	mvn.w	r0, #5
 8006ede:	e7f5      	b.n	8006ecc <lwip_netconn_do_bind+0x20>

08006ee0 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8006ee0:	6803      	ldr	r3, [r0, #0]
{
 8006ee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ee4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8006ee6:	6858      	ldr	r0, [r3, #4]
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d04f      	beq.n	8006f8c <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006ef2:	2a10      	cmp	r2, #16
 8006ef4:	d14c      	bne.n	8006f90 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d143      	bne.n	8006f84 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8006efc:	7d03      	ldrb	r3, [r0, #20]
 8006efe:	b11b      	cbz	r3, 8006f08 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8006f00:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 8006f02:	f88d 3007 	strb.w	r3, [sp, #7]
 8006f06:	e031      	b.n	8006f6c <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006f08:	f10d 0207 	add.w	r2, sp, #7
 8006f0c:	21ff      	movs	r1, #255	; 0xff
 8006f0e:	f003 fdab 	bl	800aa68 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8006f12:	4605      	mov	r5, r0
 8006f14:	b350      	cbz	r0, 8006f6c <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	3010      	adds	r0, #16
 8006f1a:	f007 fad8 	bl	800e4ce <sys_mbox_valid>
 8006f1e:	b138      	cbz	r0, 8006f30 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	3010      	adds	r0, #16
 8006f24:	f007 fa8c 	bl	800e440 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	3010      	adds	r0, #16
 8006f2c:	f007 fad4 	bl	800e4d8 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006f30:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8006f32:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006f34:	3014      	adds	r0, #20
            err = ERR_OK;
 8006f36:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006f3a:	f007 fac8 	bl	800e4ce <sys_mbox_valid>
 8006f3e:	b930      	cbnz	r0, 8006f4e <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	2106      	movs	r1, #6
 8006f44:	3014      	adds	r0, #20
 8006f46:	f007 fa6b 	bl	800e420 <sys_mbox_new>
 8006f4a:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8006f4e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8006f52:	b983      	cbnz	r3, 8006f76 <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8006f54:	6821      	ldr	r1, [r4, #0]
 8006f56:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006f58:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8006f5a:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8006f5c:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006f5e:	f003 fe71 	bl	800ac44 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	490b      	ldr	r1, [pc, #44]	; (8006f94 <lwip_netconn_do_listen+0xb4>)
 8006f66:	6858      	ldr	r0, [r3, #4]
 8006f68:	f003 feb6 	bl	800acd8 <tcp_accept>
  msg->err = err;
 8006f6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f70:	7123      	strb	r3, [r4, #4]
}
 8006f72:	b003      	add	sp, #12
 8006f74:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8006f76:	4628      	mov	r0, r5
 8006f78:	f004 fa04 	bl	800b384 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	e7f3      	b.n	8006f6c <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d101      	bne.n	8006f8c <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e7ba      	b.n	8006f02 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8006f8c:	23f5      	movs	r3, #245	; 0xf5
 8006f8e:	e7b8      	b.n	8006f02 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8006f90:	23f0      	movs	r3, #240	; 0xf0
 8006f92:	e7b6      	b.n	8006f02 <lwip_netconn_do_listen+0x22>
 8006f94:	08006cad 	.word	0x08006cad

08006f98 <lwip_netconn_do_recv>:
{
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8006f9a:	2300      	movs	r3, #0
{
 8006f9c:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006f9e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006fa0:	6803      	ldr	r3, [r0, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	b192      	cbz	r2, 8006fcc <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d10d      	bne.n	8006fcc <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8006fb0:	6885      	ldr	r5, [r0, #8]
 8006fb2:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8006fb6:	42bd      	cmp	r5, r7
 8006fb8:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	bf28      	it	cs
 8006fbe:	463e      	movcs	r6, r7
 8006fc0:	6858      	ldr	r0, [r3, #4]
 8006fc2:	b2b1      	uxth	r1, r6
 8006fc4:	f003 fdea 	bl	800ab9c <tcp_recved>
      } while (remaining != 0);
 8006fc8:	1bad      	subs	r5, r5, r6
 8006fca:	d1f4      	bne.n	8006fb6 <lwip_netconn_do_recv+0x1e>
}
 8006fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fd0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8006fd4:	6800      	ldr	r0, [r0, #0]
 8006fd6:	f7fe ffac 	bl	8005f32 <netconn_err>
  if (err == ERR_OK) {
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d14a      	bne.n	8007074 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	781a      	ldrb	r2, [r3, #0]
 8006fe2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006fe6:	2a10      	cmp	r2, #16
 8006fe8:	d142      	bne.n	8007070 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8006fea:	785a      	ldrb	r2, [r3, #1]
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	d143      	bne.n	8007078 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d043      	beq.n	800707e <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	b133      	cbz	r3, 800700c <lwip_netconn_do_write+0x3c>
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <lwip_netconn_do_write+0xb4>)
 8007000:	f240 7223 	movw	r2, #1827	; 0x723
 8007004:	4920      	ldr	r1, [pc, #128]	; (8007088 <lwip_netconn_do_write+0xb8>)
 8007006:	4821      	ldr	r0, [pc, #132]	; (800708c <lwip_netconn_do_write+0xbc>)
 8007008:	f007 ffe4 	bl	800efd4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800700c:	6963      	ldr	r3, [r4, #20]
 800700e:	b933      	cbnz	r3, 800701e <lwip_netconn_do_write+0x4e>
 8007010:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <lwip_netconn_do_write+0xb4>)
 8007012:	f240 7224 	movw	r2, #1828	; 0x724
 8007016:	491e      	ldr	r1, [pc, #120]	; (8007090 <lwip_netconn_do_write+0xc0>)
 8007018:	481c      	ldr	r0, [pc, #112]	; (800708c <lwip_netconn_do_write+0xbc>)
 800701a:	f007 ffdb 	bl	800efd4 <iprintf>
        msg->conn->current_msg = msg;
 800701e:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007020:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8007022:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007024:	f7ff f980 	bl	8006328 <lwip_netconn_do_writemore>
 8007028:	b328      	cbz	r0, 8007076 <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d006      	beq.n	8007040 <lwip_netconn_do_write+0x70>
 8007032:	4b14      	ldr	r3, [pc, #80]	; (8007084 <lwip_netconn_do_write+0xb4>)
 8007034:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8007038:	4916      	ldr	r1, [pc, #88]	; (8007094 <lwip_netconn_do_write+0xc4>)
 800703a:	4814      	ldr	r0, [pc, #80]	; (800708c <lwip_netconn_do_write+0xbc>)
 800703c:	f007 ffca 	bl	800efd4 <iprintf>
          UNLOCK_TCPIP_CORE();
 8007040:	4815      	ldr	r0, [pc, #84]	; (8007098 <lwip_netconn_do_write+0xc8>)
 8007042:	f007 faac 	bl	800e59e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007046:	6820      	ldr	r0, [r4, #0]
 8007048:	2100      	movs	r1, #0
 800704a:	300c      	adds	r0, #12
 800704c:	f007 fa5e 	bl	800e50c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8007050:	4811      	ldr	r0, [pc, #68]	; (8007098 <lwip_netconn_do_write+0xc8>)
 8007052:	f007 fa9f 	bl	800e594 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d10b      	bne.n	8007076 <lwip_netconn_do_write+0xa6>
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <lwip_netconn_do_write+0xb4>)
 8007060:	f240 722c 	movw	r2, #1836	; 0x72c
 8007064:	490b      	ldr	r1, [pc, #44]	; (8007094 <lwip_netconn_do_write+0xc4>)
 8007066:	4809      	ldr	r0, [pc, #36]	; (800708c <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8007068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800706c:	f007 bfb2 	b.w	800efd4 <iprintf>
      err = ERR_VAL;
 8007070:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8007074:	7120      	strb	r0, [r4, #4]
}
 8007076:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8007078:	f06f 0004 	mvn.w	r0, #4
 800707c:	e7fa      	b.n	8007074 <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 800707e:	f06f 000a 	mvn.w	r0, #10
 8007082:	e7f7      	b.n	8007074 <lwip_netconn_do_write+0xa4>
 8007084:	0801ada1 	.word	0x0801ada1
 8007088:	0801b209 	.word	0x0801b209
 800708c:	0801a72c 	.word	0x0801a72c
 8007090:	0801b240 	.word	0x0801b240
 8007094:	0801b224 	.word	0x0801b224
 8007098:	20006994 	.word	0x20006994

0800709c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80070a0:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80070a2:	6843      	ldr	r3, [r0, #4]
 80070a4:	b163      	cbz	r3, 80070c0 <lwip_netconn_do_close+0x24>
 80070a6:	7803      	ldrb	r3, [r0, #0]
 80070a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ac:	2b10      	cmp	r3, #16
 80070ae:	d107      	bne.n	80070c0 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80070b0:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 80070b2:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80070b4:	2a03      	cmp	r2, #3
 80070b6:	d001      	beq.n	80070bc <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d001      	beq.n	80070c0 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d102      	bne.n	80070c6 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80070c0:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80070c2:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80070c4:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 80070ca:	23fb      	movs	r3, #251	; 0xfb
 80070cc:	e7f9      	b.n	80070c2 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80070ce:	07d3      	lsls	r3, r2, #31
 80070d0:	d501      	bpl.n	80070d6 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 80070d2:	f7ff fd9b 	bl	8006c0c <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	b133      	cbz	r3, 80070ea <lwip_netconn_do_close+0x4e>
 80070dc:	4b19      	ldr	r3, [pc, #100]	; (8007144 <lwip_netconn_do_close+0xa8>)
 80070de:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80070e2:	4919      	ldr	r1, [pc, #100]	; (8007148 <lwip_netconn_do_close+0xac>)
 80070e4:	4819      	ldr	r0, [pc, #100]	; (800714c <lwip_netconn_do_close+0xb0>)
 80070e6:	f007 ff75 	bl	800efd4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80070ea:	6820      	ldr	r0, [r4, #0]
 80070ec:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80070ee:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 80070f0:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 80070f2:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80070f4:	f7ff fa42 	bl	800657c <lwip_netconn_do_close_internal>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d0e3      	beq.n	80070c4 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	785b      	ldrb	r3, [r3, #1]
 8007100:	2b04      	cmp	r3, #4
 8007102:	d006      	beq.n	8007112 <lwip_netconn_do_close+0x76>
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <lwip_netconn_do_close+0xa8>)
 8007106:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800710a:	4911      	ldr	r1, [pc, #68]	; (8007150 <lwip_netconn_do_close+0xb4>)
 800710c:	480f      	ldr	r0, [pc, #60]	; (800714c <lwip_netconn_do_close+0xb0>)
 800710e:	f007 ff61 	bl	800efd4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8007112:	4810      	ldr	r0, [pc, #64]	; (8007154 <lwip_netconn_do_close+0xb8>)
 8007114:	f007 fa43 	bl	800e59e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	2100      	movs	r1, #0
 800711c:	300c      	adds	r0, #12
 800711e:	f007 f9f5 	bl	800e50c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007122:	480c      	ldr	r0, [pc, #48]	; (8007154 <lwip_netconn_do_close+0xb8>)
 8007124:	f007 fa36 	bl	800e594 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0c9      	beq.n	80070c4 <lwip_netconn_do_close+0x28>
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <lwip_netconn_do_close+0xa8>)
 8007132:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007136:	4906      	ldr	r1, [pc, #24]	; (8007150 <lwip_netconn_do_close+0xb4>)
 8007138:	4804      	ldr	r0, [pc, #16]	; (800714c <lwip_netconn_do_close+0xb0>)
}
 800713a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800713e:	f007 bf49 	b.w	800efd4 <iprintf>
 8007142:	bf00      	nop
 8007144:	0801ada1 	.word	0x0801ada1
 8007148:	0801b209 	.word	0x0801b209
 800714c:	0801a72c 	.word	0x0801a72c
 8007150:	0801b224 	.word	0x0801b224
 8007154:	20006994 	.word	0x20006994

08007158 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007158:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800715a:	4604      	mov	r4, r0
 800715c:	b160      	cbz	r0, 8007178 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	b120      	cbz	r0, 800716c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8007162:	f003 f925 	bl	800a3b0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800716c:	4621      	mov	r1, r4
 800716e:	2006      	movs	r0, #6
  }
}
 8007170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8007174:	f002 bf02 	b.w	8009f7c <memp_free>
}
 8007178:	bd10      	pop	{r4, pc}
	...

0800717c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800717c:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800717e:	b940      	cbnz	r0, 8007192 <netbuf_data+0x16>
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <netbuf_data+0x44>)
 8007182:	22c6      	movs	r2, #198	; 0xc6
 8007184:	490f      	ldr	r1, [pc, #60]	; (80071c4 <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8007186:	4810      	ldr	r0, [pc, #64]	; (80071c8 <netbuf_data+0x4c>)
 8007188:	f007 ff24 	bl	800efd4 <iprintf>
 800718c:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8007190:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007192:	b919      	cbnz	r1, 800719c <netbuf_data+0x20>
 8007194:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <netbuf_data+0x44>)
 8007196:	22c7      	movs	r2, #199	; 0xc7
 8007198:	490c      	ldr	r1, [pc, #48]	; (80071cc <netbuf_data+0x50>)
 800719a:	e7f4      	b.n	8007186 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800719c:	b91a      	cbnz	r2, 80071a6 <netbuf_data+0x2a>
 800719e:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <netbuf_data+0x44>)
 80071a0:	22c8      	movs	r2, #200	; 0xc8
 80071a2:	490b      	ldr	r1, [pc, #44]	; (80071d0 <netbuf_data+0x54>)
 80071a4:	e7ef      	b.n	8007186 <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 80071a6:	6843      	ldr	r3, [r0, #4]
 80071a8:	b133      	cbz	r3, 80071b8 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 80071ae:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 80071b0:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 80071b2:	895b      	ldrh	r3, [r3, #10]
 80071b4:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80071b6:	e7eb      	b.n	8007190 <netbuf_data+0x14>
    return ERR_BUF;
 80071b8:	f06f 0001 	mvn.w	r0, #1
 80071bc:	e7e8      	b.n	8007190 <netbuf_data+0x14>
 80071be:	bf00      	nop
 80071c0:	0801b269 	.word	0x0801b269
 80071c4:	0801b36e 	.word	0x0801b36e
 80071c8:	0801a72c 	.word	0x0801a72c
 80071cc:	0801b387 	.word	0x0801b387
 80071d0:	0801b3a4 	.word	0x0801b3a4

080071d4 <tcpip_thread>:
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80071d4:	4c2c      	ldr	r4, [pc, #176]	; (8007288 <tcpip_thread+0xb4>)
{
 80071d6:	b583      	push	{r0, r1, r7, lr}
  LOCK_TCPIP_CORE();
 80071d8:	4620      	mov	r0, r4
 80071da:	f007 f9db 	bl	800e594 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	b10b      	cbz	r3, 80071e6 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 80071e2:	68a0      	ldr	r0, [r4, #8]
 80071e4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80071e6:	4d28      	ldr	r5, [pc, #160]	; (8007288 <tcpip_thread+0xb4>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80071e8:	4e28      	ldr	r6, [pc, #160]	; (800728c <tcpip_thread+0xb8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80071ea:	f105 070c 	add.w	r7, r5, #12
  sleeptime = sys_timeouts_sleeptime();
 80071ee:	f006 fdc1 	bl	800dd74 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80071f2:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80071f4:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80071f6:	d113      	bne.n	8007220 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 80071f8:	4628      	mov	r0, r5
 80071fa:	f007 f9d0 	bl	800e59e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80071fe:	2200      	movs	r2, #0
 8007200:	a901      	add	r1, sp, #4
 8007202:	4638      	mov	r0, r7
 8007204:	f007 f930 	bl	800e468 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007208:	4628      	mov	r0, r5
 800720a:	f007 f9c3 	bl	800e594 <sys_mutex_lock>
    if (msg == NULL) {
 800720e:	9c01      	ldr	r4, [sp, #4]
 8007210:	b9cc      	cbnz	r4, 8007246 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007212:	4633      	mov	r3, r6
 8007214:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007216:	491e      	ldr	r1, [pc, #120]	; (8007290 <tcpip_thread+0xbc>)
 8007218:	481e      	ldr	r0, [pc, #120]	; (8007294 <tcpip_thread+0xc0>)
 800721a:	f007 fedb 	bl	800efd4 <iprintf>
      break;
 800721e:	e7e6      	b.n	80071ee <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8007220:	b910      	cbnz	r0, 8007228 <tcpip_thread+0x54>
    sys_check_timeouts();
 8007222:	f006 fd8b 	bl	800dd3c <sys_check_timeouts>
    goto again;
 8007226:	e7e2      	b.n	80071ee <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8007228:	4628      	mov	r0, r5
 800722a:	f007 f9b8 	bl	800e59e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800722e:	4622      	mov	r2, r4
 8007230:	a901      	add	r1, sp, #4
 8007232:	4638      	mov	r0, r7
 8007234:	f007 f918 	bl	800e468 <sys_arch_mbox_fetch>
 8007238:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800723a:	4628      	mov	r0, r5
 800723c:	f007 f9aa 	bl	800e594 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007240:	3401      	adds	r4, #1
 8007242:	d0ee      	beq.n	8007222 <tcpip_thread+0x4e>
 8007244:	e7e3      	b.n	800720e <tcpip_thread+0x3a>
  switch (msg->type) {
 8007246:	7823      	ldrb	r3, [r4, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d00f      	beq.n	800726c <tcpip_thread+0x98>
 800724c:	2b02      	cmp	r3, #2
 800724e:	d013      	beq.n	8007278 <tcpip_thread+0xa4>
 8007250:	b9b3      	cbnz	r3, 8007280 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007252:	6860      	ldr	r0, [r4, #4]
 8007254:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8007258:	4798      	blx	r3
 800725a:	b110      	cbz	r0, 8007262 <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 800725c:	6860      	ldr	r0, [r4, #4]
 800725e:	f003 f8a7 	bl	800a3b0 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007262:	4621      	mov	r1, r4
 8007264:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007266:	f002 fe89 	bl	8009f7c <memp_free>
      break;
 800726a:	e7c0      	b.n	80071ee <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800726c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8007270:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007272:	4621      	mov	r1, r4
 8007274:	2008      	movs	r0, #8
 8007276:	e7f6      	b.n	8007266 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007278:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800727c:	4798      	blx	r3
      break;
 800727e:	e7b6      	b.n	80071ee <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007280:	4633      	mov	r3, r6
 8007282:	22cf      	movs	r2, #207	; 0xcf
 8007284:	e7c7      	b.n	8007216 <tcpip_thread+0x42>
 8007286:	bf00      	nop
 8007288:	20006994 	.word	0x20006994
 800728c:	0801b3f0 	.word	0x0801b3f0
 8007290:	0801b44f 	.word	0x0801b44f
 8007294:	0801a72c 	.word	0x0801a72c

08007298 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800729c:	4810      	ldr	r0, [pc, #64]	; (80072e0 <tcpip_inpkt+0x48>)
{
 800729e:	460e      	mov	r6, r1
 80072a0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80072a2:	f007 f914 	bl	800e4ce <sys_mbox_valid>
 80072a6:	b928      	cbnz	r0, 80072b4 <tcpip_inpkt+0x1c>
 80072a8:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <tcpip_inpkt+0x4c>)
 80072aa:	22fc      	movs	r2, #252	; 0xfc
 80072ac:	490e      	ldr	r1, [pc, #56]	; (80072e8 <tcpip_inpkt+0x50>)
 80072ae:	480f      	ldr	r0, [pc, #60]	; (80072ec <tcpip_inpkt+0x54>)
 80072b0:	f007 fe90 	bl	800efd4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80072b4:	2009      	movs	r0, #9
 80072b6:	f002 fe45 	bl	8009f44 <memp_malloc>
  if (msg == NULL) {
 80072ba:	4604      	mov	r4, r0
 80072bc:	b168      	cbz	r0, 80072da <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80072be:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80072c0:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80072c2:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80072c4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80072c6:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80072ca:	4805      	ldr	r0, [pc, #20]	; (80072e0 <tcpip_inpkt+0x48>)
 80072cc:	f007 f8c2 	bl	800e454 <sys_mbox_trypost>
 80072d0:	b128      	cbz	r0, 80072de <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80072d2:	4621      	mov	r1, r4
 80072d4:	2009      	movs	r0, #9
 80072d6:	f002 fe51 	bl	8009f7c <memp_free>
    return ERR_MEM;
 80072da:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	200069a0 	.word	0x200069a0
 80072e4:	0801b3f0 	.word	0x0801b3f0
 80072e8:	0801b46d 	.word	0x0801b46d
 80072ec:	0801a72c 	.word	0x0801a72c

080072f0 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80072f0:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80072f4:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80072f8:	bf14      	ite	ne
 80072fa:	4a02      	ldrne	r2, [pc, #8]	; (8007304 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80072fc:	4a02      	ldreq	r2, [pc, #8]	; (8007308 <tcpip_input+0x18>)
 80072fe:	f7ff bfcb 	b.w	8007298 <tcpip_inpkt>
 8007302:	bf00      	nop
 8007304:	0800e311 	.word	0x0800e311
 8007308:	08008e79 	.word	0x08008e79

0800730c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800730c:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800730e:	4e06      	ldr	r6, [pc, #24]	; (8007328 <tcpip_send_msg_wait_sem+0x1c>)
{
 8007310:	460d      	mov	r5, r1
 8007312:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007314:	4630      	mov	r0, r6
 8007316:	f007 f93d 	bl	800e594 <sys_mutex_lock>
  fn(apimsg);
 800731a:	4628      	mov	r0, r5
 800731c:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800731e:	4630      	mov	r0, r6
 8007320:	f007 f93d 	bl	800e59e <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8007324:	2000      	movs	r0, #0
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	20006994 	.word	0x20006994

0800732c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800732c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800732e:	4605      	mov	r5, r0
 8007330:	460c      	mov	r4, r1
  lwip_init();
 8007332:	f002 fb3b 	bl	80099ac <lwip_init>

  tcpip_init_done = initfunc;
 8007336:	4812      	ldr	r0, [pc, #72]	; (8007380 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007338:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800733a:	e9c0 5401 	strd	r5, r4, [r0, #4]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800733e:	300c      	adds	r0, #12
 8007340:	f007 f86e 	bl	800e420 <sys_mbox_new>
 8007344:	b130      	cbz	r0, 8007354 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <tcpip_init+0x58>)
 8007348:	f240 2261 	movw	r2, #609	; 0x261
 800734c:	490e      	ldr	r1, [pc, #56]	; (8007388 <tcpip_init+0x5c>)
 800734e:	480f      	ldr	r0, [pc, #60]	; (800738c <tcpip_init+0x60>)
 8007350:	f007 fe40 	bl	800efd4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007354:	480a      	ldr	r0, [pc, #40]	; (8007380 <tcpip_init+0x54>)
 8007356:	f007 f90f 	bl	800e578 <sys_mutex_new>
 800735a:	b130      	cbz	r0, 800736a <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <tcpip_init+0x58>)
 800735e:	f240 2265 	movw	r2, #613	; 0x265
 8007362:	490b      	ldr	r1, [pc, #44]	; (8007390 <tcpip_init+0x64>)
 8007364:	4809      	ldr	r0, [pc, #36]	; (800738c <tcpip_init+0x60>)
 8007366:	f007 fe35 	bl	800efd4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800736a:	2302      	movs	r3, #2
 800736c:	2200      	movs	r2, #0
 800736e:	4909      	ldr	r1, [pc, #36]	; (8007394 <tcpip_init+0x68>)
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007376:	4808      	ldr	r0, [pc, #32]	; (8007398 <tcpip_init+0x6c>)
 8007378:	f007 f914 	bl	800e5a4 <sys_thread_new>
}
 800737c:	b003      	add	sp, #12
 800737e:	bd30      	pop	{r4, r5, pc}
 8007380:	20006994 	.word	0x20006994
 8007384:	0801b3f0 	.word	0x0801b3f0
 8007388:	0801b47a 	.word	0x0801b47a
 800738c:	0801a72c 	.word	0x0801a72c
 8007390:	0801b49d 	.word	0x0801b49d
 8007394:	080071d5 	.word	0x080071d5
 8007398:	0801b4be 	.word	0x0801b4be

0800739c <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800739c:	7943      	ldrb	r3, [r0, #5]
 800739e:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80073a0:	bf1f      	itttt	ne
 80073a2:	2300      	movne	r3, #0
    dhcp->state = new_state;
 80073a4:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 80073a6:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 80073a8:	8103      	strhne	r3, [r0, #8]
  }
}
 80073aa:	4770      	bx	lr

080073ac <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80073ae:	1c87      	adds	r7, r0, #2
{
 80073b0:	4604      	mov	r4, r0
 80073b2:	460d      	mov	r5, r1
 80073b4:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80073b6:	2f44      	cmp	r7, #68	; 0x44
 80073b8:	d906      	bls.n	80073c8 <dhcp_option_short+0x1c>
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <dhcp_option_short+0x2c>)
 80073bc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80073c0:	4906      	ldr	r1, [pc, #24]	; (80073dc <dhcp_option_short+0x30>)
 80073c2:	4807      	ldr	r0, [pc, #28]	; (80073e0 <dhcp_option_short+0x34>)
 80073c4:	f007 fe06 	bl	800efd4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80073c8:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 80073ca:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80073cc:	552b      	strb	r3, [r5, r4]
 80073ce:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80073d0:	b2a4      	uxth	r4, r4
 80073d2:	552e      	strb	r6, [r5, r4]
}
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d6:	bf00      	nop
 80073d8:	0801b4c5 	.word	0x0801b4c5
 80073dc:	0801b529 	.word	0x0801b529
 80073e0:	0801a72c 	.word	0x0801a72c

080073e4 <dhcp_option>:
{
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80073e8:	3302      	adds	r3, #2
{
 80073ea:	4604      	mov	r4, r0
 80073ec:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80073ee:	fa50 f383 	uxtab	r3, r0, r3
{
 80073f2:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80073f4:	2b44      	cmp	r3, #68	; 0x44
 80073f6:	d906      	bls.n	8007406 <dhcp_option+0x22>
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <dhcp_option+0x30>)
 80073fa:	f240 529a 	movw	r2, #1434	; 0x59a
 80073fe:	4906      	ldr	r1, [pc, #24]	; (8007418 <dhcp_option+0x34>)
 8007400:	4806      	ldr	r0, [pc, #24]	; (800741c <dhcp_option+0x38>)
 8007402:	f007 fde7 	bl	800efd4 <iprintf>
  options[options_out_len++] = option_type;
 8007406:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8007408:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 800740a:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800740c:	b29b      	uxth	r3, r3
}
 800740e:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8007410:	54ee      	strb	r6, [r5, r3]
}
 8007412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007414:	0801b4c5 	.word	0x0801b4c5
 8007418:	0801b564 	.word	0x0801b564
 800741c:	0801a72c 	.word	0x0801a72c

08007420 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8007420:	2843      	cmp	r0, #67	; 0x43
{
 8007422:	b570      	push	{r4, r5, r6, lr}
 8007424:	4604      	mov	r4, r0
 8007426:	460d      	mov	r5, r1
 8007428:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800742a:	d906      	bls.n	800743a <dhcp_option_byte+0x1a>
 800742c:	4b05      	ldr	r3, [pc, #20]	; (8007444 <dhcp_option_byte+0x24>)
 800742e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8007432:	4905      	ldr	r1, [pc, #20]	; (8007448 <dhcp_option_byte+0x28>)
 8007434:	4805      	ldr	r0, [pc, #20]	; (800744c <dhcp_option_byte+0x2c>)
 8007436:	f007 fdcd 	bl	800efd4 <iprintf>
  options[options_out_len++] = value;
 800743a:	1c60      	adds	r0, r4, #1
 800743c:	552e      	strb	r6, [r5, r4]
}
 800743e:	b280      	uxth	r0, r0
 8007440:	bd70      	pop	{r4, r5, r6, pc}
 8007442:	bf00      	nop
 8007444:	0801b4c5 	.word	0x0801b4c5
 8007448:	0801b5a6 	.word	0x0801b5a6
 800744c:	0801a72c 	.word	0x0801a72c

08007450 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8007452:	1d07      	adds	r7, r0, #4
{
 8007454:	4604      	mov	r4, r0
 8007456:	460d      	mov	r5, r1
 8007458:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800745a:	2f44      	cmp	r7, #68	; 0x44
 800745c:	d906      	bls.n	800746c <dhcp_option_long+0x1c>
 800745e:	4b0b      	ldr	r3, [pc, #44]	; (800748c <dhcp_option_long+0x3c>)
 8007460:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007464:	490a      	ldr	r1, [pc, #40]	; (8007490 <dhcp_option_long+0x40>)
 8007466:	480b      	ldr	r0, [pc, #44]	; (8007494 <dhcp_option_long+0x44>)
 8007468:	f007 fdb4 	bl	800efd4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800746c:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800746e:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8007470:	552b      	strb	r3, [r5, r4]
 8007472:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8007474:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8007476:	b29b      	uxth	r3, r3
 8007478:	54ea      	strb	r2, [r5, r3]
 800747a:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800747c:	3403      	adds	r4, #3
 800747e:	0a32      	lsrs	r2, r6, #8
 8007480:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8007482:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8007484:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8007486:	552e      	strb	r6, [r5, r4]
}
 8007488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748a:	bf00      	nop
 800748c:	0801b4c5 	.word	0x0801b4c5
 8007490:	0801b5db 	.word	0x0801b5db
 8007494:	0801a72c 	.word	0x0801a72c

08007498 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8007498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800749c:	460e      	mov	r6, r1
 800749e:	4690      	mov	r8, r2
 80074a0:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80074a2:	4605      	mov	r5, r0
 80074a4:	b958      	cbnz	r0, 80074be <dhcp_create_msg+0x26>
 80074a6:	462f      	mov	r7, r5
 80074a8:	4b3f      	ldr	r3, [pc, #252]	; (80075a8 <dhcp_create_msg+0x110>)
 80074aa:	f240 7269 	movw	r2, #1897	; 0x769
 80074ae:	493f      	ldr	r1, [pc, #252]	; (80075ac <dhcp_create_msg+0x114>)
 80074b0:	483f      	ldr	r0, [pc, #252]	; (80075b0 <dhcp_create_msg+0x118>)
 80074b2:	f007 fd8f 	bl	800efd4 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 80074b6:	4638      	mov	r0, r7
 80074b8:	b003      	add	sp, #12
 80074ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80074be:	b941      	cbnz	r1, 80074d2 <dhcp_create_msg+0x3a>
 80074c0:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <dhcp_create_msg+0x110>)
 80074c2:	f240 726a 	movw	r2, #1898	; 0x76a
 80074c6:	493b      	ldr	r1, [pc, #236]	; (80075b4 <dhcp_create_msg+0x11c>)
 80074c8:	4637      	mov	r7, r6
 80074ca:	4839      	ldr	r0, [pc, #228]	; (80075b0 <dhcp_create_msg+0x118>)
 80074cc:	f007 fd82 	bl	800efd4 <iprintf>
 80074d0:	e7f1      	b.n	80074b6 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80074d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80074d6:	f44f 719a 	mov.w	r1, #308	; 0x134
 80074da:	2036      	movs	r0, #54	; 0x36
 80074dc:	f002 ffd0 	bl	800a480 <pbuf_alloc>
  if (p_out == NULL) {
 80074e0:	4607      	mov	r7, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d0e7      	beq.n	80074b6 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80074e6:	8943      	ldrh	r3, [r0, #10]
 80074e8:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80074ec:	d206      	bcs.n	80074fc <dhcp_create_msg+0x64>
 80074ee:	4b2e      	ldr	r3, [pc, #184]	; (80075a8 <dhcp_create_msg+0x110>)
 80074f0:	f240 7271 	movw	r2, #1905	; 0x771
 80074f4:	4930      	ldr	r1, [pc, #192]	; (80075b8 <dhcp_create_msg+0x120>)
 80074f6:	482e      	ldr	r0, [pc, #184]	; (80075b0 <dhcp_create_msg+0x118>)
 80074f8:	f007 fd6c 	bl	800efd4 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80074fc:	f1b8 0f03 	cmp.w	r8, #3
 8007500:	d102      	bne.n	8007508 <dhcp_create_msg+0x70>
 8007502:	7973      	ldrb	r3, [r6, #5]
 8007504:	2b03      	cmp	r3, #3
 8007506:	d107      	bne.n	8007518 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8007508:	79b3      	ldrb	r3, [r6, #6]
 800750a:	4c2c      	ldr	r4, [pc, #176]	; (80075bc <dhcp_create_msg+0x124>)
 800750c:	b913      	cbnz	r3, 8007514 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 800750e:	f007 fd79 	bl	800f004 <rand>
 8007512:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8007518:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800751a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800751e:	2100      	movs	r1, #0
 8007520:	4620      	mov	r0, r4
 8007522:	f007 f8e5 	bl	800e6f0 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8007526:	2301      	movs	r3, #1
 8007528:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800752a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800752c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007530:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8007532:	6830      	ldr	r0, [r6, #0]
 8007534:	f002 f9e9 	bl	800990a <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8007538:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 800753c:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800753e:	d00a      	beq.n	8007556 <dhcp_create_msg+0xbe>
 8007540:	f1a8 0307 	sub.w	r3, r8, #7
 8007544:	2b01      	cmp	r3, #1
 8007546:	d906      	bls.n	8007556 <dhcp_create_msg+0xbe>
 8007548:	f1b8 0f03 	cmp.w	r8, #3
 800754c:	d105      	bne.n	800755a <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800754e:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8007550:	3b04      	subs	r3, #4
 8007552:	2b01      	cmp	r3, #1
 8007554:	d801      	bhi.n	800755a <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8007556:	686b      	ldr	r3, [r5, #4]
 8007558:	60e3      	str	r3, [r4, #12]
 800755a:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 800755e:	f104 021c 	add.w	r2, r4, #28
 8007562:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 8007564:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007568:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 800756a:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800756e:	d1f9      	bne.n	8007564 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007570:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8007574:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007576:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 800757a:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800757c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8007580:	2253      	movs	r2, #83	; 0x53
 8007582:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8007586:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800758a:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800758c:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007590:	2301      	movs	r3, #1
 8007592:	9101      	str	r1, [sp, #4]
 8007594:	f7ff ff26 	bl	80073e4 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8007598:	4642      	mov	r2, r8
 800759a:	9901      	ldr	r1, [sp, #4]
 800759c:	f7ff ff40 	bl	8007420 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 80075a0:	f8a9 0000 	strh.w	r0, [r9]
 80075a4:	e787      	b.n	80074b6 <dhcp_create_msg+0x1e>
 80075a6:	bf00      	nop
 80075a8:	0801b4c5 	.word	0x0801b4c5
 80075ac:	0801b615 	.word	0x0801b615
 80075b0:	0801a72c 	.word	0x0801a72c
 80075b4:	0801b634 	.word	0x0801b634
 80075b8:	0801b652 	.word	0x0801b652
 80075bc:	200069a4 	.word	0x200069a4

080075c0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	4604      	mov	r4, r0
  options[options_out_len++] = DHCP_OPTION_END;
 80075c4:	23ff      	movs	r3, #255	; 0xff
{
 80075c6:	4608      	mov	r0, r1
 80075c8:	4617      	mov	r7, r2
  options[options_out_len++] = DHCP_OPTION_END;
 80075ca:	1c66      	adds	r6, r4, #1
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80075cc:	f1c4 0543 	rsb	r5, r4, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80075d0:	550b      	strb	r3, [r1, r4]
    options[options_out_len++] = 0;
 80075d2:	2100      	movs	r1, #0
  options[options_out_len++] = DHCP_OPTION_END;
 80075d4:	b2b6      	uxth	r6, r6
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80075d6:	34f1      	adds	r4, #241	; 0xf1
    options[options_out_len++] = 0;
 80075d8:	b2ad      	uxth	r5, r5
 80075da:	2e44      	cmp	r6, #68	; 0x44
 80075dc:	4430      	add	r0, r6
 80075de:	bf94      	ite	ls
 80075e0:	462a      	movls	r2, r5
 80075e2:	2200      	movhi	r2, #0
 80075e4:	f007 f884 	bl	800e6f0 <memset>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80075e8:	2e44      	cmp	r6, #68	; 0x44
 80075ea:	4638      	mov	r0, r7
 80075ec:	bf94      	ite	ls
 80075ee:	4629      	movls	r1, r5
 80075f0:	2100      	movhi	r1, #0
 80075f2:	4421      	add	r1, r4
}
 80075f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80075f8:	b289      	uxth	r1, r1
 80075fa:	f002 bfbd 	b.w	800a578 <pbuf_realloc>
	...

08007600 <dhcp_discover>:
{
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8007604:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007606:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007608:	b086      	sub	sp, #24
 800760a:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800760c:	2106      	movs	r1, #6
 800760e:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8007610:	61e3      	str	r3, [r4, #28]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8007612:	2201      	movs	r2, #1
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8007614:	f7ff fec2 	bl	800739c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8007618:	f10d 0316 	add.w	r3, sp, #22
 800761c:	4621      	mov	r1, r4
 800761e:	4630      	mov	r0, r6
 8007620:	f7ff ff3a 	bl	8007498 <dhcp_create_msg>
  if (p_out != NULL) {
 8007624:	4605      	mov	r5, r0
 8007626:	2800      	cmp	r0, #0
 8007628:	d039      	beq.n	800769e <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800762a:	6841      	ldr	r1, [r0, #4]
 800762c:	2302      	movs	r3, #2
 800762e:	2239      	movs	r2, #57	; 0x39
 8007630:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007634:	31f0      	adds	r1, #240	; 0xf0
 8007636:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80076ec <dhcp_discover+0xec>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800763a:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800763c:	9103      	str	r1, [sp, #12]
 800763e:	f7ff fed1 	bl	80073e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007642:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8007644:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007646:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800764a:	f7ff feaf 	bl	80073ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800764e:	9903      	ldr	r1, [sp, #12]
 8007650:	2303      	movs	r3, #3
 8007652:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007654:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007658:	f7ff fec4 	bl	80073e4 <dhcp_option>
 800765c:	9903      	ldr	r1, [sp, #12]
 800765e:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007662:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007664:	f818 2b01 	ldrb.w	r2, [r8], #1
 8007668:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800766c:	9103      	str	r1, [sp, #12]
 800766e:	f7ff fed7 	bl	8007420 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007672:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8007676:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007678:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800767c:	d1f1      	bne.n	8007662 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800767e:	462a      	mov	r2, r5
 8007680:	f7ff ff9e 	bl	80075c0 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <dhcp_discover+0xe0>)
 8007686:	4817      	ldr	r0, [pc, #92]	; (80076e4 <dhcp_discover+0xe4>)
 8007688:	4629      	mov	r1, r5
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <dhcp_discover+0xe8>)
 800768c:	e9cd 6300 	strd	r6, r3, [sp]
 8007690:	2343      	movs	r3, #67	; 0x43
 8007692:	6840      	ldr	r0, [r0, #4]
 8007694:	f006 fcca 	bl	800e02c <udp_sendto_if_src>
    pbuf_free(p_out);
 8007698:	4628      	mov	r0, r5
 800769a:	f002 fe89 	bl	800a3b0 <pbuf_free>
  if (dhcp->tries < 255) {
 800769e:	79a3      	ldrb	r3, [r4, #6]
}
 80076a0:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 80076a2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80076a4:	bf1c      	itt	ne
 80076a6:	3301      	addne	r3, #1
 80076a8:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80076aa:	79a2      	ldrb	r2, [r4, #6]
 80076ac:	2a05      	cmp	r2, #5
 80076ae:	bf97      	itett	ls
 80076b0:	2301      	movls	r3, #1
 80076b2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80076b6:	4093      	lslls	r3, r2
 80076b8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80076bc:	bf98      	it	ls
 80076be:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80076c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80076c6:	bf9c      	itt	ls
 80076c8:	00db      	lslls	r3, r3, #3
 80076ca:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80076cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d6:	8123      	strh	r3, [r4, #8]
}
 80076d8:	b006      	add	sp, #24
 80076da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076de:	bf00      	nop
 80076e0:	080118b8 	.word	0x080118b8
 80076e4:	200069a4 	.word	0x200069a4
 80076e8:	080118b4 	.word	0x080118b4
 80076ec:	080118ae 	.word	0x080118ae

080076f0 <dhcp_check>:
{
 80076f0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80076f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 80076f4:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80076f6:	2108      	movs	r1, #8
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80076f8:	2200      	movs	r2, #0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80076fa:	4620      	mov	r0, r4
 80076fc:	f7ff fe4e 	bl	800739c <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8007700:	f104 011c 	add.w	r1, r4, #28
 8007704:	4628      	mov	r0, r5
 8007706:	f001 f94f 	bl	80089a8 <etharp_query>
  if (dhcp->tries < 255) {
 800770a:	79a3      	ldrb	r3, [r4, #6]
 800770c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800770e:	bf1c      	itt	ne
 8007710:	3301      	addne	r3, #1
 8007712:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007714:	2301      	movs	r3, #1
 8007716:	8123      	strh	r3, [r4, #8]
}
 8007718:	bd38      	pop	{r3, r4, r5, pc}
	...

0800771c <dhcp_bind>:
{
 800771c:	b513      	push	{r0, r1, r4, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800771e:	4604      	mov	r4, r0
 8007720:	b948      	cbnz	r0, 8007736 <dhcp_bind+0x1a>
 8007722:	4b3e      	ldr	r3, [pc, #248]	; (800781c <dhcp_bind+0x100>)
 8007724:	f240 4215 	movw	r2, #1045	; 0x415
 8007728:	493d      	ldr	r1, [pc, #244]	; (8007820 <dhcp_bind+0x104>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800772a:	483e      	ldr	r0, [pc, #248]	; (8007824 <dhcp_bind+0x108>)
}
 800772c:	b002      	add	sp, #8
 800772e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8007732:	f007 bc4f 	b.w	800efd4 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8007736:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8007738:	b920      	cbnz	r0, 8007744 <dhcp_bind+0x28>
 800773a:	4b38      	ldr	r3, [pc, #224]	; (800781c <dhcp_bind+0x100>)
 800773c:	f240 4217 	movw	r2, #1047	; 0x417
 8007740:	4939      	ldr	r1, [pc, #228]	; (8007828 <dhcp_bind+0x10c>)
 8007742:	e7f2      	b.n	800772a <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8007748:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	d00c      	beq.n	8007768 <dhcp_bind+0x4c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800774e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8007750:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007754:	bf36      	itet	cc
 8007756:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8007758:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800775c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 8007760:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 8007762:	2b00      	cmp	r3, #0
 8007764:	d043      	beq.n	80077ee <dhcp_bind+0xd2>
    dhcp->t0_timeout = (u16_t)timeout;
 8007766:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8007768:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800776a:	1c59      	adds	r1, r3, #1
 800776c:	d00e      	beq.n	800778c <dhcp_bind+0x70>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800776e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8007770:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007774:	bf36      	itet	cc
 8007776:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8007778:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800777c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8007780:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8007782:	2b00      	cmp	r3, #0
 8007784:	d036      	beq.n	80077f4 <dhcp_bind+0xd8>
    dhcp->t1_timeout = (u16_t)timeout;
 8007786:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8007788:	8943      	ldrh	r3, [r0, #10]
 800778a:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800778c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	d00d      	beq.n	80077ae <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007792:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8007794:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007798:	bf36      	itet	cc
 800779a:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 800779c:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80077a0:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 80077a4:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 80077a6:	b343      	cbz	r3, 80077fa <dhcp_bind+0xde>
    dhcp->t2_timeout = (u16_t)timeout;
 80077a8:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80077aa:	8983      	ldrh	r3, [r0, #12]
 80077ac:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80077ae:	8983      	ldrh	r3, [r0, #12]
 80077b0:	8942      	ldrh	r2, [r0, #10]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d302      	bcc.n	80077bc <dhcp_bind+0xa0>
 80077b6:	b10b      	cbz	r3, 80077bc <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 80077bc:	79c3      	ldrb	r3, [r0, #7]
 80077be:	b1fb      	cbz	r3, 8007800 <dhcp_bind+0xe4>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80077c0:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80077c2:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80077c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077c6:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80077c8:	b92b      	cbnz	r3, 80077d6 <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80077ca:	69c3      	ldr	r3, [r0, #28]
 80077cc:	9a00      	ldr	r2, [sp, #0]
 80077ce:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80077d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077d4:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80077d6:	210a      	movs	r1, #10
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80077d8:	466a      	mov	r2, sp
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80077da:	f7ff fddf 	bl	800739c <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80077de:	f100 011c 	add.w	r1, r0, #28
 80077e2:	ab01      	add	r3, sp, #4
 80077e4:	4620      	mov	r0, r4
 80077e6:	f002 fc31 	bl	800a04c <netif_set_addr>
}
 80077ea:	b002      	add	sp, #8
 80077ec:	bd10      	pop	{r4, pc}
      dhcp->t0_timeout = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	8283      	strh	r3, [r0, #20]
 80077f2:	e7b9      	b.n	8007768 <dhcp_bind+0x4c>
      dhcp->t1_timeout = 1;
 80077f4:	2301      	movs	r3, #1
 80077f6:	8143      	strh	r3, [r0, #10]
 80077f8:	e7c6      	b.n	8007788 <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 80077fa:	2301      	movs	r3, #1
 80077fc:	8183      	strh	r3, [r0, #12]
 80077fe:	e7d4      	b.n	80077aa <dhcp_bind+0x8e>
    if (first_octet <= 127) {
 8007800:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8007804:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 8007806:	2a00      	cmp	r2, #0
 8007808:	db01      	blt.n	800780e <dhcp_bind+0xf2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800780a:	23ff      	movs	r3, #255	; 0xff
 800780c:	e7d9      	b.n	80077c2 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 800780e:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8007810:	bf8c      	ite	hi
 8007812:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8007816:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800781a:	e7d2      	b.n	80077c2 <dhcp_bind+0xa6>
 800781c:	0801b4c5 	.word	0x0801b4c5
 8007820:	0801b692 	.word	0x0801b692
 8007824:	0801a72c 	.word	0x0801a72c
 8007828:	0801b6ab 	.word	0x0801b6ab

0800782c <dhcp_inc_pcb_refcount>:
{
 800782c:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 800782e:	4c14      	ldr	r4, [pc, #80]	; (8007880 <dhcp_inc_pcb_refcount+0x54>)
 8007830:	7a23      	ldrb	r3, [r4, #8]
 8007832:	b9eb      	cbnz	r3, 8007870 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	b12b      	cbz	r3, 8007844 <dhcp_inc_pcb_refcount+0x18>
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <dhcp_inc_pcb_refcount+0x58>)
 800783a:	22e5      	movs	r2, #229	; 0xe5
 800783c:	4912      	ldr	r1, [pc, #72]	; (8007888 <dhcp_inc_pcb_refcount+0x5c>)
 800783e:	4813      	ldr	r0, [pc, #76]	; (800788c <dhcp_inc_pcb_refcount+0x60>)
 8007840:	f007 fbc8 	bl	800efd4 <iprintf>
    dhcp_pcb = udp_new();
 8007844:	f006 fd3e 	bl	800e2c4 <udp_new>
 8007848:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 800784a:	b1b0      	cbz	r0, 800787a <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800784c:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800784e:	4910      	ldr	r1, [pc, #64]	; (8007890 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007850:	f042 0220 	orr.w	r2, r2, #32
 8007854:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8007856:	2244      	movs	r2, #68	; 0x44
 8007858:	f006 fb82 	bl	800df60 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800785c:	2243      	movs	r2, #67	; 0x43
 800785e:	490c      	ldr	r1, [pc, #48]	; (8007890 <dhcp_inc_pcb_refcount+0x64>)
 8007860:	6860      	ldr	r0, [r4, #4]
 8007862:	f006 fcbb 	bl	800e1dc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8007866:	2200      	movs	r2, #0
 8007868:	490a      	ldr	r1, [pc, #40]	; (8007894 <dhcp_inc_pcb_refcount+0x68>)
 800786a:	6860      	ldr	r0, [r4, #4]
 800786c:	f006 fcf2 	bl	800e254 <udp_recv>
  dhcp_pcb_refcount++;
 8007870:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 8007872:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8007874:	3301      	adds	r3, #1
 8007876:	7223      	strb	r3, [r4, #8]
}
 8007878:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	e7fb      	b.n	8007878 <dhcp_inc_pcb_refcount+0x4c>
 8007880:	200069a4 	.word	0x200069a4
 8007884:	0801b4c5 	.word	0x0801b4c5
 8007888:	0801b6c3 	.word	0x0801b6c3
 800788c:	0801a72c 	.word	0x0801a72c
 8007890:	080118b8 	.word	0x080118b8
 8007894:	08007b95 	.word	0x08007b95

08007898 <dhcp_dec_pcb_refcount>:
{
 8007898:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800789a:	4d09      	ldr	r5, [pc, #36]	; (80078c0 <dhcp_dec_pcb_refcount+0x28>)
 800789c:	7a2b      	ldrb	r3, [r5, #8]
 800789e:	b92b      	cbnz	r3, 80078ac <dhcp_dec_pcb_refcount+0x14>
 80078a0:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <dhcp_dec_pcb_refcount+0x2c>)
 80078a2:	22ff      	movs	r2, #255	; 0xff
 80078a4:	4908      	ldr	r1, [pc, #32]	; (80078c8 <dhcp_dec_pcb_refcount+0x30>)
 80078a6:	4809      	ldr	r0, [pc, #36]	; (80078cc <dhcp_dec_pcb_refcount+0x34>)
 80078a8:	f007 fb94 	bl	800efd4 <iprintf>
  dhcp_pcb_refcount--;
 80078ac:	7a2c      	ldrb	r4, [r5, #8]
 80078ae:	3c01      	subs	r4, #1
 80078b0:	b2e4      	uxtb	r4, r4
 80078b2:	722c      	strb	r4, [r5, #8]
  if (dhcp_pcb_refcount == 0) {
 80078b4:	b91c      	cbnz	r4, 80078be <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 80078b6:	6868      	ldr	r0, [r5, #4]
 80078b8:	f006 fcde 	bl	800e278 <udp_remove>
    dhcp_pcb = NULL;
 80078bc:	606c      	str	r4, [r5, #4]
}
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	200069a4 	.word	0x200069a4
 80078c4:	0801b4c5 	.word	0x0801b4c5
 80078c8:	0801b6e8 	.word	0x0801b6e8
 80078cc:	0801a72c 	.word	0x0801a72c

080078d0 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 80078d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80078d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
dhcp_reboot(struct netif *netif)
 80078d6:	b085      	sub	sp, #20
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80078d8:	2103      	movs	r1, #3
dhcp_reboot(struct netif *netif)
 80078da:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80078dc:	4620      	mov	r0, r4
 80078de:	f7ff fd5d 	bl	800739c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80078e2:	460a      	mov	r2, r1
 80078e4:	f10d 030e 	add.w	r3, sp, #14
 80078e8:	4621      	mov	r1, r4
 80078ea:	4638      	mov	r0, r7
 80078ec:	f7ff fdd4 	bl	8007498 <dhcp_create_msg>
  if (p_out != NULL) {
 80078f0:	4606      	mov	r6, r0
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d04b      	beq.n	800798e <dhcp_reboot.isra.0+0xbe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80078f6:	6845      	ldr	r5, [r0, #4]
 80078f8:	2302      	movs	r3, #2
 80078fa:	2239      	movs	r2, #57	; 0x39
 80078fc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007900:	35f0      	adds	r5, #240	; 0xf0
 8007902:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80079d0 <dhcp_reboot.isra.0+0x100>
 8007906:	4629      	mov	r1, r5
 8007908:	f7ff fd6c 	bl	80073e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800790c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007910:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007912:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8007916:	f7ff fd49 	bl	80073ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800791a:	2304      	movs	r3, #4
 800791c:	2232      	movs	r2, #50	; 0x32
 800791e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8007920:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007924:	f7ff fd5e 	bl	80073e4 <dhcp_option>
 8007928:	4680      	mov	r8, r0
 800792a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800792e:	69e0      	ldr	r0, [r4, #28]
 8007930:	f001 ffeb 	bl	800990a <lwip_htonl>
 8007934:	4629      	mov	r1, r5
 8007936:	4602      	mov	r2, r0
 8007938:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800793a:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800793e:	f7ff fd87 	bl	8007450 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007942:	2303      	movs	r3, #3
 8007944:	2237      	movs	r2, #55	; 0x37
 8007946:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007948:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800794c:	f7ff fd4a 	bl	80073e4 <dhcp_option>
 8007950:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007954:	f108 38ff 	add.w	r8, r8, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007958:	f819 2b01 	ldrb.w	r2, [r9], #1
 800795c:	4629      	mov	r1, r5
 800795e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007962:	f7ff fd5d 	bl	8007420 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007966:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800796a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800796e:	d1f1      	bne.n	8007954 <dhcp_reboot.isra.0+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007970:	4632      	mov	r2, r6
 8007972:	4629      	mov	r1, r5
 8007974:	f7ff fe24 	bl	80075c0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007978:	4813      	ldr	r0, [pc, #76]	; (80079c8 <dhcp_reboot.isra.0+0xf8>)
 800797a:	9700      	str	r7, [sp, #0]
 800797c:	2343      	movs	r3, #67	; 0x43
 800797e:	4a13      	ldr	r2, [pc, #76]	; (80079cc <dhcp_reboot.isra.0+0xfc>)
 8007980:	4631      	mov	r1, r6
 8007982:	6840      	ldr	r0, [r0, #4]
 8007984:	f006 fbea 	bl	800e15c <udp_sendto_if>
    pbuf_free(p_out);
 8007988:	4630      	mov	r0, r6
 800798a:	f002 fd11 	bl	800a3b0 <pbuf_free>
  if (dhcp->tries < 255) {
 800798e:	79a3      	ldrb	r3, [r4, #6]
 8007990:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007992:	bf1c      	itt	ne
 8007994:	3301      	addne	r3, #1
 8007996:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8007998:	79a3      	ldrb	r3, [r4, #6]
 800799a:	2b09      	cmp	r3, #9
 800799c:	bf96      	itet	ls
 800799e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80079a2:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80079a6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80079aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80079ae:	bf9c      	itt	ls
 80079b0:	00db      	lslls	r3, r3, #3
 80079b2:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80079b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80079be:	8123      	strh	r3, [r4, #8]
}
 80079c0:	b005      	add	sp, #20
 80079c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079c6:	bf00      	nop
 80079c8:	200069a4 	.word	0x200069a4
 80079cc:	080118b4 	.word	0x080118b4
 80079d0:	080118ae 	.word	0x080118ae

080079d4 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80079d4:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80079d6:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80079d8:	4d14      	ldr	r5, [pc, #80]	; (8007a2c <dhcp_handle_ack.isra.0+0x58>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80079da:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80079dc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80079e0:	7b2b      	ldrb	r3, [r5, #12]
 80079e2:	b10b      	cbz	r3, 80079e8 <dhcp_handle_ack.isra.0+0x14>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80079e4:	6a2b      	ldr	r3, [r5, #32]
 80079e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80079e8:	7b6b      	ldrb	r3, [r5, #13]
 80079ea:	b1b3      	cbz	r3, 8007a1a <dhcp_handle_ack.isra.0+0x46>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80079ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80079f0:	7bab      	ldrb	r3, [r5, #14]
 80079f2:	b1ab      	cbz	r3, 8007a20 <dhcp_handle_ack.isra.0+0x4c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80079f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80079f6:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80079f8:	690b      	ldr	r3, [r1, #16]
 80079fa:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80079fc:	7beb      	ldrb	r3, [r5, #15]
 80079fe:	b123      	cbz	r3, 8007a0a <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8007a00:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007a02:	f001 ff82 	bl	800990a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8007a06:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8007a08:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 8007a0a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8007a0c:	7c2b      	ldrb	r3, [r5, #16]
 8007a0e:	b11b      	cbz	r3, 8007a18 <dhcp_handle_ack.isra.0+0x44>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8007a10:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007a12:	f001 ff7a 	bl	800990a <lwip_htonl>
 8007a16:	6260      	str	r0, [r4, #36]	; 0x24
}
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8007a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a1c:	085b      	lsrs	r3, r3, #1
 8007a1e:	e7e6      	b.n	80079ee <dhcp_handle_ack.isra.0+0x1a>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8007a20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007a26:	08db      	lsrs	r3, r3, #3
 8007a28:	e7e5      	b.n	80079f6 <dhcp_handle_ack.isra.0+0x22>
 8007a2a:	bf00      	nop
 8007a2c:	200069a4 	.word	0x200069a4

08007a30 <dhcp_select.isra.0>:
dhcp_select(struct netif *netif)
 8007a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8007a34:	4607      	mov	r7, r0
dhcp_select(struct netif *netif)
 8007a36:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8007a38:	b948      	cbnz	r0, 8007a4e <dhcp_select.isra.0+0x1e>
 8007a3a:	4b4e      	ldr	r3, [pc, #312]	; (8007b74 <dhcp_select.isra.0+0x144>)
 8007a3c:	f240 1277 	movw	r2, #375	; 0x177
 8007a40:	494d      	ldr	r1, [pc, #308]	; (8007b78 <dhcp_select.isra.0+0x148>)
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8007a42:	484e      	ldr	r0, [pc, #312]	; (8007b7c <dhcp_select.isra.0+0x14c>)
}
 8007a44:	b005      	add	sp, #20
 8007a46:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8007a4a:	f007 bac3 	b.w	800efd4 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8007a4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8007a50:	b924      	cbnz	r4, 8007a5c <dhcp_select.isra.0+0x2c>
 8007a52:	4b48      	ldr	r3, [pc, #288]	; (8007b74 <dhcp_select.isra.0+0x144>)
 8007a54:	f240 1279 	movw	r2, #377	; 0x179
 8007a58:	4949      	ldr	r1, [pc, #292]	; (8007b80 <dhcp_select.isra.0+0x150>)
 8007a5a:	e7f2      	b.n	8007a42 <dhcp_select.isra.0+0x12>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f7ff fc9c 	bl	800739c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007a64:	2203      	movs	r2, #3
 8007a66:	f10d 030e 	add.w	r3, sp, #14
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff fd13 	bl	8007498 <dhcp_create_msg>
  if (p_out != NULL) {
 8007a72:	4606      	mov	r6, r0
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d05e      	beq.n	8007b36 <dhcp_select.isra.0+0x106>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007a78:	6845      	ldr	r5, [r0, #4]
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	2239      	movs	r2, #57	; 0x39
 8007a7e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007a82:	35f0      	adds	r5, #240	; 0xf0
 8007a84:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007b90 <dhcp_select.isra.0+0x160>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7ff fcab 	bl	80073e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007a8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a90:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007a92:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007a96:	f7ff fc89 	bl	80073ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	2232      	movs	r2, #50	; 0x32
 8007a9e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007aa0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007aa4:	f7ff fc9e 	bl	80073e4 <dhcp_option>
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007aae:	69e0      	ldr	r0, [r4, #28]
 8007ab0:	f001 ff2b 	bl	800990a <lwip_htonl>
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	4640      	mov	r0, r8
 8007aba:	f7ff fcc9 	bl	8007450 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8007abe:	2304      	movs	r3, #4
 8007ac0:	2236      	movs	r2, #54	; 0x36
 8007ac2:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007ac4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8007ac8:	f7ff fc8c 	bl	80073e4 <dhcp_option>
 8007acc:	4680      	mov	r8, r0
 8007ace:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8007ad2:	69a0      	ldr	r0, [r4, #24]
 8007ad4:	f001 ff19 	bl	800990a <lwip_htonl>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4602      	mov	r2, r0
 8007adc:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007ade:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8007ae2:	f7ff fcb5 	bl	8007450 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	2237      	movs	r2, #55	; 0x37
 8007aea:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8007aec:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007af0:	f7ff fc78 	bl	80073e4 <dhcp_option>
 8007af4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007af8:	f108 38ff 	add.w	r8, r8, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007afc:	f819 2b01 	ldrb.w	r2, [r9], #1
 8007b00:	4629      	mov	r1, r5
 8007b02:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007b06:	f7ff fc8b 	bl	8007420 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007b0a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007b0e:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007b12:	d1f1      	bne.n	8007af8 <dhcp_select.isra.0+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007b14:	4632      	mov	r2, r6
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7ff fd52 	bl	80075c0 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007b1c:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <dhcp_select.isra.0+0x154>)
 8007b1e:	481a      	ldr	r0, [pc, #104]	; (8007b88 <dhcp_select.isra.0+0x158>)
 8007b20:	4631      	mov	r1, r6
 8007b22:	4a1a      	ldr	r2, [pc, #104]	; (8007b8c <dhcp_select.isra.0+0x15c>)
 8007b24:	e9cd 7300 	strd	r7, r3, [sp]
 8007b28:	2343      	movs	r3, #67	; 0x43
 8007b2a:	6840      	ldr	r0, [r0, #4]
 8007b2c:	f006 fa7e 	bl	800e02c <udp_sendto_if_src>
    pbuf_free(p_out);
 8007b30:	4630      	mov	r0, r6
 8007b32:	f002 fc3d 	bl	800a3b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8007b36:	79a3      	ldrb	r3, [r4, #6]
 8007b38:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007b3a:	bf1c      	itt	ne
 8007b3c:	3301      	addne	r3, #1
 8007b3e:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8007b40:	79a2      	ldrb	r2, [r4, #6]
 8007b42:	2a05      	cmp	r2, #5
 8007b44:	bf97      	itett	ls
 8007b46:	2301      	movls	r3, #1
 8007b48:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8007b4c:	4093      	lslls	r3, r2
 8007b4e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8007b52:	bf98      	it	ls
 8007b54:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007b58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8007b5c:	bf9c      	itt	ls
 8007b5e:	00db      	lslls	r3, r3, #3
 8007b60:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007b62:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b6c:	8123      	strh	r3, [r4, #8]
}
 8007b6e:	b005      	add	sp, #20
 8007b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b74:	0801b4c5 	.word	0x0801b4c5
 8007b78:	0801b70c 	.word	0x0801b70c
 8007b7c:	0801a72c 	.word	0x0801a72c
 8007b80:	0801b727 	.word	0x0801b727
 8007b84:	080118b8 	.word	0x080118b8
 8007b88:	200069a4 	.word	0x200069a4
 8007b8c:	080118b4 	.word	0x080118b4
 8007b90:	080118ae 	.word	0x080118ae

08007b94 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8007b94:	4ba1      	ldr	r3, [pc, #644]	; (8007e1c <dhcp_recv+0x288>)
{
 8007b96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8007b9a:	685e      	ldr	r6, [r3, #4]
{
 8007b9c:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007b9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
{
 8007ba0:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007ba2:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d03c      	beq.n	8007c22 <dhcp_recv+0x8e>
 8007ba8:	791b      	ldrb	r3, [r3, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d039      	beq.n	8007c22 <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8007bae:	8953      	ldrh	r3, [r2, #10]
 8007bb0:	2b2b      	cmp	r3, #43	; 0x2b
 8007bb2:	d936      	bls.n	8007c22 <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8007bb4:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8007bb6:	7813      	ldrb	r3, [r2, #0]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d132      	bne.n	8007c22 <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007bbc:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
 8007bc0:	f106 002a 	add.w	r0, r6, #42	; 0x2a
 8007bc4:	f102 011c 	add.w	r1, r2, #28
 8007bc8:	2300      	movs	r3, #0
 8007bca:	b2dd      	uxtb	r5, r3
 8007bcc:	42ac      	cmp	r4, r5
 8007bce:	d901      	bls.n	8007bd4 <dhcp_recv+0x40>
 8007bd0:	2b06      	cmp	r3, #6
 8007bd2:	d11f      	bne.n	8007c14 <dhcp_recv+0x80>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8007bd4:	6850      	ldr	r0, [r2, #4]
 8007bd6:	f001 fe98 	bl	800990a <lwip_htonl>
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4298      	cmp	r0, r3
 8007be0:	d11f      	bne.n	8007c22 <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
 8007be2:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8007e44 <dhcp_recv+0x2b0>
 8007be6:	2300      	movs	r3, #0
  if (p->len < DHCP_SNAME_OFS) {
 8007be8:	9a01      	ldr	r2, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8007bea:	f8c9 300d 	str.w	r3, [r9, #13]
  if (p->len < DHCP_SNAME_OFS) {
 8007bee:	8952      	ldrh	r2, [r2, #10]
  dhcp_clear_all_options(dhcp);
 8007bf0:	f8c9 3009 	str.w	r3, [r9, #9]
  if (p->len < DHCP_SNAME_OFS) {
 8007bf4:	2a2b      	cmp	r2, #43	; 0x2b
 8007bf6:	d914      	bls.n	8007c22 <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
 8007bf8:	9a01      	ldr	r2, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 8007bfa:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 8007bfe:	9303      	str	r3, [sp, #12]
  options_idx_max = p->tot_len;
 8007c00:	f8b2 a008 	ldrh.w	sl, [r2, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8007c04:	9f01      	ldr	r7, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8007c06:	897b      	ldrh	r3, [r7, #10]
 8007c08:	455b      	cmp	r3, fp
 8007c0a:	d910      	bls.n	8007c2e <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	465c      	mov	r4, fp
 8007c10:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8007c12:	e0db      	b.n	8007dcc <dhcp_recv+0x238>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8007c14:	f810 7b01 	ldrb.w	r7, [r0], #1
 8007c18:	3301      	adds	r3, #1
 8007c1a:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007c1e:	42af      	cmp	r7, r5
 8007c20:	d0d3      	beq.n	8007bca <dhcp_recv+0x36>
  pbuf_free(p);
 8007c22:	9801      	ldr	r0, [sp, #4]
}
 8007c24:	b009      	add	sp, #36	; 0x24
 8007c26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007c2a:	f002 bbc1 	b.w	800a3b0 <pbuf_free>
    options_idx = (u16_t)(options_idx - q->len);
 8007c2e:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8007c32:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8007c36:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8007c38:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8007c3c:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	d1e0      	bne.n	8007c06 <dhcp_recv+0x72>
 8007c44:	e7ed      	b.n	8007c22 <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
 8007c46:	1ca3      	adds	r3, r4, #2
 8007c48:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 8007c4a:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 8007c4c:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 8007c4e:	d3e8      	bcc.n	8007c22 <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
 8007c50:	1c60      	adds	r0, r4, #1
 8007c52:	897b      	ldrh	r3, [r7, #10]
 8007c54:	4298      	cmp	r0, r3
 8007c56:	da16      	bge.n	8007c86 <dhcp_recv+0xf2>
      len = options[offset + 1];
 8007c58:	9b05      	ldr	r3, [sp, #20]
 8007c5a:	4423      	add	r3, r4
 8007c5c:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8007c5e:	2a3b      	cmp	r2, #59	; 0x3b
 8007c60:	d854      	bhi.n	8007d0c <dhcp_recv+0x178>
 8007c62:	2a32      	cmp	r2, #50	; 0x32
 8007c64:	f200 8186 	bhi.w	8007f74 <dhcp_recv+0x3e0>
 8007c68:	2a01      	cmp	r2, #1
 8007c6a:	d013      	beq.n	8007c94 <dhcp_recv+0x100>
 8007c6c:	2a03      	cmp	r2, #3
 8007c6e:	d14d      	bne.n	8007d0c <dhcp_recv+0x178>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	f200 816c 	bhi.w	8007f4e <dhcp_recv+0x3ba>
 8007c76:	4b6a      	ldr	r3, [pc, #424]	; (8007e20 <dhcp_recv+0x28c>)
 8007c78:	f240 6233 	movw	r2, #1587	; 0x633
 8007c7c:	4969      	ldr	r1, [pc, #420]	; (8007e24 <dhcp_recv+0x290>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007c7e:	486a      	ldr	r0, [pc, #424]	; (8007e28 <dhcp_recv+0x294>)
 8007c80:	f007 f9a8 	bl	800efd4 <iprintf>
 8007c84:	e7cd      	b.n	8007c22 <dhcp_recv+0x8e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8136 	beq.w	8007efa <dhcp_recv+0x366>
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	e7e4      	b.n	8007c5e <dhcp_recv+0xca>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	f000 8157 	beq.w	8007f48 <dhcp_recv+0x3b4>
 8007c9a:	4b61      	ldr	r3, [pc, #388]	; (8007e20 <dhcp_recv+0x28c>)
 8007c9c:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007ca0:	4962      	ldr	r1, [pc, #392]	; (8007e2c <dhcp_recv+0x298>)
 8007ca2:	e7ec      	b.n	8007c7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	f000 8156 	beq.w	8007f56 <dhcp_recv+0x3c2>
 8007caa:	4b5d      	ldr	r3, [pc, #372]	; (8007e20 <dhcp_recv+0x28c>)
 8007cac:	f240 6241 	movw	r2, #1601	; 0x641
 8007cb0:	e7f6      	b.n	8007ca0 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d004      	beq.n	8007cc0 <dhcp_recv+0x12c>
 8007cb6:	4b5a      	ldr	r3, [pc, #360]	; (8007e20 <dhcp_recv+0x28c>)
 8007cb8:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8007cbc:	495c      	ldr	r1, [pc, #368]	; (8007e30 <dhcp_recv+0x29c>)
 8007cbe:	e7de      	b.n	8007c7e <dhcp_recv+0xea>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8007cc0:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8007cc4:	f000 814a 	beq.w	8007f5c <dhcp_recv+0x3c8>
 8007cc8:	4b55      	ldr	r3, [pc, #340]	; (8007e20 <dhcp_recv+0x28c>)
 8007cca:	f240 6251 	movw	r2, #1617	; 0x651
 8007cce:	4959      	ldr	r1, [pc, #356]	; (8007e34 <dhcp_recv+0x2a0>)
 8007cd0:	e7d5      	b.n	8007c7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	f000 8148 	beq.w	8007f68 <dhcp_recv+0x3d4>
 8007cd8:	4b51      	ldr	r3, [pc, #324]	; (8007e20 <dhcp_recv+0x28c>)
 8007cda:	f240 6255 	movw	r2, #1621	; 0x655
 8007cde:	e7ed      	b.n	8007cbc <dhcp_recv+0x128>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	f000 813e 	beq.w	8007f62 <dhcp_recv+0x3ce>
 8007ce6:	4b4e      	ldr	r3, [pc, #312]	; (8007e20 <dhcp_recv+0x28c>)
 8007ce8:	f240 6259 	movw	r2, #1625	; 0x659
 8007cec:	e7d8      	b.n	8007ca0 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	f000 813a 	beq.w	8007f68 <dhcp_recv+0x3d4>
 8007cf4:	4b4a      	ldr	r3, [pc, #296]	; (8007e20 <dhcp_recv+0x28c>)
 8007cf6:	f240 625d 	movw	r2, #1629	; 0x65d
 8007cfa:	e7d1      	b.n	8007ca0 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	f000 8136 	beq.w	8007f6e <dhcp_recv+0x3da>
 8007d02:	4b47      	ldr	r3, [pc, #284]	; (8007e20 <dhcp_recv+0x28c>)
 8007d04:	f240 6261 	movw	r2, #1633	; 0x661
 8007d08:	e7ca      	b.n	8007ca0 <dhcp_recv+0x10c>
    switch (op) {
 8007d0a:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 8007d0c:	b9a2      	cbnz	r2, 8007d38 <dhcp_recv+0x1a4>
      offset++;
 8007d0e:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 8007d10:	897b      	ldrh	r3, [r7, #10]
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	d85a      	bhi.n	8007dcc <dhcp_recv+0x238>
      offset = (u16_t)(offset - q->len);
 8007d16:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8007d18:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8007d1c:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8007d1e:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8007d22:	4554      	cmp	r4, sl
 8007d24:	f4bf af7d 	bcs.w	8007c22 <dhcp_recv+0x8e>
        q = q->next;
 8007d28:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8007d2a:	2f00      	cmp	r7, #0
 8007d2c:	d14c      	bne.n	8007dc8 <dhcp_recv+0x234>
 8007d2e:	4b3c      	ldr	r3, [pc, #240]	; (8007e20 <dhcp_recv+0x28c>)
 8007d30:	f240 629d 	movw	r2, #1693	; 0x69d
 8007d34:	4940      	ldr	r1, [pc, #256]	; (8007e38 <dhcp_recv+0x2a4>)
 8007d36:	e7a2      	b.n	8007c7e <dhcp_recv+0xea>
 8007d38:	f04f 35ff 	mov.w	r5, #4294967295
 8007d3c:	f04f 0800 	mov.w	r8, #0
      if (offset + len + 2 > 0xFFFF) {
 8007d40:	441c      	add	r4, r3
 8007d42:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8007d46:	4294      	cmp	r4, r2
 8007d48:	f73f af6b 	bgt.w	8007c22 <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	4413      	add	r3, r2
 8007d50:	b29c      	uxth	r4, r3
      if (decode_len > 0) {
 8007d52:	f1b8 0f00 	cmp.w	r8, #0
 8007d56:	d0db      	beq.n	8007d10 <dhcp_recv+0x17c>
        u32_t value = 0;
 8007d58:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8007d5a:	2d07      	cmp	r5, #7
        u32_t value = 0;
 8007d5c:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8007d5e:	d906      	bls.n	8007d6e <dhcp_recv+0x1da>
 8007d60:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <dhcp_recv+0x28c>)
 8007d62:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8007d66:	4935      	ldr	r1, [pc, #212]	; (8007e3c <dhcp_recv+0x2a8>)
 8007d68:	482f      	ldr	r0, [pc, #188]	; (8007e28 <dhcp_recv+0x294>)
 8007d6a:	f007 f933 	bl	800efd4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8007d6e:	eb09 0305 	add.w	r3, r9, r5
 8007d72:	7a5b      	ldrb	r3, [r3, #9]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1cb      	bne.n	8007d10 <dhcp_recv+0x17c>
          copy_len = LWIP_MIN(decode_len, 4);
 8007d78:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	a907      	add	r1, sp, #28
 8007d80:	4638      	mov	r0, r7
 8007d82:	9204      	str	r2, [sp, #16]
 8007d84:	f002 fd3a 	bl	800a7fc <pbuf_copy_partial>
 8007d88:	9a04      	ldr	r2, [sp, #16]
 8007d8a:	4282      	cmp	r2, r0
 8007d8c:	f47f af49 	bne.w	8007c22 <dhcp_recv+0x8e>
          } else if (decode_len == 4) {
 8007d90:	f1b8 0f04 	cmp.w	r8, #4
 8007d94:	d10c      	bne.n	8007db0 <dhcp_recv+0x21c>
            value = lwip_ntohl(value);
 8007d96:	9807      	ldr	r0, [sp, #28]
 8007d98:	f001 fdb7 	bl	800990a <lwip_htonl>
 8007d9c:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8007d9e:	eb09 0305 	add.w	r3, r9, r5
 8007da2:	2201      	movs	r2, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 8007da4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
          dhcp_got_option(dhcp, decode_idx);
 8007da8:	725a      	strb	r2, [r3, #9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	616b      	str	r3, [r5, #20]
 8007dae:	e7af      	b.n	8007d10 <dhcp_recv+0x17c>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8007db0:	f1b8 0f01 	cmp.w	r8, #1
 8007db4:	d004      	beq.n	8007dc0 <dhcp_recv+0x22c>
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <dhcp_recv+0x28c>)
 8007db8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8007dbc:	4920      	ldr	r1, [pc, #128]	; (8007e40 <dhcp_recv+0x2ac>)
 8007dbe:	e75e      	b.n	8007c7e <dhcp_recv+0xea>
            value = ((u8_t *)&value)[0];
 8007dc0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007dc4:	9307      	str	r3, [sp, #28]
 8007dc6:	e7ea      	b.n	8007d9e <dhcp_recv+0x20a>
        options = (u8_t *)q->payload;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8007dcc:	4554      	cmp	r4, sl
 8007dce:	d204      	bcs.n	8007dda <dhcp_recv+0x246>
 8007dd0:	9b05      	ldr	r3, [sp, #20]
 8007dd2:	5d1a      	ldrb	r2, [r3, r4]
 8007dd4:	2aff      	cmp	r2, #255	; 0xff
 8007dd6:	f47f af36 	bne.w	8007c46 <dhcp_recv+0xb2>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8007dda:	f899 3009 	ldrb.w	r3, [r9, #9]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d132      	bne.n	8007e48 <dhcp_recv+0x2b4>
  } else if (parse_sname_as_options) {
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d138      	bne.n	8007e5a <dhcp_recv+0x2c6>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8007de8:	f899 300a 	ldrb.w	r3, [r9, #10]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f43f af18 	beq.w	8007c22 <dhcp_recv+0x8e>
  msg_in = (struct dhcp_msg *)p->payload;
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	6859      	ldr	r1, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8007df6:	f899 3018 	ldrb.w	r3, [r9, #24]
  if (msg_type == DHCP_ACK) {
 8007dfa:	2b05      	cmp	r3, #5
 8007dfc:	d148      	bne.n	8007e90 <dhcp_recv+0x2fc>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8007dfe:	9b02      	ldr	r3, [sp, #8]
 8007e00:	795b      	ldrb	r3, [r3, #5]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d139      	bne.n	8007e7a <dhcp_recv+0x2e6>
      dhcp_handle_ack(netif, msg_in);
 8007e06:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007e08:	f7ff fde4 	bl	80079d4 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8007e0c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
        dhcp_check(netif);
 8007e10:	4630      	mov	r0, r6
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8007e12:	071b      	lsls	r3, r3, #28
 8007e14:	d539      	bpl.n	8007e8a <dhcp_recv+0x2f6>
        dhcp_check(netif);
 8007e16:	f7ff fc6b 	bl	80076f0 <dhcp_check>
 8007e1a:	e702      	b.n	8007c22 <dhcp_recv+0x8e>
 8007e1c:	20006ad4 	.word	0x20006ad4
 8007e20:	0801b4c5 	.word	0x0801b4c5
 8007e24:	0801b74a 	.word	0x0801b74a
 8007e28:	0801a72c 	.word	0x0801a72c
 8007e2c:	0801b741 	.word	0x0801b741
 8007e30:	0801b75c 	.word	0x0801b75c
 8007e34:	0801b765 	.word	0x0801b765
 8007e38:	0801b7a0 	.word	0x0801b7a0
 8007e3c:	0801b77c 	.word	0x0801b77c
 8007e40:	0801b78d 	.word	0x0801b78d
 8007e44:	200069a4 	.word	0x200069a4
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007e48:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007e4c:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 8007e4e:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007e50:	f889 2009 	strb.w	r2, [r9, #9]
    if (overload == DHCP_OVERLOAD_FILE) {
 8007e54:	d00c      	beq.n	8007e70 <dhcp_recv+0x2dc>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d106      	bne.n	8007e68 <dhcp_recv+0x2d4>
    parse_sname_as_options = 0;
 8007e5a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8007e5c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8007e60:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 8007e64:	9303      	str	r3, [sp, #12]
 8007e66:	e6cd      	b.n	8007c04 <dhcp_recv+0x70>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d1ba      	bne.n	8007de2 <dhcp_recv+0x24e>
      parse_sname_as_options = 1;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8007e70:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8007e74:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8007e78:	e6c4      	b.n	8007c04 <dhcp_recv+0x70>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8007e7a:	3b03      	subs	r3, #3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	f63f aed0 	bhi.w	8007c22 <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
 8007e82:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007e84:	f7ff fda6 	bl	80079d4 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff fc47 	bl	800771c <dhcp_bind>
 8007e8e:	e6c8      	b.n	8007c22 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
 8007e90:	2b06      	cmp	r3, #6
 8007e92:	d115      	bne.n	8007ec0 <dhcp_recv+0x32c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8007e94:	9b02      	ldr	r3, [sp, #8]
 8007e96:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8007e98:	1eda      	subs	r2, r3, #3
 8007e9a:	2a02      	cmp	r2, #2
 8007e9c:	d902      	bls.n	8007ea4 <dhcp_recv+0x310>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	f47f aebf 	bne.w	8007c22 <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007ea4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007ea6:	210c      	movs	r1, #12
 8007ea8:	f7ff fa78 	bl	800739c <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007eac:	4b3e      	ldr	r3, [pc, #248]	; (8007fa8 <dhcp_recv+0x414>)
 8007eae:	4630      	mov	r0, r6
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f002 f8ca 	bl	800a04c <netif_set_addr>
  dhcp_discover(netif);
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff fba1 	bl	8007600 <dhcp_discover>
}
 8007ebe:	e6b0      	b.n	8007c22 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	f47f aeae 	bne.w	8007c22 <dhcp_recv+0x8e>
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	795b      	ldrb	r3, [r3, #5]
 8007eca:	2b06      	cmp	r3, #6
 8007ecc:	f47f aea9 	bne.w	8007c22 <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8007ed0:	f899 300b 	ldrb.w	r3, [r9, #11]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f43f aea4 	beq.w	8007c22 <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007eda:	6a74      	ldr	r4, [r6, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8007edc:	9b03      	ldr	r3, [sp, #12]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007ede:	f8d9 001c 	ldr.w	r0, [r9, #28]
    dhcp->request_timeout = 0; /* stop timer */
 8007ee2:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007ee4:	9102      	str	r1, [sp, #8]
 8007ee6:	f001 fd10 	bl	800990a <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007eea:	9902      	ldr	r1, [sp, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007eec:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
 8007eee:	4630      	mov	r0, r6
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007ef0:	690b      	ldr	r3, [r1, #16]
 8007ef2:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8007ef4:	f7ff fd9c 	bl	8007a30 <dhcp_select.isra.0>
 8007ef8:	e693      	b.n	8007c22 <dhcp_recv+0x8e>
    switch (op) {
 8007efa:	2a3b      	cmp	r2, #59	; 0x3b
 8007efc:	f63f af06 	bhi.w	8007d0c <dhcp_recv+0x178>
 8007f00:	2a32      	cmp	r2, #50	; 0x32
 8007f02:	d806      	bhi.n	8007f12 <dhcp_recv+0x37e>
 8007f04:	2a01      	cmp	r2, #1
 8007f06:	f43f aec8 	beq.w	8007c9a <dhcp_recv+0x106>
 8007f0a:	2a03      	cmp	r2, #3
 8007f0c:	f43f aeb3 	beq.w	8007c76 <dhcp_recv+0xe2>
 8007f10:	e6fc      	b.n	8007d0c <dhcp_recv+0x178>
 8007f12:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	f63f aef7 	bhi.w	8007d0a <dhcp_recv+0x176>
 8007f1c:	a101      	add	r1, pc, #4	; (adr r1, 8007f24 <dhcp_recv+0x390>)
 8007f1e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007cab 	.word	0x08007cab
 8007f28:	08007cb7 	.word	0x08007cb7
 8007f2c:	08007cd9 	.word	0x08007cd9
 8007f30:	08007ce7 	.word	0x08007ce7
 8007f34:	08007d0b 	.word	0x08007d0b
 8007f38:	08007d0b 	.word	0x08007d0b
 8007f3c:	08007d0b 	.word	0x08007d0b
 8007f40:	08007cf5 	.word	0x08007cf5
 8007f44:	08007d03 	.word	0x08007d03
 8007f48:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8007f4a:	2506      	movs	r5, #6
 8007f4c:	e6f8      	b.n	8007d40 <dhcp_recv+0x1ac>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8007f4e:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
 8007f50:	f04f 0804 	mov.w	r8, #4
 8007f54:	e6f4      	b.n	8007d40 <dhcp_recv+0x1ac>
 8007f56:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8007f58:	2503      	movs	r5, #3
 8007f5a:	e6f1      	b.n	8007d40 <dhcp_recv+0x1ac>
    decode_len = len;
 8007f5c:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8007f5e:	2500      	movs	r5, #0
 8007f60:	e6ee      	b.n	8007d40 <dhcp_recv+0x1ac>
 8007f62:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8007f64:	2502      	movs	r5, #2
 8007f66:	e6eb      	b.n	8007d40 <dhcp_recv+0x1ac>
 8007f68:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8007f6a:	461d      	mov	r5, r3
 8007f6c:	e6e8      	b.n	8007d40 <dhcp_recv+0x1ac>
 8007f6e:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8007f70:	2505      	movs	r5, #5
    if (op == DHCP_OPTION_PAD) {
 8007f72:	e6e5      	b.n	8007d40 <dhcp_recv+0x1ac>
    switch (op) {
 8007f74:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8007f78:	2908      	cmp	r1, #8
 8007f7a:	f63f aec7 	bhi.w	8007d0c <dhcp_recv+0x178>
 8007f7e:	a501      	add	r5, pc, #4	; (adr r5, 8007f84 <dhcp_recv+0x3f0>)
 8007f80:	f855 f021 	ldr.w	pc, [r5, r1, lsl #2]
 8007f84:	08007ca5 	.word	0x08007ca5
 8007f88:	08007cb3 	.word	0x08007cb3
 8007f8c:	08007cd3 	.word	0x08007cd3
 8007f90:	08007ce1 	.word	0x08007ce1
 8007f94:	08007d0d 	.word	0x08007d0d
 8007f98:	08007d0d 	.word	0x08007d0d
 8007f9c:	08007d0d 	.word	0x08007d0d
 8007fa0:	08007cef 	.word	0x08007cef
 8007fa4:	08007cfd 	.word	0x08007cfd
 8007fa8:	080118b8 	.word	0x080118b8

08007fac <dhcp_arp_reply>:
{
 8007fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007fae:	4606      	mov	r6, r0
{
 8007fb0:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007fb2:	b948      	cbnz	r0, 8007fc8 <dhcp_arp_reply+0x1c>
 8007fb4:	4b28      	ldr	r3, [pc, #160]	; (8008058 <dhcp_arp_reply+0xac>)
 8007fb6:	f240 328b 	movw	r2, #907	; 0x38b
 8007fba:	4928      	ldr	r1, [pc, #160]	; (800805c <dhcp_arp_reply+0xb0>)
 8007fbc:	4828      	ldr	r0, [pc, #160]	; (8008060 <dhcp_arp_reply+0xb4>)
}
 8007fbe:	b007      	add	sp, #28
 8007fc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007fc4:	f007 b806 	b.w	800efd4 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8007fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d041      	beq.n	8008052 <dhcp_arp_reply+0xa6>
 8007fce:	7963      	ldrb	r3, [r4, #5]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d13e      	bne.n	8008052 <dhcp_arp_reply+0xa6>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8007fd4:	680a      	ldr	r2, [r1, #0]
 8007fd6:	69e3      	ldr	r3, [r4, #28]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d13a      	bne.n	8008052 <dhcp_arp_reply+0xa6>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007fdc:	210c      	movs	r1, #12
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f7ff f9dc 	bl	800739c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8007fe4:	2204      	movs	r2, #4
 8007fe6:	f10d 0316 	add.w	r3, sp, #22
 8007fea:	4621      	mov	r1, r4
 8007fec:	4630      	mov	r0, r6
 8007fee:	f7ff fa53 	bl	8007498 <dhcp_create_msg>
  if (p_out != NULL) {
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	b330      	cbz	r0, 8008044 <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007ff6:	6841      	ldr	r1, [r0, #4]
 8007ff8:	2304      	movs	r3, #4
 8007ffa:	2232      	movs	r2, #50	; 0x32
 8007ffc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008000:	31f0      	adds	r1, #240	; 0xf0
 8008002:	9103      	str	r1, [sp, #12]
 8008004:	f7ff f9ee 	bl	80073e4 <dhcp_option>
 8008008:	4607      	mov	r7, r0
 800800a:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800800e:	69e0      	ldr	r0, [r4, #28]
 8008010:	f001 fc7b 	bl	800990a <lwip_htonl>
 8008014:	9903      	ldr	r1, [sp, #12]
 8008016:	4602      	mov	r2, r0
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff fa19 	bl	8007450 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800801e:	462a      	mov	r2, r5
 8008020:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008022:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008026:	f7ff facb 	bl	80075c0 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800802a:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <dhcp_arp_reply+0xb8>)
 800802c:	4629      	mov	r1, r5
 800802e:	480e      	ldr	r0, [pc, #56]	; (8008068 <dhcp_arp_reply+0xbc>)
 8008030:	4a0e      	ldr	r2, [pc, #56]	; (800806c <dhcp_arp_reply+0xc0>)
 8008032:	e9cd 6300 	strd	r6, r3, [sp]
 8008036:	2343      	movs	r3, #67	; 0x43
 8008038:	6840      	ldr	r0, [r0, #4]
 800803a:	f005 fff7 	bl	800e02c <udp_sendto_if_src>
    pbuf_free(p_out);
 800803e:	4628      	mov	r0, r5
 8008040:	f002 f9b6 	bl	800a3b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8008044:	79a3      	ldrb	r3, [r4, #6]
 8008046:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008048:	bf1c      	itt	ne
 800804a:	3301      	addne	r3, #1
 800804c:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800804e:	2314      	movs	r3, #20
 8008050:	8123      	strh	r3, [r4, #8]
}
 8008052:	b007      	add	sp, #28
 8008054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008056:	bf00      	nop
 8008058:	0801b4c5 	.word	0x0801b4c5
 800805c:	0801b69d 	.word	0x0801b69d
 8008060:	0801a72c 	.word	0x0801a72c
 8008064:	080118b8 	.word	0x080118b8
 8008068:	200069a4 	.word	0x200069a4
 800806c:	080118b4 	.word	0x080118b4

08008070 <dhcp_renew>:
{
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008074:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008076:	b086      	sub	sp, #24
 8008078:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800807a:	2105      	movs	r1, #5
 800807c:	4620      	mov	r0, r4
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800807e:	2203      	movs	r2, #3
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8008080:	f7ff f98c 	bl	800739c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008084:	f10d 0316 	add.w	r3, sp, #22
 8008088:	4621      	mov	r1, r4
 800808a:	4630      	mov	r0, r6
 800808c:	f7ff fa04 	bl	8007498 <dhcp_create_msg>
  if (p_out != NULL) {
 8008090:	4605      	mov	r5, r0
 8008092:	2800      	cmp	r0, #0
 8008094:	d056      	beq.n	8008144 <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008096:	6841      	ldr	r1, [r0, #4]
 8008098:	2302      	movs	r3, #2
 800809a:	2239      	movs	r2, #57	; 0x39
 800809c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80080a0:	31f0      	adds	r1, #240	; 0xf0
 80080a2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008150 <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80080a6:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80080a8:	9103      	str	r1, [sp, #12]
 80080aa:	f7ff f99b 	bl	80073e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80080ae:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80080b0:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80080b2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80080b6:	f7ff f979 	bl	80073ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80080ba:	9903      	ldr	r1, [sp, #12]
 80080bc:	2303      	movs	r3, #3
 80080be:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80080c0:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80080c4:	f7ff f98e 	bl	80073e4 <dhcp_option>
 80080c8:	9903      	ldr	r1, [sp, #12]
 80080ca:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80080ce:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80080d0:	f818 2b01 	ldrb.w	r2, [r8], #1
 80080d4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80080d8:	9103      	str	r1, [sp, #12]
 80080da:	f7ff f9a1 	bl	8007420 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80080de:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80080e2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80080e4:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80080e8:	d1f1      	bne.n	80080ce <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80080ea:	462a      	mov	r2, r5
 80080ec:	f7ff fa68 	bl	80075c0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80080f0:	4816      	ldr	r0, [pc, #88]	; (800814c <dhcp_renew+0xdc>)
 80080f2:	9600      	str	r6, [sp, #0]
 80080f4:	2343      	movs	r3, #67	; 0x43
 80080f6:	f104 0218 	add.w	r2, r4, #24
 80080fa:	4629      	mov	r1, r5
 80080fc:	6840      	ldr	r0, [r0, #4]
 80080fe:	f006 f82d 	bl	800e15c <udp_sendto_if>
 8008102:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8008104:	4628      	mov	r0, r5
 8008106:	f002 f953 	bl	800a3b0 <pbuf_free>
  if (dhcp->tries < 255) {
 800810a:	79a3      	ldrb	r3, [r4, #6]
}
 800810c:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 800810e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008110:	bf1c      	itt	ne
 8008112:	3301      	addne	r3, #1
 8008114:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8008116:	79a3      	ldrb	r3, [r4, #6]
 8008118:	2b09      	cmp	r3, #9
 800811a:	bf96      	itet	ls
 800811c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008120:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8008124:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800812c:	bf9c      	itt	ls
 800812e:	011b      	lslls	r3, r3, #4
 8008130:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008132:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008136:	b29b      	uxth	r3, r3
 8008138:	fbb3 f3f2 	udiv	r3, r3, r2
 800813c:	8123      	strh	r3, [r4, #8]
}
 800813e:	b006      	add	sp, #24
 8008140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8008144:	f04f 36ff 	mov.w	r6, #4294967295
 8008148:	e7df      	b.n	800810a <dhcp_renew+0x9a>
 800814a:	bf00      	nop
 800814c:	200069a4 	.word	0x200069a4
 8008150:	080118ae 	.word	0x080118ae

08008154 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8008154:	b150      	cbz	r0, 800816c <dhcp_supplied_address+0x18>
 8008156:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008158:	b140      	cbz	r0, 800816c <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800815a:	7940      	ldrb	r0, [r0, #5]
 800815c:	280a      	cmp	r0, #10
 800815e:	d006      	beq.n	800816e <dhcp_supplied_address+0x1a>
 8008160:	3804      	subs	r0, #4
 8008162:	2801      	cmp	r0, #1
 8008164:	bf8c      	ite	hi
 8008166:	2000      	movhi	r0, #0
 8008168:	2001      	movls	r0, #1
 800816a:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800816c:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800816e:	2001      	movs	r0, #1
 8008170:	e7fb      	b.n	800816a <dhcp_supplied_address+0x16>
	...

08008174 <dhcp_release_and_stop>:
{
 8008174:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008176:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008178:	b087      	sub	sp, #28
 800817a:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800817c:	2c00      	cmp	r4, #0
 800817e:	d050      	beq.n	8008222 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8008180:	7963      	ldrb	r3, [r4, #5]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04d      	beq.n	8008222 <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8008186:	69a3      	ldr	r3, [r4, #24]
 8008188:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800818a:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800818c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008190:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8008194:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8008198:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800819a:	81e3      	strh	r3, [r4, #14]
 800819c:	6123      	str	r3, [r4, #16]
 800819e:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 80081a0:	f7ff ffd8 	bl	8008154 <dhcp_supplied_address>
 80081a4:	b368      	cbz	r0, 8008202 <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80081a6:	f10d 0312 	add.w	r3, sp, #18
 80081aa:	2207      	movs	r2, #7
 80081ac:	4621      	mov	r1, r4
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff f972 	bl	8007498 <dhcp_create_msg>
    if (p_out != NULL) {
 80081b4:	4605      	mov	r5, r0
 80081b6:	b320      	cbz	r0, 8008202 <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80081b8:	6841      	ldr	r1, [r0, #4]
 80081ba:	2304      	movs	r3, #4
 80081bc:	2236      	movs	r2, #54	; 0x36
 80081be:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 80081c2:	31f0      	adds	r1, #240	; 0xf0
 80081c4:	9103      	str	r1, [sp, #12]
 80081c6:	f7ff f90d 	bl	80073e4 <dhcp_option>
 80081ca:	4607      	mov	r7, r0
 80081cc:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80081d0:	9805      	ldr	r0, [sp, #20]
 80081d2:	f001 fb9a 	bl	800990a <lwip_htonl>
 80081d6:	9903      	ldr	r1, [sp, #12]
 80081d8:	4602      	mov	r2, r0
 80081da:	4638      	mov	r0, r7
 80081dc:	f7ff f938 	bl	8007450 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80081e0:	462a      	mov	r2, r5
 80081e2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80081e4:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80081e8:	f7ff f9ea 	bl	80075c0 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80081ec:	480e      	ldr	r0, [pc, #56]	; (8008228 <dhcp_release_and_stop+0xb4>)
 80081ee:	2343      	movs	r3, #67	; 0x43
 80081f0:	9600      	str	r6, [sp, #0]
 80081f2:	aa05      	add	r2, sp, #20
 80081f4:	4629      	mov	r1, r5
 80081f6:	6840      	ldr	r0, [r0, #4]
 80081f8:	f005 ffb0 	bl	800e15c <udp_sendto_if>
      pbuf_free(p_out);
 80081fc:	4628      	mov	r0, r5
 80081fe:	f002 f8d7 	bl	800a3b0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <dhcp_release_and_stop+0xb8>)
 8008204:	4630      	mov	r0, r6
 8008206:	4619      	mov	r1, r3
 8008208:	461a      	mov	r2, r3
 800820a:	f001 ff1f 	bl	800a04c <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800820e:	2100      	movs	r1, #0
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff f8c3 	bl	800739c <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8008216:	7923      	ldrb	r3, [r4, #4]
 8008218:	b11b      	cbz	r3, 8008222 <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800821a:	f7ff fb3d 	bl	8007898 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	7123      	strb	r3, [r4, #4]
}
 8008222:	b007      	add	sp, #28
 8008224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008226:	bf00      	nop
 8008228:	200069a4 	.word	0x200069a4
 800822c:	080118b8 	.word	0x080118b8

08008230 <dhcp_start>:
{
 8008230:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008232:	4604      	mov	r4, r0
 8008234:	b950      	cbnz	r0, 800824c <dhcp_start+0x1c>
 8008236:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <dhcp_start+0x98>)
 8008238:	f240 22e7 	movw	r2, #743	; 0x2e7
 800823c:	4923      	ldr	r1, [pc, #140]	; (80082cc <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800823e:	4824      	ldr	r0, [pc, #144]	; (80082d0 <dhcp_start+0xa0>)
 8008240:	f006 fec8 	bl	800efd4 <iprintf>
 8008244:	f06f 020f 	mvn.w	r2, #15
}
 8008248:	4610      	mov	r0, r2
 800824a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800824c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008250:	07da      	lsls	r2, r3, #31
 8008252:	d404      	bmi.n	800825e <dhcp_start+0x2e>
 8008254:	4b1c      	ldr	r3, [pc, #112]	; (80082c8 <dhcp_start+0x98>)
 8008256:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800825a:	491e      	ldr	r1, [pc, #120]	; (80082d4 <dhcp_start+0xa4>)
 800825c:	e7ef      	b.n	800823e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800825e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8008260:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008262:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008266:	d202      	bcs.n	800826e <dhcp_start+0x3e>
    return ERR_MEM;
 8008268:	f04f 32ff 	mov.w	r2, #4294967295
 800826c:	e7ec      	b.n	8008248 <dhcp_start+0x18>
  if (dhcp == NULL) {
 800826e:	b9dd      	cbnz	r5, 80082a8 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8008270:	2034      	movs	r0, #52	; 0x34
 8008272:	f001 fd65 	bl	8009d40 <mem_malloc>
    if (dhcp == NULL) {
 8008276:	4605      	mov	r5, r0
 8008278:	2800      	cmp	r0, #0
 800827a:	d0f5      	beq.n	8008268 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800827c:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 800827e:	2234      	movs	r2, #52	; 0x34
 8008280:	2100      	movs	r1, #0
 8008282:	4628      	mov	r0, r5
 8008284:	f006 fa34 	bl	800e6f0 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008288:	f7ff fad0 	bl	800782c <dhcp_inc_pcb_refcount>
 800828c:	4602      	mov	r2, r0
 800828e:	2800      	cmp	r0, #0
 8008290:	d1ea      	bne.n	8008268 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8008292:	2301      	movs	r3, #1
 8008294:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8008296:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800829a:	075b      	lsls	r3, r3, #29
 800829c:	d40a      	bmi.n	80082b4 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800829e:	2102      	movs	r1, #2
 80082a0:	4628      	mov	r0, r5
 80082a2:	f7ff f87b 	bl	800739c <dhcp_set_state>
    return ERR_OK;
 80082a6:	e7cf      	b.n	8008248 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 80082a8:	792b      	ldrb	r3, [r5, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0e7      	beq.n	800827e <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80082ae:	f7ff faf3 	bl	8007898 <dhcp_dec_pcb_refcount>
 80082b2:	e7e4      	b.n	800827e <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 80082b4:	4620      	mov	r0, r4
 80082b6:	f7ff f9a3 	bl	8007600 <dhcp_discover>
  if (result != ERR_OK) {
 80082ba:	4602      	mov	r2, r0
 80082bc:	2800      	cmp	r0, #0
 80082be:	d0c3      	beq.n	8008248 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 80082c0:	4620      	mov	r0, r4
 80082c2:	f7ff ff57 	bl	8008174 <dhcp_release_and_stop>
 80082c6:	e7cf      	b.n	8008268 <dhcp_start+0x38>
 80082c8:	0801b4c5 	.word	0x0801b4c5
 80082cc:	0801b69d 	.word	0x0801b69d
 80082d0:	0801a72c 	.word	0x0801a72c
 80082d4:	0801b7eb 	.word	0x0801b7eb

080082d8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80082d8:	4b59      	ldr	r3, [pc, #356]	; (8008440 <dhcp_coarse_tmr+0x168>)
{
 80082da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80082de:	681d      	ldr	r5, [r3, #0]
{
 80082e0:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80082e2:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80082e6:	4f57      	ldr	r7, [pc, #348]	; (8008444 <dhcp_coarse_tmr+0x16c>)
 80082e8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8008448 <dhcp_coarse_tmr+0x170>
  NETIF_FOREACH(netif) {
 80082ec:	b915      	cbnz	r5, 80082f4 <dhcp_coarse_tmr+0x1c>
}
 80082ee:	b007      	add	sp, #28
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80082f4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80082f6:	b17c      	cbz	r4, 8008318 <dhcp_coarse_tmr+0x40>
 80082f8:	7963      	ldrb	r3, [r4, #5]
 80082fa:	b16b      	cbz	r3, 8008318 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80082fc:	8aa1      	ldrh	r1, [r4, #20]
 80082fe:	b169      	cbz	r1, 800831c <dhcp_coarse_tmr+0x44>
 8008300:	8a62      	ldrh	r2, [r4, #18]
 8008302:	3201      	adds	r2, #1
 8008304:	b292      	uxth	r2, r2
 8008306:	4291      	cmp	r1, r2
 8008308:	8262      	strh	r2, [r4, #18]
 800830a:	d107      	bne.n	800831c <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 800830c:	4628      	mov	r0, r5
 800830e:	f7ff ff31 	bl	8008174 <dhcp_release_and_stop>
        dhcp_start(netif);
 8008312:	4628      	mov	r0, r5
 8008314:	f7ff ff8c 	bl	8008230 <dhcp_start>
  NETIF_FOREACH(netif) {
 8008318:	682d      	ldr	r5, [r5, #0]
 800831a:	e7e7      	b.n	80082ec <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800831c:	8a22      	ldrh	r2, [r4, #16]
 800831e:	2a00      	cmp	r2, #0
 8008320:	d073      	beq.n	800840a <dhcp_coarse_tmr+0x132>
 8008322:	1e51      	subs	r1, r2, #1
 8008324:	2a01      	cmp	r2, #1
 8008326:	8221      	strh	r1, [r4, #16]
 8008328:	d16f      	bne.n	800840a <dhcp_coarse_tmr+0x132>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800832a:	3b01      	subs	r3, #1
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b09      	cmp	r3, #9
 8008330:	d8f2      	bhi.n	8008318 <dhcp_coarse_tmr+0x40>
 8008332:	fa26 f303 	lsr.w	r3, r6, r3
 8008336:	07db      	lsls	r3, r3, #31
 8008338:	d5ee      	bpl.n	8008318 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800833a:	2104      	movs	r1, #4
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff f82d 	bl	800739c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008342:	2203      	movs	r2, #3
 8008344:	f10d 0316 	add.w	r3, sp, #22
 8008348:	4621      	mov	r1, r4
 800834a:	4628      	mov	r0, r5
 800834c:	f7ff f8a4 	bl	8007498 <dhcp_create_msg>
  if (p_out != NULL) {
 8008350:	4681      	mov	r9, r0
 8008352:	2800      	cmp	r0, #0
 8008354:	d038      	beq.n	80083c8 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008356:	6841      	ldr	r1, [r0, #4]
 8008358:	2302      	movs	r3, #2
 800835a:	2239      	movs	r2, #57	; 0x39
 800835c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008360:	31f0      	adds	r1, #240	; 0xf0
 8008362:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 800844c <dhcp_coarse_tmr+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008366:	f04f 0a03 	mov.w	sl, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800836a:	9103      	str	r1, [sp, #12]
 800836c:	f7ff f83a 	bl	80073e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008370:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8008372:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008374:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008378:	f7ff f818 	bl	80073ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800837c:	9903      	ldr	r1, [sp, #12]
 800837e:	2303      	movs	r3, #3
 8008380:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008382:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008386:	f7ff f82d 	bl	80073e4 <dhcp_option>
 800838a:	9903      	ldr	r1, [sp, #12]
 800838c:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008390:	f10a 3aff 	add.w	sl, sl, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008394:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8008398:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800839c:	9103      	str	r1, [sp, #12]
 800839e:	f7ff f83f 	bl	8007420 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80083a2:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 80083a6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80083a8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80083ac:	d1f0      	bne.n	8008390 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80083ae:	464a      	mov	r2, r9
 80083b0:	f7ff f906 	bl	80075c0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80083b4:	2343      	movs	r3, #67	; 0x43
 80083b6:	4642      	mov	r2, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	9500      	str	r5, [sp, #0]
 80083be:	f005 fecd 	bl	800e15c <udp_sendto_if>
    pbuf_free(p_out);
 80083c2:	4648      	mov	r0, r9
 80083c4:	f001 fff4 	bl	800a3b0 <pbuf_free>
  if (dhcp->tries < 255) {
 80083c8:	79a3      	ldrb	r3, [r4, #6]
 80083ca:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80083cc:	bf1c      	itt	ne
 80083ce:	3301      	addne	r3, #1
 80083d0:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80083d2:	79a3      	ldrb	r3, [r4, #6]
 80083d4:	2b09      	cmp	r3, #9
 80083d6:	bf96      	itet	ls
 80083d8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80083dc:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80083e0:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80083e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80083e8:	bf9c      	itt	ls
 80083ea:	00db      	lslls	r3, r3, #3
 80083ec:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80083ee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80083f8:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80083fa:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80083fc:	8aa3      	ldrh	r3, [r4, #20]
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	2b01      	cmp	r3, #1
 8008402:	dd89      	ble.n	8008318 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8008404:	105b      	asrs	r3, r3, #1
 8008406:	8223      	strh	r3, [r4, #16]
 8008408:	e786      	b.n	8008318 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800840a:	89e2      	ldrh	r2, [r4, #14]
 800840c:	2a00      	cmp	r2, #0
 800840e:	d083      	beq.n	8008318 <dhcp_coarse_tmr+0x40>
 8008410:	1e51      	subs	r1, r2, #1
 8008412:	2a01      	cmp	r2, #1
 8008414:	81e1      	strh	r1, [r4, #14]
 8008416:	f47f af7f 	bne.w	8008318 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800841a:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800841e:	2a01      	cmp	r2, #1
 8008420:	d002      	beq.n	8008428 <dhcp_coarse_tmr+0x150>
 8008422:	2b0a      	cmp	r3, #10
 8008424:	f47f af78 	bne.w	8008318 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8008428:	4628      	mov	r0, r5
 800842a:	f7ff fe21 	bl	8008070 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	8a62      	ldrh	r2, [r4, #18]
 8008432:	1a9b      	subs	r3, r3, r2
 8008434:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8008436:	bfc4      	itt	gt
 8008438:	105b      	asrgt	r3, r3, #1
 800843a:	81e3      	strhgt	r3, [r4, #14]
 800843c:	e76c      	b.n	8008318 <dhcp_coarse_tmr+0x40>
 800843e:	bf00      	nop
 8008440:	2000d050 	.word	0x2000d050
 8008444:	200069a4 	.word	0x200069a4
 8008448:	080118b4 	.word	0x080118b4
 800844c:	080118ae 	.word	0x080118ae

08008450 <dhcp_fine_tmr>:
{
 8008450:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8008452:	4b1e      	ldr	r3, [pc, #120]	; (80084cc <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8008454:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8008456:	681c      	ldr	r4, [r3, #0]
 8008458:	b904      	cbnz	r4, 800845c <dhcp_fine_tmr+0xc>
}
 800845a:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800845c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800845e:	b123      	cbz	r3, 800846a <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8008460:	891a      	ldrh	r2, [r3, #8]
 8008462:	2a01      	cmp	r2, #1
 8008464:	d903      	bls.n	800846e <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8008466:	3a01      	subs	r2, #1
 8008468:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 800846a:	6824      	ldr	r4, [r4, #0]
 800846c:	e7f4      	b.n	8008458 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 800846e:	d1fc      	bne.n	800846a <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008470:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8008472:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008474:	2a0c      	cmp	r2, #12
 8008476:	d001      	beq.n	800847c <dhcp_fine_tmr+0x2c>
 8008478:	2a06      	cmp	r2, #6
 800847a:	d103      	bne.n	8008484 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 800847c:	4620      	mov	r0, r4
      dhcp_discover(netif);
 800847e:	f7ff f8bf 	bl	8007600 <dhcp_discover>
 8008482:	e7f2      	b.n	800846a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8008484:	2a01      	cmp	r2, #1
 8008486:	d10c      	bne.n	80084a2 <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8008488:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 800848a:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 800848c:	2b05      	cmp	r3, #5
 800848e:	d802      	bhi.n	8008496 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8008490:	f7ff face 	bl	8007a30 <dhcp_select.isra.0>
 8008494:	e7e9      	b.n	800846a <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8008496:	f7ff fe6d 	bl	8008174 <dhcp_release_and_stop>
      dhcp_start(netif);
 800849a:	4620      	mov	r0, r4
 800849c:	f7ff fec8 	bl	8008230 <dhcp_start>
 80084a0:	e7e3      	b.n	800846a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80084a2:	2a08      	cmp	r2, #8
 80084a4:	d109      	bne.n	80084ba <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 80084a6:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 80084a8:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d802      	bhi.n	80084b4 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 80084ae:	f7ff f91f 	bl	80076f0 <dhcp_check>
 80084b2:	e7da      	b.n	800846a <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80084b4:	f7ff f932 	bl	800771c <dhcp_bind>
 80084b8:	e7d7      	b.n	800846a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80084ba:	2a03      	cmp	r2, #3
 80084bc:	d1d5      	bne.n	800846a <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80084be:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80084c0:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d8db      	bhi.n	800847e <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 80084c6:	f7ff fa03 	bl	80078d0 <dhcp_reboot.isra.0>
 80084ca:	e7ce      	b.n	800846a <dhcp_fine_tmr+0x1a>
 80084cc:	2000d050 	.word	0x2000d050

080084d0 <dhcp_stop>:
  dhcp_release_and_stop(netif);
 80084d0:	f7ff be50 	b.w	8008174 <dhcp_release_and_stop>

080084d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80084d4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80084d6:	2618      	movs	r6, #24
 80084d8:	4c07      	ldr	r4, [pc, #28]	; (80084f8 <etharp_free_entry+0x24>)
{
 80084da:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80084dc:	4346      	muls	r6, r0
 80084de:	59a0      	ldr	r0, [r4, r6]
 80084e0:	b118      	cbz	r0, 80084ea <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80084e2:	f001 ff65 	bl	800a3b0 <pbuf_free>
    arp_table[i].q = NULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80084ea:	2018      	movs	r0, #24
 80084ec:	2300      	movs	r3, #0
 80084ee:	fb00 4405 	mla	r4, r0, r5, r4
 80084f2:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
 80084f6:	bf00      	nop
 80084f8:	200069d8 	.word	0x200069d8

080084fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80084fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008502:	f04f 0e0a 	mov.w	lr, #10
{
 8008506:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008508:	4699      	mov	r9, r3
 800850a:	469b      	mov	fp, r3
 800850c:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 800850e:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008510:	4675      	mov	r5, lr
 8008512:	46f0      	mov	r8, lr
{
 8008514:	e9cd 2100 	strd	r2, r1, [sp]
 8008518:	4a3a      	ldr	r2, [pc, #232]	; (8008604 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800851a:	2c0a      	cmp	r4, #10
 800851c:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 800851e:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008522:	d11a      	bne.n	800855a <etharp_find_entry+0x5e>
 8008524:	f1ba 0f00 	cmp.w	sl, #0
 8008528:	d05d      	beq.n	80085e6 <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800852a:	b156      	cbz	r6, 8008542 <etharp_find_entry+0x46>
 800852c:	6831      	ldr	r1, [r6, #0]
 800852e:	6857      	ldr	r7, [r2, #4]
 8008530:	42b9      	cmp	r1, r7
 8008532:	d106      	bne.n	8008542 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008534:	9900      	ldr	r1, [sp, #0]
 8008536:	2900      	cmp	r1, #0
 8008538:	d048      	beq.n	80085cc <etharp_find_entry+0xd0>
 800853a:	6891      	ldr	r1, [r2, #8]
 800853c:	9f00      	ldr	r7, [sp, #0]
 800853e:	42b9      	cmp	r1, r7
 8008540:	d044      	beq.n	80085cc <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008542:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 8008546:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 8008548:	d148      	bne.n	80085dc <etharp_find_entry+0xe0>
        if (arp_table[i].q != NULL) {
 800854a:	6817      	ldr	r7, [r2, #0]
 800854c:	2f00      	cmp	r7, #0
 800854e:	d040      	beq.n	80085d2 <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8008550:	4561      	cmp	r1, ip
 8008552:	d305      	bcc.n	8008560 <etharp_find_entry+0x64>
 8008554:	468c      	mov	ip, r1
 8008556:	4686      	mov	lr, r0
 8008558:	e002      	b.n	8008560 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 800855a:	f1ba 0f00 	cmp.w	sl, #0
 800855e:	d1e4      	bne.n	800852a <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008560:	3301      	adds	r3, #1
 8008562:	3218      	adds	r2, #24
 8008564:	2b0a      	cmp	r3, #10
 8008566:	d1d8      	bne.n	800851a <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d143      	bne.n	80085f6 <etharp_find_entry+0xfa>
 800856e:	2c0a      	cmp	r4, #10
 8008570:	d111      	bne.n	8008596 <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8008572:	2d0a      	cmp	r5, #10
 8008574:	d039      	beq.n	80085ea <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008576:	2318      	movs	r3, #24
 8008578:	4a22      	ldr	r2, [pc, #136]	; (8008604 <etharp_find_entry+0x108>)
 800857a:	436b      	muls	r3, r5
 800857c:	58d3      	ldr	r3, [r2, r3]
 800857e:	b133      	cbz	r3, 800858e <etharp_find_entry+0x92>
 8008580:	4b21      	ldr	r3, [pc, #132]	; (8008608 <etharp_find_entry+0x10c>)
 8008582:	f240 126d 	movw	r2, #365	; 0x16d
 8008586:	4921      	ldr	r1, [pc, #132]	; (800860c <etharp_find_entry+0x110>)
 8008588:	4821      	ldr	r0, [pc, #132]	; (8008610 <etharp_find_entry+0x114>)
 800858a:	f006 fd23 	bl	800efd4 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800858e:	462c      	mov	r4, r5
 8008590:	4628      	mov	r0, r5
 8008592:	f7ff ff9f 	bl	80084d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008596:	4d1b      	ldr	r5, [pc, #108]	; (8008604 <etharp_find_entry+0x108>)
 8008598:	2318      	movs	r3, #24
 800859a:	fb03 5304 	mla	r3, r3, r4, r5
 800859e:	7d1b      	ldrb	r3, [r3, #20]
 80085a0:	b133      	cbz	r3, 80085b0 <etharp_find_entry+0xb4>
 80085a2:	4b19      	ldr	r3, [pc, #100]	; (8008608 <etharp_find_entry+0x10c>)
 80085a4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80085a8:	491a      	ldr	r1, [pc, #104]	; (8008614 <etharp_find_entry+0x118>)
 80085aa:	4819      	ldr	r0, [pc, #100]	; (8008610 <etharp_find_entry+0x114>)
 80085ac:	f006 fd12 	bl	800efd4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80085b0:	b126      	cbz	r6, 80085bc <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80085b2:	2318      	movs	r3, #24
 80085b4:	6832      	ldr	r2, [r6, #0]
 80085b6:	fb03 5304 	mla	r3, r3, r4, r5
 80085ba:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80085bc:	2318      	movs	r3, #24
 80085be:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80085c0:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 80085c2:	fb03 5304 	mla	r3, r3, r4, r5
 80085c6:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = netif;
 80085c8:	9a00      	ldr	r2, [sp, #0]
 80085ca:	609a      	str	r2, [r3, #8]
}
 80085cc:	b003      	add	sp, #12
 80085ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80085d2:	4559      	cmp	r1, fp
 80085d4:	d3c4      	bcc.n	8008560 <etharp_find_entry+0x64>
 80085d6:	468b      	mov	fp, r1
 80085d8:	4680      	mov	r8, r0
 80085da:	e7c1      	b.n	8008560 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 80085dc:	4549      	cmp	r1, r9
 80085de:	d3bf      	bcc.n	8008560 <etharp_find_entry+0x64>
 80085e0:	4689      	mov	r9, r1
 80085e2:	4605      	mov	r5, r0
 80085e4:	e7bc      	b.n	8008560 <etharp_find_entry+0x64>
 80085e6:	4604      	mov	r4, r0
 80085e8:	e7ba      	b.n	8008560 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80085ea:	f1b8 0f0a 	cmp.w	r8, #10
 80085ee:	d105      	bne.n	80085fc <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80085f0:	f1be 0f0a 	cmp.w	lr, #10
 80085f4:	d104      	bne.n	8008600 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	e7e7      	b.n	80085cc <etharp_find_entry+0xd0>
 80085fc:	4645      	mov	r5, r8
 80085fe:	e7c6      	b.n	800858e <etharp_find_entry+0x92>
 8008600:	4675      	mov	r5, lr
 8008602:	e7c4      	b.n	800858e <etharp_find_entry+0x92>
 8008604:	200069d8 	.word	0x200069d8
 8008608:	0801b80c 	.word	0x0801b80c
 800860c:	0801b872 	.word	0x0801b872
 8008610:	0801a72c 	.word	0x0801a72c
 8008614:	0801b889 	.word	0x0801b889

08008618 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8008618:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008620:	4688      	mov	r8, r1
 8008622:	4691      	mov	r9, r2
 8008624:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008626:	4607      	mov	r7, r0
 8008628:	b930      	cbnz	r0, 8008638 <etharp_raw+0x20>
 800862a:	4b2d      	ldr	r3, [pc, #180]	; (80086e0 <etharp_raw+0xc8>)
 800862c:	f240 4257 	movw	r2, #1111	; 0x457
 8008630:	492c      	ldr	r1, [pc, #176]	; (80086e4 <etharp_raw+0xcc>)
 8008632:	482d      	ldr	r0, [pc, #180]	; (80086e8 <etharp_raw+0xd0>)
 8008634:	f006 fcce 	bl	800efd4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008638:	f44f 7220 	mov.w	r2, #640	; 0x280
 800863c:	211c      	movs	r1, #28
 800863e:	200e      	movs	r0, #14
 8008640:	f001 ff1e 	bl	800a480 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008644:	4605      	mov	r5, r0
 8008646:	2800      	cmp	r0, #0
 8008648:	d047      	beq.n	80086da <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800864a:	8943      	ldrh	r3, [r0, #10]
 800864c:	2b1b      	cmp	r3, #27
 800864e:	d806      	bhi.n	800865e <etharp_raw+0x46>
 8008650:	4b23      	ldr	r3, [pc, #140]	; (80086e0 <etharp_raw+0xc8>)
 8008652:	f240 4262 	movw	r2, #1122	; 0x462
 8008656:	4925      	ldr	r1, [pc, #148]	; (80086ec <etharp_raw+0xd4>)
 8008658:	4823      	ldr	r0, [pc, #140]	; (80086e8 <etharp_raw+0xd0>)
 800865a:	f006 fcbb 	bl	800efd4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800865e:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008660:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8008664:	f001 f94e 	bl	8009904 <lwip_htons>
 8008668:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800866a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800866e:	2b06      	cmp	r3, #6
 8008670:	d006      	beq.n	8008680 <etharp_raw+0x68>
 8008672:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <etharp_raw+0xc8>)
 8008674:	f240 4269 	movw	r2, #1129	; 0x469
 8008678:	491d      	ldr	r1, [pc, #116]	; (80086f0 <etharp_raw+0xd8>)
 800867a:	481b      	ldr	r0, [pc, #108]	; (80086e8 <etharp_raw+0xd0>)
 800867c:	f006 fcaa 	bl	800efd4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008680:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008682:	4642      	mov	r2, r8
 8008684:	4629      	mov	r1, r5
 8008686:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008688:	60a3      	str	r3, [r4, #8]
 800868a:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800868c:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800868e:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008690:	f8da 3000 	ldr.w	r3, [sl]
 8008694:	f8c4 3012 	str.w	r3, [r4, #18]
 8008698:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800869c:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800869e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80086a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a8:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80086aa:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80086ac:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80086ae:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80086b0:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80086b2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80086b4:	2308      	movs	r3, #8
 80086b6:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80086b8:	2306      	movs	r3, #6
 80086ba:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80086bc:	2304      	movs	r3, #4
 80086be:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80086c0:	f640 0306 	movw	r3, #2054	; 0x806
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	464b      	mov	r3, r9
 80086c8:	f005 fe72 	bl	800e3b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80086cc:	4628      	mov	r0, r5
 80086ce:	f001 fe6f 	bl	800a3b0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80086d2:	4630      	mov	r0, r6
}
 80086d4:	b002      	add	sp, #8
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	e7f9      	b.n	80086d4 <etharp_raw+0xbc>
 80086e0:	0801b80c 	.word	0x0801b80c
 80086e4:	0801b69d 	.word	0x0801b69d
 80086e8:	0801a72c 	.word	0x0801a72c
 80086ec:	0801b8b2 	.word	0x0801b8b2
 80086f0:	0801b8e3 	.word	0x0801b8e3

080086f4 <etharp_cleanup_netif>:
{
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4606      	mov	r6, r0
 80086f8:	4d07      	ldr	r5, [pc, #28]	; (8008718 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80086fa:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80086fc:	7d2b      	ldrb	r3, [r5, #20]
 80086fe:	b12b      	cbz	r3, 800870c <etharp_cleanup_netif+0x18>
 8008700:	68ab      	ldr	r3, [r5, #8]
 8008702:	42b3      	cmp	r3, r6
 8008704:	d102      	bne.n	800870c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8008706:	4620      	mov	r0, r4
 8008708:	f7ff fee4 	bl	80084d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800870c:	3401      	adds	r4, #1
 800870e:	3518      	adds	r5, #24
 8008710:	2c0a      	cmp	r4, #10
 8008712:	d1f3      	bne.n	80086fc <etharp_cleanup_netif+0x8>
}
 8008714:	bd70      	pop	{r4, r5, r6, pc}
 8008716:	bf00      	nop
 8008718:	200069d8 	.word	0x200069d8

0800871c <etharp_input>:
{
 800871c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	4607      	mov	r7, r0
 8008722:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008724:	460c      	mov	r4, r1
 8008726:	b949      	cbnz	r1, 800873c <etharp_input+0x20>
 8008728:	4b4f      	ldr	r3, [pc, #316]	; (8008868 <etharp_input+0x14c>)
 800872a:	f240 228a 	movw	r2, #650	; 0x28a
 800872e:	494f      	ldr	r1, [pc, #316]	; (800886c <etharp_input+0x150>)
 8008730:	484f      	ldr	r0, [pc, #316]	; (8008870 <etharp_input+0x154>)
}
 8008732:	b008      	add	sp, #32
 8008734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008738:	f006 bc4c 	b.w	800efd4 <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 800873c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800873e:	882b      	ldrh	r3, [r5, #0]
 8008740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008744:	d108      	bne.n	8008758 <etharp_input+0x3c>
 8008746:	792b      	ldrb	r3, [r5, #4]
 8008748:	2b06      	cmp	r3, #6
 800874a:	d105      	bne.n	8008758 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800874c:	796b      	ldrb	r3, [r5, #5]
 800874e:	2b04      	cmp	r3, #4
 8008750:	d102      	bne.n	8008758 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008752:	886b      	ldrh	r3, [r5, #2]
 8008754:	2b08      	cmp	r3, #8
 8008756:	d005      	beq.n	8008764 <etharp_input+0x48>
    pbuf_free(p);
 8008758:	4638      	mov	r0, r7
}
 800875a:	b008      	add	sp, #32
 800875c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8008760:	f001 be26 	b.w	800a3b0 <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008764:	f8d5 300e 	ldr.w	r3, [r5, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008768:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800876c:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800876e:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008770:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008772:	2e00      	cmp	r6, #0
 8008774:	d05e      	beq.n	8008834 <etharp_input+0x118>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008776:	1af3      	subs	r3, r6, r3
 8008778:	425e      	negs	r6, r3
 800877a:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800877c:	f1c6 0a02 	rsb	sl, r6, #2
 8008780:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008784:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008788:	2b06      	cmp	r3, #6
 800878a:	d006      	beq.n	800879a <etharp_input+0x7e>
 800878c:	4b36      	ldr	r3, [pc, #216]	; (8008868 <etharp_input+0x14c>)
 800878e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008792:	4938      	ldr	r1, [pc, #224]	; (8008874 <etharp_input+0x158>)
 8008794:	4836      	ldr	r0, [pc, #216]	; (8008870 <etharp_input+0x154>)
 8008796:	f006 fc1d 	bl	800efd4 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800879a:	9807      	ldr	r0, [sp, #28]
 800879c:	2800      	cmp	r0, #0
 800879e:	d03c      	beq.n	800881a <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80087a0:	4621      	mov	r1, r4
 80087a2:	f000 fcba 	bl	800911a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80087a6:	4681      	mov	r9, r0
 80087a8:	bbb8      	cbnz	r0, 800881a <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 80087aa:	9b07      	ldr	r3, [sp, #28]
 80087ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80087b0:	2be0      	cmp	r3, #224	; 0xe0
 80087b2:	d032      	beq.n	800881a <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 80087b4:	4622      	mov	r2, r4
 80087b6:	4651      	mov	r1, sl
 80087b8:	a807      	add	r0, sp, #28
 80087ba:	f7ff fe9f 	bl	80084fc <etharp_find_entry>
  if (i < 0) {
 80087be:	1e03      	subs	r3, r0, #0
 80087c0:	db2b      	blt.n	800881a <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80087c2:	2018      	movs	r0, #24
 80087c4:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <etharp_input+0x15c>)
 80087c6:	f04f 0e02 	mov.w	lr, #2
 80087ca:	fb00 fc03 	mul.w	ip, r0, r3
 80087ce:	eb02 010c 	add.w	r1, r2, ip
 80087d2:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80087d6:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 80087da:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80087dc:	fb13 e300 	smlabb	r3, r3, r0, lr
 80087e0:	68a8      	ldr	r0, [r5, #8]
 80087e2:	eb02 0e03 	add.w	lr, r2, r3
 80087e6:	50d0      	str	r0, [r2, r3]
 80087e8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80087ec:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 80087f0:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 80087f4:	f852 100c 	ldr.w	r1, [r2, ip]
 80087f8:	b179      	cbz	r1, 800881a <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80087fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 80087fe:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008802:	4620      	mov	r0, r4
 8008804:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	4643      	mov	r3, r8
 800880c:	9105      	str	r1, [sp, #20]
 800880e:	f005 fdcf 	bl	800e3b0 <ethernet_output>
    pbuf_free(p);
 8008812:	9905      	ldr	r1, [sp, #20]
 8008814:	4608      	mov	r0, r1
 8008816:	f001 fdcb 	bl	800a3b0 <pbuf_free>
  switch (hdr->opcode) {
 800881a:	88eb      	ldrh	r3, [r5, #6]
 800881c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008820:	d00b      	beq.n	800883a <etharp_input+0x11e>
 8008822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008826:	d019      	beq.n	800885c <etharp_input+0x140>
  pbuf_free(p);
 8008828:	4638      	mov	r0, r7
 800882a:	f001 fdc1 	bl	800a3b0 <pbuf_free>
}
 800882e:	b008      	add	sp, #32
 8008830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008834:	f04f 0a02 	mov.w	sl, #2
 8008838:	e7a4      	b.n	8008784 <etharp_input+0x68>
      if (for_us) {
 800883a:	2e00      	cmp	r6, #0
 800883c:	d0f4      	beq.n	8008828 <etharp_input+0x10c>
        etharp_raw(netif,
 800883e:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008840:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 8008844:	4620      	mov	r0, r4
 8008846:	9203      	str	r2, [sp, #12]
 8008848:	aa07      	add	r2, sp, #28
 800884a:	4619      	mov	r1, r3
 800884c:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008850:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8008852:	9200      	str	r2, [sp, #0]
 8008854:	4642      	mov	r2, r8
 8008856:	f7ff fedf 	bl	8008618 <etharp_raw>
 800885a:	e7e5      	b.n	8008828 <etharp_input+0x10c>
      dhcp_arp_reply(netif, &sipaddr);
 800885c:	a907      	add	r1, sp, #28
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff fba4 	bl	8007fac <dhcp_arp_reply>
      break;
 8008864:	e7e0      	b.n	8008828 <etharp_input+0x10c>
 8008866:	bf00      	nop
 8008868:	0801b80c 	.word	0x0801b80c
 800886c:	0801b69d 	.word	0x0801b69d
 8008870:	0801a72c 	.word	0x0801a72c
 8008874:	0801b965 	.word	0x0801b965
 8008878:	200069d8 	.word	0x200069d8

0800887c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800887c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800887e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008880:	2401      	movs	r4, #1
 8008882:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008886:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008888:	e9cd 1402 	strd	r1, r4, [sp, #8]
 800888c:	4904      	ldr	r1, [pc, #16]	; (80088a0 <etharp_request+0x24>)
 800888e:	9200      	str	r2, [sp, #0]
 8008890:	9101      	str	r1, [sp, #4]
 8008892:	4619      	mov	r1, r3
 8008894:	4a03      	ldr	r2, [pc, #12]	; (80088a4 <etharp_request+0x28>)
 8008896:	f7ff febf 	bl	8008618 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800889a:	b004      	add	sp, #16
 800889c:	bd10      	pop	{r4, pc}
 800889e:	bf00      	nop
 80088a0:	08011a0e 	.word	0x08011a0e
 80088a4:	08011a08 	.word	0x08011a08

080088a8 <etharp_tmr>:
{
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	4c13      	ldr	r4, [pc, #76]	; (80088f8 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80088ac:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80088ae:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80088b0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80088b2:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 80088b4:	b16a      	cbz	r2, 80088d2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80088b6:	8a63      	ldrh	r3, [r4, #18]
 80088b8:	3301      	adds	r3, #1
 80088ba:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80088bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80088c0:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80088c2:	d203      	bcs.n	80088cc <etharp_tmr+0x24>
 80088c4:	2a01      	cmp	r2, #1
 80088c6:	d109      	bne.n	80088dc <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d90f      	bls.n	80088ec <etharp_tmr+0x44>
        etharp_free_entry(i);
 80088cc:	4628      	mov	r0, r5
 80088ce:	f7ff fe01 	bl	80084d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80088d2:	3501      	adds	r5, #1
 80088d4:	3418      	adds	r4, #24
 80088d6:	2d0a      	cmp	r5, #10
 80088d8:	d1eb      	bne.n	80088b2 <etharp_tmr+0xa>
}
 80088da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80088dc:	2a03      	cmp	r2, #3
 80088de:	d101      	bne.n	80088e4 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80088e0:	7527      	strb	r7, [r4, #20]
 80088e2:	e7f6      	b.n	80088d2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80088e4:	2a04      	cmp	r2, #4
 80088e6:	d1f4      	bne.n	80088d2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80088e8:	7526      	strb	r6, [r4, #20]
 80088ea:	e7f2      	b.n	80088d2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80088ec:	1d21      	adds	r1, r4, #4
 80088ee:	68a0      	ldr	r0, [r4, #8]
 80088f0:	f7ff ffc4 	bl	800887c <etharp_request>
 80088f4:	e7ed      	b.n	80088d2 <etharp_tmr+0x2a>
 80088f6:	bf00      	nop
 80088f8:	200069d8 	.word	0x200069d8

080088fc <etharp_output_to_arp_index>:
{
 80088fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008900:	4f24      	ldr	r7, [pc, #144]	; (8008994 <etharp_output_to_arp_index+0x98>)
 8008902:	2318      	movs	r3, #24
{
 8008904:	4606      	mov	r6, r0
 8008906:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008908:	fb03 7302 	mla	r3, r3, r2, r7
{
 800890c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800890e:	7d1b      	ldrb	r3, [r3, #20]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d806      	bhi.n	8008922 <etharp_output_to_arp_index+0x26>
 8008914:	4b20      	ldr	r3, [pc, #128]	; (8008998 <etharp_output_to_arp_index+0x9c>)
 8008916:	f240 22ee 	movw	r2, #750	; 0x2ee
 800891a:	4920      	ldr	r1, [pc, #128]	; (800899c <etharp_output_to_arp_index+0xa0>)
 800891c:	4820      	ldr	r0, [pc, #128]	; (80089a0 <etharp_output_to_arp_index+0xa4>)
 800891e:	f006 fb59 	bl	800efd4 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008922:	2218      	movs	r2, #24
 8008924:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008928:	f106 092a 	add.w	r9, r6, #42	; 0x2a
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800892c:	fb02 7404 	mla	r4, r2, r4, r7
 8008930:	00ed      	lsls	r5, r5, #3
 8008932:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008934:	f105 0a0c 	add.w	sl, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008938:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800893a:	44ba      	add	sl, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800893c:	d10b      	bne.n	8008956 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800893e:	8a63      	ldrh	r3, [r4, #18]
 8008940:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008944:	d913      	bls.n	800896e <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008946:	3504      	adds	r5, #4
 8008948:	4630      	mov	r0, r6
 800894a:	1979      	adds	r1, r7, r5
 800894c:	f7ff ff96 	bl	800887c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008950:	b908      	cbnz	r0, 8008956 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008952:	2303      	movs	r3, #3
 8008954:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800895a:	464a      	mov	r2, r9
 800895c:	4641      	mov	r1, r8
 800895e:	4630      	mov	r0, r6
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4653      	mov	r3, sl
 8008964:	f005 fd24 	bl	800e3b0 <ethernet_output>
}
 8008968:	b004      	add	sp, #16
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800896e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008972:	d3f0      	bcc.n	8008956 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008974:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008976:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008978:	4652      	mov	r2, sl
 800897a:	4649      	mov	r1, r9
 800897c:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800897e:	443d      	add	r5, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008980:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <etharp_output_to_arp_index+0xa8>)
 8008982:	4630      	mov	r0, r6
 8008984:	9502      	str	r5, [sp, #8]
 8008986:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008988:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	464b      	mov	r3, r9
 800898e:	f7ff fe43 	bl	8008618 <etharp_raw>
 8008992:	e7dd      	b.n	8008950 <etharp_output_to_arp_index+0x54>
 8008994:	200069d8 	.word	0x200069d8
 8008998:	0801b80c 	.word	0x0801b80c
 800899c:	0801b989 	.word	0x0801b989
 80089a0:	0801a72c 	.word	0x0801a72c
 80089a4:	08011a0e 	.word	0x08011a0e

080089a8 <etharp_query>:
{
 80089a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	4688      	mov	r8, r1
 80089ae:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80089b0:	4601      	mov	r1, r0
{
 80089b2:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80089b4:	f8d8 0000 	ldr.w	r0, [r8]
 80089b8:	f000 fbaf 	bl	800911a <ip4_addr_isbroadcast_u32>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d16a      	bne.n	8008a96 <etharp_query+0xee>
      ip4_addr_ismulticast(ipaddr) ||
 80089c0:	f8d8 3000 	ldr.w	r3, [r8]
 80089c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80089c8:	2ae0      	cmp	r2, #224	; 0xe0
 80089ca:	d064      	beq.n	8008a96 <etharp_query+0xee>
      ip4_addr_isany(ipaddr)) {
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d062      	beq.n	8008a96 <etharp_query+0xee>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80089d0:	4632      	mov	r2, r6
 80089d2:	2101      	movs	r1, #1
 80089d4:	4640      	mov	r0, r8
 80089d6:	f7ff fd91 	bl	80084fc <etharp_find_entry>
  if (i_err < 0) {
 80089da:	1e04      	subs	r4, r0, #0
 80089dc:	da03      	bge.n	80089e6 <etharp_query+0x3e>
    return (err_t)i_err;
 80089de:	b260      	sxtb	r0, r4
}
 80089e0:	b002      	add	sp, #8
 80089e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80089e6:	2c7e      	cmp	r4, #126	; 0x7e
 80089e8:	dd06      	ble.n	80089f8 <etharp_query+0x50>
 80089ea:	4b35      	ldr	r3, [pc, #212]	; (8008ac0 <etharp_query+0x118>)
 80089ec:	f240 32c1 	movw	r2, #961	; 0x3c1
 80089f0:	4934      	ldr	r1, [pc, #208]	; (8008ac4 <etharp_query+0x11c>)
 80089f2:	4835      	ldr	r0, [pc, #212]	; (8008ac8 <etharp_query+0x120>)
 80089f4:	f006 faee 	bl	800efd4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80089f8:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80089fa:	4f34      	ldr	r7, [pc, #208]	; (8008acc <etharp_query+0x124>)
 80089fc:	2318      	movs	r3, #24
 80089fe:	fb03 7304 	mla	r3, r3, r4, r7
 8008a02:	7d1a      	ldrb	r2, [r3, #20]
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	d155      	bne.n	8008ab4 <etharp_query+0x10c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008a08:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 8008a0a:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008a0c:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 8008a0e:	4641      	mov	r1, r8
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff ff33 	bl	800887c <etharp_request>
    if (q == NULL) {
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	d0e2      	beq.n	80089e0 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008a1a:	2318      	movs	r3, #24
 8008a1c:	fb03 7204 	mla	r2, r3, r4, r7
 8008a20:	7d12      	ldrb	r2, [r2, #20]
 8008a22:	2a01      	cmp	r2, #1
 8008a24:	d90e      	bls.n	8008a44 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008a26:	fb03 7304 	mla	r3, r3, r4, r7
 8008a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4630      	mov	r0, r6
 8008a32:	9200      	str	r2, [sp, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	f106 022a 	add.w	r2, r6, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 8008a3a:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008a3e:	f005 fcb7 	bl	800e3b0 <ethernet_output>
 8008a42:	e7cd      	b.n	80089e0 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008a44:	d1cc      	bne.n	80089e0 <etharp_query+0x38>
 8008a46:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008a48:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8008ac0 <etharp_query+0x118>
 8008a4c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8008ad0 <etharp_query+0x128>
 8008a50:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008ac8 <etharp_query+0x120>
 8008a54:	8972      	ldrh	r2, [r6, #10]
 8008a56:	8933      	ldrh	r3, [r6, #8]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d108      	bne.n	8008a6e <etharp_query+0xc6>
 8008a5c:	6833      	ldr	r3, [r6, #0]
 8008a5e:	b133      	cbz	r3, 8008a6e <etharp_query+0xc6>
 8008a60:	4643      	mov	r3, r8
 8008a62:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008a66:	4649      	mov	r1, r9
 8008a68:	4650      	mov	r0, sl
 8008a6a:	f006 fab3 	bl	800efd4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008a6e:	7b33      	ldrb	r3, [r6, #12]
 8008a70:	065b      	lsls	r3, r3, #25
 8008a72:	d413      	bmi.n	8008a9c <etharp_query+0xf4>
      p = p->next;
 8008a74:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	d1ec      	bne.n	8008a54 <etharp_query+0xac>
      pbuf_ref(p);
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f001 fddc 	bl	800a638 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8008a80:	2618      	movs	r6, #24
 8008a82:	fb06 f304 	mul.w	r3, r6, r4
 8008a86:	58f8      	ldr	r0, [r7, r3]
 8008a88:	b108      	cbz	r0, 8008a8e <etharp_query+0xe6>
        pbuf_free(arp_table[i].q);
 8008a8a:	f001 fc91 	bl	800a3b0 <pbuf_free>
      arp_table[i].q = p;
 8008a8e:	4374      	muls	r4, r6
      result = ERR_OK;
 8008a90:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8008a92:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8008a94:	e7a4      	b.n	80089e0 <etharp_query+0x38>
    return ERR_ARG;
 8008a96:	f06f 000f 	mvn.w	r0, #15
 8008a9a:	e7a1      	b.n	80089e0 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008aa2:	200e      	movs	r0, #14
 8008aa4:	f001 fef0 	bl	800a888 <pbuf_clone>
    if (p != NULL) {
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d1e8      	bne.n	8008a80 <etharp_query+0xd8>
      result = ERR_MEM;
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	e795      	b.n	80089e0 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8008ab4:	2d00      	cmp	r5, #0
 8008ab6:	d0aa      	beq.n	8008a0e <etharp_query+0x66>
  err_t result = ERR_MEM;
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	e7ad      	b.n	8008a1a <etharp_query+0x72>
 8008abe:	bf00      	nop
 8008ac0:	0801b80c 	.word	0x0801b80c
 8008ac4:	0801b9b9 	.word	0x0801b9b9
 8008ac8:	0801a72c 	.word	0x0801a72c
 8008acc:	200069d8 	.word	0x200069d8
 8008ad0:	0801b9c7 	.word	0x0801b9c7

08008ad4 <etharp_output>:
{
 8008ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad6:	460e      	mov	r6, r1
 8008ad8:	b085      	sub	sp, #20
 8008ada:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008adc:	4604      	mov	r4, r0
 8008ade:	b930      	cbnz	r0, 8008aee <etharp_output+0x1a>
 8008ae0:	4b44      	ldr	r3, [pc, #272]	; (8008bf4 <etharp_output+0x120>)
 8008ae2:	f240 321e 	movw	r2, #798	; 0x31e
 8008ae6:	4944      	ldr	r1, [pc, #272]	; (8008bf8 <etharp_output+0x124>)
 8008ae8:	4844      	ldr	r0, [pc, #272]	; (8008bfc <etharp_output+0x128>)
 8008aea:	f006 fa73 	bl	800efd4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008aee:	b936      	cbnz	r6, 8008afe <etharp_output+0x2a>
 8008af0:	4b40      	ldr	r3, [pc, #256]	; (8008bf4 <etharp_output+0x120>)
 8008af2:	f240 321f 	movw	r2, #799	; 0x31f
 8008af6:	4942      	ldr	r1, [pc, #264]	; (8008c00 <etharp_output+0x12c>)
 8008af8:	4840      	ldr	r0, [pc, #256]	; (8008bfc <etharp_output+0x128>)
 8008afa:	f006 fa6b 	bl	800efd4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008afe:	b935      	cbnz	r5, 8008b0e <etharp_output+0x3a>
 8008b00:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <etharp_output+0x120>)
 8008b02:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008b06:	493f      	ldr	r1, [pc, #252]	; (8008c04 <etharp_output+0x130>)
 8008b08:	483c      	ldr	r0, [pc, #240]	; (8008bfc <etharp_output+0x128>)
 8008b0a:	f006 fa63 	bl	800efd4 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008b0e:	4621      	mov	r1, r4
 8008b10:	6828      	ldr	r0, [r5, #0]
 8008b12:	f000 fb02 	bl	800911a <ip4_addr_isbroadcast_u32>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d167      	bne.n	8008bea <etharp_output+0x116>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b20:	2ae0      	cmp	r2, #224	; 0xe0
 8008b22:	d11e      	bne.n	8008b62 <etharp_output+0x8e>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008b24:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008b26:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008b2a:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008b2e:	235e      	movs	r3, #94	; 0x5e
 8008b30:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008b34:	786b      	ldrb	r3, [r5, #1]
 8008b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008b3e:	78ab      	ldrb	r3, [r5, #2]
 8008b40:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008b44:	78eb      	ldrb	r3, [r5, #3]
 8008b46:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8008b4a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b50:	4631      	mov	r1, r6
 8008b52:	4620      	mov	r0, r4
 8008b54:	9200      	str	r2, [sp, #0]
 8008b56:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8008b5a:	f005 fc29 	bl	800e3b0 <ethernet_output>
}
 8008b5e:	b005      	add	sp, #20
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008b62:	6862      	ldr	r2, [r4, #4]
 8008b64:	68a1      	ldr	r1, [r4, #8]
 8008b66:	405a      	eors	r2, r3
 8008b68:	420a      	tst	r2, r1
 8008b6a:	d009      	beq.n	8008b80 <etharp_output+0xac>
        !ip4_addr_islinklocal(ipaddr)) {
 8008b6c:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008b6e:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d004      	beq.n	8008b80 <etharp_output+0xac>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d038      	beq.n	8008bee <etharp_output+0x11a>
            dst_addr = netif_ip4_gw(netif);
 8008b7c:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008b80:	4821      	ldr	r0, [pc, #132]	; (8008c08 <etharp_output+0x134>)
 8008b82:	2318      	movs	r3, #24
 8008b84:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8008b88:	fb03 0302 	mla	r3, r3, r2, r0
 8008b8c:	7d19      	ldrb	r1, [r3, #20]
 8008b8e:	2901      	cmp	r1, #1
 8008b90:	d90d      	bls.n	8008bae <etharp_output+0xda>
 8008b92:	6899      	ldr	r1, [r3, #8]
 8008b94:	42a1      	cmp	r1, r4
 8008b96:	d10a      	bne.n	8008bae <etharp_output+0xda>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008b98:	6829      	ldr	r1, [r5, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	4299      	cmp	r1, r3
 8008b9e:	d106      	bne.n	8008bae <etharp_output+0xda>
        return etharp_output_to_arp_index(netif, q, i);
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4620      	mov	r0, r4
}
 8008ba4:	b005      	add	sp, #20
 8008ba6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8008baa:	f7ff bea7 	b.w	80088fc <etharp_output_to_arp_index>
 8008bae:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <etharp_output+0x134>)
{
 8008bb0:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008bb2:	7d1f      	ldrb	r7, [r3, #20]
 8008bb4:	fa5f fc81 	uxtb.w	ip, r1
 8008bb8:	2f01      	cmp	r7, #1
 8008bba:	d90a      	bls.n	8008bd2 <etharp_output+0xfe>
 8008bbc:	689f      	ldr	r7, [r3, #8]
 8008bbe:	42a7      	cmp	r7, r4
 8008bc0:	d107      	bne.n	8008bd2 <etharp_output+0xfe>
          (arp_table[i].netif == netif) &&
 8008bc2:	685f      	ldr	r7, [r3, #4]
 8008bc4:	682a      	ldr	r2, [r5, #0]
 8008bc6:	42ba      	cmp	r2, r7
 8008bc8:	d103      	bne.n	8008bd2 <etharp_output+0xfe>
        return etharp_output_to_arp_index(netif, q, i);
 8008bca:	4662      	mov	r2, ip
        ETHARP_SET_ADDRHINT(netif, i);
 8008bcc:	f880 c0f0 	strb.w	ip, [r0, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 8008bd0:	e7e6      	b.n	8008ba0 <etharp_output+0xcc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008bd2:	3101      	adds	r1, #1
 8008bd4:	3318      	adds	r3, #24
 8008bd6:	290a      	cmp	r1, #10
 8008bd8:	d1eb      	bne.n	8008bb2 <etharp_output+0xde>
    return etharp_query(netif, dst_addr, q);
 8008bda:	4632      	mov	r2, r6
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4620      	mov	r0, r4
}
 8008be0:	b005      	add	sp, #20
 8008be2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 8008be6:	f7ff bedf 	b.w	80089a8 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 8008bea:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <etharp_output+0x138>)
 8008bec:	e7ae      	b.n	8008b4c <etharp_output+0x78>
            return ERR_RTE;
 8008bee:	f06f 0003 	mvn.w	r0, #3
 8008bf2:	e7b4      	b.n	8008b5e <etharp_output+0x8a>
 8008bf4:	0801b80c 	.word	0x0801b80c
 8008bf8:	0801b69d 	.word	0x0801b69d
 8008bfc:	0801a72c 	.word	0x0801a72c
 8008c00:	0801c3e0 	.word	0x0801c3e0
 8008c04:	0801b946 	.word	0x0801b946
 8008c08:	200069d8 	.word	0x200069d8
 8008c0c:	08011a08 	.word	0x08011a08

08008c10 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	4604      	mov	r4, r0
 8008c14:	b087      	sub	sp, #28
 8008c16:	460f      	mov	r7, r1
 8008c18:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008c1a:	2124      	movs	r1, #36	; 0x24
 8008c1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008c20:	2022      	movs	r0, #34	; 0x22
 8008c22:	f001 fc2d 	bl	800a480 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8008c26:	4605      	mov	r5, r0
 8008c28:	b390      	cbz	r0, 8008c90 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008c2a:	8943      	ldrh	r3, [r0, #10]
 8008c2c:	2b23      	cmp	r3, #35	; 0x23
 8008c2e:	d806      	bhi.n	8008c3e <icmp_send_response+0x2e>
 8008c30:	4b18      	ldr	r3, [pc, #96]	; (8008c94 <icmp_send_response+0x84>)
 8008c32:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008c36:	4918      	ldr	r1, [pc, #96]	; (8008c98 <icmp_send_response+0x88>)
 8008c38:	4818      	ldr	r0, [pc, #96]	; (8008c9c <icmp_send_response+0x8c>)
 8008c3a:	f006 f9cb 	bl	800efd4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8008c3e:	6860      	ldr	r0, [r4, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8008c40:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8008c42:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008c44:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8008c48:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008c4a:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8008c4e:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8008c50:	71a3      	strb	r3, [r4, #6]
 8008c52:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008c54:	4603      	mov	r3, r0
  icmphdr->type = type;
 8008c56:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8008c58:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008c5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	f842 6b04 	str.w	r6, [r2], #4
 8008c64:	d1f9      	bne.n	8008c5a <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8008c66:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008c68:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8008c6a:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8008c6c:	f000 f8d6 	bl	8008e1c <ip4_route>
#endif
  if (netif != NULL) {
 8008c70:	b158      	cbz	r0, 8008c8a <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8008c72:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008c74:	2301      	movs	r3, #1
 8008c76:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 8008c78:	70a1      	strb	r1, [r4, #2]
 8008c7a:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008c7c:	9002      	str	r0, [sp, #8]
 8008c7e:	4628      	mov	r0, r5
 8008c80:	e9cd 1300 	strd	r1, r3, [sp]
 8008c84:	23ff      	movs	r3, #255	; 0xff
 8008c86:	f000 fa37 	bl	80090f8 <ip4_output_if>
  }
  pbuf_free(q);
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f001 fb90 	bl	800a3b0 <pbuf_free>
}
 8008c90:	b007      	add	sp, #28
 8008c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c94:	0801b9e1 	.word	0x0801b9e1
 8008c98:	0801ba45 	.word	0x0801ba45
 8008c9c:	0801a72c 	.word	0x0801a72c

08008ca0 <icmp_input>:
{
 8008ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8008ca4:	4f46      	ldr	r7, [pc, #280]	; (8008dc0 <icmp_input+0x120>)
{
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	4604      	mov	r4, r0
 8008caa:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8008cac:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8008cb0:	f899 5000 	ldrb.w	r5, [r9]
 8008cb4:	f005 050f 	and.w	r5, r5, #15
 8008cb8:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8008cba:	2d13      	cmp	r5, #19
 8008cbc:	d916      	bls.n	8008cec <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 8008cbe:	8943      	ldrh	r3, [r0, #10]
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d913      	bls.n	8008cec <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 8008cc4:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d10f      	bne.n	8008cec <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ccc:	6978      	ldr	r0, [r7, #20]
 8008cce:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8008cd2:	2be0      	cmp	r3, #224	; 0xe0
 8008cd4:	d00a      	beq.n	8008cec <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	f000 fa1f 	bl	800911a <ip4_addr_isbroadcast_u32>
 8008cdc:	b930      	cbnz	r0, 8008cec <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8008cde:	8923      	ldrh	r3, [r4, #8]
 8008ce0:	2b07      	cmp	r3, #7
 8008ce2:	d903      	bls.n	8008cec <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fe3f 	bl	8009968 <inet_chksum_pbuf>
 8008cea:	b128      	cbz	r0, 8008cf8 <icmp_input+0x58>
  pbuf_free(p);
 8008cec:	4620      	mov	r0, r4
}
 8008cee:	b007      	add	sp, #28
 8008cf0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8008cf4:	f001 bb5c 	b.w	800a3b0 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008cf8:	f105 010e 	add.w	r1, r5, #14
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	9105      	str	r1, [sp, #20]
 8008d00:	f001 fb1e 	bl	800a340 <pbuf_add_header>
 8008d04:	9905      	ldr	r1, [sp, #20]
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d04e      	beq.n	8008da8 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008d0a:	8923      	ldrh	r3, [r4, #8]
 8008d0c:	1959      	adds	r1, r3, r5
 8008d0e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8008d10:	428b      	cmp	r3, r1
 8008d12:	d8eb      	bhi.n	8008cec <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8008d14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008d18:	200e      	movs	r0, #14
 8008d1a:	f001 fbb1 	bl	800a480 <pbuf_alloc>
        if (r == NULL) {
 8008d1e:	4606      	mov	r6, r0
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d0e3      	beq.n	8008cec <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008d24:	8942      	ldrh	r2, [r0, #10]
 8008d26:	f105 0308 	add.w	r3, r5, #8
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d203      	bcs.n	8008d36 <icmp_input+0x96>
          pbuf_free(r);
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f001 fb3e 	bl	800a3b0 <pbuf_free>
          goto icmperr;
 8008d34:	e7da      	b.n	8008cec <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8008d36:	4649      	mov	r1, r9
 8008d38:	462a      	mov	r2, r5
 8008d3a:	6840      	ldr	r0, [r0, #4]
 8008d3c:	f005 fcb0 	bl	800e6a0 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8008d40:	4629      	mov	r1, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	f001 fb00 	bl	800a348 <pbuf_remove_header>
 8008d48:	b130      	cbz	r0, 8008d58 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008d4a:	4b1e      	ldr	r3, [pc, #120]	; (8008dc4 <icmp_input+0x124>)
 8008d4c:	22b6      	movs	r2, #182	; 0xb6
 8008d4e:	491e      	ldr	r1, [pc, #120]	; (8008dc8 <icmp_input+0x128>)
 8008d50:	481e      	ldr	r0, [pc, #120]	; (8008dcc <icmp_input+0x12c>)
 8008d52:	f006 f93f 	bl	800efd4 <iprintf>
          pbuf_free(r);
 8008d56:	e7ea      	b.n	8008d2e <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f001 fccc 	bl	800a6f8 <pbuf_copy>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d1e4      	bne.n	8008d2e <icmp_input+0x8e>
        pbuf_free(p);
 8008d64:	4620      	mov	r0, r4
 8008d66:	4634      	mov	r4, r6
 8008d68:	f001 fb22 	bl	800a3b0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8008d70:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8008d72:	f001 fae5 	bl	800a340 <pbuf_add_header>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d1b8      	bne.n	8008cec <icmp_input+0x4c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008d7a:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8008d7c:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008d7e:	4914      	ldr	r1, [pc, #80]	; (8008dd0 <icmp_input+0x130>)
        ip4_addr_copy(iphdr->src, *src);
 8008d80:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008d86:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8008d88:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8008d8a:	70b0      	strb	r0, [r6, #2]
 8008d8c:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008d8e:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008d90:	7290      	strb	r0, [r2, #10]
 8008d92:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008d94:	2201      	movs	r2, #1
 8008d96:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d9a:	e9cd 0200 	strd	r0, r2, [sp]
 8008d9e:	4602      	mov	r2, r0
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 f9a9 	bl	80090f8 <ip4_output_if>
  pbuf_free(p);
 8008da6:	e7a1      	b.n	8008cec <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008da8:	4620      	mov	r0, r4
 8008daa:	f001 facd 	bl	800a348 <pbuf_remove_header>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d0dc      	beq.n	8008d6c <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8008db2:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <icmp_input+0x124>)
 8008db4:	22c7      	movs	r2, #199	; 0xc7
 8008db6:	4907      	ldr	r1, [pc, #28]	; (8008dd4 <icmp_input+0x134>)
 8008db8:	4804      	ldr	r0, [pc, #16]	; (8008dcc <icmp_input+0x12c>)
 8008dba:	f006 f90b 	bl	800efd4 <iprintf>
          goto icmperr;
 8008dbe:	e795      	b.n	8008cec <icmp_input+0x4c>
 8008dc0:	20006ad4 	.word	0x20006ad4
 8008dc4:	0801b9e1 	.word	0x0801b9e1
 8008dc8:	0801ba71 	.word	0x0801ba71
 8008dcc:	0801a72c 	.word	0x0801a72c
 8008dd0:	20006ae8 	.word	0x20006ae8
 8008dd4:	0801baa6 	.word	0x0801baa6

08008dd8 <icmp_dest_unreach>:
{
 8008dd8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8008dda:	2103      	movs	r1, #3
 8008ddc:	f7ff bf18 	b.w	8008c10 <icmp_send_response>

08008de0 <icmp_time_exceeded>:
{
 8008de0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8008de2:	210b      	movs	r1, #11
 8008de4:	f7ff bf14 	b.w	8008c10 <icmp_send_response>

08008de8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8008de8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008dea:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8008dee:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008df0:	f013 0301 	ands.w	r3, r3, #1
 8008df4:	d00b      	beq.n	8008e0e <ip4_input_accept+0x26>
 8008df6:	6843      	ldr	r3, [r0, #4]
 8008df8:	b14b      	cbz	r3, 8008e0e <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008dfa:	4a07      	ldr	r2, [pc, #28]	; (8008e18 <ip4_input_accept+0x30>)
 8008dfc:	6950      	ldr	r0, [r2, #20]
 8008dfe:	4283      	cmp	r3, r0
 8008e00:	d007      	beq.n	8008e12 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008e02:	f000 f98a 	bl	800911a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008e06:	3800      	subs	r0, #0
 8008e08:	bf18      	it	ne
 8008e0a:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8008e0c:	bd08      	pop	{r3, pc}
  return 0;
 8008e0e:	4618      	mov	r0, r3
 8008e10:	e7fc      	b.n	8008e0c <ip4_input_accept+0x24>
      return 1;
 8008e12:	2001      	movs	r0, #1
 8008e14:	e7fa      	b.n	8008e0c <ip4_input_accept+0x24>
 8008e16:	bf00      	nop
 8008e18:	20006ad4 	.word	0x20006ad4

08008e1c <ip4_route>:
  NETIF_FOREACH(netif) {
 8008e1c:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <ip4_route+0x54>)
{
 8008e1e:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8008e20:	6818      	ldr	r0, [r3, #0]
{
 8008e22:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8008e24:	b978      	cbnz	r0, 8008e46 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <ip4_route+0x58>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	b15b      	cbz	r3, 8008e44 <ip4_route+0x28>
 8008e2c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8008e30:	f001 0105 	and.w	r1, r1, #5
 8008e34:	2905      	cmp	r1, #5
 8008e36:	d105      	bne.n	8008e44 <ip4_route+0x28>
 8008e38:	6859      	ldr	r1, [r3, #4]
 8008e3a:	b119      	cbz	r1, 8008e44 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008e3c:	7812      	ldrb	r2, [r2, #0]
 8008e3e:	2a7f      	cmp	r2, #127	; 0x7f
 8008e40:	bf18      	it	ne
 8008e42:	4618      	movne	r0, r3
}
 8008e44:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008e46:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8008e4a:	07cd      	lsls	r5, r1, #31
 8008e4c:	d50d      	bpl.n	8008e6a <ip4_route+0x4e>
 8008e4e:	074c      	lsls	r4, r1, #29
 8008e50:	d50b      	bpl.n	8008e6a <ip4_route+0x4e>
 8008e52:	6843      	ldr	r3, [r0, #4]
 8008e54:	b14b      	cbz	r3, 8008e6a <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008e56:	6814      	ldr	r4, [r2, #0]
 8008e58:	6885      	ldr	r5, [r0, #8]
 8008e5a:	4063      	eors	r3, r4
 8008e5c:	422b      	tst	r3, r5
 8008e5e:	d0f1      	beq.n	8008e44 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008e60:	078b      	lsls	r3, r1, #30
 8008e62:	d402      	bmi.n	8008e6a <ip4_route+0x4e>
 8008e64:	68c3      	ldr	r3, [r0, #12]
 8008e66:	429c      	cmp	r4, r3
 8008e68:	d0ec      	beq.n	8008e44 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	e7da      	b.n	8008e24 <ip4_route+0x8>
 8008e6e:	bf00      	nop
 8008e70:	2000d050 	.word	0x2000d050
 8008e74:	2000d054 	.word	0x2000d054

08008e78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008e7c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8008e80:	4604      	mov	r4, r0
 8008e82:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8008e84:	f898 5000 	ldrb.w	r5, [r8]
 8008e88:	092b      	lsrs	r3, r5, #4
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d005      	beq.n	8008e9a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 fa8e 	bl	800a3b0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8008e94:	2000      	movs	r0, #0
 8008e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008e9a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008e9e:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008ea2:	f000 fd2f 	bl	8009904 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8008ea6:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008ea8:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008eac:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8008eae:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008eb0:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 8008eb2:	d903      	bls.n	8008ebc <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f001 fb5e 	bl	800a578 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8008ebc:	8963      	ldrh	r3, [r4, #10]
 8008ebe:	42ab      	cmp	r3, r5
 8008ec0:	d3e5      	bcc.n	8008e8e <ip4_input+0x16>
 8008ec2:	8923      	ldrh	r3, [r4, #8]
 8008ec4:	42bb      	cmp	r3, r7
 8008ec6:	d3e2      	bcc.n	8008e8e <ip4_input+0x16>
 8008ec8:	2d13      	cmp	r5, #19
 8008eca:	d9e0      	bls.n	8008e8e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8008ecc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008ed0:	4d49      	ldr	r5, [pc, #292]	; (8008ff8 <ip4_input+0x180>)
 8008ed2:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008ed8:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008edc:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008ede:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ee0:	d143      	bne.n	8008f6a <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008ee2:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8008ee6:	07db      	lsls	r3, r3, #31
 8008ee8:	d405      	bmi.n	8008ef6 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8008eea:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008eee:	2b11      	cmp	r3, #17
 8008ef0:	d053      	beq.n	8008f9a <ip4_input+0x122>
 8008ef2:	2700      	movs	r7, #0
 8008ef4:	e003      	b.n	8008efe <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008ef6:	6873      	ldr	r3, [r6, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f6      	beq.n	8008eea <ip4_input+0x72>
 8008efc:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8008efe:	6928      	ldr	r0, [r5, #16]
 8008f00:	b148      	cbz	r0, 8008f16 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008f02:	4631      	mov	r1, r6
 8008f04:	f000 f909 	bl	800911a <ip4_addr_isbroadcast_u32>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1c0      	bne.n	8008e8e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8008f0c:	692b      	ldr	r3, [r5, #16]
 8008f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008f12:	2be0      	cmp	r3, #224	; 0xe0
 8008f14:	d0bb      	beq.n	8008e8e <ip4_input+0x16>
  if (netif == NULL) {
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	d0b9      	beq.n	8008e8e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8008f1a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8008f1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f22:	b13b      	cbz	r3, 8008f34 <ip4_input+0xbc>
    p = ip4_reass(p);
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 fa2b 	bl	8009380 <ip4_reass>
    if (p == NULL) {
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d0b1      	beq.n	8008e94 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8008f30:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8008f34:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008f38:	4649      	mov	r1, r9
 8008f3a:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8008f3c:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8008f40:	f898 3000 	ldrb.w	r3, [r8]
 8008f44:	f003 030f 	and.w	r3, r3, #15
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008f4c:	f001 f9fc 	bl	800a348 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8008f50:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008f54:	2b06      	cmp	r3, #6
 8008f56:	d034      	beq.n	8008fc2 <ip4_input+0x14a>
 8008f58:	2b11      	cmp	r3, #17
 8008f5a:	d026      	beq.n	8008faa <ip4_input+0x132>
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d135      	bne.n	8008fcc <ip4_input+0x154>
        icmp_input(p, inp);
 8008f60:	4631      	mov	r1, r6
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7ff fe9c 	bl	8008ca0 <icmp_input>
        break;
 8008f68:	e023      	b.n	8008fb2 <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7ff ff3c 	bl	8008de8 <ip4_input_accept>
 8008f70:	b980      	cbnz	r0, 8008f94 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8008f72:	7d2b      	ldrb	r3, [r5, #20]
 8008f74:	2b7f      	cmp	r3, #127	; 0x7f
 8008f76:	d0b8      	beq.n	8008eea <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8008f78:	4b20      	ldr	r3, [pc, #128]	; (8008ffc <ip4_input+0x184>)
 8008f7a:	681f      	ldr	r7, [r3, #0]
 8008f7c:	2f00      	cmp	r7, #0
 8008f7e:	d0b4      	beq.n	8008eea <ip4_input+0x72>
          if (netif == inp) {
 8008f80:	42b7      	cmp	r7, r6
 8008f82:	d101      	bne.n	8008f88 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8008f84:	683f      	ldr	r7, [r7, #0]
 8008f86:	e7f9      	b.n	8008f7c <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ff2d 	bl	8008de8 <ip4_input_accept>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d0f8      	beq.n	8008f84 <ip4_input+0x10c>
 8008f92:	e7b4      	b.n	8008efe <ip4_input+0x86>
  if (netif == NULL) {
 8008f94:	2e00      	cmp	r6, #0
 8008f96:	d1b1      	bne.n	8008efc <ip4_input+0x84>
 8008f98:	e7a7      	b.n	8008eea <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8008f9a:	eb08 0309 	add.w	r3, r8, r9
 8008f9e:	885b      	ldrh	r3, [r3, #2]
 8008fa0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8008fa4:	d1a5      	bne.n	8008ef2 <ip4_input+0x7a>
 8008fa6:	4637      	mov	r7, r6
 8008fa8:	e7b5      	b.n	8008f16 <ip4_input+0x9e>
        udp_input(p, inp);
 8008faa:	4631      	mov	r1, r6
 8008fac:	4620      	mov	r0, r4
 8008fae:	f004 feff 	bl	800ddb0 <udp_input>
  ip_data.current_netif = NULL;
 8008fb2:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8008fb4:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 8008fb8:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 8008fba:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8008fbc:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 8008fc0:	e768      	b.n	8008e94 <ip4_input+0x1c>
        tcp_input(p, inp);
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f002 ffbf 	bl	800bf48 <tcp_input>
        break;
 8008fca:	e7f2      	b.n	8008fb2 <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008fcc:	4639      	mov	r1, r7
 8008fce:	6968      	ldr	r0, [r5, #20]
 8008fd0:	f000 f8a3 	bl	800911a <ip4_addr_isbroadcast_u32>
 8008fd4:	b960      	cbnz	r0, 8008ff0 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008fd6:	696b      	ldr	r3, [r5, #20]
 8008fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008fdc:	2be0      	cmp	r3, #224	; 0xe0
 8008fde:	d007      	beq.n	8008ff0 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f001 f9dc 	bl	800a3a0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8008fe8:	2102      	movs	r1, #2
 8008fea:	4620      	mov	r0, r4
 8008fec:	f7ff fef4 	bl	8008dd8 <icmp_dest_unreach>
        pbuf_free(p);
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f001 f9dd 	bl	800a3b0 <pbuf_free>
        break;
 8008ff6:	e7dc      	b.n	8008fb2 <ip4_input+0x13a>
 8008ff8:	20006ad4 	.word	0x20006ad4
 8008ffc:	2000d050 	.word	0x2000d050

08009000 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009000:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009006:	7b83      	ldrb	r3, [r0, #14]
{
 8009008:	4604      	mov	r4, r0
 800900a:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800900c:	2b01      	cmp	r3, #1
{
 800900e:	4616      	mov	r6, r2
 8009010:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009012:	d006      	beq.n	8009022 <ip4_output_if_src+0x22>
 8009014:	4b32      	ldr	r3, [pc, #200]	; (80090e0 <ip4_output_if_src+0xe0>)
 8009016:	f44f 7255 	mov.w	r2, #852	; 0x354
 800901a:	4932      	ldr	r1, [pc, #200]	; (80090e4 <ip4_output_if_src+0xe4>)
 800901c:	4832      	ldr	r0, [pc, #200]	; (80090e8 <ip4_output_if_src+0xe8>)
 800901e:	f005 ffd9 	bl	800efd4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009022:	2e00      	cmp	r6, #0
 8009024:	d04e      	beq.n	80090c4 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009026:	2114      	movs	r1, #20
 8009028:	4620      	mov	r0, r4
 800902a:	f001 f989 	bl	800a340 <pbuf_add_header>
 800902e:	b120      	cbz	r0, 800903a <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009030:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8009034:	b002      	add	sp, #8
 8009036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800903a:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800903c:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800903e:	2b13      	cmp	r3, #19
 8009040:	d806      	bhi.n	8009050 <ip4_output_if_src+0x50>
 8009042:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <ip4_output_if_src+0xe0>)
 8009044:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009048:	4928      	ldr	r1, [pc, #160]	; (80090ec <ip4_output_if_src+0xec>)
 800904a:	4827      	ldr	r0, [pc, #156]	; (80090e8 <ip4_output_if_src+0xe8>)
 800904c:	f005 ffc2 	bl	800efd4 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8009050:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8009054:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8009058:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 800905c:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800905e:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009060:	f8df a090 	ldr.w	sl, [pc, #144]	; 80090f4 <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 8009064:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009066:	2345      	movs	r3, #69	; 0x45
 8009068:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800906a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800906e:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009070:	8920      	ldrh	r0, [r4, #8]
 8009072:	f000 fc47 	bl	8009904 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8009076:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800907a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800907c:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009080:	f8ba 0000 	ldrh.w	r0, [sl]
 8009084:	f000 fc3e 	bl	8009904 <lwip_htons>
    ++ip_id;
 8009088:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800908c:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800908e:	3301      	adds	r3, #1
 8009090:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	d111      	bne.n	80090be <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800909a:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <ip4_output_if_src+0xf0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80090a0:	f885 800a 	strb.w	r8, [r5, #10]
 80090a4:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80090a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090aa:	b19b      	cbz	r3, 80090d4 <ip4_output_if_src+0xd4>
 80090ac:	8922      	ldrh	r2, [r4, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d910      	bls.n	80090d4 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 80090b2:	4632      	mov	r2, r6
 80090b4:	4639      	mov	r1, r7
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 fb38 	bl	800972c <ip4_frag>
 80090bc:	e7ba      	b.n	8009034 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 80090be:	f8d9 3000 	ldr.w	r3, [r9]
 80090c2:	e7ec      	b.n	800909e <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 80090c4:	8963      	ldrh	r3, [r4, #10]
 80090c6:	2b13      	cmp	r3, #19
 80090c8:	d9b2      	bls.n	8009030 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80090ca:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 80090cc:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80090d2:	e7e9      	b.n	80090a8 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	4632      	mov	r2, r6
 80090d8:	4621      	mov	r1, r4
 80090da:	4638      	mov	r0, r7
 80090dc:	4798      	blx	r3
 80090de:	e7a9      	b.n	8009034 <ip4_output_if_src+0x34>
 80090e0:	0801bad8 	.word	0x0801bad8
 80090e4:	0801bb3b 	.word	0x0801bb3b
 80090e8:	0801a72c 	.word	0x0801a72c
 80090ec:	0801bb47 	.word	0x0801bb47
 80090f0:	080118b8 	.word	0x080118b8
 80090f4:	20006aca 	.word	0x20006aca

080090f8 <ip4_output_if>:
{
 80090f8:	b4f0      	push	{r4, r5, r6, r7}
 80090fa:	9c06      	ldr	r4, [sp, #24]
 80090fc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8009100:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009104:	b11a      	cbz	r2, 800910e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8009106:	b109      	cbz	r1, 800910c <ip4_output_if+0x14>
 8009108:	680f      	ldr	r7, [r1, #0]
 800910a:	b907      	cbnz	r7, 800910e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800910c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800910e:	9504      	str	r5, [sp, #16]
 8009110:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8009114:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009116:	f7ff bf73 	b.w	8009000 <ip4_output_if_src>

0800911a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800911a:	1e43      	subs	r3, r0, #1
{
 800911c:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800911e:	3303      	adds	r3, #3
 8009120:	d812      	bhi.n	8009148 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009122:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8009126:	f013 0002 	ands.w	r0, r3, #2
 800912a:	d010      	beq.n	800914e <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800912c:	684b      	ldr	r3, [r1, #4]
 800912e:	4293      	cmp	r3, r2
 8009130:	d00c      	beq.n	800914c <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009132:	6888      	ldr	r0, [r1, #8]
 8009134:	4053      	eors	r3, r2
 8009136:	4203      	tst	r3, r0
 8009138:	d108      	bne.n	800914c <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800913a:	43c3      	mvns	r3, r0
 800913c:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8009140:	1ac3      	subs	r3, r0, r3
 8009142:	4258      	negs	r0, r3
 8009144:	4158      	adcs	r0, r3
 8009146:	4770      	bx	lr
    return 1;
 8009148:	2001      	movs	r0, #1
 800914a:	4770      	bx	lr
    return 0;
 800914c:	2000      	movs	r0, #0
  }
}
 800914e:	4770      	bx	lr

08009150 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009150:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009152:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <ip_reass_dequeue_datagram+0x34>)
{
 8009154:	4604      	mov	r4, r0
 8009156:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	4282      	cmp	r2, r0
 800915c:	d107      	bne.n	800916e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800915e:	6802      	ldr	r2, [r0, #0]
 8009160:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009162:	4621      	mov	r1, r4
 8009164:	2004      	movs	r0, #4
}
 8009166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800916a:	f000 bf07 	b.w	8009f7c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800916e:	b931      	cbnz	r1, 800917e <ip_reass_dequeue_datagram+0x2e>
 8009170:	4b05      	ldr	r3, [pc, #20]	; (8009188 <ip_reass_dequeue_datagram+0x38>)
 8009172:	f240 1245 	movw	r2, #325	; 0x145
 8009176:	4905      	ldr	r1, [pc, #20]	; (800918c <ip_reass_dequeue_datagram+0x3c>)
 8009178:	4805      	ldr	r0, [pc, #20]	; (8009190 <ip_reass_dequeue_datagram+0x40>)
 800917a:	f005 ff2b 	bl	800efd4 <iprintf>
    prev->next = ipr->next;
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	e7ee      	b.n	8009162 <ip_reass_dequeue_datagram+0x12>
 8009184:	20006acc 	.word	0x20006acc
 8009188:	0801bb74 	.word	0x0801bb74
 800918c:	0801bbdc 	.word	0x0801bbdc
 8009190:	0801a72c 	.word	0x0801a72c

08009194 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009194:	4281      	cmp	r1, r0
{
 8009196:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919a:	4604      	mov	r4, r0
 800919c:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800919e:	d105      	bne.n	80091ac <ip_reass_free_complete_datagram+0x18>
 80091a0:	4b2f      	ldr	r3, [pc, #188]	; (8009260 <ip_reass_free_complete_datagram+0xcc>)
 80091a2:	22ab      	movs	r2, #171	; 0xab
 80091a4:	492f      	ldr	r1, [pc, #188]	; (8009264 <ip_reass_free_complete_datagram+0xd0>)
 80091a6:	4830      	ldr	r0, [pc, #192]	; (8009268 <ip_reass_free_complete_datagram+0xd4>)
 80091a8:	f005 ff14 	bl	800efd4 <iprintf>
  if (prev != NULL) {
 80091ac:	b146      	cbz	r6, 80091c0 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80091ae:	6833      	ldr	r3, [r6, #0]
 80091b0:	42a3      	cmp	r3, r4
 80091b2:	d005      	beq.n	80091c0 <ip_reass_free_complete_datagram+0x2c>
 80091b4:	4b2a      	ldr	r3, [pc, #168]	; (8009260 <ip_reass_free_complete_datagram+0xcc>)
 80091b6:	22ad      	movs	r2, #173	; 0xad
 80091b8:	492c      	ldr	r1, [pc, #176]	; (800926c <ip_reass_free_complete_datagram+0xd8>)
 80091ba:	482b      	ldr	r0, [pc, #172]	; (8009268 <ip_reass_free_complete_datagram+0xd4>)
 80091bc:	f005 ff0a 	bl	800efd4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80091c0:	6867      	ldr	r7, [r4, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 80091c4:	889a      	ldrh	r2, [r3, #4]
 80091c6:	bb92      	cbnz	r2, 800922e <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80091c8:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80091ca:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 80091ce:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80091d0:	f104 0208 	add.w	r2, r4, #8
 80091d4:	f852 0b04 	ldr.w	r0, [r2], #4
 80091d8:	428a      	cmp	r2, r1
 80091da:	f843 0b04 	str.w	r0, [r3], #4
 80091de:	d1f9      	bne.n	80091d4 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80091e0:	2101      	movs	r1, #1
 80091e2:	4638      	mov	r0, r7
 80091e4:	f7ff fdfc 	bl	8008de0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80091e8:	4638      	mov	r0, r7
 80091ea:	f001 fa1d 	bl	800a628 <pbuf_clen>
 80091ee:	4605      	mov	r5, r0
    pbuf_free(p);
 80091f0:	4638      	mov	r0, r7
 80091f2:	f001 f8dd 	bl	800a3b0 <pbuf_free>
  p = ipr->p;
 80091f6:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80091f8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009260 <ip_reass_free_complete_datagram+0xcc>
 80091fc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009278 <ip_reass_free_complete_datagram+0xe4>
 8009200:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009268 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8009204:	b9af      	cbnz	r7, 8009232 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8009206:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009208:	4c19      	ldr	r4, [pc, #100]	; (8009270 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800920a:	4631      	mov	r1, r6
 800920c:	f7ff ffa0 	bl	8009150 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009210:	88a3      	ldrh	r3, [r4, #4]
 8009212:	42ab      	cmp	r3, r5
 8009214:	d205      	bcs.n	8009222 <ip_reass_free_complete_datagram+0x8e>
 8009216:	4b12      	ldr	r3, [pc, #72]	; (8009260 <ip_reass_free_complete_datagram+0xcc>)
 8009218:	22d2      	movs	r2, #210	; 0xd2
 800921a:	4916      	ldr	r1, [pc, #88]	; (8009274 <ip_reass_free_complete_datagram+0xe0>)
 800921c:	4812      	ldr	r0, [pc, #72]	; (8009268 <ip_reass_free_complete_datagram+0xd4>)
 800921e:	f005 fed9 	bl	800efd4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009222:	88a3      	ldrh	r3, [r4, #4]
}
 8009224:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009226:	1b5b      	subs	r3, r3, r5
 8009228:	80a3      	strh	r3, [r4, #4]
}
 800922a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800922e:	2500      	movs	r5, #0
 8009230:	e7e1      	b.n	80091f6 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8009232:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8009234:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8009236:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800923a:	f001 f9f5 	bl	800a628 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800923e:	4405      	add	r5, r0
 8009240:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009244:	db05      	blt.n	8009252 <ip_reass_free_complete_datagram+0xbe>
 8009246:	4643      	mov	r3, r8
 8009248:	22cc      	movs	r2, #204	; 0xcc
 800924a:	4649      	mov	r1, r9
 800924c:	4650      	mov	r0, sl
 800924e:	f005 fec1 	bl	800efd4 <iprintf>
    pbuf_free(pcur);
 8009252:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009254:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8009256:	465f      	mov	r7, fp
    pbuf_free(pcur);
 8009258:	f001 f8aa 	bl	800a3b0 <pbuf_free>
 800925c:	e7d2      	b.n	8009204 <ip_reass_free_complete_datagram+0x70>
 800925e:	bf00      	nop
 8009260:	0801bb74 	.word	0x0801bb74
 8009264:	0801bbf5 	.word	0x0801bbf5
 8009268:	0801a72c 	.word	0x0801a72c
 800926c:	0801bc01 	.word	0x0801bc01
 8009270:	20006acc 	.word	0x20006acc
 8009274:	0801bc30 	.word	0x0801bc30
 8009278:	0801bc13 	.word	0x0801bc13

0800927c <ip_reass_remove_oldest_datagram>:
{
 800927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009280:	4605      	mov	r5, r0
 8009282:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8009284:	2600      	movs	r6, #0
    r = reassdatagrams;
 8009286:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80092f0 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800928a:	2400      	movs	r4, #0
    r = reassdatagrams;
 800928c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8009290:	4621      	mov	r1, r4
    prev = NULL;
 8009292:	46a4      	mov	ip, r4
    oldest = NULL;
 8009294:	4620      	mov	r0, r4
    while (r != NULL) {
 8009296:	b953      	cbnz	r3, 80092ae <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8009298:	b110      	cbz	r0, 80092a0 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800929a:	f7ff ff7b 	bl	8009194 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800929e:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80092a0:	42be      	cmp	r6, r7
 80092a2:	da01      	bge.n	80092a8 <ip_reass_remove_oldest_datagram+0x2c>
 80092a4:	2c01      	cmp	r4, #1
 80092a6:	dcf0      	bgt.n	800928a <ip_reass_remove_oldest_datagram+0xe>
}
 80092a8:	4630      	mov	r0, r6
 80092aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80092ae:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80092b2:	695a      	ldr	r2, [r3, #20]
 80092b4:	4572      	cmp	r2, lr
 80092b6:	d109      	bne.n	80092cc <ip_reass_remove_oldest_datagram+0x50>
 80092b8:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80092bc:	699a      	ldr	r2, [r3, #24]
 80092be:	4572      	cmp	r2, lr
 80092c0:	d104      	bne.n	80092cc <ip_reass_remove_oldest_datagram+0x50>
 80092c2:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80092c6:	88aa      	ldrh	r2, [r5, #4]
 80092c8:	4596      	cmp	lr, r2
 80092ca:	d008      	beq.n	80092de <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80092cc:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80092ce:	b160      	cbz	r0, 80092ea <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80092d0:	7fc2      	ldrb	r2, [r0, #31]
 80092d2:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 80092d6:	4596      	cmp	lr, r2
 80092d8:	bf9c      	itt	ls
 80092da:	4661      	movls	r1, ip
 80092dc:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	2a00      	cmp	r2, #0
 80092e2:	bf18      	it	ne
 80092e4:	469c      	movne	ip, r3
 80092e6:	4613      	mov	r3, r2
 80092e8:	e7d5      	b.n	8009296 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80092ea:	4661      	mov	r1, ip
 80092ec:	4618      	mov	r0, r3
 80092ee:	e7f6      	b.n	80092de <ip_reass_remove_oldest_datagram+0x62>
 80092f0:	20006acc 	.word	0x20006acc

080092f4 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80092f4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80092f6:	4604      	mov	r4, r0
 80092f8:	b930      	cbnz	r0, 8009308 <ip_frag_free_pbuf_custom_ref+0x14>
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <ip_frag_free_pbuf_custom_ref+0x20>)
 80092fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009300:	4905      	ldr	r1, [pc, #20]	; (8009318 <ip_frag_free_pbuf_custom_ref+0x24>)
 8009302:	4806      	ldr	r0, [pc, #24]	; (800931c <ip_frag_free_pbuf_custom_ref+0x28>)
 8009304:	f005 fe66 	bl	800efd4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009308:	4621      	mov	r1, r4
 800930a:	2005      	movs	r0, #5
}
 800930c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8009310:	f000 be34 	b.w	8009f7c <memp_free>
 8009314:	0801bb74 	.word	0x0801bb74
 8009318:	0801c3c8 	.word	0x0801c3c8
 800931c:	0801a72c 	.word	0x0801a72c

08009320 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009320:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009322:	4604      	mov	r4, r0
 8009324:	b930      	cbnz	r0, 8009334 <ipfrag_free_pbuf_custom+0x14>
 8009326:	4b08      	ldr	r3, [pc, #32]	; (8009348 <ipfrag_free_pbuf_custom+0x28>)
 8009328:	f240 22ce 	movw	r2, #718	; 0x2ce
 800932c:	4907      	ldr	r1, [pc, #28]	; (800934c <ipfrag_free_pbuf_custom+0x2c>)
 800932e:	4808      	ldr	r0, [pc, #32]	; (8009350 <ipfrag_free_pbuf_custom+0x30>)
 8009330:	f005 fe50 	bl	800efd4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8009334:	6960      	ldr	r0, [r4, #20]
 8009336:	b108      	cbz	r0, 800933c <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8009338:	f001 f83a 	bl	800a3b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800933c:	4620      	mov	r0, r4
}
 800933e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8009342:	f7ff bfd7 	b.w	80092f4 <ip_frag_free_pbuf_custom_ref>
 8009346:	bf00      	nop
 8009348:	0801bb74 	.word	0x0801bb74
 800934c:	0801bc52 	.word	0x0801bc52
 8009350:	0801a72c 	.word	0x0801a72c

08009354 <ip_reass_tmr>:
{
 8009354:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 8009358:	2400      	movs	r4, #0
  r = reassdatagrams;
 800935a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800935c:	b900      	cbnz	r0, 8009360 <ip_reass_tmr+0xc>
}
 800935e:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8009360:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8009362:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8009364:	b123      	cbz	r3, 8009370 <ip_reass_tmr+0x1c>
      r->timer--;
 8009366:	3b01      	subs	r3, #1
 8009368:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800936a:	4604      	mov	r4, r0
 800936c:	4628      	mov	r0, r5
 800936e:	e7f5      	b.n	800935c <ip_reass_tmr+0x8>
 8009370:	4621      	mov	r1, r4
 8009372:	f7ff ff0f 	bl	8009194 <ip_reass_free_complete_datagram>
 8009376:	4620      	mov	r0, r4
 8009378:	e7f7      	b.n	800936a <ip_reass_tmr+0x16>
 800937a:	bf00      	nop
 800937c:	20006acc 	.word	0x20006acc

08009380 <ip4_reass>:
{
 8009380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8009384:	6845      	ldr	r5, [r0, #4]
{
 8009386:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009388:	782b      	ldrb	r3, [r5, #0]
 800938a:	f003 030f 	and.w	r3, r3, #15
 800938e:	2b05      	cmp	r3, #5
 8009390:	f040 80a0 	bne.w	80094d4 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009394:	88e8      	ldrh	r0, [r5, #6]
 8009396:	f000 fab5 	bl	8009904 <lwip_htons>
 800939a:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800939c:	8868      	ldrh	r0, [r5, #2]
 800939e:	f000 fab1 	bl	8009904 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80093a2:	782a      	ldrb	r2, [r5, #0]
 80093a4:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80093a8:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80093ac:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80093b0:	f0c0 8090 	bcc.w	80094d4 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 80093b4:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80093b6:	4eb5      	ldr	r6, [pc, #724]	; (800968c <ip4_reass+0x30c>)
  clen = pbuf_clen(p);
 80093b8:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80093be:	f001 f933 	bl	800a628 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80093c2:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 80093c4:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80093c6:	4403      	add	r3, r0
 80093c8:	2b0a      	cmp	r3, #10
 80093ca:	dc79      	bgt.n	80094c0 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80093cc:	6834      	ldr	r4, [r6, #0]
 80093ce:	2c00      	cmp	r4, #0
 80093d0:	f040 8085 	bne.w	80094de <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80093d4:	2004      	movs	r0, #4
 80093d6:	f000 fdb5 	bl	8009f44 <memp_malloc>
  if (ipr == NULL) {
 80093da:	4604      	mov	r4, r0
 80093dc:	b958      	cbnz	r0, 80093f6 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80093de:	4649      	mov	r1, r9
 80093e0:	4628      	mov	r0, r5
 80093e2:	f7ff ff4b 	bl	800927c <ip_reass_remove_oldest_datagram>
 80093e6:	4581      	cmp	r9, r0
 80093e8:	dc74      	bgt.n	80094d4 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80093ea:	2004      	movs	r0, #4
 80093ec:	f000 fdaa 	bl	8009f44 <memp_malloc>
    if (ipr == NULL)
 80093f0:	4604      	mov	r4, r0
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d06e      	beq.n	80094d4 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80093f6:	221c      	movs	r2, #28
 80093f8:	2100      	movs	r1, #0
 80093fa:	1d20      	adds	r0, r4, #4
 80093fc:	f005 f978 	bl	800e6f0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8009400:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009402:	f104 0208 	add.w	r2, r4, #8
 8009406:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800940a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800940c:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800940e:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8009410:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009412:	462b      	mov	r3, r5
 8009414:	f853 0b04 	ldr.w	r0, [r3], #4
 8009418:	428b      	cmp	r3, r1
 800941a:	f842 0b04 	str.w	r0, [r2], #4
 800941e:	d1f9      	bne.n	8009414 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009420:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009424:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 8009428:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800942c:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8009430:	d10a      	bne.n	8009448 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8009432:	9b01      	ldr	r3, [sp, #4]
 8009434:	18fb      	adds	r3, r7, r3
 8009436:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009438:	429f      	cmp	r7, r3
 800943a:	f200 8137 	bhi.w	80096ac <ip4_reass+0x32c>
 800943e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009442:	4293      	cmp	r3, r2
 8009444:	f200 8132 	bhi.w	80096ac <ip4_reass+0x32c>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009448:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800944c:	8868      	ldrh	r0, [r5, #2]
 800944e:	f000 fa59 	bl	8009904 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009452:	782b      	ldrb	r3, [r5, #0]
 8009454:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009458:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800945c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009460:	f0c0 8124 	bcc.w	80096ac <ip4_reass+0x32c>
  len = (u16_t)(len - hlen);
 8009464:	1a80      	subs	r0, r0, r2
 8009466:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800946a:	88e8      	ldrh	r0, [r5, #6]
 800946c:	f000 fa4a 	bl	8009904 <lwip_htons>
 8009470:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009474:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 8009478:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800947a:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 800947c:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 800947e:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 8009482:	7075      	strb	r5, [r6, #1]
 8009484:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8009486:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 800948a:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800948c:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 800948e:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 8009490:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8009492:	f200 810b 	bhi.w	80096ac <ip4_reass+0x32c>
  for (q = ipr->p; q != NULL;) {
 8009496:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800949a:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 800949e:	4671      	mov	r1, lr
 80094a0:	bb61      	cbnz	r1, 80094fc <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 80094a2:	2d00      	cmp	r5, #0
 80094a4:	f040 80a9 	bne.w	80095fa <ip4_reass+0x27a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80094a8:	f1be 0f00 	cmp.w	lr, #0
 80094ac:	f000 8095 	beq.w	80095da <ip4_reass+0x25a>
 80094b0:	4b77      	ldr	r3, [pc, #476]	; (8009690 <ip4_reass+0x310>)
 80094b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80094b6:	4977      	ldr	r1, [pc, #476]	; (8009694 <ip4_reass+0x314>)
 80094b8:	4877      	ldr	r0, [pc, #476]	; (8009698 <ip4_reass+0x318>)
 80094ba:	f005 fd8b 	bl	800efd4 <iprintf>
 80094be:	e08c      	b.n	80095da <ip4_reass+0x25a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80094c0:	4601      	mov	r1, r0
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7ff feda 	bl	800927c <ip_reass_remove_oldest_datagram>
 80094c8:	b120      	cbz	r0, 80094d4 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80094ca:	88b3      	ldrh	r3, [r6, #4]
 80094cc:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80094ce:	2b0a      	cmp	r3, #10
 80094d0:	f77f af7c 	ble.w	80093cc <ip4_reass+0x4c>
  pbuf_free(p);
 80094d4:	4640      	mov	r0, r8
 80094d6:	f000 ff6b 	bl	800a3b0 <pbuf_free>
  return NULL;
 80094da:	2700      	movs	r7, #0
 80094dc:	e077      	b.n	80095ce <ip4_reass+0x24e>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80094de:	68eb      	ldr	r3, [r5, #12]
 80094e0:	6962      	ldr	r2, [r4, #20]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d108      	bne.n	80094f8 <ip4_reass+0x178>
 80094e6:	692b      	ldr	r3, [r5, #16]
 80094e8:	69a2      	ldr	r2, [r4, #24]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d104      	bne.n	80094f8 <ip4_reass+0x178>
 80094ee:	89a2      	ldrh	r2, [r4, #12]
 80094f0:	88ab      	ldrh	r3, [r5, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	f000 80ee 	beq.w	80096d4 <ip4_reass+0x354>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80094f8:	6824      	ldr	r4, [r4, #0]
 80094fa:	e768      	b.n	80093ce <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80094fc:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80094fe:	889a      	ldrh	r2, [r3, #4]
 8009500:	4290      	cmp	r0, r2
 8009502:	d26d      	bcs.n	80095e0 <ip4_reass+0x260>
      iprh->next_pbuf = q;
 8009504:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8009506:	2d00      	cmp	r5, #0
 8009508:	d065      	beq.n	80095d6 <ip4_reass+0x256>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800950a:	88eb      	ldrh	r3, [r5, #6]
 800950c:	4298      	cmp	r0, r3
 800950e:	f0c0 80cd 	bcc.w	80096ac <ip4_reass+0x32c>
 8009512:	4594      	cmp	ip, r2
 8009514:	f200 80ca 	bhi.w	80096ac <ip4_reass+0x32c>
        if (iprh_prev->end != iprh->start) {
 8009518:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 800951a:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800951e:	f040 80f5 	bne.w	800970c <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009522:	f1bb 0f00 	cmp.w	fp, #0
 8009526:	d004      	beq.n	8009532 <ip4_reass+0x1b2>
 8009528:	7fa3      	ldrb	r3, [r4, #30]
 800952a:	f013 0301 	ands.w	r3, r3, #1
 800952e:	f000 809b 	beq.w	8009668 <ip4_reass+0x2e8>
    if (valid) {
 8009532:	f1ba 0f00 	cmp.w	sl, #0
 8009536:	d170      	bne.n	800961a <ip4_reass+0x29a>
          q = iprh->next_pbuf;
 8009538:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800953c:	4e53      	ldr	r6, [pc, #332]	; (800968c <ip4_reass+0x30c>)
 800953e:	88b0      	ldrh	r0, [r6, #4]
 8009540:	4481      	add	r9, r0
 8009542:	f8a6 9004 	strh.w	r9, [r6, #4]
  if (is_last) {
 8009546:	f1bb 0f00 	cmp.w	fp, #0
 800954a:	d106      	bne.n	800955a <ip4_reass+0x1da>
    u16_t datagram_len = (u16_t)(offset + len);
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009550:	7fa3      	ldrb	r3, [r4, #30]
 8009552:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8009556:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009558:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800955a:	f1ba 0f01 	cmp.w	sl, #1
 800955e:	d1bc      	bne.n	80094da <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009560:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009562:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009566:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009568:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800956a:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800956e:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009570:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009572:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009574:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009576:	f853 cb04 	ldr.w	ip, [r3], #4
 800957a:	428b      	cmp	r3, r1
 800957c:	f842 cb04 	str.w	ip, [r2], #4
 8009580:	d1f9      	bne.n	8009576 <ip4_reass+0x1f6>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009582:	f000 f9bf 	bl	8009904 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8009586:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009588:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800958a:	71bb      	strb	r3, [r7, #6]
 800958c:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800958e:	72bb      	strb	r3, [r7, #10]
 8009590:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8009592:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8009594:	2d00      	cmp	r5, #0
 8009596:	d169      	bne.n	800966c <ip4_reass+0x2ec>
    if (ipr == reassdatagrams) {
 8009598:	6833      	ldr	r3, [r6, #0]
        if (ipr_prev->next == ipr) {
 800959a:	42a3      	cmp	r3, r4
 800959c:	d002      	beq.n	80095a4 <ip4_reass+0x224>
 800959e:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d170      	bne.n	8009686 <ip4_reass+0x306>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80095a4:	4620      	mov	r0, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7ff fdd2 	bl	8009150 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80095ac:	4638      	mov	r0, r7
 80095ae:	f001 f83b 	bl	800a628 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80095b2:	88b3      	ldrh	r3, [r6, #4]
    clen = pbuf_clen(p);
 80095b4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80095b6:	4283      	cmp	r3, r0
 80095b8:	d206      	bcs.n	80095c8 <ip4_reass+0x248>
 80095ba:	4b35      	ldr	r3, [pc, #212]	; (8009690 <ip4_reass+0x310>)
 80095bc:	f240 229b 	movw	r2, #667	; 0x29b
 80095c0:	4936      	ldr	r1, [pc, #216]	; (800969c <ip4_reass+0x31c>)
 80095c2:	4835      	ldr	r0, [pc, #212]	; (8009698 <ip4_reass+0x318>)
 80095c4:	f005 fd06 	bl	800efd4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80095c8:	88b0      	ldrh	r0, [r6, #4]
 80095ca:	1b04      	subs	r4, r0, r4
 80095cc:	80b4      	strh	r4, [r6, #4]
}
 80095ce:	4638      	mov	r0, r7
 80095d0:	b003      	add	sp, #12
 80095d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 80095d6:	4594      	cmp	ip, r2
 80095d8:	d868      	bhi.n	80096ac <ip4_reass+0x32c>
      ipr->p = new_p;
 80095da:	f8c4 8004 	str.w	r8, [r4, #4]
 80095de:	e7a0      	b.n	8009522 <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 80095e0:	d064      	beq.n	80096ac <ip4_reass+0x32c>
    } else if (iprh->start < iprh_tmp->end) {
 80095e2:	88d9      	ldrh	r1, [r3, #6]
 80095e4:	4281      	cmp	r1, r0
 80095e6:	d861      	bhi.n	80096ac <ip4_reass+0x32c>
      if (iprh_prev != NULL) {
 80095e8:	b125      	cbz	r5, 80095f4 <ip4_reass+0x274>
        if (iprh_prev->end != iprh_tmp->start) {
 80095ea:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 80095ec:	4291      	cmp	r1, r2
 80095ee:	bf18      	it	ne
 80095f0:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80095f4:	6819      	ldr	r1, [r3, #0]
 80095f6:	461d      	mov	r5, r3
 80095f8:	e752      	b.n	80094a0 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80095fa:	88eb      	ldrh	r3, [r5, #6]
 80095fc:	4283      	cmp	r3, r0
 80095fe:	d906      	bls.n	800960e <ip4_reass+0x28e>
 8009600:	4b23      	ldr	r3, [pc, #140]	; (8009690 <ip4_reass+0x310>)
 8009602:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8009606:	4926      	ldr	r1, [pc, #152]	; (80096a0 <ip4_reass+0x320>)
 8009608:	4823      	ldr	r0, [pc, #140]	; (8009698 <ip4_reass+0x318>)
 800960a:	f005 fce3 	bl	800efd4 <iprintf>
      if (iprh_prev->end != iprh->start) {
 800960e:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 8009610:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8009614:	88b3      	ldrh	r3, [r6, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	e781      	b.n	800951e <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800961a:	6863      	ldr	r3, [r4, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d08b      	beq.n	8009538 <ip4_reass+0x1b8>
 8009620:	6859      	ldr	r1, [r3, #4]
 8009622:	888b      	ldrh	r3, [r1, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d187      	bne.n	8009538 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 8009628:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800962a:	b9a3      	cbnz	r3, 8009656 <ip4_reass+0x2d6>
          LWIP_ASSERT("sanity check",
 800962c:	42b1      	cmp	r1, r6
 800962e:	d106      	bne.n	800963e <ip4_reass+0x2be>
 8009630:	4b17      	ldr	r3, [pc, #92]	; (8009690 <ip4_reass+0x310>)
 8009632:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009636:	491b      	ldr	r1, [pc, #108]	; (80096a4 <ip4_reass+0x324>)
 8009638:	4817      	ldr	r0, [pc, #92]	; (8009698 <ip4_reass+0x318>)
 800963a:	f005 fccb 	bl	800efd4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800963e:	6833      	ldr	r3, [r6, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f43f af7b 	beq.w	800953c <ip4_reass+0x1bc>
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <ip4_reass+0x310>)
 8009648:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800964c:	4916      	ldr	r1, [pc, #88]	; (80096a8 <ip4_reass+0x328>)
 800964e:	4812      	ldr	r0, [pc, #72]	; (8009698 <ip4_reass+0x318>)
 8009650:	f005 fcc0 	bl	800efd4 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8009654:	e772      	b.n	800953c <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 8009656:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8009658:	88f0      	ldrh	r0, [r6, #6]
 800965a:	8893      	ldrh	r3, [r2, #4]
 800965c:	4298      	cmp	r0, r3
 800965e:	f47f af6b 	bne.w	8009538 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8009662:	6813      	ldr	r3, [r2, #0]
 8009664:	4616      	mov	r6, r2
 8009666:	e7e0      	b.n	800962a <ip4_reass+0x2aa>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8009668:	469a      	mov	sl, r3
 800966a:	e767      	b.n	800953c <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 800966c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8009670:	2114      	movs	r1, #20
 8009672:	4628      	mov	r0, r5
 8009674:	f000 fe68 	bl	800a348 <pbuf_remove_header>
      pbuf_cat(p, r);
 8009678:	4629      	mov	r1, r5
 800967a:	4638      	mov	r0, r7
 800967c:	f000 fff8 	bl	800a670 <pbuf_cat>
      r = iprh->next_pbuf;
 8009680:	f8d8 5000 	ldr.w	r5, [r8]
 8009684:	e786      	b.n	8009594 <ip4_reass+0x214>
        if (ipr_prev->next == ipr) {
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	e787      	b.n	800959a <ip4_reass+0x21a>
 800968a:	bf00      	nop
 800968c:	20006acc 	.word	0x20006acc
 8009690:	0801bb74 	.word	0x0801bb74
 8009694:	0801bc7c 	.word	0x0801bc7c
 8009698:	0801a72c 	.word	0x0801a72c
 800969c:	0801bce2 	.word	0x0801bce2
 80096a0:	0801bc5e 	.word	0x0801bc5e
 80096a4:	0801bcb3 	.word	0x0801bcb3
 80096a8:	0801bcc0 	.word	0x0801bcc0
  if (ipr->p == NULL) {
 80096ac:	6863      	ldr	r3, [r4, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f af10 	bne.w	80094d4 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80096b4:	4b19      	ldr	r3, [pc, #100]	; (800971c <ip4_reass+0x39c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d006      	beq.n	80096ca <ip4_reass+0x34a>
 80096bc:	4b18      	ldr	r3, [pc, #96]	; (8009720 <ip4_reass+0x3a0>)
 80096be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80096c2:	4918      	ldr	r1, [pc, #96]	; (8009724 <ip4_reass+0x3a4>)
 80096c4:	4818      	ldr	r0, [pc, #96]	; (8009728 <ip4_reass+0x3a8>)
 80096c6:	f005 fc85 	bl	800efd4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80096ca:	2100      	movs	r1, #0
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7ff fd3f 	bl	8009150 <ip_reass_dequeue_datagram>
 80096d2:	e6ff      	b.n	80094d4 <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80096d4:	88e8      	ldrh	r0, [r5, #6]
 80096d6:	f000 f915 	bl	8009904 <lwip_htons>
 80096da:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80096de:	2800      	cmp	r0, #0
 80096e0:	f47f ae9e 	bne.w	8009420 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80096e4:	89e0      	ldrh	r0, [r4, #14]
 80096e6:	f000 f90d 	bl	8009904 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80096ea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f43f ae96 	beq.w	8009420 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80096f4:	462b      	mov	r3, r5
 80096f6:	f104 0208 	add.w	r2, r4, #8
 80096fa:	f105 0114 	add.w	r1, r5, #20
 80096fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8009702:	428b      	cmp	r3, r1
 8009704:	f842 0b04 	str.w	r0, [r2], #4
 8009708:	d1f9      	bne.n	80096fe <ip4_reass+0x37e>
 800970a:	e689      	b.n	8009420 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800970c:	f1bb 0f00 	cmp.w	fp, #0
 8009710:	f43f af12 	beq.w	8009538 <ip4_reass+0x1b8>
 8009714:	f04f 0a00 	mov.w	sl, #0
 8009718:	e706      	b.n	8009528 <ip4_reass+0x1a8>
 800971a:	bf00      	nop
 800971c:	20006acc 	.word	0x20006acc
 8009720:	0801bb74 	.word	0x0801bb74
 8009724:	0801bcfd 	.word	0x0801bcfd
 8009728:	0801a72c 	.word	0x0801a72c

0800972c <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800972c:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 800972e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009732:	ed2d 8b02 	vpush	{d8}
 8009736:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800973a:	f1b3 0214 	subs.w	r2, r3, #20
{
 800973e:	b08b      	sub	sp, #44	; 0x2c
 8009740:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009742:	bf48      	it	mi
 8009744:	f1a3 020d 	submi.w	r2, r3, #13
{
 8009748:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800974a:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 800974e:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8009750:	6843      	ldr	r3, [r0, #4]
 8009752:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	2b05      	cmp	r3, #5
 800975c:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8009760:	d109      	bne.n	8009776 <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8009762:	8943      	ldrh	r3, [r0, #10]
 8009764:	2b13      	cmp	r3, #19
 8009766:	d809      	bhi.n	800977c <ip4_frag+0x50>
 8009768:	4b60      	ldr	r3, [pc, #384]	; (80098ec <ip4_frag+0x1c0>)
 800976a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800976e:	4960      	ldr	r1, [pc, #384]	; (80098f0 <ip4_frag+0x1c4>)
 8009770:	4860      	ldr	r0, [pc, #384]	; (80098f4 <ip4_frag+0x1c8>)
 8009772:	f005 fc2f 	bl	800efd4 <iprintf>
    return ERR_VAL;
 8009776:	f06f 0005 	mvn.w	r0, #5
 800977a:	e013      	b.n	80097a4 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800977c:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 800977e:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009780:	88d8      	ldrh	r0, [r3, #6]
 8009782:	f000 f8bf 	bl	8009904 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8009786:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800978a:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 800978c:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 800978e:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8009792:	3c14      	subs	r4, #20
 8009794:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009796:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8009798:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	b29b      	uxth	r3, r3
 800979e:	9306      	str	r3, [sp, #24]
  while (left) {
 80097a0:	b92c      	cbnz	r4, 80097ae <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80097a2:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80097a4:	b00b      	add	sp, #44	; 0x2c
 80097a6:	ecbd 8b02 	vpop	{d8}
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80097ae:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80097b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80097b4:	2114      	movs	r1, #20
 80097b6:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	bf28      	it	cs
 80097bc:	4623      	movcs	r3, r4
 80097be:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80097c0:	f000 fe5e 	bl	800a480 <pbuf_alloc>
    if (rambuf == NULL) {
 80097c4:	4680      	mov	r8, r0
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d036      	beq.n	8009838 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80097ca:	8943      	ldrh	r3, [r0, #10]
 80097cc:	2b13      	cmp	r3, #19
 80097ce:	d806      	bhi.n	80097de <ip4_frag+0xb2>
 80097d0:	4b46      	ldr	r3, [pc, #280]	; (80098ec <ip4_frag+0x1c0>)
 80097d2:	f44f 7249 	mov.w	r2, #804	; 0x324
 80097d6:	4948      	ldr	r1, [pc, #288]	; (80098f8 <ip4_frag+0x1cc>)
 80097d8:	4846      	ldr	r0, [pc, #280]	; (80098f4 <ip4_frag+0x1c8>)
 80097da:	f005 fbfb 	bl	800efd4 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80097de:	9b02      	ldr	r3, [sp, #8]
 80097e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80097e4:	4619      	mov	r1, r3
 80097e6:	3114      	adds	r1, #20
 80097e8:	f853 0b04 	ldr.w	r0, [r3], #4
 80097ec:	428b      	cmp	r3, r1
 80097ee:	f842 0b04 	str.w	r0, [r2], #4
 80097f2:	d1f9      	bne.n	80097e8 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80097f4:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 80097f8:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	d041      	beq.n	8009886 <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8009802:	896b      	ldrh	r3, [r5, #10]
 8009804:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009806:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8009808:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800980a:	d206      	bcs.n	800981a <ip4_frag+0xee>
 800980c:	4b37      	ldr	r3, [pc, #220]	; (80098ec <ip4_frag+0x1c0>)
 800980e:	f240 322d 	movw	r2, #813	; 0x32d
 8009812:	493a      	ldr	r1, [pc, #232]	; (80098fc <ip4_frag+0x1d0>)
 8009814:	4837      	ldr	r0, [pc, #220]	; (80098f4 <ip4_frag+0x1c8>)
 8009816:	f005 fbdd 	bl	800efd4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800981a:	454e      	cmp	r6, r9
 800981c:	bf28      	it	cs
 800981e:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8009820:	b916      	cbnz	r6, 8009828 <ip4_frag+0xfc>
        p = p->next;
 8009822:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8009824:	2700      	movs	r7, #0
 8009826:	e7e9      	b.n	80097fc <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8009828:	2005      	movs	r0, #5
 800982a:	f000 fb8b 	bl	8009f44 <memp_malloc>
      if (pcr == NULL) {
 800982e:	4603      	mov	r3, r0
 8009830:	b928      	cbnz	r0, 800983e <ip4_frag+0x112>
        pbuf_free(rambuf);
 8009832:	4640      	mov	r0, r8
 8009834:	f000 fdbc 	bl	800a3b0 <pbuf_free>
  return ERR_MEM;
 8009838:	f04f 30ff 	mov.w	r0, #4294967295
 800983c:	e7b2      	b.n	80097a4 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800983e:	9601      	str	r6, [sp, #4]
 8009840:	4631      	mov	r1, r6
 8009842:	686a      	ldr	r2, [r5, #4]
 8009844:	9008      	str	r0, [sp, #32]
 8009846:	2000      	movs	r0, #0
 8009848:	443a      	add	r2, r7
 800984a:	9200      	str	r2, [sp, #0]
 800984c:	2241      	movs	r2, #65	; 0x41
 800984e:	f000 fd5d 	bl	800a30c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	b918      	cbnz	r0, 800985e <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fd4c 	bl	80092f4 <ip_frag_free_pbuf_custom_ref>
 800985c:	e7e9      	b.n	8009832 <ip4_frag+0x106>
 800985e:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009862:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8009866:	4628      	mov	r0, r5
 8009868:	f000 fee6 	bl	800a638 <pbuf_ref>
      pcr->original = p;
 800986c:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800986e:	4a24      	ldr	r2, [pc, #144]	; (8009900 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009870:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8009874:	9908      	ldr	r1, [sp, #32]
 8009876:	4640      	mov	r0, r8
      pcr->original = p;
 8009878:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800987a:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800987c:	f000 fef8 	bl	800a670 <pbuf_cat>
      if (left_to_copy) {
 8009880:	f1b9 0f00 	cmp.w	r9, #0
 8009884:	d1cd      	bne.n	8009822 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8009886:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 8009888:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 800988a:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800988e:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 8009892:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8009894:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8009896:	42a3      	cmp	r3, r4
 8009898:	dd01      	ble.n	800989e <ip4_frag+0x172>
 800989a:	9b07      	ldr	r3, [sp, #28]
 800989c:	b10b      	cbz	r3, 80098a2 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 800989e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80098a2:	f000 f82f 	bl	8009904 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80098a6:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80098a8:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80098ac:	f103 0014 	add.w	r0, r3, #20
 80098b0:	b280      	uxth	r0, r0
 80098b2:	f000 f827 	bl	8009904 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80098b6:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 80098b8:	ee18 2a10 	vmov	r2, s16
 80098bc:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80098be:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 80098c2:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 80098c4:	f88b 300a 	strb.w	r3, [fp, #10]
 80098c8:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 80098cc:	f8da 3014 	ldr.w	r3, [sl, #20]
 80098d0:	4798      	blx	r3
    pbuf_free(rambuf);
 80098d2:	4640      	mov	r0, r8
 80098d4:	f000 fd6c 	bl	800a3b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80098d8:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 80098da:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 80098dc:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 80098e2:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	e75a      	b.n	80097a0 <ip4_frag+0x74>
 80098ea:	bf00      	nop
 80098ec:	0801bb74 	.word	0x0801bb74
 80098f0:	0801bd1d 	.word	0x0801bd1d
 80098f4:	0801a72c 	.word	0x0801a72c
 80098f8:	0801bd38 	.word	0x0801bd38
 80098fc:	0801bd58 	.word	0x0801bd58
 8009900:	08009321 	.word	0x08009321

08009904 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8009904:	ba40      	rev16	r0, r0
}
 8009906:	b280      	uxth	r0, r0
 8009908:	4770      	bx	lr

0800990a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800990a:	ba00      	rev	r0, r0
 800990c:	4770      	bx	lr

0800990e <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800990e:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009910:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009912:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8009916:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 800991a:	d007      	beq.n	800992c <lwip_standard_chksum+0x1e>
 800991c:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 800991e:	bfc2      	ittt	gt
 8009920:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 8009924:	f101 31ff 	addgt.w	r1, r1, #4294967295
    ((u8_t *)&t)[1] = *pb++;
 8009928:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 800992c:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800992e:	2901      	cmp	r1, #1
 8009930:	dc15      	bgt.n	800995e <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009932:	bf04      	itt	eq
 8009934:	7803      	ldrbeq	r3, [r0, #0]
 8009936:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800993a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800993e:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009940:	b298      	uxth	r0, r3
 8009942:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8009946:	b298      	uxth	r0, r3
 8009948:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800994c:	b124      	cbz	r4, 8009958 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800994e:	0203      	lsls	r3, r0, #8
 8009950:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009954:	b29b      	uxth	r3, r3
 8009956:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8009958:	b280      	uxth	r0, r0
 800995a:	b002      	add	sp, #8
 800995c:	bd10      	pop	{r4, pc}
    sum += *ps++;
 800995e:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8009962:	3902      	subs	r1, #2
    sum += *ps++;
 8009964:	441a      	add	r2, r3
    len -= 2;
 8009966:	e7e2      	b.n	800992e <lwip_standard_chksum+0x20>

08009968 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009968:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800996a:	2600      	movs	r6, #0
{
 800996c:	4605      	mov	r5, r0

  acc = 0;
 800996e:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8009970:	b945      	cbnz	r5, 8009984 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8009972:	b126      	cbz	r6, 800997e <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009974:	0223      	lsls	r3, r4, #8
 8009976:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800997a:	b29b      	uxth	r3, r3
 800997c:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800997e:	43e0      	mvns	r0, r4
}
 8009980:	b280      	uxth	r0, r0
 8009982:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009984:	8969      	ldrh	r1, [r5, #10]
 8009986:	6868      	ldr	r0, [r5, #4]
 8009988:	f7ff ffc1 	bl	800990e <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800998c:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800998e:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8009990:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8009992:	b2a0      	uxth	r0, r4
 8009994:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8009998:	d506      	bpl.n	80099a8 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800999a:	0223      	lsls	r3, r4, #8
 800999c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80099a0:	f086 0601 	eor.w	r6, r6, #1
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 80099a8:	682d      	ldr	r5, [r5, #0]
 80099aa:	e7e1      	b.n	8009970 <inet_chksum_pbuf+0x8>

080099ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80099ac:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80099ae:	f004 fdd7 	bl	800e560 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80099b2:	f000 f80d 	bl	80099d0 <mem_init>
  memp_init();
 80099b6:	f000 fab7 	bl	8009f28 <memp_init>
  pbuf_init();
  netif_init();
 80099ba:	f000 fb45 	bl	800a048 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80099be:	f004 f9eb 	bl	800dd98 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80099c2:	f000 ffd7 	bl	800a974 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80099c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80099ca:	f004 b9a5 	b.w	800dd18 <sys_timeouts_init>
	...

080099d0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80099d0:	4b14      	ldr	r3, [pc, #80]	; (8009a24 <mem_init+0x54>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80099d2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80099d6:	4814      	ldr	r0, [pc, #80]	; (8009a28 <mem_init+0x58>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 80099d8:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80099dc:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80099e0:	300c      	adds	r0, #12
{
 80099e2:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 80099e4:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 80099e6:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80099e8:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->used = 0;
 80099ec:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 80099ee:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  lfree = (struct mem *)(void *)ram;
 80099f2:	f840 3c04 	str.w	r3, [r0, #-4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80099f6:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80099fa:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80099fe:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
  ram_end->used = 1;
 8009a02:	2101      	movs	r1, #1
 8009a04:	f882 1804 	strb.w	r1, [r2, #2052]	; 0x804
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009a08:	f004 fdb6 	bl	800e578 <sys_mutex_new>
 8009a0c:	b140      	cbz	r0, 8009a20 <mem_init+0x50>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009a0e:	4b07      	ldr	r3, [pc, #28]	; (8009a2c <mem_init+0x5c>)
 8009a10:	f240 221f 	movw	r2, #543	; 0x21f
 8009a14:	4906      	ldr	r1, [pc, #24]	; (8009a30 <mem_init+0x60>)
 8009a16:	4807      	ldr	r0, [pc, #28]	; (8009a34 <mem_init+0x64>)
  }
}
 8009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009a1c:	f005 bada 	b.w	800efd4 <iprintf>
}
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	20006aff 	.word	0x20006aff
 8009a28:	20006aec 	.word	0x20006aec
 8009a2c:	0801bd67 	.word	0x0801bd67
 8009a30:	0801bdc5 	.word	0x0801bdc5
 8009a34:	0801a72c 	.word	0x0801a72c

08009a38 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009a38:	b570      	push	{r4, r5, r6, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	f000 80b7 	beq.w	8009bb0 <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009a42:	0783      	lsls	r3, r0, #30
 8009a44:	d00c      	beq.n	8009a60 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009a46:	4b5b      	ldr	r3, [pc, #364]	; (8009bb4 <mem_free+0x17c>)
 8009a48:	f240 2273 	movw	r2, #627	; 0x273
 8009a4c:	495a      	ldr	r1, [pc, #360]	; (8009bb8 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009a4e:	485b      	ldr	r0, [pc, #364]	; (8009bbc <mem_free+0x184>)
 8009a50:	f005 fac0 	bl	800efd4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a54:	f004 fdb6 	bl	800e5c4 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8009a5c:	f004 bdbe 	b.w	800e5dc <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009a60:	4d57      	ldr	r5, [pc, #348]	; (8009bc0 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009a62:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	42b3      	cmp	r3, r6
 8009a6a:	d804      	bhi.n	8009a76 <mem_free+0x3e>
 8009a6c:	f100 030c 	add.w	r3, r0, #12
 8009a70:	686a      	ldr	r2, [r5, #4]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d204      	bcs.n	8009a80 <mem_free+0x48>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009a76:	4b4f      	ldr	r3, [pc, #316]	; (8009bb4 <mem_free+0x17c>)
 8009a78:	f240 227f 	movw	r2, #639	; 0x27f
 8009a7c:	4951      	ldr	r1, [pc, #324]	; (8009bc4 <mem_free+0x18c>)
 8009a7e:	e7e6      	b.n	8009a4e <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8009a80:	f105 000c 	add.w	r0, r5, #12
 8009a84:	f004 fd86 	bl	800e594 <sys_mutex_lock>
  if (!mem->used) {
 8009a88:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009a8c:	b95b      	cbnz	r3, 8009aa6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009a8e:	4b49      	ldr	r3, [pc, #292]	; (8009bb4 <mem_free+0x17c>)
 8009a90:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009a94:	494c      	ldr	r1, [pc, #304]	; (8009bc8 <mem_free+0x190>)
 8009a96:	4849      	ldr	r0, [pc, #292]	; (8009bbc <mem_free+0x184>)
 8009a98:	f005 fa9c 	bl	800efd4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009a9c:	f105 000c 	add.w	r0, r5, #12
    LWIP_MEM_FREE_UNPROTECT();
 8009aa0:	f004 fd7d 	bl	800e59e <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8009aa4:	e7d6      	b.n	8009a54 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 8009aa6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009aaa:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009aae:	d813      	bhi.n	8009ad8 <mem_free+0xa0>
  pmem = ptr_to_mem(mem->prev);
 8009ab0:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ab4:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8009ab8:	d80e      	bhi.n	8009ad8 <mem_free+0xa0>
  return (mem_size_t)((u8_t *)mem - ram);
 8009aba:	6829      	ldr	r1, [r5, #0]
 8009abc:	1a73      	subs	r3, r6, r1
 8009abe:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ac0:	4283      	cmp	r3, r0
 8009ac2:	d002      	beq.n	8009aca <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ac4:	5a08      	ldrh	r0, [r1, r0]
 8009ac6:	4298      	cmp	r0, r3
 8009ac8:	d106      	bne.n	8009ad8 <mem_free+0xa0>
  return (struct mem *)(void *)&ram[ptr];
 8009aca:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009acc:	6868      	ldr	r0, [r5, #4]
 8009ace:	4282      	cmp	r2, r0
 8009ad0:	d00b      	beq.n	8009aea <mem_free+0xb2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009ad2:	8852      	ldrh	r2, [r2, #2]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d008      	beq.n	8009aea <mem_free+0xb2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009ad8:	4b36      	ldr	r3, [pc, #216]	; (8009bb4 <mem_free+0x17c>)
 8009ada:	f240 2295 	movw	r2, #661	; 0x295
 8009ade:	493b      	ldr	r1, [pc, #236]	; (8009bcc <mem_free+0x194>)
 8009ae0:	4836      	ldr	r0, [pc, #216]	; (8009bbc <mem_free+0x184>)
 8009ae2:	f005 fa77 	bl	800efd4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009ae6:	483a      	ldr	r0, [pc, #232]	; (8009bd0 <mem_free+0x198>)
 8009ae8:	e7da      	b.n	8009aa0 <mem_free+0x68>
  mem->used = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8009af0:	68ab      	ldr	r3, [r5, #8]
 8009af2:	42b3      	cmp	r3, r6
    lfree = mem;
 8009af4:	bf88      	it	hi
 8009af6:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009af8:	428e      	cmp	r6, r1
 8009afa:	d206      	bcs.n	8009b0a <mem_free+0xd2>
 8009afc:	4b2d      	ldr	r3, [pc, #180]	; (8009bb4 <mem_free+0x17c>)
 8009afe:	f240 12df 	movw	r2, #479	; 0x1df
 8009b02:	4934      	ldr	r1, [pc, #208]	; (8009bd4 <mem_free+0x19c>)
 8009b04:	482d      	ldr	r0, [pc, #180]	; (8009bbc <mem_free+0x184>)
 8009b06:	f005 fa65 	bl	800efd4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009b0a:	686b      	ldr	r3, [r5, #4]
 8009b0c:	429e      	cmp	r6, r3
 8009b0e:	d306      	bcc.n	8009b1e <mem_free+0xe6>
 8009b10:	4b28      	ldr	r3, [pc, #160]	; (8009bb4 <mem_free+0x17c>)
 8009b12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009b16:	4930      	ldr	r1, [pc, #192]	; (8009bd8 <mem_free+0x1a0>)
 8009b18:	4828      	ldr	r0, [pc, #160]	; (8009bbc <mem_free+0x184>)
 8009b1a:	f005 fa5b 	bl	800efd4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009b1e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009b22:	b133      	cbz	r3, 8009b32 <mem_free+0xfa>
 8009b24:	4b23      	ldr	r3, [pc, #140]	; (8009bb4 <mem_free+0x17c>)
 8009b26:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009b2a:	492c      	ldr	r1, [pc, #176]	; (8009bdc <mem_free+0x1a4>)
 8009b2c:	4823      	ldr	r0, [pc, #140]	; (8009bbc <mem_free+0x184>)
 8009b2e:	f005 fa51 	bl	800efd4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009b32:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009b36:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009b3a:	d906      	bls.n	8009b4a <mem_free+0x112>
 8009b3c:	4b1d      	ldr	r3, [pc, #116]	; (8009bb4 <mem_free+0x17c>)
 8009b3e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009b42:	4927      	ldr	r1, [pc, #156]	; (8009be0 <mem_free+0x1a8>)
 8009b44:	481d      	ldr	r0, [pc, #116]	; (8009bbc <mem_free+0x184>)
 8009b46:	f005 fa45 	bl	800efd4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009b50:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009b52:	4296      	cmp	r6, r2
 8009b54:	d012      	beq.n	8009b7c <mem_free+0x144>
 8009b56:	7910      	ldrb	r0, [r2, #4]
 8009b58:	b980      	cbnz	r0, 8009b7c <mem_free+0x144>
 8009b5a:	6868      	ldr	r0, [r5, #4]
 8009b5c:	4282      	cmp	r2, r0
 8009b5e:	d00d      	beq.n	8009b7c <mem_free+0x144>
    if (lfree == nmem) {
 8009b60:	68a8      	ldr	r0, [r5, #8]
 8009b62:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8009b64:	5a5a      	ldrh	r2, [r3, r1]
 8009b66:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009b6a:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8009b6c:	bf08      	it	eq
 8009b6e:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009b70:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009b74:	bf1e      	ittt	ne
 8009b76:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8009b78:	1af1      	subne	r1, r6, r3
 8009b7a:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8009b7c:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8009b80:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8009b82:	428e      	cmp	r6, r1
 8009b84:	d00f      	beq.n	8009ba6 <mem_free+0x16e>
 8009b86:	7908      	ldrb	r0, [r1, #4]
 8009b88:	b968      	cbnz	r0, 8009ba6 <mem_free+0x16e>
    if (lfree == mem) {
 8009b8a:	68a8      	ldr	r0, [r5, #8]
 8009b8c:	4286      	cmp	r6, r0
      lfree = pmem;
 8009b8e:	bf08      	it	eq
 8009b90:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 8009b92:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009b96:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009b98:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009b9c:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009ba0:	bf1c      	itt	ne
 8009ba2:	185b      	addne	r3, r3, r1
 8009ba4:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009ba6:	480a      	ldr	r0, [pc, #40]	; (8009bd0 <mem_free+0x198>)
}
 8009ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8009bac:	f004 bcf7 	b.w	800e59e <sys_mutex_unlock>
}
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0801bd67 	.word	0x0801bd67
 8009bb8:	0801bde0 	.word	0x0801bde0
 8009bbc:	0801a72c 	.word	0x0801a72c
 8009bc0:	20006aec 	.word	0x20006aec
 8009bc4:	0801be01 	.word	0x0801be01
 8009bc8:	0801be1a 	.word	0x0801be1a
 8009bcc:	0801be40 	.word	0x0801be40
 8009bd0:	20006af8 	.word	0x20006af8
 8009bd4:	0801be72 	.word	0x0801be72
 8009bd8:	0801be89 	.word	0x0801be89
 8009bdc:	0801bea3 	.word	0x0801bea3
 8009be0:	0801bebe 	.word	0x0801bebe

08009be4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009be8:	1ccc      	adds	r4, r1, #3
{
 8009bea:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009bec:	f024 0403 	bic.w	r4, r4, #3
 8009bf0:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8009bf2:	2c0b      	cmp	r4, #11
 8009bf4:	d904      	bls.n	8009c00 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009bf6:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8009bfa:	d902      	bls.n	8009c02 <mem_trim+0x1e>
    return NULL;
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	e01a      	b.n	8009c36 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8009c00:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009c02:	42a1      	cmp	r1, r4
 8009c04:	d8fa      	bhi.n	8009bfc <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009c06:	4e47      	ldr	r6, [pc, #284]	; (8009d24 <mem_trim+0x140>)
 8009c08:	6833      	ldr	r3, [r6, #0]
 8009c0a:	42ab      	cmp	r3, r5
 8009c0c:	d802      	bhi.n	8009c14 <mem_trim+0x30>
 8009c0e:	6873      	ldr	r3, [r6, #4]
 8009c10:	42ab      	cmp	r3, r5
 8009c12:	d806      	bhi.n	8009c22 <mem_trim+0x3e>
 8009c14:	4b44      	ldr	r3, [pc, #272]	; (8009d28 <mem_trim+0x144>)
 8009c16:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009c1a:	4944      	ldr	r1, [pc, #272]	; (8009d2c <mem_trim+0x148>)
 8009c1c:	4844      	ldr	r0, [pc, #272]	; (8009d30 <mem_trim+0x14c>)
 8009c1e:	f005 f9d9 	bl	800efd4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009c22:	6833      	ldr	r3, [r6, #0]
 8009c24:	42ab      	cmp	r3, r5
 8009c26:	d802      	bhi.n	8009c2e <mem_trim+0x4a>
 8009c28:	6872      	ldr	r2, [r6, #4]
 8009c2a:	42aa      	cmp	r2, r5
 8009c2c:	d806      	bhi.n	8009c3c <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009c2e:	f004 fcc9 	bl	800e5c4 <sys_arch_protect>
 8009c32:	f004 fcd3 	bl	800e5dc <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8009c36:	4628      	mov	r0, r5
 8009c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009c3c:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009c40:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8009c44:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009c46:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8009c4a:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009c4c:	eba8 0807 	sub.w	r8, r8, r7
 8009c50:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009c54:	45a0      	cmp	r8, r4
 8009c56:	d207      	bcs.n	8009c68 <mem_trim+0x84>
 8009c58:	4b33      	ldr	r3, [pc, #204]	; (8009d28 <mem_trim+0x144>)
 8009c5a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009c5e:	4935      	ldr	r1, [pc, #212]	; (8009d34 <mem_trim+0x150>)
 8009c60:	4833      	ldr	r0, [pc, #204]	; (8009d30 <mem_trim+0x14c>)
 8009c62:	f005 f9b7 	bl	800efd4 <iprintf>
  if (newsize > size) {
 8009c66:	e7c9      	b.n	8009bfc <mem_trim+0x18>
  if (newsize == size) {
 8009c68:	d0e5      	beq.n	8009c36 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 8009c6a:	4833      	ldr	r0, [pc, #204]	; (8009d38 <mem_trim+0x154>)
 8009c6c:	f004 fc92 	bl	800e594 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8009c70:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009c74:	f8d6 b000 	ldr.w	fp, [r6]
 8009c78:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8009c7c:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8009c80:	bb3b      	cbnz	r3, 8009cd2 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009c82:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 8009c86:	d106      	bne.n	8009c96 <mem_trim+0xb2>
 8009c88:	4b27      	ldr	r3, [pc, #156]	; (8009d28 <mem_trim+0x144>)
 8009c8a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009c8e:	492b      	ldr	r1, [pc, #172]	; (8009d3c <mem_trim+0x158>)
 8009c90:	4827      	ldr	r0, [pc, #156]	; (8009d30 <mem_trim+0x14c>)
 8009c92:	f005 f99f 	bl	800efd4 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009c96:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8009c9a:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8009c9c:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ca0:	441c      	add	r4, r3
  return (struct mem *)(void *)&ram[ptr];
 8009ca2:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8009ca4:	4551      	cmp	r1, sl
    mem2->used = 0;
 8009ca6:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009caa:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8009cac:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8009cb0:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8009cb2:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8009cb4:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8009cb6:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009cba:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8009cbc:	bf08      	it	eq
 8009cbe:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009cc0:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 8009cc4:	d001      	beq.n	8009cca <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009cc6:	440b      	add	r3, r1
 8009cc8:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009cca:	481b      	ldr	r0, [pc, #108]	; (8009d38 <mem_trim+0x154>)
 8009ccc:	f004 fc67 	bl	800e59e <sys_mutex_unlock>
  return rmem;
 8009cd0:	e7b1      	b.n	8009c36 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009cd2:	f104 0314 	add.w	r3, r4, #20
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	4598      	cmp	r8, r3
 8009cda:	d3f6      	bcc.n	8009cca <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009cdc:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009ce0:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ce4:	441c      	add	r4, r3
 8009ce6:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009ce8:	d106      	bne.n	8009cf8 <mem_trim+0x114>
 8009cea:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <mem_trim+0x144>)
 8009cec:	f240 3216 	movw	r2, #790	; 0x316
 8009cf0:	4912      	ldr	r1, [pc, #72]	; (8009d3c <mem_trim+0x158>)
 8009cf2:	480f      	ldr	r0, [pc, #60]	; (8009d30 <mem_trim+0x14c>)
 8009cf4:	f005 f96e 	bl	800efd4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009cf8:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8009cfa:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8009cfc:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8009cfe:	4291      	cmp	r1, r2
    mem2->used = 0;
 8009d00:	f04f 0100 	mov.w	r1, #0
 8009d04:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8009d06:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8009d0a:	bf88      	it	hi
 8009d0c:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8009d0e:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8009d10:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8009d12:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009d16:	5b1a      	ldrh	r2, [r3, r4]
 8009d18:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009d1c:	bf1c      	itt	ne
 8009d1e:	189b      	addne	r3, r3, r2
 8009d20:	805c      	strhne	r4, [r3, #2]
 8009d22:	e7d2      	b.n	8009cca <mem_trim+0xe6>
 8009d24:	20006aec 	.word	0x20006aec
 8009d28:	0801bd67 	.word	0x0801bd67
 8009d2c:	0801bee8 	.word	0x0801bee8
 8009d30:	0801a72c 	.word	0x0801a72c
 8009d34:	0801beff 	.word	0x0801beff
 8009d38:	20006af8 	.word	0x20006af8
 8009d3c:	0801bf1f 	.word	0x0801bf1f

08009d40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f000 8084 	beq.w	8009e52 <mem_malloc+0x112>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009d4a:	1cc5      	adds	r5, r0, #3
 8009d4c:	f025 0503 	bic.w	r5, r5, #3
 8009d50:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8009d52:	2d0b      	cmp	r5, #11
 8009d54:	d904      	bls.n	8009d60 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009d56:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8009d5a:	d902      	bls.n	8009d62 <mem_malloc+0x22>
    return NULL;
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e078      	b.n	8009e52 <mem_malloc+0x112>
    size = MIN_SIZE_ALIGNED;
 8009d60:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009d62:	42a8      	cmp	r0, r5
 8009d64:	d8fa      	bhi.n	8009d5c <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009d66:	4f40      	ldr	r7, [pc, #256]	; (8009e68 <mem_malloc+0x128>)
 8009d68:	f107 000c 	add.w	r0, r7, #12
 8009d6c:	f004 fc12 	bl	800e594 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009d74:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009d78:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8009d7c:	1ab6      	subs	r6, r6, r2
 8009d7e:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009d80:	4286      	cmp	r6, r0
 8009d82:	d303      	bcc.n	8009d8c <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009d84:	4839      	ldr	r0, [pc, #228]	; (8009e6c <mem_malloc+0x12c>)
 8009d86:	f004 fc0a 	bl	800e59e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009d8a:	e7e7      	b.n	8009d5c <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8009d8c:	1994      	adds	r4, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009d8e:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8009d90:	7923      	ldrb	r3, [r4, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d165      	bne.n	8009e62 <mem_malloc+0x122>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009d96:	ebac 0306 	sub.w	r3, ip, r6
 8009d9a:	440b      	add	r3, r1
      if ((!mem->used) &&
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	d360      	bcc.n	8009e62 <mem_malloc+0x122>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009da0:	f105 0808 	add.w	r8, r5, #8
 8009da4:	3514      	adds	r5, #20
 8009da6:	b2ad      	uxth	r5, r5
 8009da8:	fa1f f888 	uxth.w	r8, r8
 8009dac:	42ab      	cmp	r3, r5
 8009dae:	d352      	bcc.n	8009e56 <mem_malloc+0x116>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009db0:	eb08 0506 	add.w	r5, r8, r6
 8009db4:	b2ad      	uxth	r5, r5
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009db6:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8009dba:	d106      	bne.n	8009dca <mem_malloc+0x8a>
 8009dbc:	4b2c      	ldr	r3, [pc, #176]	; (8009e70 <mem_malloc+0x130>)
 8009dbe:	f240 3287 	movw	r2, #903	; 0x387
 8009dc2:	492c      	ldr	r1, [pc, #176]	; (8009e74 <mem_malloc+0x134>)
 8009dc4:	482c      	ldr	r0, [pc, #176]	; (8009e78 <mem_malloc+0x138>)
 8009dc6:	f005 f905 	bl	800efd4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009dca:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8009dcc:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8009dce:	195a      	adds	r2, r3, r5
          mem2->used = 0;
 8009dd0:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8009dd2:	8821      	ldrh	r1, [r4, #0]
 8009dd4:	5359      	strh	r1, [r3, r5]
          mem2->prev = ptr;
 8009dd6:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8009dd8:	2201      	movs	r2, #1
          mem->next = ptr2;
 8009dda:	8025      	strh	r5, [r4, #0]
          mem->used = 1;
 8009ddc:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009dde:	5b5a      	ldrh	r2, [r3, r5]
 8009de0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009de4:	d001      	beq.n	8009dea <mem_malloc+0xaa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009de6:	4413      	add	r3, r2
 8009de8:	805d      	strh	r5, [r3, #2]
        if (mem == lfree) {
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d110      	bne.n	8009e12 <mem_malloc+0xd2>
  return (struct mem *)(void *)&ram[ptr];
 8009df0:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 8009df4:	791a      	ldrb	r2, [r3, #4]
 8009df6:	b10a      	cbz	r2, 8009dfc <mem_malloc+0xbc>
 8009df8:	4299      	cmp	r1, r3
 8009dfa:	d12f      	bne.n	8009e5c <mem_malloc+0x11c>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009dfc:	4299      	cmp	r1, r3
          lfree = cur;
 8009dfe:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009e00:	d007      	beq.n	8009e12 <mem_malloc+0xd2>
 8009e02:	b132      	cbz	r2, 8009e12 <mem_malloc+0xd2>
 8009e04:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <mem_malloc+0x130>)
 8009e06:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009e0a:	491c      	ldr	r1, [pc, #112]	; (8009e7c <mem_malloc+0x13c>)
 8009e0c:	481a      	ldr	r0, [pc, #104]	; (8009e78 <mem_malloc+0x138>)
 8009e0e:	f005 f8e1 	bl	800efd4 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8009e12:	4816      	ldr	r0, [pc, #88]	; (8009e6c <mem_malloc+0x12c>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009e14:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 8009e16:	f004 fbc2 	bl	800e59e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4543      	cmp	r3, r8
 8009e1e:	d206      	bcs.n	8009e2e <mem_malloc+0xee>
 8009e20:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <mem_malloc+0x130>)
 8009e22:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009e26:	4916      	ldr	r1, [pc, #88]	; (8009e80 <mem_malloc+0x140>)
 8009e28:	4813      	ldr	r0, [pc, #76]	; (8009e78 <mem_malloc+0x138>)
 8009e2a:	f005 f8d3 	bl	800efd4 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009e2e:	07a3      	lsls	r3, r4, #30
 8009e30:	d00d      	beq.n	8009e4e <mem_malloc+0x10e>
 8009e32:	4b0f      	ldr	r3, [pc, #60]	; (8009e70 <mem_malloc+0x130>)
 8009e34:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009e38:	4912      	ldr	r1, [pc, #72]	; (8009e84 <mem_malloc+0x144>)
 8009e3a:	480f      	ldr	r0, [pc, #60]	; (8009e78 <mem_malloc+0x138>)
 8009e3c:	f005 f8ca 	bl	800efd4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <mem_malloc+0x130>)
 8009e42:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009e46:	4910      	ldr	r1, [pc, #64]	; (8009e88 <mem_malloc+0x148>)
 8009e48:	480b      	ldr	r0, [pc, #44]	; (8009e78 <mem_malloc+0x138>)
 8009e4a:	f005 f8c3 	bl	800efd4 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009e4e:	f104 0008 	add.w	r0, r4, #8
}
 8009e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8009e56:	2301      	movs	r3, #1
 8009e58:	7123      	strb	r3, [r4, #4]
 8009e5a:	e7c6      	b.n	8009dea <mem_malloc+0xaa>
  return (struct mem *)(void *)&ram[ptr];
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	4403      	add	r3, r0
 8009e60:	e7c8      	b.n	8009df4 <mem_malloc+0xb4>
 8009e62:	460e      	mov	r6, r1
 8009e64:	e78c      	b.n	8009d80 <mem_malloc+0x40>
 8009e66:	bf00      	nop
 8009e68:	20006aec 	.word	0x20006aec
 8009e6c:	20006af8 	.word	0x20006af8
 8009e70:	0801bd67 	.word	0x0801bd67
 8009e74:	0801bf1f 	.word	0x0801bf1f
 8009e78:	0801a72c 	.word	0x0801a72c
 8009e7c:	0801bf30 	.word	0x0801bf30
 8009e80:	0801bf49 	.word	0x0801bf49
 8009e84:	0801bf79 	.word	0x0801bf79
 8009e88:	0801bfa8 	.word	0x0801bfa8

08009e8c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009e90:	f004 fb98 	bl	800e5c4 <sys_arch_protect>
 8009e94:	4605      	mov	r5, r0

  memp = *desc->tab;
 8009e96:	68a3      	ldr	r3, [r4, #8]
 8009e98:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009e9a:	b15c      	cbz	r4, 8009eb4 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009e9c:	6822      	ldr	r2, [r4, #0]
 8009e9e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009ea0:	07a3      	lsls	r3, r4, #30
 8009ea2:	d006      	beq.n	8009eb2 <do_memp_malloc_pool+0x26>
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <do_memp_malloc_pool+0x30>)
 8009ea6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009eaa:	4905      	ldr	r1, [pc, #20]	; (8009ec0 <do_memp_malloc_pool+0x34>)
 8009eac:	4805      	ldr	r0, [pc, #20]	; (8009ec4 <do_memp_malloc_pool+0x38>)
 8009eae:	f005 f891 	bl	800efd4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009eb2:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009eb4:	f004 fb92 	bl	800e5dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8009eb8:	4620      	mov	r0, r4
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	0801bfcb 	.word	0x0801bfcb
 8009ec0:	0801c02a 	.word	0x0801c02a
 8009ec4:	0801a72c 	.word	0x0801a72c

08009ec8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009ec8:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009eca:	078b      	lsls	r3, r1, #30
{
 8009ecc:	4605      	mov	r5, r0
 8009ece:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009ed0:	d006      	beq.n	8009ee0 <do_memp_free_pool+0x18>
 8009ed2:	4b08      	ldr	r3, [pc, #32]	; (8009ef4 <do_memp_free_pool+0x2c>)
 8009ed4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009ed8:	4907      	ldr	r1, [pc, #28]	; (8009ef8 <do_memp_free_pool+0x30>)
 8009eda:	4808      	ldr	r0, [pc, #32]	; (8009efc <do_memp_free_pool+0x34>)
 8009edc:	f005 f87a 	bl	800efd4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8009ee0:	f004 fb70 	bl	800e5c4 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009ee4:	68ab      	ldr	r3, [r5, #8]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009eea:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009ef0:	f004 bb74 	b.w	800e5dc <sys_arch_unprotect>
 8009ef4:	0801bfcb 	.word	0x0801bfcb
 8009ef8:	0801c04d 	.word	0x0801c04d
 8009efc:	0801a72c 	.word	0x0801a72c

08009f00 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009f00:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8009f02:	2200      	movs	r2, #0
 8009f04:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009f06:	3303      	adds	r3, #3
{
 8009f08:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009f0a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8009f0e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8009f10:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8009f12:	4294      	cmp	r4, r2
 8009f14:	dc00      	bgt.n	8009f18 <memp_init_pool+0x18>
}
 8009f16:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8009f18:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8009f1a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009f1c:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009f1e:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8009f20:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009f22:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8009f24:	e7f5      	b.n	8009f12 <memp_init_pool+0x12>
	...

08009f28 <memp_init>:
{
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d05      	ldr	r5, [pc, #20]	; (8009f40 <memp_init+0x18>)
 8009f2c:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009f2e:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 8009f30:	f855 0b04 	ldr.w	r0, [r5], #4
 8009f34:	f7ff ffe4 	bl	8009f00 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009f38:	b2a4      	uxth	r4, r4
 8009f3a:	2c00      	cmp	r4, #0
 8009f3c:	d1f7      	bne.n	8009f2e <memp_init+0x6>
}
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	080118bc 	.word	0x080118bc

08009f44 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009f44:	280c      	cmp	r0, #12
{
 8009f46:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009f48:	d806      	bhi.n	8009f58 <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009f4a:	4b08      	ldr	r3, [pc, #32]	; (8009f6c <memp_malloc+0x28>)
 8009f4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8009f50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009f54:	f7ff bf9a 	b.w	8009e8c <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <memp_malloc+0x2c>)
 8009f5a:	f240 1257 	movw	r2, #343	; 0x157
 8009f5e:	4905      	ldr	r1, [pc, #20]	; (8009f74 <memp_malloc+0x30>)
 8009f60:	4805      	ldr	r0, [pc, #20]	; (8009f78 <memp_malloc+0x34>)
 8009f62:	f005 f837 	bl	800efd4 <iprintf>
}
 8009f66:	2000      	movs	r0, #0
 8009f68:	bd08      	pop	{r3, pc}
 8009f6a:	bf00      	nop
 8009f6c:	080118bc 	.word	0x080118bc
 8009f70:	0801bfcb 	.word	0x0801bfcb
 8009f74:	0801c07f 	.word	0x0801c07f
 8009f78:	0801a72c 	.word	0x0801a72c

08009f7c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009f7c:	280c      	cmp	r0, #12
 8009f7e:	d906      	bls.n	8009f8e <memp_free+0x12>
 8009f80:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <memp_free+0x20>)
 8009f82:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009f86:	4906      	ldr	r1, [pc, #24]	; (8009fa0 <memp_free+0x24>)
 8009f88:	4806      	ldr	r0, [pc, #24]	; (8009fa4 <memp_free+0x28>)
 8009f8a:	f005 b823 	b.w	800efd4 <iprintf>

  if (mem == NULL) {
 8009f8e:	b121      	cbz	r1, 8009f9a <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009f90:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <memp_free+0x2c>)
 8009f92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009f96:	f7ff bf97 	b.w	8009ec8 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009f9a:	4770      	bx	lr
 8009f9c:	0801bfcb 	.word	0x0801bfcb
 8009fa0:	0801c09c 	.word	0x0801c09c
 8009fa4:	0801a72c 	.word	0x0801a72c
 8009fa8:	080118bc 	.word	0x080118bc

08009fac <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009fac:	f06f 000b 	mvn.w	r0, #11
 8009fb0:	4770      	bx	lr
	...

08009fb4 <netif_issue_reports>:
{
 8009fb4:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	b930      	cbnz	r0, 8009fc8 <netif_issue_reports+0x14>
 8009fba:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <netif_issue_reports+0x38>)
 8009fbc:	f240 326d 	movw	r2, #877	; 0x36d
 8009fc0:	490b      	ldr	r1, [pc, #44]	; (8009ff0 <netif_issue_reports+0x3c>)
 8009fc2:	480c      	ldr	r0, [pc, #48]	; (8009ff4 <netif_issue_reports+0x40>)
 8009fc4:	f005 f806 	bl	800efd4 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009fc8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009fcc:	f003 0205 	and.w	r2, r3, #5
 8009fd0:	2a05      	cmp	r2, #5
 8009fd2:	d109      	bne.n	8009fe8 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009fd4:	6862      	ldr	r2, [r4, #4]
 8009fd6:	b13a      	cbz	r2, 8009fe8 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009fd8:	071b      	lsls	r3, r3, #28
 8009fda:	d505      	bpl.n	8009fe8 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 8009fdc:	1d21      	adds	r1, r4, #4
 8009fde:	4620      	mov	r0, r4
}
 8009fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8009fe4:	f7fe bc4a 	b.w	800887c <etharp_request>
}
 8009fe8:	bd10      	pop	{r4, pc}
 8009fea:	bf00      	nop
 8009fec:	0801c0b7 	.word	0x0801c0b7
 8009ff0:	0801c117 	.word	0x0801c117
 8009ff4:	0801a72c 	.word	0x0801a72c

08009ff8 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009ffe:	460c      	mov	r4, r1
 800a000:	b931      	cbnz	r1, 800a010 <netif_do_set_ipaddr.isra.0+0x18>
 800a002:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <netif_do_set_ipaddr.isra.0+0x44>)
 800a004:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a008:	490d      	ldr	r1, [pc, #52]	; (800a040 <netif_do_set_ipaddr.isra.0+0x48>)
 800a00a:	480e      	ldr	r0, [pc, #56]	; (800a044 <netif_do_set_ipaddr.isra.0+0x4c>)
 800a00c:	f004 ffe2 	bl	800efd4 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a010:	686b      	ldr	r3, [r5, #4]
 800a012:	6822      	ldr	r2, [r4, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d00f      	beq.n	800a038 <netif_do_set_ipaddr.isra.0+0x40>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a018:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a01a:	a901      	add	r1, sp, #4
 800a01c:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a01e:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a020:	f001 fc54 	bl	800b8cc <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a024:	a901      	add	r1, sp, #4
 800a026:	4630      	mov	r0, r6
 800a028:	f004 f95c 	bl	800e2e4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a02c:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a02e:	2101      	movs	r1, #1
 800a030:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a032:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a034:	f7ff ffbe 	bl	8009fb4 <netif_issue_reports>
}
 800a038:	b002      	add	sp, #8
 800a03a:	bd70      	pop	{r4, r5, r6, pc}
 800a03c:	0801c0b7 	.word	0x0801c0b7
 800a040:	0801ad05 	.word	0x0801ad05
 800a044:	0801a72c 	.word	0x0801a72c

0800a048 <netif_init>:
}
 800a048:	4770      	bx	lr
	...

0800a04c <netif_set_addr>:
{
 800a04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800a04e:	4d14      	ldr	r5, [pc, #80]	; (800a0a0 <netif_set_addr+0x54>)
{
 800a050:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800a052:	2900      	cmp	r1, #0
 800a054:	bf14      	ite	ne
 800a056:	460e      	movne	r6, r1
 800a058:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	bf14      	ite	ne
 800a05e:	4617      	movne	r7, r2
 800a060:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800a062:	2b00      	cmp	r3, #0
 800a064:	bf18      	it	ne
 800a066:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 800a068:	6833      	ldr	r3, [r6, #0]
 800a06a:	b9b3      	cbnz	r3, 800a09a <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a06c:	aa01      	add	r2, sp, #4
 800a06e:	4631      	mov	r1, r6
 800a070:	f7ff ffc2 	bl	8009ff8 <netif_do_set_ipaddr.isra.0>
 800a074:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	68a1      	ldr	r1, [r4, #8]
 800a07a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a07c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a07e:	bf18      	it	ne
 800a080:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a082:	682a      	ldr	r2, [r5, #0]
 800a084:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a086:	bf18      	it	ne
 800a088:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800a08a:	b923      	cbnz	r3, 800a096 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a08c:	aa01      	add	r2, sp, #4
 800a08e:	4631      	mov	r1, r6
 800a090:	4620      	mov	r0, r4
 800a092:	f7ff ffb1 	bl	8009ff8 <netif_do_set_ipaddr.isra.0>
}
 800a096:	b003      	add	sp, #12
 800a098:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800a09a:	2300      	movs	r3, #0
 800a09c:	e7eb      	b.n	800a076 <netif_set_addr+0x2a>
 800a09e:	bf00      	nop
 800a0a0:	080118b8 	.word	0x080118b8

0800a0a4 <netif_add>:
{
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	b948      	cbnz	r0, 800a0c4 <netif_add+0x20>
 800a0b0:	4b3b      	ldr	r3, [pc, #236]	; (800a1a0 <netif_add+0xfc>)
 800a0b2:	f240 1227 	movw	r2, #295	; 0x127
 800a0b6:	493b      	ldr	r1, [pc, #236]	; (800a1a4 <netif_add+0x100>)
 800a0b8:	483b      	ldr	r0, [pc, #236]	; (800a1a8 <netif_add+0x104>)
 800a0ba:	f004 ff8b 	bl	800efd4 <iprintf>
}
 800a0be:	4620      	mov	r0, r4
 800a0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a0c4:	f1b8 0f00 	cmp.w	r8, #0
 800a0c8:	d108      	bne.n	800a0dc <netif_add+0x38>
 800a0ca:	4b35      	ldr	r3, [pc, #212]	; (800a1a0 <netif_add+0xfc>)
 800a0cc:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a0d0:	4936      	ldr	r1, [pc, #216]	; (800a1ac <netif_add+0x108>)
 800a0d2:	4644      	mov	r4, r8
 800a0d4:	4834      	ldr	r0, [pc, #208]	; (800a1a8 <netif_add+0x104>)
 800a0d6:	f004 ff7d 	bl	800efd4 <iprintf>
 800a0da:	e7f0      	b.n	800a0be <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 800a0dc:	4e34      	ldr	r6, [pc, #208]	; (800a1b0 <netif_add+0x10c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a0de:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a0e0:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800a1bc <netif_add+0x118>
  netif->output = netif_null_output_ip4;
 800a0e4:	6146      	str	r6, [r0, #20]
  netif->state = state;
 800a0e6:	9e08      	ldr	r6, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	bf08      	it	eq
 800a0ec:	4663      	moveq	r3, ip
  ip_addr_set_zero_ip4(&netif->gw);
 800a0ee:	60c5      	str	r5, [r0, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a0f0:	42aa      	cmp	r2, r5
 800a0f2:	bf08      	it	eq
 800a0f4:	4662      	moveq	r2, ip
  netif->state = state;
 800a0f6:	6206      	str	r6, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a0f8:	42a9      	cmp	r1, r5
 800a0fa:	bf08      	it	eq
 800a0fc:	4661      	moveq	r1, ip
  netif->num = netif_num;
 800a0fe:	4e2d      	ldr	r6, [pc, #180]	; (800a1b4 <netif_add+0x110>)
  netif->mtu = 0;
 800a100:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->num = netif_num;
 800a102:	7837      	ldrb	r7, [r6, #0]
  netif->flags = 0;
 800a104:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  netif->num = netif_num;
 800a108:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
  netif->input = input;
 800a10c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a10e:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 800a110:	61c5      	str	r5, [r0, #28]
  netif->input = input;
 800a112:	6107      	str	r7, [r0, #16]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a114:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a118:	f7ff ff98 	bl	800a04c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800a11c:	4620      	mov	r0, r4
 800a11e:	47c0      	blx	r8
 800a120:	2800      	cmp	r0, #0
 800a122:	d13b      	bne.n	800a19c <netif_add+0xf8>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a124:	f8df a078 	ldr.w	sl, [pc, #120]	; 800a1a0 <netif_add+0xfc>
 800a128:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a1c0 <netif_add+0x11c>
 800a12c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a1a8 <netif_add+0x104>
      if (netif->num == 255) {
 800a130:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 800a134:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a136:	6875      	ldr	r5, [r6, #4]
      if (netif->num == 255) {
 800a138:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 800a13a:	bf04      	itt	eq
 800a13c:	2300      	moveq	r3, #0
 800a13e:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a142:	b92d      	cbnz	r5, 800a150 <netif_add+0xac>
  if (netif->num == 254) {
 800a144:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a148:	2bfe      	cmp	r3, #254	; 0xfe
 800a14a:	d120      	bne.n	800a18e <netif_add+0xea>
    netif_num = 0;
 800a14c:	462b      	mov	r3, r5
 800a14e:	e020      	b.n	800a192 <netif_add+0xee>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a150:	42a5      	cmp	r5, r4
 800a152:	d106      	bne.n	800a162 <netif_add+0xbe>
 800a154:	4653      	mov	r3, sl
 800a156:	f240 128b 	movw	r2, #395	; 0x18b
 800a15a:	4649      	mov	r1, r9
 800a15c:	4640      	mov	r0, r8
 800a15e:	f004 ff39 	bl	800efd4 <iprintf>
        num_netifs++;
 800a162:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a164:	2fff      	cmp	r7, #255	; 0xff
 800a166:	dd06      	ble.n	800a176 <netif_add+0xd2>
 800a168:	4653      	mov	r3, sl
 800a16a:	f240 128d 	movw	r2, #397	; 0x18d
 800a16e:	4912      	ldr	r1, [pc, #72]	; (800a1b8 <netif_add+0x114>)
 800a170:	4640      	mov	r0, r8
 800a172:	f004 ff2f 	bl	800efd4 <iprintf>
        if (netif2->num == netif->num) {
 800a176:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a17a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 800a17e:	429a      	cmp	r2, r3
 800a180:	d103      	bne.n	800a18a <netif_add+0xe6>
          netif->num++;
 800a182:	3201      	adds	r2, #1
 800a184:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 800a188:	e7d2      	b.n	800a130 <netif_add+0x8c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a18a:	682d      	ldr	r5, [r5, #0]
 800a18c:	e7d9      	b.n	800a142 <netif_add+0x9e>
    netif_num = (u8_t)(netif->num + 1);
 800a18e:	3301      	adds	r3, #1
 800a190:	b2db      	uxtb	r3, r3
 800a192:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 800a194:	6873      	ldr	r3, [r6, #4]
 800a196:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800a198:	6074      	str	r4, [r6, #4]
  return netif;
 800a19a:	e790      	b.n	800a0be <netif_add+0x1a>
    return NULL;
 800a19c:	462c      	mov	r4, r5
 800a19e:	e78e      	b.n	800a0be <netif_add+0x1a>
 800a1a0:	0801c0b7 	.word	0x0801c0b7
 800a1a4:	0801c1cc 	.word	0x0801c1cc
 800a1a8:	0801a72c 	.word	0x0801a72c
 800a1ac:	0801c1e5 	.word	0x0801c1e5
 800a1b0:	08009fad 	.word	0x08009fad
 800a1b4:	2000d04c 	.word	0x2000d04c
 800a1b8:	0801c21b 	.word	0x0801c21b
 800a1bc:	080118b8 	.word	0x080118b8
 800a1c0:	0801c207 	.word	0x0801c207

0800a1c4 <netif_set_default>:
  netif_default = netif;
 800a1c4:	4b01      	ldr	r3, [pc, #4]	; (800a1cc <netif_set_default+0x8>)
 800a1c6:	6098      	str	r0, [r3, #8]
}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	2000d04c 	.word	0x2000d04c

0800a1d0 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a1d0:	b930      	cbnz	r0, 800a1e0 <netif_set_up+0x10>
 800a1d2:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <netif_set_up+0x28>)
 800a1d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a1d8:	4908      	ldr	r1, [pc, #32]	; (800a1fc <netif_set_up+0x2c>)
 800a1da:	4809      	ldr	r0, [pc, #36]	; (800a200 <netif_set_up+0x30>)
 800a1dc:	f004 befa 	b.w	800efd4 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a1e0:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800a1e4:	07d1      	lsls	r1, r2, #31
 800a1e6:	d406      	bmi.n	800a1f6 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a1e8:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a1ec:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a1ee:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a1f2:	f7ff bedf 	b.w	8009fb4 <netif_issue_reports>
}
 800a1f6:	4770      	bx	lr
 800a1f8:	0801c0b7 	.word	0x0801c0b7
 800a1fc:	0801c249 	.word	0x0801c249
 800a200:	0801a72c 	.word	0x0801a72c

0800a204 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a204:	b930      	cbnz	r0, 800a214 <netif_set_down+0x10>
 800a206:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <netif_set_down+0x2c>)
 800a208:	f240 329b 	movw	r2, #923	; 0x39b
 800a20c:	4909      	ldr	r1, [pc, #36]	; (800a234 <netif_set_down+0x30>)
 800a20e:	480a      	ldr	r0, [pc, #40]	; (800a238 <netif_set_down+0x34>)
 800a210:	f004 bee0 	b.w	800efd4 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800a214:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800a218:	07d1      	lsls	r1, r2, #31
 800a21a:	d507      	bpl.n	800a22c <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a21c:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a220:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a222:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a226:	d501      	bpl.n	800a22c <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 800a228:	f7fe ba64 	b.w	80086f4 <etharp_cleanup_netif>
}
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	0801c0b7 	.word	0x0801c0b7
 800a234:	0801c265 	.word	0x0801c265
 800a238:	0801a72c 	.word	0x0801a72c

0800a23c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a23c:	4603      	mov	r3, r0
 800a23e:	b158      	cbz	r0, 800a258 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800a240:	4a06      	ldr	r2, [pc, #24]	; (800a25c <netif_get_by_index+0x20>)
 800a242:	6850      	ldr	r0, [r2, #4]
 800a244:	b900      	cbnz	r0, 800a248 <netif_get_by_index+0xc>
 800a246:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800a248:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800a24c:	3201      	adds	r2, #1
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	429a      	cmp	r2, r3
 800a252:	d001      	beq.n	800a258 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800a254:	6800      	ldr	r0, [r0, #0]
 800a256:	e7f5      	b.n	800a244 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	2000d04c 	.word	0x2000d04c

0800a260 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a260:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a262:	b968      	cbnz	r0, 800a280 <pbuf_add_header_impl+0x20>
 800a264:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <pbuf_add_header_impl+0x58>)
 800a266:	f240 12df 	movw	r2, #479	; 0x1df
 800a26a:	4914      	ldr	r1, [pc, #80]	; (800a2bc <pbuf_add_header_impl+0x5c>)
 800a26c:	4814      	ldr	r0, [pc, #80]	; (800a2c0 <pbuf_add_header_impl+0x60>)
 800a26e:	f004 feb1 	bl	800efd4 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 800a272:	2001      	movs	r0, #1
 800a274:	e01f      	b.n	800a2b6 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a276:	2a00      	cmp	r2, #0
 800a278:	d0fb      	beq.n	800a272 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800a27a:	6842      	ldr	r2, [r0, #4]
 800a27c:	1a51      	subs	r1, r2, r1
 800a27e:	e014      	b.n	800a2aa <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a280:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a284:	d2f5      	bcs.n	800a272 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800a286:	b1a9      	cbz	r1, 800a2b4 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a288:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 800a28a:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a28c:	fa13 f381 	uxtah	r3, r3, r1
 800a290:	b29b      	uxth	r3, r3
 800a292:	429c      	cmp	r4, r3
 800a294:	d8ed      	bhi.n	800a272 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a296:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800a29a:	2d00      	cmp	r5, #0
 800a29c:	daeb      	bge.n	800a276 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800a29e:	6842      	ldr	r2, [r0, #4]
 800a2a0:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a2a2:	f100 0210 	add.w	r2, r0, #16
 800a2a6:	4291      	cmp	r1, r2
 800a2a8:	d3e3      	bcc.n	800a272 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800a2aa:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800a2ac:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a2ae:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a2b0:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a2b2:	8144      	strh	r4, [r0, #10]


  return 0;
 800a2b4:	2000      	movs	r0, #0
}
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	0801c2c7 	.word	0x0801c2c7
 800a2bc:	0801c3c8 	.word	0x0801c3c8
 800a2c0:	0801a72c 	.word	0x0801a72c

0800a2c4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a2c4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a2c8:	2b01      	cmp	r3, #1
{
 800a2ca:	b570      	push	{r4, r5, r6, lr}
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a2d2:	d006      	beq.n	800a2e2 <pbuf_alloc_reference+0x1e>
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <pbuf_alloc_reference+0x3c>)
 800a2d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a2da:	490a      	ldr	r1, [pc, #40]	; (800a304 <pbuf_alloc_reference+0x40>)
 800a2dc:	480a      	ldr	r0, [pc, #40]	; (800a308 <pbuf_alloc_reference+0x44>)
 800a2de:	f004 fe79 	bl	800efd4 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a2e2:	200b      	movs	r0, #11
 800a2e4:	f7ff fe2e 	bl	8009f44 <memp_malloc>
  if (p == NULL) {
 800a2e8:	b140      	cbz	r0, 800a2fc <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800a2ea:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800a2ec:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800a2ee:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 800a2f0:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 800a2f2:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 800a2f4:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	81c3      	strh	r3, [r0, #14]
}
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
 800a2fe:	bf00      	nop
 800a300:	0801c2c7 	.word	0x0801c2c7
 800a304:	0801c326 	.word	0x0801c326
 800a308:	0801a72c 	.word	0x0801a72c

0800a30c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a30c:	3003      	adds	r0, #3
 800a30e:	f020 0003 	bic.w	r0, r0, #3
{
 800a312:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a314:	180e      	adds	r6, r1, r0
 800a316:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800a31a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a31c:	42ae      	cmp	r6, r5
 800a31e:	d80d      	bhi.n	800a33c <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 800a320:	b104      	cbz	r4, 800a324 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a322:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a324:	4618      	mov	r0, r3
  p->next = NULL;
 800a326:	2300      	movs	r3, #0
  p->payload = payload;
 800a328:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 800a32c:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 800a32e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800a330:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 800a332:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800a334:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 800a336:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 800a338:	81c3      	strh	r3, [r0, #14]
}
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800a33c:	2000      	movs	r0, #0
 800a33e:	e7fc      	b.n	800a33a <pbuf_alloced_custom+0x2e>

0800a340 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a340:	2200      	movs	r2, #0
 800a342:	f7ff bf8d 	b.w	800a260 <pbuf_add_header_impl>
	...

0800a348 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a348:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a34a:	b990      	cbnz	r0, 800a372 <pbuf_remove_header+0x2a>
 800a34c:	4b10      	ldr	r3, [pc, #64]	; (800a390 <pbuf_remove_header+0x48>)
 800a34e:	f240 224b 	movw	r2, #587	; 0x24b
 800a352:	4910      	ldr	r1, [pc, #64]	; (800a394 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a354:	4810      	ldr	r0, [pc, #64]	; (800a398 <pbuf_remove_header+0x50>)
 800a356:	f004 fe3d 	bl	800efd4 <iprintf>
    return 1;
 800a35a:	2001      	movs	r0, #1
 800a35c:	e008      	b.n	800a370 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a35e:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a360:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a362:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a364:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a366:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a368:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a36e:	2000      	movs	r0, #0
}
 800a370:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a372:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a376:	d2f0      	bcs.n	800a35a <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 800a378:	2900      	cmp	r1, #0
 800a37a:	d0f8      	beq.n	800a36e <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 800a37c:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a37e:	8943      	ldrh	r3, [r0, #10]
 800a380:	429a      	cmp	r2, r3
 800a382:	d9ec      	bls.n	800a35e <pbuf_remove_header+0x16>
 800a384:	4b02      	ldr	r3, [pc, #8]	; (800a390 <pbuf_remove_header+0x48>)
 800a386:	f240 2255 	movw	r2, #597	; 0x255
 800a38a:	4904      	ldr	r1, [pc, #16]	; (800a39c <pbuf_remove_header+0x54>)
 800a38c:	e7e2      	b.n	800a354 <pbuf_remove_header+0xc>
 800a38e:	bf00      	nop
 800a390:	0801c2c7 	.word	0x0801c2c7
 800a394:	0801c3c8 	.word	0x0801c3c8
 800a398:	0801a72c 	.word	0x0801a72c
 800a39c:	0801c338 	.word	0x0801c338

0800a3a0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800a3a0:	1e0b      	subs	r3, r1, #0
 800a3a2:	da02      	bge.n	800a3aa <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a3a4:	4259      	negs	r1, r3
 800a3a6:	f7ff bfcf 	b.w	800a348 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f7ff bf58 	b.w	800a260 <pbuf_add_header_impl>

0800a3b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	b950      	cbnz	r0, 800a3ce <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a3b8:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800a3ba:	4b2b      	ldr	r3, [pc, #172]	; (800a468 <pbuf_free+0xb8>)
 800a3bc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a3c0:	492a      	ldr	r1, [pc, #168]	; (800a46c <pbuf_free+0xbc>)
 800a3c2:	482b      	ldr	r0, [pc, #172]	; (800a470 <pbuf_free+0xc0>)
 800a3c4:	f004 fe06 	bl	800efd4 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800a3ce:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a3d0:	4f25      	ldr	r7, [pc, #148]	; (800a468 <pbuf_free+0xb8>)
 800a3d2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a47c <pbuf_free+0xcc>
 800a3d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a470 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800a3da:	f004 f8f3 	bl	800e5c4 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a3de:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800a3e0:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a3e2:	b933      	cbnz	r3, 800a3f2 <pbuf_free+0x42>
 800a3e4:	463b      	mov	r3, r7
 800a3e6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a3ea:	4651      	mov	r1, sl
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	f004 fdf1 	bl	800efd4 <iprintf>
    ref = --(p->ref);
 800a3f2:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a3f4:	4648      	mov	r0, r9
    ref = --(p->ref);
 800a3f6:	3e01      	subs	r6, #1
 800a3f8:	b2f6      	uxtb	r6, r6
 800a3fa:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a3fc:	f004 f8ee 	bl	800e5dc <sys_arch_unprotect>
    if (ref == 0) {
 800a400:	2e00      	cmp	r6, #0
 800a402:	d1e1      	bne.n	800a3c8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a404:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800a406:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a408:	079b      	lsls	r3, r3, #30
 800a40a:	d511      	bpl.n	800a430 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a40c:	6923      	ldr	r3, [r4, #16]
 800a40e:	b933      	cbnz	r3, 800a41e <pbuf_free+0x6e>
 800a410:	463b      	mov	r3, r7
 800a412:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a416:	4917      	ldr	r1, [pc, #92]	; (800a474 <pbuf_free+0xc4>)
 800a418:	4640      	mov	r0, r8
 800a41a:	f004 fddb 	bl	800efd4 <iprintf>
        pc->custom_free_function(p);
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	4620      	mov	r0, r4
 800a422:	4798      	blx	r3
      count++;
 800a424:	3501      	adds	r5, #1
 800a426:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800a428:	2e00      	cmp	r6, #0
 800a42a:	d0cd      	beq.n	800a3c8 <pbuf_free+0x18>
 800a42c:	4634      	mov	r4, r6
 800a42e:	e7d4      	b.n	800a3da <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 800a430:	7b23      	ldrb	r3, [r4, #12]
 800a432:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a436:	2b02      	cmp	r3, #2
 800a438:	d104      	bne.n	800a444 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800a43a:	4621      	mov	r1, r4
 800a43c:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800a43e:	f7ff fd9d 	bl	8009f7c <memp_free>
 800a442:	e7ef      	b.n	800a424 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a444:	2b01      	cmp	r3, #1
 800a446:	d102      	bne.n	800a44e <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 800a448:	4621      	mov	r1, r4
 800a44a:	200b      	movs	r0, #11
 800a44c:	e7f7      	b.n	800a43e <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a44e:	b91b      	cbnz	r3, 800a458 <pbuf_free+0xa8>
          mem_free(p);
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff faf1 	bl	8009a38 <mem_free>
 800a456:	e7e5      	b.n	800a424 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a458:	463b      	mov	r3, r7
 800a45a:	f240 320f 	movw	r2, #783	; 0x30f
 800a45e:	4906      	ldr	r1, [pc, #24]	; (800a478 <pbuf_free+0xc8>)
 800a460:	4640      	mov	r0, r8
 800a462:	f004 fdb7 	bl	800efd4 <iprintf>
 800a466:	e7dd      	b.n	800a424 <pbuf_free+0x74>
 800a468:	0801c2c7 	.word	0x0801c2c7
 800a46c:	0801c3c8 	.word	0x0801c3c8
 800a470:	0801a72c 	.word	0x0801a72c
 800a474:	0801c36c 	.word	0x0801c36c
 800a478:	0801c38d 	.word	0x0801c38d
 800a47c:	0801c356 	.word	0x0801c356

0800a480 <pbuf_alloc>:
  switch (type) {
 800a480:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800a484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a488:	4606      	mov	r6, r0
 800a48a:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 800a48c:	b284      	uxth	r4, r0
  switch (type) {
 800a48e:	d014      	beq.n	800a4ba <pbuf_alloc+0x3a>
 800a490:	d808      	bhi.n	800a4a4 <pbuf_alloc+0x24>
 800a492:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a496:	2b01      	cmp	r3, #1
 800a498:	d107      	bne.n	800a4aa <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 800a49a:	2000      	movs	r0, #0
}
 800a49c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a4a0:	f7ff bf10 	b.w	800a2c4 <pbuf_alloc_reference>
  switch (type) {
 800a4a4:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800a4a8:	d03b      	beq.n	800a522 <pbuf_alloc+0xa2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a4aa:	4b2e      	ldr	r3, [pc, #184]	; (800a564 <pbuf_alloc+0xe4>)
 800a4ac:	f240 1227 	movw	r2, #295	; 0x127
 800a4b0:	492d      	ldr	r1, [pc, #180]	; (800a568 <pbuf_alloc+0xe8>)
 800a4b2:	482e      	ldr	r0, [pc, #184]	; (800a56c <pbuf_alloc+0xec>)
 800a4b4:	f004 fd8e 	bl	800efd4 <iprintf>
 800a4b8:	e00c      	b.n	800a4d4 <pbuf_alloc+0x54>
  switch (type) {
 800a4ba:	2600      	movs	r6, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a4bc:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 800a4c0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a574 <pbuf_alloc+0xf4>
  switch (type) {
 800a4c4:	4635      	mov	r5, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a4c6:	200c      	movs	r0, #12
 800a4c8:	46b2      	mov	sl, r6
 800a4ca:	f7ff fd3b 	bl	8009f44 <memp_malloc>
        if (q == NULL) {
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	b930      	cbnz	r0, 800a4e0 <pbuf_alloc+0x60>
          if (p) {
 800a4d2:	b90d      	cbnz	r5, 800a4d8 <pbuf_alloc+0x58>
      return NULL;
 800a4d4:	2500      	movs	r5, #0
 800a4d6:	e01f      	b.n	800a518 <pbuf_alloc+0x98>
            pbuf_free(p);
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f7ff ff69 	bl	800a3b0 <pbuf_free>
 800a4de:	e7f9      	b.n	800a4d4 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a4e0:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a4e2:	4404      	add	r4, r0
  p->next = NULL;
 800a4e4:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800a4e6:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a4e8:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a4ec:	3413      	adds	r4, #19
  p->next = NULL;
 800a4ee:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a4f0:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a4f4:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 800a4f8:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a4fc:	b29b      	uxth	r3, r3
  p->payload = payload;
 800a4fe:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a500:	42bb      	cmp	r3, r7
 800a502:	bf28      	it	cs
 800a504:	463b      	movcs	r3, r7
  p->len = len;
 800a506:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a508:	b14d      	cbz	r5, 800a51e <pbuf_alloc+0x9e>
          last->next = q;
 800a50a:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800a50e:	1afb      	subs	r3, r7, r3
        offset = 0;
 800a510:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a512:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 800a514:	2f00      	cmp	r7, #0
 800a516:	d1d6      	bne.n	800a4c6 <pbuf_alloc+0x46>
}
 800a518:	4628      	mov	r0, r5
 800a51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51e:	4605      	mov	r5, r0
 800a520:	e7f5      	b.n	800a50e <pbuf_alloc+0x8e>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a522:	3403      	adds	r4, #3
 800a524:	1ccb      	adds	r3, r1, #3
 800a526:	f024 0403 	bic.w	r4, r4, #3
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	441c      	add	r4, r3
 800a530:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a532:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a536:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a538:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a53a:	d3cb      	bcc.n	800a4d4 <pbuf_alloc+0x54>
 800a53c:	4283      	cmp	r3, r0
 800a53e:	d8c9      	bhi.n	800a4d4 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a540:	f7ff fbfe 	bl	8009d40 <mem_malloc>
      if (p == NULL) {
 800a544:	4605      	mov	r5, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	d0e6      	beq.n	800a518 <pbuf_alloc+0x98>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a54a:	4406      	add	r6, r0
  p->next = NULL;
 800a54c:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800a54e:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a550:	3613      	adds	r6, #19
  p->next = NULL;
 800a552:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800a554:	4b06      	ldr	r3, [pc, #24]	; (800a570 <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a556:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 800a55a:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 800a55c:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800a55e:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a560:	e7da      	b.n	800a518 <pbuf_alloc+0x98>
 800a562:	bf00      	nop
 800a564:	0801c2c7 	.word	0x0801c2c7
 800a568:	0801c39f 	.word	0x0801c39f
 800a56c:	0801a72c 	.word	0x0801a72c
 800a570:	00010080 	.word	0x00010080
 800a574:	00010082 	.word	0x00010082

0800a578 <pbuf_realloc>:
{
 800a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a57e:	4604      	mov	r4, r0
 800a580:	b930      	cbnz	r0, 800a590 <pbuf_realloc+0x18>
 800a582:	4b24      	ldr	r3, [pc, #144]	; (800a614 <pbuf_realloc+0x9c>)
 800a584:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a588:	4923      	ldr	r1, [pc, #140]	; (800a618 <pbuf_realloc+0xa0>)
 800a58a:	4824      	ldr	r0, [pc, #144]	; (800a61c <pbuf_realloc+0xa4>)
 800a58c:	f004 fd22 	bl	800efd4 <iprintf>
  if (new_len >= p->tot_len) {
 800a590:	8927      	ldrh	r7, [r4, #8]
 800a592:	42b7      	cmp	r7, r6
 800a594:	d93c      	bls.n	800a610 <pbuf_realloc+0x98>
 800a596:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a598:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a614 <pbuf_realloc+0x9c>
 800a59c:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a624 <pbuf_realloc+0xac>
 800a5a0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800a61c <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800a5a4:	8962      	ldrh	r2, [r4, #10]
 800a5a6:	42aa      	cmp	r2, r5
 800a5a8:	d319      	bcc.n	800a5de <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a5aa:	7b23      	ldrb	r3, [r4, #12]
 800a5ac:	0719      	lsls	r1, r3, #28
 800a5ae:	d127      	bne.n	800a600 <pbuf_realloc+0x88>
 800a5b0:	42aa      	cmp	r2, r5
 800a5b2:	d025      	beq.n	800a600 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a5b4:	7b63      	ldrb	r3, [r4, #13]
 800a5b6:	079b      	lsls	r3, r3, #30
 800a5b8:	d422      	bmi.n	800a600 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a5ba:	6861      	ldr	r1, [r4, #4]
 800a5bc:	4620      	mov	r0, r4
 800a5be:	1b09      	subs	r1, r1, r4
 800a5c0:	4429      	add	r1, r5
 800a5c2:	b289      	uxth	r1, r1
 800a5c4:	f7ff fb0e 	bl	8009be4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	b9c8      	cbnz	r0, 800a600 <pbuf_realloc+0x88>
 800a5cc:	4b11      	ldr	r3, [pc, #68]	; (800a614 <pbuf_realloc+0x9c>)
 800a5ce:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a5d2:	4913      	ldr	r1, [pc, #76]	; (800a620 <pbuf_realloc+0xa8>)
 800a5d4:	4811      	ldr	r0, [pc, #68]	; (800a61c <pbuf_realloc+0xa4>)
 800a5d6:	f004 fcfd 	bl	800efd4 <iprintf>
  q->len = rem_len;
 800a5da:	8164      	strh	r4, [r4, #10]
 800a5dc:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800a5de:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a5e0:	1bf3      	subs	r3, r6, r7
 800a5e2:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a5e4:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a5e6:	4413      	add	r3, r2
 800a5e8:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800a5ea:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a5ec:	2c00      	cmp	r4, #0
 800a5ee:	d1d9      	bne.n	800a5a4 <pbuf_realloc+0x2c>
 800a5f0:	4643      	mov	r3, r8
 800a5f2:	f240 12af 	movw	r2, #431	; 0x1af
 800a5f6:	4651      	mov	r1, sl
 800a5f8:	4648      	mov	r0, r9
 800a5fa:	f004 fceb 	bl	800efd4 <iprintf>
 800a5fe:	e7d1      	b.n	800a5a4 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800a600:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800a602:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800a604:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800a606:	b108      	cbz	r0, 800a60c <pbuf_realloc+0x94>
    pbuf_free(q->next);
 800a608:	f7ff fed2 	bl	800a3b0 <pbuf_free>
  q->next = NULL;
 800a60c:	2300      	movs	r3, #0
 800a60e:	6023      	str	r3, [r4, #0]
}
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	0801c2c7 	.word	0x0801c2c7
 800a618:	0801c3ba 	.word	0x0801c3ba
 800a61c:	0801a72c 	.word	0x0801a72c
 800a620:	0801c3ea 	.word	0x0801c3ea
 800a624:	0801c3d2 	.word	0x0801c3d2

0800a628 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a628:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800a62a:	2200      	movs	r2, #0
 800a62c:	b290      	uxth	r0, r2
 800a62e:	3201      	adds	r2, #1
 800a630:	b903      	cbnz	r3, 800a634 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800a632:	4770      	bx	lr
    p = p->next;
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	e7f9      	b.n	800a62c <pbuf_clen+0x4>

0800a638 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a638:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800a63a:	4604      	mov	r4, r0
 800a63c:	b188      	cbz	r0, 800a662 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a63e:	f003 ffc1 	bl	800e5c4 <sys_arch_protect>
 800a642:	7ba3      	ldrb	r3, [r4, #14]
 800a644:	3301      	adds	r3, #1
 800a646:	73a3      	strb	r3, [r4, #14]
 800a648:	f003 ffc8 	bl	800e5dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a64c:	7ba3      	ldrb	r3, [r4, #14]
 800a64e:	b943      	cbnz	r3, 800a662 <pbuf_ref+0x2a>
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <pbuf_ref+0x2c>)
 800a652:	f240 3242 	movw	r2, #834	; 0x342
 800a656:	4904      	ldr	r1, [pc, #16]	; (800a668 <pbuf_ref+0x30>)
 800a658:	4804      	ldr	r0, [pc, #16]	; (800a66c <pbuf_ref+0x34>)
  }
}
 800a65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a65e:	f004 bcb9 	b.w	800efd4 <iprintf>
}
 800a662:	bd10      	pop	{r4, pc}
 800a664:	0801c2c7 	.word	0x0801c2c7
 800a668:	0801c406 	.word	0x0801c406
 800a66c:	0801a72c 	.word	0x0801a72c

0800a670 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a674:	4604      	mov	r4, r0
 800a676:	b100      	cbz	r0, 800a67a <pbuf_cat+0xa>
 800a678:	b961      	cbnz	r1, 800a694 <pbuf_cat+0x24>
 800a67a:	4b15      	ldr	r3, [pc, #84]	; (800a6d0 <pbuf_cat+0x60>)
 800a67c:	f240 3259 	movw	r2, #857	; 0x359
 800a680:	4914      	ldr	r1, [pc, #80]	; (800a6d4 <pbuf_cat+0x64>)
 800a682:	4815      	ldr	r0, [pc, #84]	; (800a6d8 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a688:	f004 bca4 	b.w	800efd4 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a68c:	8929      	ldrh	r1, [r5, #8]
 800a68e:	440b      	add	r3, r1
 800a690:	8123      	strh	r3, [r4, #8]
 800a692:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800a694:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a696:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a698:	2a00      	cmp	r2, #0
 800a69a:	d1f7      	bne.n	800a68c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a69c:	8962      	ldrh	r2, [r4, #10]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d00f      	beq.n	800a6c2 <pbuf_cat+0x52>
 800a6a2:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <pbuf_cat+0x60>)
 800a6a4:	f240 3262 	movw	r2, #866	; 0x362
 800a6a8:	490c      	ldr	r1, [pc, #48]	; (800a6dc <pbuf_cat+0x6c>)
 800a6aa:	480b      	ldr	r0, [pc, #44]	; (800a6d8 <pbuf_cat+0x68>)
 800a6ac:	f004 fc92 	bl	800efd4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	b133      	cbz	r3, 800a6c2 <pbuf_cat+0x52>
 800a6b4:	4b06      	ldr	r3, [pc, #24]	; (800a6d0 <pbuf_cat+0x60>)
 800a6b6:	f240 3263 	movw	r2, #867	; 0x363
 800a6ba:	4909      	ldr	r1, [pc, #36]	; (800a6e0 <pbuf_cat+0x70>)
 800a6bc:	4806      	ldr	r0, [pc, #24]	; (800a6d8 <pbuf_cat+0x68>)
 800a6be:	f004 fc89 	bl	800efd4 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a6c2:	892a      	ldrh	r2, [r5, #8]
 800a6c4:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800a6c6:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a6c8:	4413      	add	r3, r2
 800a6ca:	8123      	strh	r3, [r4, #8]
}
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	bf00      	nop
 800a6d0:	0801c2c7 	.word	0x0801c2c7
 800a6d4:	0801c418 	.word	0x0801c418
 800a6d8:	0801a72c 	.word	0x0801a72c
 800a6dc:	0801c44d 	.word	0x0801c44d
 800a6e0:	0801c47a 	.word	0x0801c47a

0800a6e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800a6e8:	f7ff ffc2 	bl	800a670 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a6ec:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800a6f2:	f7ff bfa1 	b.w	800a638 <pbuf_ref>
	...

0800a6f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a6fe:	4605      	mov	r5, r0
 800a700:	b120      	cbz	r0, 800a70c <pbuf_copy+0x14>
 800a702:	b119      	cbz	r1, 800a70c <pbuf_copy+0x14>
 800a704:	8902      	ldrh	r2, [r0, #8]
 800a706:	890b      	ldrh	r3, [r1, #8]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d20a      	bcs.n	800a722 <pbuf_copy+0x2a>
 800a70c:	4b34      	ldr	r3, [pc, #208]	; (800a7e0 <pbuf_copy+0xe8>)
 800a70e:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a712:	4934      	ldr	r1, [pc, #208]	; (800a7e4 <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a714:	4834      	ldr	r0, [pc, #208]	; (800a7e8 <pbuf_copy+0xf0>)
 800a716:	f004 fc5d 	bl	800efd4 <iprintf>
 800a71a:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800a71e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800a722:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a724:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800a7e0 <pbuf_copy+0xe8>
 800a728:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800a7f8 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 800a72c:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a72e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800a7e8 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a732:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800a736:	8962      	ldrh	r2, [r4, #10]
 800a738:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a73c:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a73e:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a740:	6861      	ldr	r1, [r4, #4]
 800a742:	4438      	add	r0, r7
 800a744:	4590      	cmp	r8, r2
 800a746:	4431      	add	r1, r6
 800a748:	bf28      	it	cs
 800a74a:	4690      	movcs	r8, r2
 800a74c:	4642      	mov	r2, r8
    offset_to += len;
 800a74e:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a750:	f003 ffa6 	bl	800e6a0 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a754:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800a756:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a758:	429f      	cmp	r7, r3
 800a75a:	d906      	bls.n	800a76a <pbuf_copy+0x72>
 800a75c:	465b      	mov	r3, fp
 800a75e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a762:	4651      	mov	r1, sl
 800a764:	4648      	mov	r0, r9
 800a766:	f004 fc35 	bl	800efd4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a76a:	8963      	ldrh	r3, [r4, #10]
 800a76c:	429e      	cmp	r6, r3
 800a76e:	d906      	bls.n	800a77e <pbuf_copy+0x86>
 800a770:	465b      	mov	r3, fp
 800a772:	f240 32da 	movw	r2, #986	; 0x3da
 800a776:	491d      	ldr	r1, [pc, #116]	; (800a7ec <pbuf_copy+0xf4>)
 800a778:	4648      	mov	r0, r9
 800a77a:	f004 fc2b 	bl	800efd4 <iprintf>
    if (offset_from >= p_from->len) {
 800a77e:	8963      	ldrh	r3, [r4, #10]
 800a780:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800a782:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800a784:	bf24      	itt	cs
 800a786:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800a788:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800a78a:	429f      	cmp	r7, r3
 800a78c:	d108      	bne.n	800a7a0 <pbuf_copy+0xa8>
      p_to = p_to->next;
 800a78e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a790:	b92d      	cbnz	r5, 800a79e <pbuf_copy+0xa6>
 800a792:	b314      	cbz	r4, 800a7da <pbuf_copy+0xe2>
 800a794:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <pbuf_copy+0xe8>)
 800a796:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a79a:	4915      	ldr	r1, [pc, #84]	; (800a7f0 <pbuf_copy+0xf8>)
 800a79c:	e7ba      	b.n	800a714 <pbuf_copy+0x1c>
      offset_to = 0;
 800a79e:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a7a0:	b17c      	cbz	r4, 800a7c2 <pbuf_copy+0xca>
 800a7a2:	8962      	ldrh	r2, [r4, #10]
 800a7a4:	8923      	ldrh	r3, [r4, #8]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d10b      	bne.n	800a7c2 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	b14b      	cbz	r3, 800a7c2 <pbuf_copy+0xca>
 800a7ae:	4b0c      	ldr	r3, [pc, #48]	; (800a7e0 <pbuf_copy+0xe8>)
 800a7b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a7b4:	490f      	ldr	r1, [pc, #60]	; (800a7f4 <pbuf_copy+0xfc>)
 800a7b6:	480c      	ldr	r0, [pc, #48]	; (800a7e8 <pbuf_copy+0xf0>)
 800a7b8:	f004 fc0c 	bl	800efd4 <iprintf>
 800a7bc:	f06f 0005 	mvn.w	r0, #5
 800a7c0:	e7ad      	b.n	800a71e <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a7c2:	896a      	ldrh	r2, [r5, #10]
 800a7c4:	892b      	ldrh	r3, [r5, #8]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d105      	bne.n	800a7d6 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	b11b      	cbz	r3, 800a7d6 <pbuf_copy+0xde>
 800a7ce:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <pbuf_copy+0xe8>)
 800a7d0:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a7d4:	e7ee      	b.n	800a7b4 <pbuf_copy+0xbc>
  } while (p_from);
 800a7d6:	2c00      	cmp	r4, #0
 800a7d8:	d1ab      	bne.n	800a732 <pbuf_copy+0x3a>
  return ERR_OK;
 800a7da:	4620      	mov	r0, r4
 800a7dc:	e79f      	b.n	800a71e <pbuf_copy+0x26>
 800a7de:	bf00      	nop
 800a7e0:	0801c2c7 	.word	0x0801c2c7
 800a7e4:	0801c4c1 	.word	0x0801c4c1
 800a7e8:	0801a72c 	.word	0x0801a72c
 800a7ec:	0801c508 	.word	0x0801c508
 800a7f0:	0801c523 	.word	0x0801c523
 800a7f4:	0801c530 	.word	0x0801c530
 800a7f8:	0801c4f1 	.word	0x0801c4f1

0800a7fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	460f      	mov	r7, r1
 800a802:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a804:	4605      	mov	r5, r0
 800a806:	b950      	cbnz	r0, 800a81e <pbuf_copy_partial+0x22>
 800a808:	462e      	mov	r6, r5
 800a80a:	4b1b      	ldr	r3, [pc, #108]	; (800a878 <pbuf_copy_partial+0x7c>)
 800a80c:	f240 420a 	movw	r2, #1034	; 0x40a
 800a810:	491a      	ldr	r1, [pc, #104]	; (800a87c <pbuf_copy_partial+0x80>)
 800a812:	481b      	ldr	r0, [pc, #108]	; (800a880 <pbuf_copy_partial+0x84>)
 800a814:	f004 fbde 	bl	800efd4 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 800a818:	4630      	mov	r0, r6
 800a81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a81e:	bb41      	cbnz	r1, 800a872 <pbuf_copy_partial+0x76>
 800a820:	4b15      	ldr	r3, [pc, #84]	; (800a878 <pbuf_copy_partial+0x7c>)
 800a822:	f240 420b 	movw	r2, #1035	; 0x40b
 800a826:	4917      	ldr	r1, [pc, #92]	; (800a884 <pbuf_copy_partial+0x88>)
 800a828:	463e      	mov	r6, r7
 800a82a:	4815      	ldr	r0, [pc, #84]	; (800a880 <pbuf_copy_partial+0x84>)
 800a82c:	f004 fbd2 	bl	800efd4 <iprintf>
 800a830:	e7f2      	b.n	800a818 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800a832:	896c      	ldrh	r4, [r5, #10]
 800a834:	b153      	cbz	r3, 800a84c <pbuf_copy_partial+0x50>
 800a836:	42a3      	cmp	r3, r4
 800a838:	d308      	bcc.n	800a84c <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 800a83a:	1b1b      	subs	r3, r3, r4
 800a83c:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a83e:	682d      	ldr	r5, [r5, #0]
 800a840:	f1b8 0f00 	cmp.w	r8, #0
 800a844:	d0e8      	beq.n	800a818 <pbuf_copy_partial+0x1c>
 800a846:	2d00      	cmp	r5, #0
 800a848:	d1f3      	bne.n	800a832 <pbuf_copy_partial+0x36>
 800a84a:	e7e5      	b.n	800a818 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 800a84c:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a84e:	6869      	ldr	r1, [r5, #4]
 800a850:	19b8      	adds	r0, r7, r6
      buf_copy_len = (u16_t)(p->len - offset);
 800a852:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a854:	4419      	add	r1, r3
 800a856:	4544      	cmp	r4, r8
 800a858:	bf28      	it	cs
 800a85a:	4644      	movcs	r4, r8
 800a85c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a85e:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 800a860:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a864:	f003 ff1c 	bl	800e6a0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a868:	b2b6      	uxth	r6, r6
      offset = 0;
 800a86a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 800a86c:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800a870:	e7e5      	b.n	800a83e <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800a872:	2600      	movs	r6, #0
 800a874:	e7e4      	b.n	800a840 <pbuf_copy_partial+0x44>
 800a876:	bf00      	nop
 800a878:	0801c2c7 	.word	0x0801c2c7
 800a87c:	0801c55a 	.word	0x0801c55a
 800a880:	0801a72c 	.word	0x0801a72c
 800a884:	0801c579 	.word	0x0801c579

0800a888 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a88c:	460a      	mov	r2, r1
 800a88e:	8929      	ldrh	r1, [r5, #8]
 800a890:	f7ff fdf6 	bl	800a480 <pbuf_alloc>
  if (q == NULL) {
 800a894:	4604      	mov	r4, r0
 800a896:	b150      	cbz	r0, 800a8ae <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800a898:	4629      	mov	r1, r5
 800a89a:	f7ff ff2d 	bl	800a6f8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a89e:	b130      	cbz	r0, 800a8ae <pbuf_clone+0x26>
 800a8a0:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <pbuf_clone+0x2c>)
 800a8a2:	f240 5224 	movw	r2, #1316	; 0x524
 800a8a6:	4904      	ldr	r1, [pc, #16]	; (800a8b8 <pbuf_clone+0x30>)
 800a8a8:	4804      	ldr	r0, [pc, #16]	; (800a8bc <pbuf_clone+0x34>)
 800a8aa:	f004 fb93 	bl	800efd4 <iprintf>
  return q;
}
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	bd38      	pop	{r3, r4, r5, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0801c2c7 	.word	0x0801c2c7
 800a8b8:	0801c679 	.word	0x0801c679
 800a8bc:	0801a72c 	.word	0x0801a72c

0800a8c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8c2:	4c12      	ldr	r4, [pc, #72]	; (800a90c <tcp_new_port+0x4c>)
 800a8c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a8c8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800a8cc:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	4d0f      	ldr	r5, [pc, #60]	; (800a910 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a8d2:	2204      	movs	r2, #4
  tcp_port++;
 800a8d4:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a8d6:	42b3      	cmp	r3, r6
 800a8d8:	bf08      	it	eq
 800a8da:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a8de:	f855 1b04 	ldr.w	r1, [r5], #4
 800a8e2:	6809      	ldr	r1, [r1, #0]
 800a8e4:	b931      	cbnz	r1, 800a8f4 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a8e6:	3a01      	subs	r2, #1
 800a8e8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800a8ec:	d1f7      	bne.n	800a8de <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	8023      	strh	r3, [r4, #0]
 800a8f2:	e007      	b.n	800a904 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800a8f4:	8acf      	ldrh	r7, [r1, #22]
 800a8f6:	429f      	cmp	r7, r3
 800a8f8:	d105      	bne.n	800a906 <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a8fa:	3801      	subs	r0, #1
 800a8fc:	b280      	uxth	r0, r0
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d1e5      	bne.n	800a8ce <tcp_new_port+0xe>
 800a902:	8023      	strh	r3, [r4, #0]
}
 800a904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a906:	68c9      	ldr	r1, [r1, #12]
 800a908:	e7ec      	b.n	800a8e4 <tcp_new_port+0x24>
 800a90a:	bf00      	nop
 800a90c:	20000020 	.word	0x20000020
 800a910:	0801198c 	.word	0x0801198c

0800a914 <tcp_close_shutdown_fin>:
{
 800a914:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a916:	4604      	mov	r4, r0
 800a918:	b930      	cbnz	r0, 800a928 <tcp_close_shutdown_fin+0x14>
 800a91a:	4b13      	ldr	r3, [pc, #76]	; (800a968 <tcp_close_shutdown_fin+0x54>)
 800a91c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a920:	4912      	ldr	r1, [pc, #72]	; (800a96c <tcp_close_shutdown_fin+0x58>)
 800a922:	4813      	ldr	r0, [pc, #76]	; (800a970 <tcp_close_shutdown_fin+0x5c>)
 800a924:	f004 fb56 	bl	800efd4 <iprintf>
  switch (pcb->state) {
 800a928:	7d23      	ldrb	r3, [r4, #20]
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d003      	beq.n	800a936 <tcp_close_shutdown_fin+0x22>
 800a92e:	2b07      	cmp	r3, #7
 800a930:	d00c      	beq.n	800a94c <tcp_close_shutdown_fin+0x38>
 800a932:	2b03      	cmp	r3, #3
 800a934:	d108      	bne.n	800a948 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800a936:	4620      	mov	r0, r4
 800a938:	f002 fd82 	bl	800d440 <tcp_send_fin>
      if (err == ERR_OK) {
 800a93c:	b960      	cbnz	r0, 800a958 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 800a93e:	2305      	movs	r3, #5
    tcp_output(pcb);
 800a940:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800a942:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800a944:	f002 fedc 	bl	800d700 <tcp_output>
  switch (pcb->state) {
 800a948:	2000      	movs	r0, #0
}
 800a94a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a94c:	4620      	mov	r0, r4
 800a94e:	f002 fd77 	bl	800d440 <tcp_send_fin>
      if (err == ERR_OK) {
 800a952:	b908      	cbnz	r0, 800a958 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 800a954:	2309      	movs	r3, #9
 800a956:	e7f3      	b.n	800a940 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d1f6      	bne.n	800a94a <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a95c:	8b63      	ldrh	r3, [r4, #26]
 800a95e:	f043 0308 	orr.w	r3, r3, #8
 800a962:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800a964:	e7f0      	b.n	800a948 <tcp_close_shutdown_fin+0x34>
 800a966:	bf00      	nop
 800a968:	0801c68a 	.word	0x0801c68a
 800a96c:	0801c6e8 	.word	0x0801c6e8
 800a970:	0801a72c 	.word	0x0801a72c

0800a974 <tcp_init>:
{
 800a974:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a976:	f004 fb45 	bl	800f004 <rand>
 800a97a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800a97e:	4b02      	ldr	r3, [pc, #8]	; (800a988 <tcp_init+0x14>)
 800a980:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800a984:	8018      	strh	r0, [r3, #0]
}
 800a986:	bd08      	pop	{r3, pc}
 800a988:	20000020 	.word	0x20000020

0800a98c <tcp_free>:
{
 800a98c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a98e:	7d03      	ldrb	r3, [r0, #20]
{
 800a990:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a992:	2b01      	cmp	r3, #1
 800a994:	d105      	bne.n	800a9a2 <tcp_free+0x16>
 800a996:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <tcp_free+0x24>)
 800a998:	22d4      	movs	r2, #212	; 0xd4
 800a99a:	4906      	ldr	r1, [pc, #24]	; (800a9b4 <tcp_free+0x28>)
 800a99c:	4806      	ldr	r0, [pc, #24]	; (800a9b8 <tcp_free+0x2c>)
 800a99e:	f004 fb19 	bl	800efd4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	2001      	movs	r0, #1
}
 800a9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a9aa:	f7ff bae7 	b.w	8009f7c <memp_free>
 800a9ae:	bf00      	nop
 800a9b0:	0801c68a 	.word	0x0801c68a
 800a9b4:	0801c6f4 	.word	0x0801c6f4
 800a9b8:	0801a72c 	.word	0x0801a72c

0800a9bc <tcp_bind>:
{
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800a9be:	4d23      	ldr	r5, [pc, #140]	; (800aa4c <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a9c0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800a9c2:	2900      	cmp	r1, #0
 800a9c4:	bf18      	it	ne
 800a9c6:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a9c8:	b948      	cbnz	r0, 800a9de <tcp_bind+0x22>
 800a9ca:	4b21      	ldr	r3, [pc, #132]	; (800aa50 <tcp_bind+0x94>)
 800a9cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a9d0:	4920      	ldr	r1, [pc, #128]	; (800aa54 <tcp_bind+0x98>)
 800a9d2:	4821      	ldr	r0, [pc, #132]	; (800aa58 <tcp_bind+0x9c>)
 800a9d4:	f004 fafe 	bl	800efd4 <iprintf>
 800a9d8:	f06f 000f 	mvn.w	r0, #15
}
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a9de:	7d03      	ldrb	r3, [r0, #20]
 800a9e0:	b14b      	cbz	r3, 800a9f6 <tcp_bind+0x3a>
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <tcp_bind+0x94>)
 800a9e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a9e8:	491c      	ldr	r1, [pc, #112]	; (800aa5c <tcp_bind+0xa0>)
 800a9ea:	481b      	ldr	r0, [pc, #108]	; (800aa58 <tcp_bind+0x9c>)
 800a9ec:	f004 faf2 	bl	800efd4 <iprintf>
 800a9f0:	f06f 0005 	mvn.w	r0, #5
 800a9f4:	e7f2      	b.n	800a9dc <tcp_bind+0x20>
  if (port == 0) {
 800a9f6:	b932      	cbnz	r2, 800aa06 <tcp_bind+0x4a>
    port = tcp_new_port();
 800a9f8:	f7ff ff62 	bl	800a8c0 <tcp_new_port>
    if (port == 0) {
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	b950      	cbnz	r0, 800aa16 <tcp_bind+0x5a>
      return ERR_BUF;
 800aa00:	f06f 0001 	mvn.w	r0, #1
 800aa04:	e7ea      	b.n	800a9dc <tcp_bind+0x20>
 800aa06:	4816      	ldr	r0, [pc, #88]	; (800aa60 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800aa08:	f850 1b04 	ldr.w	r1, [r0], #4
 800aa0c:	6809      	ldr	r1, [r1, #0]
 800aa0e:	b971      	cbnz	r1, 800aa2e <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800aa10:	3301      	adds	r3, #1
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d1f8      	bne.n	800aa08 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800aa16:	682b      	ldr	r3, [r5, #0]
 800aa18:	b103      	cbz	r3, 800aa1c <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800aa1a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800aa1c:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800aa1e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	601c      	str	r4, [r3, #0]
 800aa24:	60e2      	str	r2, [r4, #12]
 800aa26:	f003 f941 	bl	800dcac <tcp_timer_needed>
  return ERR_OK;
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	e7d6      	b.n	800a9dc <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800aa2e:	8ace      	ldrh	r6, [r1, #22]
 800aa30:	4296      	cmp	r6, r2
 800aa32:	d105      	bne.n	800aa40 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800aa34:	680f      	ldr	r7, [r1, #0]
 800aa36:	b12f      	cbz	r7, 800aa44 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 800aa38:	682e      	ldr	r6, [r5, #0]
 800aa3a:	b11e      	cbz	r6, 800aa44 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800aa3c:	42b7      	cmp	r7, r6
 800aa3e:	d001      	beq.n	800aa44 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800aa40:	68c9      	ldr	r1, [r1, #12]
 800aa42:	e7e4      	b.n	800aa0e <tcp_bind+0x52>
              return ERR_USE;
 800aa44:	f06f 0007 	mvn.w	r0, #7
 800aa48:	e7c8      	b.n	800a9dc <tcp_bind+0x20>
 800aa4a:	bf00      	nop
 800aa4c:	080118b8 	.word	0x080118b8
 800aa50:	0801c68a 	.word	0x0801c68a
 800aa54:	0801c705 	.word	0x0801c705
 800aa58:	0801a72c 	.word	0x0801a72c
 800aa5c:	0801c71b 	.word	0x0801c71b
 800aa60:	0801198c 	.word	0x0801198c
 800aa64:	2000d058 	.word	0x2000d058

0800aa68 <tcp_listen_with_backlog_and_err>:
{
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	b968      	cbnz	r0, 800aa8c <tcp_listen_with_backlog_and_err+0x24>
 800aa70:	4b29      	ldr	r3, [pc, #164]	; (800ab18 <tcp_listen_with_backlog_and_err+0xb0>)
 800aa72:	f240 3259 	movw	r2, #857	; 0x359
 800aa76:	4929      	ldr	r1, [pc, #164]	; (800ab1c <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 800aa78:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800aa7a:	4829      	ldr	r0, [pc, #164]	; (800ab20 <tcp_listen_with_backlog_and_err+0xb8>)
 800aa7c:	f004 faaa 	bl	800efd4 <iprintf>
 800aa80:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800aa84:	b106      	cbz	r6, 800aa88 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800aa86:	7033      	strb	r3, [r6, #0]
}
 800aa88:	4620      	mov	r0, r4
 800aa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800aa8c:	7d07      	ldrb	r7, [r0, #20]
 800aa8e:	b157      	cbz	r7, 800aaa6 <tcp_listen_with_backlog_and_err+0x3e>
 800aa90:	4b21      	ldr	r3, [pc, #132]	; (800ab18 <tcp_listen_with_backlog_and_err+0xb0>)
 800aa92:	f240 325a 	movw	r2, #858	; 0x35a
 800aa96:	4923      	ldr	r1, [pc, #140]	; (800ab24 <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800aa98:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800aa9a:	4821      	ldr	r0, [pc, #132]	; (800ab20 <tcp_listen_with_backlog_and_err+0xb8>)
 800aa9c:	f004 fa9a 	bl	800efd4 <iprintf>
 800aaa0:	f06f 030e 	mvn.w	r3, #14
 800aaa4:	e7ee      	b.n	800aa84 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800aaa6:	2002      	movs	r0, #2
 800aaa8:	f7ff fa4c 	bl	8009f44 <memp_malloc>
  if (lpcb == NULL) {
 800aaac:	4604      	mov	r4, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d02e      	beq.n	800ab10 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800aab2:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800aab4:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800aab6:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800aab8:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800aaba:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800aabc:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800aabe:	7d6a      	ldrb	r2, [r5, #21]
 800aac0:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800aac2:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800aac4:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800aac6:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800aac8:	7aea      	ldrb	r2, [r5, #11]
 800aaca:	4f17      	ldr	r7, [pc, #92]	; (800ab28 <tcp_listen_with_backlog_and_err+0xc0>)
 800aacc:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800aace:	7aaa      	ldrb	r2, [r5, #10]
 800aad0:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800aad2:	682a      	ldr	r2, [r5, #0]
 800aad4:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800aad6:	b133      	cbz	r3, 800aae6 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	42ab      	cmp	r3, r5
 800aadc:	d110      	bne.n	800ab00 <tcp_listen_with_backlog_and_err+0x98>
 800aade:	68eb      	ldr	r3, [r5, #12]
 800aae0:	603b      	str	r3, [r7, #0]
 800aae2:	2300      	movs	r3, #0
 800aae4:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800aae6:	4628      	mov	r0, r5
 800aae8:	f7ff ff50 	bl	800a98c <tcp_free>
  lpcb->accept = tcp_accept_null;
 800aaec:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <tcp_listen_with_backlog_and_err+0xc4>)
 800aaee:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	607c      	str	r4, [r7, #4]
 800aaf4:	60e3      	str	r3, [r4, #12]
 800aaf6:	f003 f8d9 	bl	800dcac <tcp_timer_needed>
  res = ERR_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e7c2      	b.n	800aa84 <tcp_listen_with_backlog_and_err+0x1c>
 800aafe:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0ee      	beq.n	800aae2 <tcp_listen_with_backlog_and_err+0x7a>
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	42aa      	cmp	r2, r5
 800ab08:	d1f9      	bne.n	800aafe <tcp_listen_with_backlog_and_err+0x96>
 800ab0a:	68ea      	ldr	r2, [r5, #12]
 800ab0c:	60da      	str	r2, [r3, #12]
 800ab0e:	e7e8      	b.n	800aae2 <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800ab10:	f04f 33ff 	mov.w	r3, #4294967295
 800ab14:	e7b6      	b.n	800aa84 <tcp_listen_with_backlog_and_err+0x1c>
 800ab16:	bf00      	nop
 800ab18:	0801c68a 	.word	0x0801c68a
 800ab1c:	0801c743 	.word	0x0801c743
 800ab20:	0801a72c 	.word	0x0801a72c
 800ab24:	0801c770 	.word	0x0801c770
 800ab28:	2000d058 	.word	0x2000d058
 800ab2c:	0800b695 	.word	0x0800b695

0800ab30 <tcp_update_rcv_ann_wnd>:
{
 800ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ab32:	4604      	mov	r4, r0
 800ab34:	b930      	cbnz	r0, 800ab44 <tcp_update_rcv_ann_wnd+0x14>
 800ab36:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <tcp_update_rcv_ann_wnd+0x5c>)
 800ab38:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ab3c:	4914      	ldr	r1, [pc, #80]	; (800ab90 <tcp_update_rcv_ann_wnd+0x60>)
 800ab3e:	4815      	ldr	r0, [pc, #84]	; (800ab94 <tcp_update_rcv_ann_wnd+0x64>)
 800ab40:	f004 fa48 	bl	800efd4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ab44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ab46:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800ab4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab4c:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ab4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ab50:	1ad0      	subs	r0, r2, r3
 800ab52:	42b7      	cmp	r7, r6
 800ab54:	4428      	add	r0, r5
 800ab56:	bf94      	ite	ls
 800ab58:	1bc1      	subls	r1, r0, r7
 800ab5a:	1b81      	subhi	r1, r0, r6
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	db01      	blt.n	800ab64 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ab60:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 800ab62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ab64:	1aea      	subs	r2, r5, r3
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	dd02      	ble.n	800ab70 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	8560      	strh	r0, [r4, #42]	; 0x2a
 800ab6e:	e7f8      	b.n	800ab62 <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ab70:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ab72:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800ab76:	d306      	bcc.n	800ab86 <tcp_update_rcv_ann_wnd+0x56>
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <tcp_update_rcv_ann_wnd+0x5c>)
 800ab7a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ab7e:	4906      	ldr	r1, [pc, #24]	; (800ab98 <tcp_update_rcv_ann_wnd+0x68>)
 800ab80:	4804      	ldr	r0, [pc, #16]	; (800ab94 <tcp_update_rcv_ann_wnd+0x64>)
 800ab82:	f004 fa27 	bl	800efd4 <iprintf>
    return 0;
 800ab86:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ab88:	8565      	strh	r5, [r4, #42]	; 0x2a
 800ab8a:	e7ea      	b.n	800ab62 <tcp_update_rcv_ann_wnd+0x32>
 800ab8c:	0801c68a 	.word	0x0801c68a
 800ab90:	0801c7a7 	.word	0x0801c7a7
 800ab94:	0801a72c 	.word	0x0801a72c
 800ab98:	0801c7cb 	.word	0x0801c7cb

0800ab9c <tcp_recved>:
{
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aba0:	4605      	mov	r5, r0
 800aba2:	b940      	cbnz	r0, 800abb6 <tcp_recved+0x1a>
 800aba4:	4b18      	ldr	r3, [pc, #96]	; (800ac08 <tcp_recved+0x6c>)
 800aba6:	f240 32cf 	movw	r2, #975	; 0x3cf
 800abaa:	4918      	ldr	r1, [pc, #96]	; (800ac0c <tcp_recved+0x70>)
 800abac:	4818      	ldr	r0, [pc, #96]	; (800ac10 <tcp_recved+0x74>)
}
 800abae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800abb2:	f004 ba0f 	b.w	800efd4 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800abb6:	7d03      	ldrb	r3, [r0, #20]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d106      	bne.n	800abca <tcp_recved+0x2e>
 800abbc:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <tcp_recved+0x6c>)
 800abbe:	f240 32d2 	movw	r2, #978	; 0x3d2
 800abc2:	4914      	ldr	r1, [pc, #80]	; (800ac14 <tcp_recved+0x78>)
 800abc4:	4812      	ldr	r0, [pc, #72]	; (800ac10 <tcp_recved+0x74>)
 800abc6:	f004 fa05 	bl	800efd4 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800abca:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800abcc:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800abd0:	1911      	adds	r1, r2, r4
 800abd2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800abd4:	4299      	cmp	r1, r3
 800abd6:	d813      	bhi.n	800ac00 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800abd8:	428a      	cmp	r2, r1
 800abda:	bf88      	it	hi
 800abdc:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800abde:	4628      	mov	r0, r5
 800abe0:	8529      	strh	r1, [r5, #40]	; 0x28
 800abe2:	f7ff ffa5 	bl	800ab30 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800abe6:	f240 23d9 	movw	r3, #729	; 0x2d9
 800abea:	4298      	cmp	r0, r3
 800abec:	d90a      	bls.n	800ac04 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 800abee:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800abf0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800abf2:	f043 0302 	orr.w	r3, r3, #2
 800abf6:	836b      	strh	r3, [r5, #26]
}
 800abf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800abfc:	f002 bd80 	b.w	800d700 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ac00:	4619      	mov	r1, r3
 800ac02:	e7ec      	b.n	800abde <tcp_recved+0x42>
}
 800ac04:	bd70      	pop	{r4, r5, r6, pc}
 800ac06:	bf00      	nop
 800ac08:	0801c68a 	.word	0x0801c68a
 800ac0c:	0801c7e5 	.word	0x0801c7e5
 800ac10:	0801a72c 	.word	0x0801a72c
 800ac14:	0801c7fd 	.word	0x0801c7fd

0800ac18 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ac18:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	b148      	cbz	r0, 800ac32 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800ac1e:	6840      	ldr	r0, [r0, #4]
 800ac20:	b108      	cbz	r0, 800ac26 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800ac22:	f7ff fbc5 	bl	800a3b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ac26:	4621      	mov	r1, r4
 800ac28:	2003      	movs	r0, #3
  }
}
 800ac2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800ac2e:	f7ff b9a5 	b.w	8009f7c <memp_free>
}
 800ac32:	bd10      	pop	{r4, pc}

0800ac34 <tcp_segs_free>:
{
 800ac34:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800ac36:	b900      	cbnz	r0, 800ac3a <tcp_segs_free+0x6>
}
 800ac38:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800ac3a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800ac3c:	f7ff ffec 	bl	800ac18 <tcp_seg_free>
    seg = next;
 800ac40:	4620      	mov	r0, r4
 800ac42:	e7f8      	b.n	800ac36 <tcp_segs_free+0x2>

0800ac44 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ac44:	b100      	cbz	r0, 800ac48 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800ac46:	6101      	str	r1, [r0, #16]
  }
}
 800ac48:	4770      	bx	lr
	...

0800ac4c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ac50:	4604      	mov	r4, r0
 800ac52:	b158      	cbz	r0, 800ac6c <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ac54:	7d03      	ldrb	r3, [r0, #20]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d106      	bne.n	800ac68 <tcp_recv+0x1c>
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <tcp_recv+0x24>)
 800ac5c:	f240 72df 	movw	r2, #2015	; 0x7df
 800ac60:	4904      	ldr	r1, [pc, #16]	; (800ac74 <tcp_recv+0x28>)
 800ac62:	4805      	ldr	r0, [pc, #20]	; (800ac78 <tcp_recv+0x2c>)
 800ac64:	f004 f9b6 	bl	800efd4 <iprintf>
    pcb->recv = recv;
 800ac68:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800ac6c:	bd38      	pop	{r3, r4, r5, pc}
 800ac6e:	bf00      	nop
 800ac70:	0801c68a 	.word	0x0801c68a
 800ac74:	0801c83c 	.word	0x0801c83c
 800ac78:	0801a72c 	.word	0x0801a72c

0800ac7c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ac80:	4604      	mov	r4, r0
 800ac82:	b150      	cbz	r0, 800ac9a <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ac84:	7d03      	ldrb	r3, [r0, #20]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d106      	bne.n	800ac98 <tcp_sent+0x1c>
 800ac8a:	4b04      	ldr	r3, [pc, #16]	; (800ac9c <tcp_sent+0x20>)
 800ac8c:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ac90:	4903      	ldr	r1, [pc, #12]	; (800aca0 <tcp_sent+0x24>)
 800ac92:	4804      	ldr	r0, [pc, #16]	; (800aca4 <tcp_sent+0x28>)
 800ac94:	f004 f99e 	bl	800efd4 <iprintf>
    pcb->sent = sent;
 800ac98:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	0801c68a 	.word	0x0801c68a
 800aca0:	0801c863 	.word	0x0801c863
 800aca4:	0801a72c 	.word	0x0801a72c

0800aca8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800acac:	4604      	mov	r4, r0
 800acae:	b158      	cbz	r0, 800acc8 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800acb0:	7d03      	ldrb	r3, [r0, #20]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d106      	bne.n	800acc4 <tcp_err+0x1c>
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <tcp_err+0x24>)
 800acb8:	f640 020d 	movw	r2, #2061	; 0x80d
 800acbc:	4904      	ldr	r1, [pc, #16]	; (800acd0 <tcp_err+0x28>)
 800acbe:	4805      	ldr	r0, [pc, #20]	; (800acd4 <tcp_err+0x2c>)
 800acc0:	f004 f988 	bl	800efd4 <iprintf>
    pcb->errf = err;
 800acc4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800acc8:	bd38      	pop	{r3, r4, r5, pc}
 800acca:	bf00      	nop
 800accc:	0801c68a 	.word	0x0801c68a
 800acd0:	0801c88a 	.word	0x0801c88a
 800acd4:	0801a72c 	.word	0x0801a72c

0800acd8 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800acd8:	b118      	cbz	r0, 800ace2 <tcp_accept+0xa>
 800acda:	7d03      	ldrb	r3, [r0, #20]
 800acdc:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800acde:	bf08      	it	eq
 800ace0:	6181      	streq	r1, [r0, #24]
  }
}
 800ace2:	4770      	bx	lr

0800ace4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	460e      	mov	r6, r1
 800ace8:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800acea:	4604      	mov	r4, r0
 800acec:	b940      	cbnz	r0, 800ad00 <tcp_poll+0x1c>
 800acee:	4b0b      	ldr	r3, [pc, #44]	; (800ad1c <tcp_poll+0x38>)
 800acf0:	f640 023d 	movw	r2, #2109	; 0x83d
 800acf4:	490a      	ldr	r1, [pc, #40]	; (800ad20 <tcp_poll+0x3c>)
 800acf6:	480b      	ldr	r0, [pc, #44]	; (800ad24 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800acf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800acfc:	f004 b96a 	b.w	800efd4 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ad00:	7d03      	ldrb	r3, [r0, #20]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d106      	bne.n	800ad14 <tcp_poll+0x30>
 800ad06:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <tcp_poll+0x38>)
 800ad08:	f640 023e 	movw	r2, #2110	; 0x83e
 800ad0c:	4906      	ldr	r1, [pc, #24]	; (800ad28 <tcp_poll+0x44>)
 800ad0e:	4805      	ldr	r0, [pc, #20]	; (800ad24 <tcp_poll+0x40>)
 800ad10:	f004 f960 	bl	800efd4 <iprintf>
  pcb->poll = poll;
 800ad14:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800ad18:	7765      	strb	r5, [r4, #29]
}
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	0801c68a 	.word	0x0801c68a
 800ad20:	0801c8b0 	.word	0x0801c8b0
 800ad24:	0801a72c 	.word	0x0801a72c
 800ad28:	0801c8c6 	.word	0x0801c8c6

0800ad2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ad2c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ad2e:	4604      	mov	r4, r0
 800ad30:	b940      	cbnz	r0, 800ad44 <tcp_pcb_purge+0x18>
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <tcp_pcb_purge+0x4c>)
 800ad34:	f640 0251 	movw	r2, #2129	; 0x851
 800ad38:	4910      	ldr	r1, [pc, #64]	; (800ad7c <tcp_pcb_purge+0x50>)
 800ad3a:	4811      	ldr	r0, [pc, #68]	; (800ad80 <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800ad3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ad40:	f004 b948 	b.w	800efd4 <iprintf>
  if (pcb->state != CLOSED &&
 800ad44:	7d03      	ldrb	r3, [r0, #20]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d915      	bls.n	800ad76 <tcp_pcb_purge+0x4a>
 800ad4a:	2b0a      	cmp	r3, #10
 800ad4c:	d013      	beq.n	800ad76 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800ad4e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800ad50:	b118      	cbz	r0, 800ad5a <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800ad52:	f7ff fb2d 	bl	800a3b0 <pbuf_free>
      pcb->refused_data = NULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800ad5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800ad5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800ad60:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800ad62:	f7ff ff67 	bl	800ac34 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ad66:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ad68:	f7ff ff64 	bl	800ac34 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800ad72:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800ad76:	bd10      	pop	{r4, pc}
 800ad78:	0801c68a 	.word	0x0801c68a
 800ad7c:	0801c8e4 	.word	0x0801c8e4
 800ad80:	0801a72c 	.word	0x0801a72c

0800ad84 <tcp_slowtmr>:
{
 800ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800ad88:	4dab      	ldr	r5, [pc, #684]	; (800b038 <tcp_slowtmr+0x2b4>)
{
 800ad8a:	b087      	sub	sp, #28
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ad8c:	4fab      	ldr	r7, [pc, #684]	; (800b03c <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 800ad8e:	68eb      	ldr	r3, [r5, #12]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ad90:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 800b058 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800ad94:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ad96:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800b05c <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800ad9a:	60eb      	str	r3, [r5, #12]
  ++tcp_timer_ctr;
 800ad9c:	7c2b      	ldrb	r3, [r5, #16]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800ada2:	68ac      	ldr	r4, [r5, #8]
  prev = NULL;
 800ada4:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 800ada8:	b95c      	cbnz	r4, 800adc2 <tcp_slowtmr+0x3e>
  pcb = tcp_tw_pcbs;
 800adaa:	696e      	ldr	r6, [r5, #20]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800adac:	4fa3      	ldr	r7, [pc, #652]	; (800b03c <tcp_slowtmr+0x2b8>)
 800adae:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800b060 <tcp_slowtmr+0x2dc>
 800adb2:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800b05c <tcp_slowtmr+0x2d8>
  while (pcb != NULL) {
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	f040 819b 	bne.w	800b0f2 <tcp_slowtmr+0x36e>
}
 800adbc:	b007      	add	sp, #28
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800adc2:	7d23      	ldrb	r3, [r4, #20]
 800adc4:	b933      	cbnz	r3, 800add4 <tcp_slowtmr+0x50>
 800adc6:	463b      	mov	r3, r7
 800adc8:	f240 42be 	movw	r2, #1214	; 0x4be
 800adcc:	4659      	mov	r1, fp
 800adce:	4640      	mov	r0, r8
 800add0:	f004 f900 	bl	800efd4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800add4:	7d23      	ldrb	r3, [r4, #20]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d106      	bne.n	800ade8 <tcp_slowtmr+0x64>
 800adda:	463b      	mov	r3, r7
 800addc:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ade0:	4997      	ldr	r1, [pc, #604]	; (800b040 <tcp_slowtmr+0x2bc>)
 800ade2:	4640      	mov	r0, r8
 800ade4:	f004 f8f6 	bl	800efd4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ade8:	7d23      	ldrb	r3, [r4, #20]
 800adea:	2b0a      	cmp	r3, #10
 800adec:	d106      	bne.n	800adfc <tcp_slowtmr+0x78>
 800adee:	463b      	mov	r3, r7
 800adf0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800adf4:	4993      	ldr	r1, [pc, #588]	; (800b044 <tcp_slowtmr+0x2c0>)
 800adf6:	4640      	mov	r0, r8
 800adf8:	f004 f8ec 	bl	800efd4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800adfc:	7c2b      	ldrb	r3, [r5, #16]
 800adfe:	7fa2      	ldrb	r2, [r4, #30]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d103      	bne.n	800ae0c <tcp_slowtmr+0x88>
      pcb = pcb->next;
 800ae04:	68e6      	ldr	r6, [r4, #12]
      continue;
 800ae06:	46a1      	mov	r9, r4
 800ae08:	4634      	mov	r4, r6
 800ae0a:	e7cd      	b.n	800ada8 <tcp_slowtmr+0x24>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ae0c:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800ae0e:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ae10:	2a02      	cmp	r2, #2
 800ae12:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ae16:	d176      	bne.n	800af06 <tcp_slowtmr+0x182>
 800ae18:	2b05      	cmp	r3, #5
 800ae1a:	d976      	bls.n	800af0a <tcp_slowtmr+0x186>
      ++pcb_remove;
 800ae1c:	f04f 0a01 	mov.w	sl, #1
    if (pcb->state == FIN_WAIT_2) {
 800ae20:	7d23      	ldrb	r3, [r4, #20]
 800ae22:	2b06      	cmp	r3, #6
 800ae24:	d10b      	bne.n	800ae3e <tcp_slowtmr+0xba>
      if (pcb->flags & TF_RXCLOSED) {
 800ae26:	8b62      	ldrh	r2, [r4, #26]
 800ae28:	06d2      	lsls	r2, r2, #27
 800ae2a:	d508      	bpl.n	800ae3e <tcp_slowtmr+0xba>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae2c:	68ea      	ldr	r2, [r5, #12]
 800ae2e:	6a21      	ldr	r1, [r4, #32]
 800ae30:	1a52      	subs	r2, r2, r1
 800ae32:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800ae34:	bf84      	itt	hi
 800ae36:	f10a 0a01 	addhi.w	sl, sl, #1
 800ae3a:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ae3e:	7a66      	ldrb	r6, [r4, #9]
 800ae40:	f016 0608 	ands.w	r6, r6, #8
 800ae44:	d019      	beq.n	800ae7a <tcp_slowtmr+0xf6>
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d002      	beq.n	800ae50 <tcp_slowtmr+0xcc>
        ((pcb->state == ESTABLISHED) ||
 800ae4a:	2b07      	cmp	r3, #7
 800ae4c:	f040 811c 	bne.w	800b088 <tcp_slowtmr+0x304>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae50:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ae52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae56:	68e9      	ldr	r1, [r5, #12]
 800ae58:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ae5a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae5e:	f503 2224 	add.w	r2, r3, #671744	; 0xa4000
 800ae62:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 800ae66:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae6a:	4291      	cmp	r1, r2
 800ae6c:	f240 80fa 	bls.w	800b064 <tcp_slowtmr+0x2e0>
        ++pcb_remove;
 800ae70:	f10a 0a01 	add.w	sl, sl, #1
        ++pcb_reset;
 800ae74:	2601      	movs	r6, #1
        ++pcb_remove;
 800ae76:	fa5f fa8a 	uxtb.w	sl, sl
    if (pcb->state == SYN_RCVD) {
 800ae7a:	7d23      	ldrb	r3, [r4, #20]
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	f040 8105 	bne.w	800b08c <tcp_slowtmr+0x308>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae82:	68eb      	ldr	r3, [r5, #12]
 800ae84:	6a22      	ldr	r2, [r4, #32]
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ae8a:	d803      	bhi.n	800ae94 <tcp_slowtmr+0x110>
    if (pcb_remove) {
 800ae8c:	f1ba 0f00 	cmp.w	sl, #0
 800ae90:	f000 8110 	beq.w	800b0b4 <tcp_slowtmr+0x330>
      tcp_pcb_purge(pcb);
 800ae94:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800ae96:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800ae9a:	f7ff ff47 	bl	800ad2c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ae9e:	68ab      	ldr	r3, [r5, #8]
      if (prev != NULL) {
 800aea0:	f1b9 0f00 	cmp.w	r9, #0
 800aea4:	f000 80fa 	beq.w	800b09c <tcp_slowtmr+0x318>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	d106      	bne.n	800aeba <tcp_slowtmr+0x136>
 800aeac:	463b      	mov	r3, r7
 800aeae:	f240 526d 	movw	r2, #1389	; 0x56d
 800aeb2:	4965      	ldr	r1, [pc, #404]	; (800b048 <tcp_slowtmr+0x2c4>)
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	f004 f88d 	bl	800efd4 <iprintf>
        prev->next = pcb->next;
 800aeba:	68e3      	ldr	r3, [r4, #12]
 800aebc:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800aec0:	b15e      	cbz	r6, 800aeda <tcp_slowtmr+0x156>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aec2:	8b23      	ldrh	r3, [r4, #24]
 800aec4:	4620      	mov	r0, r4
 800aec6:	9302      	str	r3, [sp, #8]
 800aec8:	8ae3      	ldrh	r3, [r4, #22]
 800aeca:	9301      	str	r3, [sp, #4]
 800aecc:	1d23      	adds	r3, r4, #4
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	4623      	mov	r3, r4
 800aed2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aed4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800aed6:	f002 fb9b 	bl	800d610 <tcp_rst>
      err_arg = pcb->callback_arg;
 800aeda:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800aedc:	4620      	mov	r0, r4
      pcb = pcb->next;
 800aede:	68e6      	ldr	r6, [r4, #12]
      err_arg = pcb->callback_arg;
 800aee0:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800aee2:	f7ff fd53 	bl	800a98c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800aee6:	2200      	movs	r2, #0
 800aee8:	746a      	strb	r2, [r5, #17]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800aeea:	f1ba 0f00 	cmp.w	sl, #0
 800aeee:	d008      	beq.n	800af02 <tcp_slowtmr+0x17e>
 800aef0:	9b05      	ldr	r3, [sp, #20]
 800aef2:	f06f 010c 	mvn.w	r1, #12
 800aef6:	4618      	mov	r0, r3
 800aef8:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 800aefa:	7c6b      	ldrb	r3, [r5, #17]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f47f af50 	bne.w	800ada2 <tcp_slowtmr+0x1e>
 800af02:	464c      	mov	r4, r9
 800af04:	e77f      	b.n	800ae06 <tcp_slowtmr+0x82>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800af06:	2b0b      	cmp	r3, #11
 800af08:	e787      	b.n	800ae1a <tcp_slowtmr+0x96>
      if (pcb->persist_backoff > 0) {
 800af0a:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 800af0e:	f1ba 0f00 	cmp.w	sl, #0
 800af12:	d045      	beq.n	800afa0 <tcp_slowtmr+0x21c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800af14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800af16:	b133      	cbz	r3, 800af26 <tcp_slowtmr+0x1a2>
 800af18:	463b      	mov	r3, r7
 800af1a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800af1e:	494b      	ldr	r1, [pc, #300]	; (800b04c <tcp_slowtmr+0x2c8>)
 800af20:	4640      	mov	r0, r8
 800af22:	f004 f857 	bl	800efd4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800af26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800af28:	b933      	cbnz	r3, 800af38 <tcp_slowtmr+0x1b4>
 800af2a:	463b      	mov	r3, r7
 800af2c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800af30:	4947      	ldr	r1, [pc, #284]	; (800b050 <tcp_slowtmr+0x2cc>)
 800af32:	4640      	mov	r0, r8
 800af34:	f004 f84e 	bl	800efd4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800af38:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800af3c:	2b0b      	cmp	r3, #11
 800af3e:	f63f af6d 	bhi.w	800ae1c <tcp_slowtmr+0x98>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800af42:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800af46:	4b43      	ldr	r3, [pc, #268]	; (800b054 <tcp_slowtmr+0x2d0>)
 800af48:	4413      	add	r3, r2
 800af4a:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800af4c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800af50:	4293      	cmp	r3, r2
 800af52:	d30b      	bcc.n	800af6c <tcp_slowtmr+0x1e8>
            if (pcb->snd_wnd == 0) {
 800af54:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800af58:	b189      	cbz	r1, 800af7e <tcp_slowtmr+0x1fa>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800af5a:	4620      	mov	r0, r4
 800af5c:	f002 f910 	bl	800d180 <tcp_split_unsent_seg>
 800af60:	b990      	cbnz	r0, 800af88 <tcp_slowtmr+0x204>
                if (tcp_output(pcb) == ERR_OK) {
 800af62:	4620      	mov	r0, r4
 800af64:	f002 fbcc 	bl	800d700 <tcp_output>
 800af68:	b130      	cbz	r0, 800af78 <tcp_slowtmr+0x1f4>
 800af6a:	e00d      	b.n	800af88 <tcp_slowtmr+0x204>
            pcb->persist_cnt++;
 800af6c:	3301      	adds	r3, #1
 800af6e:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800af70:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800af72:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800af76:	d2ed      	bcs.n	800af54 <tcp_slowtmr+0x1d0>
    pcb_remove = 0;
 800af78:	f04f 0a00 	mov.w	sl, #0
 800af7c:	e750      	b.n	800ae20 <tcp_slowtmr+0x9c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800af7e:	4620      	mov	r0, r4
 800af80:	f002 fdc6 	bl	800db10 <tcp_zero_window_probe>
 800af84:	2800      	cmp	r0, #0
 800af86:	d1f7      	bne.n	800af78 <tcp_slowtmr+0x1f4>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800af88:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800af8c:	f04f 0a00 	mov.w	sl, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800af90:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800af92:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800af96:	d8ef      	bhi.n	800af78 <tcp_slowtmr+0x1f4>
                pcb->persist_backoff++;
 800af98:	3301      	adds	r3, #1
 800af9a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800af9e:	e73f      	b.n	800ae20 <tcp_slowtmr+0x9c>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800afa0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800afa2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800afa6:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800afa8:	bf9c      	itt	ls
 800afaa:	3301      	addls	r3, #1
 800afac:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800afae:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800afb2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800afb6:	429a      	cmp	r2, r3
 800afb8:	dbde      	blt.n	800af78 <tcp_slowtmr+0x1f4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800afba:	4620      	mov	r0, r4
 800afbc:	f002 fa70 	bl	800d4a0 <tcp_rexmit_rto_prepare>
 800afc0:	b128      	cbz	r0, 800afce <tcp_slowtmr+0x24a>
 800afc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1d7      	bne.n	800af78 <tcp_slowtmr+0x1f4>
 800afc8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0d4      	beq.n	800af78 <tcp_slowtmr+0x1f4>
            if (pcb->state != SYN_SENT) {
 800afce:	7d23      	ldrb	r3, [r4, #20]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d015      	beq.n	800b000 <tcp_slowtmr+0x27c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800afd4:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800afd8:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800afdc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800afe0:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800afe4:	4a1b      	ldr	r2, [pc, #108]	; (800b054 <tcp_slowtmr+0x2d0>)
 800afe6:	290c      	cmp	r1, #12
 800afe8:	bf94      	ite	ls
 800afea:	1852      	addls	r2, r2, r1
 800afec:	320c      	addhi	r2, #12
 800afee:	7dd2      	ldrb	r2, [r2, #23]
 800aff0:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800aff2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aff6:	4293      	cmp	r3, r2
 800aff8:	bfa8      	it	ge
 800affa:	4613      	movge	r3, r2
 800affc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b000:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 800b004:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b006:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b00a:	8e66      	ldrh	r6, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800b00c:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 800b00e:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800b010:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b014:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800b016:	bf28      	it	cs
 800b018:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b01a:	0073      	lsls	r3, r6, #1
            pcb->cwnd = pcb->mss;
 800b01c:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b020:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800b022:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b024:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800b028:	bf98      	it	ls
 800b02a:	460b      	movls	r3, r1
 800b02c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800b030:	f002 fd10 	bl	800da54 <tcp_rexmit_rto_commit>
 800b034:	e6f4      	b.n	800ae20 <tcp_slowtmr+0x9c>
 800b036:	bf00      	nop
 800b038:	2000d058 	.word	0x2000d058
 800b03c:	0801c68a 	.word	0x0801c68a
 800b040:	0801c929 	.word	0x0801c929
 800b044:	0801c953 	.word	0x0801c953
 800b048:	0801c9e7 	.word	0x0801c9e7
 800b04c:	0801c980 	.word	0x0801c980
 800b050:	0801c9b2 	.word	0x0801c9b2
 800b054:	0801198c 	.word	0x0801198c
 800b058:	0801c8ff 	.word	0x0801c8ff
 800b05c:	0801a72c 	.word	0x0801a72c
 800b060:	0801ca3c 	.word	0x0801ca3c
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b064:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 800b068:	4e3d      	ldr	r6, [pc, #244]	; (800b160 <tcp_slowtmr+0x3dc>)
 800b06a:	fb06 3302 	mla	r3, r6, r2, r3
                 / TCP_SLOW_INTERVAL) {
 800b06e:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b072:	4299      	cmp	r1, r3
 800b074:	d908      	bls.n	800b088 <tcp_slowtmr+0x304>
        err = tcp_keepalive(pcb);
 800b076:	4620      	mov	r0, r4
 800b078:	f002 fd22 	bl	800dac0 <tcp_keepalive>
        if (err == ERR_OK) {
 800b07c:	b920      	cbnz	r0, 800b088 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 800b07e:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800b082:	3301      	adds	r3, #1
 800b084:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800b088:	2600      	movs	r6, #0
 800b08a:	e6f6      	b.n	800ae7a <tcp_slowtmr+0xf6>
    if (pcb->state == LAST_ACK) {
 800b08c:	2b09      	cmp	r3, #9
 800b08e:	f47f aefd 	bne.w	800ae8c <tcp_slowtmr+0x108>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b092:	68eb      	ldr	r3, [r5, #12]
 800b094:	6a22      	ldr	r2, [r4, #32]
 800b096:	1a9b      	subs	r3, r3, r2
 800b098:	2bf0      	cmp	r3, #240	; 0xf0
 800b09a:	e6f6      	b.n	800ae8a <tcp_slowtmr+0x106>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	d006      	beq.n	800b0ae <tcp_slowtmr+0x32a>
 800b0a0:	463b      	mov	r3, r7
 800b0a2:	f240 5271 	movw	r2, #1393	; 0x571
 800b0a6:	492f      	ldr	r1, [pc, #188]	; (800b164 <tcp_slowtmr+0x3e0>)
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	f003 ff93 	bl	800efd4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	60ab      	str	r3, [r5, #8]
 800b0b2:	e705      	b.n	800aec0 <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 800b0b4:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b0b6:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800b0b8:	3301      	adds	r3, #1
      pcb = pcb->next;
 800b0ba:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800b0bc:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800b0be:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800b0c0:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b0c2:	f63f aea0 	bhi.w	800ae06 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800b0c6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800b0ca:	f884 a01c 	strb.w	sl, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800b0ce:	f885 a011 	strb.w	sl, [r5, #17]
        TCP_EVENT_POLL(prev, err);
 800b0d2:	b91b      	cbnz	r3, 800b0dc <tcp_slowtmr+0x358>
          tcp_output(prev);
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f002 fb13 	bl	800d700 <tcp_output>
 800b0da:	e694      	b.n	800ae06 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800b0dc:	4621      	mov	r1, r4
 800b0de:	6920      	ldr	r0, [r4, #16]
 800b0e0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800b0e2:	7c6b      	ldrb	r3, [r5, #17]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f47f ae5c 	bne.w	800ada2 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	f47f ae8b 	bne.w	800ae06 <tcp_slowtmr+0x82>
 800b0f0:	e7f0      	b.n	800b0d4 <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b0f2:	7d33      	ldrb	r3, [r6, #20]
 800b0f4:	2b0a      	cmp	r3, #10
 800b0f6:	d006      	beq.n	800b106 <tcp_slowtmr+0x382>
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b0fe:	4649      	mov	r1, r9
 800b100:	4640      	mov	r0, r8
 800b102:	f003 ff67 	bl	800efd4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b106:	68eb      	ldr	r3, [r5, #12]
 800b108:	6a32      	ldr	r2, [r6, #32]
 800b10a:	1a9b      	subs	r3, r3, r2
 800b10c:	2bf0      	cmp	r3, #240	; 0xf0
 800b10e:	d910      	bls.n	800b132 <tcp_slowtmr+0x3ae>
      tcp_pcb_purge(pcb);
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff fe0b 	bl	800ad2c <tcp_pcb_purge>
      if (prev != NULL) {
 800b116:	b97c      	cbnz	r4, 800b138 <tcp_slowtmr+0x3b4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b118:	696b      	ldr	r3, [r5, #20]
 800b11a:	42b3      	cmp	r3, r6
 800b11c:	d006      	beq.n	800b12c <tcp_slowtmr+0x3a8>
 800b11e:	463b      	mov	r3, r7
 800b120:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b124:	4910      	ldr	r1, [pc, #64]	; (800b168 <tcp_slowtmr+0x3e4>)
 800b126:	4640      	mov	r0, r8
 800b128:	f003 ff54 	bl	800efd4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b12c:	68f3      	ldr	r3, [r6, #12]
 800b12e:	616b      	str	r3, [r5, #20]
 800b130:	e00e      	b.n	800b150 <tcp_slowtmr+0x3cc>
      pcb = pcb->next;
 800b132:	4634      	mov	r4, r6
 800b134:	68f6      	ldr	r6, [r6, #12]
 800b136:	e63e      	b.n	800adb6 <tcp_slowtmr+0x32>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b138:	696b      	ldr	r3, [r5, #20]
 800b13a:	42b3      	cmp	r3, r6
 800b13c:	d106      	bne.n	800b14c <tcp_slowtmr+0x3c8>
 800b13e:	463b      	mov	r3, r7
 800b140:	f240 52af 	movw	r2, #1455	; 0x5af
 800b144:	4909      	ldr	r1, [pc, #36]	; (800b16c <tcp_slowtmr+0x3e8>)
 800b146:	4640      	mov	r0, r8
 800b148:	f003 ff44 	bl	800efd4 <iprintf>
        prev->next = pcb->next;
 800b14c:	68f3      	ldr	r3, [r6, #12]
 800b14e:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800b150:	f8d6 a00c 	ldr.w	sl, [r6, #12]
      tcp_free(pcb2);
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff fc19 	bl	800a98c <tcp_free>
      pcb = pcb->next;
 800b15a:	4656      	mov	r6, sl
 800b15c:	e62b      	b.n	800adb6 <tcp_slowtmr+0x32>
 800b15e:	bf00      	nop
 800b160:	000124f8 	.word	0x000124f8
 800b164:	0801ca12 	.word	0x0801ca12
 800b168:	0801ca92 	.word	0x0801ca92
 800b16c:	0801ca6b 	.word	0x0801ca6b

0800b170 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b174:	460c      	mov	r4, r1
 800b176:	b931      	cbnz	r1, 800b186 <tcp_pcb_remove+0x16>
 800b178:	4b25      	ldr	r3, [pc, #148]	; (800b210 <tcp_pcb_remove+0xa0>)
 800b17a:	f640 0283 	movw	r2, #2179	; 0x883
 800b17e:	4925      	ldr	r1, [pc, #148]	; (800b214 <tcp_pcb_remove+0xa4>)
 800b180:	4825      	ldr	r0, [pc, #148]	; (800b218 <tcp_pcb_remove+0xa8>)
 800b182:	f003 ff27 	bl	800efd4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b186:	b935      	cbnz	r5, 800b196 <tcp_pcb_remove+0x26>
 800b188:	4b21      	ldr	r3, [pc, #132]	; (800b210 <tcp_pcb_remove+0xa0>)
 800b18a:	f640 0284 	movw	r2, #2180	; 0x884
 800b18e:	4923      	ldr	r1, [pc, #140]	; (800b21c <tcp_pcb_remove+0xac>)
 800b190:	4821      	ldr	r0, [pc, #132]	; (800b218 <tcp_pcb_remove+0xa8>)
 800b192:	f003 ff1f 	bl	800efd4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	42a3      	cmp	r3, r4
 800b19a:	d116      	bne.n	800b1ca <tcp_pcb_remove+0x5a>
 800b19c:	68e3      	ldr	r3, [r4, #12]
 800b19e:	602b      	str	r3, [r5, #0]
 800b1a0:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800b1a2:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b1a4:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b1a6:	f7ff fdc1 	bl	800ad2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b1aa:	7d23      	ldrb	r3, [r4, #20]
 800b1ac:	2b0a      	cmp	r3, #10
 800b1ae:	d114      	bne.n	800b1da <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b1b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b1b2:	bb23      	cbnz	r3, 800b1fe <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b1b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b1b6:	b1f3      	cbz	r3, 800b1f6 <tcp_pcb_remove+0x86>
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <tcp_pcb_remove+0xa0>)
 800b1ba:	f640 0294 	movw	r2, #2196	; 0x894
 800b1be:	4918      	ldr	r1, [pc, #96]	; (800b220 <tcp_pcb_remove+0xb0>)
 800b1c0:	4815      	ldr	r0, [pc, #84]	; (800b218 <tcp_pcb_remove+0xa8>)
 800b1c2:	f003 ff07 	bl	800efd4 <iprintf>
 800b1c6:	e016      	b.n	800b1f6 <tcp_pcb_remove+0x86>
 800b1c8:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d0e8      	beq.n	800b1a0 <tcp_pcb_remove+0x30>
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	42a2      	cmp	r2, r4
 800b1d2:	d1f9      	bne.n	800b1c8 <tcp_pcb_remove+0x58>
 800b1d4:	68e2      	ldr	r2, [r4, #12]
 800b1d6:	60da      	str	r2, [r3, #12]
 800b1d8:	e7e2      	b.n	800b1a0 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d00b      	beq.n	800b1f6 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800b1de:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b1e0:	07da      	lsls	r2, r3, #31
 800b1e2:	d5e5      	bpl.n	800b1b0 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800b1e4:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b1e8:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b1ea:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b1ec:	f002 fa88 	bl	800d700 <tcp_output>
  if (pcb->state != LISTEN) {
 800b1f0:	7d23      	ldrb	r3, [r4, #20]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d1dc      	bne.n	800b1b0 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b1fa:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b1fe:	4b04      	ldr	r3, [pc, #16]	; (800b210 <tcp_pcb_remove+0xa0>)
 800b200:	f640 0293 	movw	r2, #2195	; 0x893
 800b204:	4907      	ldr	r1, [pc, #28]	; (800b224 <tcp_pcb_remove+0xb4>)
 800b206:	4804      	ldr	r0, [pc, #16]	; (800b218 <tcp_pcb_remove+0xa8>)
 800b208:	f003 fee4 	bl	800efd4 <iprintf>
 800b20c:	e7d2      	b.n	800b1b4 <tcp_pcb_remove+0x44>
 800b20e:	bf00      	nop
 800b210:	0801c68a 	.word	0x0801c68a
 800b214:	0801cab8 	.word	0x0801cab8
 800b218:	0801a72c 	.word	0x0801a72c
 800b21c:	0801cad4 	.word	0x0801cad4
 800b220:	0801cb0c 	.word	0x0801cb0c
 800b224:	0801caf4 	.word	0x0801caf4

0800b228 <tcp_close_shutdown>:
{
 800b228:	b530      	push	{r4, r5, lr}
 800b22a:	460d      	mov	r5, r1
 800b22c:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b22e:	4604      	mov	r4, r0
 800b230:	b930      	cbnz	r0, 800b240 <tcp_close_shutdown+0x18>
 800b232:	4b4b      	ldr	r3, [pc, #300]	; (800b360 <tcp_close_shutdown+0x138>)
 800b234:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b238:	494a      	ldr	r1, [pc, #296]	; (800b364 <tcp_close_shutdown+0x13c>)
 800b23a:	484b      	ldr	r0, [pc, #300]	; (800b368 <tcp_close_shutdown+0x140>)
 800b23c:	f003 feca 	bl	800efd4 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b240:	7d23      	ldrb	r3, [r4, #20]
 800b242:	2d00      	cmp	r5, #0
 800b244:	d03f      	beq.n	800b2c6 <tcp_close_shutdown+0x9e>
 800b246:	2b04      	cmp	r3, #4
 800b248:	d001      	beq.n	800b24e <tcp_close_shutdown+0x26>
 800b24a:	2b07      	cmp	r3, #7
 800b24c:	d13b      	bne.n	800b2c6 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b24e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b250:	b922      	cbnz	r2, 800b25c <tcp_close_shutdown+0x34>
 800b252:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b254:	f640 3268 	movw	r2, #2920	; 0xb68
 800b258:	4291      	cmp	r1, r2
 800b25a:	d034      	beq.n	800b2c6 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b25c:	8b63      	ldrh	r3, [r4, #26]
 800b25e:	06db      	lsls	r3, r3, #27
 800b260:	d406      	bmi.n	800b270 <tcp_close_shutdown+0x48>
 800b262:	4b3f      	ldr	r3, [pc, #252]	; (800b360 <tcp_close_shutdown+0x138>)
 800b264:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b268:	4940      	ldr	r1, [pc, #256]	; (800b36c <tcp_close_shutdown+0x144>)
 800b26a:	483f      	ldr	r0, [pc, #252]	; (800b368 <tcp_close_shutdown+0x140>)
 800b26c:	f003 feb2 	bl	800efd4 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b270:	8b23      	ldrh	r3, [r4, #24]
 800b272:	4620      	mov	r0, r4
 800b274:	9302      	str	r3, [sp, #8]
 800b276:	8ae3      	ldrh	r3, [r4, #22]
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	1d23      	adds	r3, r4, #4
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	4623      	mov	r3, r4
 800b280:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b282:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b284:	f002 f9c4 	bl	800d610 <tcp_rst>
      tcp_pcb_purge(pcb);
 800b288:	4620      	mov	r0, r4
 800b28a:	f7ff fd4f 	bl	800ad2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b28e:	4a38      	ldr	r2, [pc, #224]	; (800b370 <tcp_close_shutdown+0x148>)
 800b290:	6893      	ldr	r3, [r2, #8]
 800b292:	42a3      	cmp	r3, r4
 800b294:	d10f      	bne.n	800b2b6 <tcp_close_shutdown+0x8e>
 800b296:	68e3      	ldr	r3, [r4, #12]
 800b298:	6093      	str	r3, [r2, #8]
 800b29a:	2300      	movs	r3, #0
 800b29c:	60e3      	str	r3, [r4, #12]
 800b29e:	2301      	movs	r3, #1
 800b2a0:	7453      	strb	r3, [r2, #17]
      if (tcp_input_pcb == pcb) {
 800b2a2:	4b34      	ldr	r3, [pc, #208]	; (800b374 <tcp_close_shutdown+0x14c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	42a3      	cmp	r3, r4
 800b2a8:	d11d      	bne.n	800b2e6 <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
 800b2aa:	f001 fb3f 	bl	800c92c <tcp_trigger_input_pcb_close>
}
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	b005      	add	sp, #20
 800b2b2:	bd30      	pop	{r4, r5, pc}
 800b2b4:	460b      	mov	r3, r1
      TCP_RMV_ACTIVE(pcb);
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d0ef      	beq.n	800b29a <tcp_close_shutdown+0x72>
 800b2ba:	68d9      	ldr	r1, [r3, #12]
 800b2bc:	42a1      	cmp	r1, r4
 800b2be:	d1f9      	bne.n	800b2b4 <tcp_close_shutdown+0x8c>
 800b2c0:	68e1      	ldr	r1, [r4, #12]
 800b2c2:	60d9      	str	r1, [r3, #12]
 800b2c4:	e7e9      	b.n	800b29a <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d01a      	beq.n	800b300 <tcp_close_shutdown+0xd8>
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d039      	beq.n	800b342 <tcp_close_shutdown+0x11a>
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d140      	bne.n	800b354 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800b2d2:	8ae3      	ldrh	r3, [r4, #22]
 800b2d4:	b13b      	cbz	r3, 800b2e6 <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2d6:	4a26      	ldr	r2, [pc, #152]	; (800b370 <tcp_close_shutdown+0x148>)
 800b2d8:	6813      	ldr	r3, [r2, #0]
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	d108      	bne.n	800b2f0 <tcp_close_shutdown+0xc8>
 800b2de:	68e3      	ldr	r3, [r4, #12]
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7ff fb50 	bl	800a98c <tcp_free>
      break;
 800b2ec:	e7df      	b.n	800b2ae <tcp_close_shutdown+0x86>
 800b2ee:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d0f6      	beq.n	800b2e2 <tcp_close_shutdown+0xba>
 800b2f4:	68da      	ldr	r2, [r3, #12]
 800b2f6:	42a2      	cmp	r2, r4
 800b2f8:	d1f9      	bne.n	800b2ee <tcp_close_shutdown+0xc6>
 800b2fa:	68e2      	ldr	r2, [r4, #12]
 800b2fc:	60da      	str	r2, [r3, #12]
 800b2fe:	e7f0      	b.n	800b2e2 <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b300:	491d      	ldr	r1, [pc, #116]	; (800b378 <tcp_close_shutdown+0x150>)
      pcb->listener = NULL;
 800b302:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b304:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800b308:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b30a:	b9a2      	cbnz	r2, 800b336 <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b30c:	3301      	adds	r3, #1
 800b30e:	2b04      	cmp	r3, #4
 800b310:	d1f8      	bne.n	800b304 <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b312:	4621      	mov	r1, r4
 800b314:	4819      	ldr	r0, [pc, #100]	; (800b37c <tcp_close_shutdown+0x154>)
 800b316:	f7ff ff2b 	bl	800b170 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b31a:	7d23      	ldrb	r3, [r4, #20]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d105      	bne.n	800b32c <tcp_close_shutdown+0x104>
 800b320:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <tcp_close_shutdown+0x138>)
 800b322:	22df      	movs	r2, #223	; 0xdf
 800b324:	4916      	ldr	r1, [pc, #88]	; (800b380 <tcp_close_shutdown+0x158>)
 800b326:	4810      	ldr	r0, [pc, #64]	; (800b368 <tcp_close_shutdown+0x140>)
 800b328:	f003 fe54 	bl	800efd4 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b32c:	4621      	mov	r1, r4
 800b32e:	2002      	movs	r0, #2
 800b330:	f7fe fe24 	bl	8009f7c <memp_free>
}
 800b334:	e7bb      	b.n	800b2ae <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 800b336:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800b338:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800b33a:	bf08      	it	eq
 800b33c:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b33e:	68d2      	ldr	r2, [r2, #12]
 800b340:	e7e3      	b.n	800b30a <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b342:	4d0b      	ldr	r5, [pc, #44]	; (800b370 <tcp_close_shutdown+0x148>)
 800b344:	4621      	mov	r1, r4
 800b346:	f105 0008 	add.w	r0, r5, #8
 800b34a:	f7ff ff11 	bl	800b170 <tcp_pcb_remove>
 800b34e:	2301      	movs	r3, #1
 800b350:	746b      	strb	r3, [r5, #17]
 800b352:	e7c8      	b.n	800b2e6 <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
 800b354:	4620      	mov	r0, r4
}
 800b356:	b005      	add	sp, #20
 800b358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800b35c:	f7ff bada 	b.w	800a914 <tcp_close_shutdown_fin>
 800b360:	0801c68a 	.word	0x0801c68a
 800b364:	0801cb25 	.word	0x0801cb25
 800b368:	0801a72c 	.word	0x0801a72c
 800b36c:	0801cb45 	.word	0x0801cb45
 800b370:	2000d058 	.word	0x2000d058
 800b374:	2000d0b0 	.word	0x2000d0b0
 800b378:	0801198c 	.word	0x0801198c
 800b37c:	2000d05c 	.word	0x2000d05c
 800b380:	0801cb5e 	.word	0x0801cb5e

0800b384 <tcp_close>:
{
 800b384:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b386:	b158      	cbz	r0, 800b3a0 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800b388:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800b38a:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800b38c:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b38e:	bf1e      	ittt	ne
 800b390:	8b43      	ldrhne	r3, [r0, #26]
 800b392:	f043 0310 	orrne.w	r3, r3, #16
 800b396:	8343      	strhne	r3, [r0, #26]
}
 800b398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800b39c:	f7ff bf44 	b.w	800b228 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3a0:	4b04      	ldr	r3, [pc, #16]	; (800b3b4 <tcp_close+0x30>)
 800b3a2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b3a6:	4904      	ldr	r1, [pc, #16]	; (800b3b8 <tcp_close+0x34>)
 800b3a8:	4804      	ldr	r0, [pc, #16]	; (800b3bc <tcp_close+0x38>)
 800b3aa:	f003 fe13 	bl	800efd4 <iprintf>
}
 800b3ae:	f06f 000f 	mvn.w	r0, #15
 800b3b2:	bd08      	pop	{r3, pc}
 800b3b4:	0801c68a 	.word	0x0801c68a
 800b3b8:	0801cb77 	.word	0x0801cb77
 800b3bc:	0801a72c 	.word	0x0801a72c

0800b3c0 <tcp_recv_null>:
{
 800b3c0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3c2:	4608      	mov	r0, r1
{
 800b3c4:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3c6:	b949      	cbnz	r1, 800b3dc <tcp_recv_null+0x1c>
 800b3c8:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <tcp_recv_null+0x3c>)
 800b3ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b3ce:	490c      	ldr	r1, [pc, #48]	; (800b400 <tcp_recv_null+0x40>)
 800b3d0:	480c      	ldr	r0, [pc, #48]	; (800b404 <tcp_recv_null+0x44>)
 800b3d2:	f003 fdff 	bl	800efd4 <iprintf>
 800b3d6:	f06f 000f 	mvn.w	r0, #15
}
 800b3da:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800b3dc:	b13a      	cbz	r2, 800b3ee <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800b3de:	8911      	ldrh	r1, [r2, #8]
 800b3e0:	f7ff fbdc 	bl	800ab9c <tcp_recved>
    pbuf_free(p);
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f7fe ffe3 	bl	800a3b0 <pbuf_free>
  return ERR_OK;
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	e7f5      	b.n	800b3da <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800b3ee:	b91b      	cbnz	r3, 800b3f8 <tcp_recv_null+0x38>
}
 800b3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800b3f4:	f7ff bfc6 	b.w	800b384 <tcp_close>
  return ERR_OK;
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	e7ee      	b.n	800b3da <tcp_recv_null+0x1a>
 800b3fc:	0801c68a 	.word	0x0801c68a
 800b400:	0801cb8e 	.word	0x0801cb8e
 800b404:	0801a72c 	.word	0x0801a72c

0800b408 <tcp_process_refused_data>:
{
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b40a:	4604      	mov	r4, r0
 800b40c:	b950      	cbnz	r0, 800b424 <tcp_process_refused_data+0x1c>
 800b40e:	f06f 050f 	mvn.w	r5, #15
 800b412:	4b1d      	ldr	r3, [pc, #116]	; (800b488 <tcp_process_refused_data+0x80>)
 800b414:	f240 6209 	movw	r2, #1545	; 0x609
 800b418:	491c      	ldr	r1, [pc, #112]	; (800b48c <tcp_process_refused_data+0x84>)
 800b41a:	481d      	ldr	r0, [pc, #116]	; (800b490 <tcp_process_refused_data+0x88>)
 800b41c:	f003 fdda 	bl	800efd4 <iprintf>
}
 800b420:	4628      	mov	r0, r5
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800b424:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800b426:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b428:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800b42c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800b42e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b430:	b1e5      	cbz	r5, 800b46c <tcp_process_refused_data+0x64>
 800b432:	4601      	mov	r1, r0
 800b434:	4632      	mov	r2, r6
 800b436:	6900      	ldr	r0, [r0, #16]
 800b438:	47a8      	blx	r5
 800b43a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800b43c:	b9e8      	cbnz	r0, 800b47a <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b43e:	06bb      	lsls	r3, r7, #26
 800b440:	d5ee      	bpl.n	800b420 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b442:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b444:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800b448:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b44c:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800b44e:	bf1c      	itt	ne
 800b450:	3301      	addne	r3, #1
 800b452:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800b454:	2e00      	cmp	r6, #0
 800b456:	d0e3      	beq.n	800b420 <tcp_process_refused_data+0x18>
 800b458:	2300      	movs	r3, #0
 800b45a:	4621      	mov	r1, r4
 800b45c:	6920      	ldr	r0, [r4, #16]
 800b45e:	461a      	mov	r2, r3
 800b460:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800b462:	300d      	adds	r0, #13
 800b464:	d1dc      	bne.n	800b420 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800b466:	f06f 050c 	mvn.w	r5, #12
 800b46a:	e7d9      	b.n	800b420 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b46c:	4601      	mov	r1, r0
 800b46e:	462b      	mov	r3, r5
 800b470:	4632      	mov	r2, r6
 800b472:	4628      	mov	r0, r5
 800b474:	f7ff ffa4 	bl	800b3c0 <tcp_recv_null>
 800b478:	e7df      	b.n	800b43a <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800b47a:	350d      	adds	r5, #13
 800b47c:	d0f3      	beq.n	800b466 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800b47e:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800b482:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800b484:	e7cc      	b.n	800b420 <tcp_process_refused_data+0x18>
 800b486:	bf00      	nop
 800b488:	0801c68a 	.word	0x0801c68a
 800b48c:	0801cba9 	.word	0x0801cba9
 800b490:	0801a72c 	.word	0x0801a72c

0800b494 <tcp_fasttmr>:
{
 800b494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ++tcp_timer_ctr;
 800b496:	4d18      	ldr	r5, [pc, #96]	; (800b4f8 <tcp_fasttmr+0x64>)
        tcp_active_pcbs_changed = 0;
 800b498:	2600      	movs	r6, #0
  ++tcp_timer_ctr;
 800b49a:	7c2b      	ldrb	r3, [r5, #16]
 800b49c:	3301      	adds	r3, #1
 800b49e:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800b4a0:	68ac      	ldr	r4, [r5, #8]
  while (pcb != NULL) {
 800b4a2:	b904      	cbnz	r4, 800b4a6 <tcp_fasttmr+0x12>
}
 800b4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800b4a6:	7c2b      	ldrb	r3, [r5, #16]
 800b4a8:	7fa2      	ldrb	r2, [r4, #30]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d022      	beq.n	800b4f4 <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
 800b4ae:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800b4b0:	8b63      	ldrh	r3, [r4, #26]
 800b4b2:	07d9      	lsls	r1, r3, #31
 800b4b4:	d509      	bpl.n	800b4ca <tcp_fasttmr+0x36>
        tcp_ack_now(pcb);
 800b4b6:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800b4ba:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800b4bc:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800b4be:	f002 f91f 	bl	800d700 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b4c2:	8b63      	ldrh	r3, [r4, #26]
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800b4ca:	8b63      	ldrh	r3, [r4, #26]
 800b4cc:	071a      	lsls	r2, r3, #28
 800b4ce:	d505      	bpl.n	800b4dc <tcp_fasttmr+0x48>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b4d0:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800b4d4:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b4d6:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800b4d8:	f7ff fa1c 	bl	800a914 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800b4dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800b4de:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 800b4e0:	b133      	cbz	r3, 800b4f0 <tcp_fasttmr+0x5c>
        tcp_process_refused_data(pcb);
 800b4e2:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800b4e4:	746e      	strb	r6, [r5, #17]
        tcp_process_refused_data(pcb);
 800b4e6:	f7ff ff8f 	bl	800b408 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b4ea:	7c6b      	ldrb	r3, [r5, #17]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1d7      	bne.n	800b4a0 <tcp_fasttmr+0xc>
{
 800b4f0:	463c      	mov	r4, r7
 800b4f2:	e7d6      	b.n	800b4a2 <tcp_fasttmr+0xe>
      pcb = pcb->next;
 800b4f4:	68e7      	ldr	r7, [r4, #12]
 800b4f6:	e7fb      	b.n	800b4f0 <tcp_fasttmr+0x5c>
 800b4f8:	2000d058 	.word	0x2000d058

0800b4fc <tcp_tmr>:
{
 800b4fc:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800b4fe:	f7ff ffc9 	bl	800b494 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800b502:	4a06      	ldr	r2, [pc, #24]	; (800b51c <tcp_tmr+0x20>)
 800b504:	7e13      	ldrb	r3, [r2, #24]
 800b506:	3301      	adds	r3, #1
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	7613      	strb	r3, [r2, #24]
 800b50c:	07db      	lsls	r3, r3, #31
 800b50e:	d503      	bpl.n	800b518 <tcp_tmr+0x1c>
}
 800b510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800b514:	f7ff bc36 	b.w	800ad84 <tcp_slowtmr>
}
 800b518:	bd08      	pop	{r3, pc}
 800b51a:	bf00      	nop
 800b51c:	2000d058 	.word	0x2000d058

0800b520 <tcp_shutdown>:
{
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b524:	4605      	mov	r5, r0
 800b526:	b948      	cbnz	r0, 800b53c <tcp_shutdown+0x1c>
 800b528:	4b16      	ldr	r3, [pc, #88]	; (800b584 <tcp_shutdown+0x64>)
 800b52a:	f240 2207 	movw	r2, #519	; 0x207
 800b52e:	4916      	ldr	r1, [pc, #88]	; (800b588 <tcp_shutdown+0x68>)
 800b530:	4816      	ldr	r0, [pc, #88]	; (800b58c <tcp_shutdown+0x6c>)
 800b532:	f003 fd4f 	bl	800efd4 <iprintf>
 800b536:	f06f 000f 	mvn.w	r0, #15
}
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800b53c:	7d03      	ldrb	r3, [r0, #20]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d018      	beq.n	800b574 <tcp_shutdown+0x54>
  if (shut_rx) {
 800b542:	b189      	cbz	r1, 800b568 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b544:	8b43      	ldrh	r3, [r0, #26]
 800b546:	f043 0310 	orr.w	r3, r3, #16
 800b54a:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800b54c:	b122      	cbz	r2, 800b558 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800b54e:	2101      	movs	r1, #1
}
 800b550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b554:	f7ff be68 	b.w	800b228 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800b558:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b55a:	b908      	cbnz	r0, 800b560 <tcp_shutdown+0x40>
  return ERR_OK;
 800b55c:	2000      	movs	r0, #0
 800b55e:	e7ec      	b.n	800b53a <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800b560:	f7fe ff26 	bl	800a3b0 <pbuf_free>
      pcb->refused_data = NULL;
 800b564:	676c      	str	r4, [r5, #116]	; 0x74
 800b566:	e7f9      	b.n	800b55c <tcp_shutdown+0x3c>
  if (shut_tx) {
 800b568:	2a00      	cmp	r2, #0
 800b56a:	d0f7      	beq.n	800b55c <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800b56c:	2b04      	cmp	r3, #4
 800b56e:	d804      	bhi.n	800b57a <tcp_shutdown+0x5a>
 800b570:	2b02      	cmp	r3, #2
 800b572:	d804      	bhi.n	800b57e <tcp_shutdown+0x5e>
 800b574:	f06f 000a 	mvn.w	r0, #10
 800b578:	e7df      	b.n	800b53a <tcp_shutdown+0x1a>
 800b57a:	2b07      	cmp	r3, #7
 800b57c:	d1fa      	bne.n	800b574 <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b57e:	2100      	movs	r1, #0
 800b580:	4628      	mov	r0, r5
 800b582:	e7e5      	b.n	800b550 <tcp_shutdown+0x30>
 800b584:	0801c68a 	.word	0x0801c68a
 800b588:	0801cbcf 	.word	0x0801cbcf
 800b58c:	0801a72c 	.word	0x0801a72c

0800b590 <tcp_abandon>:
{
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	460e      	mov	r6, r1
 800b596:	b085      	sub	sp, #20
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b598:	4604      	mov	r4, r0
 800b59a:	b948      	cbnz	r0, 800b5b0 <tcp_abandon+0x20>
 800b59c:	4b35      	ldr	r3, [pc, #212]	; (800b674 <tcp_abandon+0xe4>)
 800b59e:	f240 223d 	movw	r2, #573	; 0x23d
 800b5a2:	4935      	ldr	r1, [pc, #212]	; (800b678 <tcp_abandon+0xe8>)
 800b5a4:	4835      	ldr	r0, [pc, #212]	; (800b67c <tcp_abandon+0xec>)
}
 800b5a6:	b005      	add	sp, #20
 800b5a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b5ac:	f003 bd12 	b.w	800efd4 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b5b0:	7d03      	ldrb	r3, [r0, #20]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d106      	bne.n	800b5c4 <tcp_abandon+0x34>
 800b5b6:	4b2f      	ldr	r3, [pc, #188]	; (800b674 <tcp_abandon+0xe4>)
 800b5b8:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b5bc:	4930      	ldr	r1, [pc, #192]	; (800b680 <tcp_abandon+0xf0>)
 800b5be:	482f      	ldr	r0, [pc, #188]	; (800b67c <tcp_abandon+0xec>)
 800b5c0:	f003 fd08 	bl	800efd4 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800b5c4:	7d23      	ldrb	r3, [r4, #20]
 800b5c6:	2b0a      	cmp	r3, #10
 800b5c8:	d109      	bne.n	800b5de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	482d      	ldr	r0, [pc, #180]	; (800b684 <tcp_abandon+0xf4>)
 800b5ce:	f7ff fdcf 	bl	800b170 <tcp_pcb_remove>
    tcp_free(pcb);
 800b5d2:	4620      	mov	r0, r4
}
 800b5d4:	b005      	add	sp, #20
 800b5d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 800b5da:	f7ff b9d7 	b.w	800a98c <tcp_free>
    seqno = pcb->snd_nxt;
 800b5de:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800b5e2:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800b5e6:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800b5ea:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800b5ee:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800b5f0:	b99b      	cbnz	r3, 800b61a <tcp_abandon+0x8a>
      if (pcb->local_port != 0) {
 800b5f2:	b13d      	cbz	r5, 800b604 <tcp_abandon+0x74>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b5f4:	4a24      	ldr	r2, [pc, #144]	; (800b688 <tcp_abandon+0xf8>)
 800b5f6:	6813      	ldr	r3, [r2, #0]
 800b5f8:	42a3      	cmp	r3, r4
 800b5fa:	d106      	bne.n	800b60a <tcp_abandon+0x7a>
 800b5fc:	68e3      	ldr	r3, [r4, #12]
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	2500      	movs	r5, #0
 800b602:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800b604:	462e      	mov	r6, r5
 800b606:	e012      	b.n	800b62e <tcp_abandon+0x9e>
 800b608:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0f8      	beq.n	800b600 <tcp_abandon+0x70>
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	42a2      	cmp	r2, r4
 800b612:	d1f9      	bne.n	800b608 <tcp_abandon+0x78>
 800b614:	68e2      	ldr	r2, [r4, #12]
 800b616:	60da      	str	r2, [r3, #12]
 800b618:	e7f2      	b.n	800b600 <tcp_abandon+0x70>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b61a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800b688 <tcp_abandon+0xf8>
 800b61e:	4621      	mov	r1, r4
 800b620:	f10b 0008 	add.w	r0, fp, #8
 800b624:	f7ff fda4 	bl	800b170 <tcp_pcb_remove>
 800b628:	2301      	movs	r3, #1
 800b62a:	f88b 3011 	strb.w	r3, [fp, #17]
    if (pcb->unacked != NULL) {
 800b62e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b630:	b108      	cbz	r0, 800b636 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unacked);
 800b632:	f7ff faff 	bl	800ac34 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800b636:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800b638:	b108      	cbz	r0, 800b63e <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 800b63a:	f7ff fafb 	bl	800ac34 <tcp_segs_free>
    if (send_rst) {
 800b63e:	b156      	cbz	r6, 800b656 <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b640:	8b23      	ldrh	r3, [r4, #24]
 800b642:	4652      	mov	r2, sl
 800b644:	4649      	mov	r1, r9
 800b646:	4620      	mov	r0, r4
 800b648:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800b64c:	1d23      	adds	r3, r4, #4
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	4623      	mov	r3, r4
 800b652:	f001 ffdd 	bl	800d610 <tcp_rst>
    tcp_free(pcb);
 800b656:	4620      	mov	r0, r4
 800b658:	f7ff f998 	bl	800a98c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b65c:	b13f      	cbz	r7, 800b66e <tcp_abandon+0xde>
 800b65e:	f06f 010c 	mvn.w	r1, #12
 800b662:	4640      	mov	r0, r8
 800b664:	463b      	mov	r3, r7
}
 800b666:	b005      	add	sp, #20
 800b668:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b66c:	4718      	bx	r3
}
 800b66e:	b005      	add	sp, #20
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	0801c68a 	.word	0x0801c68a
 800b678:	0801cbe9 	.word	0x0801cbe9
 800b67c:	0801a72c 	.word	0x0801a72c
 800b680:	0801cc02 	.word	0x0801cc02
 800b684:	2000d06c 	.word	0x2000d06c
 800b688:	2000d058 	.word	0x2000d058

0800b68c <tcp_abort>:
  tcp_abandon(pcb, 1);
 800b68c:	2101      	movs	r1, #1
 800b68e:	f7ff bf7f 	b.w	800b590 <tcp_abandon>
	...

0800b694 <tcp_accept_null>:
{
 800b694:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b696:	460c      	mov	r4, r1
 800b698:	b931      	cbnz	r1, 800b6a8 <tcp_accept_null+0x14>
 800b69a:	4b06      	ldr	r3, [pc, #24]	; (800b6b4 <tcp_accept_null+0x20>)
 800b69c:	f240 320f 	movw	r2, #783	; 0x30f
 800b6a0:	4905      	ldr	r1, [pc, #20]	; (800b6b8 <tcp_accept_null+0x24>)
 800b6a2:	4806      	ldr	r0, [pc, #24]	; (800b6bc <tcp_accept_null+0x28>)
 800b6a4:	f003 fc96 	bl	800efd4 <iprintf>
  tcp_abort(pcb);
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f7ff ffef 	bl	800b68c <tcp_abort>
}
 800b6ae:	f06f 000c 	mvn.w	r0, #12
 800b6b2:	bd10      	pop	{r4, pc}
 800b6b4:	0801c68a 	.word	0x0801c68a
 800b6b8:	0801cc33 	.word	0x0801cc33
 800b6bc:	0801a72c 	.word	0x0801a72c

0800b6c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	b930      	cbnz	r0, 800b6d6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b6c8:	4b09      	ldr	r3, [pc, #36]	; (800b6f0 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800b6ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b6ce:	4909      	ldr	r1, [pc, #36]	; (800b6f4 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800b6d0:	4809      	ldr	r0, [pc, #36]	; (800b6f8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800b6d2:	f003 fc7f 	bl	800efd4 <iprintf>

  while (pcb != NULL) {
 800b6d6:	b904      	cbnz	r4, 800b6da <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800b6d8:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b6da:	6822      	ldr	r2, [r4, #0]
 800b6dc:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800b6de:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d102      	bne.n	800b6ea <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7ff ffd1 	bl	800b68c <tcp_abort>
{
 800b6ea:	4634      	mov	r4, r6
 800b6ec:	e7f3      	b.n	800b6d6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b6ee:	bf00      	nop
 800b6f0:	0801c68a 	.word	0x0801c68a
 800b6f4:	0801cc50 	.word	0x0801cc50
 800b6f8:	0801a72c 	.word	0x0801a72c

0800b6fc <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6fc:	4b0c      	ldr	r3, [pc, #48]	; (800b730 <tcp_kill_state+0x34>)
  inactivity = 0;
 800b6fe:	2200      	movs	r2, #0
{
 800b700:	b430      	push	{r4, r5}
 800b702:	4604      	mov	r4, r0
  inactive = NULL;
 800b704:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b706:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b70a:	b919      	cbnz	r1, 800b714 <tcp_kill_state+0x18>
  if (inactive != NULL) {
 800b70c:	b168      	cbz	r0, 800b72a <tcp_kill_state+0x2e>
}
 800b70e:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800b710:	f7ff bf3e 	b.w	800b590 <tcp_abandon>
    if (pcb->state == state) {
 800b714:	7d0b      	ldrb	r3, [r1, #20]
 800b716:	42a3      	cmp	r3, r4
 800b718:	d105      	bne.n	800b726 <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b71a:	6a0b      	ldr	r3, [r1, #32]
 800b71c:	1aeb      	subs	r3, r5, r3
 800b71e:	4293      	cmp	r3, r2
 800b720:	bf24      	itt	cs
 800b722:	461a      	movcs	r2, r3
 800b724:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b726:	68c9      	ldr	r1, [r1, #12]
 800b728:	e7ef      	b.n	800b70a <tcp_kill_state+0xe>
}
 800b72a:	bc30      	pop	{r4, r5}
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	2000d058 	.word	0x2000d058

0800b734 <tcp_alloc>:
{
 800b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b736:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b738:	2001      	movs	r0, #1
 800b73a:	f7fe fc03 	bl	8009f44 <memp_malloc>
  if (pcb == NULL) {
 800b73e:	4c3f      	ldr	r4, [pc, #252]	; (800b83c <tcp_alloc+0x108>)
 800b740:	4603      	mov	r3, r0
 800b742:	bb98      	cbnz	r0, 800b7ac <tcp_alloc+0x78>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b744:	68a0      	ldr	r0, [r4, #8]
  while (pcb != NULL) {
 800b746:	2800      	cmp	r0, #0
 800b748:	d153      	bne.n	800b7f2 <tcp_alloc+0xbe>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b74a:	6963      	ldr	r3, [r4, #20]
  inactivity = 0;
 800b74c:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b74e:	68e6      	ldr	r6, [r4, #12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b750:	2b00      	cmp	r3, #0
 800b752:	d159      	bne.n	800b808 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 800b754:	b108      	cbz	r0, 800b75a <tcp_alloc+0x26>
    tcp_abort(inactive);
 800b756:	f7ff ff99 	bl	800b68c <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b75a:	2001      	movs	r0, #1
 800b75c:	f7fe fbf2 	bl	8009f44 <memp_malloc>
    if (pcb == NULL) {
 800b760:	4603      	mov	r3, r0
 800b762:	bb18      	cbnz	r0, 800b7ac <tcp_alloc+0x78>
      tcp_kill_state(LAST_ACK);
 800b764:	2009      	movs	r0, #9
 800b766:	f7ff ffc9 	bl	800b6fc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b76a:	2001      	movs	r0, #1
 800b76c:	f7fe fbea 	bl	8009f44 <memp_malloc>
      if (pcb == NULL) {
 800b770:	4603      	mov	r3, r0
 800b772:	b9d8      	cbnz	r0, 800b7ac <tcp_alloc+0x78>
        tcp_kill_state(CLOSING);
 800b774:	2008      	movs	r0, #8
 800b776:	f7ff ffc1 	bl	800b6fc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b77a:	2001      	movs	r0, #1
 800b77c:	f7fe fbe2 	bl	8009f44 <memp_malloc>
        if (pcb == NULL) {
 800b780:	4603      	mov	r3, r0
 800b782:	b998      	cbnz	r0, 800b7ac <tcp_alloc+0x78>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b784:	062a      	lsls	r2, r5, #24
 800b786:	d447      	bmi.n	800b818 <tcp_alloc+0xe4>
  if (mprio == 0) {
 800b788:	b15d      	cbz	r5, 800b7a2 <tcp_alloc+0x6e>
 800b78a:	4629      	mov	r1, r5
  mprio--;
 800b78c:	3901      	subs	r1, #1
  inactivity = 0;
 800b78e:	2000      	movs	r0, #0
  mprio--;
 800b790:	b2c9      	uxtb	r1, r1
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b792:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b796:	2a00      	cmp	r2, #0
 800b798:	d140      	bne.n	800b81c <tcp_alloc+0xe8>
  if (inactive != NULL) {
 800b79a:	b113      	cbz	r3, 800b7a2 <tcp_alloc+0x6e>
    tcp_abort(inactive);
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7ff ff75 	bl	800b68c <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	f7fe fbce 	bl	8009f44 <memp_malloc>
  if (pcb != NULL) {
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	b300      	cbz	r0, 800b7ee <tcp_alloc+0xba>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b7ac:	2298      	movs	r2, #152	; 0x98
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	f002 ff9d 	bl	800e6f0 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800b7b6:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b7ba:	4603      	mov	r3, r0
    pcb->prio = prio;
 800b7bc:	7545      	strb	r5, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b7be:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b7c2:	4a1f      	ldr	r2, [pc, #124]	; (800b840 <tcp_alloc+0x10c>)
 800b7c4:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b7c6:	22ff      	movs	r2, #255	; 0xff
 800b7c8:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b7ca:	2206      	movs	r2, #6
 800b7cc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b7d0:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800b7d2:	4a1c      	ldr	r2, [pc, #112]	; (800b844 <tcp_alloc+0x110>)
 800b7d4:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800b7d6:	68e2      	ldr	r2, [r4, #12]
 800b7d8:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b7da:	7c22      	ldrb	r2, [r4, #16]
 800b7dc:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800b7de:	4a1a      	ldr	r2, [pc, #104]	; (800b848 <tcp_alloc+0x114>)
 800b7e0:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800b7e2:	4a1a      	ldr	r2, [pc, #104]	; (800b84c <tcp_alloc+0x118>)
 800b7e4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b7e8:	4a19      	ldr	r2, [pc, #100]	; (800b850 <tcp_alloc+0x11c>)
 800b7ea:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800b7f2:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800b7f4:	68c6      	ldr	r6, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800b7f6:	0719      	lsls	r1, r3, #28
 800b7f8:	d504      	bpl.n	800b804 <tcp_alloc+0xd0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b7fa:	f023 0308 	bic.w	r3, r3, #8
 800b7fe:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800b800:	f7ff f888 	bl	800a914 <tcp_close_shutdown_fin>
{
 800b804:	4630      	mov	r0, r6
 800b806:	e79e      	b.n	800b746 <tcp_alloc+0x12>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b808:	6a1a      	ldr	r2, [r3, #32]
 800b80a:	1ab2      	subs	r2, r6, r2
 800b80c:	428a      	cmp	r2, r1
 800b80e:	bf24      	itt	cs
 800b810:	4618      	movcs	r0, r3
 800b812:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	e79b      	b.n	800b750 <tcp_alloc+0x1c>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b818:	217f      	movs	r1, #127	; 0x7f
 800b81a:	e7b7      	b.n	800b78c <tcp_alloc+0x58>
    if ((pcb->prio < mprio) ||
 800b81c:	f892 c015 	ldrb.w	ip, [r2, #21]
 800b820:	458c      	cmp	ip, r1
 800b822:	d304      	bcc.n	800b82e <tcp_alloc+0xfa>
 800b824:	d107      	bne.n	800b836 <tcp_alloc+0x102>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b826:	6a16      	ldr	r6, [r2, #32]
 800b828:	1bbe      	subs	r6, r7, r6
 800b82a:	4286      	cmp	r6, r0
 800b82c:	d303      	bcc.n	800b836 <tcp_alloc+0x102>
      inactivity = tcp_ticks - pcb->tmr;
 800b82e:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800b830:	4661      	mov	r1, ip
      inactivity = tcp_ticks - pcb->tmr;
 800b832:	4613      	mov	r3, r2
 800b834:	1a38      	subs	r0, r7, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b836:	68d2      	ldr	r2, [r2, #12]
 800b838:	e7ad      	b.n	800b796 <tcp_alloc+0x62>
 800b83a:	bf00      	nop
 800b83c:	2000d058 	.word	0x2000d058
 800b840:	0b680b68 	.word	0x0b680b68
 800b844:	0218ffff 	.word	0x0218ffff
 800b848:	16d00001 	.word	0x16d00001
 800b84c:	0800b3c1 	.word	0x0800b3c1
 800b850:	006ddd00 	.word	0x006ddd00

0800b854 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b854:	2040      	movs	r0, #64	; 0x40
 800b856:	f7ff bf6d 	b.w	800b734 <tcp_alloc>
	...

0800b85c <tcp_next_iss>:
{
 800b85c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b85e:	b930      	cbnz	r0, 800b86e <tcp_next_iss+0x12>
 800b860:	4b06      	ldr	r3, [pc, #24]	; (800b87c <tcp_next_iss+0x20>)
 800b862:	f640 02af 	movw	r2, #2223	; 0x8af
 800b866:	4906      	ldr	r1, [pc, #24]	; (800b880 <tcp_next_iss+0x24>)
 800b868:	4806      	ldr	r0, [pc, #24]	; (800b884 <tcp_next_iss+0x28>)
 800b86a:	f003 fbb3 	bl	800efd4 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800b86e:	4b06      	ldr	r3, [pc, #24]	; (800b888 <tcp_next_iss+0x2c>)
 800b870:	4a06      	ldr	r2, [pc, #24]	; (800b88c <tcp_next_iss+0x30>)
 800b872:	6858      	ldr	r0, [r3, #4]
 800b874:	68d2      	ldr	r2, [r2, #12]
 800b876:	4410      	add	r0, r2
 800b878:	6058      	str	r0, [r3, #4]
}
 800b87a:	bd08      	pop	{r3, pc}
 800b87c:	0801c68a 	.word	0x0801c68a
 800b880:	0801cc84 	.word	0x0801cc84
 800b884:	0801a72c 	.word	0x0801a72c
 800b888:	20000020 	.word	0x20000020
 800b88c:	2000d058 	.word	0x2000d058

0800b890 <tcp_eff_send_mss_netif>:
{
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4604      	mov	r4, r0
 800b894:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b896:	b932      	cbnz	r2, 800b8a6 <tcp_eff_send_mss_netif+0x16>
 800b898:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <tcp_eff_send_mss_netif+0x30>)
 800b89a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b89e:	4909      	ldr	r1, [pc, #36]	; (800b8c4 <tcp_eff_send_mss_netif+0x34>)
 800b8a0:	4809      	ldr	r0, [pc, #36]	; (800b8c8 <tcp_eff_send_mss_netif+0x38>)
 800b8a2:	f003 fb97 	bl	800efd4 <iprintf>
    if (outif == NULL) {
 800b8a6:	b14d      	cbz	r5, 800b8bc <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800b8a8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800b8aa:	b13b      	cbz	r3, 800b8bc <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b8ac:	2b28      	cmp	r3, #40	; 0x28
 800b8ae:	bf8a      	itet	hi
 800b8b0:	3b28      	subhi	r3, #40	; 0x28
 800b8b2:	2300      	movls	r3, #0
 800b8b4:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b8b6:	429c      	cmp	r4, r3
 800b8b8:	bf28      	it	cs
 800b8ba:	461c      	movcs	r4, r3
}
 800b8bc:	4620      	mov	r0, r4
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	0801c68a 	.word	0x0801c68a
 800b8c4:	0801cc9e 	.word	0x0801cc9e
 800b8c8:	0801a72c 	.word	0x0801a72c

0800b8cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	b170      	cbz	r0, 800b8f2 <tcp_netif_ip_addr_changed+0x26>
 800b8d4:	6803      	ldr	r3, [r0, #0]
 800b8d6:	b163      	cbz	r3, 800b8f2 <tcp_netif_ip_addr_changed+0x26>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b8d8:	4e0a      	ldr	r6, [pc, #40]	; (800b904 <tcp_netif_ip_addr_changed+0x38>)
 800b8da:	68b1      	ldr	r1, [r6, #8]
 800b8dc:	f7ff fef0 	bl	800b6c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b8e0:	6831      	ldr	r1, [r6, #0]
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7ff feec 	bl	800b6c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b8e8:	b11d      	cbz	r5, 800b8f2 <tcp_netif_ip_addr_changed+0x26>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	b10b      	cbz	r3, 800b8f2 <tcp_netif_ip_addr_changed+0x26>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8ee:	6873      	ldr	r3, [r6, #4]
 800b8f0:	b903      	cbnz	r3, 800b8f4 <tcp_netif_ip_addr_changed+0x28>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b8f4:	6819      	ldr	r1, [r3, #0]
 800b8f6:	6822      	ldr	r2, [r4, #0]
 800b8f8:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b8fa:	bf04      	itt	eq
 800b8fc:	682a      	ldreq	r2, [r5, #0]
 800b8fe:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	e7f5      	b.n	800b8f0 <tcp_netif_ip_addr_changed+0x24>
 800b904:	2000d058 	.word	0x2000d058

0800b908 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800b908:	4a08      	ldr	r2, [pc, #32]	; (800b92c <tcp_get_next_optbyte+0x24>)
 800b90a:	8813      	ldrh	r3, [r2, #0]
 800b90c:	1c59      	adds	r1, r3, #1
 800b90e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b910:	6851      	ldr	r1, [r2, #4]
 800b912:	b111      	cbz	r1, 800b91a <tcp_get_next_optbyte+0x12>
 800b914:	8910      	ldrh	r0, [r2, #8]
 800b916:	4283      	cmp	r3, r0
 800b918:	d203      	bcs.n	800b922 <tcp_get_next_optbyte+0x1a>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800b91a:	68d2      	ldr	r2, [r2, #12]
 800b91c:	4413      	add	r3, r2
 800b91e:	7d18      	ldrb	r0, [r3, #20]
 800b920:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b922:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800b924:	b2db      	uxtb	r3, r3
 800b926:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	2000d074 	.word	0x2000d074

0800b930 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b934:	4606      	mov	r6, r0
 800b936:	b930      	cbnz	r0, 800b946 <tcp_parseopt+0x16>
 800b938:	4b1e      	ldr	r3, [pc, #120]	; (800b9b4 <tcp_parseopt+0x84>)
 800b93a:	f240 727d 	movw	r2, #1917	; 0x77d
 800b93e:	491e      	ldr	r1, [pc, #120]	; (800b9b8 <tcp_parseopt+0x88>)
 800b940:	481e      	ldr	r0, [pc, #120]	; (800b9bc <tcp_parseopt+0x8c>)
 800b942:	f003 fb47 	bl	800efd4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b946:	4d1e      	ldr	r5, [pc, #120]	; (800b9c0 <tcp_parseopt+0x90>)
 800b948:	8a2f      	ldrh	r7, [r5, #16]
 800b94a:	b17f      	cbz	r7, 800b96c <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b94c:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b94e:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800b952:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b956:	802b      	strh	r3, [r5, #0]
 800b958:	882b      	ldrh	r3, [r5, #0]
 800b95a:	42bb      	cmp	r3, r7
 800b95c:	d206      	bcs.n	800b96c <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800b95e:	f7ff ffd3 	bl	800b908 <tcp_get_next_optbyte>
      switch (opt) {
 800b962:	2801      	cmp	r0, #1
 800b964:	d0f8      	beq.n	800b958 <tcp_parseopt+0x28>
 800b966:	2802      	cmp	r0, #2
 800b968:	d002      	beq.n	800b970 <tcp_parseopt+0x40>
 800b96a:	b9c8      	cbnz	r0, 800b9a0 <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800b96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b970:	f7ff ffca 	bl	800b908 <tcp_get_next_optbyte>
 800b974:	2804      	cmp	r0, #4
 800b976:	d1f9      	bne.n	800b96c <tcp_parseopt+0x3c>
 800b978:	882b      	ldrh	r3, [r5, #0]
 800b97a:	3301      	adds	r3, #1
 800b97c:	42bb      	cmp	r3, r7
 800b97e:	daf5      	bge.n	800b96c <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b980:	f7ff ffc2 	bl	800b908 <tcp_get_next_optbyte>
 800b984:	0200      	lsls	r0, r0, #8
 800b986:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800b988:	f7ff ffbe 	bl	800b908 <tcp_get_next_optbyte>
 800b98c:	ea44 0300 	orr.w	r3, r4, r0
 800b990:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b992:	1e5a      	subs	r2, r3, #1
 800b994:	b292      	uxth	r2, r2
 800b996:	4542      	cmp	r2, r8
 800b998:	bf88      	it	hi
 800b99a:	464b      	movhi	r3, r9
 800b99c:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800b99e:	e7db      	b.n	800b958 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800b9a0:	f7ff ffb2 	bl	800b908 <tcp_get_next_optbyte>
          if (data < 2) {
 800b9a4:	2801      	cmp	r0, #1
 800b9a6:	d9e1      	bls.n	800b96c <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800b9a8:	882b      	ldrh	r3, [r5, #0]
 800b9aa:	3b02      	subs	r3, #2
 800b9ac:	4418      	add	r0, r3
 800b9ae:	8028      	strh	r0, [r5, #0]
 800b9b0:	e7d2      	b.n	800b958 <tcp_parseopt+0x28>
 800b9b2:	bf00      	nop
 800b9b4:	0801cd84 	.word	0x0801cd84
 800b9b8:	0801cde5 	.word	0x0801cde5
 800b9bc:	0801a72c 	.word	0x0801a72c
 800b9c0:	2000d074 	.word	0x2000d074

0800b9c4 <tcp_input_delayed_close>:
{
 800b9c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	b930      	cbnz	r0, 800b9d8 <tcp_input_delayed_close+0x14>
 800b9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ba08 <tcp_input_delayed_close+0x44>)
 800b9cc:	f240 225a 	movw	r2, #602	; 0x25a
 800b9d0:	490e      	ldr	r1, [pc, #56]	; (800ba0c <tcp_input_delayed_close+0x48>)
 800b9d2:	480f      	ldr	r0, [pc, #60]	; (800ba10 <tcp_input_delayed_close+0x4c>)
 800b9d4:	f003 fafe 	bl	800efd4 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ba14 <tcp_input_delayed_close+0x50>)
 800b9da:	7c98      	ldrb	r0, [r3, #18]
 800b9dc:	f010 0010 	ands.w	r0, r0, #16
 800b9e0:	d011      	beq.n	800ba06 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b9e2:	8b63      	ldrh	r3, [r4, #26]
 800b9e4:	06db      	lsls	r3, r3, #27
 800b9e6:	d406      	bmi.n	800b9f6 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b9e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b9ec:	b11b      	cbz	r3, 800b9f6 <tcp_input_delayed_close+0x32>
 800b9ee:	f06f 010e 	mvn.w	r1, #14
 800b9f2:	6920      	ldr	r0, [r4, #16]
 800b9f4:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4807      	ldr	r0, [pc, #28]	; (800ba18 <tcp_input_delayed_close+0x54>)
 800b9fa:	f7ff fbb9 	bl	800b170 <tcp_pcb_remove>
    tcp_free(pcb);
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f7fe ffc4 	bl	800a98c <tcp_free>
 800ba04:	2001      	movs	r0, #1
}
 800ba06:	bd10      	pop	{r4, pc}
 800ba08:	0801cd84 	.word	0x0801cd84
 800ba0c:	0801cdff 	.word	0x0801cdff
 800ba10:	0801a72c 	.word	0x0801a72c
 800ba14:	2000d074 	.word	0x2000d074
 800ba18:	2000d060 	.word	0x2000d060

0800ba1c <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800ba1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba20:	4606      	mov	r6, r0
 800ba22:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800ba24:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba26:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800bad8 <tcp_free_acked_segments.constprop.0+0xbc>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ba2a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800bad0 <tcp_free_acked_segments.constprop.0+0xb4>
  while (seg_list != NULL &&
 800ba2e:	2c00      	cmp	r4, #0
 800ba30:	d03b      	beq.n	800baaa <tcp_free_acked_segments.constprop.0+0x8e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba32:	68e3      	ldr	r3, [r4, #12]
 800ba34:	6858      	ldr	r0, [r3, #4]
 800ba36:	f7fd ff68 	bl	800990a <lwip_htonl>
 800ba3a:	68e3      	ldr	r3, [r4, #12]
 800ba3c:	4682      	mov	sl, r0
 800ba3e:	8925      	ldrh	r5, [r4, #8]
 800ba40:	8998      	ldrh	r0, [r3, #12]
 800ba42:	f7fd ff5f 	bl	8009904 <lwip_htons>
 800ba46:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ba4a:	f010 0003 	ands.w	r0, r0, #3
 800ba4e:	eba5 0303 	sub.w	r3, r5, r3
 800ba52:	bf18      	it	ne
 800ba54:	2001      	movne	r0, #1
 800ba56:	eb03 050a 	add.w	r5, r3, sl
 800ba5a:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800ba5c:	2d00      	cmp	r5, #0
 800ba5e:	dc25      	bgt.n	800baac <tcp_free_acked_segments.constprop.0+0x90>
    clen = pbuf_clen(next->p);
 800ba60:	e9d4 a000 	ldrd	sl, r0, [r4]
 800ba64:	f7fe fde0 	bl	800a628 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ba68:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800ba6c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ba6e:	4283      	cmp	r3, r0
 800ba70:	d206      	bcs.n	800ba80 <tcp_free_acked_segments.constprop.0+0x64>
 800ba72:	464b      	mov	r3, r9
 800ba74:	f240 4257 	movw	r2, #1111	; 0x457
 800ba78:	4913      	ldr	r1, [pc, #76]	; (800bac8 <tcp_free_acked_segments.constprop.0+0xac>)
 800ba7a:	4814      	ldr	r0, [pc, #80]	; (800bacc <tcp_free_acked_segments.constprop.0+0xb0>)
 800ba7c:	f003 faaa 	bl	800efd4 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ba80:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ba84:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800ba88:	8923      	ldrh	r3, [r4, #8]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ba8a:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800ba8c:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ba8e:	4413      	add	r3, r2
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ba90:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ba94:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800ba98:	f7ff f8be 	bl	800ac18 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800ba9c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800baa0:	b17b      	cbz	r3, 800bac2 <tcp_free_acked_segments.constprop.0+0xa6>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	d10c      	bne.n	800bac2 <tcp_free_acked_segments.constprop.0+0xa6>
 800baa8:	b11f      	cbz	r7, 800bab2 <tcp_free_acked_segments.constprop.0+0x96>
    seg_list = seg_list->next;
 800baaa:	2400      	movs	r4, #0
}
 800baac:	4620      	mov	r0, r4
 800baae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bab2:	4b07      	ldr	r3, [pc, #28]	; (800bad0 <tcp_free_acked_segments.constprop.0+0xb4>)
 800bab4:	f240 4261 	movw	r2, #1121	; 0x461
 800bab8:	4906      	ldr	r1, [pc, #24]	; (800bad4 <tcp_free_acked_segments.constprop.0+0xb8>)
 800baba:	4804      	ldr	r0, [pc, #16]	; (800bacc <tcp_free_acked_segments.constprop.0+0xb0>)
 800babc:	f003 fa8a 	bl	800efd4 <iprintf>
  while (seg_list != NULL &&
 800bac0:	e7f3      	b.n	800baaa <tcp_free_acked_segments.constprop.0+0x8e>
    seg_list = seg_list->next;
 800bac2:	4654      	mov	r4, sl
 800bac4:	e7b3      	b.n	800ba2e <tcp_free_acked_segments.constprop.0+0x12>
 800bac6:	bf00      	nop
 800bac8:	0801ce24 	.word	0x0801ce24
 800bacc:	0801a72c 	.word	0x0801a72c
 800bad0:	0801cd84 	.word	0x0801cd84
 800bad4:	0801ce4c 	.word	0x0801ce4c
 800bad8:	2000d074 	.word	0x2000d074

0800badc <tcp_receive>:
{
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bade:	4604      	mov	r4, r0
 800bae0:	b930      	cbnz	r0, 800baf0 <tcp_receive+0x14>
 800bae2:	4b35      	ldr	r3, [pc, #212]	; (800bbb8 <tcp_receive+0xdc>)
 800bae4:	f240 427b 	movw	r2, #1147	; 0x47b
 800bae8:	4934      	ldr	r1, [pc, #208]	; (800bbbc <tcp_receive+0xe0>)
 800baea:	4835      	ldr	r0, [pc, #212]	; (800bbc0 <tcp_receive+0xe4>)
 800baec:	f003 fa72 	bl	800efd4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800baf0:	7d23      	ldrb	r3, [r4, #20]
 800baf2:	2b03      	cmp	r3, #3
 800baf4:	d806      	bhi.n	800bb04 <tcp_receive+0x28>
 800baf6:	4b30      	ldr	r3, [pc, #192]	; (800bbb8 <tcp_receive+0xdc>)
 800baf8:	f240 427c 	movw	r2, #1148	; 0x47c
 800bafc:	4931      	ldr	r1, [pc, #196]	; (800bbc4 <tcp_receive+0xe8>)
 800bafe:	4830      	ldr	r0, [pc, #192]	; (800bbc0 <tcp_receive+0xe4>)
 800bb00:	f003 fa68 	bl	800efd4 <iprintf>
  if (flags & TCP_ACK) {
 800bb04:	4d30      	ldr	r5, [pc, #192]	; (800bbc8 <tcp_receive+0xec>)
 800bb06:	7f2b      	ldrb	r3, [r5, #28]
 800bb08:	06de      	lsls	r6, r3, #27
 800bb0a:	f140 8088 	bpl.w	800bc1e <tcp_receive+0x142>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bb0e:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bb10:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb14:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bb16:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800bb1a:	1af7      	subs	r7, r6, r3
 800bb1c:	2f00      	cmp	r7, #0
 800bb1e:	db0a      	blt.n	800bb36 <tcp_receive+0x5a>
 800bb20:	429e      	cmp	r6, r3
 800bb22:	d102      	bne.n	800bb2a <tcp_receive+0x4e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb24:	1a86      	subs	r6, r0, r2
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	db05      	blt.n	800bb36 <tcp_receive+0x5a>
 800bb2a:	4290      	cmp	r0, r2
 800bb2c:	d110      	bne.n	800bb50 <tcp_receive+0x74>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb2e:	68ee      	ldr	r6, [r5, #12]
 800bb30:	89f6      	ldrh	r6, [r6, #14]
 800bb32:	428e      	cmp	r6, r1
 800bb34:	d90c      	bls.n	800bb50 <tcp_receive+0x74>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb36:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bb38:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb3c:	89f6      	ldrh	r6, [r6, #14]
 800bb3e:	b2b7      	uxth	r7, r6
 800bb40:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bb44:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800bb46:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb4a:	bf38      	it	cc
 800bb4c:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bb50:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800bb52:	1b93      	subs	r3, r2, r6
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f300 813a 	bgt.w	800bdce <tcp_receive+0x2f2>
      if (tcplen == 0) {
 800bb5a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f040 8132 	bne.w	800bdc6 <tcp_receive+0x2ea>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb62:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bb66:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb68:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800bb6a:	443b      	add	r3, r7
 800bb6c:	428b      	cmp	r3, r1
 800bb6e:	f040 812a 	bne.w	800bdc6 <tcp_receive+0x2ea>
          if (pcb->rtime >= 0) {
 800bb72:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f2c0 8125 	blt.w	800bdc6 <tcp_receive+0x2ea>
            if (pcb->lastack == ackno) {
 800bb7c:	4296      	cmp	r6, r2
 800bb7e:	f040 8122 	bne.w	800bdc6 <tcp_receive+0x2ea>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bb82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bb86:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800bb88:	bf1c      	itt	ne
 800bb8a:	3301      	addne	r3, #1
 800bb8c:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800bb90:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d919      	bls.n	800bbcc <tcp_receive+0xf0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb98:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800bb9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bba0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bba2:	4413      	add	r3, r2
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	429a      	cmp	r2, r3
 800bba8:	bf88      	it	hi
 800bbaa:	460b      	movhi	r3, r1
 800bbac:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f001 fcf9 	bl	800d5a8 <tcp_rexmit_fast>
      if (!found_dupack) {
 800bbb6:	e00a      	b.n	800bbce <tcp_receive+0xf2>
 800bbb8:	0801cd84 	.word	0x0801cd84
 800bbbc:	0801ce6c 	.word	0x0801ce6c
 800bbc0:	0801a72c 	.word	0x0801a72c
 800bbc4:	0801ce85 	.word	0x0801ce85
 800bbc8:	2000d074 	.word	0x2000d074
              if (pcb->dupacks >= 3) {
 800bbcc:	d0f0      	beq.n	800bbb0 <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bbce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbd0:	b329      	cbz	r1, 800bc1e <tcp_receive+0x142>
 800bbd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bbd4:	69aa      	ldr	r2, [r5, #24]
 800bbd6:	1a9b      	subs	r3, r3, r2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	da20      	bge.n	800bc1e <tcp_receive+0x142>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bbdc:	4b9b      	ldr	r3, [pc, #620]	; (800be4c <tcp_receive+0x370>)
 800bbde:	b289      	uxth	r1, r1
 800bbe0:	881f      	ldrh	r7, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800bbe2:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bbe6:	1a7a      	subs	r2, r7, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800bbe8:	f3c3 00cf 	ubfx	r0, r3, #3, #16
 800bbec:	1a12      	subs	r2, r2, r0
 800bbee:	b216      	sxth	r6, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800bbf0:	fa13 f282 	uxtah	r2, r3, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800bbf4:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      if (m < 0) {
 800bbf8:	2e00      	cmp	r6, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800bbfa:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
 800bbfc:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
        m = (s16_t) - m;
 800bc00:	bfb8      	it	lt
 800bc02:	1bc9      	sublt	r1, r1, r7
      pcb->sa = (s16_t)(pcb->sa + m);
 800bc04:	87a2      	strh	r2, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800bc06:	bfbc      	itt	lt
 800bc08:	1809      	addlt	r1, r1, r0
 800bc0a:	b20e      	sxthlt	r6, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800bc0c:	4433      	add	r3, r6
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc12:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800bc16:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bc1e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bc20:	6a2b      	ldr	r3, [r5, #32]
 800bc22:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bc24:	2800      	cmp	r0, #0
 800bc26:	f000 8184 	beq.w	800bf32 <tcp_receive+0x456>
 800bc2a:	7d21      	ldrb	r1, [r4, #20]
 800bc2c:	2906      	cmp	r1, #6
 800bc2e:	f200 8180 	bhi.w	800bf32 <tcp_receive+0x456>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bc32:	1ad7      	subs	r7, r2, r3
 800bc34:	2f01      	cmp	r7, #1
 800bc36:	f100 816b 	bmi.w	800bf10 <tcp_receive+0x434>
 800bc3a:	f1c3 0101 	rsb	r1, r3, #1
 800bc3e:	1a09      	subs	r1, r1, r0
 800bc40:	4411      	add	r1, r2
 800bc42:	2900      	cmp	r1, #0
 800bc44:	f300 8164 	bgt.w	800bf10 <tcp_receive+0x434>
      struct pbuf *p = inseg.p;
 800bc48:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bc4a:	b936      	cbnz	r6, 800bc5a <tcp_receive+0x17e>
 800bc4c:	4b80      	ldr	r3, [pc, #512]	; (800be50 <tcp_receive+0x374>)
 800bc4e:	f240 5294 	movw	r2, #1428	; 0x594
 800bc52:	4980      	ldr	r1, [pc, #512]	; (800be54 <tcp_receive+0x378>)
 800bc54:	4880      	ldr	r0, [pc, #512]	; (800be58 <tcp_receive+0x37c>)
 800bc56:	f003 f9bd 	bl	800efd4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bc5a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800bc5e:	429f      	cmp	r7, r3
 800bc60:	d906      	bls.n	800bc70 <tcp_receive+0x194>
 800bc62:	4b7b      	ldr	r3, [pc, #492]	; (800be50 <tcp_receive+0x374>)
 800bc64:	f240 5295 	movw	r2, #1429	; 0x595
 800bc68:	497c      	ldr	r1, [pc, #496]	; (800be5c <tcp_receive+0x380>)
 800bc6a:	487b      	ldr	r0, [pc, #492]	; (800be58 <tcp_receive+0x37c>)
 800bc6c:	f003 f9b2 	bl	800efd4 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bc70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800bc72:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bc74:	891b      	ldrh	r3, [r3, #8]
 800bc76:	42bb      	cmp	r3, r7
 800bc78:	d206      	bcs.n	800bc88 <tcp_receive+0x1ac>
 800bc7a:	4b75      	ldr	r3, [pc, #468]	; (800be50 <tcp_receive+0x374>)
 800bc7c:	f240 5297 	movw	r2, #1431	; 0x597
 800bc80:	4977      	ldr	r1, [pc, #476]	; (800be60 <tcp_receive+0x384>)
 800bc82:	4875      	ldr	r0, [pc, #468]	; (800be58 <tcp_receive+0x37c>)
 800bc84:	f003 f9a6 	bl	800efd4 <iprintf>
      inseg.len -= off;
 800bc88:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800bc8a:	2100      	movs	r1, #0
      inseg.len -= off;
 800bc8c:	1bdb      	subs	r3, r3, r7
 800bc8e:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bc90:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bc92:	891b      	ldrh	r3, [r3, #8]
 800bc94:	1bdb      	subs	r3, r3, r7
 800bc96:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800bc98:	8972      	ldrh	r2, [r6, #10]
 800bc9a:	42ba      	cmp	r2, r7
 800bc9c:	f0c0 8132 	bcc.w	800bf04 <tcp_receive+0x428>
      pbuf_remove_header(p, off);
 800bca0:	4639      	mov	r1, r7
 800bca2:	4630      	mov	r0, r6
 800bca4:	f7fe fb50 	bl	800a348 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcaa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800bcac:	622b      	str	r3, [r5, #32]
 800bcae:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bcb0:	6a29      	ldr	r1, [r5, #32]
 800bcb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bcb4:	1a8b      	subs	r3, r1, r2
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f2c0 8136 	blt.w	800bf28 <tcp_receive+0x44c>
 800bcbc:	1c4b      	adds	r3, r1, #1
 800bcbe:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800bcc0:	1a9b      	subs	r3, r3, r2
 800bcc2:	1a1b      	subs	r3, r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f300 812f 	bgt.w	800bf28 <tcp_receive+0x44c>
      if (pcb->rcv_nxt == seqno) {
 800bcca:	4291      	cmp	r1, r2
 800bccc:	f040 812c 	bne.w	800bf28 <tcp_receive+0x44c>
        tcplen = TCP_TCPLEN(&inseg);
 800bcd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bcd2:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800bcd4:	8998      	ldrh	r0, [r3, #12]
 800bcd6:	f7fd fe15 	bl	8009904 <lwip_htons>
 800bcda:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800bcde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800bce0:	bf18      	it	ne
 800bce2:	2001      	movne	r0, #1
 800bce4:	4430      	add	r0, r6
 800bce6:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800bce8:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800bcea:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800bcec:	d23d      	bcs.n	800bd6a <tcp_receive+0x28e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bcee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bcf0:	8998      	ldrh	r0, [r3, #12]
 800bcf2:	f7fd fe07 	bl	8009904 <lwip_htons>
 800bcf6:	07c6      	lsls	r6, r0, #31
 800bcf8:	d50d      	bpl.n	800bd16 <tcp_receive+0x23a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bcfa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bcfc:	899e      	ldrh	r6, [r3, #12]
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800bd04:	f7fd fdfe 	bl	8009904 <lwip_htons>
 800bd08:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800bd0c:	f7fd fdfa 	bl	8009904 <lwip_htons>
 800bd10:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bd12:	4306      	orrs	r6, r0
 800bd14:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bd16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bd18:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bd1c:	8998      	ldrh	r0, [r3, #12]
 800bd1e:	f7fd fdf1 	bl	8009904 <lwip_htons>
 800bd22:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800bd24:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800bd26:	bf42      	ittt	mi
 800bd28:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800bd2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800bd2e:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800bd30:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800bd32:	f7fe fc21 	bl	800a578 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bd36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bd38:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800bd3a:	8998      	ldrh	r0, [r3, #12]
 800bd3c:	f7fd fde2 	bl	8009904 <lwip_htons>
 800bd40:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bd44:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800bd46:	bf18      	it	ne
 800bd48:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bd4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800bd4c:	4430      	add	r0, r6
 800bd4e:	b280      	uxth	r0, r0
 800bd50:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bd52:	4418      	add	r0, r3
 800bd54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bd56:	4413      	add	r3, r2
 800bd58:	4298      	cmp	r0, r3
 800bd5a:	d006      	beq.n	800bd6a <tcp_receive+0x28e>
 800bd5c:	4b3c      	ldr	r3, [pc, #240]	; (800be50 <tcp_receive+0x374>)
 800bd5e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bd62:	4940      	ldr	r1, [pc, #256]	; (800be64 <tcp_receive+0x388>)
 800bd64:	483c      	ldr	r0, [pc, #240]	; (800be58 <tcp_receive+0x37c>)
 800bd66:	f003 f935 	bl	800efd4 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800bd6a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800bd6c:	6a2b      	ldr	r3, [r5, #32]
 800bd6e:	4413      	add	r3, r2
 800bd70:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bd72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d206      	bcs.n	800bd86 <tcp_receive+0x2aa>
 800bd78:	4b35      	ldr	r3, [pc, #212]	; (800be50 <tcp_receive+0x374>)
 800bd7a:	f240 6207 	movw	r2, #1543	; 0x607
 800bd7e:	493a      	ldr	r1, [pc, #232]	; (800be68 <tcp_receive+0x38c>)
 800bd80:	4835      	ldr	r0, [pc, #212]	; (800be58 <tcp_receive+0x37c>)
 800bd82:	f003 f927 	bl	800efd4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bd86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800bd88:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800bd8a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800bd8c:	1a9b      	subs	r3, r3, r2
 800bd8e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800bd90:	f7fe fece 	bl	800ab30 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800bd94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bd96:	891a      	ldrh	r2, [r3, #8]
 800bd98:	b112      	cbz	r2, 800bda0 <tcp_receive+0x2c4>
          recv_data = inseg.p;
 800bd9a:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bda0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bda2:	8998      	ldrh	r0, [r3, #12]
 800bda4:	f7fd fdae 	bl	8009904 <lwip_htons>
 800bda8:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800bdaa:	bf42      	ittt	mi
 800bdac:	7cab      	ldrbmi	r3, [r5, #18]
 800bdae:	f043 0320 	orrmi.w	r3, r3, #32
 800bdb2:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800bdb4:	8b63      	ldrh	r3, [r4, #26]
 800bdb6:	07da      	lsls	r2, r3, #31
 800bdb8:	f140 80b2 	bpl.w	800bf20 <tcp_receive+0x444>
 800bdbc:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800bdc0:	f043 0302 	orr.w	r3, r3, #2
 800bdc4:	e0ae      	b.n	800bf24 <tcp_receive+0x448>
        pcb->dupacks = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdcc:	e6ff      	b.n	800bbce <tcp_receive+0xf2>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bdce:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bdd0:	1a51      	subs	r1, r2, r1
 800bdd2:	2900      	cmp	r1, #0
 800bdd4:	f300 8092 	bgt.w	800befc <tcp_receive+0x420>
      if (pcb->flags & TF_INFR) {
 800bdd8:	8b61      	ldrh	r1, [r4, #26]
 800bdda:	0748      	lsls	r0, r1, #29
 800bddc:	d509      	bpl.n	800bdf2 <tcp_receive+0x316>
        tcp_clear_flags(pcb, TF_INFR);
 800bdde:	f021 0104 	bic.w	r1, r1, #4
 800bde2:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800bde4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800bde8:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bdec:	2100      	movs	r1, #0
 800bdee:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bdf2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800bdf6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800bdf8:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bdfa:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800bdfe:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800be00:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800be04:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800be06:	f04f 0100 	mov.w	r1, #0
 800be0a:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800be0e:	d937      	bls.n	800be80 <tcp_receive+0x3a4>
        if (pcb->cwnd < pcb->ssthresh) {
 800be10:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800be14:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800be16:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800be1a:	4291      	cmp	r1, r2
 800be1c:	d926      	bls.n	800be6c <tcp_receive+0x390>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800be1e:	8b61      	ldrh	r1, [r4, #26]
 800be20:	f411 6f00 	tst.w	r1, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800be24:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800be26:	bf14      	ite	ne
 800be28:	2001      	movne	r0, #1
 800be2a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800be2c:	fb11 f100 	smulbb	r1, r1, r0
 800be30:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800be32:	4299      	cmp	r1, r3
 800be34:	bf94      	ite	ls
 800be36:	1850      	addls	r0, r2, r1
 800be38:	18d0      	addhi	r0, r2, r3
 800be3a:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d901      	bls.n	800be44 <tcp_receive+0x368>
          TCP_WND_INC(pcb->cwnd, increase);
 800be40:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800be44:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800be48:	e01a      	b.n	800be80 <tcp_receive+0x3a4>
 800be4a:	bf00      	nop
 800be4c:	2000d064 	.word	0x2000d064
 800be50:	0801cd84 	.word	0x0801cd84
 800be54:	0801ce9e 	.word	0x0801ce9e
 800be58:	0801a72c 	.word	0x0801a72c
 800be5c:	0801ceae 	.word	0x0801ceae
 800be60:	0801cebd 	.word	0x0801cebd
 800be64:	0801cecd 	.word	0x0801cecd
 800be68:	0801cf04 	.word	0x0801cf04
          TCP_WND_INC(pcb->bytes_acked, acked);
 800be6c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800be70:	440b      	add	r3, r1
 800be72:	b29b      	uxth	r3, r3
 800be74:	4299      	cmp	r1, r3
 800be76:	d82b      	bhi.n	800bed0 <tcp_receive+0x3f4>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800be78:	429a      	cmp	r2, r3
 800be7a:	d92b      	bls.n	800bed4 <tcp_receive+0x3f8>
 800be7c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800be80:	4620      	mov	r0, r4
 800be82:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800be86:	f7ff fdc9 	bl	800ba1c <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800be8a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800be8c:	4602      	mov	r2, r0
 800be8e:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800be90:	4620      	mov	r0, r4
 800be92:	f7ff fdc3 	bl	800ba1c <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800be96:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800be98:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800be9a:	fab2 f382 	clz	r3, r2
 800be9e:	095b      	lsrs	r3, r3, #5
 800bea0:	425b      	negs	r3, r3
 800bea2:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800bea8:	b908      	cbnz	r0, 800beae <tcp_receive+0x3d2>
        pcb->unsent_oversize = 0;
 800beaa:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800beae:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800beb2:	8aa9      	ldrh	r1, [r5, #20]
 800beb4:	440b      	add	r3, r1
 800beb6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800beba:	8b63      	ldrh	r3, [r4, #26]
 800bebc:	051f      	lsls	r7, r3, #20
 800bebe:	f57f ae86 	bpl.w	800bbce <tcp_receive+0xf2>
        if (pcb->unacked == NULL) {
 800bec2:	b9c2      	cbnz	r2, 800bef6 <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 800bec4:	b968      	cbnz	r0, 800bee2 <tcp_receive+0x406>
          tcp_clear_flags(pcb, TF_RTO);
 800bec6:	8b63      	ldrh	r3, [r4, #26]
 800bec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800becc:	8363      	strh	r3, [r4, #26]
 800bece:	e67e      	b.n	800bbce <tcp_receive+0xf2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bed4:	1a9b      	subs	r3, r3, r2
 800bed6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800beda:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bedc:	4413      	add	r3, r2
 800bede:	b29b      	uxth	r3, r3
 800bee0:	e7ac      	b.n	800be3c <tcp_receive+0x360>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bee2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800bee4:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bee6:	6858      	ldr	r0, [r3, #4]
 800bee8:	f7fd fd0f 	bl	800990a <lwip_htonl>
 800beec:	1a30      	subs	r0, r6, r0
 800beee:	2800      	cmp	r0, #0
 800bef0:	f73f ae6d 	bgt.w	800bbce <tcp_receive+0xf2>
 800bef4:	e7e7      	b.n	800bec6 <tcp_receive+0x3ea>
 800bef6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800bef8:	68d3      	ldr	r3, [r2, #12]
 800befa:	e7f4      	b.n	800bee6 <tcp_receive+0x40a>
      tcp_send_empty_ack(pcb);
 800befc:	4620      	mov	r0, r4
 800befe:	f001 fbcd 	bl	800d69c <tcp_send_empty_ack>
 800bf02:	e664      	b.n	800bbce <tcp_receive+0xf2>
        off -= p->len;
 800bf04:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800bf06:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800bf08:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800bf0a:	b2bf      	uxth	r7, r7
        p = p->next;
 800bf0c:	6836      	ldr	r6, [r6, #0]
 800bf0e:	e6c3      	b.n	800bc98 <tcp_receive+0x1bc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bf10:	1a9b      	subs	r3, r3, r2
 800bf12:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800bf14:	bfbe      	ittt	lt
 800bf16:	8b63      	ldrhlt	r3, [r4, #26]
 800bf18:	f043 0302 	orrlt.w	r3, r3, #2
 800bf1c:	8363      	strhlt	r3, [r4, #26]
 800bf1e:	e6c7      	b.n	800bcb0 <tcp_receive+0x1d4>
        tcp_ack(pcb);
 800bf20:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800bf24:	8363      	strh	r3, [r4, #26]
}
 800bf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800bf28:	4620      	mov	r0, r4
}
 800bf2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800bf2e:	f001 bbb5 	b.w	800d69c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bf32:	1a99      	subs	r1, r3, r2
 800bf34:	2900      	cmp	r1, #0
 800bf36:	db05      	blt.n	800bf44 <tcp_receive+0x468>
 800bf38:	3301      	adds	r3, #1
 800bf3a:	1a9b      	subs	r3, r3, r2
 800bf3c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bf3e:	1a9b      	subs	r3, r3, r2
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	ddf0      	ble.n	800bf26 <tcp_receive+0x44a>
      tcp_ack_now(pcb);
 800bf44:	8b63      	ldrh	r3, [r4, #26]
 800bf46:	e73b      	b.n	800bdc0 <tcp_receive+0x2e4>

0800bf48 <tcp_input>:
{
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bf4c:	4606      	mov	r6, r0
{
 800bf4e:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bf50:	b928      	cbnz	r0, 800bf5e <tcp_input+0x16>
 800bf52:	4ba1      	ldr	r3, [pc, #644]	; (800c1d8 <tcp_input+0x290>)
 800bf54:	2283      	movs	r2, #131	; 0x83
 800bf56:	49a1      	ldr	r1, [pc, #644]	; (800c1dc <tcp_input+0x294>)
 800bf58:	48a1      	ldr	r0, [pc, #644]	; (800c1e0 <tcp_input+0x298>)
 800bf5a:	f003 f83b 	bl	800efd4 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800bf5e:	6873      	ldr	r3, [r6, #4]
 800bf60:	4da0      	ldr	r5, [pc, #640]	; (800c1e4 <tcp_input+0x29c>)
 800bf62:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800bf64:	8973      	ldrh	r3, [r6, #10]
 800bf66:	2b13      	cmp	r3, #19
 800bf68:	f240 80a6 	bls.w	800c0b8 <tcp_input+0x170>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bf6c:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800c208 <tcp_input+0x2c0>
 800bf70:	f8d8 1000 	ldr.w	r1, [r8]
 800bf74:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800bf78:	f7fd f8cf 	bl	800911a <ip4_addr_isbroadcast_u32>
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f040 809a 	bne.w	800c0b8 <tcp_input+0x170>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bf84:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bf88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bf8c:	2be0      	cmp	r3, #224	; 0xe0
 800bf8e:	f000 8093 	beq.w	800c0b8 <tcp_input+0x170>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bf92:	68eb      	ldr	r3, [r5, #12]
 800bf94:	8998      	ldrh	r0, [r3, #12]
 800bf96:	f7fd fcb5 	bl	8009904 <lwip_htons>
 800bf9a:	0a81      	lsrs	r1, r0, #10
 800bf9c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bfa0:	2913      	cmp	r1, #19
 800bfa2:	f240 8089 	bls.w	800c0b8 <tcp_input+0x170>
 800bfa6:	8933      	ldrh	r3, [r6, #8]
 800bfa8:	b28a      	uxth	r2, r1
 800bfaa:	428b      	cmp	r3, r1
 800bfac:	f0c0 8084 	bcc.w	800c0b8 <tcp_input+0x170>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bfb0:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800bfb4:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800bfb6:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bfb8:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800bfba:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bfbc:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800bfbe:	d33d      	bcc.n	800c03c <tcp_input+0xf4>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bfc0:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800bfc2:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bfc4:	f7fe f9c0 	bl	800a348 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bfc8:	68ec      	ldr	r4, [r5, #12]
 800bfca:	8820      	ldrh	r0, [r4, #0]
 800bfcc:	f7fd fc9a 	bl	8009904 <lwip_htons>
 800bfd0:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bfd2:	68ec      	ldr	r4, [r5, #12]
 800bfd4:	8860      	ldrh	r0, [r4, #2]
 800bfd6:	f7fd fc95 	bl	8009904 <lwip_htons>
 800bfda:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bfdc:	68ec      	ldr	r4, [r5, #12]
 800bfde:	6860      	ldr	r0, [r4, #4]
 800bfe0:	f7fd fc93 	bl	800990a <lwip_htonl>
 800bfe4:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bfe6:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bfe8:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bfea:	68a0      	ldr	r0, [r4, #8]
 800bfec:	f7fd fc8d 	bl	800990a <lwip_htonl>
 800bff0:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bff2:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bff4:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bff6:	89e0      	ldrh	r0, [r4, #14]
 800bff8:	f7fd fc84 	bl	8009904 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800bffc:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bffe:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800c000:	8998      	ldrh	r0, [r3, #12]
 800c002:	f7fd fc7f 	bl	8009904 <lwip_htons>
 800c006:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800c00a:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800c00c:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c00e:	0783      	lsls	r3, r0, #30
 800c010:	d14d      	bne.n	800c0ae <tcp_input+0x166>
  tcplen = p->tot_len;
 800c012:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c014:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800c20c <tcp_input+0x2c4>
  prev = NULL;
 800c018:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c01a:	4b6f      	ldr	r3, [pc, #444]	; (800c1d8 <tcp_input+0x290>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c01c:	f8d9 4000 	ldr.w	r4, [r9]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c020:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800c210 <tcp_input+0x2c8>
 800c024:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800c1e0 <tcp_input+0x298>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c028:	2c00      	cmp	r4, #0
 800c02a:	d14b      	bne.n	800c0c4 <tcp_input+0x17c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c02c:	4b6e      	ldr	r3, [pc, #440]	; (800c1e8 <tcp_input+0x2a0>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c02e:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 800c1d8 <tcp_input+0x290>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c032:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c034:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800c214 <tcp_input+0x2cc>
 800c038:	4f69      	ldr	r7, [pc, #420]	; (800c1e0 <tcp_input+0x298>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c03a:	e141      	b.n	800c2c0 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c03c:	6833      	ldr	r3, [r6, #0]
 800c03e:	b92b      	cbnz	r3, 800c04c <tcp_input+0x104>
 800c040:	4b65      	ldr	r3, [pc, #404]	; (800c1d8 <tcp_input+0x290>)
 800c042:	22c2      	movs	r2, #194	; 0xc2
 800c044:	4969      	ldr	r1, [pc, #420]	; (800c1ec <tcp_input+0x2a4>)
 800c046:	4866      	ldr	r0, [pc, #408]	; (800c1e0 <tcp_input+0x298>)
 800c048:	f002 ffc4 	bl	800efd4 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800c04c:	2114      	movs	r1, #20
 800c04e:	4630      	mov	r0, r6
 800c050:	f7fe f97a 	bl	800a348 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800c054:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c056:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c05a:	4630      	mov	r0, r6
 800c05c:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800c05e:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c060:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800c064:	f7fe f970 	bl	800a348 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800c068:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c06a:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800c06c:	8943      	ldrh	r3, [r0, #10]
 800c06e:	42bb      	cmp	r3, r7
 800c070:	d322      	bcc.n	800c0b8 <tcp_input+0x170>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c072:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800c074:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c076:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800c078:	f7fe f966 	bl	800a348 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c07c:	8933      	ldrh	r3, [r6, #8]
 800c07e:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c080:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c082:	eba4 0409 	sub.w	r4, r4, r9
 800c086:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c088:	b12b      	cbz	r3, 800c096 <tcp_input+0x14e>
 800c08a:	4b53      	ldr	r3, [pc, #332]	; (800c1d8 <tcp_input+0x290>)
 800c08c:	22df      	movs	r2, #223	; 0xdf
 800c08e:	4958      	ldr	r1, [pc, #352]	; (800c1f0 <tcp_input+0x2a8>)
 800c090:	4853      	ldr	r0, [pc, #332]	; (800c1e0 <tcp_input+0x298>)
 800c092:	f002 ff9f 	bl	800efd4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c096:	6833      	ldr	r3, [r6, #0]
 800c098:	8932      	ldrh	r2, [r6, #8]
 800c09a:	891b      	ldrh	r3, [r3, #8]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d093      	beq.n	800bfc8 <tcp_input+0x80>
 800c0a0:	4b4d      	ldr	r3, [pc, #308]	; (800c1d8 <tcp_input+0x290>)
 800c0a2:	22e0      	movs	r2, #224	; 0xe0
 800c0a4:	4953      	ldr	r1, [pc, #332]	; (800c1f4 <tcp_input+0x2ac>)
 800c0a6:	484e      	ldr	r0, [pc, #312]	; (800c1e0 <tcp_input+0x298>)
 800c0a8:	f002 ff94 	bl	800efd4 <iprintf>
 800c0ac:	e78c      	b.n	800bfc8 <tcp_input+0x80>
    tcplen++;
 800c0ae:	1c53      	adds	r3, r2, #1
 800c0b0:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800c0b2:	429a      	cmp	r2, r3
    tcplen++;
 800c0b4:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800c0b6:	d9ad      	bls.n	800c014 <tcp_input+0xcc>
  pbuf_free(p);
 800c0b8:	4630      	mov	r0, r6
}
 800c0ba:	b007      	add	sp, #28
 800c0bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c0c0:	f7fe b976 	b.w	800a3b0 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c0c4:	7d22      	ldrb	r2, [r4, #20]
 800c0c6:	b92a      	cbnz	r2, 800c0d4 <tcp_input+0x18c>
 800c0c8:	22fb      	movs	r2, #251	; 0xfb
 800c0ca:	4659      	mov	r1, fp
 800c0cc:	4650      	mov	r0, sl
 800c0ce:	f002 ff81 	bl	800efd4 <iprintf>
 800c0d2:	4b41      	ldr	r3, [pc, #260]	; (800c1d8 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c0d4:	7d22      	ldrb	r2, [r4, #20]
 800c0d6:	2a0a      	cmp	r2, #10
 800c0d8:	d105      	bne.n	800c0e6 <tcp_input+0x19e>
 800c0da:	22fc      	movs	r2, #252	; 0xfc
 800c0dc:	4946      	ldr	r1, [pc, #280]	; (800c1f8 <tcp_input+0x2b0>)
 800c0de:	4650      	mov	r0, sl
 800c0e0:	f002 ff78 	bl	800efd4 <iprintf>
 800c0e4:	4b3c      	ldr	r3, [pc, #240]	; (800c1d8 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c0e6:	7d22      	ldrb	r2, [r4, #20]
 800c0e8:	2a01      	cmp	r2, #1
 800c0ea:	d105      	bne.n	800c0f8 <tcp_input+0x1b0>
 800c0ec:	22fd      	movs	r2, #253	; 0xfd
 800c0ee:	4943      	ldr	r1, [pc, #268]	; (800c1fc <tcp_input+0x2b4>)
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	f002 ff6f 	bl	800efd4 <iprintf>
 800c0f6:	4b38      	ldr	r3, [pc, #224]	; (800c1d8 <tcp_input+0x290>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c0f8:	7a20      	ldrb	r0, [r4, #8]
 800c0fa:	68e1      	ldr	r1, [r4, #12]
 800c0fc:	b138      	cbz	r0, 800c10e <tcp_input+0x1c6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c0fe:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c102:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c106:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c108:	b2d2      	uxtb	r2, r2
 800c10a:	4290      	cmp	r0, r2
 800c10c:	d161      	bne.n	800c1d2 <tcp_input+0x28a>
    if (pcb->remote_port == tcphdr->src &&
 800c10e:	68ea      	ldr	r2, [r5, #12]
 800c110:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800c114:	8810      	ldrh	r0, [r2, #0]
 800c116:	4584      	cmp	ip, r0
 800c118:	d15b      	bne.n	800c1d2 <tcp_input+0x28a>
 800c11a:	8ae0      	ldrh	r0, [r4, #22]
 800c11c:	8852      	ldrh	r2, [r2, #2]
 800c11e:	4290      	cmp	r0, r2
 800c120:	d157      	bne.n	800c1d2 <tcp_input+0x28a>
        pcb->local_port == tcphdr->dest &&
 800c122:	6860      	ldr	r0, [r4, #4]
 800c124:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c128:	4290      	cmp	r0, r2
 800c12a:	d152      	bne.n	800c1d2 <tcp_input+0x28a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c132:	4290      	cmp	r0, r2
 800c134:	d14d      	bne.n	800c1d2 <tcp_input+0x28a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c136:	42a1      	cmp	r1, r4
 800c138:	f040 83eb 	bne.w	800c912 <tcp_input+0x9ca>
 800c13c:	4b26      	ldr	r3, [pc, #152]	; (800c1d8 <tcp_input+0x290>)
 800c13e:	f240 120d 	movw	r2, #269	; 0x10d
 800c142:	492f      	ldr	r1, [pc, #188]	; (800c200 <tcp_input+0x2b8>)
 800c144:	4826      	ldr	r0, [pc, #152]	; (800c1e0 <tcp_input+0x298>)
 800c146:	f002 ff45 	bl	800efd4 <iprintf>
      if (prev != NULL) {
 800c14a:	b137      	cbz	r7, 800c15a <tcp_input+0x212>
        prev->next = pcb->next;
 800c14c:	68e3      	ldr	r3, [r4, #12]
 800c14e:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800c150:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800c154:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800c158:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c15a:	68e3      	ldr	r3, [r4, #12]
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	d106      	bne.n	800c16e <tcp_input+0x226>
 800c160:	4b1d      	ldr	r3, [pc, #116]	; (800c1d8 <tcp_input+0x290>)
 800c162:	f240 1215 	movw	r2, #277	; 0x115
 800c166:	4927      	ldr	r1, [pc, #156]	; (800c204 <tcp_input+0x2bc>)
 800c168:	481d      	ldr	r0, [pc, #116]	; (800c1e0 <tcp_input+0x298>)
 800c16a:	f002 ff33 	bl	800efd4 <iprintf>
    inseg.len = p->tot_len;
 800c16e:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800c170:	2300      	movs	r3, #0
    inseg.p = p;
 800c172:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800c174:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800c176:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800c178:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800c17a:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800c17c:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800c17e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800c182:	7f2b      	ldrb	r3, [r5, #28]
 800c184:	071b      	lsls	r3, r3, #28
 800c186:	d503      	bpl.n	800c190 <tcp_input+0x248>
      p->flags |= PBUF_FLAG_PUSH;
 800c188:	7b73      	ldrb	r3, [r6, #13]
 800c18a:	f043 0301 	orr.w	r3, r3, #1
 800c18e:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800c190:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 812e 	beq.w	800c3f4 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c198:	4620      	mov	r0, r4
 800c19a:	f7ff f935 	bl	800b408 <tcp_process_refused_data>
 800c19e:	300d      	adds	r0, #13
 800c1a0:	d007      	beq.n	800c1b2 <tcp_input+0x26a>
 800c1a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f000 8125 	beq.w	800c3f4 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c1aa:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 8121 	beq.w	800c3f4 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800c1b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c1b4:	b913      	cbnz	r3, 800c1bc <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f001 fa70 	bl	800d69c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800c1bc:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800c1be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    recv_data = NULL;
 800c1c0:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800c1c4:	b110      	cbz	r0, 800c1cc <tcp_input+0x284>
      pbuf_free(inseg.p);
 800c1c6:	f7fe f8f3 	bl	800a3b0 <pbuf_free>
      inseg.p = NULL;
 800c1ca:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800c1cc:	b007      	add	sp, #28
 800c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1d2:	4627      	mov	r7, r4
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	e727      	b.n	800c028 <tcp_input+0xe0>
 800c1d8:	0801cd84 	.word	0x0801cd84
 800c1dc:	0801cf23 	.word	0x0801cf23
 800c1e0:	0801a72c 	.word	0x0801a72c
 800c1e4:	2000d074 	.word	0x2000d074
 800c1e8:	2000d06c 	.word	0x2000d06c
 800c1ec:	0801cf3b 	.word	0x0801cf3b
 800c1f0:	0801cf4b 	.word	0x0801cf4b
 800c1f4:	0801cf57 	.word	0x0801cf57
 800c1f8:	0801cf9d 	.word	0x0801cf9d
 800c1fc:	0801cfc7 	.word	0x0801cfc7
 800c200:	0801cfee 	.word	0x0801cfee
 800c204:	0801d019 	.word	0x0801d019
 800c208:	20006ad4 	.word	0x20006ad4
 800c20c:	2000d060 	.word	0x2000d060
 800c210:	0801cf76 	.word	0x0801cf76
 800c214:	0801d043 	.word	0x0801d043
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c218:	7d23      	ldrb	r3, [r4, #20]
 800c21a:	2b0a      	cmp	r3, #10
 800c21c:	d006      	beq.n	800c22c <tcp_input+0x2e4>
 800c21e:	465b      	mov	r3, fp
 800c220:	f240 121f 	movw	r2, #287	; 0x11f
 800c224:	4651      	mov	r1, sl
 800c226:	4638      	mov	r0, r7
 800c228:	f002 fed4 	bl	800efd4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c22c:	7a22      	ldrb	r2, [r4, #8]
 800c22e:	b13a      	cbz	r2, 800c240 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c230:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c234:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c238:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d13e      	bne.n	800c2be <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800c240:	68eb      	ldr	r3, [r5, #12]
 800c242:	8b20      	ldrh	r0, [r4, #24]
 800c244:	881a      	ldrh	r2, [r3, #0]
 800c246:	4290      	cmp	r0, r2
 800c248:	d139      	bne.n	800c2be <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800c24a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800c24c:	8ae1      	ldrh	r1, [r4, #22]
 800c24e:	4299      	cmp	r1, r3
 800c250:	d135      	bne.n	800c2be <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800c252:	6862      	ldr	r2, [r4, #4]
 800c254:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d130      	bne.n	800c2be <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c25c:	6822      	ldr	r2, [r4, #0]
 800c25e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c262:	429a      	cmp	r2, r3
 800c264:	d12b      	bne.n	800c2be <tcp_input+0x376>
  if (flags & TCP_RST) {
 800c266:	7f2b      	ldrb	r3, [r5, #28]
 800c268:	075f      	lsls	r7, r3, #29
 800c26a:	f53f af25 	bmi.w	800c0b8 <tcp_input+0x170>
  if (flags & TCP_SYN) {
 800c26e:	079a      	lsls	r2, r3, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c270:	8caf      	ldrh	r7, [r5, #36]	; 0x24
  if (flags & TCP_SYN) {
 800c272:	d514      	bpl.n	800c29e <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c274:	6a2a      	ldr	r2, [r5, #32]
 800c276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	d415      	bmi.n	800c2a8 <tcp_input+0x360>
 800c27c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800c280:	eba3 030c 	sub.w	r3, r3, ip
 800c284:	2b00      	cmp	r3, #0
 800c286:	dc0f      	bgt.n	800c2a8 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c288:	4b8a      	ldr	r3, [pc, #552]	; (800c4b4 <tcp_input+0x56c>)
 800c28a:	443a      	add	r2, r7
 800c28c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	4620      	mov	r0, r4
 800c294:	3304      	adds	r3, #4
 800c296:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c298:	f001 f9ba 	bl	800d610 <tcp_rst>
 800c29c:	e70c      	b.n	800c0b8 <tcp_input+0x170>
  } else if (flags & TCP_FIN) {
 800c29e:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800c2a0:	bf42      	ittt	mi
 800c2a2:	4b85      	ldrmi	r3, [pc, #532]	; (800c4b8 <tcp_input+0x570>)
 800c2a4:	681b      	ldrmi	r3, [r3, #0]
 800c2a6:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800c2a8:	2f00      	cmp	r7, #0
 800c2aa:	f43f af05 	beq.w	800c0b8 <tcp_input+0x170>
    tcp_ack_now(pcb);
 800c2ae:	8b63      	ldrh	r3, [r4, #26]
 800c2b0:	f043 0302 	orr.w	r3, r3, #2
 800c2b4:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f001 fa22 	bl	800d700 <tcp_output>
        pbuf_free(p);
 800c2bc:	e6fc      	b.n	800c0b8 <tcp_input+0x170>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2be:	68e4      	ldr	r4, [r4, #12]
 800c2c0:	2c00      	cmp	r4, #0
 800c2c2:	d1a9      	bne.n	800c218 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c2c4:	487d      	ldr	r0, [pc, #500]	; (800c4bc <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c2c6:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c2ca:	6802      	ldr	r2, [r0, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800c2cc:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c2ce:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c2d2:	4617      	mov	r7, r2
 800c2d4:	b98f      	cbnz	r7, 800c2fa <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c2d6:	8988      	ldrh	r0, [r1, #12]
 800c2d8:	f7fd fb14 	bl	8009904 <lwip_htons>
 800c2dc:	0742      	lsls	r2, r0, #29
 800c2de:	f53f aeeb 	bmi.w	800c0b8 <tcp_input+0x170>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2e2:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2e4:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800c2e6:	8818      	ldrh	r0, [r3, #0]
 800c2e8:	6a2a      	ldr	r2, [r5, #32]
 800c2ea:	9002      	str	r0, [sp, #8]
 800c2ec:	885b      	ldrh	r3, [r3, #2]
 800c2ee:	440a      	add	r2, r1
 800c2f0:	9301      	str	r3, [sp, #4]
 800c2f2:	4b70      	ldr	r3, [pc, #448]	; (800c4b4 <tcp_input+0x56c>)
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	e308      	b.n	800c90c <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c2fa:	f897 c008 	ldrb.w	ip, [r7, #8]
 800c2fe:	f1bc 0f00 	cmp.w	ip, #0
 800c302:	d005      	beq.n	800c310 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c304:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800c308:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	459c      	cmp	ip, r3
 800c30e:	d10b      	bne.n	800c328 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800c310:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800c314:	8afb      	ldrh	r3, [r7, #22]
 800c316:	4563      	cmp	r3, ip
 800c318:	d106      	bne.n	800c328 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	4553      	cmp	r3, sl
 800c31e:	f000 82df 	beq.w	800c8e0 <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 82dc 	beq.w	800c8e0 <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c328:	463c      	mov	r4, r7
 800c32a:	68ff      	ldr	r7, [r7, #12]
 800c32c:	e7d2      	b.n	800c2d4 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800c32e:	0798      	lsls	r0, r3, #30
 800c330:	f57f aec2 	bpl.w	800c0b8 <tcp_input+0x170>
    npcb = tcp_alloc(pcb->prio);
 800c334:	7d78      	ldrb	r0, [r7, #21]
 800c336:	f7ff f9fd 	bl	800b734 <tcp_alloc>
    if (npcb == NULL) {
 800c33a:	4604      	mov	r4, r0
 800c33c:	b948      	cbnz	r0, 800c352 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	f43f aeb9 	beq.w	800c0b8 <tcp_input+0x170>
 800c346:	4601      	mov	r1, r0
 800c348:	f04f 32ff 	mov.w	r2, #4294967295
 800c34c:	6938      	ldr	r0, [r7, #16]
 800c34e:	4798      	blx	r3
 800c350:	e6b2      	b.n	800c0b8 <tcp_input+0x170>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c352:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800c356:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c358:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c35a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c35e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800c360:	8afb      	ldrh	r3, [r7, #22]
 800c362:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800c364:	7813      	ldrb	r3, [r2, #0]
 800c366:	7852      	ldrb	r2, [r2, #1]
 800c368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c36c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800c36e:	2303      	movs	r3, #3
 800c370:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800c372:	6a2b      	ldr	r3, [r5, #32]
 800c374:	3301      	adds	r3, #1
 800c376:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c378:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c37a:	f7ff fa6f 	bl	800b85c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c37e:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800c380:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c382:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800c384:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800c386:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c388:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c38a:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800c38c:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800c38e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800c390:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c392:	7a7b      	ldrb	r3, [r7, #9]
 800c394:	f003 030c 	and.w	r3, r3, #12
 800c398:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c39a:	7a3b      	ldrb	r3, [r7, #8]
 800c39c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800c39e:	f8d9 3000 	ldr.w	r3, [r9]
 800c3a2:	f8c9 4000 	str.w	r4, [r9]
 800c3a6:	60e3      	str	r3, [r4, #12]
 800c3a8:	f001 fc80 	bl	800dcac <tcp_timer_needed>
 800c3ac:	4b44      	ldr	r3, [pc, #272]	; (800c4c0 <tcp_input+0x578>)
 800c3ae:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800c3b0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800c3b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c3b4:	f7ff fabc 	bl	800b930 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c3b8:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c3ba:	1d22      	adds	r2, r4, #4
 800c3bc:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800c3be:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800c3c4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c3c8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c3cc:	f7fc fd26 	bl	8008e1c <ip4_route>
 800c3d0:	9a05      	ldr	r2, [sp, #20]
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	f7ff fa5b 	bl	800b890 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c3da:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c3dc:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 ff9a 	bl	800d318 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	f43f af66 	beq.w	800c2b6 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800c3ea:	4651      	mov	r1, sl
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f7ff f8cf 	bl	800b590 <tcp_abandon>
      return;
 800c3f2:	e661      	b.n	800c0b8 <tcp_input+0x170>
  if (flags & TCP_RST) {
 800c3f4:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800c3f6:	63ec      	str	r4, [r5, #60]	; 0x3c
  if (flags & TCP_RST) {
 800c3f8:	0751      	lsls	r1, r2, #29
 800c3fa:	d537      	bpl.n	800c46c <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800c3fc:	7d21      	ldrb	r1, [r4, #20]
 800c3fe:	2902      	cmp	r1, #2
 800c400:	d11e      	bne.n	800c440 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800c402:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c404:	69ab      	ldr	r3, [r5, #24]
 800c406:	429a      	cmp	r2, r3
 800c408:	d107      	bne.n	800c41a <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800c40a:	7cab      	ldrb	r3, [r5, #18]
 800c40c:	f043 0308 	orr.w	r3, r3, #8
 800c410:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c412:	8b63      	ldrh	r3, [r4, #26]
 800c414:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800c418:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800c41a:	7cab      	ldrb	r3, [r5, #18]
 800c41c:	0718      	lsls	r0, r3, #28
 800c41e:	f140 81fe 	bpl.w	800c81e <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c422:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c426:	b11b      	cbz	r3, 800c430 <tcp_input+0x4e8>
 800c428:	f06f 010d 	mvn.w	r1, #13
 800c42c:	6920      	ldr	r0, [r4, #16]
 800c42e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c430:	4621      	mov	r1, r4
 800c432:	4824      	ldr	r0, [pc, #144]	; (800c4c4 <tcp_input+0x57c>)
 800c434:	f7fe fe9c 	bl	800b170 <tcp_pcb_remove>
        tcp_free(pcb);
 800c438:	4620      	mov	r0, r4
 800c43a:	f7fe faa7 	bl	800a98c <tcp_free>
 800c43e:	e6bd      	b.n	800c1bc <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 800c440:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c442:	6a2b      	ldr	r3, [r5, #32]
 800c444:	429a      	cmp	r2, r3
 800c446:	d007      	beq.n	800c458 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c448:	1a9b      	subs	r3, r3, r2
 800c44a:	d4e6      	bmi.n	800c41a <tcp_input+0x4d2>
 800c44c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c44e:	1a9b      	subs	r3, r3, r2
 800c450:	2b00      	cmp	r3, #0
 800c452:	dce2      	bgt.n	800c41a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c454:	8b63      	ldrh	r3, [r4, #26]
 800c456:	e010      	b.n	800c47a <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c458:	2900      	cmp	r1, #0
 800c45a:	d1d6      	bne.n	800c40a <tcp_input+0x4c2>
 800c45c:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <tcp_input+0x580>)
 800c45e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c462:	491a      	ldr	r1, [pc, #104]	; (800c4cc <tcp_input+0x584>)
 800c464:	481a      	ldr	r0, [pc, #104]	; (800c4d0 <tcp_input+0x588>)
 800c466:	f002 fdb5 	bl	800efd4 <iprintf>
 800c46a:	e7ce      	b.n	800c40a <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c46c:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800c46e:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c470:	d506      	bpl.n	800c480 <tcp_input+0x538>
 800c472:	7d22      	ldrb	r2, [r4, #20]
 800c474:	3a02      	subs	r2, #2
 800c476:	2a01      	cmp	r2, #1
 800c478:	d902      	bls.n	800c480 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800c47a:	f043 0302 	orr.w	r3, r3, #2
 800c47e:	e7cb      	b.n	800c418 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c480:	06db      	lsls	r3, r3, #27
  tcp_parseopt(pcb);
 800c482:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800c484:	bf5e      	ittt	pl
 800c486:	4b0c      	ldrpl	r3, [pc, #48]	; (800c4b8 <tcp_input+0x570>)
 800c488:	681b      	ldrpl	r3, [r3, #0]
 800c48a:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800c492:	f7ff fa4d 	bl	800b930 <tcp_parseopt>
  switch (pcb->state) {
 800c496:	7d23      	ldrb	r3, [r4, #20]
 800c498:	3b02      	subs	r3, #2
 800c49a:	2b07      	cmp	r3, #7
 800c49c:	d8bd      	bhi.n	800c41a <tcp_input+0x4d2>
 800c49e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c4a2:	0019      	.short	0x0019
 800c4a4:	011200a6 	.word	0x011200a6
 800c4a8:	015f0117 	.word	0x015f0117
 800c4ac:	018b0112 	.word	0x018b0112
 800c4b0:	01a9      	.short	0x01a9
 800c4b2:	bf00      	nop
 800c4b4:	20006ae4 	.word	0x20006ae4
 800c4b8:	2000d064 	.word	0x2000d064
 800c4bc:	2000d05c 	.word	0x2000d05c
 800c4c0:	2000d069 	.word	0x2000d069
 800c4c4:	2000d060 	.word	0x2000d060
 800c4c8:	0801cd84 	.word	0x0801cd84
 800c4cc:	0801d070 	.word	0x0801d070
 800c4d0:	0801a72c 	.word	0x0801a72c
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c4d4:	7f2b      	ldrb	r3, [r5, #28]
 800c4d6:	f003 0212 	and.w	r2, r3, #18
 800c4da:	2a12      	cmp	r2, #18
 800c4dc:	d16a      	bne.n	800c5b4 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800c4de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c4e0:	69a9      	ldr	r1, [r5, #24]
 800c4e2:	3201      	adds	r2, #1
 800c4e4:	428a      	cmp	r2, r1
 800c4e6:	d165      	bne.n	800c5b4 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800c4e8:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800c4ea:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800c4ec:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800c4ee:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c4f0:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c4f2:	8e66      	ldrh	r6, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800c4f4:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c4f6:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800c4f8:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c4fa:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c4fc:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800c4fe:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c502:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c506:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800c508:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c50a:	4610      	mov	r0, r2
 800c50c:	9205      	str	r2, [sp, #20]
 800c50e:	f7fc fc85 	bl	8008e1c <ip4_route>
 800c512:	9a05      	ldr	r2, [sp, #20]
 800c514:	4601      	mov	r1, r0
 800c516:	4630      	mov	r0, r6
 800c518:	f7ff f9ba 	bl	800b890 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c51c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c520:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c522:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c524:	0081      	lsls	r1, r0, #2
 800c526:	429a      	cmp	r2, r3
 800c528:	4616      	mov	r6, r2
 800c52a:	bf38      	it	cc
 800c52c:	461e      	movcc	r6, r3
 800c52e:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800c532:	d933      	bls.n	800c59c <tcp_input+0x654>
 800c534:	b28b      	uxth	r3, r1
 800c536:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c53a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c53e:	b933      	cbnz	r3, 800c54e <tcp_input+0x606>
 800c540:	4b94      	ldr	r3, [pc, #592]	; (800c794 <tcp_input+0x84c>)
 800c542:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c546:	4994      	ldr	r1, [pc, #592]	; (800c798 <tcp_input+0x850>)
 800c548:	4894      	ldr	r0, [pc, #592]	; (800c79c <tcp_input+0x854>)
 800c54a:	f002 fd43 	bl	800efd4 <iprintf>
        --pcb->snd_queuelen;
 800c54e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800c552:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800c554:	3b01      	subs	r3, #1
 800c556:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800c55a:	bb1e      	cbnz	r6, 800c5a4 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800c55c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c55e:	b936      	cbnz	r6, 800c56e <tcp_input+0x626>
 800c560:	4b8c      	ldr	r3, [pc, #560]	; (800c794 <tcp_input+0x84c>)
 800c562:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c566:	498e      	ldr	r1, [pc, #568]	; (800c7a0 <tcp_input+0x858>)
 800c568:	488c      	ldr	r0, [pc, #560]	; (800c79c <tcp_input+0x854>)
 800c56a:	f002 fd33 	bl	800efd4 <iprintf>
          pcb->unsent = rseg->next;
 800c56e:	6833      	ldr	r3, [r6, #0]
 800c570:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800c572:	4630      	mov	r0, r6
 800c574:	f7fe fb50 	bl	800ac18 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800c578:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c57a:	b9b3      	cbnz	r3, 800c5aa <tcp_input+0x662>
          pcb->rtime = -1;
 800c57c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c580:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c582:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c586:	2b00      	cmp	r3, #0
 800c588:	f43f af64 	beq.w	800c454 <tcp_input+0x50c>
 800c58c:	2200      	movs	r2, #0
 800c58e:	4621      	mov	r1, r4
 800c590:	6920      	ldr	r0, [r4, #16]
 800c592:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800c594:	300d      	adds	r0, #13
 800c596:	f47f af5d 	bne.w	800c454 <tcp_input+0x50c>
 800c59a:	e60f      	b.n	800c1bc <tcp_input+0x274>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c59c:	429a      	cmp	r2, r3
 800c59e:	bf88      	it	hi
 800c5a0:	b293      	uxthhi	r3, r2
 800c5a2:	e7c8      	b.n	800c536 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800c5a4:	6833      	ldr	r3, [r6, #0]
 800c5a6:	6723      	str	r3, [r4, #112]	; 0x70
 800c5a8:	e7e3      	b.n	800c572 <tcp_input+0x62a>
          pcb->rtime = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800c5ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5b2:	e7e6      	b.n	800c582 <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800c5b4:	06df      	lsls	r7, r3, #27
 800c5b6:	f57f af30 	bpl.w	800c41a <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5ba:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5bc:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800c5be:	8818      	ldrh	r0, [r3, #0]
 800c5c0:	6a2a      	ldr	r2, [r5, #32]
 800c5c2:	9002      	str	r0, [sp, #8]
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	885b      	ldrh	r3, [r3, #2]
 800c5c8:	440a      	add	r2, r1
 800c5ca:	9301      	str	r3, [sp, #4]
 800c5cc:	4b75      	ldr	r3, [pc, #468]	; (800c7a4 <tcp_input+0x85c>)
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	69a9      	ldr	r1, [r5, #24]
 800c5d4:	f001 f81c 	bl	800d610 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c5d8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c5dc:	2b05      	cmp	r3, #5
 800c5de:	f63f af1c 	bhi.w	800c41a <tcp_input+0x4d2>
          pcb->rtime = 0;
 800c5e2:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800c5e4:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800c5e6:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c5e8:	f001 fa50 	bl	800da8c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800c5ec:	e715      	b.n	800c41a <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800c5ee:	7f2b      	ldrb	r3, [r5, #28]
 800c5f0:	06de      	lsls	r6, r3, #27
 800c5f2:	d55b      	bpl.n	800c6ac <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c5f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c5f6:	69a9      	ldr	r1, [r5, #24]
 800c5f8:	43db      	mvns	r3, r3
 800c5fa:	42cb      	cmn	r3, r1
 800c5fc:	d447      	bmi.n	800c68e <tcp_input+0x746>
 800c5fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c600:	1acb      	subs	r3, r1, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	dc43      	bgt.n	800c68e <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800c606:	2304      	movs	r3, #4
 800c608:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800c60a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c60c:	b91b      	cbnz	r3, 800c616 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800c60e:	4620      	mov	r0, r4
 800c610:	f7ff f83c 	bl	800b68c <tcp_abort>
            goto aborted;
 800c614:	e5d2      	b.n	800c1bc <tcp_input+0x274>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	b933      	cbnz	r3, 800c628 <tcp_input+0x6e0>
 800c61a:	4b5e      	ldr	r3, [pc, #376]	; (800c794 <tcp_input+0x84c>)
 800c61c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c620:	4961      	ldr	r1, [pc, #388]	; (800c7a8 <tcp_input+0x860>)
 800c622:	485e      	ldr	r0, [pc, #376]	; (800c79c <tcp_input+0x854>)
 800c624:	f002 fcd6 	bl	800efd4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c628:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d0ee      	beq.n	800c60e <tcp_input+0x6c6>
 800c630:	2200      	movs	r2, #0
 800c632:	4621      	mov	r1, r4
 800c634:	6920      	ldr	r0, [r4, #16]
 800c636:	4798      	blx	r3
          if (err != ERR_OK) {
 800c638:	b118      	cbz	r0, 800c642 <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800c63a:	300d      	adds	r0, #13
 800c63c:	f43f adbe 	beq.w	800c1bc <tcp_input+0x274>
 800c640:	e7e5      	b.n	800c60e <tcp_input+0x6c6>
          tcp_receive(pcb);
 800c642:	4620      	mov	r0, r4
 800c644:	f7ff fa4a 	bl	800badc <tcp_receive>
          if (recv_acked != 0) {
 800c648:	4a58      	ldr	r2, [pc, #352]	; (800c7ac <tcp_input+0x864>)
 800c64a:	8a93      	ldrh	r3, [r2, #20]
 800c64c:	b10b      	cbz	r3, 800c652 <tcp_input+0x70a>
            recv_acked--;
 800c64e:	3b01      	subs	r3, #1
 800c650:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c652:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800c654:	f241 131c 	movw	r3, #4380	; 0x111c
 800c658:	0041      	lsls	r1, r0, #1
 800c65a:	0086      	lsls	r6, r0, #2
 800c65c:	4299      	cmp	r1, r3
 800c65e:	460f      	mov	r7, r1
 800c660:	bf38      	it	cc
 800c662:	461f      	movcc	r7, r3
 800c664:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800c668:	d90d      	bls.n	800c686 <tcp_input+0x73e>
 800c66a:	b2b3      	uxth	r3, r6
 800c66c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800c670:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c672:	0699      	lsls	r1, r3, #26
 800c674:	f57f aed1 	bpl.w	800c41a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c678:	8b63      	ldrh	r3, [r4, #26]
 800c67a:	f043 0302 	orr.w	r3, r3, #2
 800c67e:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800c680:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800c682:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800c684:	e6c9      	b.n	800c41a <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c686:	4299      	cmp	r1, r3
 800c688:	bf88      	it	hi
 800c68a:	b28b      	uxthhi	r3, r1
 800c68c:	e7ee      	b.n	800c66c <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c68e:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c690:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c692:	881e      	ldrh	r6, [r3, #0]
 800c694:	6a2a      	ldr	r2, [r5, #32]
 800c696:	9602      	str	r6, [sp, #8]
 800c698:	885b      	ldrh	r3, [r3, #2]
 800c69a:	4402      	add	r2, r0
 800c69c:	4620      	mov	r0, r4
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	4b40      	ldr	r3, [pc, #256]	; (800c7a4 <tcp_input+0x85c>)
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	f000 ffb3 	bl	800d610 <tcp_rst>
    if (err != ERR_ABRT) {
 800c6aa:	e6b6      	b.n	800c41a <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c6ac:	0798      	lsls	r0, r3, #30
 800c6ae:	f57f aeb4 	bpl.w	800c41a <tcp_input+0x4d2>
 800c6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b4:	6a2a      	ldr	r2, [r5, #32]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	f47f aeae 	bne.w	800c41a <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 ff32 	bl	800d528 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800c6c4:	e6a9      	b.n	800c41a <tcp_input+0x4d2>
      tcp_receive(pcb);
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f7ff fa08 	bl	800badc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c6cc:	7cab      	ldrb	r3, [r5, #18]
 800c6ce:	e7d0      	b.n	800c672 <tcp_input+0x72a>
      tcp_receive(pcb);
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f7ff fa03 	bl	800badc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c6d6:	7cab      	ldrb	r3, [r5, #18]
 800c6d8:	f013 0f20 	tst.w	r3, #32
 800c6dc:	7f2b      	ldrb	r3, [r5, #28]
 800c6de:	d031      	beq.n	800c744 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c6e0:	f013 0f10 	tst.w	r3, #16
 800c6e4:	8b63      	ldrh	r3, [r4, #26]
 800c6e6:	d028      	beq.n	800c73a <tcp_input+0x7f2>
 800c6e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c6ea:	69aa      	ldr	r2, [r5, #24]
 800c6ec:	4291      	cmp	r1, r2
 800c6ee:	d124      	bne.n	800c73a <tcp_input+0x7f2>
 800c6f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c6f2:	bb12      	cbnz	r2, 800c73a <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800c6f4:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800c6f8:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800c6fa:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800c6fc:	f7fe fb16 	bl	800ad2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c700:	f8d9 3000 	ldr.w	r3, [r9]
 800c704:	429c      	cmp	r4, r3
 800c706:	d10a      	bne.n	800c71e <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800c708:	68e3      	ldr	r3, [r4, #12]
 800c70a:	f8c9 3000 	str.w	r3, [r9]
 800c70e:	e008      	b.n	800c722 <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800c710:	68da      	ldr	r2, [r3, #12]
 800c712:	4294      	cmp	r4, r2
 800c714:	d102      	bne.n	800c71c <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800c716:	68e2      	ldr	r2, [r4, #12]
 800c718:	60da      	str	r2, [r3, #12]
 800c71a:	e002      	b.n	800c722 <tcp_input+0x7da>
 800c71c:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1f6      	bne.n	800c710 <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800c722:	4b23      	ldr	r3, [pc, #140]	; (800c7b0 <tcp_input+0x868>)
 800c724:	2201      	movs	r2, #1
 800c726:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c728:	230a      	movs	r3, #10
 800c72a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c72c:	4b21      	ldr	r3, [pc, #132]	; (800c7b4 <tcp_input+0x86c>)
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	601c      	str	r4, [r3, #0]
 800c732:	60e2      	str	r2, [r4, #12]
 800c734:	f001 faba 	bl	800dcac <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800c738:	e66f      	b.n	800c41a <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800c73a:	f043 0302 	orr.w	r3, r3, #2
 800c73e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800c740:	2308      	movs	r3, #8
 800c742:	e79e      	b.n	800c682 <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c744:	06da      	lsls	r2, r3, #27
 800c746:	f57f ae68 	bpl.w	800c41a <tcp_input+0x4d2>
 800c74a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c74c:	69ab      	ldr	r3, [r5, #24]
 800c74e:	429a      	cmp	r2, r3
 800c750:	f47f ae63 	bne.w	800c41a <tcp_input+0x4d2>
 800c754:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c756:	2b00      	cmp	r3, #0
 800c758:	f47f ae5f 	bne.w	800c41a <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800c75c:	2306      	movs	r3, #6
 800c75e:	e790      	b.n	800c682 <tcp_input+0x73a>
      tcp_receive(pcb);
 800c760:	4620      	mov	r0, r4
 800c762:	f7ff f9bb 	bl	800badc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c766:	7cab      	ldrb	r3, [r5, #18]
 800c768:	069b      	lsls	r3, r3, #26
 800c76a:	f57f ae56 	bpl.w	800c41a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c76e:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c770:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c772:	f043 0302 	orr.w	r3, r3, #2
 800c776:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c778:	f7fe fad8 	bl	800ad2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c77c:	f8d9 3000 	ldr.w	r3, [r9]
 800c780:	429c      	cmp	r4, r3
 800c782:	d0c1      	beq.n	800c708 <tcp_input+0x7c0>
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0cc      	beq.n	800c722 <tcp_input+0x7da>
 800c788:	68da      	ldr	r2, [r3, #12]
 800c78a:	4294      	cmp	r4, r2
 800c78c:	d0c3      	beq.n	800c716 <tcp_input+0x7ce>
 800c78e:	4613      	mov	r3, r2
 800c790:	e7f8      	b.n	800c784 <tcp_input+0x83c>
 800c792:	bf00      	nop
 800c794:	0801cd84 	.word	0x0801cd84
 800c798:	0801d090 	.word	0x0801d090
 800c79c:	0801a72c 	.word	0x0801a72c
 800c7a0:	0801d0a6 	.word	0x0801d0a6
 800c7a4:	20006ae4 	.word	0x20006ae4
 800c7a8:	0801d0b9 	.word	0x0801d0b9
 800c7ac:	2000d074 	.word	0x2000d074
 800c7b0:	2000d069 	.word	0x2000d069
 800c7b4:	2000d06c 	.word	0x2000d06c
      tcp_receive(pcb);
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f7ff f98f 	bl	800badc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c7be:	7f2b      	ldrb	r3, [r5, #28]
 800c7c0:	06df      	lsls	r7, r3, #27
 800c7c2:	f57f ae2a 	bpl.w	800c41a <tcp_input+0x4d2>
 800c7c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c7c8:	69ab      	ldr	r3, [r5, #24]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	f47f ae25 	bne.w	800c41a <tcp_input+0x4d2>
 800c7d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f47f ae21 	bne.w	800c41a <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f7fe faa7 	bl	800ad2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c7de:	f8d9 3000 	ldr.w	r3, [r9]
 800c7e2:	429c      	cmp	r4, r3
 800c7e4:	d090      	beq.n	800c708 <tcp_input+0x7c0>
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d09b      	beq.n	800c722 <tcp_input+0x7da>
 800c7ea:	68da      	ldr	r2, [r3, #12]
 800c7ec:	4294      	cmp	r4, r2
 800c7ee:	d092      	beq.n	800c716 <tcp_input+0x7ce>
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	e7f8      	b.n	800c7e6 <tcp_input+0x89e>
      tcp_receive(pcb);
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7ff f971 	bl	800badc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c7fa:	7f2b      	ldrb	r3, [r5, #28]
 800c7fc:	06de      	lsls	r6, r3, #27
 800c7fe:	f57f ae0c 	bpl.w	800c41a <tcp_input+0x4d2>
 800c802:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c804:	69ab      	ldr	r3, [r5, #24]
 800c806:	429a      	cmp	r2, r3
 800c808:	f47f ae07 	bne.w	800c41a <tcp_input+0x4d2>
 800c80c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f47f ae03 	bne.w	800c41a <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800c814:	7cab      	ldrb	r3, [r5, #18]
 800c816:	f043 0310 	orr.w	r3, r3, #16
 800c81a:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800c81c:	e5fd      	b.n	800c41a <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800c81e:	8aaa      	ldrh	r2, [r5, #20]
 800c820:	b11a      	cbz	r2, 800c82a <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c822:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c824:	b9db      	cbnz	r3, 800c85e <tcp_input+0x916>
          recv_acked = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800c82a:	4620      	mov	r0, r4
 800c82c:	f7ff f8ca 	bl	800b9c4 <tcp_input_delayed_close>
 800c830:	2800      	cmp	r0, #0
 800c832:	f47f acc3 	bne.w	800c1bc <tcp_input+0x274>
        if (recv_data != NULL) {
 800c836:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c838:	b323      	cbz	r3, 800c884 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c83a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c83c:	b133      	cbz	r3, 800c84c <tcp_input+0x904>
 800c83e:	4b37      	ldr	r3, [pc, #220]	; (800c91c <tcp_input+0x9d4>)
 800c840:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c844:	4936      	ldr	r1, [pc, #216]	; (800c920 <tcp_input+0x9d8>)
 800c846:	4837      	ldr	r0, [pc, #220]	; (800c924 <tcp_input+0x9dc>)
 800c848:	f002 fbc4 	bl	800efd4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c84c:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800c84e:	6baa      	ldr	r2, [r5, #56]	; 0x38
          if (pcb->flags & TF_RXCLOSED) {
 800c850:	f013 0310 	ands.w	r3, r3, #16
 800c854:	d009      	beq.n	800c86a <tcp_input+0x922>
            pbuf_free(recv_data);
 800c856:	4610      	mov	r0, r2
 800c858:	f7fd fdaa 	bl	800a3b0 <pbuf_free>
 800c85c:	e6d7      	b.n	800c60e <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c85e:	4621      	mov	r1, r4
 800c860:	6920      	ldr	r0, [r4, #16]
 800c862:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c864:	300d      	adds	r0, #13
 800c866:	d1de      	bne.n	800c826 <tcp_input+0x8de>
 800c868:	e4a8      	b.n	800c1bc <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c86a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800c86e:	b1f6      	cbz	r6, 800c8ae <tcp_input+0x966>
 800c870:	4621      	mov	r1, r4
 800c872:	6920      	ldr	r0, [r4, #16]
 800c874:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800c876:	f110 0f0d 	cmn.w	r0, #13
 800c87a:	f43f ac9f 	beq.w	800c1bc <tcp_input+0x274>
          if (err != ERR_OK) {
 800c87e:	b108      	cbz	r0, 800c884 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800c880:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c882:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800c884:	7cab      	ldrb	r3, [r5, #18]
 800c886:	0699      	lsls	r1, r3, #26
 800c888:	d505      	bpl.n	800c896 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800c88a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c88c:	b1ab      	cbz	r3, 800c8ba <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c88e:	7b5a      	ldrb	r2, [r3, #13]
 800c890:	f042 0220 	orr.w	r2, r2, #32
 800c894:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c896:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800c898:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800c89a:	63eb      	str	r3, [r5, #60]	; 0x3c
        if (tcp_input_delayed_close(pcb)) {
 800c89c:	f7ff f892 	bl	800b9c4 <tcp_input_delayed_close>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	f47f ac8b 	bne.w	800c1bc <tcp_input+0x274>
        tcp_output(pcb);
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f000 ff2a 	bl	800d700 <tcp_output>
 800c8ac:	e486      	b.n	800c1bc <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c8ae:	4633      	mov	r3, r6
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7fe fd84 	bl	800b3c0 <tcp_recv_null>
 800c8b8:	e7dd      	b.n	800c876 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c8ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c8bc:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800c8c0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c8c4:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800c8c6:	bf1c      	itt	ne
 800c8c8:	3301      	addne	r3, #1
 800c8ca:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c8cc:	2e00      	cmp	r6, #0
 800c8ce:	d0e2      	beq.n	800c896 <tcp_input+0x94e>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	6920      	ldr	r0, [r4, #16]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800c8da:	300d      	adds	r0, #13
 800c8dc:	d1db      	bne.n	800c896 <tcp_input+0x94e>
 800c8de:	e46d      	b.n	800c1bc <tcp_input+0x274>
      if (prev != NULL) {
 800c8e0:	b11c      	cbz	r4, 800c8ea <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c8e4:	6007      	str	r7, [r0, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c8e6:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c8e8:	60fa      	str	r2, [r7, #12]
  if (flags & TCP_RST) {
 800c8ea:	7f2b      	ldrb	r3, [r5, #28]
 800c8ec:	075c      	lsls	r4, r3, #29
 800c8ee:	f53f abe3 	bmi.w	800c0b8 <tcp_input+0x170>
  if (flags & TCP_ACK) {
 800c8f2:	f013 0a10 	ands.w	sl, r3, #16
 800c8f6:	f43f ad1a 	beq.w	800c32e <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8fa:	880b      	ldrh	r3, [r1, #0]
 800c8fc:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c8fe:	6a2a      	ldr	r2, [r5, #32]
 800c900:	e9cd c301 	strd	ip, r3, [sp, #4]
 800c904:	4b08      	ldr	r3, [pc, #32]	; (800c928 <tcp_input+0x9e0>)
 800c906:	4402      	add	r2, r0
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	3304      	adds	r3, #4
 800c90c:	69a9      	ldr	r1, [r5, #24]
 800c90e:	4638      	mov	r0, r7
 800c910:	e4c2      	b.n	800c298 <tcp_input+0x350>
      if (prev != NULL) {
 800c912:	2f00      	cmp	r7, #0
 800c914:	f47f ac1a 	bne.w	800c14c <tcp_input+0x204>
 800c918:	e429      	b.n	800c16e <tcp_input+0x226>
 800c91a:	bf00      	nop
 800c91c:	0801cd84 	.word	0x0801cd84
 800c920:	0801d0d7 	.word	0x0801d0d7
 800c924:	0801a72c 	.word	0x0801a72c
 800c928:	20006ae4 	.word	0x20006ae4

0800c92c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c92c:	4a02      	ldr	r2, [pc, #8]	; (800c938 <tcp_trigger_input_pcb_close+0xc>)
 800c92e:	7c93      	ldrb	r3, [r2, #18]
 800c930:	f043 0310 	orr.w	r3, r3, #16
 800c934:	7493      	strb	r3, [r2, #18]
}
 800c936:	4770      	bx	lr
 800c938:	2000d074 	.word	0x2000d074

0800c93c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c93c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c93e:	4604      	mov	r4, r0
 800c940:	b930      	cbnz	r0, 800c950 <tcp_output_segment_busy+0x14>
 800c942:	4b06      	ldr	r3, [pc, #24]	; (800c95c <tcp_output_segment_busy+0x20>)
 800c944:	f240 529a 	movw	r2, #1434	; 0x59a
 800c948:	4905      	ldr	r1, [pc, #20]	; (800c960 <tcp_output_segment_busy+0x24>)
 800c94a:	4806      	ldr	r0, [pc, #24]	; (800c964 <tcp_output_segment_busy+0x28>)
 800c94c:	f002 fb42 	bl	800efd4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800c954:	3801      	subs	r0, #1
 800c956:	bf18      	it	ne
 800c958:	2001      	movne	r0, #1
 800c95a:	bd10      	pop	{r4, pc}
 800c95c:	0801d0f1 	.word	0x0801d0f1
 800c960:	0801d153 	.word	0x0801d153
 800c964:	0801a72c 	.word	0x0801a72c

0800c968 <tcp_pbuf_prealloc>:
{
 800c968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c96c:	9d08      	ldr	r5, [sp, #32]
 800c96e:	4680      	mov	r8, r0
 800c970:	460c      	mov	r4, r1
 800c972:	4617      	mov	r7, r2
 800c974:	461e      	mov	r6, r3
 800c976:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c97a:	b92d      	cbnz	r5, 800c988 <tcp_pbuf_prealloc+0x20>
 800c97c:	4b1c      	ldr	r3, [pc, #112]	; (800c9f0 <tcp_pbuf_prealloc+0x88>)
 800c97e:	22e9      	movs	r2, #233	; 0xe9
 800c980:	491c      	ldr	r1, [pc, #112]	; (800c9f4 <tcp_pbuf_prealloc+0x8c>)
 800c982:	481d      	ldr	r0, [pc, #116]	; (800c9f8 <tcp_pbuf_prealloc+0x90>)
 800c984:	f002 fb26 	bl	800efd4 <iprintf>
  if (length < max_length) {
 800c988:	42bc      	cmp	r4, r7
 800c98a:	d22e      	bcs.n	800c9ea <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c98c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c990:	079a      	lsls	r2, r3, #30
 800c992:	d409      	bmi.n	800c9a8 <tcp_pbuf_prealloc+0x40>
 800c994:	8b6b      	ldrh	r3, [r5, #26]
 800c996:	065b      	lsls	r3, r3, #25
 800c998:	d427      	bmi.n	800c9ea <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800c99a:	f1b9 0f00 	cmp.w	r9, #0
 800c99e:	d003      	beq.n	800c9a8 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800c9a0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c9a2:	b90b      	cbnz	r3, 800c9a8 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800c9a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c9a6:	b303      	cbz	r3, 800c9ea <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c9a8:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800c9ac:	f025 0103 	bic.w	r1, r5, #3
 800c9b0:	42b9      	cmp	r1, r7
 800c9b2:	460a      	mov	r2, r1
 800c9b4:	bf28      	it	cs
 800c9b6:	463a      	movcs	r2, r7
 800c9b8:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c9ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f7fd fd5e 	bl	800a480 <pbuf_alloc>
  if (p == NULL) {
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b168      	cbz	r0, 800c9e4 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c9c8:	6803      	ldr	r3, [r0, #0]
 800c9ca:	b133      	cbz	r3, 800c9da <tcp_pbuf_prealloc+0x72>
 800c9cc:	4b08      	ldr	r3, [pc, #32]	; (800c9f0 <tcp_pbuf_prealloc+0x88>)
 800c9ce:	f240 120b 	movw	r2, #267	; 0x10b
 800c9d2:	490a      	ldr	r1, [pc, #40]	; (800c9fc <tcp_pbuf_prealloc+0x94>)
 800c9d4:	4808      	ldr	r0, [pc, #32]	; (800c9f8 <tcp_pbuf_prealloc+0x90>)
 800c9d6:	f002 fafd 	bl	800efd4 <iprintf>
  *oversize = p->len - length;
 800c9da:	896b      	ldrh	r3, [r5, #10]
 800c9dc:	1b1b      	subs	r3, r3, r4
 800c9de:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800c9e0:	812c      	strh	r4, [r5, #8]
 800c9e2:	816c      	strh	r4, [r5, #10]
}
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	e7e5      	b.n	800c9ba <tcp_pbuf_prealloc+0x52>
 800c9ee:	bf00      	nop
 800c9f0:	0801d0f1 	.word	0x0801d0f1
 800c9f4:	0801d178 	.word	0x0801d178
 800c9f8:	0801a72c 	.word	0x0801a72c
 800c9fc:	0801d197 	.word	0x0801d197

0800ca00 <tcp_create_segment>:
{
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	460e      	mov	r6, r1
 800ca06:	4690      	mov	r8, r2
 800ca08:	4699      	mov	r9, r3
 800ca0a:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ca0e:	4607      	mov	r7, r0
 800ca10:	b928      	cbnz	r0, 800ca1e <tcp_create_segment+0x1e>
 800ca12:	4b2f      	ldr	r3, [pc, #188]	; (800cad0 <tcp_create_segment+0xd0>)
 800ca14:	22a3      	movs	r2, #163	; 0xa3
 800ca16:	492f      	ldr	r1, [pc, #188]	; (800cad4 <tcp_create_segment+0xd4>)
 800ca18:	482f      	ldr	r0, [pc, #188]	; (800cad8 <tcp_create_segment+0xd8>)
 800ca1a:	f002 fadb 	bl	800efd4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ca1e:	b92e      	cbnz	r6, 800ca2c <tcp_create_segment+0x2c>
 800ca20:	4b2b      	ldr	r3, [pc, #172]	; (800cad0 <tcp_create_segment+0xd0>)
 800ca22:	22a4      	movs	r2, #164	; 0xa4
 800ca24:	492d      	ldr	r1, [pc, #180]	; (800cadc <tcp_create_segment+0xdc>)
 800ca26:	482c      	ldr	r0, [pc, #176]	; (800cad8 <tcp_create_segment+0xd8>)
 800ca28:	f002 fad4 	bl	800efd4 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ca2c:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ca30:	2003      	movs	r0, #3
 800ca32:	f7fd fa87 	bl	8009f44 <memp_malloc>
 800ca36:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ca38:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ca3c:	b928      	cbnz	r0, 800ca4a <tcp_create_segment+0x4a>
    pbuf_free(p);
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7fd fcb6 	bl	800a3b0 <pbuf_free>
}
 800ca44:	4620      	mov	r0, r4
 800ca46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800ca4a:	2300      	movs	r3, #0
  seg->flags = optflags;
 800ca4c:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ca50:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800ca54:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ca58:	8933      	ldrh	r3, [r6, #8]
 800ca5a:	42ab      	cmp	r3, r5
 800ca5c:	d205      	bcs.n	800ca6a <tcp_create_segment+0x6a>
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <tcp_create_segment+0xd0>)
 800ca60:	22b0      	movs	r2, #176	; 0xb0
 800ca62:	491f      	ldr	r1, [pc, #124]	; (800cae0 <tcp_create_segment+0xe0>)
 800ca64:	481c      	ldr	r0, [pc, #112]	; (800cad8 <tcp_create_segment+0xd8>)
 800ca66:	f002 fab5 	bl	800efd4 <iprintf>
  seg->len = p->tot_len - optlen;
 800ca6a:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800ca70:	eba3 030a 	sub.w	r3, r3, sl
 800ca74:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ca76:	f7fd fc63 	bl	800a340 <pbuf_add_header>
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	b120      	cbz	r0, 800ca88 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800ca7e:	4620      	mov	r0, r4
    return NULL;
 800ca80:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800ca82:	f7fe f8c9 	bl	800ac18 <tcp_seg_free>
    return NULL;
 800ca86:	e7dd      	b.n	800ca44 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ca88:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ca8a:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ca8c:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ca8e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ca92:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ca96:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ca9a:	f7fc ff33 	bl	8009904 <lwip_htons>
 800ca9e:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800caa2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800caa6:	8b38      	ldrh	r0, [r7, #24]
 800caa8:	f7fc ff2c 	bl	8009904 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800caac:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800caae:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cab2:	4648      	mov	r0, r9
 800cab4:	f7fc ff29 	bl	800990a <lwip_htonl>
 800cab8:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800caba:	ea45 0008 	orr.w	r0, r5, r8
 800cabe:	68e7      	ldr	r7, [r4, #12]
 800cac0:	f7fc ff20 	bl	8009904 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800cac4:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cac6:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800cac8:	749e      	strb	r6, [r3, #18]
 800caca:	74de      	strb	r6, [r3, #19]
  return seg;
 800cacc:	e7ba      	b.n	800ca44 <tcp_create_segment+0x44>
 800cace:	bf00      	nop
 800cad0:	0801d0f1 	.word	0x0801d0f1
 800cad4:	0801d1ab 	.word	0x0801d1ab
 800cad8:	0801a72c 	.word	0x0801a72c
 800cadc:	0801d1cb 	.word	0x0801d1cb
 800cae0:	0801d1ec 	.word	0x0801d1ec

0800cae4 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cae4:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800cae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800caea:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800caec:	4606      	mov	r6, r0
 800caee:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800caf0:	2022      	movs	r0, #34	; 0x22
 800caf2:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800caf6:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800caf8:	f7fd fcc2 	bl	800a480 <pbuf_alloc>
  if (p != NULL) {
 800cafc:	4605      	mov	r5, r0
 800cafe:	b348      	cbz	r0, 800cb54 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cb00:	8943      	ldrh	r3, [r0, #10]
 800cb02:	2b13      	cmp	r3, #19
 800cb04:	d806      	bhi.n	800cb14 <tcp_output_alloc_header_common.constprop.0+0x30>
 800cb06:	4b15      	ldr	r3, [pc, #84]	; (800cb5c <tcp_output_alloc_header_common.constprop.0+0x78>)
 800cb08:	f240 7223 	movw	r2, #1827	; 0x723
 800cb0c:	4914      	ldr	r1, [pc, #80]	; (800cb60 <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800cb0e:	4815      	ldr	r0, [pc, #84]	; (800cb64 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800cb10:	f002 fa60 	bl	800efd4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cb14:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800cb16:	4640      	mov	r0, r8
 800cb18:	f7fc fef4 	bl	8009904 <lwip_htons>
 800cb1c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cb1e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800cb22:	f7fc feef 	bl	8009904 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800cb26:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800cb28:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7fc feed 	bl	800990a <lwip_htonl>
 800cb30:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cb32:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800cb36:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800cb3a:	f7fc fee3 	bl	8009904 <lwip_htons>
 800cb3e:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cb40:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800cb44:	f7fc fede 	bl	8009904 <lwip_htons>
    tcphdr->chksum = 0;
 800cb48:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800cb4a:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800cb4c:	7423      	strb	r3, [r4, #16]
 800cb4e:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800cb50:	74a3      	strb	r3, [r4, #18]
 800cb52:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800cb54:	4628      	mov	r0, r5
 800cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0801d0f1 	.word	0x0801d0f1
 800cb60:	0801d201 	.word	0x0801d201
 800cb64:	0801a72c 	.word	0x0801a72c

0800cb68 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800cb68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cb6e:	4604      	mov	r4, r0
 800cb70:	b930      	cbnz	r0, 800cb80 <tcp_output_alloc_header.constprop.0+0x18>
 800cb72:	4b0d      	ldr	r3, [pc, #52]	; (800cba8 <tcp_output_alloc_header.constprop.0+0x40>)
 800cb74:	f240 7242 	movw	r2, #1858	; 0x742
 800cb78:	490c      	ldr	r1, [pc, #48]	; (800cbac <tcp_output_alloc_header.constprop.0+0x44>)
 800cb7a:	480d      	ldr	r0, [pc, #52]	; (800cbb0 <tcp_output_alloc_header.constprop.0+0x48>)
 800cb7c:	f002 fa2a 	bl	800efd4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cb80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cb82:	4632      	mov	r2, r6
 800cb84:	4629      	mov	r1, r5
 800cb86:	9302      	str	r3, [sp, #8]
 800cb88:	2310      	movs	r3, #16
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	8b23      	ldrh	r3, [r4, #24]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	8ae3      	ldrh	r3, [r4, #22]
 800cb92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cb94:	f7ff ffa6 	bl	800cae4 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cb98:	b118      	cbz	r0, 800cba2 <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cb9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800cb9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb9e:	4413      	add	r3, r2
 800cba0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800cba2:	b004      	add	sp, #16
 800cba4:	bd70      	pop	{r4, r5, r6, pc}
 800cba6:	bf00      	nop
 800cba8:	0801d0f1 	.word	0x0801d0f1
 800cbac:	0801d22f 	.word	0x0801d22f
 800cbb0:	0801a72c 	.word	0x0801a72c

0800cbb4 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cbb4:	b930      	cbnz	r0, 800cbc4 <tcp_output_fill_options.constprop.0+0x10>
 800cbb6:	4b04      	ldr	r3, [pc, #16]	; (800cbc8 <tcp_output_fill_options.constprop.0+0x14>)
 800cbb8:	f240 7256 	movw	r2, #1878	; 0x756
 800cbbc:	4903      	ldr	r1, [pc, #12]	; (800cbcc <tcp_output_fill_options.constprop.0+0x18>)
 800cbbe:	4804      	ldr	r0, [pc, #16]	; (800cbd0 <tcp_output_fill_options.constprop.0+0x1c>)
 800cbc0:	f002 ba08 	b.w	800efd4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	0801d0f1 	.word	0x0801d0f1
 800cbcc:	0801d254 	.word	0x0801d254
 800cbd0:	0801a72c 	.word	0x0801a72c

0800cbd4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	b085      	sub	sp, #20
 800cbda:	4617      	mov	r7, r2
 800cbdc:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cbde:	460d      	mov	r5, r1
 800cbe0:	b931      	cbnz	r1, 800cbf0 <tcp_output_control_segment+0x1c>
 800cbe2:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <tcp_output_control_segment+0x64>)
 800cbe4:	f240 7287 	movw	r2, #1927	; 0x787
 800cbe8:	4914      	ldr	r1, [pc, #80]	; (800cc3c <tcp_output_control_segment+0x68>)
 800cbea:	4815      	ldr	r0, [pc, #84]	; (800cc40 <tcp_output_control_segment+0x6c>)
 800cbec:	f002 f9f2 	bl	800efd4 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cbf0:	b164      	cbz	r4, 800cc0c <tcp_output_control_segment+0x38>
 800cbf2:	7a20      	ldrb	r0, [r4, #8]
 800cbf4:	b150      	cbz	r0, 800cc0c <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800cbf6:	f7fd fb21 	bl	800a23c <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800cbfa:	b968      	cbnz	r0, 800cc18 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800cbfc:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cc00:	4628      	mov	r0, r5
 800cc02:	f7fd fbd5 	bl	800a3b0 <pbuf_free>
  return err;
}
 800cc06:	4620      	mov	r0, r4
 800cc08:	b005      	add	sp, #20
 800cc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f7fc f905 	bl	8008e1c <ip4_route>
  if (netif == NULL) {
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d0f2      	beq.n	800cbfc <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800cc16:	b164      	cbz	r4, 800cc32 <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800cc18:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800cc1a:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cc1c:	2206      	movs	r2, #6
 800cc1e:	9002      	str	r0, [sp, #8]
 800cc20:	4639      	mov	r1, r7
 800cc22:	4628      	mov	r0, r5
 800cc24:	e9cd 4200 	strd	r4, r2, [sp]
 800cc28:	4632      	mov	r2, r6
 800cc2a:	f7fc fa65 	bl	80090f8 <ip4_output_if>
 800cc2e:	4604      	mov	r4, r0
 800cc30:	e7e6      	b.n	800cc00 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800cc32:	23ff      	movs	r3, #255	; 0xff
 800cc34:	e7f2      	b.n	800cc1c <tcp_output_control_segment+0x48>
 800cc36:	bf00      	nop
 800cc38:	0801d0f1 	.word	0x0801d0f1
 800cc3c:	0801d27a 	.word	0x0801d27a
 800cc40:	0801a72c 	.word	0x0801a72c

0800cc44 <tcp_write>:
{
 800cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc48:	ed2d 8b02 	vpush	{d8}
 800cc4c:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc4e:	4604      	mov	r4, r0
{
 800cc50:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800cc52:	2300      	movs	r3, #0
{
 800cc54:	9107      	str	r1, [sp, #28]
 800cc56:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800cc58:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc5c:	b968      	cbnz	r0, 800cc7a <tcp_write+0x36>
 800cc5e:	4baa      	ldr	r3, [pc, #680]	; (800cf08 <tcp_write+0x2c4>)
 800cc60:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800cc64:	49a9      	ldr	r1, [pc, #676]	; (800cf0c <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cc66:	48aa      	ldr	r0, [pc, #680]	; (800cf10 <tcp_write+0x2cc>)
 800cc68:	f002 f9b4 	bl	800efd4 <iprintf>
 800cc6c:	f06f 000f 	mvn.w	r0, #15
}
 800cc70:	b00f      	add	sp, #60	; 0x3c
 800cc72:	ecbd 8b02 	vpop	{d8}
 800cc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cc7a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cc7e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800cc80:	085b      	lsrs	r3, r3, #1
 800cc82:	4293      	cmp	r3, r2
 800cc84:	bf28      	it	cs
 800cc86:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bf08      	it	eq
 800cc8c:	4613      	moveq	r3, r2
 800cc8e:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cc90:	9b07      	ldr	r3, [sp, #28]
 800cc92:	b923      	cbnz	r3, 800cc9e <tcp_write+0x5a>
 800cc94:	4b9c      	ldr	r3, [pc, #624]	; (800cf08 <tcp_write+0x2c4>)
 800cc96:	f240 12ad 	movw	r2, #429	; 0x1ad
 800cc9a:	499e      	ldr	r1, [pc, #632]	; (800cf14 <tcp_write+0x2d0>)
 800cc9c:	e7e3      	b.n	800cc66 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800cc9e:	7d03      	ldrb	r3, [r0, #20]
 800cca0:	2b07      	cmp	r3, #7
 800cca2:	d003      	beq.n	800ccac <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800cca4:	3b02      	subs	r3, #2
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	f200 8259 	bhi.w	800d15e <tcp_write+0x51a>
  } else if (len == 0) {
 800ccac:	9b04      	ldr	r3, [sp, #16]
 800ccae:	b1db      	cbz	r3, 800cce8 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800ccb0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800ccb4:	9a04      	ldr	r2, [sp, #16]
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d206      	bcs.n	800ccc8 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ccba:	8b63      	ldrh	r3, [r4, #26]
 800ccbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccc0:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800ccc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc6:	e7d3      	b.n	800cc70 <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ccc8:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800cccc:	2a07      	cmp	r2, #7
 800ccce:	d8f4      	bhi.n	800ccba <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ccd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800ccd2:	b302      	cbz	r2, 800cd16 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ccd4:	b943      	cbnz	r3, 800cce8 <tcp_write+0xa4>
 800ccd6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ccd8:	b933      	cbnz	r3, 800cce8 <tcp_write+0xa4>
 800ccda:	4b8b      	ldr	r3, [pc, #556]	; (800cf08 <tcp_write+0x2c4>)
 800ccdc:	f240 1255 	movw	r2, #341	; 0x155
 800cce0:	498d      	ldr	r1, [pc, #564]	; (800cf18 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cce2:	488b      	ldr	r0, [pc, #556]	; (800cf10 <tcp_write+0x2cc>)
 800cce4:	f002 f976 	bl	800efd4 <iprintf>
  queuelen = pcb->snd_queuelen;
 800cce8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800ccec:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800ccee:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800ccf0:	b9de      	cbnz	r6, 800cd2a <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ccf2:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800ccf6:	2f00      	cmp	r7, #0
 800ccf8:	f000 81ba 	beq.w	800d070 <tcp_write+0x42c>
 800ccfc:	4b82      	ldr	r3, [pc, #520]	; (800cf08 <tcp_write+0x2c4>)
 800ccfe:	f240 224a 	movw	r2, #586	; 0x24a
 800cd02:	4986      	ldr	r1, [pc, #536]	; (800cf1c <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cd04:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cd06:	4882      	ldr	r0, [pc, #520]	; (800cf10 <tcp_write+0x2cc>)
  struct pbuf *concat_p = NULL;
 800cd08:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800cd0a:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800cd0c:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800cd0e:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cd10:	f002 f960 	bl	800efd4 <iprintf>
 800cd14:	e088      	b.n	800ce28 <tcp_write+0x1e4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cd16:	b913      	cbnz	r3, 800cd1e <tcp_write+0xda>
 800cd18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0e4      	beq.n	800cce8 <tcp_write+0xa4>
 800cd1e:	4b7a      	ldr	r3, [pc, #488]	; (800cf08 <tcp_write+0x2c4>)
 800cd20:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800cd24:	497e      	ldr	r1, [pc, #504]	; (800cf20 <tcp_write+0x2dc>)
 800cd26:	e7dc      	b.n	800cce2 <tcp_write+0x9e>
 800cd28:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cd2a:	f8d6 a000 	ldr.w	sl, [r6]
 800cd2e:	46b0      	mov	r8, r6
 800cd30:	f1ba 0f00 	cmp.w	sl, #0
 800cd34:	d1f8      	bne.n	800cd28 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cd36:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cd38:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cd3a:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cd3c:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cd3e:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cd42:	442b      	add	r3, r5
 800cd44:	429a      	cmp	r2, r3
 800cd46:	da06      	bge.n	800cd56 <tcp_write+0x112>
 800cd48:	4b6f      	ldr	r3, [pc, #444]	; (800cf08 <tcp_write+0x2c4>)
 800cd4a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cd4e:	4975      	ldr	r1, [pc, #468]	; (800cf24 <tcp_write+0x2e0>)
 800cd50:	486f      	ldr	r0, [pc, #444]	; (800cf10 <tcp_write+0x2cc>)
 800cd52:	f002 f93f 	bl	800efd4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cd56:	8937      	ldrh	r7, [r6, #8]
 800cd58:	9b06      	ldr	r3, [sp, #24]
 800cd5a:	1bdf      	subs	r7, r3, r7
 800cd5c:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800cd5e:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cd62:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800cd64:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800cd68:	2d00      	cmp	r5, #0
 800cd6a:	d066      	beq.n	800ce3a <tcp_write+0x1f6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cd6c:	42bd      	cmp	r5, r7
 800cd6e:	d906      	bls.n	800cd7e <tcp_write+0x13a>
 800cd70:	4b65      	ldr	r3, [pc, #404]	; (800cf08 <tcp_write+0x2c4>)
 800cd72:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800cd76:	496c      	ldr	r1, [pc, #432]	; (800cf28 <tcp_write+0x2e4>)
 800cd78:	4865      	ldr	r0, [pc, #404]	; (800cf10 <tcp_write+0x2cc>)
 800cd7a:	f002 f92b 	bl	800efd4 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cd7e:	9d04      	ldr	r5, [sp, #16]
 800cd80:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800cd84:	429d      	cmp	r5, r3
 800cd86:	bf28      	it	cs
 800cd88:	461d      	movcs	r5, r3
 800cd8a:	42bd      	cmp	r5, r7
 800cd8c:	bf28      	it	cs
 800cd8e:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800cd90:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800cd92:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800cd94:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800cd96:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800cd98:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cd9c:	b153      	cbz	r3, 800cdb4 <tcp_write+0x170>
 800cd9e:	9b04      	ldr	r3, [sp, #16]
 800cda0:	42ab      	cmp	r3, r5
 800cda2:	f000 816a 	beq.w	800d07a <tcp_write+0x436>
 800cda6:	4b58      	ldr	r3, [pc, #352]	; (800cf08 <tcp_write+0x2c4>)
 800cda8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdac:	495f      	ldr	r1, [pc, #380]	; (800cf2c <tcp_write+0x2e8>)
 800cdae:	4858      	ldr	r0, [pc, #352]	; (800cf10 <tcp_write+0x2cc>)
 800cdb0:	f002 f910 	bl	800efd4 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cdb4:	9b04      	ldr	r3, [sp, #16]
 800cdb6:	429d      	cmp	r5, r3
 800cdb8:	f080 815f 	bcs.w	800d07a <tcp_write+0x436>
 800cdbc:	2f00      	cmp	r7, #0
 800cdbe:	f000 8154 	beq.w	800d06a <tcp_write+0x426>
 800cdc2:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800cdc6:	f1b9 0f00 	cmp.w	r9, #0
 800cdca:	f000 814f 	beq.w	800d06c <tcp_write+0x428>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cdce:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cdd2:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cdd4:	45b9      	cmp	r9, r7
 800cdd6:	bfa8      	it	ge
 800cdd8:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cdda:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cddc:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cde0:	d52d      	bpl.n	800ce3e <tcp_write+0x1fa>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cde2:	2301      	movs	r3, #1
 800cde4:	463a      	mov	r2, r7
 800cde6:	4631      	mov	r1, r6
 800cde8:	2000      	movs	r0, #0
 800cdea:	9302      	str	r3, [sp, #8]
 800cdec:	9b08      	ldr	r3, [sp, #32]
 800cdee:	e9cd 4300 	strd	r4, r3, [sp]
 800cdf2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cdf6:	f7ff fdb7 	bl	800c968 <tcp_pbuf_prealloc>
 800cdfa:	4683      	mov	fp, r0
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	f000 81ab 	beq.w	800d158 <tcp_write+0x514>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ce02:	9b07      	ldr	r3, [sp, #28]
 800ce04:	4632      	mov	r2, r6
 800ce06:	6840      	ldr	r0, [r0, #4]
 800ce08:	1959      	adds	r1, r3, r5
 800ce0a:	f001 fc49 	bl	800e6a0 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800ce0e:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800ce10:	f7fd fc0a 	bl	800a628 <pbuf_clen>
 800ce14:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800ce16:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800ce1a:	4403      	add	r3, r0
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800ce20:	19af      	adds	r7, r5, r6
 800ce22:	46da      	mov	sl, fp
 800ce24:	4646      	mov	r6, r8
 800ce26:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ce28:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800ce2a:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ce2e:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800ce32:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ce36:	930a      	str	r3, [sp, #40]	; 0x28
 800ce38:	e0e6      	b.n	800d008 <tcp_write+0x3c4>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ce3a:	462e      	mov	r6, r5
 800ce3c:	e7ba      	b.n	800cdb4 <tcp_write+0x170>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ce3e:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ce42:	465a      	mov	r2, fp
 800ce44:	f8db b000 	ldr.w	fp, [fp]
 800ce48:	f1bb 0f00 	cmp.w	fp, #0
 800ce4c:	d1f9      	bne.n	800ce42 <tcp_write+0x1fe>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ce4e:	7b13      	ldrb	r3, [r2, #12]
 800ce50:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800ce54:	d10f      	bne.n	800ce76 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ce56:	8951      	ldrh	r1, [r2, #10]
 800ce58:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ce5a:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ce5c:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d109      	bne.n	800ce76 <tcp_write+0x232>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ce62:	b135      	cbz	r5, 800ce72 <tcp_write+0x22e>
 800ce64:	4b28      	ldr	r3, [pc, #160]	; (800cf08 <tcp_write+0x2c4>)
 800ce66:	f240 2231 	movw	r2, #561	; 0x231
 800ce6a:	4931      	ldr	r1, [pc, #196]	; (800cf30 <tcp_write+0x2ec>)
 800ce6c:	4828      	ldr	r0, [pc, #160]	; (800cf10 <tcp_write+0x2cc>)
 800ce6e:	f002 f8b1 	bl	800efd4 <iprintf>
          extendlen = seglen;
 800ce72:	46b1      	mov	r9, r6
 800ce74:	e7d4      	b.n	800ce20 <tcp_write+0x1dc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ce76:	2201      	movs	r2, #1
 800ce78:	4631      	mov	r1, r6
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	f7fd fb00 	bl	800a480 <pbuf_alloc>
 800ce80:	4683      	mov	fp, r0
 800ce82:	2800      	cmp	r0, #0
 800ce84:	f000 8168 	beq.w	800d158 <tcp_write+0x514>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ce88:	9b07      	ldr	r3, [sp, #28]
 800ce8a:	442b      	add	r3, r5
 800ce8c:	6043      	str	r3, [r0, #4]
 800ce8e:	e7bf      	b.n	800ce10 <tcp_write+0x1cc>
    u16_t left = len - pos;
 800ce90:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ce92:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800ce94:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	bf28      	it	cs
 800ce9c:	4613      	movcs	r3, r2
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d046      	beq.n	800cf38 <tcp_write+0x2f4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ceaa:	fabb f38b 	clz	r3, fp
 800ceae:	ee18 1a10 	vmov	r1, s16
 800ceb2:	2036      	movs	r0, #54	; 0x36
 800ceb4:	095b      	lsrs	r3, r3, #5
 800ceb6:	9302      	str	r3, [sp, #8]
 800ceb8:	9b08      	ldr	r3, [sp, #32]
 800ceba:	e9cd 4300 	strd	r4, r3, [sp]
 800cebe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cec2:	f7ff fd51 	bl	800c968 <tcp_pbuf_prealloc>
 800cec6:	4606      	mov	r6, r0
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d056      	beq.n	800cf7a <tcp_write+0x336>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cecc:	8943      	ldrh	r3, [r0, #10]
 800cece:	ee18 2a10 	vmov	r2, s16
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d206      	bcs.n	800cee4 <tcp_write+0x2a0>
 800ced6:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <tcp_write+0x2c4>)
 800ced8:	f240 2266 	movw	r2, #614	; 0x266
 800cedc:	4915      	ldr	r1, [pc, #84]	; (800cf34 <tcp_write+0x2f0>)
 800cede:	480c      	ldr	r0, [pc, #48]	; (800cf10 <tcp_write+0x2cc>)
 800cee0:	f002 f878 	bl	800efd4 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	ee18 2a10 	vmov	r2, s16
 800ceea:	6870      	ldr	r0, [r6, #4]
 800ceec:	19d9      	adds	r1, r3, r7
 800ceee:	f001 fbd7 	bl	800e6a0 <memcpy>
    queuelen += pbuf_clen(p);
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7fd fb98 	bl	800a628 <pbuf_clen>
 800cef8:	9b05      	ldr	r3, [sp, #20]
 800cefa:	4403      	add	r3, r0
 800cefc:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cefe:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800cf00:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cf02:	d963      	bls.n	800cfcc <tcp_write+0x388>
      pbuf_free(p);
 800cf04:	4630      	mov	r0, r6
 800cf06:	e036      	b.n	800cf76 <tcp_write+0x332>
 800cf08:	0801d0f1 	.word	0x0801d0f1
 800cf0c:	0801d2a3 	.word	0x0801d2a3
 800cf10:	0801a72c 	.word	0x0801a72c
 800cf14:	0801d2ba 	.word	0x0801d2ba
 800cf18:	0801d2eb 	.word	0x0801d2eb
 800cf1c:	0801d3d5 	.word	0x0801d3d5
 800cf20:	0801d325 	.word	0x0801d325
 800cf24:	0801d357 	.word	0x0801d357
 800cf28:	0801d36e 	.word	0x0801d36e
 800cf2c:	0801d38e 	.word	0x0801d38e
 800cf30:	0801d3ac 	.word	0x0801d3ac
 800cf34:	0801d404 	.word	0x0801d404
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cf38:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800cf3c:	b133      	cbz	r3, 800cf4c <tcp_write+0x308>
 800cf3e:	4b89      	ldr	r3, [pc, #548]	; (800d164 <tcp_write+0x520>)
 800cf40:	f240 2271 	movw	r2, #625	; 0x271
 800cf44:	4988      	ldr	r1, [pc, #544]	; (800d168 <tcp_write+0x524>)
 800cf46:	4889      	ldr	r0, [pc, #548]	; (800d16c <tcp_write+0x528>)
 800cf48:	f002 f844 	bl	800efd4 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	ee18 1a10 	vmov	r1, s16
 800cf52:	2036      	movs	r0, #54	; 0x36
 800cf54:	f7fd fa94 	bl	800a480 <pbuf_alloc>
 800cf58:	b178      	cbz	r0, 800cf7a <tcp_write+0x336>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cf5a:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cf5c:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cf5e:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf60:	443a      	add	r2, r7
 800cf62:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cf64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf68:	2036      	movs	r0, #54	; 0x36
 800cf6a:	f7fd fa89 	bl	800a480 <pbuf_alloc>
 800cf6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf70:	4606      	mov	r6, r0
 800cf72:	bb38      	cbnz	r0, 800cfc4 <tcp_write+0x380>
        pbuf_free(p2);
 800cf74:	4618      	mov	r0, r3
      pbuf_free(p);
 800cf76:	f7fd fa1b 	bl	800a3b0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf7a:	8b63      	ldrh	r3, [r4, #26]
 800cf7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf80:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800cf82:	f1ba 0f00 	cmp.w	sl, #0
 800cf86:	d002      	beq.n	800cf8e <tcp_write+0x34a>
    pbuf_free(concat_p);
 800cf88:	4650      	mov	r0, sl
 800cf8a:	f7fd fa11 	bl	800a3b0 <pbuf_free>
  if (queue != NULL) {
 800cf8e:	f1bb 0f00 	cmp.w	fp, #0
 800cf92:	d002      	beq.n	800cf9a <tcp_write+0x356>
    tcp_segs_free(queue);
 800cf94:	4658      	mov	r0, fp
 800cf96:	f7fd fe4d 	bl	800ac34 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800cf9a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f43f ae8f 	beq.w	800ccc2 <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cfa4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f47f ae8b 	bne.w	800ccc2 <tcp_write+0x7e>
 800cfac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	f47f ae87 	bne.w	800ccc2 <tcp_write+0x7e>
 800cfb4:	4b6b      	ldr	r3, [pc, #428]	; (800d164 <tcp_write+0x520>)
 800cfb6:	f240 3227 	movw	r2, #807	; 0x327
 800cfba:	496d      	ldr	r1, [pc, #436]	; (800d170 <tcp_write+0x52c>)
 800cfbc:	486b      	ldr	r0, [pc, #428]	; (800d16c <tcp_write+0x528>)
 800cfbe:	f002 f809 	bl	800efd4 <iprintf>
 800cfc2:	e67e      	b.n	800ccc2 <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	f7fd fb53 	bl	800a670 <pbuf_cat>
 800cfca:	e792      	b.n	800cef2 <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cfcc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cfce:	2200      	movs	r2, #0
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	443b      	add	r3, r7
 800cfd6:	9200      	str	r2, [sp, #0]
 800cfd8:	f7ff fd12 	bl	800ca00 <tcp_create_segment>
 800cfdc:	4606      	mov	r6, r0
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d0cb      	beq.n	800cf7a <tcp_write+0x336>
    if (queue == NULL) {
 800cfe2:	f1bb 0f00 	cmp.w	fp, #0
 800cfe6:	d03e      	beq.n	800d066 <tcp_write+0x422>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfea:	b933      	cbnz	r3, 800cffa <tcp_write+0x3b6>
 800cfec:	4b5d      	ldr	r3, [pc, #372]	; (800d164 <tcp_write+0x520>)
 800cfee:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cff2:	4960      	ldr	r1, [pc, #384]	; (800d174 <tcp_write+0x530>)
 800cff4:	485d      	ldr	r0, [pc, #372]	; (800d16c <tcp_write+0x528>)
 800cff6:	f001 ffed 	bl	800efd4 <iprintf>
      prev_seg->next = seg;
 800cffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffc:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800cffe:	ee18 3a10 	vmov	r3, s16
 800d002:	9609      	str	r6, [sp, #36]	; 0x24
 800d004:	441f      	add	r7, r3
 800d006:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800d008:	9b04      	ldr	r3, [sp, #16]
 800d00a:	429f      	cmp	r7, r3
 800d00c:	f4ff af40 	bcc.w	800ce90 <tcp_write+0x24c>
 800d010:	4657      	mov	r7, sl
 800d012:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800d014:	b14d      	cbz	r5, 800d02a <tcp_write+0x3e6>
    for (p = last_unsent->p; p; p = p->next) {
 800d016:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d01a:	f1bb 0f00 	cmp.w	fp, #0
 800d01e:	d12f      	bne.n	800d080 <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800d020:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800d024:	441d      	add	r5, r3
 800d026:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800d02a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d02e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800d032:	2f00      	cmp	r7, #0
 800d034:	d03d      	beq.n	800d0b2 <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d036:	f1b8 0f00 	cmp.w	r8, #0
 800d03a:	d106      	bne.n	800d04a <tcp_write+0x406>
 800d03c:	4b49      	ldr	r3, [pc, #292]	; (800d164 <tcp_write+0x520>)
 800d03e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d042:	494d      	ldr	r1, [pc, #308]	; (800d178 <tcp_write+0x534>)
 800d044:	4849      	ldr	r0, [pc, #292]	; (800d16c <tcp_write+0x528>)
 800d046:	f001 ffc5 	bl	800efd4 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800d04a:	4639      	mov	r1, r7
 800d04c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d050:	f7fd fb0e 	bl	800a670 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d054:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800d058:	893a      	ldrh	r2, [r7, #8]
 800d05a:	4413      	add	r3, r2
 800d05c:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800d060:	f8c8 a000 	str.w	sl, [r8]
 800d064:	e04d      	b.n	800d102 <tcp_write+0x4be>
 800d066:	4683      	mov	fp, r0
 800d068:	e7c9      	b.n	800cffe <tcp_write+0x3ba>
  u16_t extendlen = 0;
 800d06a:	46b9      	mov	r9, r7
 800d06c:	462f      	mov	r7, r5
 800d06e:	e6db      	b.n	800ce28 <tcp_write+0x1e4>
 800d070:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800d072:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d074:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800d076:	46ba      	mov	sl, r7
 800d078:	e6d6      	b.n	800ce28 <tcp_write+0x1e4>
 800d07a:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800d07c:	46b9      	mov	r9, r7
 800d07e:	e7c9      	b.n	800d014 <tcp_write+0x3d0>
      p->tot_len += oversize_used;
 800d080:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800d084:	442b      	add	r3, r5
 800d086:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800d08a:	f8db 3000 	ldr.w	r3, [fp]
 800d08e:	b96b      	cbnz	r3, 800d0ac <tcp_write+0x468>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d090:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d094:	462a      	mov	r2, r5
 800d096:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800d09a:	9907      	ldr	r1, [sp, #28]
 800d09c:	4418      	add	r0, r3
 800d09e:	f001 faff 	bl	800e6a0 <memcpy>
        p->len += oversize_used;
 800d0a2:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800d0a6:	442b      	add	r3, r5
 800d0a8:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d0ac:	f8db b000 	ldr.w	fp, [fp]
 800d0b0:	e7b3      	b.n	800d01a <tcp_write+0x3d6>
  } else if (extendlen > 0) {
 800d0b2:	f1b9 0f00 	cmp.w	r9, #0
 800d0b6:	d01f      	beq.n	800d0f8 <tcp_write+0x4b4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d0b8:	f1b8 0f00 	cmp.w	r8, #0
 800d0bc:	d002      	beq.n	800d0c4 <tcp_write+0x480>
 800d0be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0c2:	b933      	cbnz	r3, 800d0d2 <tcp_write+0x48e>
 800d0c4:	4b27      	ldr	r3, [pc, #156]	; (800d164 <tcp_write+0x520>)
 800d0c6:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d0ca:	492c      	ldr	r1, [pc, #176]	; (800d17c <tcp_write+0x538>)
 800d0cc:	4827      	ldr	r0, [pc, #156]	; (800d16c <tcp_write+0x528>)
 800d0ce:	f001 ff81 	bl	800efd4 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d0d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800d0d6:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d0d8:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800d0da:	444a      	add	r2, r9
 800d0dc:	b292      	uxth	r2, r2
 800d0de:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d0e0:	b941      	cbnz	r1, 800d0f4 <tcp_write+0x4b0>
    p->len += extendlen;
 800d0e2:	895a      	ldrh	r2, [r3, #10]
 800d0e4:	444a      	add	r2, r9
 800d0e6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d0e8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800d0ec:	4499      	add	r9, r3
 800d0ee:	f8a8 9008 	strh.w	r9, [r8, #8]
 800d0f2:	e7b5      	b.n	800d060 <tcp_write+0x41c>
      p->tot_len += extendlen;
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	e7ee      	b.n	800d0d6 <tcp_write+0x492>
  if (last_unsent == NULL) {
 800d0f8:	f1b8 0f00 	cmp.w	r8, #0
 800d0fc:	d1b0      	bne.n	800d060 <tcp_write+0x41c>
    pcb->unsent = queue;
 800d0fe:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800d102:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d104:	9a04      	ldr	r2, [sp, #16]
 800d106:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800d108:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800d10c:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d10e:	9b04      	ldr	r3, [sp, #16]
 800d110:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800d112:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800d114:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d118:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800d11c:	b153      	cbz	r3, 800d134 <tcp_write+0x4f0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d11e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d120:	b943      	cbnz	r3, 800d134 <tcp_write+0x4f0>
 800d122:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d124:	b933      	cbnz	r3, 800d134 <tcp_write+0x4f0>
 800d126:	4b0f      	ldr	r3, [pc, #60]	; (800d164 <tcp_write+0x520>)
 800d128:	f240 3212 	movw	r2, #786	; 0x312
 800d12c:	4910      	ldr	r1, [pc, #64]	; (800d170 <tcp_write+0x52c>)
 800d12e:	480f      	ldr	r0, [pc, #60]	; (800d16c <tcp_write+0x528>)
 800d130:	f001 ff50 	bl	800efd4 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d134:	b176      	cbz	r6, 800d154 <tcp_write+0x510>
 800d136:	68f0      	ldr	r0, [r6, #12]
 800d138:	2800      	cmp	r0, #0
 800d13a:	f43f ad99 	beq.w	800cc70 <tcp_write+0x2c>
 800d13e:	9b08      	ldr	r3, [sp, #32]
 800d140:	f013 0402 	ands.w	r4, r3, #2
 800d144:	d106      	bne.n	800d154 <tcp_write+0x510>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d146:	8985      	ldrh	r5, [r0, #12]
 800d148:	2008      	movs	r0, #8
 800d14a:	f7fc fbdb 	bl	8009904 <lwip_htons>
 800d14e:	68f3      	ldr	r3, [r6, #12]
 800d150:	4328      	orrs	r0, r5
 800d152:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800d154:	2000      	movs	r0, #0
 800d156:	e58b      	b.n	800cc70 <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d158:	f04f 0b00 	mov.w	fp, #0
 800d15c:	e70d      	b.n	800cf7a <tcp_write+0x336>
    return ERR_CONN;
 800d15e:	f06f 000a 	mvn.w	r0, #10
 800d162:	e585      	b.n	800cc70 <tcp_write+0x2c>
 800d164:	0801d0f1 	.word	0x0801d0f1
 800d168:	0801d442 	.word	0x0801d442
 800d16c:	0801a72c 	.word	0x0801a72c
 800d170:	0801d4ce 	.word	0x0801d4ce
 800d174:	0801d450 	.word	0x0801d450
 800d178:	0801d461 	.word	0x0801d461
 800d17c:	0801d499 	.word	0x0801d499

0800d180 <tcp_split_unsent_seg>:
{
 800d180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d186:	4606      	mov	r6, r0
 800d188:	b930      	cbnz	r0, 800d198 <tcp_split_unsent_seg+0x18>
 800d18a:	4b5d      	ldr	r3, [pc, #372]	; (800d300 <tcp_split_unsent_seg+0x180>)
 800d18c:	f240 324b 	movw	r2, #843	; 0x34b
 800d190:	495c      	ldr	r1, [pc, #368]	; (800d304 <tcp_split_unsent_seg+0x184>)
 800d192:	485d      	ldr	r0, [pc, #372]	; (800d308 <tcp_split_unsent_seg+0x188>)
 800d194:	f001 ff1e 	bl	800efd4 <iprintf>
  useg = pcb->unsent;
 800d198:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800d19a:	b914      	cbnz	r4, 800d1a2 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800d19c:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a0:	e009      	b.n	800d1b6 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800d1a2:	b95d      	cbnz	r5, 800d1bc <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d1a4:	4b56      	ldr	r3, [pc, #344]	; (800d300 <tcp_split_unsent_seg+0x180>)
 800d1a6:	f240 3253 	movw	r2, #851	; 0x353
 800d1aa:	4958      	ldr	r1, [pc, #352]	; (800d30c <tcp_split_unsent_seg+0x18c>)
 800d1ac:	4856      	ldr	r0, [pc, #344]	; (800d308 <tcp_split_unsent_seg+0x188>)
 800d1ae:	f001 ff11 	bl	800efd4 <iprintf>
    return ERR_VAL;
 800d1b2:	f06f 0005 	mvn.w	r0, #5
}
 800d1b6:	b003      	add	sp, #12
 800d1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800d1bc:	8923      	ldrh	r3, [r4, #8]
 800d1be:	42ab      	cmp	r3, r5
 800d1c0:	d801      	bhi.n	800d1c6 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	e7f7      	b.n	800d1b6 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d1c6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800d1c8:	42ab      	cmp	r3, r5
 800d1ca:	d20f      	bcs.n	800d1ec <tcp_split_unsent_seg+0x6c>
 800d1cc:	4b4c      	ldr	r3, [pc, #304]	; (800d300 <tcp_split_unsent_seg+0x180>)
 800d1ce:	f240 325b 	movw	r2, #859	; 0x35b
 800d1d2:	494f      	ldr	r1, [pc, #316]	; (800d310 <tcp_split_unsent_seg+0x190>)
 800d1d4:	484c      	ldr	r0, [pc, #304]	; (800d308 <tcp_split_unsent_seg+0x188>)
 800d1d6:	f001 fefd 	bl	800efd4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d1da:	8923      	ldrh	r3, [r4, #8]
 800d1dc:	b933      	cbnz	r3, 800d1ec <tcp_split_unsent_seg+0x6c>
 800d1de:	4b48      	ldr	r3, [pc, #288]	; (800d300 <tcp_split_unsent_seg+0x180>)
 800d1e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d1e4:	494b      	ldr	r1, [pc, #300]	; (800d314 <tcp_split_unsent_seg+0x194>)
 800d1e6:	4848      	ldr	r0, [pc, #288]	; (800d308 <tcp_split_unsent_seg+0x188>)
 800d1e8:	f001 fef4 	bl	800efd4 <iprintf>
  optflags = useg->flags;
 800d1ec:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d1f0:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800d1f4:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d1f8:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d1fa:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800d1fe:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d202:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800d206:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d20a:	fa17 f181 	uxtah	r1, r7, r1
 800d20e:	b289      	uxth	r1, r1
 800d210:	f7fd f936 	bl	800a480 <pbuf_alloc>
  if (p == NULL) {
 800d214:	4681      	mov	r9, r0
 800d216:	2800      	cmp	r0, #0
 800d218:	d0c0      	beq.n	800d19c <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800d21a:	6860      	ldr	r0, [r4, #4]
 800d21c:	8922      	ldrh	r2, [r4, #8]
 800d21e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d220:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800d224:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d226:	4642      	mov	r2, r8
 800d228:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800d22a:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	f7fd fae5 	bl	800a7fc <pbuf_copy_partial>
 800d232:	4540      	cmp	r0, r8
 800d234:	d160      	bne.n	800d2f8 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d236:	68e3      	ldr	r3, [r4, #12]
 800d238:	8998      	ldrh	r0, [r3, #12]
 800d23a:	f7fc fb63 	bl	8009904 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800d23e:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d242:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800d244:	bf16      	itet	ne
 800d246:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d24a:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800d24e:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800d252:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d254:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800d256:	bf48      	it	mi
 800d258:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d25c:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800d25e:	bf48      	it	mi
 800d260:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d264:	f7fc fb51 	bl	800990a <lwip_htonl>
 800d268:	4642      	mov	r2, r8
 800d26a:	182b      	adds	r3, r5, r0
 800d26c:	4649      	mov	r1, r9
 800d26e:	4630      	mov	r0, r6
 800d270:	f8cd b000 	str.w	fp, [sp]
 800d274:	f7ff fbc4 	bl	800ca00 <tcp_create_segment>
  if (seg == NULL) {
 800d278:	4680      	mov	r8, r0
 800d27a:	2800      	cmp	r0, #0
 800d27c:	d03c      	beq.n	800d2f8 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d27e:	6860      	ldr	r0, [r4, #4]
 800d280:	eba5 050a 	sub.w	r5, r5, sl
 800d284:	f7fd f9d0 	bl	800a628 <pbuf_clen>
 800d288:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d28c:	fa1f f985 	uxth.w	r9, r5
 800d290:	1a18      	subs	r0, r3, r0
 800d292:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d296:	6860      	ldr	r0, [r4, #4]
 800d298:	8901      	ldrh	r1, [r0, #8]
 800d29a:	fa11 f185 	uxtah	r1, r1, r5
 800d29e:	b289      	uxth	r1, r1
 800d2a0:	f7fd f96a 	bl	800a578 <pbuf_realloc>
  useg->len -= remainder;
 800d2a4:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d2a6:	4638      	mov	r0, r7
  useg->len -= remainder;
 800d2a8:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d2aa:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800d2ac:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d2b0:	899d      	ldrh	r5, [r3, #12]
 800d2b2:	f7fc fb27 	bl	8009904 <lwip_htons>
 800d2b6:	68e3      	ldr	r3, [r4, #12]
 800d2b8:	4328      	orrs	r0, r5
 800d2ba:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d2bc:	6860      	ldr	r0, [r4, #4]
 800d2be:	f7fd f9b3 	bl	800a628 <pbuf_clen>
 800d2c2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d2c6:	4418      	add	r0, r3
 800d2c8:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d2cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d2d0:	f7fd f9aa 	bl	800a628 <pbuf_clen>
 800d2d4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d2d8:	4418      	add	r0, r3
  seg->next = useg->next;
 800d2da:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d2dc:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800d2e0:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800d2e4:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800d2e8:	f8d8 0000 	ldr.w	r0, [r8]
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	f47f af68 	bne.w	800d1c2 <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800d2f2:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800d2f6:	e75e      	b.n	800d1b6 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800d2f8:	4648      	mov	r0, r9
 800d2fa:	f7fd f859 	bl	800a3b0 <pbuf_free>
 800d2fe:	e74d      	b.n	800d19c <tcp_split_unsent_seg+0x1c>
 800d300:	0801d0f1 	.word	0x0801d0f1
 800d304:	0801d4ec 	.word	0x0801d4ec
 800d308:	0801a72c 	.word	0x0801a72c
 800d30c:	0801d50e 	.word	0x0801d50e
 800d310:	0801d530 	.word	0x0801d530
 800d314:	0801d53d 	.word	0x0801d53d

0800d318 <tcp_enqueue_flags>:
{
 800d318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d31c:	f011 0803 	ands.w	r8, r1, #3
{
 800d320:	4604      	mov	r4, r0
 800d322:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d324:	d106      	bne.n	800d334 <tcp_enqueue_flags+0x1c>
 800d326:	4b3e      	ldr	r3, [pc, #248]	; (800d420 <tcp_enqueue_flags+0x108>)
 800d328:	f240 4211 	movw	r2, #1041	; 0x411
 800d32c:	493d      	ldr	r1, [pc, #244]	; (800d424 <tcp_enqueue_flags+0x10c>)
 800d32e:	483e      	ldr	r0, [pc, #248]	; (800d428 <tcp_enqueue_flags+0x110>)
 800d330:	f001 fe50 	bl	800efd4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d334:	b934      	cbnz	r4, 800d344 <tcp_enqueue_flags+0x2c>
 800d336:	4b3a      	ldr	r3, [pc, #232]	; (800d420 <tcp_enqueue_flags+0x108>)
 800d338:	f240 4213 	movw	r2, #1043	; 0x413
 800d33c:	493b      	ldr	r1, [pc, #236]	; (800d42c <tcp_enqueue_flags+0x114>)
 800d33e:	483a      	ldr	r0, [pc, #232]	; (800d428 <tcp_enqueue_flags+0x110>)
 800d340:	f001 fe48 	bl	800efd4 <iprintf>
  if (flags & TCP_SYN) {
 800d344:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d348:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d34c:	2036      	movs	r0, #54	; 0x36
 800d34e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800d352:	4649      	mov	r1, r9
 800d354:	f7fd f894 	bl	800a480 <pbuf_alloc>
 800d358:	4605      	mov	r5, r0
 800d35a:	b940      	cbnz	r0, 800d36e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d35c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800d35e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d366:	8363      	strh	r3, [r4, #26]
}
 800d368:	b003      	add	sp, #12
 800d36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d36e:	8943      	ldrh	r3, [r0, #10]
 800d370:	454b      	cmp	r3, r9
 800d372:	d206      	bcs.n	800d382 <tcp_enqueue_flags+0x6a>
 800d374:	4b2a      	ldr	r3, [pc, #168]	; (800d420 <tcp_enqueue_flags+0x108>)
 800d376:	f240 4239 	movw	r2, #1081	; 0x439
 800d37a:	492d      	ldr	r1, [pc, #180]	; (800d430 <tcp_enqueue_flags+0x118>)
 800d37c:	482a      	ldr	r0, [pc, #168]	; (800d428 <tcp_enqueue_flags+0x110>)
 800d37e:	f001 fe29 	bl	800efd4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d382:	4629      	mov	r1, r5
 800d384:	9700      	str	r7, [sp, #0]
 800d386:	4632      	mov	r2, r6
 800d388:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d38a:	4620      	mov	r0, r4
 800d38c:	f7ff fb38 	bl	800ca00 <tcp_create_segment>
 800d390:	4605      	mov	r5, r0
 800d392:	2800      	cmp	r0, #0
 800d394:	d0e2      	beq.n	800d35c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d396:	68c3      	ldr	r3, [r0, #12]
 800d398:	079a      	lsls	r2, r3, #30
 800d39a:	d006      	beq.n	800d3aa <tcp_enqueue_flags+0x92>
 800d39c:	4b20      	ldr	r3, [pc, #128]	; (800d420 <tcp_enqueue_flags+0x108>)
 800d39e:	f240 4242 	movw	r2, #1090	; 0x442
 800d3a2:	4924      	ldr	r1, [pc, #144]	; (800d434 <tcp_enqueue_flags+0x11c>)
 800d3a4:	4820      	ldr	r0, [pc, #128]	; (800d428 <tcp_enqueue_flags+0x110>)
 800d3a6:	f001 fe15 	bl	800efd4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d3aa:	892b      	ldrh	r3, [r5, #8]
 800d3ac:	b133      	cbz	r3, 800d3bc <tcp_enqueue_flags+0xa4>
 800d3ae:	4b1c      	ldr	r3, [pc, #112]	; (800d420 <tcp_enqueue_flags+0x108>)
 800d3b0:	f240 4243 	movw	r2, #1091	; 0x443
 800d3b4:	4920      	ldr	r1, [pc, #128]	; (800d438 <tcp_enqueue_flags+0x120>)
 800d3b6:	481c      	ldr	r0, [pc, #112]	; (800d428 <tcp_enqueue_flags+0x110>)
 800d3b8:	f001 fe0c 	bl	800efd4 <iprintf>
  if (pcb->unsent == NULL) {
 800d3bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d3be:	bb43      	cbnz	r3, 800d412 <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800d3c0:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d3c8:	f1b8 0f00 	cmp.w	r8, #0
 800d3cc:	d002      	beq.n	800d3d4 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800d3ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800d3d4:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d3d6:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800d3d8:	bf42      	ittt	mi
 800d3da:	8b63      	ldrhmi	r3, [r4, #26]
 800d3dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d3e0:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d3e2:	f7fd f921 	bl	800a628 <pbuf_clen>
 800d3e6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d3ea:	4418      	add	r0, r3
 800d3ec:	b280      	uxth	r0, r0
 800d3ee:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d0b8      	beq.n	800d368 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800d3f8:	b948      	cbnz	r0, 800d40e <tcp_enqueue_flags+0xf6>
 800d3fa:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800d3fc:	2c00      	cmp	r4, #0
 800d3fe:	d1b3      	bne.n	800d368 <tcp_enqueue_flags+0x50>
 800d400:	4b07      	ldr	r3, [pc, #28]	; (800d420 <tcp_enqueue_flags+0x108>)
 800d402:	f240 4265 	movw	r2, #1125	; 0x465
 800d406:	490d      	ldr	r1, [pc, #52]	; (800d43c <tcp_enqueue_flags+0x124>)
 800d408:	4807      	ldr	r0, [pc, #28]	; (800d428 <tcp_enqueue_flags+0x110>)
 800d40a:	f001 fde3 	bl	800efd4 <iprintf>
  return ERR_OK;
 800d40e:	2000      	movs	r0, #0
 800d410:	e7aa      	b.n	800d368 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d412:	461a      	mov	r2, r3
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1fb      	bne.n	800d412 <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800d41a:	6015      	str	r5, [r2, #0]
 800d41c:	e7d1      	b.n	800d3c2 <tcp_enqueue_flags+0xaa>
 800d41e:	bf00      	nop
 800d420:	0801d0f1 	.word	0x0801d0f1
 800d424:	0801d54b 	.word	0x0801d54b
 800d428:	0801a72c 	.word	0x0801a72c
 800d42c:	0801d5a0 	.word	0x0801d5a0
 800d430:	0801d5bf 	.word	0x0801d5bf
 800d434:	0801d5f8 	.word	0x0801d5f8
 800d438:	0801d610 	.word	0x0801d610
 800d43c:	0801d63a 	.word	0x0801d63a

0800d440 <tcp_send_fin>:
{
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d442:	4604      	mov	r4, r0
 800d444:	b930      	cbnz	r0, 800d454 <tcp_send_fin+0x14>
 800d446:	4b13      	ldr	r3, [pc, #76]	; (800d494 <tcp_send_fin+0x54>)
 800d448:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d44c:	4912      	ldr	r1, [pc, #72]	; (800d498 <tcp_send_fin+0x58>)
 800d44e:	4813      	ldr	r0, [pc, #76]	; (800d49c <tcp_send_fin+0x5c>)
 800d450:	f001 fdc0 	bl	800efd4 <iprintf>
  if (pcb->unsent != NULL) {
 800d454:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800d456:	b14d      	cbz	r5, 800d46c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d458:	462f      	mov	r7, r5
 800d45a:	682d      	ldr	r5, [r5, #0]
 800d45c:	2d00      	cmp	r5, #0
 800d45e:	d1fb      	bne.n	800d458 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8998      	ldrh	r0, [r3, #12]
 800d464:	f7fc fa4e 	bl	8009904 <lwip_htons>
 800d468:	0743      	lsls	r3, r0, #29
 800d46a:	d005      	beq.n	800d478 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d46c:	4620      	mov	r0, r4
 800d46e:	2101      	movs	r1, #1
}
 800d470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d474:	f7ff bf50 	b.w	800d318 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2001      	movs	r0, #1
 800d47c:	899e      	ldrh	r6, [r3, #12]
 800d47e:	f7fc fa41 	bl	8009904 <lwip_htons>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	4330      	orrs	r0, r6
 800d486:	8198      	strh	r0, [r3, #12]
}
 800d488:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800d48a:	8b63      	ldrh	r3, [r4, #26]
 800d48c:	f043 0320 	orr.w	r3, r3, #32
 800d490:	8363      	strh	r3, [r4, #26]
}
 800d492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d494:	0801d0f1 	.word	0x0801d0f1
 800d498:	0801d662 	.word	0x0801d662
 800d49c:	0801a72c 	.word	0x0801a72c

0800d4a0 <tcp_rexmit_rto_prepare>:
{
 800d4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	b930      	cbnz	r0, 800d4b6 <tcp_rexmit_rto_prepare+0x16>
 800d4a8:	4b1c      	ldr	r3, [pc, #112]	; (800d51c <tcp_rexmit_rto_prepare+0x7c>)
 800d4aa:	f240 6263 	movw	r2, #1635	; 0x663
 800d4ae:	491c      	ldr	r1, [pc, #112]	; (800d520 <tcp_rexmit_rto_prepare+0x80>)
 800d4b0:	481c      	ldr	r0, [pc, #112]	; (800d524 <tcp_rexmit_rto_prepare+0x84>)
 800d4b2:	f001 fd8f 	bl	800efd4 <iprintf>
  if (pcb->unacked == NULL) {
 800d4b6:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d4b8:	b945      	cbnz	r5, 800d4cc <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800d4ba:	f06f 0005 	mvn.w	r0, #5
}
 800d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800d4c2:	f7ff fa3b 	bl	800c93c <tcp_output_segment_busy>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d1f7      	bne.n	800d4ba <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d4ca:	682d      	ldr	r5, [r5, #0]
 800d4cc:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800d4ce:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1f6      	bne.n	800d4c2 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800d4d4:	f7ff fa32 	bl	800c93c <tcp_output_segment_busy>
 800d4d8:	4606      	mov	r6, r0
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d1ed      	bne.n	800d4ba <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800d4de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d4e0:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800d4e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800d4e4:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800d4e8:	8b63      	ldrh	r3, [r4, #26]
 800d4ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d4ee:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d4f0:	68eb      	ldr	r3, [r5, #12]
 800d4f2:	6858      	ldr	r0, [r3, #4]
 800d4f4:	f7fc fa09 	bl	800990a <lwip_htonl>
 800d4f8:	68eb      	ldr	r3, [r5, #12]
 800d4fa:	4607      	mov	r7, r0
 800d4fc:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d500:	8998      	ldrh	r0, [r3, #12]
 800d502:	f7fc f9ff 	bl	8009904 <lwip_htons>
 800d506:	f010 0303 	ands.w	r3, r0, #3
 800d50a:	4447      	add	r7, r8
  return ERR_OK;
 800d50c:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d50e:	bf18      	it	ne
 800d510:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800d512:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d514:	443b      	add	r3, r7
 800d516:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800d518:	e7d1      	b.n	800d4be <tcp_rexmit_rto_prepare+0x1e>
 800d51a:	bf00      	nop
 800d51c:	0801d0f1 	.word	0x0801d0f1
 800d520:	0801d67c 	.word	0x0801d67c
 800d524:	0801a72c 	.word	0x0801a72c

0800d528 <tcp_rexmit>:
{
 800d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d52a:	4604      	mov	r4, r0
 800d52c:	b930      	cbnz	r0, 800d53c <tcp_rexmit+0x14>
 800d52e:	4b1b      	ldr	r3, [pc, #108]	; (800d59c <tcp_rexmit+0x74>)
 800d530:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d534:	491a      	ldr	r1, [pc, #104]	; (800d5a0 <tcp_rexmit+0x78>)
 800d536:	481b      	ldr	r0, [pc, #108]	; (800d5a4 <tcp_rexmit+0x7c>)
 800d538:	f001 fd4c 	bl	800efd4 <iprintf>
  if (pcb->unacked == NULL) {
 800d53c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d53e:	b915      	cbnz	r5, 800d546 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800d540:	f06f 0005 	mvn.w	r0, #5
}
 800d544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800d546:	4628      	mov	r0, r5
 800d548:	f7ff f9f8 	bl	800c93c <tcp_output_segment_busy>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d1f7      	bne.n	800d540 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800d550:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800d552:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800d556:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800d558:	6833      	ldr	r3, [r6, #0]
 800d55a:	b983      	cbnz	r3, 800d57e <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800d55c:	6833      	ldr	r3, [r6, #0]
 800d55e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800d560:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800d562:	682b      	ldr	r3, [r5, #0]
 800d564:	b90b      	cbnz	r3, 800d56a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800d566:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800d56a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800d56e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800d570:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800d572:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800d574:	bf1c      	itt	ne
 800d576:	3301      	addne	r3, #1
 800d578:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800d57c:	e7e2      	b.n	800d544 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	6858      	ldr	r0, [r3, #4]
 800d582:	f7fc f9c2 	bl	800990a <lwip_htonl>
 800d586:	68eb      	ldr	r3, [r5, #12]
 800d588:	4607      	mov	r7, r0
 800d58a:	6858      	ldr	r0, [r3, #4]
 800d58c:	f7fc f9bd 	bl	800990a <lwip_htonl>
 800d590:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800d592:	2800      	cmp	r0, #0
 800d594:	dae2      	bge.n	800d55c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800d596:	6836      	ldr	r6, [r6, #0]
 800d598:	e7de      	b.n	800d558 <tcp_rexmit+0x30>
 800d59a:	bf00      	nop
 800d59c:	0801d0f1 	.word	0x0801d0f1
 800d5a0:	0801d6a0 	.word	0x0801d6a0
 800d5a4:	0801a72c 	.word	0x0801a72c

0800d5a8 <tcp_rexmit_fast>:
{
 800d5a8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	b930      	cbnz	r0, 800d5bc <tcp_rexmit_fast+0x14>
 800d5ae:	4b15      	ldr	r3, [pc, #84]	; (800d604 <tcp_rexmit_fast+0x5c>)
 800d5b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d5b4:	4914      	ldr	r1, [pc, #80]	; (800d608 <tcp_rexmit_fast+0x60>)
 800d5b6:	4815      	ldr	r0, [pc, #84]	; (800d60c <tcp_rexmit_fast+0x64>)
 800d5b8:	f001 fd0c 	bl	800efd4 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d5bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d5be:	b1fb      	cbz	r3, 800d600 <tcp_rexmit_fast+0x58>
 800d5c0:	8b63      	ldrh	r3, [r4, #26]
 800d5c2:	075b      	lsls	r3, r3, #29
 800d5c4:	d41c      	bmi.n	800d600 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f7ff ffae 	bl	800d528 <tcp_rexmit>
 800d5cc:	b9c0      	cbnz	r0, 800d600 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d5ce:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800d5d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800d5d6:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d5d8:	4299      	cmp	r1, r3
 800d5da:	bf28      	it	cs
 800d5dc:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d5de:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d5e0:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d5e2:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800d5e4:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d5e8:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800d5ea:	bf88      	it	hi
 800d5ec:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d5ee:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800d5f0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d5f4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d5f8:	8b63      	ldrh	r3, [r4, #26]
 800d5fa:	f043 0304 	orr.w	r3, r3, #4
 800d5fe:	8363      	strh	r3, [r4, #26]
}
 800d600:	bd38      	pop	{r3, r4, r5, pc}
 800d602:	bf00      	nop
 800d604:	0801d0f1 	.word	0x0801d0f1
 800d608:	0801d6b8 	.word	0x0801d6b8
 800d60c:	0801a72c 	.word	0x0801a72c

0800d610 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d614:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d618:	4606      	mov	r6, r0
 800d61a:	460f      	mov	r7, r1
 800d61c:	4614      	mov	r4, r2
 800d61e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d622:	461d      	mov	r5, r3
{
 800d624:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d628:	b933      	cbnz	r3, 800d638 <tcp_rst+0x28>
 800d62a:	4b18      	ldr	r3, [pc, #96]	; (800d68c <tcp_rst+0x7c>)
 800d62c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d630:	4917      	ldr	r1, [pc, #92]	; (800d690 <tcp_rst+0x80>)
 800d632:	4818      	ldr	r0, [pc, #96]	; (800d694 <tcp_rst+0x84>)
 800d634:	f001 fcce 	bl	800efd4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d638:	f1b8 0f00 	cmp.w	r8, #0
 800d63c:	d106      	bne.n	800d64c <tcp_rst+0x3c>
 800d63e:	4b13      	ldr	r3, [pc, #76]	; (800d68c <tcp_rst+0x7c>)
 800d640:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d644:	4914      	ldr	r1, [pc, #80]	; (800d698 <tcp_rst+0x88>)
 800d646:	4813      	ldr	r0, [pc, #76]	; (800d694 <tcp_rst+0x84>)
 800d648:	f001 fcc4 	bl	800efd4 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d64c:	4638      	mov	r0, r7
 800d64e:	f7fc f95c 	bl	800990a <lwip_htonl>
 800d652:	2314      	movs	r3, #20
 800d654:	f646 010b 	movw	r1, #26635	; 0x680b
 800d658:	4602      	mov	r2, r0
 800d65a:	f8cd a000 	str.w	sl, [sp]
 800d65e:	4620      	mov	r0, r4
 800d660:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d664:	464b      	mov	r3, r9
 800d666:	2100      	movs	r1, #0
 800d668:	f7ff fa3c 	bl	800cae4 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d66c:	4604      	mov	r4, r0
 800d66e:	b150      	cbz	r0, 800d686 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d670:	f7ff faa0 	bl	800cbb4 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d674:	4643      	mov	r3, r8
 800d676:	462a      	mov	r2, r5
 800d678:	4621      	mov	r1, r4
 800d67a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d67c:	b004      	add	sp, #16
 800d67e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d682:	f7ff baa7 	b.w	800cbd4 <tcp_output_control_segment>
}
 800d686:	b004      	add	sp, #16
 800d688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68c:	0801d0f1 	.word	0x0801d0f1
 800d690:	0801d6d5 	.word	0x0801d6d5
 800d694:	0801a72c 	.word	0x0801a72c
 800d698:	0801d6ef 	.word	0x0801d6ef

0800d69c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d69c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d69e:	4604      	mov	r4, r0
 800d6a0:	b930      	cbnz	r0, 800d6b0 <tcp_send_empty_ack+0x14>
 800d6a2:	4b14      	ldr	r3, [pc, #80]	; (800d6f4 <tcp_send_empty_ack+0x58>)
 800d6a4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d6a8:	4913      	ldr	r1, [pc, #76]	; (800d6f8 <tcp_send_empty_ack+0x5c>)
 800d6aa:	4814      	ldr	r0, [pc, #80]	; (800d6fc <tcp_send_empty_ack+0x60>)
 800d6ac:	f001 fc92 	bl	800efd4 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d6b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d6b2:	f7fc f92a 	bl	800990a <lwip_htonl>
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f7ff fa54 	bl	800cb68 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	b930      	cbnz	r0, 800d6d2 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6c4:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d6c6:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6ca:	f043 0303 	orr.w	r3, r3, #3
 800d6ce:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800d6d0:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d6d2:	f7ff fa6f 	bl	800cbb4 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d6d6:	1d23      	adds	r3, r4, #4
 800d6d8:	4622      	mov	r2, r4
 800d6da:	4629      	mov	r1, r5
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f7ff fa79 	bl	800cbd4 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800d6e2:	8b63      	ldrh	r3, [r4, #26]
 800d6e4:	b118      	cbz	r0, 800d6ee <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6e6:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6ea:	8363      	strh	r3, [r4, #26]
 800d6ec:	e7f0      	b.n	800d6d0 <tcp_send_empty_ack+0x34>
 800d6ee:	f023 0303 	bic.w	r3, r3, #3
 800d6f2:	e7fa      	b.n	800d6ea <tcp_send_empty_ack+0x4e>
 800d6f4:	0801d0f1 	.word	0x0801d0f1
 800d6f8:	0801d70a 	.word	0x0801d70a
 800d6fc:	0801a72c 	.word	0x0801a72c

0800d700 <tcp_output>:
{
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d704:	4604      	mov	r4, r0
{
 800d706:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d708:	b930      	cbnz	r0, 800d718 <tcp_output+0x18>
 800d70a:	4b8f      	ldr	r3, [pc, #572]	; (800d948 <tcp_output+0x248>)
 800d70c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d710:	498e      	ldr	r1, [pc, #568]	; (800d94c <tcp_output+0x24c>)
 800d712:	488f      	ldr	r0, [pc, #572]	; (800d950 <tcp_output+0x250>)
 800d714:	f001 fc5e 	bl	800efd4 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d718:	7d23      	ldrb	r3, [r4, #20]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d106      	bne.n	800d72c <tcp_output+0x2c>
 800d71e:	4b8a      	ldr	r3, [pc, #552]	; (800d948 <tcp_output+0x248>)
 800d720:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d724:	498b      	ldr	r1, [pc, #556]	; (800d954 <tcp_output+0x254>)
 800d726:	488a      	ldr	r0, [pc, #552]	; (800d950 <tcp_output+0x250>)
 800d728:	f001 fc54 	bl	800efd4 <iprintf>
  if (tcp_input_pcb == pcb) {
 800d72c:	4b8a      	ldr	r3, [pc, #552]	; (800d958 <tcp_output+0x258>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	42a3      	cmp	r3, r4
 800d732:	f000 8171 	beq.w	800da18 <tcp_output+0x318>
  seg = pcb->unsent;
 800d736:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800d738:	b94d      	cbnz	r5, 800d74e <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800d73a:	8b63      	ldrh	r3, [r4, #26]
 800d73c:	0798      	lsls	r0, r3, #30
 800d73e:	f140 8167 	bpl.w	800da10 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800d742:	4620      	mov	r0, r4
}
 800d744:	b007      	add	sp, #28
 800d746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800d74a:	f7ff bfa7 	b.w	800d69c <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d74e:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d750:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d754:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800d758:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d75c:	b340      	cbz	r0, 800d7b0 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800d75e:	f7fc fd6d 	bl	800a23c <netif_get_by_index>
    return ip_route(src, dst);
 800d762:	4607      	mov	r7, r0
  if (netif == NULL) {
 800d764:	2800      	cmp	r0, #0
 800d766:	f000 8170 	beq.w	800da4a <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	b90b      	cbnz	r3, 800d772 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d76e:	6843      	ldr	r3, [r0, #4]
 800d770:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d772:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d774:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d776:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d778:	bf28      	it	cs
 800d77a:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d77c:	f7fc f8c5 	bl	800990a <lwip_htonl>
 800d780:	892b      	ldrh	r3, [r5, #8]
 800d782:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d784:	1a9b      	subs	r3, r3, r2
 800d786:	4418      	add	r0, r3
 800d788:	4540      	cmp	r0, r8
 800d78a:	d915      	bls.n	800d7b8 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d78c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800d790:	4543      	cmp	r3, r8
 800d792:	d1d2      	bne.n	800d73a <tcp_output+0x3a>
 800d794:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1cf      	bne.n	800d73a <tcp_output+0x3a>
 800d79a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1cb      	bne.n	800d73a <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800d7a2:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800d7a6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800d7aa:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800d7ae:	e7c4      	b.n	800d73a <tcp_output+0x3a>
    return ip_route(src, dst);
 800d7b0:	4648      	mov	r0, r9
 800d7b2:	f7fb fb33 	bl	8008e1c <ip4_route>
 800d7b6:	e7d4      	b.n	800d762 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800d7b8:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800d7ba:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800d7bc:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800d7c0:	b126      	cbz	r6, 800d7cc <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800d7c2:	4633      	mov	r3, r6
 800d7c4:	6836      	ldr	r6, [r6, #0]
 800d7c6:	2e00      	cmp	r6, #0
 800d7c8:	d1fb      	bne.n	800d7c2 <tcp_output+0xc2>
 800d7ca:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800d7cc:	f8df a178 	ldr.w	sl, [pc, #376]	; 800d948 <tcp_output+0x248>
 800d7d0:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800d950 <tcp_output+0x250>
 800d7d4:	e0de      	b.n	800d994 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800d7d6:	7d23      	ldrb	r3, [r4, #20]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d009      	beq.n	800d7f0 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d7dc:	68eb      	ldr	r3, [r5, #12]
 800d7de:	2010      	movs	r0, #16
 800d7e0:	899b      	ldrh	r3, [r3, #12]
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	f7fc f88e 	bl	8009904 <lwip_htons>
 800d7e8:	9b04      	ldr	r3, [sp, #16]
 800d7ea:	68ea      	ldr	r2, [r5, #12]
 800d7ec:	4318      	orrs	r0, r3
 800d7ee:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f7ff f8a3 	bl	800c93c <tcp_output_segment_busy>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d16f      	bne.n	800d8da <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d7fa:	68eb      	ldr	r3, [r5, #12]
 800d7fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d7fe:	9304      	str	r3, [sp, #16]
 800d800:	f7fc f883 	bl	800990a <lwip_htonl>
 800d804:	9b04      	ldr	r3, [sp, #16]
 800d806:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d808:	68eb      	ldr	r3, [r5, #12]
 800d80a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800d80c:	9304      	str	r3, [sp, #16]
 800d80e:	f7fc f879 	bl	8009904 <lwip_htons>
 800d812:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d814:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d816:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d81a:	4413      	add	r3, r2
 800d81c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d81e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d820:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d822:	07d2      	lsls	r2, r2, #31
 800d824:	d449      	bmi.n	800d8ba <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d826:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800d82a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800d82e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800d830:	bfbc      	itt	lt
 800d832:	2300      	movlt	r3, #0
 800d834:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800d836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d838:	b94b      	cbnz	r3, 800d84e <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800d83a:	4948      	ldr	r1, [pc, #288]	; (800d95c <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d83c:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800d83e:	6809      	ldr	r1, [r1, #0]
 800d840:	9204      	str	r2, [sp, #16]
 800d842:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d844:	6858      	ldr	r0, [r3, #4]
 800d846:	f7fc f860 	bl	800990a <lwip_htonl>
 800d84a:	9a04      	ldr	r2, [sp, #16]
 800d84c:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d84e:	6869      	ldr	r1, [r5, #4]
 800d850:	68eb      	ldr	r3, [r5, #12]
 800d852:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800d854:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d858:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800d85a:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d85c:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800d85e:	ebac 0c00 	sub.w	ip, ip, r0
 800d862:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800d866:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800d86a:	ebac 0000 	sub.w	r0, ip, r0
 800d86e:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800d870:	2100      	movs	r1, #0
 800d872:	7419      	strb	r1, [r3, #16]
 800d874:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d876:	7aa9      	ldrb	r1, [r5, #10]
 800d878:	0089      	lsls	r1, r1, #2
 800d87a:	f001 0104 	and.w	r1, r1, #4
 800d87e:	3114      	adds	r1, #20
 800d880:	440b      	add	r3, r1
 800d882:	429a      	cmp	r2, r3
 800d884:	d006      	beq.n	800d894 <tcp_output+0x194>
 800d886:	4653      	mov	r3, sl
 800d888:	f240 621c 	movw	r2, #1564	; 0x61c
 800d88c:	4934      	ldr	r1, [pc, #208]	; (800d960 <tcp_output+0x260>)
 800d88e:	4658      	mov	r0, fp
 800d890:	f001 fba0 	bl	800efd4 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d894:	2306      	movs	r3, #6
 800d896:	9702      	str	r7, [sp, #8]
 800d898:	464a      	mov	r2, r9
 800d89a:	4621      	mov	r1, r4
 800d89c:	9301      	str	r3, [sp, #4]
 800d89e:	7aa3      	ldrb	r3, [r4, #10]
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	7ae3      	ldrb	r3, [r4, #11]
 800d8a4:	6868      	ldr	r0, [r5, #4]
 800d8a6:	f7fb fc27 	bl	80090f8 <ip4_output_if>
    if (err != ERR_OK) {
 800d8aa:	b1b0      	cbz	r0, 800d8da <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d8ac:	8b63      	ldrh	r3, [r4, #26]
 800d8ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8b2:	8363      	strh	r3, [r4, #26]
}
 800d8b4:	b007      	add	sp, #28
 800d8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d8ba:	464a      	mov	r2, r9
 800d8bc:	4639      	mov	r1, r7
 800d8be:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800d8c2:	9304      	str	r3, [sp, #16]
 800d8c4:	f7fd ffe4 	bl	800b890 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d8c8:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800d8cc:	f7fc f81d 	bl	800990a <lwip_htonl>
 800d8d0:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800d8d2:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d8d6:	6158      	str	r0, [r3, #20]
    opts += 1;
 800d8d8:	e7a7      	b.n	800d82a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800d8da:	682b      	ldr	r3, [r5, #0]
 800d8dc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d8de:	7d23      	ldrb	r3, [r4, #20]
 800d8e0:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d8e2:	bf1e      	ittt	ne
 800d8e4:	8b63      	ldrhne	r3, [r4, #26]
 800d8e6:	f023 0303 	bicne.w	r3, r3, #3
 800d8ea:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d8ec:	68eb      	ldr	r3, [r5, #12]
 800d8ee:	6858      	ldr	r0, [r3, #4]
 800d8f0:	f7fc f80b 	bl	800990a <lwip_htonl>
 800d8f4:	8929      	ldrh	r1, [r5, #8]
 800d8f6:	68eb      	ldr	r3, [r5, #12]
 800d8f8:	9104      	str	r1, [sp, #16]
 800d8fa:	9005      	str	r0, [sp, #20]
 800d8fc:	8998      	ldrh	r0, [r3, #12]
 800d8fe:	f7fc f801 	bl	8009904 <lwip_htons>
 800d902:	f010 0303 	ands.w	r3, r0, #3
 800d906:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800d90a:	bf18      	it	ne
 800d90c:	2301      	movne	r3, #1
 800d90e:	440a      	add	r2, r1
 800d910:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d912:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d914:	1ad2      	subs	r2, r2, r3
 800d916:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800d918:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800d91a:	bfb8      	it	lt
 800d91c:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800d91e:	892b      	ldrh	r3, [r5, #8]
 800d920:	9304      	str	r3, [sp, #16]
 800d922:	8990      	ldrh	r0, [r2, #12]
 800d924:	f7fb ffee 	bl	8009904 <lwip_htons>
 800d928:	f010 0003 	ands.w	r0, r0, #3
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	bf18      	it	ne
 800d930:	2001      	movne	r0, #1
 800d932:	42d8      	cmn	r0, r3
 800d934:	f000 8085 	beq.w	800da42 <tcp_output+0x342>
      seg->next = NULL;
 800d938:	2300      	movs	r3, #0
 800d93a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800d93c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d93e:	b98b      	cbnz	r3, 800d964 <tcp_output+0x264>
        pcb->unacked = seg;
 800d940:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800d942:	462e      	mov	r6, r5
 800d944:	e023      	b.n	800d98e <tcp_output+0x28e>
 800d946:	bf00      	nop
 800d948:	0801d0f1 	.word	0x0801d0f1
 800d94c:	0801d72a 	.word	0x0801d72a
 800d950:	0801a72c 	.word	0x0801a72c
 800d954:	0801d742 	.word	0x0801d742
 800d958:	2000d0b0 	.word	0x2000d0b0
 800d95c:	2000d064 	.word	0x2000d064
 800d960:	0801d77f 	.word	0x0801d77f
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d964:	68eb      	ldr	r3, [r5, #12]
 800d966:	6858      	ldr	r0, [r3, #4]
 800d968:	f7fb ffcf 	bl	800990a <lwip_htonl>
 800d96c:	68f2      	ldr	r2, [r6, #12]
 800d96e:	9004      	str	r0, [sp, #16]
 800d970:	6850      	ldr	r0, [r2, #4]
 800d972:	f7fb ffca 	bl	800990a <lwip_htonl>
 800d976:	9b04      	ldr	r3, [sp, #16]
 800d978:	1a18      	subs	r0, r3, r0
 800d97a:	2800      	cmp	r0, #0
 800d97c:	da5f      	bge.n	800da3e <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d97e:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	2a00      	cmp	r2, #0
 800d986:	d149      	bne.n	800da1c <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800d98c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800d98e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800d990:	2d00      	cmp	r5, #0
 800d992:	d03a      	beq.n	800da0a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d994:	68eb      	ldr	r3, [r5, #12]
 800d996:	6858      	ldr	r0, [r3, #4]
 800d998:	f7fb ffb7 	bl	800990a <lwip_htonl>
 800d99c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d99e:	1ac0      	subs	r0, r0, r3
 800d9a0:	892b      	ldrh	r3, [r5, #8]
 800d9a2:	4418      	add	r0, r3
  while (seg != NULL &&
 800d9a4:	4540      	cmp	r0, r8
 800d9a6:	d82e      	bhi.n	800da06 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800d9a8:	68eb      	ldr	r3, [r5, #12]
 800d9aa:	8998      	ldrh	r0, [r3, #12]
 800d9ac:	f7fb ffaa 	bl	8009904 <lwip_htons>
 800d9b0:	0741      	lsls	r1, r0, #29
 800d9b2:	d506      	bpl.n	800d9c2 <tcp_output+0x2c2>
 800d9b4:	4653      	mov	r3, sl
 800d9b6:	f240 5236 	movw	r2, #1334	; 0x536
 800d9ba:	4925      	ldr	r1, [pc, #148]	; (800da50 <tcp_output+0x350>)
 800d9bc:	4658      	mov	r0, fp
 800d9be:	f001 fb09 	bl	800efd4 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d9c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f43f af06 	beq.w	800d7d6 <tcp_output+0xd6>
 800d9ca:	8b62      	ldrh	r2, [r4, #26]
 800d9cc:	f012 0f44 	tst.w	r2, #68	; 0x44
 800d9d0:	f47f af01 	bne.w	800d7d6 <tcp_output+0xd6>
 800d9d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d9d6:	b143      	cbz	r3, 800d9ea <tcp_output+0x2ea>
 800d9d8:	6819      	ldr	r1, [r3, #0]
 800d9da:	2900      	cmp	r1, #0
 800d9dc:	f47f aefb 	bne.w	800d7d6 <tcp_output+0xd6>
 800d9e0:	8919      	ldrh	r1, [r3, #8]
 800d9e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d9e4:	4299      	cmp	r1, r3
 800d9e6:	f4bf aef6 	bcs.w	800d7d6 <tcp_output+0xd6>
 800d9ea:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f43f aef1 	beq.w	800d7d6 <tcp_output+0xd6>
 800d9f4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d9f8:	2b07      	cmp	r3, #7
 800d9fa:	f63f aeec 	bhi.w	800d7d6 <tcp_output+0xd6>
 800d9fe:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800da02:	f47f aee8 	bne.w	800d7d6 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800da06:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800da08:	b913      	cbnz	r3, 800da10 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800da10:	8b63      	ldrh	r3, [r4, #26]
 800da12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da16:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800da18:	2000      	movs	r0, #0
 800da1a:	e74b      	b.n	800d8b4 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800da1c:	68d2      	ldr	r2, [r2, #12]
 800da1e:	9305      	str	r3, [sp, #20]
 800da20:	6850      	ldr	r0, [r2, #4]
 800da22:	f7fb ff72 	bl	800990a <lwip_htonl>
 800da26:	68e9      	ldr	r1, [r5, #12]
 800da28:	9004      	str	r0, [sp, #16]
 800da2a:	6848      	ldr	r0, [r1, #4]
 800da2c:	f7fb ff6d 	bl	800990a <lwip_htonl>
 800da30:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800da32:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800da34:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800da36:	2800      	cmp	r0, #0
 800da38:	daa6      	bge.n	800d988 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	e7a1      	b.n	800d982 <tcp_output+0x282>
          useg->next = seg;
 800da3e:	6035      	str	r5, [r6, #0]
 800da40:	e77f      	b.n	800d942 <tcp_output+0x242>
      tcp_seg_free(seg);
 800da42:	4628      	mov	r0, r5
 800da44:	f7fd f8e8 	bl	800ac18 <tcp_seg_free>
 800da48:	e7a1      	b.n	800d98e <tcp_output+0x28e>
    return ERR_RTE;
 800da4a:	f06f 0003 	mvn.w	r0, #3
 800da4e:	e731      	b.n	800d8b4 <tcp_output+0x1b4>
 800da50:	0801d768 	.word	0x0801d768

0800da54 <tcp_rexmit_rto_commit>:
{
 800da54:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800da56:	4604      	mov	r4, r0
 800da58:	b930      	cbnz	r0, 800da68 <tcp_rexmit_rto_commit+0x14>
 800da5a:	4b09      	ldr	r3, [pc, #36]	; (800da80 <tcp_rexmit_rto_commit+0x2c>)
 800da5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800da60:	4908      	ldr	r1, [pc, #32]	; (800da84 <tcp_rexmit_rto_commit+0x30>)
 800da62:	4809      	ldr	r0, [pc, #36]	; (800da88 <tcp_rexmit_rto_commit+0x34>)
 800da64:	f001 fab6 	bl	800efd4 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800da68:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800da6c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800da6e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800da70:	bf1c      	itt	ne
 800da72:	3301      	addne	r3, #1
 800da74:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800da78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800da7c:	f7ff be40 	b.w	800d700 <tcp_output>
 800da80:	0801d0f1 	.word	0x0801d0f1
 800da84:	0801d792 	.word	0x0801d792
 800da88:	0801a72c 	.word	0x0801a72c

0800da8c <tcp_rexmit_rto>:
{
 800da8c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800da8e:	4604      	mov	r4, r0
 800da90:	b930      	cbnz	r0, 800daa0 <tcp_rexmit_rto+0x14>
 800da92:	4b08      	ldr	r3, [pc, #32]	; (800dab4 <tcp_rexmit_rto+0x28>)
 800da94:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800da98:	4907      	ldr	r1, [pc, #28]	; (800dab8 <tcp_rexmit_rto+0x2c>)
 800da9a:	4808      	ldr	r0, [pc, #32]	; (800dabc <tcp_rexmit_rto+0x30>)
 800da9c:	f001 fa9a 	bl	800efd4 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7ff fcfd 	bl	800d4a0 <tcp_rexmit_rto_prepare>
 800daa6:	b920      	cbnz	r0, 800dab2 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800daa8:	4620      	mov	r0, r4
}
 800daaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800daae:	f7ff bfd1 	b.w	800da54 <tcp_rexmit_rto_commit>
}
 800dab2:	bd10      	pop	{r4, pc}
 800dab4:	0801d0f1 	.word	0x0801d0f1
 800dab8:	0801d7b5 	.word	0x0801d7b5
 800dabc:	0801a72c 	.word	0x0801a72c

0800dac0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dac0:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dac2:	4604      	mov	r4, r0
 800dac4:	b930      	cbnz	r0, 800dad4 <tcp_keepalive+0x14>
 800dac6:	4b0f      	ldr	r3, [pc, #60]	; (800db04 <tcp_keepalive+0x44>)
 800dac8:	f640 0224 	movw	r2, #2084	; 0x824
 800dacc:	490e      	ldr	r1, [pc, #56]	; (800db08 <tcp_keepalive+0x48>)
 800dace:	480f      	ldr	r0, [pc, #60]	; (800db0c <tcp_keepalive+0x4c>)
 800dad0:	f001 fa80 	bl	800efd4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dad4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800dad6:	3801      	subs	r0, #1
 800dad8:	f7fb ff17 	bl	800990a <lwip_htonl>
 800dadc:	2100      	movs	r1, #0
 800dade:	4602      	mov	r2, r0
 800dae0:	4620      	mov	r0, r4
 800dae2:	f7ff f841 	bl	800cb68 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800dae6:	4605      	mov	r5, r0
 800dae8:	b148      	cbz	r0, 800dafe <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800daea:	f7ff f863 	bl	800cbb4 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800daee:	1d23      	adds	r3, r4, #4
 800daf0:	4622      	mov	r2, r4
 800daf2:	4629      	mov	r1, r5
 800daf4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800daf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dafa:	f7ff b86b 	b.w	800cbd4 <tcp_output_control_segment>
}
 800dafe:	f04f 30ff 	mov.w	r0, #4294967295
 800db02:	bd70      	pop	{r4, r5, r6, pc}
 800db04:	0801d0f1 	.word	0x0801d0f1
 800db08:	0801d7d1 	.word	0x0801d7d1
 800db0c:	0801a72c 	.word	0x0801a72c

0800db10 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800db10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800db14:	4606      	mov	r6, r0
 800db16:	b930      	cbnz	r0, 800db26 <tcp_zero_window_probe+0x16>
 800db18:	4b2c      	ldr	r3, [pc, #176]	; (800dbcc <tcp_zero_window_probe+0xbc>)
 800db1a:	f640 024f 	movw	r2, #2127	; 0x84f
 800db1e:	492c      	ldr	r1, [pc, #176]	; (800dbd0 <tcp_zero_window_probe+0xc0>)
 800db20:	482c      	ldr	r0, [pc, #176]	; (800dbd4 <tcp_zero_window_probe+0xc4>)
 800db22:	f001 fa57 	bl	800efd4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800db26:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800db28:	2d00      	cmp	r5, #0
 800db2a:	d048      	beq.n	800dbbe <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800db2c:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800db30:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800db32:	bf1c      	itt	ne
 800db34:	3301      	addne	r3, #1
 800db36:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800db3a:	68eb      	ldr	r3, [r5, #12]
 800db3c:	8998      	ldrh	r0, [r3, #12]
 800db3e:	f7fb fee1 	bl	8009904 <lwip_htons>
 800db42:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db46:	68eb      	ldr	r3, [r5, #12]
 800db48:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800db4a:	bf18      	it	ne
 800db4c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db4e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800db50:	bf1c      	itt	ne
 800db52:	fab4 f484 	clzne	r4, r4
 800db56:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db58:	f084 0101 	eor.w	r1, r4, #1
 800db5c:	f7ff f804 	bl	800cb68 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800db60:	4607      	mov	r7, r0
 800db62:	b378      	cbz	r0, 800dbc4 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800db64:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800db68:	b1f4      	cbz	r4, 800dba8 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800db6a:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800db6e:	2011      	movs	r0, #17
 800db70:	f7fb fec8 	bl	8009904 <lwip_htons>
 800db74:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800db78:	4320      	orrs	r0, r4
 800db7a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800db7e:	68eb      	ldr	r3, [r5, #12]
 800db80:	6858      	ldr	r0, [r3, #4]
 800db82:	f7fb fec2 	bl	800990a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800db86:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800db88:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800db8a:	1a1b      	subs	r3, r3, r0
 800db8c:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800db8e:	bfb8      	it	lt
 800db90:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800db92:	4638      	mov	r0, r7
 800db94:	f7ff f80e 	bl	800cbb4 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db98:	1d33      	adds	r3, r6, #4
 800db9a:	4632      	mov	r2, r6
 800db9c:	4639      	mov	r1, r7
 800db9e:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800dba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dba4:	f7ff b816 	b.w	800cbd4 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dba8:	6868      	ldr	r0, [r5, #4]
 800dbaa:	f108 0114 	add.w	r1, r8, #20
 800dbae:	892a      	ldrh	r2, [r5, #8]
 800dbb0:	8903      	ldrh	r3, [r0, #8]
 800dbb2:	1a9b      	subs	r3, r3, r2
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	f7fc fe20 	bl	800a7fc <pbuf_copy_partial>
 800dbbc:	e7df      	b.n	800db7e <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800dbbe:	4628      	mov	r0, r5
}
 800dbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc8:	e7fa      	b.n	800dbc0 <tcp_zero_window_probe+0xb0>
 800dbca:	bf00      	nop
 800dbcc:	0801d0f1 	.word	0x0801d0f1
 800dbd0:	0801d7ec 	.word	0x0801d7ec
 800dbd4:	0801a72c 	.word	0x0801a72c

0800dbd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dbdc:	200a      	movs	r0, #10
{
 800dbde:	460e      	mov	r6, r1
 800dbe0:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dbe2:	f7fc f9af 	bl	8009f44 <memp_malloc>
  if (timeout == NULL) {
 800dbe6:	b938      	cbnz	r0, 800dbf8 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dbe8:	4b10      	ldr	r3, [pc, #64]	; (800dc2c <sys_timeout_abs+0x54>)
 800dbea:	22be      	movs	r2, #190	; 0xbe
 800dbec:	4910      	ldr	r1, [pc, #64]	; (800dc30 <sys_timeout_abs+0x58>)
 800dbee:	4811      	ldr	r0, [pc, #68]	; (800dc34 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800dbf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dbf4:	f001 b9ee 	b.w	800efd4 <iprintf>
  timeout->next = NULL;
 800dbf8:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800dbfa:	4a0f      	ldr	r2, [pc, #60]	; (800dc38 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800dbfc:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800dbfe:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800dc00:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800dc02:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800dc06:	b90b      	cbnz	r3, 800dc0c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800dc08:	6010      	str	r0, [r2, #0]
}
 800dc0a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dc0c:	6859      	ldr	r1, [r3, #4]
 800dc0e:	1a61      	subs	r1, r4, r1
 800dc10:	2900      	cmp	r1, #0
 800dc12:	da01      	bge.n	800dc18 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800dc14:	6003      	str	r3, [r0, #0]
 800dc16:	e7f7      	b.n	800dc08 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dc18:	4619      	mov	r1, r3
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	b11b      	cbz	r3, 800dc26 <sys_timeout_abs+0x4e>
 800dc1e:	685a      	ldr	r2, [r3, #4]
 800dc20:	1aa2      	subs	r2, r4, r2
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	daf8      	bge.n	800dc18 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800dc26:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800dc28:	6008      	str	r0, [r1, #0]
        break;
 800dc2a:	e7ee      	b.n	800dc0a <sys_timeout_abs+0x32>
 800dc2c:	0801d80f 	.word	0x0801d80f
 800dc30:	0801d872 	.word	0x0801d872
 800dc34:	0801a72c 	.word	0x0801a72c
 800dc38:	2000d0b4 	.word	0x2000d0b4

0800dc3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800dc3c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800dc3e:	6843      	ldr	r3, [r0, #4]
{
 800dc40:	4604      	mov	r4, r0
  cyclic->handler();
 800dc42:	4798      	blx	r3

  now = sys_now();
 800dc44:	f7f3 fc6a 	bl	800151c <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dc48:	4b07      	ldr	r3, [pc, #28]	; (800dc68 <lwip_cyclic_timer+0x2c>)
 800dc4a:	6825      	ldr	r5, [r4, #0]
 800dc4c:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dc4e:	4907      	ldr	r1, [pc, #28]	; (800dc6c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dc50:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dc52:	1a1a      	subs	r2, r3, r0
 800dc54:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dc56:	4622      	mov	r2, r4
 800dc58:	bfb4      	ite	lt
 800dc5a:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dc5c:	4618      	movge	r0, r3
#endif
  }
}
 800dc5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dc62:	f7ff bfb9 	b.w	800dbd8 <sys_timeout_abs>
 800dc66:	bf00      	nop
 800dc68:	2000d0b4 	.word	0x2000d0b4
 800dc6c:	0800dc3d 	.word	0x0800dc3d

0800dc70 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dc70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800dc74:	b570      	push	{r4, r5, r6, lr}
 800dc76:	4604      	mov	r4, r0
 800dc78:	460d      	mov	r5, r1
 800dc7a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dc7c:	d306      	bcc.n	800dc8c <sys_timeout+0x1c>
 800dc7e:	4b08      	ldr	r3, [pc, #32]	; (800dca0 <sys_timeout+0x30>)
 800dc80:	f240 1229 	movw	r2, #297	; 0x129
 800dc84:	4907      	ldr	r1, [pc, #28]	; (800dca4 <sys_timeout+0x34>)
 800dc86:	4808      	ldr	r0, [pc, #32]	; (800dca8 <sys_timeout+0x38>)
 800dc88:	f001 f9a4 	bl	800efd4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dc8c:	f7f3 fc46 	bl	800151c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc90:	4632      	mov	r2, r6
 800dc92:	4629      	mov	r1, r5
 800dc94:	4420      	add	r0, r4
#endif
}
 800dc96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc9a:	f7ff bf9d 	b.w	800dbd8 <sys_timeout_abs>
 800dc9e:	bf00      	nop
 800dca0:	0801d80f 	.word	0x0801d80f
 800dca4:	0801d8af 	.word	0x0801d8af
 800dca8:	0801a72c 	.word	0x0801a72c

0800dcac <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dcac:	4b08      	ldr	r3, [pc, #32]	; (800dcd0 <tcp_timer_needed+0x24>)
 800dcae:	689a      	ldr	r2, [r3, #8]
 800dcb0:	b962      	cbnz	r2, 800dccc <tcp_timer_needed+0x20>
 800dcb2:	4a08      	ldr	r2, [pc, #32]	; (800dcd4 <tcp_timer_needed+0x28>)
 800dcb4:	6812      	ldr	r2, [r2, #0]
 800dcb6:	b912      	cbnz	r2, 800dcbe <tcp_timer_needed+0x12>
 800dcb8:	4a07      	ldr	r2, [pc, #28]	; (800dcd8 <tcp_timer_needed+0x2c>)
 800dcba:	6812      	ldr	r2, [r2, #0]
 800dcbc:	b132      	cbz	r2, 800dccc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800dcbe:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcc0:	4906      	ldr	r1, [pc, #24]	; (800dcdc <tcp_timer_needed+0x30>)
 800dcc2:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800dcc4:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f7ff bfd2 	b.w	800dc70 <sys_timeout>
}
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	2000d0b4 	.word	0x2000d0b4
 800dcd4:	2000d060 	.word	0x2000d060
 800dcd8:	2000d06c 	.word	0x2000d06c
 800dcdc:	0800dce1 	.word	0x0800dce1

0800dce0 <tcpip_tcp_timer>:
{
 800dce0:	b508      	push	{r3, lr}
  tcp_tmr();
 800dce2:	f7fd fc0b 	bl	800b4fc <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dce6:	4b08      	ldr	r3, [pc, #32]	; (800dd08 <tcpip_tcp_timer+0x28>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	b913      	cbnz	r3, 800dcf2 <tcpip_tcp_timer+0x12>
 800dcec:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <tcpip_tcp_timer+0x2c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	b133      	cbz	r3, 800dd00 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	4906      	ldr	r1, [pc, #24]	; (800dd10 <tcpip_tcp_timer+0x30>)
 800dcf6:	20fa      	movs	r0, #250	; 0xfa
}
 800dcf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcfc:	f7ff bfb8 	b.w	800dc70 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800dd00:	4a04      	ldr	r2, [pc, #16]	; (800dd14 <tcpip_tcp_timer+0x34>)
 800dd02:	6093      	str	r3, [r2, #8]
}
 800dd04:	bd08      	pop	{r3, pc}
 800dd06:	bf00      	nop
 800dd08:	2000d060 	.word	0x2000d060
 800dd0c:	2000d06c 	.word	0x2000d06c
 800dd10:	0800dce1 	.word	0x0800dce1
 800dd14:	2000d0b4 	.word	0x2000d0b4

0800dd18 <sys_timeouts_init>:
{
 800dd18:	b570      	push	{r4, r5, r6, lr}
 800dd1a:	4d06      	ldr	r5, [pc, #24]	; (800dd34 <sys_timeouts_init+0x1c>)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dd1c:	2401      	movs	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dd1e:	4e06      	ldr	r6, [pc, #24]	; (800dd38 <sys_timeouts_init+0x20>)
 800dd20:	f855 0f08 	ldr.w	r0, [r5, #8]!
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dd24:	3401      	adds	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dd26:	4631      	mov	r1, r6
 800dd28:	462a      	mov	r2, r5
 800dd2a:	f7ff ffa1 	bl	800dc70 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dd2e:	2c05      	cmp	r4, #5
 800dd30:	d1f6      	bne.n	800dd20 <sys_timeouts_init+0x8>
}
 800dd32:	bd70      	pop	{r4, r5, r6, pc}
 800dd34:	080119dc 	.word	0x080119dc
 800dd38:	0800dc3d 	.word	0x0800dc3d

0800dd3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800dd3e:	f7f3 fbed 	bl	800151c <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800dd42:	4d0b      	ldr	r5, [pc, #44]	; (800dd70 <sys_check_timeouts+0x34>)
  now = sys_now();
 800dd44:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800dd46:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800dd48:	b181      	cbz	r1, 800dd6c <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dd4a:	684b      	ldr	r3, [r1, #4]
 800dd4c:	1ae2      	subs	r2, r4, r3
 800dd4e:	2a00      	cmp	r2, #0
 800dd50:	db0c      	blt.n	800dd6c <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dd52:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dd54:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800dd56:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800dd58:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800dd5a:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dd5e:	f7fc f90d 	bl	8009f7c <memp_free>
    if (handler != NULL) {
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	d0ef      	beq.n	800dd46 <sys_check_timeouts+0xa>
      handler(arg);
 800dd66:	4638      	mov	r0, r7
 800dd68:	47b0      	blx	r6
 800dd6a:	e7ec      	b.n	800dd46 <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	2000d0b4 	.word	0x2000d0b4

0800dd74 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800dd74:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800dd76:	4c07      	ldr	r4, [pc, #28]	; (800dd94 <sys_timeouts_sleeptime+0x20>)
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	b13b      	cbz	r3, 800dd8c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800dd7c:	f7f3 fbce 	bl	800151c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800dd80:	6823      	ldr	r3, [r4, #0]
 800dd82:	685b      	ldr	r3, [r3, #4]
    return 0;
 800dd84:	1a18      	subs	r0, r3, r0
 800dd86:	bf48      	it	mi
 800dd88:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800dd8a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd90:	e7fb      	b.n	800dd8a <sys_timeouts_sleeptime+0x16>
 800dd92:	bf00      	nop
 800dd94:	2000d0b4 	.word	0x2000d0b4

0800dd98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dd98:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dd9a:	f001 f933 	bl	800f004 <rand>
 800dd9e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800dda2:	4b02      	ldr	r3, [pc, #8]	; (800ddac <udp_init+0x14>)
 800dda4:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800dda8:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800ddaa:	bd08      	pop	{r3, pc}
 800ddac:	20000028 	.word	0x20000028

0800ddb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	4688      	mov	r8, r1
 800ddb6:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ddb8:	4606      	mov	r6, r0
 800ddba:	b928      	cbnz	r0, 800ddc8 <udp_input+0x18>
 800ddbc:	4b5f      	ldr	r3, [pc, #380]	; (800df3c <udp_input+0x18c>)
 800ddbe:	22cf      	movs	r2, #207	; 0xcf
 800ddc0:	495f      	ldr	r1, [pc, #380]	; (800df40 <udp_input+0x190>)
 800ddc2:	4860      	ldr	r0, [pc, #384]	; (800df44 <udp_input+0x194>)
 800ddc4:	f001 f906 	bl	800efd4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ddc8:	f1b8 0f00 	cmp.w	r8, #0
 800ddcc:	d105      	bne.n	800ddda <udp_input+0x2a>
 800ddce:	4b5b      	ldr	r3, [pc, #364]	; (800df3c <udp_input+0x18c>)
 800ddd0:	22d0      	movs	r2, #208	; 0xd0
 800ddd2:	495d      	ldr	r1, [pc, #372]	; (800df48 <udp_input+0x198>)
 800ddd4:	485b      	ldr	r0, [pc, #364]	; (800df44 <udp_input+0x194>)
 800ddd6:	f001 f8fd 	bl	800efd4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ddda:	8973      	ldrh	r3, [r6, #10]
 800dddc:	2b07      	cmp	r3, #7
 800ddde:	d805      	bhi.n	800ddec <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dde0:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dde2:	b005      	add	sp, #20
 800dde4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800dde8:	f7fc bae2 	b.w	800a3b0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ddec:	4f57      	ldr	r7, [pc, #348]	; (800df4c <udp_input+0x19c>)
  uncon_pcb = NULL;
 800ddee:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800ddf0:	6874      	ldr	r4, [r6, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ddf2:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 800ddf4:	46aa      	mov	sl, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ddf6:	6978      	ldr	r0, [r7, #20]
 800ddf8:	f7fb f98f 	bl	800911a <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddfc:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800df5c <udp_input+0x1ac>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800de00:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800de02:	8820      	ldrh	r0, [r4, #0]
 800de04:	f7fb fd7e 	bl	8009904 <lwip_htons>
 800de08:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800de0a:	8860      	ldrh	r0, [r4, #2]
 800de0c:	f7fb fd7a 	bl	8009904 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de10:	f8db 4000 	ldr.w	r4, [fp]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800de14:	f8df c124 	ldr.w	ip, [pc, #292]	; 800df3c <udp_input+0x18c>
 800de18:	494d      	ldr	r1, [pc, #308]	; (800df50 <udp_input+0x1a0>)
  dest = lwip_ntohs(udphdr->dest);
 800de1a:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de1c:	b99c      	cbnz	r4, 800de46 <udp_input+0x96>
  if (pcb != NULL) {
 800de1e:	b925      	cbnz	r5, 800de2a <udp_input+0x7a>
  if (for_us) {
 800de20:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	429a      	cmp	r2, r3
 800de28:	d1da      	bne.n	800dde0 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800de2a:	2108      	movs	r1, #8
 800de2c:	4630      	mov	r0, r6
 800de2e:	f7fc fa8b 	bl	800a348 <pbuf_remove_header>
 800de32:	2800      	cmp	r0, #0
 800de34:	d05e      	beq.n	800def4 <udp_input+0x144>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800de36:	4b41      	ldr	r3, [pc, #260]	; (800df3c <udp_input+0x18c>)
 800de38:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800de3c:	4945      	ldr	r1, [pc, #276]	; (800df54 <udp_input+0x1a4>)
 800de3e:	4841      	ldr	r0, [pc, #260]	; (800df44 <udp_input+0x194>)
 800de40:	f001 f8c8 	bl	800efd4 <iprintf>
 800de44:	e7cc      	b.n	800dde0 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800de46:	8a62      	ldrh	r2, [r4, #18]
 800de48:	9803      	ldr	r0, [sp, #12]
 800de4a:	4282      	cmp	r2, r0
 800de4c:	d14d      	bne.n	800deea <udp_input+0x13a>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800de4e:	f1b8 0f00 	cmp.w	r8, #0
 800de52:	d107      	bne.n	800de64 <udp_input+0xb4>
 800de54:	4663      	mov	r3, ip
 800de56:	2288      	movs	r2, #136	; 0x88
 800de58:	483a      	ldr	r0, [pc, #232]	; (800df44 <udp_input+0x194>)
 800de5a:	f001 f8bb 	bl	800efd4 <iprintf>
 800de5e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800df3c <udp_input+0x18c>
 800de62:	493b      	ldr	r1, [pc, #236]	; (800df50 <udp_input+0x1a0>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de64:	7a20      	ldrb	r0, [r4, #8]
 800de66:	b130      	cbz	r0, 800de76 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800de6e:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de70:	b2d2      	uxtb	r2, r2
 800de72:	4290      	cmp	r0, r2
 800de74:	d139      	bne.n	800deea <udp_input+0x13a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800de76:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800de78:	f1b9 0f00 	cmp.w	r9, #0
 800de7c:	d030      	beq.n	800dee0 <udp_input+0x130>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800de7e:	b13a      	cbz	r2, 800de90 <udp_input+0xe0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800de80:	6978      	ldr	r0, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800de82:	1c43      	adds	r3, r0, #1
 800de84:	d004      	beq.n	800de90 <udp_input+0xe0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800de86:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800de88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de8c:	4218      	tst	r0, r3
 800de8e:	d12c      	bne.n	800deea <udp_input+0x13a>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800de90:	7c20      	ldrb	r0, [r4, #16]
 800de92:	0743      	lsls	r3, r0, #29
 800de94:	d40e      	bmi.n	800deb4 <udp_input+0x104>
        if (uncon_pcb == NULL) {
 800de96:	b35d      	cbz	r5, 800def0 <udp_input+0x140>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800de98:	f1b9 0f00 	cmp.w	r9, #0
 800de9c:	d00a      	beq.n	800deb4 <udp_input+0x104>
 800de9e:	6978      	ldr	r0, [r7, #20]
 800dea0:	3001      	adds	r0, #1
 800dea2:	d107      	bne.n	800deb4 <udp_input+0x104>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dea4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dea8:	682b      	ldr	r3, [r5, #0]
 800deaa:	4283      	cmp	r3, r0
 800deac:	d002      	beq.n	800deb4 <udp_input+0x104>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800deae:	4290      	cmp	r0, r2
 800deb0:	bf08      	it	eq
 800deb2:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800deb4:	8aa2      	ldrh	r2, [r4, #20]
 800deb6:	9b02      	ldr	r3, [sp, #8]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d116      	bne.n	800deea <udp_input+0x13a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800debc:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800debe:	b112      	cbz	r2, 800dec6 <udp_input+0x116>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dec0:	6938      	ldr	r0, [r7, #16]
 800dec2:	4282      	cmp	r2, r0
 800dec4:	d111      	bne.n	800deea <udp_input+0x13a>
        if (prev != NULL) {
 800dec6:	f1ba 0f00 	cmp.w	sl, #0
 800deca:	d007      	beq.n	800dedc <udp_input+0x12c>
          prev->next = pcb->next;
 800decc:	68e3      	ldr	r3, [r4, #12]
 800dece:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800ded2:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 800ded6:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 800deda:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800dedc:	4625      	mov	r5, r4
 800dede:	e7a4      	b.n	800de2a <udp_input+0x7a>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dee0:	2a00      	cmp	r2, #0
 800dee2:	d0d5      	beq.n	800de90 <udp_input+0xe0>
 800dee4:	6978      	ldr	r0, [r7, #20]
 800dee6:	4290      	cmp	r0, r2
 800dee8:	d0d2      	beq.n	800de90 <udp_input+0xe0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800deea:	46a2      	mov	sl, r4
 800deec:	68e4      	ldr	r4, [r4, #12]
 800deee:	e795      	b.n	800de1c <udp_input+0x6c>
 800def0:	4625      	mov	r5, r4
 800def2:	e7df      	b.n	800deb4 <udp_input+0x104>
    if (pcb != NULL) {
 800def4:	b16d      	cbz	r5, 800df12 <udp_input+0x162>
      if (pcb->recv != NULL) {
 800def6:	69ac      	ldr	r4, [r5, #24]
 800def8:	2c00      	cmp	r4, #0
 800defa:	f43f af71 	beq.w	800dde0 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800defe:	9b02      	ldr	r3, [sp, #8]
 800df00:	4632      	mov	r2, r6
 800df02:	4629      	mov	r1, r5
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	4b14      	ldr	r3, [pc, #80]	; (800df58 <udp_input+0x1a8>)
 800df08:	69e8      	ldr	r0, [r5, #28]
 800df0a:	47a0      	blx	r4
}
 800df0c:	b005      	add	sp, #20
 800df0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800df12:	f1b9 0f00 	cmp.w	r9, #0
 800df16:	f47f af63 	bne.w	800dde0 <udp_input+0x30>
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df20:	2be0      	cmp	r3, #224	; 0xe0
 800df22:	f43f af5d 	beq.w	800dde0 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800df26:	89b9      	ldrh	r1, [r7, #12]
 800df28:	4630      	mov	r0, r6
 800df2a:	3108      	adds	r1, #8
 800df2c:	b209      	sxth	r1, r1
 800df2e:	f7fc fa37 	bl	800a3a0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800df32:	2103      	movs	r1, #3
 800df34:	4630      	mov	r0, r6
 800df36:	f7fa ff4f 	bl	8008dd8 <icmp_dest_unreach>
 800df3a:	e751      	b.n	800dde0 <udp_input+0x30>
 800df3c:	0801d8e5 	.word	0x0801d8e5
 800df40:	0801d943 	.word	0x0801d943
 800df44:	0801a72c 	.word	0x0801a72c
 800df48:	0801d95b 	.word	0x0801d95b
 800df4c:	20006ad4 	.word	0x20006ad4
 800df50:	0801d974 	.word	0x0801d974
 800df54:	0801d999 	.word	0x0801d999
 800df58:	20006ae4 	.word	0x20006ae4
 800df5c:	2000d0c0 	.word	0x2000d0c0

0800df60 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800df64:	4c2b      	ldr	r4, [pc, #172]	; (800e014 <udp_bind+0xb4>)
 800df66:	2900      	cmp	r1, #0
 800df68:	bf18      	it	ne
 800df6a:	460c      	movne	r4, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800df6c:	b950      	cbnz	r0, 800df84 <udp_bind+0x24>
 800df6e:	4b2a      	ldr	r3, [pc, #168]	; (800e018 <udp_bind+0xb8>)
 800df70:	f240 32b7 	movw	r2, #951	; 0x3b7
 800df74:	4929      	ldr	r1, [pc, #164]	; (800e01c <udp_bind+0xbc>)
 800df76:	482a      	ldr	r0, [pc, #168]	; (800e020 <udp_bind+0xc0>)
 800df78:	f001 f82c 	bl	800efd4 <iprintf>
 800df7c:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800df80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df84:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800e028 <udp_bind+0xc8>
 800df88:	f8dc 5000 	ldr.w	r5, [ip]
 800df8c:	4629      	mov	r1, r5
 800df8e:	b9c9      	cbnz	r1, 800dfc4 <udp_bind+0x64>
  if (port == 0) {
 800df90:	2a00      	cmp	r2, #0
 800df92:	d13c      	bne.n	800e00e <udp_bind+0xae>
 800df94:	4f23      	ldr	r7, [pc, #140]	; (800e024 <udp_bind+0xc4>)
 800df96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800df9a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800df9e:	883a      	ldrh	r2, [r7, #0]
 800dfa0:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa2:	462e      	mov	r6, r5
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dfa4:	bf16      	itet	ne
 800dfa6:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800dfa8:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dfac:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfae:	b97e      	cbnz	r6, 800dfd0 <udp_bind+0x70>
 800dfb0:	803a      	strh	r2, [r7, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dfb2:	6823      	ldr	r3, [r4, #0]
  pcb->local_port = port;
 800dfb4:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dfb6:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800dfb8:	b911      	cbnz	r1, 800dfc0 <udp_bind+0x60>
    pcb->next = udp_pcbs;
 800dfba:	60c5      	str	r5, [r0, #12]
    udp_pcbs = pcb;
 800dfbc:	f8cc 0000 	str.w	r0, [ip]
  return ERR_OK;
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	e7dd      	b.n	800df80 <udp_bind+0x20>
    if (pcb == ipcb) {
 800dfc4:	4281      	cmp	r1, r0
 800dfc6:	d001      	beq.n	800dfcc <udp_bind+0x6c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dfc8:	68c9      	ldr	r1, [r1, #12]
 800dfca:	e7e0      	b.n	800df8e <udp_bind+0x2e>
      rebind = 1;
 800dfcc:	2101      	movs	r1, #1
 800dfce:	e7df      	b.n	800df90 <udp_bind+0x30>
    if (pcb->local_port == udp_port) {
 800dfd0:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 800dfd4:	4590      	cmp	r8, r2
 800dfd6:	d107      	bne.n	800dfe8 <udp_bind+0x88>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1df      	bne.n	800dfa0 <udp_bind+0x40>
 800dfe0:	803a      	strh	r2, [r7, #0]
      return ERR_USE;
 800dfe2:	f06f 0007 	mvn.w	r0, #7
 800dfe6:	e7cb      	b.n	800df80 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfe8:	68f6      	ldr	r6, [r6, #12]
 800dfea:	e7e0      	b.n	800dfae <udp_bind+0x4e>
      if (pcb != ipcb) {
 800dfec:	4283      	cmp	r3, r0
 800dfee:	d00a      	beq.n	800e006 <udp_bind+0xa6>
          if ((ipcb->local_port == port) &&
 800dff0:	8a5e      	ldrh	r6, [r3, #18]
 800dff2:	4296      	cmp	r6, r2
 800dff4:	d107      	bne.n	800e006 <udp_bind+0xa6>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dff6:	6827      	ldr	r7, [r4, #0]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dff8:	681e      	ldr	r6, [r3, #0]
          if ((ipcb->local_port == port) &&
 800dffa:	42be      	cmp	r6, r7
 800dffc:	d0f1      	beq.n	800dfe2 <udp_bind+0x82>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dffe:	2f00      	cmp	r7, #0
 800e000:	d0ef      	beq.n	800dfe2 <udp_bind+0x82>
              ip_addr_isany(&ipcb->local_ip))) {
 800e002:	2e00      	cmp	r6, #0
 800e004:	d0ed      	beq.n	800dfe2 <udp_bind+0x82>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1ef      	bne.n	800dfec <udp_bind+0x8c>
 800e00c:	e7d1      	b.n	800dfb2 <udp_bind+0x52>
 800e00e:	462b      	mov	r3, r5
 800e010:	e7fa      	b.n	800e008 <udp_bind+0xa8>
 800e012:	bf00      	nop
 800e014:	080118b8 	.word	0x080118b8
 800e018:	0801d8e5 	.word	0x0801d8e5
 800e01c:	0801d9b4 	.word	0x0801d9b4
 800e020:	0801a72c 	.word	0x0801a72c
 800e024:	20000028 	.word	0x20000028
 800e028:	2000d0c0 	.word	0x2000d0c0

0800e02c <udp_sendto_if_src>:
{
 800e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e030:	b085      	sub	sp, #20
 800e032:	460e      	mov	r6, r1
 800e034:	4690      	mov	r8, r2
 800e036:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e038:	4607      	mov	r7, r0
{
 800e03a:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e03e:	b960      	cbnz	r0, 800e05a <udp_sendto_if_src+0x2e>
 800e040:	4b3e      	ldr	r3, [pc, #248]	; (800e13c <udp_sendto_if_src+0x110>)
 800e042:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e046:	493e      	ldr	r1, [pc, #248]	; (800e140 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e048:	f06f 040f 	mvn.w	r4, #15
 800e04c:	483d      	ldr	r0, [pc, #244]	; (800e144 <udp_sendto_if_src+0x118>)
 800e04e:	f000 ffc1 	bl	800efd4 <iprintf>
}
 800e052:	4620      	mov	r0, r4
 800e054:	b005      	add	sp, #20
 800e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e05a:	b921      	cbnz	r1, 800e066 <udp_sendto_if_src+0x3a>
 800e05c:	4b37      	ldr	r3, [pc, #220]	; (800e13c <udp_sendto_if_src+0x110>)
 800e05e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e062:	4939      	ldr	r1, [pc, #228]	; (800e148 <udp_sendto_if_src+0x11c>)
 800e064:	e7f0      	b.n	800e048 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e066:	b922      	cbnz	r2, 800e072 <udp_sendto_if_src+0x46>
 800e068:	4b34      	ldr	r3, [pc, #208]	; (800e13c <udp_sendto_if_src+0x110>)
 800e06a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e06e:	4937      	ldr	r1, [pc, #220]	; (800e14c <udp_sendto_if_src+0x120>)
 800e070:	e7ea      	b.n	800e048 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e072:	f1ba 0f00 	cmp.w	sl, #0
 800e076:	d104      	bne.n	800e082 <udp_sendto_if_src+0x56>
 800e078:	4b30      	ldr	r3, [pc, #192]	; (800e13c <udp_sendto_if_src+0x110>)
 800e07a:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e07e:	4934      	ldr	r1, [pc, #208]	; (800e150 <udp_sendto_if_src+0x124>)
 800e080:	e7e2      	b.n	800e048 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e082:	f1bb 0f00 	cmp.w	fp, #0
 800e086:	d104      	bne.n	800e092 <udp_sendto_if_src+0x66>
 800e088:	4b2c      	ldr	r3, [pc, #176]	; (800e13c <udp_sendto_if_src+0x110>)
 800e08a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e08e:	4931      	ldr	r1, [pc, #196]	; (800e154 <udp_sendto_if_src+0x128>)
 800e090:	e7da      	b.n	800e048 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800e092:	8a42      	ldrh	r2, [r0, #18]
 800e094:	b13a      	cbz	r2, 800e0a6 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e096:	8932      	ldrh	r2, [r6, #8]
 800e098:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d909      	bls.n	800e0b4 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800e0a0:	f04f 34ff 	mov.w	r4, #4294967295
 800e0a4:	e7d5      	b.n	800e052 <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	f7ff ff5a 	bl	800df60 <udp_bind>
    if (err != ERR_OK) {
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d0f1      	beq.n	800e096 <udp_sendto_if_src+0x6a>
 800e0b2:	e7ce      	b.n	800e052 <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e0b4:	2108      	movs	r1, #8
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7fc f942 	bl	800a340 <pbuf_add_header>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d03a      	beq.n	800e136 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e0c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0c4:	2108      	movs	r1, #8
 800e0c6:	2022      	movs	r0, #34	; 0x22
 800e0c8:	f7fc f9da 	bl	800a480 <pbuf_alloc>
    if (q == NULL) {
 800e0cc:	4605      	mov	r5, r0
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d0e6      	beq.n	800e0a0 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800e0d2:	8933      	ldrh	r3, [r6, #8]
 800e0d4:	b113      	cbz	r3, 800e0dc <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	f7fc fb04 	bl	800a6e4 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e0dc:	896b      	ldrh	r3, [r5, #10]
 800e0de:	2b07      	cmp	r3, #7
 800e0e0:	d806      	bhi.n	800e0f0 <udp_sendto_if_src+0xc4>
 800e0e2:	4b16      	ldr	r3, [pc, #88]	; (800e13c <udp_sendto_if_src+0x110>)
 800e0e4:	f240 320d 	movw	r2, #781	; 0x30d
 800e0e8:	491b      	ldr	r1, [pc, #108]	; (800e158 <udp_sendto_if_src+0x12c>)
 800e0ea:	4816      	ldr	r0, [pc, #88]	; (800e144 <udp_sendto_if_src+0x118>)
 800e0ec:	f000 ff72 	bl	800efd4 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800e0f0:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800e0f2:	8a78      	ldrh	r0, [r7, #18]
 800e0f4:	f7fb fc06 	bl	8009904 <lwip_htons>
 800e0f8:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e0fa:	4648      	mov	r0, r9
 800e0fc:	f7fb fc02 	bl	8009904 <lwip_htons>
  udphdr->chksum = 0x0000;
 800e100:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800e102:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800e104:	71a3      	strb	r3, [r4, #6]
 800e106:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800e108:	8928      	ldrh	r0, [r5, #8]
 800e10a:	f7fb fbfb 	bl	8009904 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e10e:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800e110:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e112:	4642      	mov	r2, r8
 800e114:	f8cd b008 	str.w	fp, [sp, #8]
 800e118:	4651      	mov	r1, sl
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	4628      	mov	r0, r5
 800e11e:	7abb      	ldrb	r3, [r7, #10]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	7afb      	ldrb	r3, [r7, #11]
 800e124:	f7fa ff6c 	bl	8009000 <ip4_output_if_src>
  if (q != p) {
 800e128:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e12a:	4604      	mov	r4, r0
  if (q != p) {
 800e12c:	d091      	beq.n	800e052 <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800e12e:	4628      	mov	r0, r5
 800e130:	f7fc f93e 	bl	800a3b0 <pbuf_free>
    q = NULL;
 800e134:	e78d      	b.n	800e052 <udp_sendto_if_src+0x26>
 800e136:	4635      	mov	r5, r6
 800e138:	e7d0      	b.n	800e0dc <udp_sendto_if_src+0xb0>
 800e13a:	bf00      	nop
 800e13c:	0801d8e5 	.word	0x0801d8e5
 800e140:	0801d9ca 	.word	0x0801d9ca
 800e144:	0801a72c 	.word	0x0801a72c
 800e148:	0801d9e9 	.word	0x0801d9e9
 800e14c:	0801da09 	.word	0x0801da09
 800e150:	0801da2b 	.word	0x0801da2b
 800e154:	0801da4d 	.word	0x0801da4d
 800e158:	0801da6e 	.word	0x0801da6e

0800e15c <udp_sendto_if>:
{
 800e15c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e15e:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e160:	b950      	cbnz	r0, 800e178 <udp_sendto_if+0x1c>
 800e162:	4b18      	ldr	r3, [pc, #96]	; (800e1c4 <udp_sendto_if+0x68>)
 800e164:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e168:	4917      	ldr	r1, [pc, #92]	; (800e1c8 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e16a:	4818      	ldr	r0, [pc, #96]	; (800e1cc <udp_sendto_if+0x70>)
 800e16c:	f000 ff32 	bl	800efd4 <iprintf>
 800e170:	f06f 000f 	mvn.w	r0, #15
}
 800e174:	b002      	add	sp, #8
 800e176:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e178:	b921      	cbnz	r1, 800e184 <udp_sendto_if+0x28>
 800e17a:	4b12      	ldr	r3, [pc, #72]	; (800e1c4 <udp_sendto_if+0x68>)
 800e17c:	f240 2281 	movw	r2, #641	; 0x281
 800e180:	4913      	ldr	r1, [pc, #76]	; (800e1d0 <udp_sendto_if+0x74>)
 800e182:	e7f2      	b.n	800e16a <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e184:	b922      	cbnz	r2, 800e190 <udp_sendto_if+0x34>
 800e186:	4b0f      	ldr	r3, [pc, #60]	; (800e1c4 <udp_sendto_if+0x68>)
 800e188:	f240 2282 	movw	r2, #642	; 0x282
 800e18c:	4911      	ldr	r1, [pc, #68]	; (800e1d4 <udp_sendto_if+0x78>)
 800e18e:	e7ec      	b.n	800e16a <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e190:	b924      	cbnz	r4, 800e19c <udp_sendto_if+0x40>
 800e192:	4b0c      	ldr	r3, [pc, #48]	; (800e1c4 <udp_sendto_if+0x68>)
 800e194:	f240 2283 	movw	r2, #643	; 0x283
 800e198:	490f      	ldr	r1, [pc, #60]	; (800e1d8 <udp_sendto_if+0x7c>)
 800e19a:	e7e6      	b.n	800e16a <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e19c:	6805      	ldr	r5, [r0, #0]
 800e19e:	b11d      	cbz	r5, 800e1a8 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e1a0:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e1a4:	2ee0      	cmp	r6, #224	; 0xe0
 800e1a6:	d105      	bne.n	800e1b4 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800e1a8:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e1aa:	e9cd 4500 	strd	r4, r5, [sp]
 800e1ae:	f7ff ff3d 	bl	800e02c <udp_sendto_if_src>
 800e1b2:	e7df      	b.n	800e174 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e1b4:	6866      	ldr	r6, [r4, #4]
 800e1b6:	42b5      	cmp	r5, r6
 800e1b8:	d101      	bne.n	800e1be <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	e7f5      	b.n	800e1aa <udp_sendto_if+0x4e>
        return ERR_RTE;
 800e1be:	f06f 0003 	mvn.w	r0, #3
 800e1c2:	e7d7      	b.n	800e174 <udp_sendto_if+0x18>
 800e1c4:	0801d8e5 	.word	0x0801d8e5
 800e1c8:	0801da9c 	.word	0x0801da9c
 800e1cc:	0801a72c 	.word	0x0801a72c
 800e1d0:	0801dab7 	.word	0x0801dab7
 800e1d4:	0801dad3 	.word	0x0801dad3
 800e1d8:	0801daf1 	.word	0x0801daf1

0800e1dc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	460d      	mov	r5, r1
 800e1e0:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	b948      	cbnz	r0, 800e1fa <udp_connect+0x1e>
 800e1e6:	4b16      	ldr	r3, [pc, #88]	; (800e240 <udp_connect+0x64>)
 800e1e8:	f240 4235 	movw	r2, #1077	; 0x435
 800e1ec:	4915      	ldr	r1, [pc, #84]	; (800e244 <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1ee:	4816      	ldr	r0, [pc, #88]	; (800e248 <udp_connect+0x6c>)
 800e1f0:	f000 fef0 	bl	800efd4 <iprintf>
 800e1f4:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800e1f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1fa:	b921      	cbnz	r1, 800e206 <udp_connect+0x2a>
 800e1fc:	4b10      	ldr	r3, [pc, #64]	; (800e240 <udp_connect+0x64>)
 800e1fe:	f240 4236 	movw	r2, #1078	; 0x436
 800e202:	4912      	ldr	r1, [pc, #72]	; (800e24c <udp_connect+0x70>)
 800e204:	e7f3      	b.n	800e1ee <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800e206:	8a42      	ldrh	r2, [r0, #18]
 800e208:	b16a      	cbz	r2, 800e226 <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e20a:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800e20c:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e20e:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e210:	7c23      	ldrb	r3, [r4, #16]
 800e212:	f043 0304 	orr.w	r3, r3, #4
 800e216:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e218:	4b0d      	ldr	r3, [pc, #52]	; (800e250 <udp_connect+0x74>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	4610      	mov	r0, r2
 800e21e:	b940      	cbnz	r0, 800e232 <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800e220:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800e222:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800e224:	e7e8      	b.n	800e1f8 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e226:	4601      	mov	r1, r0
 800e228:	f7ff fe9a 	bl	800df60 <udp_bind>
    if (err != ERR_OK) {
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d0ec      	beq.n	800e20a <udp_connect+0x2e>
 800e230:	e7e2      	b.n	800e1f8 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800e232:	42a0      	cmp	r0, r4
 800e234:	d001      	beq.n	800e23a <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e236:	68c0      	ldr	r0, [r0, #12]
 800e238:	e7f1      	b.n	800e21e <udp_connect+0x42>
      return ERR_OK;
 800e23a:	2000      	movs	r0, #0
 800e23c:	e7dc      	b.n	800e1f8 <udp_connect+0x1c>
 800e23e:	bf00      	nop
 800e240:	0801d8e5 	.word	0x0801d8e5
 800e244:	0801db87 	.word	0x0801db87
 800e248:	0801a72c 	.word	0x0801a72c
 800e24c:	0801dba0 	.word	0x0801dba0
 800e250:	2000d0c0 	.word	0x2000d0c0

0800e254 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e254:	b930      	cbnz	r0, 800e264 <udp_recv+0x10>
 800e256:	4b05      	ldr	r3, [pc, #20]	; (800e26c <udp_recv+0x18>)
 800e258:	f240 428a 	movw	r2, #1162	; 0x48a
 800e25c:	4904      	ldr	r1, [pc, #16]	; (800e270 <udp_recv+0x1c>)
 800e25e:	4805      	ldr	r0, [pc, #20]	; (800e274 <udp_recv+0x20>)
 800e260:	f000 beb8 	b.w	800efd4 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800e264:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop
 800e26c:	0801d8e5 	.word	0x0801d8e5
 800e270:	0801dbd8 	.word	0x0801dbd8
 800e274:	0801a72c 	.word	0x0801a72c

0800e278 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e278:	4601      	mov	r1, r0
 800e27a:	b930      	cbnz	r0, 800e28a <udp_remove+0x12>
 800e27c:	4b0d      	ldr	r3, [pc, #52]	; (800e2b4 <udp_remove+0x3c>)
 800e27e:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e282:	490d      	ldr	r1, [pc, #52]	; (800e2b8 <udp_remove+0x40>)
 800e284:	480d      	ldr	r0, [pc, #52]	; (800e2bc <udp_remove+0x44>)
 800e286:	f000 bea5 	b.w	800efd4 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e28a:	4a0d      	ldr	r2, [pc, #52]	; (800e2c0 <udp_remove+0x48>)
 800e28c:	6813      	ldr	r3, [r2, #0]
 800e28e:	4283      	cmp	r3, r0
 800e290:	d105      	bne.n	800e29e <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e292:	68c3      	ldr	r3, [r0, #12]
 800e294:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e296:	2000      	movs	r0, #0
 800e298:	f7fb be70 	b.w	8009f7c <memp_free>
 800e29c:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d0f9      	beq.n	800e296 <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e2a2:	68da      	ldr	r2, [r3, #12]
 800e2a4:	2a00      	cmp	r2, #0
 800e2a6:	d0f6      	beq.n	800e296 <udp_remove+0x1e>
 800e2a8:	428a      	cmp	r2, r1
 800e2aa:	d1f7      	bne.n	800e29c <udp_remove+0x24>
        pcb2->next = pcb->next;
 800e2ac:	68ca      	ldr	r2, [r1, #12]
 800e2ae:	60da      	str	r2, [r3, #12]
        break;
 800e2b0:	e7f1      	b.n	800e296 <udp_remove+0x1e>
 800e2b2:	bf00      	nop
 800e2b4:	0801d8e5 	.word	0x0801d8e5
 800e2b8:	0801dbee 	.word	0x0801dbee
 800e2bc:	0801a72c 	.word	0x0801a72c
 800e2c0:	2000d0c0 	.word	0x2000d0c0

0800e2c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e2c4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	f7fb fe3c 	bl	8009f44 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	b128      	cbz	r0, 800e2dc <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e2d0:	2220      	movs	r2, #32
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	f000 fa0c 	bl	800e6f0 <memset>
    pcb->ttl = UDP_TTL;
 800e2d8:	23ff      	movs	r3, #255	; 0xff
 800e2da:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800e2dc:	4620      	mov	r0, r4
 800e2de:	bd10      	pop	{r4, pc}

0800e2e0 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800e2e0:	f7ff bff0 	b.w	800e2c4 <udp_new>

0800e2e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e2e4:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e2e6:	b138      	cbz	r0, 800e2f8 <udp_netif_ip_addr_changed+0x14>
 800e2e8:	6803      	ldr	r3, [r0, #0]
 800e2ea:	b12b      	cbz	r3, 800e2f8 <udp_netif_ip_addr_changed+0x14>
 800e2ec:	b121      	cbz	r1, 800e2f8 <udp_netif_ip_addr_changed+0x14>
 800e2ee:	680b      	ldr	r3, [r1, #0]
 800e2f0:	b113      	cbz	r3, 800e2f8 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e2f2:	4b06      	ldr	r3, [pc, #24]	; (800e30c <udp_netif_ip_addr_changed+0x28>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	b903      	cbnz	r3, 800e2fa <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800e2f8:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e2fa:	681c      	ldr	r4, [r3, #0]
 800e2fc:	6802      	ldr	r2, [r0, #0]
 800e2fe:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e300:	bf04      	itt	eq
 800e302:	680a      	ldreq	r2, [r1, #0]
 800e304:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	e7f5      	b.n	800e2f6 <udp_netif_ip_addr_changed+0x12>
 800e30a:	bf00      	nop
 800e30c:	2000d0c0 	.word	0x2000d0c0

0800e310 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e310:	8943      	ldrh	r3, [r0, #10]
 800e312:	2b0e      	cmp	r3, #14
{
 800e314:	b570      	push	{r4, r5, r6, lr}
 800e316:	4604      	mov	r4, r0
 800e318:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800e31a:	d91a      	bls.n	800e352 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e31c:	7bc3      	ldrb	r3, [r0, #15]
 800e31e:	b91b      	cbnz	r3, 800e328 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800e320:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800e324:	3301      	adds	r3, #1
 800e326:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e328:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e32a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800e32c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800e32e:	07d9      	lsls	r1, r3, #31
 800e330:	d50a      	bpl.n	800e348 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e332:	2b01      	cmp	r3, #1
 800e334:	d111      	bne.n	800e35a <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e336:	7843      	ldrb	r3, [r0, #1]
 800e338:	b933      	cbnz	r3, 800e348 <ethernet_input+0x38>
 800e33a:	7883      	ldrb	r3, [r0, #2]
 800e33c:	2b5e      	cmp	r3, #94	; 0x5e
 800e33e:	d103      	bne.n	800e348 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e340:	7b63      	ldrb	r3, [r4, #13]
 800e342:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e346:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800e348:	2e08      	cmp	r6, #8
 800e34a:	d010      	beq.n	800e36e <ethernet_input+0x5e>
 800e34c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800e350:	d01d      	beq.n	800e38e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e352:	4620      	mov	r0, r4
 800e354:	f7fc f82c 	bl	800a3b0 <pbuf_free>
  return ERR_OK;
 800e358:	e017      	b.n	800e38a <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e35a:	2206      	movs	r2, #6
 800e35c:	4913      	ldr	r1, [pc, #76]	; (800e3ac <ethernet_input+0x9c>)
 800e35e:	f000 f98f 	bl	800e680 <memcmp>
 800e362:	2800      	cmp	r0, #0
 800e364:	d1f0      	bne.n	800e348 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800e366:	7b63      	ldrb	r3, [r4, #13]
 800e368:	f043 0308 	orr.w	r3, r3, #8
 800e36c:	e7eb      	b.n	800e346 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e36e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800e372:	071a      	lsls	r2, r3, #28
 800e374:	d5ed      	bpl.n	800e352 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e376:	210e      	movs	r1, #14
 800e378:	4620      	mov	r0, r4
 800e37a:	f7fb ffe5 	bl	800a348 <pbuf_remove_header>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d1e7      	bne.n	800e352 <ethernet_input+0x42>
        ip4_input(p, netif);
 800e382:	4629      	mov	r1, r5
 800e384:	4620      	mov	r0, r4
 800e386:	f7fa fd77 	bl	8008e78 <ip4_input>
}
 800e38a:	2000      	movs	r0, #0
 800e38c:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e38e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800e392:	071b      	lsls	r3, r3, #28
 800e394:	d5dd      	bpl.n	800e352 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e396:	210e      	movs	r1, #14
 800e398:	4620      	mov	r0, r4
 800e39a:	f7fb ffd5 	bl	800a348 <pbuf_remove_header>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d1d7      	bne.n	800e352 <ethernet_input+0x42>
        etharp_input(p, netif);
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f7fa f9b9 	bl	800871c <etharp_input>
      break;
 800e3aa:	e7ee      	b.n	800e38a <ethernet_input+0x7a>
 800e3ac:	08011a08 	.word	0x08011a08

0800e3b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e3b8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800e3bc:	4616      	mov	r6, r2
 800e3be:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800e3c0:	f7fb faa0 	bl	8009904 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e3c4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800e3c6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	f7fb ffb9 	bl	800a340 <pbuf_add_header>
 800e3ce:	b9e0      	cbnz	r0, 800e40a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e3d0:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800e3d2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	600b      	str	r3, [r1, #0]
 800e3da:	88bb      	ldrh	r3, [r7, #4]
 800e3dc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e3de:	6833      	ldr	r3, [r6, #0]
 800e3e0:	f8c1 3006 	str.w	r3, [r1, #6]
 800e3e4:	88b3      	ldrh	r3, [r6, #4]
 800e3e6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e3e8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e3ec:	2b06      	cmp	r3, #6
 800e3ee:	d006      	beq.n	800e3fe <ethernet_output+0x4e>
 800e3f0:	4b08      	ldr	r3, [pc, #32]	; (800e414 <ethernet_output+0x64>)
 800e3f2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e3f6:	4908      	ldr	r1, [pc, #32]	; (800e418 <ethernet_output+0x68>)
 800e3f8:	4808      	ldr	r0, [pc, #32]	; (800e41c <ethernet_output+0x6c>)
 800e3fa:	f000 fdeb 	bl	800efd4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e3fe:	69a3      	ldr	r3, [r4, #24]
 800e400:	4629      	mov	r1, r5
 800e402:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800e404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800e408:	4718      	bx	r3
}
 800e40a:	f06f 0001 	mvn.w	r0, #1
 800e40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e412:	bf00      	nop
 800e414:	0801dc06 	.word	0x0801dc06
 800e418:	0801dc6a 	.word	0x0801dc6a
 800e41c:	0801a72c 	.word	0x0801a72c

0800e420 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e420:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800e422:	2304      	movs	r3, #4
{
 800e424:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800e426:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e428:	4668      	mov	r0, sp
 800e42a:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800e42c:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e42e:	f7f7 f90d 	bl	800564c <osMessageCreate>
 800e432:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e434:	fab0 f080 	clz	r0, r0
 800e438:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800e43a:	4240      	negs	r0, r0
 800e43c:	b002      	add	sp, #8
 800e43e:	bd10      	pop	{r4, pc}

0800e440 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e440:	b510      	push	{r4, lr}
 800e442:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800e444:	6800      	ldr	r0, [r0, #0]
 800e446:	f7f7 f970 	bl	800572a <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800e44a:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800e450:	f7f7 b972 	b.w	8005738 <osMessageDelete>

0800e454 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e454:	2200      	movs	r2, #0
 800e456:	6800      	ldr	r0, [r0, #0]
{
 800e458:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e45a:	f7f7 f8fc 	bl	8005656 <osMessagePut>
 800e45e:	3800      	subs	r0, #0
 800e460:	bf18      	it	ne
 800e462:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800e464:	4240      	negs	r0, r0
 800e466:	bd08      	pop	{r3, pc}

0800e468 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e46a:	4617      	mov	r7, r2
 800e46c:	b085      	sub	sp, #20
 800e46e:	4606      	mov	r6, r0
 800e470:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800e472:	f7f7 f82c 	bl	80054ce <osKernelSysTick>
 800e476:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e478:	b177      	cbz	r7, 800e498 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800e47a:	463a      	mov	r2, r7
 800e47c:	6831      	ldr	r1, [r6, #0]
 800e47e:	a801      	add	r0, sp, #4
 800e480:	f7f7 f911 	bl	80056a6 <osMessageGet>

    if(event.status == osEventMessage)
 800e484:	9b01      	ldr	r3, [sp, #4]
 800e486:	2b10      	cmp	r3, #16
 800e488:	d10d      	bne.n	800e4a6 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800e48a:	9b02      	ldr	r3, [sp, #8]
 800e48c:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800e48e:	f7f7 f81e 	bl	80054ce <osKernelSysTick>
 800e492:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e494:	b005      	add	sp, #20
 800e496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800e498:	f04f 32ff 	mov.w	r2, #4294967295
 800e49c:	6831      	ldr	r1, [r6, #0]
 800e49e:	a801      	add	r0, sp, #4
 800e4a0:	f7f7 f901 	bl	80056a6 <osMessageGet>
 800e4a4:	e7f1      	b.n	800e48a <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800e4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4aa:	e7f3      	b.n	800e494 <sys_arch_mbox_fetch+0x2c>

0800e4ac <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800e4ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4ae:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	6801      	ldr	r1, [r0, #0]
 800e4b4:	a801      	add	r0, sp, #4
 800e4b6:	f7f7 f8f6 	bl	80056a6 <osMessageGet>

  if(event.status == osEventMessage)
 800e4ba:	9b01      	ldr	r3, [sp, #4]
 800e4bc:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800e4be:	bf05      	ittet	eq
 800e4c0:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800e4c2:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800e4c4:	f04f 30ff 	movne.w	r0, #4294967295
    *msg = (void *)event.value.v;
 800e4c8:	6023      	streq	r3, [r4, #0]
  }
}
 800e4ca:	b004      	add	sp, #16
 800e4cc:	bd10      	pop	{r4, pc}

0800e4ce <sys_mbox_valid>:
 800e4ce:	6800      	ldr	r0, [r0, #0]
 800e4d0:	3800      	subs	r0, #0
 800e4d2:	bf18      	it	ne
 800e4d4:	2001      	movne	r0, #1
 800e4d6:	4770      	bx	lr

0800e4d8 <sys_mbox_set_invalid>:
 800e4d8:	2300      	movs	r3, #0
 800e4da:	6003      	str	r3, [r0, #0]
 800e4dc:	4770      	bx	lr

0800e4de <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800e4de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4e0:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800e4e2:	2400      	movs	r4, #0
{
 800e4e4:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e4e6:	a801      	add	r0, sp, #4
 800e4e8:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800e4ea:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e4ec:	f7f7 f870 	bl	80055d0 <osSemaphoreCreate>
 800e4f0:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800e4f2:	b130      	cbz	r0, 800e502 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800e4f4:	b945      	cbnz	r5, 800e508 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f7 f87f 	bl	80055fa <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800e4fc:	4628      	mov	r0, r5
}
 800e4fe:	b002      	add	sp, #8
 800e500:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800e502:	f04f 30ff 	mov.w	r0, #4294967295
 800e506:	e7fa      	b.n	800e4fe <sys_sem_new+0x20>
  return ERR_OK;
 800e508:	4620      	mov	r0, r4
 800e50a:	e7f8      	b.n	800e4fe <sys_sem_new+0x20>

0800e50c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800e50c:	b570      	push	{r4, r5, r6, lr}
 800e50e:	460e      	mov	r6, r1
 800e510:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800e512:	f7f6 ffdc 	bl	80054ce <osKernelSysTick>
 800e516:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e518:	b146      	cbz	r6, 800e52c <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800e51a:	4631      	mov	r1, r6
 800e51c:	6828      	ldr	r0, [r5, #0]
 800e51e:	f7f7 f86c 	bl	80055fa <osSemaphoreWait>
 800e522:	b958      	cbnz	r0, 800e53c <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800e524:	f7f6 ffd3 	bl	80054ce <osKernelSysTick>
 800e528:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e52a:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800e52c:	f04f 31ff 	mov.w	r1, #4294967295
 800e530:	6828      	ldr	r0, [r5, #0]
 800e532:	f7f7 f862 	bl	80055fa <osSemaphoreWait>
 800e536:	2800      	cmp	r0, #0
 800e538:	d1f8      	bne.n	800e52c <sys_arch_sem_wait+0x20>
 800e53a:	e7f3      	b.n	800e524 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	e7f3      	b.n	800e52a <sys_arch_sem_wait+0x1e>

0800e542 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800e542:	6800      	ldr	r0, [r0, #0]
 800e544:	f7f7 b87e 	b.w	8005644 <osSemaphoreRelease>

0800e548 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800e548:	6800      	ldr	r0, [r0, #0]
 800e54a:	f7f7 b87d 	b.w	8005648 <osSemaphoreDelete>

0800e54e <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800e54e:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800e550:	3800      	subs	r0, #0
 800e552:	bf18      	it	ne
 800e554:	2001      	movne	r0, #1
 800e556:	4770      	bx	lr

0800e558 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800e558:	2300      	movs	r3, #0
 800e55a:	6003      	str	r3, [r0, #0]
}
 800e55c:	4770      	bx	lr
	...

0800e560 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800e560:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800e562:	4803      	ldr	r0, [pc, #12]	; (800e570 <sys_init+0x10>)
 800e564:	f7f6 ffdf 	bl	8005526 <osMutexCreate>
 800e568:	4b02      	ldr	r3, [pc, #8]	; (800e574 <sys_init+0x14>)
 800e56a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800e56c:	bd08      	pop	{r3, pc}
 800e56e:	bf00      	nop
 800e570:	08011a14 	.word	0x08011a14
 800e574:	2000d0c4 	.word	0x2000d0c4

0800e578 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e578:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800e57a:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e57c:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e57e:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800e580:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e582:	f7f6 ffd0 	bl	8005526 <osMutexCreate>
 800e586:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800e588:	fab0 f080 	clz	r0, r0
 800e58c:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800e58e:	4240      	negs	r0, r0
 800e590:	b002      	add	sp, #8
 800e592:	bd10      	pop	{r4, pc}

0800e594 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800e594:	f04f 31ff 	mov.w	r1, #4294967295
 800e598:	6800      	ldr	r0, [r0, #0]
 800e59a:	f7f6 bfc7 	b.w	800552c <osMutexWait>

0800e59e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800e59e:	6800      	ldr	r0, [r0, #0]
 800e5a0:	f7f6 bfe9 	b.w	8005576 <osMutexRelease>

0800e5a4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e5a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e5a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e5aa:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800e5ac:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e5ae:	f8ad 100c 	strh.w	r1, [sp, #12]
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	f7f6 ff8f 	bl	80054dc <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800e5be:	b007      	add	sp, #28
 800e5c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800e5c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800e5c4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800e5c6:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <sys_arch_protect+0x14>)
 800e5c8:	f04f 31ff 	mov.w	r1, #4294967295
 800e5cc:	6818      	ldr	r0, [r3, #0]
 800e5ce:	f7f6 ffad 	bl	800552c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	bd08      	pop	{r3, pc}
 800e5d6:	bf00      	nop
 800e5d8:	2000d0c4 	.word	0x2000d0c4

0800e5dc <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800e5dc:	4b01      	ldr	r3, [pc, #4]	; (800e5e4 <sys_arch_unprotect+0x8>)
 800e5de:	6818      	ldr	r0, [r3, #0]
 800e5e0:	f7f6 bfc9 	b.w	8005576 <osMutexRelease>
 800e5e4:	2000d0c4 	.word	0x2000d0c4

0800e5e8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	b1a8      	cbz	r0, 800e61c <fs_open+0x34>
 800e5f0:	b1a1      	cbz	r1, 800e61c <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800e5f2:	4d0c      	ldr	r5, [pc, #48]	; (800e624 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800e5f4:	6869      	ldr	r1, [r5, #4]
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	f7f1 fe0a 	bl	8000210 <strcmp>
 800e5fc:	b940      	cbnz	r0, 800e610 <fs_open+0x28>
      file->data = (const char *)f->data;
 800e5fe:	68ab      	ldr	r3, [r5, #8]
 800e600:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800e602:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800e604:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800e606:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800e60a:	7c2b      	ldrb	r3, [r5, #16]
 800e60c:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800e610:	682d      	ldr	r5, [r5, #0]
 800e612:	2d00      	cmp	r5, #0
 800e614:	d1ee      	bne.n	800e5f4 <fs_open+0xc>
  return ERR_VAL;
 800e616:	f06f 0005 	mvn.w	r0, #5
 800e61a:	e7f8      	b.n	800e60e <fs_open+0x26>
    return ERR_ARG;
 800e61c:	f06f 000f 	mvn.w	r0, #15
 800e620:	e7f5      	b.n	800e60e <fs_open+0x26>
 800e622:	bf00      	nop
 800e624:	08011a18 	.word	0x08011a18

0800e628 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800e628:	4770      	bx	lr
	...

0800e62c <__errno>:
 800e62c:	4b01      	ldr	r3, [pc, #4]	; (800e634 <__errno+0x8>)
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	2000002c 	.word	0x2000002c

0800e638 <__libc_init_array>:
 800e638:	b570      	push	{r4, r5, r6, lr}
 800e63a:	4d0d      	ldr	r5, [pc, #52]	; (800e670 <__libc_init_array+0x38>)
 800e63c:	4c0d      	ldr	r4, [pc, #52]	; (800e674 <__libc_init_array+0x3c>)
 800e63e:	1b64      	subs	r4, r4, r5
 800e640:	10a4      	asrs	r4, r4, #2
 800e642:	2600      	movs	r6, #0
 800e644:	42a6      	cmp	r6, r4
 800e646:	d109      	bne.n	800e65c <__libc_init_array+0x24>
 800e648:	4d0b      	ldr	r5, [pc, #44]	; (800e678 <__libc_init_array+0x40>)
 800e64a:	4c0c      	ldr	r4, [pc, #48]	; (800e67c <__libc_init_array+0x44>)
 800e64c:	f002 ffbc 	bl	80115c8 <_init>
 800e650:	1b64      	subs	r4, r4, r5
 800e652:	10a4      	asrs	r4, r4, #2
 800e654:	2600      	movs	r6, #0
 800e656:	42a6      	cmp	r6, r4
 800e658:	d105      	bne.n	800e666 <__libc_init_array+0x2e>
 800e65a:	bd70      	pop	{r4, r5, r6, pc}
 800e65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e660:	4798      	blx	r3
 800e662:	3601      	adds	r6, #1
 800e664:	e7ee      	b.n	800e644 <__libc_init_array+0xc>
 800e666:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66a:	4798      	blx	r3
 800e66c:	3601      	adds	r6, #1
 800e66e:	e7f2      	b.n	800e656 <__libc_init_array+0x1e>
 800e670:	0801e0d4 	.word	0x0801e0d4
 800e674:	0801e0d4 	.word	0x0801e0d4
 800e678:	0801e0d4 	.word	0x0801e0d4
 800e67c:	0801e0d8 	.word	0x0801e0d8

0800e680 <memcmp>:
 800e680:	b510      	push	{r4, lr}
 800e682:	3901      	subs	r1, #1
 800e684:	4402      	add	r2, r0
 800e686:	4290      	cmp	r0, r2
 800e688:	d101      	bne.n	800e68e <memcmp+0xe>
 800e68a:	2000      	movs	r0, #0
 800e68c:	e005      	b.n	800e69a <memcmp+0x1a>
 800e68e:	7803      	ldrb	r3, [r0, #0]
 800e690:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e694:	42a3      	cmp	r3, r4
 800e696:	d001      	beq.n	800e69c <memcmp+0x1c>
 800e698:	1b18      	subs	r0, r3, r4
 800e69a:	bd10      	pop	{r4, pc}
 800e69c:	3001      	adds	r0, #1
 800e69e:	e7f2      	b.n	800e686 <memcmp+0x6>

0800e6a0 <memcpy>:
 800e6a0:	440a      	add	r2, r1
 800e6a2:	4291      	cmp	r1, r2
 800e6a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6a8:	d100      	bne.n	800e6ac <memcpy+0xc>
 800e6aa:	4770      	bx	lr
 800e6ac:	b510      	push	{r4, lr}
 800e6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6b6:	4291      	cmp	r1, r2
 800e6b8:	d1f9      	bne.n	800e6ae <memcpy+0xe>
 800e6ba:	bd10      	pop	{r4, pc}

0800e6bc <memmove>:
 800e6bc:	4288      	cmp	r0, r1
 800e6be:	b510      	push	{r4, lr}
 800e6c0:	eb01 0402 	add.w	r4, r1, r2
 800e6c4:	d902      	bls.n	800e6cc <memmove+0x10>
 800e6c6:	4284      	cmp	r4, r0
 800e6c8:	4623      	mov	r3, r4
 800e6ca:	d807      	bhi.n	800e6dc <memmove+0x20>
 800e6cc:	1e43      	subs	r3, r0, #1
 800e6ce:	42a1      	cmp	r1, r4
 800e6d0:	d008      	beq.n	800e6e4 <memmove+0x28>
 800e6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6da:	e7f8      	b.n	800e6ce <memmove+0x12>
 800e6dc:	4402      	add	r2, r0
 800e6de:	4601      	mov	r1, r0
 800e6e0:	428a      	cmp	r2, r1
 800e6e2:	d100      	bne.n	800e6e6 <memmove+0x2a>
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6ee:	e7f7      	b.n	800e6e0 <memmove+0x24>

0800e6f0 <memset>:
 800e6f0:	4402      	add	r2, r0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d100      	bne.n	800e6fa <memset+0xa>
 800e6f8:	4770      	bx	lr
 800e6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e6fe:	e7f9      	b.n	800e6f4 <memset+0x4>

0800e700 <__cvt>:
 800e700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e704:	ec55 4b10 	vmov	r4, r5, d0
 800e708:	2d00      	cmp	r5, #0
 800e70a:	460e      	mov	r6, r1
 800e70c:	4619      	mov	r1, r3
 800e70e:	462b      	mov	r3, r5
 800e710:	bfbb      	ittet	lt
 800e712:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e716:	461d      	movlt	r5, r3
 800e718:	2300      	movge	r3, #0
 800e71a:	232d      	movlt	r3, #45	; 0x2d
 800e71c:	700b      	strb	r3, [r1, #0]
 800e71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e720:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e724:	4691      	mov	r9, r2
 800e726:	f023 0820 	bic.w	r8, r3, #32
 800e72a:	bfbc      	itt	lt
 800e72c:	4622      	movlt	r2, r4
 800e72e:	4614      	movlt	r4, r2
 800e730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e734:	d005      	beq.n	800e742 <__cvt+0x42>
 800e736:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e73a:	d100      	bne.n	800e73e <__cvt+0x3e>
 800e73c:	3601      	adds	r6, #1
 800e73e:	2102      	movs	r1, #2
 800e740:	e000      	b.n	800e744 <__cvt+0x44>
 800e742:	2103      	movs	r1, #3
 800e744:	ab03      	add	r3, sp, #12
 800e746:	9301      	str	r3, [sp, #4]
 800e748:	ab02      	add	r3, sp, #8
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	ec45 4b10 	vmov	d0, r4, r5
 800e750:	4653      	mov	r3, sl
 800e752:	4632      	mov	r2, r6
 800e754:	f000 fd9c 	bl	800f290 <_dtoa_r>
 800e758:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e75c:	4607      	mov	r7, r0
 800e75e:	d102      	bne.n	800e766 <__cvt+0x66>
 800e760:	f019 0f01 	tst.w	r9, #1
 800e764:	d022      	beq.n	800e7ac <__cvt+0xac>
 800e766:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e76a:	eb07 0906 	add.w	r9, r7, r6
 800e76e:	d110      	bne.n	800e792 <__cvt+0x92>
 800e770:	783b      	ldrb	r3, [r7, #0]
 800e772:	2b30      	cmp	r3, #48	; 0x30
 800e774:	d10a      	bne.n	800e78c <__cvt+0x8c>
 800e776:	2200      	movs	r2, #0
 800e778:	2300      	movs	r3, #0
 800e77a:	4620      	mov	r0, r4
 800e77c:	4629      	mov	r1, r5
 800e77e:	f7f2 f9d3 	bl	8000b28 <__aeabi_dcmpeq>
 800e782:	b918      	cbnz	r0, 800e78c <__cvt+0x8c>
 800e784:	f1c6 0601 	rsb	r6, r6, #1
 800e788:	f8ca 6000 	str.w	r6, [sl]
 800e78c:	f8da 3000 	ldr.w	r3, [sl]
 800e790:	4499      	add	r9, r3
 800e792:	2200      	movs	r2, #0
 800e794:	2300      	movs	r3, #0
 800e796:	4620      	mov	r0, r4
 800e798:	4629      	mov	r1, r5
 800e79a:	f7f2 f9c5 	bl	8000b28 <__aeabi_dcmpeq>
 800e79e:	b108      	cbz	r0, 800e7a4 <__cvt+0xa4>
 800e7a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7a4:	2230      	movs	r2, #48	; 0x30
 800e7a6:	9b03      	ldr	r3, [sp, #12]
 800e7a8:	454b      	cmp	r3, r9
 800e7aa:	d307      	bcc.n	800e7bc <__cvt+0xbc>
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7b0:	1bdb      	subs	r3, r3, r7
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	6013      	str	r3, [r2, #0]
 800e7b6:	b004      	add	sp, #16
 800e7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7bc:	1c59      	adds	r1, r3, #1
 800e7be:	9103      	str	r1, [sp, #12]
 800e7c0:	701a      	strb	r2, [r3, #0]
 800e7c2:	e7f0      	b.n	800e7a6 <__cvt+0xa6>

0800e7c4 <__exponent>:
 800e7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	bfb8      	it	lt
 800e7cc:	4249      	neglt	r1, r1
 800e7ce:	f803 2b02 	strb.w	r2, [r3], #2
 800e7d2:	bfb4      	ite	lt
 800e7d4:	222d      	movlt	r2, #45	; 0x2d
 800e7d6:	222b      	movge	r2, #43	; 0x2b
 800e7d8:	2909      	cmp	r1, #9
 800e7da:	7042      	strb	r2, [r0, #1]
 800e7dc:	dd2a      	ble.n	800e834 <__exponent+0x70>
 800e7de:	f10d 0407 	add.w	r4, sp, #7
 800e7e2:	46a4      	mov	ip, r4
 800e7e4:	270a      	movs	r7, #10
 800e7e6:	46a6      	mov	lr, r4
 800e7e8:	460a      	mov	r2, r1
 800e7ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7ee:	fb07 1516 	mls	r5, r7, r6, r1
 800e7f2:	3530      	adds	r5, #48	; 0x30
 800e7f4:	2a63      	cmp	r2, #99	; 0x63
 800e7f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e7fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e7fe:	4631      	mov	r1, r6
 800e800:	dcf1      	bgt.n	800e7e6 <__exponent+0x22>
 800e802:	3130      	adds	r1, #48	; 0x30
 800e804:	f1ae 0502 	sub.w	r5, lr, #2
 800e808:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e80c:	1c44      	adds	r4, r0, #1
 800e80e:	4629      	mov	r1, r5
 800e810:	4561      	cmp	r1, ip
 800e812:	d30a      	bcc.n	800e82a <__exponent+0x66>
 800e814:	f10d 0209 	add.w	r2, sp, #9
 800e818:	eba2 020e 	sub.w	r2, r2, lr
 800e81c:	4565      	cmp	r5, ip
 800e81e:	bf88      	it	hi
 800e820:	2200      	movhi	r2, #0
 800e822:	4413      	add	r3, r2
 800e824:	1a18      	subs	r0, r3, r0
 800e826:	b003      	add	sp, #12
 800e828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e82e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e832:	e7ed      	b.n	800e810 <__exponent+0x4c>
 800e834:	2330      	movs	r3, #48	; 0x30
 800e836:	3130      	adds	r1, #48	; 0x30
 800e838:	7083      	strb	r3, [r0, #2]
 800e83a:	70c1      	strb	r1, [r0, #3]
 800e83c:	1d03      	adds	r3, r0, #4
 800e83e:	e7f1      	b.n	800e824 <__exponent+0x60>

0800e840 <_printf_float>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	ed2d 8b02 	vpush	{d8}
 800e848:	b08d      	sub	sp, #52	; 0x34
 800e84a:	460c      	mov	r4, r1
 800e84c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e850:	4616      	mov	r6, r2
 800e852:	461f      	mov	r7, r3
 800e854:	4605      	mov	r5, r0
 800e856:	f001 fc23 	bl	80100a0 <_localeconv_r>
 800e85a:	f8d0 a000 	ldr.w	sl, [r0]
 800e85e:	4650      	mov	r0, sl
 800e860:	f7f1 fce0 	bl	8000224 <strlen>
 800e864:	2300      	movs	r3, #0
 800e866:	930a      	str	r3, [sp, #40]	; 0x28
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	9305      	str	r3, [sp, #20]
 800e86c:	f8d8 3000 	ldr.w	r3, [r8]
 800e870:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e874:	3307      	adds	r3, #7
 800e876:	f023 0307 	bic.w	r3, r3, #7
 800e87a:	f103 0208 	add.w	r2, r3, #8
 800e87e:	f8c8 2000 	str.w	r2, [r8]
 800e882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e886:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e88a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e892:	9307      	str	r3, [sp, #28]
 800e894:	f8cd 8018 	str.w	r8, [sp, #24]
 800e898:	ee08 0a10 	vmov	s16, r0
 800e89c:	4b9f      	ldr	r3, [pc, #636]	; (800eb1c <_printf_float+0x2dc>)
 800e89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a6:	f7f2 f971 	bl	8000b8c <__aeabi_dcmpun>
 800e8aa:	bb88      	cbnz	r0, 800e910 <_printf_float+0xd0>
 800e8ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8b0:	4b9a      	ldr	r3, [pc, #616]	; (800eb1c <_printf_float+0x2dc>)
 800e8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b6:	f7f2 f94b 	bl	8000b50 <__aeabi_dcmple>
 800e8ba:	bb48      	cbnz	r0, 800e910 <_printf_float+0xd0>
 800e8bc:	2200      	movs	r2, #0
 800e8be:	2300      	movs	r3, #0
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	4649      	mov	r1, r9
 800e8c4:	f7f2 f93a 	bl	8000b3c <__aeabi_dcmplt>
 800e8c8:	b110      	cbz	r0, 800e8d0 <_printf_float+0x90>
 800e8ca:	232d      	movs	r3, #45	; 0x2d
 800e8cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8d0:	4b93      	ldr	r3, [pc, #588]	; (800eb20 <_printf_float+0x2e0>)
 800e8d2:	4894      	ldr	r0, [pc, #592]	; (800eb24 <_printf_float+0x2e4>)
 800e8d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e8d8:	bf94      	ite	ls
 800e8da:	4698      	movls	r8, r3
 800e8dc:	4680      	movhi	r8, r0
 800e8de:	2303      	movs	r3, #3
 800e8e0:	6123      	str	r3, [r4, #16]
 800e8e2:	9b05      	ldr	r3, [sp, #20]
 800e8e4:	f023 0204 	bic.w	r2, r3, #4
 800e8e8:	6022      	str	r2, [r4, #0]
 800e8ea:	f04f 0900 	mov.w	r9, #0
 800e8ee:	9700      	str	r7, [sp, #0]
 800e8f0:	4633      	mov	r3, r6
 800e8f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	f000 f9d8 	bl	800ecac <_printf_common>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	f040 8090 	bne.w	800ea22 <_printf_float+0x1e2>
 800e902:	f04f 30ff 	mov.w	r0, #4294967295
 800e906:	b00d      	add	sp, #52	; 0x34
 800e908:	ecbd 8b02 	vpop	{d8}
 800e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e910:	4642      	mov	r2, r8
 800e912:	464b      	mov	r3, r9
 800e914:	4640      	mov	r0, r8
 800e916:	4649      	mov	r1, r9
 800e918:	f7f2 f938 	bl	8000b8c <__aeabi_dcmpun>
 800e91c:	b140      	cbz	r0, 800e930 <_printf_float+0xf0>
 800e91e:	464b      	mov	r3, r9
 800e920:	2b00      	cmp	r3, #0
 800e922:	bfbc      	itt	lt
 800e924:	232d      	movlt	r3, #45	; 0x2d
 800e926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e92a:	487f      	ldr	r0, [pc, #508]	; (800eb28 <_printf_float+0x2e8>)
 800e92c:	4b7f      	ldr	r3, [pc, #508]	; (800eb2c <_printf_float+0x2ec>)
 800e92e:	e7d1      	b.n	800e8d4 <_printf_float+0x94>
 800e930:	6863      	ldr	r3, [r4, #4]
 800e932:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e936:	9206      	str	r2, [sp, #24]
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	d13f      	bne.n	800e9bc <_printf_float+0x17c>
 800e93c:	2306      	movs	r3, #6
 800e93e:	6063      	str	r3, [r4, #4]
 800e940:	9b05      	ldr	r3, [sp, #20]
 800e942:	6861      	ldr	r1, [r4, #4]
 800e944:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e948:	2300      	movs	r3, #0
 800e94a:	9303      	str	r3, [sp, #12]
 800e94c:	ab0a      	add	r3, sp, #40	; 0x28
 800e94e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e952:	ab09      	add	r3, sp, #36	; 0x24
 800e954:	ec49 8b10 	vmov	d0, r8, r9
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	6022      	str	r2, [r4, #0]
 800e95c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e960:	4628      	mov	r0, r5
 800e962:	f7ff fecd 	bl	800e700 <__cvt>
 800e966:	9b06      	ldr	r3, [sp, #24]
 800e968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e96a:	2b47      	cmp	r3, #71	; 0x47
 800e96c:	4680      	mov	r8, r0
 800e96e:	d108      	bne.n	800e982 <_printf_float+0x142>
 800e970:	1cc8      	adds	r0, r1, #3
 800e972:	db02      	blt.n	800e97a <_printf_float+0x13a>
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	4299      	cmp	r1, r3
 800e978:	dd41      	ble.n	800e9fe <_printf_float+0x1be>
 800e97a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e97e:	fa5f fb8b 	uxtb.w	fp, fp
 800e982:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e986:	d820      	bhi.n	800e9ca <_printf_float+0x18a>
 800e988:	3901      	subs	r1, #1
 800e98a:	465a      	mov	r2, fp
 800e98c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e990:	9109      	str	r1, [sp, #36]	; 0x24
 800e992:	f7ff ff17 	bl	800e7c4 <__exponent>
 800e996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e998:	1813      	adds	r3, r2, r0
 800e99a:	2a01      	cmp	r2, #1
 800e99c:	4681      	mov	r9, r0
 800e99e:	6123      	str	r3, [r4, #16]
 800e9a0:	dc02      	bgt.n	800e9a8 <_printf_float+0x168>
 800e9a2:	6822      	ldr	r2, [r4, #0]
 800e9a4:	07d2      	lsls	r2, r2, #31
 800e9a6:	d501      	bpl.n	800e9ac <_printf_float+0x16c>
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	6123      	str	r3, [r4, #16]
 800e9ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d09c      	beq.n	800e8ee <_printf_float+0xae>
 800e9b4:	232d      	movs	r3, #45	; 0x2d
 800e9b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9ba:	e798      	b.n	800e8ee <_printf_float+0xae>
 800e9bc:	9a06      	ldr	r2, [sp, #24]
 800e9be:	2a47      	cmp	r2, #71	; 0x47
 800e9c0:	d1be      	bne.n	800e940 <_printf_float+0x100>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1bc      	bne.n	800e940 <_printf_float+0x100>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e7b9      	b.n	800e93e <_printf_float+0xfe>
 800e9ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e9ce:	d118      	bne.n	800ea02 <_printf_float+0x1c2>
 800e9d0:	2900      	cmp	r1, #0
 800e9d2:	6863      	ldr	r3, [r4, #4]
 800e9d4:	dd0b      	ble.n	800e9ee <_printf_float+0x1ae>
 800e9d6:	6121      	str	r1, [r4, #16]
 800e9d8:	b913      	cbnz	r3, 800e9e0 <_printf_float+0x1a0>
 800e9da:	6822      	ldr	r2, [r4, #0]
 800e9dc:	07d0      	lsls	r0, r2, #31
 800e9de:	d502      	bpl.n	800e9e6 <_printf_float+0x1a6>
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	440b      	add	r3, r1
 800e9e4:	6123      	str	r3, [r4, #16]
 800e9e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9e8:	f04f 0900 	mov.w	r9, #0
 800e9ec:	e7de      	b.n	800e9ac <_printf_float+0x16c>
 800e9ee:	b913      	cbnz	r3, 800e9f6 <_printf_float+0x1b6>
 800e9f0:	6822      	ldr	r2, [r4, #0]
 800e9f2:	07d2      	lsls	r2, r2, #31
 800e9f4:	d501      	bpl.n	800e9fa <_printf_float+0x1ba>
 800e9f6:	3302      	adds	r3, #2
 800e9f8:	e7f4      	b.n	800e9e4 <_printf_float+0x1a4>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e7f2      	b.n	800e9e4 <_printf_float+0x1a4>
 800e9fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ea02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea04:	4299      	cmp	r1, r3
 800ea06:	db05      	blt.n	800ea14 <_printf_float+0x1d4>
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	6121      	str	r1, [r4, #16]
 800ea0c:	07d8      	lsls	r0, r3, #31
 800ea0e:	d5ea      	bpl.n	800e9e6 <_printf_float+0x1a6>
 800ea10:	1c4b      	adds	r3, r1, #1
 800ea12:	e7e7      	b.n	800e9e4 <_printf_float+0x1a4>
 800ea14:	2900      	cmp	r1, #0
 800ea16:	bfd4      	ite	le
 800ea18:	f1c1 0202 	rsble	r2, r1, #2
 800ea1c:	2201      	movgt	r2, #1
 800ea1e:	4413      	add	r3, r2
 800ea20:	e7e0      	b.n	800e9e4 <_printf_float+0x1a4>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	055a      	lsls	r2, r3, #21
 800ea26:	d407      	bmi.n	800ea38 <_printf_float+0x1f8>
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	4642      	mov	r2, r8
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4628      	mov	r0, r5
 800ea30:	47b8      	blx	r7
 800ea32:	3001      	adds	r0, #1
 800ea34:	d12c      	bne.n	800ea90 <_printf_float+0x250>
 800ea36:	e764      	b.n	800e902 <_printf_float+0xc2>
 800ea38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea3c:	f240 80e0 	bls.w	800ec00 <_printf_float+0x3c0>
 800ea40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea44:	2200      	movs	r2, #0
 800ea46:	2300      	movs	r3, #0
 800ea48:	f7f2 f86e 	bl	8000b28 <__aeabi_dcmpeq>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d034      	beq.n	800eaba <_printf_float+0x27a>
 800ea50:	4a37      	ldr	r2, [pc, #220]	; (800eb30 <_printf_float+0x2f0>)
 800ea52:	2301      	movs	r3, #1
 800ea54:	4631      	mov	r1, r6
 800ea56:	4628      	mov	r0, r5
 800ea58:	47b8      	blx	r7
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	f43f af51 	beq.w	800e902 <_printf_float+0xc2>
 800ea60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea64:	429a      	cmp	r2, r3
 800ea66:	db02      	blt.n	800ea6e <_printf_float+0x22e>
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	07d8      	lsls	r0, r3, #31
 800ea6c:	d510      	bpl.n	800ea90 <_printf_float+0x250>
 800ea6e:	ee18 3a10 	vmov	r3, s16
 800ea72:	4652      	mov	r2, sl
 800ea74:	4631      	mov	r1, r6
 800ea76:	4628      	mov	r0, r5
 800ea78:	47b8      	blx	r7
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	f43f af41 	beq.w	800e902 <_printf_float+0xc2>
 800ea80:	f04f 0800 	mov.w	r8, #0
 800ea84:	f104 091a 	add.w	r9, r4, #26
 800ea88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	4543      	cmp	r3, r8
 800ea8e:	dc09      	bgt.n	800eaa4 <_printf_float+0x264>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	079b      	lsls	r3, r3, #30
 800ea94:	f100 8105 	bmi.w	800eca2 <_printf_float+0x462>
 800ea98:	68e0      	ldr	r0, [r4, #12]
 800ea9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea9c:	4298      	cmp	r0, r3
 800ea9e:	bfb8      	it	lt
 800eaa0:	4618      	movlt	r0, r3
 800eaa2:	e730      	b.n	800e906 <_printf_float+0xc6>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	464a      	mov	r2, r9
 800eaa8:	4631      	mov	r1, r6
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b8      	blx	r7
 800eaae:	3001      	adds	r0, #1
 800eab0:	f43f af27 	beq.w	800e902 <_printf_float+0xc2>
 800eab4:	f108 0801 	add.w	r8, r8, #1
 800eab8:	e7e6      	b.n	800ea88 <_printf_float+0x248>
 800eaba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	dc39      	bgt.n	800eb34 <_printf_float+0x2f4>
 800eac0:	4a1b      	ldr	r2, [pc, #108]	; (800eb30 <_printf_float+0x2f0>)
 800eac2:	2301      	movs	r3, #1
 800eac4:	4631      	mov	r1, r6
 800eac6:	4628      	mov	r0, r5
 800eac8:	47b8      	blx	r7
 800eaca:	3001      	adds	r0, #1
 800eacc:	f43f af19 	beq.w	800e902 <_printf_float+0xc2>
 800ead0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ead4:	4313      	orrs	r3, r2
 800ead6:	d102      	bne.n	800eade <_printf_float+0x29e>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	07d9      	lsls	r1, r3, #31
 800eadc:	d5d8      	bpl.n	800ea90 <_printf_float+0x250>
 800eade:	ee18 3a10 	vmov	r3, s16
 800eae2:	4652      	mov	r2, sl
 800eae4:	4631      	mov	r1, r6
 800eae6:	4628      	mov	r0, r5
 800eae8:	47b8      	blx	r7
 800eaea:	3001      	adds	r0, #1
 800eaec:	f43f af09 	beq.w	800e902 <_printf_float+0xc2>
 800eaf0:	f04f 0900 	mov.w	r9, #0
 800eaf4:	f104 0a1a 	add.w	sl, r4, #26
 800eaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eafa:	425b      	negs	r3, r3
 800eafc:	454b      	cmp	r3, r9
 800eafe:	dc01      	bgt.n	800eb04 <_printf_float+0x2c4>
 800eb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb02:	e792      	b.n	800ea2a <_printf_float+0x1ea>
 800eb04:	2301      	movs	r3, #1
 800eb06:	4652      	mov	r2, sl
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	47b8      	blx	r7
 800eb0e:	3001      	adds	r0, #1
 800eb10:	f43f aef7 	beq.w	800e902 <_printf_float+0xc2>
 800eb14:	f109 0901 	add.w	r9, r9, #1
 800eb18:	e7ee      	b.n	800eaf8 <_printf_float+0x2b8>
 800eb1a:	bf00      	nop
 800eb1c:	7fefffff 	.word	0x7fefffff
 800eb20:	0801dda0 	.word	0x0801dda0
 800eb24:	0801dda4 	.word	0x0801dda4
 800eb28:	0801ddac 	.word	0x0801ddac
 800eb2c:	0801dda8 	.word	0x0801dda8
 800eb30:	0801b252 	.word	0x0801b252
 800eb34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	bfa8      	it	ge
 800eb3c:	461a      	movge	r2, r3
 800eb3e:	2a00      	cmp	r2, #0
 800eb40:	4691      	mov	r9, r2
 800eb42:	dc37      	bgt.n	800ebb4 <_printf_float+0x374>
 800eb44:	f04f 0b00 	mov.w	fp, #0
 800eb48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb4c:	f104 021a 	add.w	r2, r4, #26
 800eb50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb52:	9305      	str	r3, [sp, #20]
 800eb54:	eba3 0309 	sub.w	r3, r3, r9
 800eb58:	455b      	cmp	r3, fp
 800eb5a:	dc33      	bgt.n	800ebc4 <_printf_float+0x384>
 800eb5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb60:	429a      	cmp	r2, r3
 800eb62:	db3b      	blt.n	800ebdc <_printf_float+0x39c>
 800eb64:	6823      	ldr	r3, [r4, #0]
 800eb66:	07da      	lsls	r2, r3, #31
 800eb68:	d438      	bmi.n	800ebdc <_printf_float+0x39c>
 800eb6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb6c:	9a05      	ldr	r2, [sp, #20]
 800eb6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb70:	1a9a      	subs	r2, r3, r2
 800eb72:	eba3 0901 	sub.w	r9, r3, r1
 800eb76:	4591      	cmp	r9, r2
 800eb78:	bfa8      	it	ge
 800eb7a:	4691      	movge	r9, r2
 800eb7c:	f1b9 0f00 	cmp.w	r9, #0
 800eb80:	dc35      	bgt.n	800ebee <_printf_float+0x3ae>
 800eb82:	f04f 0800 	mov.w	r8, #0
 800eb86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb8a:	f104 0a1a 	add.w	sl, r4, #26
 800eb8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb92:	1a9b      	subs	r3, r3, r2
 800eb94:	eba3 0309 	sub.w	r3, r3, r9
 800eb98:	4543      	cmp	r3, r8
 800eb9a:	f77f af79 	ble.w	800ea90 <_printf_float+0x250>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	4652      	mov	r2, sl
 800eba2:	4631      	mov	r1, r6
 800eba4:	4628      	mov	r0, r5
 800eba6:	47b8      	blx	r7
 800eba8:	3001      	adds	r0, #1
 800ebaa:	f43f aeaa 	beq.w	800e902 <_printf_float+0xc2>
 800ebae:	f108 0801 	add.w	r8, r8, #1
 800ebb2:	e7ec      	b.n	800eb8e <_printf_float+0x34e>
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	4631      	mov	r1, r6
 800ebb8:	4642      	mov	r2, r8
 800ebba:	4628      	mov	r0, r5
 800ebbc:	47b8      	blx	r7
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	d1c0      	bne.n	800eb44 <_printf_float+0x304>
 800ebc2:	e69e      	b.n	800e902 <_printf_float+0xc2>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4628      	mov	r0, r5
 800ebca:	9205      	str	r2, [sp, #20]
 800ebcc:	47b8      	blx	r7
 800ebce:	3001      	adds	r0, #1
 800ebd0:	f43f ae97 	beq.w	800e902 <_printf_float+0xc2>
 800ebd4:	9a05      	ldr	r2, [sp, #20]
 800ebd6:	f10b 0b01 	add.w	fp, fp, #1
 800ebda:	e7b9      	b.n	800eb50 <_printf_float+0x310>
 800ebdc:	ee18 3a10 	vmov	r3, s16
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	47b8      	blx	r7
 800ebe8:	3001      	adds	r0, #1
 800ebea:	d1be      	bne.n	800eb6a <_printf_float+0x32a>
 800ebec:	e689      	b.n	800e902 <_printf_float+0xc2>
 800ebee:	9a05      	ldr	r2, [sp, #20]
 800ebf0:	464b      	mov	r3, r9
 800ebf2:	4442      	add	r2, r8
 800ebf4:	4631      	mov	r1, r6
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	47b8      	blx	r7
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	d1c1      	bne.n	800eb82 <_printf_float+0x342>
 800ebfe:	e680      	b.n	800e902 <_printf_float+0xc2>
 800ec00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec02:	2a01      	cmp	r2, #1
 800ec04:	dc01      	bgt.n	800ec0a <_printf_float+0x3ca>
 800ec06:	07db      	lsls	r3, r3, #31
 800ec08:	d538      	bpl.n	800ec7c <_printf_float+0x43c>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	4642      	mov	r2, r8
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b8      	blx	r7
 800ec14:	3001      	adds	r0, #1
 800ec16:	f43f ae74 	beq.w	800e902 <_printf_float+0xc2>
 800ec1a:	ee18 3a10 	vmov	r3, s16
 800ec1e:	4652      	mov	r2, sl
 800ec20:	4631      	mov	r1, r6
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b8      	blx	r7
 800ec26:	3001      	adds	r0, #1
 800ec28:	f43f ae6b 	beq.w	800e902 <_printf_float+0xc2>
 800ec2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec30:	2200      	movs	r2, #0
 800ec32:	2300      	movs	r3, #0
 800ec34:	f7f1 ff78 	bl	8000b28 <__aeabi_dcmpeq>
 800ec38:	b9d8      	cbnz	r0, 800ec72 <_printf_float+0x432>
 800ec3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec3c:	f108 0201 	add.w	r2, r8, #1
 800ec40:	3b01      	subs	r3, #1
 800ec42:	4631      	mov	r1, r6
 800ec44:	4628      	mov	r0, r5
 800ec46:	47b8      	blx	r7
 800ec48:	3001      	adds	r0, #1
 800ec4a:	d10e      	bne.n	800ec6a <_printf_float+0x42a>
 800ec4c:	e659      	b.n	800e902 <_printf_float+0xc2>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	4652      	mov	r2, sl
 800ec52:	4631      	mov	r1, r6
 800ec54:	4628      	mov	r0, r5
 800ec56:	47b8      	blx	r7
 800ec58:	3001      	adds	r0, #1
 800ec5a:	f43f ae52 	beq.w	800e902 <_printf_float+0xc2>
 800ec5e:	f108 0801 	add.w	r8, r8, #1
 800ec62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec64:	3b01      	subs	r3, #1
 800ec66:	4543      	cmp	r3, r8
 800ec68:	dcf1      	bgt.n	800ec4e <_printf_float+0x40e>
 800ec6a:	464b      	mov	r3, r9
 800ec6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec70:	e6dc      	b.n	800ea2c <_printf_float+0x1ec>
 800ec72:	f04f 0800 	mov.w	r8, #0
 800ec76:	f104 0a1a 	add.w	sl, r4, #26
 800ec7a:	e7f2      	b.n	800ec62 <_printf_float+0x422>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	4642      	mov	r2, r8
 800ec80:	e7df      	b.n	800ec42 <_printf_float+0x402>
 800ec82:	2301      	movs	r3, #1
 800ec84:	464a      	mov	r2, r9
 800ec86:	4631      	mov	r1, r6
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b8      	blx	r7
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	f43f ae38 	beq.w	800e902 <_printf_float+0xc2>
 800ec92:	f108 0801 	add.w	r8, r8, #1
 800ec96:	68e3      	ldr	r3, [r4, #12]
 800ec98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec9a:	1a5b      	subs	r3, r3, r1
 800ec9c:	4543      	cmp	r3, r8
 800ec9e:	dcf0      	bgt.n	800ec82 <_printf_float+0x442>
 800eca0:	e6fa      	b.n	800ea98 <_printf_float+0x258>
 800eca2:	f04f 0800 	mov.w	r8, #0
 800eca6:	f104 0919 	add.w	r9, r4, #25
 800ecaa:	e7f4      	b.n	800ec96 <_printf_float+0x456>

0800ecac <_printf_common>:
 800ecac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb0:	4616      	mov	r6, r2
 800ecb2:	4699      	mov	r9, r3
 800ecb4:	688a      	ldr	r2, [r1, #8]
 800ecb6:	690b      	ldr	r3, [r1, #16]
 800ecb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	bfb8      	it	lt
 800ecc0:	4613      	movlt	r3, r2
 800ecc2:	6033      	str	r3, [r6, #0]
 800ecc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecc8:	4607      	mov	r7, r0
 800ecca:	460c      	mov	r4, r1
 800eccc:	b10a      	cbz	r2, 800ecd2 <_printf_common+0x26>
 800ecce:	3301      	adds	r3, #1
 800ecd0:	6033      	str	r3, [r6, #0]
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	0699      	lsls	r1, r3, #26
 800ecd6:	bf42      	ittt	mi
 800ecd8:	6833      	ldrmi	r3, [r6, #0]
 800ecda:	3302      	addmi	r3, #2
 800ecdc:	6033      	strmi	r3, [r6, #0]
 800ecde:	6825      	ldr	r5, [r4, #0]
 800ece0:	f015 0506 	ands.w	r5, r5, #6
 800ece4:	d106      	bne.n	800ecf4 <_printf_common+0x48>
 800ece6:	f104 0a19 	add.w	sl, r4, #25
 800ecea:	68e3      	ldr	r3, [r4, #12]
 800ecec:	6832      	ldr	r2, [r6, #0]
 800ecee:	1a9b      	subs	r3, r3, r2
 800ecf0:	42ab      	cmp	r3, r5
 800ecf2:	dc26      	bgt.n	800ed42 <_printf_common+0x96>
 800ecf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecf8:	1e13      	subs	r3, r2, #0
 800ecfa:	6822      	ldr	r2, [r4, #0]
 800ecfc:	bf18      	it	ne
 800ecfe:	2301      	movne	r3, #1
 800ed00:	0692      	lsls	r2, r2, #26
 800ed02:	d42b      	bmi.n	800ed5c <_printf_common+0xb0>
 800ed04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed08:	4649      	mov	r1, r9
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	47c0      	blx	r8
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d01e      	beq.n	800ed50 <_printf_common+0xa4>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	68e5      	ldr	r5, [r4, #12]
 800ed16:	6832      	ldr	r2, [r6, #0]
 800ed18:	f003 0306 	and.w	r3, r3, #6
 800ed1c:	2b04      	cmp	r3, #4
 800ed1e:	bf08      	it	eq
 800ed20:	1aad      	subeq	r5, r5, r2
 800ed22:	68a3      	ldr	r3, [r4, #8]
 800ed24:	6922      	ldr	r2, [r4, #16]
 800ed26:	bf0c      	ite	eq
 800ed28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed2c:	2500      	movne	r5, #0
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	bfc4      	itt	gt
 800ed32:	1a9b      	subgt	r3, r3, r2
 800ed34:	18ed      	addgt	r5, r5, r3
 800ed36:	2600      	movs	r6, #0
 800ed38:	341a      	adds	r4, #26
 800ed3a:	42b5      	cmp	r5, r6
 800ed3c:	d11a      	bne.n	800ed74 <_printf_common+0xc8>
 800ed3e:	2000      	movs	r0, #0
 800ed40:	e008      	b.n	800ed54 <_printf_common+0xa8>
 800ed42:	2301      	movs	r3, #1
 800ed44:	4652      	mov	r2, sl
 800ed46:	4649      	mov	r1, r9
 800ed48:	4638      	mov	r0, r7
 800ed4a:	47c0      	blx	r8
 800ed4c:	3001      	adds	r0, #1
 800ed4e:	d103      	bne.n	800ed58 <_printf_common+0xac>
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed58:	3501      	adds	r5, #1
 800ed5a:	e7c6      	b.n	800ecea <_printf_common+0x3e>
 800ed5c:	18e1      	adds	r1, r4, r3
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	2030      	movs	r0, #48	; 0x30
 800ed62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed66:	4422      	add	r2, r4
 800ed68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed70:	3302      	adds	r3, #2
 800ed72:	e7c7      	b.n	800ed04 <_printf_common+0x58>
 800ed74:	2301      	movs	r3, #1
 800ed76:	4622      	mov	r2, r4
 800ed78:	4649      	mov	r1, r9
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	47c0      	blx	r8
 800ed7e:	3001      	adds	r0, #1
 800ed80:	d0e6      	beq.n	800ed50 <_printf_common+0xa4>
 800ed82:	3601      	adds	r6, #1
 800ed84:	e7d9      	b.n	800ed3a <_printf_common+0x8e>
	...

0800ed88 <_printf_i>:
 800ed88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8c:	7e0f      	ldrb	r7, [r1, #24]
 800ed8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed90:	2f78      	cmp	r7, #120	; 0x78
 800ed92:	4691      	mov	r9, r2
 800ed94:	4680      	mov	r8, r0
 800ed96:	460c      	mov	r4, r1
 800ed98:	469a      	mov	sl, r3
 800ed9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed9e:	d807      	bhi.n	800edb0 <_printf_i+0x28>
 800eda0:	2f62      	cmp	r7, #98	; 0x62
 800eda2:	d80a      	bhi.n	800edba <_printf_i+0x32>
 800eda4:	2f00      	cmp	r7, #0
 800eda6:	f000 80d8 	beq.w	800ef5a <_printf_i+0x1d2>
 800edaa:	2f58      	cmp	r7, #88	; 0x58
 800edac:	f000 80a3 	beq.w	800eef6 <_printf_i+0x16e>
 800edb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800edb8:	e03a      	b.n	800ee30 <_printf_i+0xa8>
 800edba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edbe:	2b15      	cmp	r3, #21
 800edc0:	d8f6      	bhi.n	800edb0 <_printf_i+0x28>
 800edc2:	a101      	add	r1, pc, #4	; (adr r1, 800edc8 <_printf_i+0x40>)
 800edc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edc8:	0800ee21 	.word	0x0800ee21
 800edcc:	0800ee35 	.word	0x0800ee35
 800edd0:	0800edb1 	.word	0x0800edb1
 800edd4:	0800edb1 	.word	0x0800edb1
 800edd8:	0800edb1 	.word	0x0800edb1
 800eddc:	0800edb1 	.word	0x0800edb1
 800ede0:	0800ee35 	.word	0x0800ee35
 800ede4:	0800edb1 	.word	0x0800edb1
 800ede8:	0800edb1 	.word	0x0800edb1
 800edec:	0800edb1 	.word	0x0800edb1
 800edf0:	0800edb1 	.word	0x0800edb1
 800edf4:	0800ef41 	.word	0x0800ef41
 800edf8:	0800ee65 	.word	0x0800ee65
 800edfc:	0800ef23 	.word	0x0800ef23
 800ee00:	0800edb1 	.word	0x0800edb1
 800ee04:	0800edb1 	.word	0x0800edb1
 800ee08:	0800ef63 	.word	0x0800ef63
 800ee0c:	0800edb1 	.word	0x0800edb1
 800ee10:	0800ee65 	.word	0x0800ee65
 800ee14:	0800edb1 	.word	0x0800edb1
 800ee18:	0800edb1 	.word	0x0800edb1
 800ee1c:	0800ef2b 	.word	0x0800ef2b
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	1d1a      	adds	r2, r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	602a      	str	r2, [r5, #0]
 800ee28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee30:	2301      	movs	r3, #1
 800ee32:	e0a3      	b.n	800ef7c <_printf_i+0x1f4>
 800ee34:	6820      	ldr	r0, [r4, #0]
 800ee36:	6829      	ldr	r1, [r5, #0]
 800ee38:	0606      	lsls	r6, r0, #24
 800ee3a:	f101 0304 	add.w	r3, r1, #4
 800ee3e:	d50a      	bpl.n	800ee56 <_printf_i+0xce>
 800ee40:	680e      	ldr	r6, [r1, #0]
 800ee42:	602b      	str	r3, [r5, #0]
 800ee44:	2e00      	cmp	r6, #0
 800ee46:	da03      	bge.n	800ee50 <_printf_i+0xc8>
 800ee48:	232d      	movs	r3, #45	; 0x2d
 800ee4a:	4276      	negs	r6, r6
 800ee4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee50:	485e      	ldr	r0, [pc, #376]	; (800efcc <_printf_i+0x244>)
 800ee52:	230a      	movs	r3, #10
 800ee54:	e019      	b.n	800ee8a <_printf_i+0x102>
 800ee56:	680e      	ldr	r6, [r1, #0]
 800ee58:	602b      	str	r3, [r5, #0]
 800ee5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee5e:	bf18      	it	ne
 800ee60:	b236      	sxthne	r6, r6
 800ee62:	e7ef      	b.n	800ee44 <_printf_i+0xbc>
 800ee64:	682b      	ldr	r3, [r5, #0]
 800ee66:	6820      	ldr	r0, [r4, #0]
 800ee68:	1d19      	adds	r1, r3, #4
 800ee6a:	6029      	str	r1, [r5, #0]
 800ee6c:	0601      	lsls	r1, r0, #24
 800ee6e:	d501      	bpl.n	800ee74 <_printf_i+0xec>
 800ee70:	681e      	ldr	r6, [r3, #0]
 800ee72:	e002      	b.n	800ee7a <_printf_i+0xf2>
 800ee74:	0646      	lsls	r6, r0, #25
 800ee76:	d5fb      	bpl.n	800ee70 <_printf_i+0xe8>
 800ee78:	881e      	ldrh	r6, [r3, #0]
 800ee7a:	4854      	ldr	r0, [pc, #336]	; (800efcc <_printf_i+0x244>)
 800ee7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ee7e:	bf0c      	ite	eq
 800ee80:	2308      	moveq	r3, #8
 800ee82:	230a      	movne	r3, #10
 800ee84:	2100      	movs	r1, #0
 800ee86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee8a:	6865      	ldr	r5, [r4, #4]
 800ee8c:	60a5      	str	r5, [r4, #8]
 800ee8e:	2d00      	cmp	r5, #0
 800ee90:	bfa2      	ittt	ge
 800ee92:	6821      	ldrge	r1, [r4, #0]
 800ee94:	f021 0104 	bicge.w	r1, r1, #4
 800ee98:	6021      	strge	r1, [r4, #0]
 800ee9a:	b90e      	cbnz	r6, 800eea0 <_printf_i+0x118>
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	d04d      	beq.n	800ef3c <_printf_i+0x1b4>
 800eea0:	4615      	mov	r5, r2
 800eea2:	fbb6 f1f3 	udiv	r1, r6, r3
 800eea6:	fb03 6711 	mls	r7, r3, r1, r6
 800eeaa:	5dc7      	ldrb	r7, [r0, r7]
 800eeac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eeb0:	4637      	mov	r7, r6
 800eeb2:	42bb      	cmp	r3, r7
 800eeb4:	460e      	mov	r6, r1
 800eeb6:	d9f4      	bls.n	800eea2 <_printf_i+0x11a>
 800eeb8:	2b08      	cmp	r3, #8
 800eeba:	d10b      	bne.n	800eed4 <_printf_i+0x14c>
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	07de      	lsls	r6, r3, #31
 800eec0:	d508      	bpl.n	800eed4 <_printf_i+0x14c>
 800eec2:	6923      	ldr	r3, [r4, #16]
 800eec4:	6861      	ldr	r1, [r4, #4]
 800eec6:	4299      	cmp	r1, r3
 800eec8:	bfde      	ittt	le
 800eeca:	2330      	movle	r3, #48	; 0x30
 800eecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eed0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eed4:	1b52      	subs	r2, r2, r5
 800eed6:	6122      	str	r2, [r4, #16]
 800eed8:	f8cd a000 	str.w	sl, [sp]
 800eedc:	464b      	mov	r3, r9
 800eede:	aa03      	add	r2, sp, #12
 800eee0:	4621      	mov	r1, r4
 800eee2:	4640      	mov	r0, r8
 800eee4:	f7ff fee2 	bl	800ecac <_printf_common>
 800eee8:	3001      	adds	r0, #1
 800eeea:	d14c      	bne.n	800ef86 <_printf_i+0x1fe>
 800eeec:	f04f 30ff 	mov.w	r0, #4294967295
 800eef0:	b004      	add	sp, #16
 800eef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef6:	4835      	ldr	r0, [pc, #212]	; (800efcc <_printf_i+0x244>)
 800eef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eefc:	6829      	ldr	r1, [r5, #0]
 800eefe:	6823      	ldr	r3, [r4, #0]
 800ef00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef04:	6029      	str	r1, [r5, #0]
 800ef06:	061d      	lsls	r5, r3, #24
 800ef08:	d514      	bpl.n	800ef34 <_printf_i+0x1ac>
 800ef0a:	07df      	lsls	r7, r3, #31
 800ef0c:	bf44      	itt	mi
 800ef0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ef12:	6023      	strmi	r3, [r4, #0]
 800ef14:	b91e      	cbnz	r6, 800ef1e <_printf_i+0x196>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	f023 0320 	bic.w	r3, r3, #32
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	2310      	movs	r3, #16
 800ef20:	e7b0      	b.n	800ee84 <_printf_i+0xfc>
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	f043 0320 	orr.w	r3, r3, #32
 800ef28:	6023      	str	r3, [r4, #0]
 800ef2a:	2378      	movs	r3, #120	; 0x78
 800ef2c:	4828      	ldr	r0, [pc, #160]	; (800efd0 <_printf_i+0x248>)
 800ef2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef32:	e7e3      	b.n	800eefc <_printf_i+0x174>
 800ef34:	0659      	lsls	r1, r3, #25
 800ef36:	bf48      	it	mi
 800ef38:	b2b6      	uxthmi	r6, r6
 800ef3a:	e7e6      	b.n	800ef0a <_printf_i+0x182>
 800ef3c:	4615      	mov	r5, r2
 800ef3e:	e7bb      	b.n	800eeb8 <_printf_i+0x130>
 800ef40:	682b      	ldr	r3, [r5, #0]
 800ef42:	6826      	ldr	r6, [r4, #0]
 800ef44:	6961      	ldr	r1, [r4, #20]
 800ef46:	1d18      	adds	r0, r3, #4
 800ef48:	6028      	str	r0, [r5, #0]
 800ef4a:	0635      	lsls	r5, r6, #24
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	d501      	bpl.n	800ef54 <_printf_i+0x1cc>
 800ef50:	6019      	str	r1, [r3, #0]
 800ef52:	e002      	b.n	800ef5a <_printf_i+0x1d2>
 800ef54:	0670      	lsls	r0, r6, #25
 800ef56:	d5fb      	bpl.n	800ef50 <_printf_i+0x1c8>
 800ef58:	8019      	strh	r1, [r3, #0]
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	6123      	str	r3, [r4, #16]
 800ef5e:	4615      	mov	r5, r2
 800ef60:	e7ba      	b.n	800eed8 <_printf_i+0x150>
 800ef62:	682b      	ldr	r3, [r5, #0]
 800ef64:	1d1a      	adds	r2, r3, #4
 800ef66:	602a      	str	r2, [r5, #0]
 800ef68:	681d      	ldr	r5, [r3, #0]
 800ef6a:	6862      	ldr	r2, [r4, #4]
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f7f1 f966 	bl	8000240 <memchr>
 800ef74:	b108      	cbz	r0, 800ef7a <_printf_i+0x1f2>
 800ef76:	1b40      	subs	r0, r0, r5
 800ef78:	6060      	str	r0, [r4, #4]
 800ef7a:	6863      	ldr	r3, [r4, #4]
 800ef7c:	6123      	str	r3, [r4, #16]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef84:	e7a8      	b.n	800eed8 <_printf_i+0x150>
 800ef86:	6923      	ldr	r3, [r4, #16]
 800ef88:	462a      	mov	r2, r5
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	47d0      	blx	sl
 800ef90:	3001      	adds	r0, #1
 800ef92:	d0ab      	beq.n	800eeec <_printf_i+0x164>
 800ef94:	6823      	ldr	r3, [r4, #0]
 800ef96:	079b      	lsls	r3, r3, #30
 800ef98:	d413      	bmi.n	800efc2 <_printf_i+0x23a>
 800ef9a:	68e0      	ldr	r0, [r4, #12]
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	4298      	cmp	r0, r3
 800efa0:	bfb8      	it	lt
 800efa2:	4618      	movlt	r0, r3
 800efa4:	e7a4      	b.n	800eef0 <_printf_i+0x168>
 800efa6:	2301      	movs	r3, #1
 800efa8:	4632      	mov	r2, r6
 800efaa:	4649      	mov	r1, r9
 800efac:	4640      	mov	r0, r8
 800efae:	47d0      	blx	sl
 800efb0:	3001      	adds	r0, #1
 800efb2:	d09b      	beq.n	800eeec <_printf_i+0x164>
 800efb4:	3501      	adds	r5, #1
 800efb6:	68e3      	ldr	r3, [r4, #12]
 800efb8:	9903      	ldr	r1, [sp, #12]
 800efba:	1a5b      	subs	r3, r3, r1
 800efbc:	42ab      	cmp	r3, r5
 800efbe:	dcf2      	bgt.n	800efa6 <_printf_i+0x21e>
 800efc0:	e7eb      	b.n	800ef9a <_printf_i+0x212>
 800efc2:	2500      	movs	r5, #0
 800efc4:	f104 0619 	add.w	r6, r4, #25
 800efc8:	e7f5      	b.n	800efb6 <_printf_i+0x22e>
 800efca:	bf00      	nop
 800efcc:	0801ddb0 	.word	0x0801ddb0
 800efd0:	0801ddc1 	.word	0x0801ddc1

0800efd4 <iprintf>:
 800efd4:	b40f      	push	{r0, r1, r2, r3}
 800efd6:	4b0a      	ldr	r3, [pc, #40]	; (800f000 <iprintf+0x2c>)
 800efd8:	b513      	push	{r0, r1, r4, lr}
 800efda:	681c      	ldr	r4, [r3, #0]
 800efdc:	b124      	cbz	r4, 800efe8 <iprintf+0x14>
 800efde:	69a3      	ldr	r3, [r4, #24]
 800efe0:	b913      	cbnz	r3, 800efe8 <iprintf+0x14>
 800efe2:	4620      	mov	r0, r4
 800efe4:	f000 ff9a 	bl	800ff1c <__sinit>
 800efe8:	ab05      	add	r3, sp, #20
 800efea:	9a04      	ldr	r2, [sp, #16]
 800efec:	68a1      	ldr	r1, [r4, #8]
 800efee:	9301      	str	r3, [sp, #4]
 800eff0:	4620      	mov	r0, r4
 800eff2:	f001 fe65 	bl	8010cc0 <_vfiprintf_r>
 800eff6:	b002      	add	sp, #8
 800eff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800effc:	b004      	add	sp, #16
 800effe:	4770      	bx	lr
 800f000:	2000002c 	.word	0x2000002c

0800f004 <rand>:
 800f004:	4b16      	ldr	r3, [pc, #88]	; (800f060 <rand+0x5c>)
 800f006:	b510      	push	{r4, lr}
 800f008:	681c      	ldr	r4, [r3, #0]
 800f00a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f00c:	b9b3      	cbnz	r3, 800f03c <rand+0x38>
 800f00e:	2018      	movs	r0, #24
 800f010:	f001 f84e 	bl	80100b0 <malloc>
 800f014:	63a0      	str	r0, [r4, #56]	; 0x38
 800f016:	b928      	cbnz	r0, 800f024 <rand+0x20>
 800f018:	4602      	mov	r2, r0
 800f01a:	4b12      	ldr	r3, [pc, #72]	; (800f064 <rand+0x60>)
 800f01c:	4812      	ldr	r0, [pc, #72]	; (800f068 <rand+0x64>)
 800f01e:	214e      	movs	r1, #78	; 0x4e
 800f020:	f000 f88c 	bl	800f13c <__assert_func>
 800f024:	4a11      	ldr	r2, [pc, #68]	; (800f06c <rand+0x68>)
 800f026:	4b12      	ldr	r3, [pc, #72]	; (800f070 <rand+0x6c>)
 800f028:	e9c0 2300 	strd	r2, r3, [r0]
 800f02c:	4b11      	ldr	r3, [pc, #68]	; (800f074 <rand+0x70>)
 800f02e:	6083      	str	r3, [r0, #8]
 800f030:	230b      	movs	r3, #11
 800f032:	8183      	strh	r3, [r0, #12]
 800f034:	2201      	movs	r2, #1
 800f036:	2300      	movs	r3, #0
 800f038:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f03c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f03e:	4a0e      	ldr	r2, [pc, #56]	; (800f078 <rand+0x74>)
 800f040:	6920      	ldr	r0, [r4, #16]
 800f042:	6963      	ldr	r3, [r4, #20]
 800f044:	490d      	ldr	r1, [pc, #52]	; (800f07c <rand+0x78>)
 800f046:	4342      	muls	r2, r0
 800f048:	fb01 2203 	mla	r2, r1, r3, r2
 800f04c:	fba0 0101 	umull	r0, r1, r0, r1
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	eb42 0001 	adc.w	r0, r2, r1
 800f056:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f05a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f05e:	bd10      	pop	{r4, pc}
 800f060:	2000002c 	.word	0x2000002c
 800f064:	0801ddd2 	.word	0x0801ddd2
 800f068:	0801dde9 	.word	0x0801dde9
 800f06c:	abcd330e 	.word	0xabcd330e
 800f070:	e66d1234 	.word	0xe66d1234
 800f074:	0005deec 	.word	0x0005deec
 800f078:	5851f42d 	.word	0x5851f42d
 800f07c:	4c957f2d 	.word	0x4c957f2d

0800f080 <siprintf>:
 800f080:	b40e      	push	{r1, r2, r3}
 800f082:	b500      	push	{lr}
 800f084:	b09c      	sub	sp, #112	; 0x70
 800f086:	ab1d      	add	r3, sp, #116	; 0x74
 800f088:	9002      	str	r0, [sp, #8]
 800f08a:	9006      	str	r0, [sp, #24]
 800f08c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f090:	4809      	ldr	r0, [pc, #36]	; (800f0b8 <siprintf+0x38>)
 800f092:	9107      	str	r1, [sp, #28]
 800f094:	9104      	str	r1, [sp, #16]
 800f096:	4909      	ldr	r1, [pc, #36]	; (800f0bc <siprintf+0x3c>)
 800f098:	f853 2b04 	ldr.w	r2, [r3], #4
 800f09c:	9105      	str	r1, [sp, #20]
 800f09e:	6800      	ldr	r0, [r0, #0]
 800f0a0:	9301      	str	r3, [sp, #4]
 800f0a2:	a902      	add	r1, sp, #8
 800f0a4:	f001 fce2 	bl	8010a6c <_svfiprintf_r>
 800f0a8:	9b02      	ldr	r3, [sp, #8]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	701a      	strb	r2, [r3, #0]
 800f0ae:	b01c      	add	sp, #112	; 0x70
 800f0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0b4:	b003      	add	sp, #12
 800f0b6:	4770      	bx	lr
 800f0b8:	2000002c 	.word	0x2000002c
 800f0bc:	ffff0208 	.word	0xffff0208

0800f0c0 <strcat>:
 800f0c0:	b510      	push	{r4, lr}
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	7814      	ldrb	r4, [r2, #0]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	3201      	adds	r2, #1
 800f0ca:	2c00      	cmp	r4, #0
 800f0cc:	d1fa      	bne.n	800f0c4 <strcat+0x4>
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0d8:	2a00      	cmp	r2, #0
 800f0da:	d1f9      	bne.n	800f0d0 <strcat+0x10>
 800f0dc:	bd10      	pop	{r4, pc}

0800f0de <strncmp>:
 800f0de:	b510      	push	{r4, lr}
 800f0e0:	b17a      	cbz	r2, 800f102 <strncmp+0x24>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	3901      	subs	r1, #1
 800f0e6:	1884      	adds	r4, r0, r2
 800f0e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f0f0:	4290      	cmp	r0, r2
 800f0f2:	d101      	bne.n	800f0f8 <strncmp+0x1a>
 800f0f4:	42a3      	cmp	r3, r4
 800f0f6:	d101      	bne.n	800f0fc <strncmp+0x1e>
 800f0f8:	1a80      	subs	r0, r0, r2
 800f0fa:	bd10      	pop	{r4, pc}
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d1f3      	bne.n	800f0e8 <strncmp+0xa>
 800f100:	e7fa      	b.n	800f0f8 <strncmp+0x1a>
 800f102:	4610      	mov	r0, r2
 800f104:	e7f9      	b.n	800f0fa <strncmp+0x1c>
	...

0800f108 <time>:
 800f108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f10a:	4b0b      	ldr	r3, [pc, #44]	; (800f138 <time+0x30>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	4669      	mov	r1, sp
 800f110:	4604      	mov	r4, r0
 800f112:	6818      	ldr	r0, [r3, #0]
 800f114:	f000 ffb2 	bl	801007c <_gettimeofday_r>
 800f118:	2800      	cmp	r0, #0
 800f11a:	bfbe      	ittt	lt
 800f11c:	f04f 32ff 	movlt.w	r2, #4294967295
 800f120:	f04f 33ff 	movlt.w	r3, #4294967295
 800f124:	e9cd 2300 	strdlt	r2, r3, [sp]
 800f128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f12c:	b10c      	cbz	r4, 800f132 <time+0x2a>
 800f12e:	e9c4 0100 	strd	r0, r1, [r4]
 800f132:	b004      	add	sp, #16
 800f134:	bd10      	pop	{r4, pc}
 800f136:	bf00      	nop
 800f138:	2000002c 	.word	0x2000002c

0800f13c <__assert_func>:
 800f13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f13e:	4614      	mov	r4, r2
 800f140:	461a      	mov	r2, r3
 800f142:	4b09      	ldr	r3, [pc, #36]	; (800f168 <__assert_func+0x2c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4605      	mov	r5, r0
 800f148:	68d8      	ldr	r0, [r3, #12]
 800f14a:	b14c      	cbz	r4, 800f160 <__assert_func+0x24>
 800f14c:	4b07      	ldr	r3, [pc, #28]	; (800f16c <__assert_func+0x30>)
 800f14e:	9100      	str	r1, [sp, #0]
 800f150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f154:	4906      	ldr	r1, [pc, #24]	; (800f170 <__assert_func+0x34>)
 800f156:	462b      	mov	r3, r5
 800f158:	f000 ff5e 	bl	8010018 <fiprintf>
 800f15c:	f002 f806 	bl	801116c <abort>
 800f160:	4b04      	ldr	r3, [pc, #16]	; (800f174 <__assert_func+0x38>)
 800f162:	461c      	mov	r4, r3
 800f164:	e7f3      	b.n	800f14e <__assert_func+0x12>
 800f166:	bf00      	nop
 800f168:	2000002c 	.word	0x2000002c
 800f16c:	0801de44 	.word	0x0801de44
 800f170:	0801de51 	.word	0x0801de51
 800f174:	0801aa78 	.word	0x0801aa78

0800f178 <quorem>:
 800f178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17c:	6903      	ldr	r3, [r0, #16]
 800f17e:	690c      	ldr	r4, [r1, #16]
 800f180:	42a3      	cmp	r3, r4
 800f182:	4607      	mov	r7, r0
 800f184:	f2c0 8081 	blt.w	800f28a <quorem+0x112>
 800f188:	3c01      	subs	r4, #1
 800f18a:	f101 0814 	add.w	r8, r1, #20
 800f18e:	f100 0514 	add.w	r5, r0, #20
 800f192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f196:	9301      	str	r3, [sp, #4]
 800f198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f19c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f1a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f1ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800f1b0:	d331      	bcc.n	800f216 <quorem+0x9e>
 800f1b2:	f04f 0e00 	mov.w	lr, #0
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	46ac      	mov	ip, r5
 800f1ba:	46f2      	mov	sl, lr
 800f1bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800f1c0:	b293      	uxth	r3, r2
 800f1c2:	fb06 e303 	mla	r3, r6, r3, lr
 800f1c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	ebaa 0303 	sub.w	r3, sl, r3
 800f1d0:	f8dc a000 	ldr.w	sl, [ip]
 800f1d4:	0c12      	lsrs	r2, r2, #16
 800f1d6:	fa13 f38a 	uxtah	r3, r3, sl
 800f1da:	fb06 e202 	mla	r2, r6, r2, lr
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	9b00      	ldr	r3, [sp, #0]
 800f1e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f1e6:	b292      	uxth	r2, r2
 800f1e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1f0:	f8bd 3000 	ldrh.w	r3, [sp]
 800f1f4:	4581      	cmp	r9, r0
 800f1f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1fa:	f84c 3b04 	str.w	r3, [ip], #4
 800f1fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f202:	d2db      	bcs.n	800f1bc <quorem+0x44>
 800f204:	f855 300b 	ldr.w	r3, [r5, fp]
 800f208:	b92b      	cbnz	r3, 800f216 <quorem+0x9e>
 800f20a:	9b01      	ldr	r3, [sp, #4]
 800f20c:	3b04      	subs	r3, #4
 800f20e:	429d      	cmp	r5, r3
 800f210:	461a      	mov	r2, r3
 800f212:	d32e      	bcc.n	800f272 <quorem+0xfa>
 800f214:	613c      	str	r4, [r7, #16]
 800f216:	4638      	mov	r0, r7
 800f218:	f001 f9d4 	bl	80105c4 <__mcmp>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	db24      	blt.n	800f26a <quorem+0xf2>
 800f220:	3601      	adds	r6, #1
 800f222:	4628      	mov	r0, r5
 800f224:	f04f 0c00 	mov.w	ip, #0
 800f228:	f858 2b04 	ldr.w	r2, [r8], #4
 800f22c:	f8d0 e000 	ldr.w	lr, [r0]
 800f230:	b293      	uxth	r3, r2
 800f232:	ebac 0303 	sub.w	r3, ip, r3
 800f236:	0c12      	lsrs	r2, r2, #16
 800f238:	fa13 f38e 	uxtah	r3, r3, lr
 800f23c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f244:	b29b      	uxth	r3, r3
 800f246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f24a:	45c1      	cmp	r9, r8
 800f24c:	f840 3b04 	str.w	r3, [r0], #4
 800f250:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f254:	d2e8      	bcs.n	800f228 <quorem+0xb0>
 800f256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f25e:	b922      	cbnz	r2, 800f26a <quorem+0xf2>
 800f260:	3b04      	subs	r3, #4
 800f262:	429d      	cmp	r5, r3
 800f264:	461a      	mov	r2, r3
 800f266:	d30a      	bcc.n	800f27e <quorem+0x106>
 800f268:	613c      	str	r4, [r7, #16]
 800f26a:	4630      	mov	r0, r6
 800f26c:	b003      	add	sp, #12
 800f26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f272:	6812      	ldr	r2, [r2, #0]
 800f274:	3b04      	subs	r3, #4
 800f276:	2a00      	cmp	r2, #0
 800f278:	d1cc      	bne.n	800f214 <quorem+0x9c>
 800f27a:	3c01      	subs	r4, #1
 800f27c:	e7c7      	b.n	800f20e <quorem+0x96>
 800f27e:	6812      	ldr	r2, [r2, #0]
 800f280:	3b04      	subs	r3, #4
 800f282:	2a00      	cmp	r2, #0
 800f284:	d1f0      	bne.n	800f268 <quorem+0xf0>
 800f286:	3c01      	subs	r4, #1
 800f288:	e7eb      	b.n	800f262 <quorem+0xea>
 800f28a:	2000      	movs	r0, #0
 800f28c:	e7ee      	b.n	800f26c <quorem+0xf4>
	...

0800f290 <_dtoa_r>:
 800f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f294:	ed2d 8b04 	vpush	{d8-d9}
 800f298:	ec57 6b10 	vmov	r6, r7, d0
 800f29c:	b093      	sub	sp, #76	; 0x4c
 800f29e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f2a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f2a4:	9106      	str	r1, [sp, #24]
 800f2a6:	ee10 aa10 	vmov	sl, s0
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	9209      	str	r2, [sp, #36]	; 0x24
 800f2ae:	930c      	str	r3, [sp, #48]	; 0x30
 800f2b0:	46bb      	mov	fp, r7
 800f2b2:	b975      	cbnz	r5, 800f2d2 <_dtoa_r+0x42>
 800f2b4:	2010      	movs	r0, #16
 800f2b6:	f000 fefb 	bl	80100b0 <malloc>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	6260      	str	r0, [r4, #36]	; 0x24
 800f2be:	b920      	cbnz	r0, 800f2ca <_dtoa_r+0x3a>
 800f2c0:	4ba7      	ldr	r3, [pc, #668]	; (800f560 <_dtoa_r+0x2d0>)
 800f2c2:	21ea      	movs	r1, #234	; 0xea
 800f2c4:	48a7      	ldr	r0, [pc, #668]	; (800f564 <_dtoa_r+0x2d4>)
 800f2c6:	f7ff ff39 	bl	800f13c <__assert_func>
 800f2ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f2ce:	6005      	str	r5, [r0, #0]
 800f2d0:	60c5      	str	r5, [r0, #12]
 800f2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2d4:	6819      	ldr	r1, [r3, #0]
 800f2d6:	b151      	cbz	r1, 800f2ee <_dtoa_r+0x5e>
 800f2d8:	685a      	ldr	r2, [r3, #4]
 800f2da:	604a      	str	r2, [r1, #4]
 800f2dc:	2301      	movs	r3, #1
 800f2de:	4093      	lsls	r3, r2
 800f2e0:	608b      	str	r3, [r1, #8]
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f000 ff2c 	bl	8010140 <_Bfree>
 800f2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	1e3b      	subs	r3, r7, #0
 800f2f0:	bfaa      	itet	ge
 800f2f2:	2300      	movge	r3, #0
 800f2f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f2f8:	f8c8 3000 	strge.w	r3, [r8]
 800f2fc:	4b9a      	ldr	r3, [pc, #616]	; (800f568 <_dtoa_r+0x2d8>)
 800f2fe:	bfbc      	itt	lt
 800f300:	2201      	movlt	r2, #1
 800f302:	f8c8 2000 	strlt.w	r2, [r8]
 800f306:	ea33 030b 	bics.w	r3, r3, fp
 800f30a:	d11b      	bne.n	800f344 <_dtoa_r+0xb4>
 800f30c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f30e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f318:	4333      	orrs	r3, r6
 800f31a:	f000 8592 	beq.w	800fe42 <_dtoa_r+0xbb2>
 800f31e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f320:	b963      	cbnz	r3, 800f33c <_dtoa_r+0xac>
 800f322:	4b92      	ldr	r3, [pc, #584]	; (800f56c <_dtoa_r+0x2dc>)
 800f324:	e022      	b.n	800f36c <_dtoa_r+0xdc>
 800f326:	4b92      	ldr	r3, [pc, #584]	; (800f570 <_dtoa_r+0x2e0>)
 800f328:	9301      	str	r3, [sp, #4]
 800f32a:	3308      	adds	r3, #8
 800f32c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f32e:	6013      	str	r3, [r2, #0]
 800f330:	9801      	ldr	r0, [sp, #4]
 800f332:	b013      	add	sp, #76	; 0x4c
 800f334:	ecbd 8b04 	vpop	{d8-d9}
 800f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33c:	4b8b      	ldr	r3, [pc, #556]	; (800f56c <_dtoa_r+0x2dc>)
 800f33e:	9301      	str	r3, [sp, #4]
 800f340:	3303      	adds	r3, #3
 800f342:	e7f3      	b.n	800f32c <_dtoa_r+0x9c>
 800f344:	2200      	movs	r2, #0
 800f346:	2300      	movs	r3, #0
 800f348:	4650      	mov	r0, sl
 800f34a:	4659      	mov	r1, fp
 800f34c:	f7f1 fbec 	bl	8000b28 <__aeabi_dcmpeq>
 800f350:	ec4b ab19 	vmov	d9, sl, fp
 800f354:	4680      	mov	r8, r0
 800f356:	b158      	cbz	r0, 800f370 <_dtoa_r+0xe0>
 800f358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f35a:	2301      	movs	r3, #1
 800f35c:	6013      	str	r3, [r2, #0]
 800f35e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f360:	2b00      	cmp	r3, #0
 800f362:	f000 856b 	beq.w	800fe3c <_dtoa_r+0xbac>
 800f366:	4883      	ldr	r0, [pc, #524]	; (800f574 <_dtoa_r+0x2e4>)
 800f368:	6018      	str	r0, [r3, #0]
 800f36a:	1e43      	subs	r3, r0, #1
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	e7df      	b.n	800f330 <_dtoa_r+0xa0>
 800f370:	ec4b ab10 	vmov	d0, sl, fp
 800f374:	aa10      	add	r2, sp, #64	; 0x40
 800f376:	a911      	add	r1, sp, #68	; 0x44
 800f378:	4620      	mov	r0, r4
 800f37a:	f001 f9c9 	bl	8010710 <__d2b>
 800f37e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f382:	ee08 0a10 	vmov	s16, r0
 800f386:	2d00      	cmp	r5, #0
 800f388:	f000 8084 	beq.w	800f494 <_dtoa_r+0x204>
 800f38c:	ee19 3a90 	vmov	r3, s19
 800f390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f394:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f398:	4656      	mov	r6, sl
 800f39a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f39e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f3a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f3a6:	4b74      	ldr	r3, [pc, #464]	; (800f578 <_dtoa_r+0x2e8>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	f7f0 ff9b 	bl	80002e8 <__aeabi_dsub>
 800f3b2:	a365      	add	r3, pc, #404	; (adr r3, 800f548 <_dtoa_r+0x2b8>)
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	f7f1 f94e 	bl	8000658 <__aeabi_dmul>
 800f3bc:	a364      	add	r3, pc, #400	; (adr r3, 800f550 <_dtoa_r+0x2c0>)
 800f3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c2:	f7f0 ff93 	bl	80002ec <__adddf3>
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	460f      	mov	r7, r1
 800f3cc:	f7f1 f8da 	bl	8000584 <__aeabi_i2d>
 800f3d0:	a361      	add	r3, pc, #388	; (adr r3, 800f558 <_dtoa_r+0x2c8>)
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	f7f1 f93f 	bl	8000658 <__aeabi_dmul>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	460b      	mov	r3, r1
 800f3de:	4630      	mov	r0, r6
 800f3e0:	4639      	mov	r1, r7
 800f3e2:	f7f0 ff83 	bl	80002ec <__adddf3>
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	460f      	mov	r7, r1
 800f3ea:	f7f1 fbe5 	bl	8000bb8 <__aeabi_d2iz>
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	9000      	str	r0, [sp, #0]
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	4639      	mov	r1, r7
 800f3f8:	f7f1 fba0 	bl	8000b3c <__aeabi_dcmplt>
 800f3fc:	b150      	cbz	r0, 800f414 <_dtoa_r+0x184>
 800f3fe:	9800      	ldr	r0, [sp, #0]
 800f400:	f7f1 f8c0 	bl	8000584 <__aeabi_i2d>
 800f404:	4632      	mov	r2, r6
 800f406:	463b      	mov	r3, r7
 800f408:	f7f1 fb8e 	bl	8000b28 <__aeabi_dcmpeq>
 800f40c:	b910      	cbnz	r0, 800f414 <_dtoa_r+0x184>
 800f40e:	9b00      	ldr	r3, [sp, #0]
 800f410:	3b01      	subs	r3, #1
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	9b00      	ldr	r3, [sp, #0]
 800f416:	2b16      	cmp	r3, #22
 800f418:	d85a      	bhi.n	800f4d0 <_dtoa_r+0x240>
 800f41a:	9a00      	ldr	r2, [sp, #0]
 800f41c:	4b57      	ldr	r3, [pc, #348]	; (800f57c <_dtoa_r+0x2ec>)
 800f41e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f426:	ec51 0b19 	vmov	r0, r1, d9
 800f42a:	f7f1 fb87 	bl	8000b3c <__aeabi_dcmplt>
 800f42e:	2800      	cmp	r0, #0
 800f430:	d050      	beq.n	800f4d4 <_dtoa_r+0x244>
 800f432:	9b00      	ldr	r3, [sp, #0]
 800f434:	3b01      	subs	r3, #1
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	2300      	movs	r3, #0
 800f43a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f43c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f43e:	1b5d      	subs	r5, r3, r5
 800f440:	1e6b      	subs	r3, r5, #1
 800f442:	9305      	str	r3, [sp, #20]
 800f444:	bf45      	ittet	mi
 800f446:	f1c5 0301 	rsbmi	r3, r5, #1
 800f44a:	9304      	strmi	r3, [sp, #16]
 800f44c:	2300      	movpl	r3, #0
 800f44e:	2300      	movmi	r3, #0
 800f450:	bf4c      	ite	mi
 800f452:	9305      	strmi	r3, [sp, #20]
 800f454:	9304      	strpl	r3, [sp, #16]
 800f456:	9b00      	ldr	r3, [sp, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	db3d      	blt.n	800f4d8 <_dtoa_r+0x248>
 800f45c:	9b05      	ldr	r3, [sp, #20]
 800f45e:	9a00      	ldr	r2, [sp, #0]
 800f460:	920a      	str	r2, [sp, #40]	; 0x28
 800f462:	4413      	add	r3, r2
 800f464:	9305      	str	r3, [sp, #20]
 800f466:	2300      	movs	r3, #0
 800f468:	9307      	str	r3, [sp, #28]
 800f46a:	9b06      	ldr	r3, [sp, #24]
 800f46c:	2b09      	cmp	r3, #9
 800f46e:	f200 8089 	bhi.w	800f584 <_dtoa_r+0x2f4>
 800f472:	2b05      	cmp	r3, #5
 800f474:	bfc4      	itt	gt
 800f476:	3b04      	subgt	r3, #4
 800f478:	9306      	strgt	r3, [sp, #24]
 800f47a:	9b06      	ldr	r3, [sp, #24]
 800f47c:	f1a3 0302 	sub.w	r3, r3, #2
 800f480:	bfcc      	ite	gt
 800f482:	2500      	movgt	r5, #0
 800f484:	2501      	movle	r5, #1
 800f486:	2b03      	cmp	r3, #3
 800f488:	f200 8087 	bhi.w	800f59a <_dtoa_r+0x30a>
 800f48c:	e8df f003 	tbb	[pc, r3]
 800f490:	59383a2d 	.word	0x59383a2d
 800f494:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f498:	441d      	add	r5, r3
 800f49a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f49e:	2b20      	cmp	r3, #32
 800f4a0:	bfc1      	itttt	gt
 800f4a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f4a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f4aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800f4ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f4b2:	bfda      	itte	le
 800f4b4:	f1c3 0320 	rsble	r3, r3, #32
 800f4b8:	fa06 f003 	lslle.w	r0, r6, r3
 800f4bc:	4318      	orrgt	r0, r3
 800f4be:	f7f1 f851 	bl	8000564 <__aeabi_ui2d>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	4606      	mov	r6, r0
 800f4c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f4ca:	3d01      	subs	r5, #1
 800f4cc:	930e      	str	r3, [sp, #56]	; 0x38
 800f4ce:	e76a      	b.n	800f3a6 <_dtoa_r+0x116>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e7b2      	b.n	800f43a <_dtoa_r+0x1aa>
 800f4d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f4d6:	e7b1      	b.n	800f43c <_dtoa_r+0x1ac>
 800f4d8:	9b04      	ldr	r3, [sp, #16]
 800f4da:	9a00      	ldr	r2, [sp, #0]
 800f4dc:	1a9b      	subs	r3, r3, r2
 800f4de:	9304      	str	r3, [sp, #16]
 800f4e0:	4253      	negs	r3, r2
 800f4e2:	9307      	str	r3, [sp, #28]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f4e8:	e7bf      	b.n	800f46a <_dtoa_r+0x1da>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	9308      	str	r3, [sp, #32]
 800f4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dc55      	bgt.n	800f5a0 <_dtoa_r+0x310>
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f4fe:	e00c      	b.n	800f51a <_dtoa_r+0x28a>
 800f500:	2301      	movs	r3, #1
 800f502:	e7f3      	b.n	800f4ec <_dtoa_r+0x25c>
 800f504:	2300      	movs	r3, #0
 800f506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f508:	9308      	str	r3, [sp, #32]
 800f50a:	9b00      	ldr	r3, [sp, #0]
 800f50c:	4413      	add	r3, r2
 800f50e:	9302      	str	r3, [sp, #8]
 800f510:	3301      	adds	r3, #1
 800f512:	2b01      	cmp	r3, #1
 800f514:	9303      	str	r3, [sp, #12]
 800f516:	bfb8      	it	lt
 800f518:	2301      	movlt	r3, #1
 800f51a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f51c:	2200      	movs	r2, #0
 800f51e:	6042      	str	r2, [r0, #4]
 800f520:	2204      	movs	r2, #4
 800f522:	f102 0614 	add.w	r6, r2, #20
 800f526:	429e      	cmp	r6, r3
 800f528:	6841      	ldr	r1, [r0, #4]
 800f52a:	d93d      	bls.n	800f5a8 <_dtoa_r+0x318>
 800f52c:	4620      	mov	r0, r4
 800f52e:	f000 fdc7 	bl	80100c0 <_Balloc>
 800f532:	9001      	str	r0, [sp, #4]
 800f534:	2800      	cmp	r0, #0
 800f536:	d13b      	bne.n	800f5b0 <_dtoa_r+0x320>
 800f538:	4b11      	ldr	r3, [pc, #68]	; (800f580 <_dtoa_r+0x2f0>)
 800f53a:	4602      	mov	r2, r0
 800f53c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f540:	e6c0      	b.n	800f2c4 <_dtoa_r+0x34>
 800f542:	2301      	movs	r3, #1
 800f544:	e7df      	b.n	800f506 <_dtoa_r+0x276>
 800f546:	bf00      	nop
 800f548:	636f4361 	.word	0x636f4361
 800f54c:	3fd287a7 	.word	0x3fd287a7
 800f550:	8b60c8b3 	.word	0x8b60c8b3
 800f554:	3fc68a28 	.word	0x3fc68a28
 800f558:	509f79fb 	.word	0x509f79fb
 800f55c:	3fd34413 	.word	0x3fd34413
 800f560:	0801ddd2 	.word	0x0801ddd2
 800f564:	0801de8d 	.word	0x0801de8d
 800f568:	7ff00000 	.word	0x7ff00000
 800f56c:	0801de89 	.word	0x0801de89
 800f570:	0801de80 	.word	0x0801de80
 800f574:	0801b253 	.word	0x0801b253
 800f578:	3ff80000 	.word	0x3ff80000
 800f57c:	0801dfe0 	.word	0x0801dfe0
 800f580:	0801dee8 	.word	0x0801dee8
 800f584:	2501      	movs	r5, #1
 800f586:	2300      	movs	r3, #0
 800f588:	9306      	str	r3, [sp, #24]
 800f58a:	9508      	str	r5, [sp, #32]
 800f58c:	f04f 33ff 	mov.w	r3, #4294967295
 800f590:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f594:	2200      	movs	r2, #0
 800f596:	2312      	movs	r3, #18
 800f598:	e7b0      	b.n	800f4fc <_dtoa_r+0x26c>
 800f59a:	2301      	movs	r3, #1
 800f59c:	9308      	str	r3, [sp, #32]
 800f59e:	e7f5      	b.n	800f58c <_dtoa_r+0x2fc>
 800f5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f5a6:	e7b8      	b.n	800f51a <_dtoa_r+0x28a>
 800f5a8:	3101      	adds	r1, #1
 800f5aa:	6041      	str	r1, [r0, #4]
 800f5ac:	0052      	lsls	r2, r2, #1
 800f5ae:	e7b8      	b.n	800f522 <_dtoa_r+0x292>
 800f5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5b2:	9a01      	ldr	r2, [sp, #4]
 800f5b4:	601a      	str	r2, [r3, #0]
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	2b0e      	cmp	r3, #14
 800f5ba:	f200 809d 	bhi.w	800f6f8 <_dtoa_r+0x468>
 800f5be:	2d00      	cmp	r5, #0
 800f5c0:	f000 809a 	beq.w	800f6f8 <_dtoa_r+0x468>
 800f5c4:	9b00      	ldr	r3, [sp, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	dd32      	ble.n	800f630 <_dtoa_r+0x3a0>
 800f5ca:	4ab7      	ldr	r2, [pc, #732]	; (800f8a8 <_dtoa_r+0x618>)
 800f5cc:	f003 030f 	and.w	r3, r3, #15
 800f5d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f5d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5d8:	9b00      	ldr	r3, [sp, #0]
 800f5da:	05d8      	lsls	r0, r3, #23
 800f5dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f5e0:	d516      	bpl.n	800f610 <_dtoa_r+0x380>
 800f5e2:	4bb2      	ldr	r3, [pc, #712]	; (800f8ac <_dtoa_r+0x61c>)
 800f5e4:	ec51 0b19 	vmov	r0, r1, d9
 800f5e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f5ec:	f7f1 f95e 	bl	80008ac <__aeabi_ddiv>
 800f5f0:	f007 070f 	and.w	r7, r7, #15
 800f5f4:	4682      	mov	sl, r0
 800f5f6:	468b      	mov	fp, r1
 800f5f8:	2503      	movs	r5, #3
 800f5fa:	4eac      	ldr	r6, [pc, #688]	; (800f8ac <_dtoa_r+0x61c>)
 800f5fc:	b957      	cbnz	r7, 800f614 <_dtoa_r+0x384>
 800f5fe:	4642      	mov	r2, r8
 800f600:	464b      	mov	r3, r9
 800f602:	4650      	mov	r0, sl
 800f604:	4659      	mov	r1, fp
 800f606:	f7f1 f951 	bl	80008ac <__aeabi_ddiv>
 800f60a:	4682      	mov	sl, r0
 800f60c:	468b      	mov	fp, r1
 800f60e:	e028      	b.n	800f662 <_dtoa_r+0x3d2>
 800f610:	2502      	movs	r5, #2
 800f612:	e7f2      	b.n	800f5fa <_dtoa_r+0x36a>
 800f614:	07f9      	lsls	r1, r7, #31
 800f616:	d508      	bpl.n	800f62a <_dtoa_r+0x39a>
 800f618:	4640      	mov	r0, r8
 800f61a:	4649      	mov	r1, r9
 800f61c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f620:	f7f1 f81a 	bl	8000658 <__aeabi_dmul>
 800f624:	3501      	adds	r5, #1
 800f626:	4680      	mov	r8, r0
 800f628:	4689      	mov	r9, r1
 800f62a:	107f      	asrs	r7, r7, #1
 800f62c:	3608      	adds	r6, #8
 800f62e:	e7e5      	b.n	800f5fc <_dtoa_r+0x36c>
 800f630:	f000 809b 	beq.w	800f76a <_dtoa_r+0x4da>
 800f634:	9b00      	ldr	r3, [sp, #0]
 800f636:	4f9d      	ldr	r7, [pc, #628]	; (800f8ac <_dtoa_r+0x61c>)
 800f638:	425e      	negs	r6, r3
 800f63a:	4b9b      	ldr	r3, [pc, #620]	; (800f8a8 <_dtoa_r+0x618>)
 800f63c:	f006 020f 	and.w	r2, r6, #15
 800f640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	ec51 0b19 	vmov	r0, r1, d9
 800f64c:	f7f1 f804 	bl	8000658 <__aeabi_dmul>
 800f650:	1136      	asrs	r6, r6, #4
 800f652:	4682      	mov	sl, r0
 800f654:	468b      	mov	fp, r1
 800f656:	2300      	movs	r3, #0
 800f658:	2502      	movs	r5, #2
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	d17a      	bne.n	800f754 <_dtoa_r+0x4c4>
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1d3      	bne.n	800f60a <_dtoa_r+0x37a>
 800f662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 8082 	beq.w	800f76e <_dtoa_r+0x4de>
 800f66a:	4b91      	ldr	r3, [pc, #580]	; (800f8b0 <_dtoa_r+0x620>)
 800f66c:	2200      	movs	r2, #0
 800f66e:	4650      	mov	r0, sl
 800f670:	4659      	mov	r1, fp
 800f672:	f7f1 fa63 	bl	8000b3c <__aeabi_dcmplt>
 800f676:	2800      	cmp	r0, #0
 800f678:	d079      	beq.n	800f76e <_dtoa_r+0x4de>
 800f67a:	9b03      	ldr	r3, [sp, #12]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d076      	beq.n	800f76e <_dtoa_r+0x4de>
 800f680:	9b02      	ldr	r3, [sp, #8]
 800f682:	2b00      	cmp	r3, #0
 800f684:	dd36      	ble.n	800f6f4 <_dtoa_r+0x464>
 800f686:	9b00      	ldr	r3, [sp, #0]
 800f688:	4650      	mov	r0, sl
 800f68a:	4659      	mov	r1, fp
 800f68c:	1e5f      	subs	r7, r3, #1
 800f68e:	2200      	movs	r2, #0
 800f690:	4b88      	ldr	r3, [pc, #544]	; (800f8b4 <_dtoa_r+0x624>)
 800f692:	f7f0 ffe1 	bl	8000658 <__aeabi_dmul>
 800f696:	9e02      	ldr	r6, [sp, #8]
 800f698:	4682      	mov	sl, r0
 800f69a:	468b      	mov	fp, r1
 800f69c:	3501      	adds	r5, #1
 800f69e:	4628      	mov	r0, r5
 800f6a0:	f7f0 ff70 	bl	8000584 <__aeabi_i2d>
 800f6a4:	4652      	mov	r2, sl
 800f6a6:	465b      	mov	r3, fp
 800f6a8:	f7f0 ffd6 	bl	8000658 <__aeabi_dmul>
 800f6ac:	4b82      	ldr	r3, [pc, #520]	; (800f8b8 <_dtoa_r+0x628>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f7f0 fe1c 	bl	80002ec <__adddf3>
 800f6b4:	46d0      	mov	r8, sl
 800f6b6:	46d9      	mov	r9, fp
 800f6b8:	4682      	mov	sl, r0
 800f6ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f6be:	2e00      	cmp	r6, #0
 800f6c0:	d158      	bne.n	800f774 <_dtoa_r+0x4e4>
 800f6c2:	4b7e      	ldr	r3, [pc, #504]	; (800f8bc <_dtoa_r+0x62c>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	4649      	mov	r1, r9
 800f6ca:	f7f0 fe0d 	bl	80002e8 <__aeabi_dsub>
 800f6ce:	4652      	mov	r2, sl
 800f6d0:	465b      	mov	r3, fp
 800f6d2:	4680      	mov	r8, r0
 800f6d4:	4689      	mov	r9, r1
 800f6d6:	f7f1 fa4f 	bl	8000b78 <__aeabi_dcmpgt>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	f040 8295 	bne.w	800fc0a <_dtoa_r+0x97a>
 800f6e0:	4652      	mov	r2, sl
 800f6e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	4649      	mov	r1, r9
 800f6ea:	f7f1 fa27 	bl	8000b3c <__aeabi_dcmplt>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	f040 8289 	bne.w	800fc06 <_dtoa_r+0x976>
 800f6f4:	ec5b ab19 	vmov	sl, fp, d9
 800f6f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f2c0 8148 	blt.w	800f990 <_dtoa_r+0x700>
 800f700:	9a00      	ldr	r2, [sp, #0]
 800f702:	2a0e      	cmp	r2, #14
 800f704:	f300 8144 	bgt.w	800f990 <_dtoa_r+0x700>
 800f708:	4b67      	ldr	r3, [pc, #412]	; (800f8a8 <_dtoa_r+0x618>)
 800f70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f70e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f714:	2b00      	cmp	r3, #0
 800f716:	f280 80d5 	bge.w	800f8c4 <_dtoa_r+0x634>
 800f71a:	9b03      	ldr	r3, [sp, #12]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f300 80d1 	bgt.w	800f8c4 <_dtoa_r+0x634>
 800f722:	f040 826f 	bne.w	800fc04 <_dtoa_r+0x974>
 800f726:	4b65      	ldr	r3, [pc, #404]	; (800f8bc <_dtoa_r+0x62c>)
 800f728:	2200      	movs	r2, #0
 800f72a:	4640      	mov	r0, r8
 800f72c:	4649      	mov	r1, r9
 800f72e:	f7f0 ff93 	bl	8000658 <__aeabi_dmul>
 800f732:	4652      	mov	r2, sl
 800f734:	465b      	mov	r3, fp
 800f736:	f7f1 fa15 	bl	8000b64 <__aeabi_dcmpge>
 800f73a:	9e03      	ldr	r6, [sp, #12]
 800f73c:	4637      	mov	r7, r6
 800f73e:	2800      	cmp	r0, #0
 800f740:	f040 8245 	bne.w	800fbce <_dtoa_r+0x93e>
 800f744:	9d01      	ldr	r5, [sp, #4]
 800f746:	2331      	movs	r3, #49	; 0x31
 800f748:	f805 3b01 	strb.w	r3, [r5], #1
 800f74c:	9b00      	ldr	r3, [sp, #0]
 800f74e:	3301      	adds	r3, #1
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	e240      	b.n	800fbd6 <_dtoa_r+0x946>
 800f754:	07f2      	lsls	r2, r6, #31
 800f756:	d505      	bpl.n	800f764 <_dtoa_r+0x4d4>
 800f758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f75c:	f7f0 ff7c 	bl	8000658 <__aeabi_dmul>
 800f760:	3501      	adds	r5, #1
 800f762:	2301      	movs	r3, #1
 800f764:	1076      	asrs	r6, r6, #1
 800f766:	3708      	adds	r7, #8
 800f768:	e777      	b.n	800f65a <_dtoa_r+0x3ca>
 800f76a:	2502      	movs	r5, #2
 800f76c:	e779      	b.n	800f662 <_dtoa_r+0x3d2>
 800f76e:	9f00      	ldr	r7, [sp, #0]
 800f770:	9e03      	ldr	r6, [sp, #12]
 800f772:	e794      	b.n	800f69e <_dtoa_r+0x40e>
 800f774:	9901      	ldr	r1, [sp, #4]
 800f776:	4b4c      	ldr	r3, [pc, #304]	; (800f8a8 <_dtoa_r+0x618>)
 800f778:	4431      	add	r1, r6
 800f77a:	910d      	str	r1, [sp, #52]	; 0x34
 800f77c:	9908      	ldr	r1, [sp, #32]
 800f77e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f782:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f786:	2900      	cmp	r1, #0
 800f788:	d043      	beq.n	800f812 <_dtoa_r+0x582>
 800f78a:	494d      	ldr	r1, [pc, #308]	; (800f8c0 <_dtoa_r+0x630>)
 800f78c:	2000      	movs	r0, #0
 800f78e:	f7f1 f88d 	bl	80008ac <__aeabi_ddiv>
 800f792:	4652      	mov	r2, sl
 800f794:	465b      	mov	r3, fp
 800f796:	f7f0 fda7 	bl	80002e8 <__aeabi_dsub>
 800f79a:	9d01      	ldr	r5, [sp, #4]
 800f79c:	4682      	mov	sl, r0
 800f79e:	468b      	mov	fp, r1
 800f7a0:	4649      	mov	r1, r9
 800f7a2:	4640      	mov	r0, r8
 800f7a4:	f7f1 fa08 	bl	8000bb8 <__aeabi_d2iz>
 800f7a8:	4606      	mov	r6, r0
 800f7aa:	f7f0 feeb 	bl	8000584 <__aeabi_i2d>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	f7f0 fd97 	bl	80002e8 <__aeabi_dsub>
 800f7ba:	3630      	adds	r6, #48	; 0x30
 800f7bc:	f805 6b01 	strb.w	r6, [r5], #1
 800f7c0:	4652      	mov	r2, sl
 800f7c2:	465b      	mov	r3, fp
 800f7c4:	4680      	mov	r8, r0
 800f7c6:	4689      	mov	r9, r1
 800f7c8:	f7f1 f9b8 	bl	8000b3c <__aeabi_dcmplt>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d163      	bne.n	800f898 <_dtoa_r+0x608>
 800f7d0:	4642      	mov	r2, r8
 800f7d2:	464b      	mov	r3, r9
 800f7d4:	4936      	ldr	r1, [pc, #216]	; (800f8b0 <_dtoa_r+0x620>)
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	f7f0 fd86 	bl	80002e8 <__aeabi_dsub>
 800f7dc:	4652      	mov	r2, sl
 800f7de:	465b      	mov	r3, fp
 800f7e0:	f7f1 f9ac 	bl	8000b3c <__aeabi_dcmplt>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	f040 80b5 	bne.w	800f954 <_dtoa_r+0x6c4>
 800f7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7ec:	429d      	cmp	r5, r3
 800f7ee:	d081      	beq.n	800f6f4 <_dtoa_r+0x464>
 800f7f0:	4b30      	ldr	r3, [pc, #192]	; (800f8b4 <_dtoa_r+0x624>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	4650      	mov	r0, sl
 800f7f6:	4659      	mov	r1, fp
 800f7f8:	f7f0 ff2e 	bl	8000658 <__aeabi_dmul>
 800f7fc:	4b2d      	ldr	r3, [pc, #180]	; (800f8b4 <_dtoa_r+0x624>)
 800f7fe:	4682      	mov	sl, r0
 800f800:	468b      	mov	fp, r1
 800f802:	4640      	mov	r0, r8
 800f804:	4649      	mov	r1, r9
 800f806:	2200      	movs	r2, #0
 800f808:	f7f0 ff26 	bl	8000658 <__aeabi_dmul>
 800f80c:	4680      	mov	r8, r0
 800f80e:	4689      	mov	r9, r1
 800f810:	e7c6      	b.n	800f7a0 <_dtoa_r+0x510>
 800f812:	4650      	mov	r0, sl
 800f814:	4659      	mov	r1, fp
 800f816:	f7f0 ff1f 	bl	8000658 <__aeabi_dmul>
 800f81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f81c:	9d01      	ldr	r5, [sp, #4]
 800f81e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f820:	4682      	mov	sl, r0
 800f822:	468b      	mov	fp, r1
 800f824:	4649      	mov	r1, r9
 800f826:	4640      	mov	r0, r8
 800f828:	f7f1 f9c6 	bl	8000bb8 <__aeabi_d2iz>
 800f82c:	4606      	mov	r6, r0
 800f82e:	f7f0 fea9 	bl	8000584 <__aeabi_i2d>
 800f832:	3630      	adds	r6, #48	; 0x30
 800f834:	4602      	mov	r2, r0
 800f836:	460b      	mov	r3, r1
 800f838:	4640      	mov	r0, r8
 800f83a:	4649      	mov	r1, r9
 800f83c:	f7f0 fd54 	bl	80002e8 <__aeabi_dsub>
 800f840:	f805 6b01 	strb.w	r6, [r5], #1
 800f844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f846:	429d      	cmp	r5, r3
 800f848:	4680      	mov	r8, r0
 800f84a:	4689      	mov	r9, r1
 800f84c:	f04f 0200 	mov.w	r2, #0
 800f850:	d124      	bne.n	800f89c <_dtoa_r+0x60c>
 800f852:	4b1b      	ldr	r3, [pc, #108]	; (800f8c0 <_dtoa_r+0x630>)
 800f854:	4650      	mov	r0, sl
 800f856:	4659      	mov	r1, fp
 800f858:	f7f0 fd48 	bl	80002ec <__adddf3>
 800f85c:	4602      	mov	r2, r0
 800f85e:	460b      	mov	r3, r1
 800f860:	4640      	mov	r0, r8
 800f862:	4649      	mov	r1, r9
 800f864:	f7f1 f988 	bl	8000b78 <__aeabi_dcmpgt>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d173      	bne.n	800f954 <_dtoa_r+0x6c4>
 800f86c:	4652      	mov	r2, sl
 800f86e:	465b      	mov	r3, fp
 800f870:	4913      	ldr	r1, [pc, #76]	; (800f8c0 <_dtoa_r+0x630>)
 800f872:	2000      	movs	r0, #0
 800f874:	f7f0 fd38 	bl	80002e8 <__aeabi_dsub>
 800f878:	4602      	mov	r2, r0
 800f87a:	460b      	mov	r3, r1
 800f87c:	4640      	mov	r0, r8
 800f87e:	4649      	mov	r1, r9
 800f880:	f7f1 f95c 	bl	8000b3c <__aeabi_dcmplt>
 800f884:	2800      	cmp	r0, #0
 800f886:	f43f af35 	beq.w	800f6f4 <_dtoa_r+0x464>
 800f88a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f88c:	1e6b      	subs	r3, r5, #1
 800f88e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f890:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f894:	2b30      	cmp	r3, #48	; 0x30
 800f896:	d0f8      	beq.n	800f88a <_dtoa_r+0x5fa>
 800f898:	9700      	str	r7, [sp, #0]
 800f89a:	e049      	b.n	800f930 <_dtoa_r+0x6a0>
 800f89c:	4b05      	ldr	r3, [pc, #20]	; (800f8b4 <_dtoa_r+0x624>)
 800f89e:	f7f0 fedb 	bl	8000658 <__aeabi_dmul>
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	4689      	mov	r9, r1
 800f8a6:	e7bd      	b.n	800f824 <_dtoa_r+0x594>
 800f8a8:	0801dfe0 	.word	0x0801dfe0
 800f8ac:	0801dfb8 	.word	0x0801dfb8
 800f8b0:	3ff00000 	.word	0x3ff00000
 800f8b4:	40240000 	.word	0x40240000
 800f8b8:	401c0000 	.word	0x401c0000
 800f8bc:	40140000 	.word	0x40140000
 800f8c0:	3fe00000 	.word	0x3fe00000
 800f8c4:	9d01      	ldr	r5, [sp, #4]
 800f8c6:	4656      	mov	r6, sl
 800f8c8:	465f      	mov	r7, fp
 800f8ca:	4642      	mov	r2, r8
 800f8cc:	464b      	mov	r3, r9
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	4639      	mov	r1, r7
 800f8d2:	f7f0 ffeb 	bl	80008ac <__aeabi_ddiv>
 800f8d6:	f7f1 f96f 	bl	8000bb8 <__aeabi_d2iz>
 800f8da:	4682      	mov	sl, r0
 800f8dc:	f7f0 fe52 	bl	8000584 <__aeabi_i2d>
 800f8e0:	4642      	mov	r2, r8
 800f8e2:	464b      	mov	r3, r9
 800f8e4:	f7f0 feb8 	bl	8000658 <__aeabi_dmul>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	460b      	mov	r3, r1
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	4639      	mov	r1, r7
 800f8f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f8f4:	f7f0 fcf8 	bl	80002e8 <__aeabi_dsub>
 800f8f8:	f805 6b01 	strb.w	r6, [r5], #1
 800f8fc:	9e01      	ldr	r6, [sp, #4]
 800f8fe:	9f03      	ldr	r7, [sp, #12]
 800f900:	1bae      	subs	r6, r5, r6
 800f902:	42b7      	cmp	r7, r6
 800f904:	4602      	mov	r2, r0
 800f906:	460b      	mov	r3, r1
 800f908:	d135      	bne.n	800f976 <_dtoa_r+0x6e6>
 800f90a:	f7f0 fcef 	bl	80002ec <__adddf3>
 800f90e:	4642      	mov	r2, r8
 800f910:	464b      	mov	r3, r9
 800f912:	4606      	mov	r6, r0
 800f914:	460f      	mov	r7, r1
 800f916:	f7f1 f92f 	bl	8000b78 <__aeabi_dcmpgt>
 800f91a:	b9d0      	cbnz	r0, 800f952 <_dtoa_r+0x6c2>
 800f91c:	4642      	mov	r2, r8
 800f91e:	464b      	mov	r3, r9
 800f920:	4630      	mov	r0, r6
 800f922:	4639      	mov	r1, r7
 800f924:	f7f1 f900 	bl	8000b28 <__aeabi_dcmpeq>
 800f928:	b110      	cbz	r0, 800f930 <_dtoa_r+0x6a0>
 800f92a:	f01a 0f01 	tst.w	sl, #1
 800f92e:	d110      	bne.n	800f952 <_dtoa_r+0x6c2>
 800f930:	4620      	mov	r0, r4
 800f932:	ee18 1a10 	vmov	r1, s16
 800f936:	f000 fc03 	bl	8010140 <_Bfree>
 800f93a:	2300      	movs	r3, #0
 800f93c:	9800      	ldr	r0, [sp, #0]
 800f93e:	702b      	strb	r3, [r5, #0]
 800f940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f942:	3001      	adds	r0, #1
 800f944:	6018      	str	r0, [r3, #0]
 800f946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f43f acf1 	beq.w	800f330 <_dtoa_r+0xa0>
 800f94e:	601d      	str	r5, [r3, #0]
 800f950:	e4ee      	b.n	800f330 <_dtoa_r+0xa0>
 800f952:	9f00      	ldr	r7, [sp, #0]
 800f954:	462b      	mov	r3, r5
 800f956:	461d      	mov	r5, r3
 800f958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f95c:	2a39      	cmp	r2, #57	; 0x39
 800f95e:	d106      	bne.n	800f96e <_dtoa_r+0x6de>
 800f960:	9a01      	ldr	r2, [sp, #4]
 800f962:	429a      	cmp	r2, r3
 800f964:	d1f7      	bne.n	800f956 <_dtoa_r+0x6c6>
 800f966:	9901      	ldr	r1, [sp, #4]
 800f968:	2230      	movs	r2, #48	; 0x30
 800f96a:	3701      	adds	r7, #1
 800f96c:	700a      	strb	r2, [r1, #0]
 800f96e:	781a      	ldrb	r2, [r3, #0]
 800f970:	3201      	adds	r2, #1
 800f972:	701a      	strb	r2, [r3, #0]
 800f974:	e790      	b.n	800f898 <_dtoa_r+0x608>
 800f976:	4ba6      	ldr	r3, [pc, #664]	; (800fc10 <_dtoa_r+0x980>)
 800f978:	2200      	movs	r2, #0
 800f97a:	f7f0 fe6d 	bl	8000658 <__aeabi_dmul>
 800f97e:	2200      	movs	r2, #0
 800f980:	2300      	movs	r3, #0
 800f982:	4606      	mov	r6, r0
 800f984:	460f      	mov	r7, r1
 800f986:	f7f1 f8cf 	bl	8000b28 <__aeabi_dcmpeq>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d09d      	beq.n	800f8ca <_dtoa_r+0x63a>
 800f98e:	e7cf      	b.n	800f930 <_dtoa_r+0x6a0>
 800f990:	9a08      	ldr	r2, [sp, #32]
 800f992:	2a00      	cmp	r2, #0
 800f994:	f000 80d7 	beq.w	800fb46 <_dtoa_r+0x8b6>
 800f998:	9a06      	ldr	r2, [sp, #24]
 800f99a:	2a01      	cmp	r2, #1
 800f99c:	f300 80ba 	bgt.w	800fb14 <_dtoa_r+0x884>
 800f9a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9a2:	2a00      	cmp	r2, #0
 800f9a4:	f000 80b2 	beq.w	800fb0c <_dtoa_r+0x87c>
 800f9a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f9ac:	9e07      	ldr	r6, [sp, #28]
 800f9ae:	9d04      	ldr	r5, [sp, #16]
 800f9b0:	9a04      	ldr	r2, [sp, #16]
 800f9b2:	441a      	add	r2, r3
 800f9b4:	9204      	str	r2, [sp, #16]
 800f9b6:	9a05      	ldr	r2, [sp, #20]
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	441a      	add	r2, r3
 800f9bc:	4620      	mov	r0, r4
 800f9be:	9205      	str	r2, [sp, #20]
 800f9c0:	f000 fc76 	bl	80102b0 <__i2b>
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	2d00      	cmp	r5, #0
 800f9c8:	dd0c      	ble.n	800f9e4 <_dtoa_r+0x754>
 800f9ca:	9b05      	ldr	r3, [sp, #20]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	dd09      	ble.n	800f9e4 <_dtoa_r+0x754>
 800f9d0:	42ab      	cmp	r3, r5
 800f9d2:	9a04      	ldr	r2, [sp, #16]
 800f9d4:	bfa8      	it	ge
 800f9d6:	462b      	movge	r3, r5
 800f9d8:	1ad2      	subs	r2, r2, r3
 800f9da:	9204      	str	r2, [sp, #16]
 800f9dc:	9a05      	ldr	r2, [sp, #20]
 800f9de:	1aed      	subs	r5, r5, r3
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	9305      	str	r3, [sp, #20]
 800f9e4:	9b07      	ldr	r3, [sp, #28]
 800f9e6:	b31b      	cbz	r3, 800fa30 <_dtoa_r+0x7a0>
 800f9e8:	9b08      	ldr	r3, [sp, #32]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 80af 	beq.w	800fb4e <_dtoa_r+0x8be>
 800f9f0:	2e00      	cmp	r6, #0
 800f9f2:	dd13      	ble.n	800fa1c <_dtoa_r+0x78c>
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	4632      	mov	r2, r6
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	f000 fd19 	bl	8010430 <__pow5mult>
 800f9fe:	ee18 2a10 	vmov	r2, s16
 800fa02:	4601      	mov	r1, r0
 800fa04:	4607      	mov	r7, r0
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 fc68 	bl	80102dc <__multiply>
 800fa0c:	ee18 1a10 	vmov	r1, s16
 800fa10:	4680      	mov	r8, r0
 800fa12:	4620      	mov	r0, r4
 800fa14:	f000 fb94 	bl	8010140 <_Bfree>
 800fa18:	ee08 8a10 	vmov	s16, r8
 800fa1c:	9b07      	ldr	r3, [sp, #28]
 800fa1e:	1b9a      	subs	r2, r3, r6
 800fa20:	d006      	beq.n	800fa30 <_dtoa_r+0x7a0>
 800fa22:	ee18 1a10 	vmov	r1, s16
 800fa26:	4620      	mov	r0, r4
 800fa28:	f000 fd02 	bl	8010430 <__pow5mult>
 800fa2c:	ee08 0a10 	vmov	s16, r0
 800fa30:	2101      	movs	r1, #1
 800fa32:	4620      	mov	r0, r4
 800fa34:	f000 fc3c 	bl	80102b0 <__i2b>
 800fa38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	f340 8088 	ble.w	800fb52 <_dtoa_r+0x8c2>
 800fa42:	461a      	mov	r2, r3
 800fa44:	4601      	mov	r1, r0
 800fa46:	4620      	mov	r0, r4
 800fa48:	f000 fcf2 	bl	8010430 <__pow5mult>
 800fa4c:	9b06      	ldr	r3, [sp, #24]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	4606      	mov	r6, r0
 800fa52:	f340 8081 	ble.w	800fb58 <_dtoa_r+0x8c8>
 800fa56:	f04f 0800 	mov.w	r8, #0
 800fa5a:	6933      	ldr	r3, [r6, #16]
 800fa5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fa60:	6918      	ldr	r0, [r3, #16]
 800fa62:	f000 fbd5 	bl	8010210 <__hi0bits>
 800fa66:	f1c0 0020 	rsb	r0, r0, #32
 800fa6a:	9b05      	ldr	r3, [sp, #20]
 800fa6c:	4418      	add	r0, r3
 800fa6e:	f010 001f 	ands.w	r0, r0, #31
 800fa72:	f000 8092 	beq.w	800fb9a <_dtoa_r+0x90a>
 800fa76:	f1c0 0320 	rsb	r3, r0, #32
 800fa7a:	2b04      	cmp	r3, #4
 800fa7c:	f340 808a 	ble.w	800fb94 <_dtoa_r+0x904>
 800fa80:	f1c0 001c 	rsb	r0, r0, #28
 800fa84:	9b04      	ldr	r3, [sp, #16]
 800fa86:	4403      	add	r3, r0
 800fa88:	9304      	str	r3, [sp, #16]
 800fa8a:	9b05      	ldr	r3, [sp, #20]
 800fa8c:	4403      	add	r3, r0
 800fa8e:	4405      	add	r5, r0
 800fa90:	9305      	str	r3, [sp, #20]
 800fa92:	9b04      	ldr	r3, [sp, #16]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	dd07      	ble.n	800faa8 <_dtoa_r+0x818>
 800fa98:	ee18 1a10 	vmov	r1, s16
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 fd20 	bl	80104e4 <__lshift>
 800faa4:	ee08 0a10 	vmov	s16, r0
 800faa8:	9b05      	ldr	r3, [sp, #20]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	dd05      	ble.n	800faba <_dtoa_r+0x82a>
 800faae:	4631      	mov	r1, r6
 800fab0:	461a      	mov	r2, r3
 800fab2:	4620      	mov	r0, r4
 800fab4:	f000 fd16 	bl	80104e4 <__lshift>
 800fab8:	4606      	mov	r6, r0
 800faba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d06e      	beq.n	800fb9e <_dtoa_r+0x90e>
 800fac0:	ee18 0a10 	vmov	r0, s16
 800fac4:	4631      	mov	r1, r6
 800fac6:	f000 fd7d 	bl	80105c4 <__mcmp>
 800faca:	2800      	cmp	r0, #0
 800facc:	da67      	bge.n	800fb9e <_dtoa_r+0x90e>
 800face:	9b00      	ldr	r3, [sp, #0]
 800fad0:	3b01      	subs	r3, #1
 800fad2:	ee18 1a10 	vmov	r1, s16
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	220a      	movs	r2, #10
 800fada:	2300      	movs	r3, #0
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 fb51 	bl	8010184 <__multadd>
 800fae2:	9b08      	ldr	r3, [sp, #32]
 800fae4:	ee08 0a10 	vmov	s16, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f000 81b1 	beq.w	800fe50 <_dtoa_r+0xbc0>
 800faee:	2300      	movs	r3, #0
 800faf0:	4639      	mov	r1, r7
 800faf2:	220a      	movs	r2, #10
 800faf4:	4620      	mov	r0, r4
 800faf6:	f000 fb45 	bl	8010184 <__multadd>
 800fafa:	9b02      	ldr	r3, [sp, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	4607      	mov	r7, r0
 800fb00:	f300 808e 	bgt.w	800fc20 <_dtoa_r+0x990>
 800fb04:	9b06      	ldr	r3, [sp, #24]
 800fb06:	2b02      	cmp	r3, #2
 800fb08:	dc51      	bgt.n	800fbae <_dtoa_r+0x91e>
 800fb0a:	e089      	b.n	800fc20 <_dtoa_r+0x990>
 800fb0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fb12:	e74b      	b.n	800f9ac <_dtoa_r+0x71c>
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	1e5e      	subs	r6, r3, #1
 800fb18:	9b07      	ldr	r3, [sp, #28]
 800fb1a:	42b3      	cmp	r3, r6
 800fb1c:	bfbf      	itttt	lt
 800fb1e:	9b07      	ldrlt	r3, [sp, #28]
 800fb20:	9607      	strlt	r6, [sp, #28]
 800fb22:	1af2      	sublt	r2, r6, r3
 800fb24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fb26:	bfb6      	itet	lt
 800fb28:	189b      	addlt	r3, r3, r2
 800fb2a:	1b9e      	subge	r6, r3, r6
 800fb2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fb2e:	9b03      	ldr	r3, [sp, #12]
 800fb30:	bfb8      	it	lt
 800fb32:	2600      	movlt	r6, #0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	bfb7      	itett	lt
 800fb38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fb3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fb40:	1a9d      	sublt	r5, r3, r2
 800fb42:	2300      	movlt	r3, #0
 800fb44:	e734      	b.n	800f9b0 <_dtoa_r+0x720>
 800fb46:	9e07      	ldr	r6, [sp, #28]
 800fb48:	9d04      	ldr	r5, [sp, #16]
 800fb4a:	9f08      	ldr	r7, [sp, #32]
 800fb4c:	e73b      	b.n	800f9c6 <_dtoa_r+0x736>
 800fb4e:	9a07      	ldr	r2, [sp, #28]
 800fb50:	e767      	b.n	800fa22 <_dtoa_r+0x792>
 800fb52:	9b06      	ldr	r3, [sp, #24]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	dc18      	bgt.n	800fb8a <_dtoa_r+0x8fa>
 800fb58:	f1ba 0f00 	cmp.w	sl, #0
 800fb5c:	d115      	bne.n	800fb8a <_dtoa_r+0x8fa>
 800fb5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb62:	b993      	cbnz	r3, 800fb8a <_dtoa_r+0x8fa>
 800fb64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb68:	0d1b      	lsrs	r3, r3, #20
 800fb6a:	051b      	lsls	r3, r3, #20
 800fb6c:	b183      	cbz	r3, 800fb90 <_dtoa_r+0x900>
 800fb6e:	9b04      	ldr	r3, [sp, #16]
 800fb70:	3301      	adds	r3, #1
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	9b05      	ldr	r3, [sp, #20]
 800fb76:	3301      	adds	r3, #1
 800fb78:	9305      	str	r3, [sp, #20]
 800fb7a:	f04f 0801 	mov.w	r8, #1
 800fb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f47f af6a 	bne.w	800fa5a <_dtoa_r+0x7ca>
 800fb86:	2001      	movs	r0, #1
 800fb88:	e76f      	b.n	800fa6a <_dtoa_r+0x7da>
 800fb8a:	f04f 0800 	mov.w	r8, #0
 800fb8e:	e7f6      	b.n	800fb7e <_dtoa_r+0x8ee>
 800fb90:	4698      	mov	r8, r3
 800fb92:	e7f4      	b.n	800fb7e <_dtoa_r+0x8ee>
 800fb94:	f43f af7d 	beq.w	800fa92 <_dtoa_r+0x802>
 800fb98:	4618      	mov	r0, r3
 800fb9a:	301c      	adds	r0, #28
 800fb9c:	e772      	b.n	800fa84 <_dtoa_r+0x7f4>
 800fb9e:	9b03      	ldr	r3, [sp, #12]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	dc37      	bgt.n	800fc14 <_dtoa_r+0x984>
 800fba4:	9b06      	ldr	r3, [sp, #24]
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	dd34      	ble.n	800fc14 <_dtoa_r+0x984>
 800fbaa:	9b03      	ldr	r3, [sp, #12]
 800fbac:	9302      	str	r3, [sp, #8]
 800fbae:	9b02      	ldr	r3, [sp, #8]
 800fbb0:	b96b      	cbnz	r3, 800fbce <_dtoa_r+0x93e>
 800fbb2:	4631      	mov	r1, r6
 800fbb4:	2205      	movs	r2, #5
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f000 fae4 	bl	8010184 <__multadd>
 800fbbc:	4601      	mov	r1, r0
 800fbbe:	4606      	mov	r6, r0
 800fbc0:	ee18 0a10 	vmov	r0, s16
 800fbc4:	f000 fcfe 	bl	80105c4 <__mcmp>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	f73f adbb 	bgt.w	800f744 <_dtoa_r+0x4b4>
 800fbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbd0:	9d01      	ldr	r5, [sp, #4]
 800fbd2:	43db      	mvns	r3, r3
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	f04f 0800 	mov.w	r8, #0
 800fbda:	4631      	mov	r1, r6
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f000 faaf 	bl	8010140 <_Bfree>
 800fbe2:	2f00      	cmp	r7, #0
 800fbe4:	f43f aea4 	beq.w	800f930 <_dtoa_r+0x6a0>
 800fbe8:	f1b8 0f00 	cmp.w	r8, #0
 800fbec:	d005      	beq.n	800fbfa <_dtoa_r+0x96a>
 800fbee:	45b8      	cmp	r8, r7
 800fbf0:	d003      	beq.n	800fbfa <_dtoa_r+0x96a>
 800fbf2:	4641      	mov	r1, r8
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f000 faa3 	bl	8010140 <_Bfree>
 800fbfa:	4639      	mov	r1, r7
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 fa9f 	bl	8010140 <_Bfree>
 800fc02:	e695      	b.n	800f930 <_dtoa_r+0x6a0>
 800fc04:	2600      	movs	r6, #0
 800fc06:	4637      	mov	r7, r6
 800fc08:	e7e1      	b.n	800fbce <_dtoa_r+0x93e>
 800fc0a:	9700      	str	r7, [sp, #0]
 800fc0c:	4637      	mov	r7, r6
 800fc0e:	e599      	b.n	800f744 <_dtoa_r+0x4b4>
 800fc10:	40240000 	.word	0x40240000
 800fc14:	9b08      	ldr	r3, [sp, #32]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f000 80ca 	beq.w	800fdb0 <_dtoa_r+0xb20>
 800fc1c:	9b03      	ldr	r3, [sp, #12]
 800fc1e:	9302      	str	r3, [sp, #8]
 800fc20:	2d00      	cmp	r5, #0
 800fc22:	dd05      	ble.n	800fc30 <_dtoa_r+0x9a0>
 800fc24:	4639      	mov	r1, r7
 800fc26:	462a      	mov	r2, r5
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f000 fc5b 	bl	80104e4 <__lshift>
 800fc2e:	4607      	mov	r7, r0
 800fc30:	f1b8 0f00 	cmp.w	r8, #0
 800fc34:	d05b      	beq.n	800fcee <_dtoa_r+0xa5e>
 800fc36:	6879      	ldr	r1, [r7, #4]
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f000 fa41 	bl	80100c0 <_Balloc>
 800fc3e:	4605      	mov	r5, r0
 800fc40:	b928      	cbnz	r0, 800fc4e <_dtoa_r+0x9be>
 800fc42:	4b87      	ldr	r3, [pc, #540]	; (800fe60 <_dtoa_r+0xbd0>)
 800fc44:	4602      	mov	r2, r0
 800fc46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fc4a:	f7ff bb3b 	b.w	800f2c4 <_dtoa_r+0x34>
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	3202      	adds	r2, #2
 800fc52:	0092      	lsls	r2, r2, #2
 800fc54:	f107 010c 	add.w	r1, r7, #12
 800fc58:	300c      	adds	r0, #12
 800fc5a:	f7fe fd21 	bl	800e6a0 <memcpy>
 800fc5e:	2201      	movs	r2, #1
 800fc60:	4629      	mov	r1, r5
 800fc62:	4620      	mov	r0, r4
 800fc64:	f000 fc3e 	bl	80104e4 <__lshift>
 800fc68:	9b01      	ldr	r3, [sp, #4]
 800fc6a:	f103 0901 	add.w	r9, r3, #1
 800fc6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fc72:	4413      	add	r3, r2
 800fc74:	9305      	str	r3, [sp, #20]
 800fc76:	f00a 0301 	and.w	r3, sl, #1
 800fc7a:	46b8      	mov	r8, r7
 800fc7c:	9304      	str	r3, [sp, #16]
 800fc7e:	4607      	mov	r7, r0
 800fc80:	4631      	mov	r1, r6
 800fc82:	ee18 0a10 	vmov	r0, s16
 800fc86:	f7ff fa77 	bl	800f178 <quorem>
 800fc8a:	4641      	mov	r1, r8
 800fc8c:	9002      	str	r0, [sp, #8]
 800fc8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc92:	ee18 0a10 	vmov	r0, s16
 800fc96:	f000 fc95 	bl	80105c4 <__mcmp>
 800fc9a:	463a      	mov	r2, r7
 800fc9c:	9003      	str	r0, [sp, #12]
 800fc9e:	4631      	mov	r1, r6
 800fca0:	4620      	mov	r0, r4
 800fca2:	f000 fcab 	bl	80105fc <__mdiff>
 800fca6:	68c2      	ldr	r2, [r0, #12]
 800fca8:	f109 3bff 	add.w	fp, r9, #4294967295
 800fcac:	4605      	mov	r5, r0
 800fcae:	bb02      	cbnz	r2, 800fcf2 <_dtoa_r+0xa62>
 800fcb0:	4601      	mov	r1, r0
 800fcb2:	ee18 0a10 	vmov	r0, s16
 800fcb6:	f000 fc85 	bl	80105c4 <__mcmp>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	9207      	str	r2, [sp, #28]
 800fcc2:	f000 fa3d 	bl	8010140 <_Bfree>
 800fcc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fcca:	ea43 0102 	orr.w	r1, r3, r2
 800fcce:	9b04      	ldr	r3, [sp, #16]
 800fcd0:	430b      	orrs	r3, r1
 800fcd2:	464d      	mov	r5, r9
 800fcd4:	d10f      	bne.n	800fcf6 <_dtoa_r+0xa66>
 800fcd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fcda:	d02a      	beq.n	800fd32 <_dtoa_r+0xaa2>
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	dd02      	ble.n	800fce8 <_dtoa_r+0xa58>
 800fce2:	9b02      	ldr	r3, [sp, #8]
 800fce4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fce8:	f88b a000 	strb.w	sl, [fp]
 800fcec:	e775      	b.n	800fbda <_dtoa_r+0x94a>
 800fcee:	4638      	mov	r0, r7
 800fcf0:	e7ba      	b.n	800fc68 <_dtoa_r+0x9d8>
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	e7e2      	b.n	800fcbc <_dtoa_r+0xa2c>
 800fcf6:	9b03      	ldr	r3, [sp, #12]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	db04      	blt.n	800fd06 <_dtoa_r+0xa76>
 800fcfc:	9906      	ldr	r1, [sp, #24]
 800fcfe:	430b      	orrs	r3, r1
 800fd00:	9904      	ldr	r1, [sp, #16]
 800fd02:	430b      	orrs	r3, r1
 800fd04:	d122      	bne.n	800fd4c <_dtoa_r+0xabc>
 800fd06:	2a00      	cmp	r2, #0
 800fd08:	ddee      	ble.n	800fce8 <_dtoa_r+0xa58>
 800fd0a:	ee18 1a10 	vmov	r1, s16
 800fd0e:	2201      	movs	r2, #1
 800fd10:	4620      	mov	r0, r4
 800fd12:	f000 fbe7 	bl	80104e4 <__lshift>
 800fd16:	4631      	mov	r1, r6
 800fd18:	ee08 0a10 	vmov	s16, r0
 800fd1c:	f000 fc52 	bl	80105c4 <__mcmp>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	dc03      	bgt.n	800fd2c <_dtoa_r+0xa9c>
 800fd24:	d1e0      	bne.n	800fce8 <_dtoa_r+0xa58>
 800fd26:	f01a 0f01 	tst.w	sl, #1
 800fd2a:	d0dd      	beq.n	800fce8 <_dtoa_r+0xa58>
 800fd2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fd30:	d1d7      	bne.n	800fce2 <_dtoa_r+0xa52>
 800fd32:	2339      	movs	r3, #57	; 0x39
 800fd34:	f88b 3000 	strb.w	r3, [fp]
 800fd38:	462b      	mov	r3, r5
 800fd3a:	461d      	mov	r5, r3
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fd42:	2a39      	cmp	r2, #57	; 0x39
 800fd44:	d071      	beq.n	800fe2a <_dtoa_r+0xb9a>
 800fd46:	3201      	adds	r2, #1
 800fd48:	701a      	strb	r2, [r3, #0]
 800fd4a:	e746      	b.n	800fbda <_dtoa_r+0x94a>
 800fd4c:	2a00      	cmp	r2, #0
 800fd4e:	dd07      	ble.n	800fd60 <_dtoa_r+0xad0>
 800fd50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fd54:	d0ed      	beq.n	800fd32 <_dtoa_r+0xaa2>
 800fd56:	f10a 0301 	add.w	r3, sl, #1
 800fd5a:	f88b 3000 	strb.w	r3, [fp]
 800fd5e:	e73c      	b.n	800fbda <_dtoa_r+0x94a>
 800fd60:	9b05      	ldr	r3, [sp, #20]
 800fd62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fd66:	4599      	cmp	r9, r3
 800fd68:	d047      	beq.n	800fdfa <_dtoa_r+0xb6a>
 800fd6a:	ee18 1a10 	vmov	r1, s16
 800fd6e:	2300      	movs	r3, #0
 800fd70:	220a      	movs	r2, #10
 800fd72:	4620      	mov	r0, r4
 800fd74:	f000 fa06 	bl	8010184 <__multadd>
 800fd78:	45b8      	cmp	r8, r7
 800fd7a:	ee08 0a10 	vmov	s16, r0
 800fd7e:	f04f 0300 	mov.w	r3, #0
 800fd82:	f04f 020a 	mov.w	r2, #10
 800fd86:	4641      	mov	r1, r8
 800fd88:	4620      	mov	r0, r4
 800fd8a:	d106      	bne.n	800fd9a <_dtoa_r+0xb0a>
 800fd8c:	f000 f9fa 	bl	8010184 <__multadd>
 800fd90:	4680      	mov	r8, r0
 800fd92:	4607      	mov	r7, r0
 800fd94:	f109 0901 	add.w	r9, r9, #1
 800fd98:	e772      	b.n	800fc80 <_dtoa_r+0x9f0>
 800fd9a:	f000 f9f3 	bl	8010184 <__multadd>
 800fd9e:	4639      	mov	r1, r7
 800fda0:	4680      	mov	r8, r0
 800fda2:	2300      	movs	r3, #0
 800fda4:	220a      	movs	r2, #10
 800fda6:	4620      	mov	r0, r4
 800fda8:	f000 f9ec 	bl	8010184 <__multadd>
 800fdac:	4607      	mov	r7, r0
 800fdae:	e7f1      	b.n	800fd94 <_dtoa_r+0xb04>
 800fdb0:	9b03      	ldr	r3, [sp, #12]
 800fdb2:	9302      	str	r3, [sp, #8]
 800fdb4:	9d01      	ldr	r5, [sp, #4]
 800fdb6:	ee18 0a10 	vmov	r0, s16
 800fdba:	4631      	mov	r1, r6
 800fdbc:	f7ff f9dc 	bl	800f178 <quorem>
 800fdc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fdc4:	9b01      	ldr	r3, [sp, #4]
 800fdc6:	f805 ab01 	strb.w	sl, [r5], #1
 800fdca:	1aea      	subs	r2, r5, r3
 800fdcc:	9b02      	ldr	r3, [sp, #8]
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	dd09      	ble.n	800fde6 <_dtoa_r+0xb56>
 800fdd2:	ee18 1a10 	vmov	r1, s16
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	220a      	movs	r2, #10
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 f9d2 	bl	8010184 <__multadd>
 800fde0:	ee08 0a10 	vmov	s16, r0
 800fde4:	e7e7      	b.n	800fdb6 <_dtoa_r+0xb26>
 800fde6:	9b02      	ldr	r3, [sp, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	bfc8      	it	gt
 800fdec:	461d      	movgt	r5, r3
 800fdee:	9b01      	ldr	r3, [sp, #4]
 800fdf0:	bfd8      	it	le
 800fdf2:	2501      	movle	r5, #1
 800fdf4:	441d      	add	r5, r3
 800fdf6:	f04f 0800 	mov.w	r8, #0
 800fdfa:	ee18 1a10 	vmov	r1, s16
 800fdfe:	2201      	movs	r2, #1
 800fe00:	4620      	mov	r0, r4
 800fe02:	f000 fb6f 	bl	80104e4 <__lshift>
 800fe06:	4631      	mov	r1, r6
 800fe08:	ee08 0a10 	vmov	s16, r0
 800fe0c:	f000 fbda 	bl	80105c4 <__mcmp>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	dc91      	bgt.n	800fd38 <_dtoa_r+0xaa8>
 800fe14:	d102      	bne.n	800fe1c <_dtoa_r+0xb8c>
 800fe16:	f01a 0f01 	tst.w	sl, #1
 800fe1a:	d18d      	bne.n	800fd38 <_dtoa_r+0xaa8>
 800fe1c:	462b      	mov	r3, r5
 800fe1e:	461d      	mov	r5, r3
 800fe20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe24:	2a30      	cmp	r2, #48	; 0x30
 800fe26:	d0fa      	beq.n	800fe1e <_dtoa_r+0xb8e>
 800fe28:	e6d7      	b.n	800fbda <_dtoa_r+0x94a>
 800fe2a:	9a01      	ldr	r2, [sp, #4]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d184      	bne.n	800fd3a <_dtoa_r+0xaaa>
 800fe30:	9b00      	ldr	r3, [sp, #0]
 800fe32:	3301      	adds	r3, #1
 800fe34:	9300      	str	r3, [sp, #0]
 800fe36:	2331      	movs	r3, #49	; 0x31
 800fe38:	7013      	strb	r3, [r2, #0]
 800fe3a:	e6ce      	b.n	800fbda <_dtoa_r+0x94a>
 800fe3c:	4b09      	ldr	r3, [pc, #36]	; (800fe64 <_dtoa_r+0xbd4>)
 800fe3e:	f7ff ba95 	b.w	800f36c <_dtoa_r+0xdc>
 800fe42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f47f aa6e 	bne.w	800f326 <_dtoa_r+0x96>
 800fe4a:	4b07      	ldr	r3, [pc, #28]	; (800fe68 <_dtoa_r+0xbd8>)
 800fe4c:	f7ff ba8e 	b.w	800f36c <_dtoa_r+0xdc>
 800fe50:	9b02      	ldr	r3, [sp, #8]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	dcae      	bgt.n	800fdb4 <_dtoa_r+0xb24>
 800fe56:	9b06      	ldr	r3, [sp, #24]
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	f73f aea8 	bgt.w	800fbae <_dtoa_r+0x91e>
 800fe5e:	e7a9      	b.n	800fdb4 <_dtoa_r+0xb24>
 800fe60:	0801dee8 	.word	0x0801dee8
 800fe64:	0801b252 	.word	0x0801b252
 800fe68:	0801de80 	.word	0x0801de80

0800fe6c <std>:
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	b510      	push	{r4, lr}
 800fe70:	4604      	mov	r4, r0
 800fe72:	e9c0 3300 	strd	r3, r3, [r0]
 800fe76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe7a:	6083      	str	r3, [r0, #8]
 800fe7c:	8181      	strh	r1, [r0, #12]
 800fe7e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe80:	81c2      	strh	r2, [r0, #14]
 800fe82:	6183      	str	r3, [r0, #24]
 800fe84:	4619      	mov	r1, r3
 800fe86:	2208      	movs	r2, #8
 800fe88:	305c      	adds	r0, #92	; 0x5c
 800fe8a:	f7fe fc31 	bl	800e6f0 <memset>
 800fe8e:	4b05      	ldr	r3, [pc, #20]	; (800fea4 <std+0x38>)
 800fe90:	6263      	str	r3, [r4, #36]	; 0x24
 800fe92:	4b05      	ldr	r3, [pc, #20]	; (800fea8 <std+0x3c>)
 800fe94:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe96:	4b05      	ldr	r3, [pc, #20]	; (800feac <std+0x40>)
 800fe98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe9a:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <std+0x44>)
 800fe9c:	6224      	str	r4, [r4, #32]
 800fe9e:	6323      	str	r3, [r4, #48]	; 0x30
 800fea0:	bd10      	pop	{r4, pc}
 800fea2:	bf00      	nop
 800fea4:	08010f41 	.word	0x08010f41
 800fea8:	08010f63 	.word	0x08010f63
 800feac:	08010f9b 	.word	0x08010f9b
 800feb0:	08010fbf 	.word	0x08010fbf

0800feb4 <_cleanup_r>:
 800feb4:	4901      	ldr	r1, [pc, #4]	; (800febc <_cleanup_r+0x8>)
 800feb6:	f000 b8c1 	b.w	801003c <_fwalk_reent>
 800feba:	bf00      	nop
 800febc:	080112a9 	.word	0x080112a9

0800fec0 <__sfmoreglue>:
 800fec0:	b570      	push	{r4, r5, r6, lr}
 800fec2:	2268      	movs	r2, #104	; 0x68
 800fec4:	1e4d      	subs	r5, r1, #1
 800fec6:	4355      	muls	r5, r2
 800fec8:	460e      	mov	r6, r1
 800feca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fece:	f000 fcfd 	bl	80108cc <_malloc_r>
 800fed2:	4604      	mov	r4, r0
 800fed4:	b140      	cbz	r0, 800fee8 <__sfmoreglue+0x28>
 800fed6:	2100      	movs	r1, #0
 800fed8:	e9c0 1600 	strd	r1, r6, [r0]
 800fedc:	300c      	adds	r0, #12
 800fede:	60a0      	str	r0, [r4, #8]
 800fee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fee4:	f7fe fc04 	bl	800e6f0 <memset>
 800fee8:	4620      	mov	r0, r4
 800feea:	bd70      	pop	{r4, r5, r6, pc}

0800feec <__sfp_lock_acquire>:
 800feec:	4801      	ldr	r0, [pc, #4]	; (800fef4 <__sfp_lock_acquire+0x8>)
 800feee:	f000 b8dc 	b.w	80100aa <__retarget_lock_acquire_recursive>
 800fef2:	bf00      	nop
 800fef4:	2000d0cd 	.word	0x2000d0cd

0800fef8 <__sfp_lock_release>:
 800fef8:	4801      	ldr	r0, [pc, #4]	; (800ff00 <__sfp_lock_release+0x8>)
 800fefa:	f000 b8d7 	b.w	80100ac <__retarget_lock_release_recursive>
 800fefe:	bf00      	nop
 800ff00:	2000d0cd 	.word	0x2000d0cd

0800ff04 <__sinit_lock_acquire>:
 800ff04:	4801      	ldr	r0, [pc, #4]	; (800ff0c <__sinit_lock_acquire+0x8>)
 800ff06:	f000 b8d0 	b.w	80100aa <__retarget_lock_acquire_recursive>
 800ff0a:	bf00      	nop
 800ff0c:	2000d0ce 	.word	0x2000d0ce

0800ff10 <__sinit_lock_release>:
 800ff10:	4801      	ldr	r0, [pc, #4]	; (800ff18 <__sinit_lock_release+0x8>)
 800ff12:	f000 b8cb 	b.w	80100ac <__retarget_lock_release_recursive>
 800ff16:	bf00      	nop
 800ff18:	2000d0ce 	.word	0x2000d0ce

0800ff1c <__sinit>:
 800ff1c:	b510      	push	{r4, lr}
 800ff1e:	4604      	mov	r4, r0
 800ff20:	f7ff fff0 	bl	800ff04 <__sinit_lock_acquire>
 800ff24:	69a3      	ldr	r3, [r4, #24]
 800ff26:	b11b      	cbz	r3, 800ff30 <__sinit+0x14>
 800ff28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff2c:	f7ff bff0 	b.w	800ff10 <__sinit_lock_release>
 800ff30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ff34:	6523      	str	r3, [r4, #80]	; 0x50
 800ff36:	4b13      	ldr	r3, [pc, #76]	; (800ff84 <__sinit+0x68>)
 800ff38:	4a13      	ldr	r2, [pc, #76]	; (800ff88 <__sinit+0x6c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ff3e:	42a3      	cmp	r3, r4
 800ff40:	bf04      	itt	eq
 800ff42:	2301      	moveq	r3, #1
 800ff44:	61a3      	streq	r3, [r4, #24]
 800ff46:	4620      	mov	r0, r4
 800ff48:	f000 f820 	bl	800ff8c <__sfp>
 800ff4c:	6060      	str	r0, [r4, #4]
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 f81c 	bl	800ff8c <__sfp>
 800ff54:	60a0      	str	r0, [r4, #8]
 800ff56:	4620      	mov	r0, r4
 800ff58:	f000 f818 	bl	800ff8c <__sfp>
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	60e0      	str	r0, [r4, #12]
 800ff60:	2104      	movs	r1, #4
 800ff62:	6860      	ldr	r0, [r4, #4]
 800ff64:	f7ff ff82 	bl	800fe6c <std>
 800ff68:	68a0      	ldr	r0, [r4, #8]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	2109      	movs	r1, #9
 800ff6e:	f7ff ff7d 	bl	800fe6c <std>
 800ff72:	68e0      	ldr	r0, [r4, #12]
 800ff74:	2202      	movs	r2, #2
 800ff76:	2112      	movs	r1, #18
 800ff78:	f7ff ff78 	bl	800fe6c <std>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	61a3      	str	r3, [r4, #24]
 800ff80:	e7d2      	b.n	800ff28 <__sinit+0xc>
 800ff82:	bf00      	nop
 800ff84:	0801dd9c 	.word	0x0801dd9c
 800ff88:	0800feb5 	.word	0x0800feb5

0800ff8c <__sfp>:
 800ff8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff8e:	4607      	mov	r7, r0
 800ff90:	f7ff ffac 	bl	800feec <__sfp_lock_acquire>
 800ff94:	4b1e      	ldr	r3, [pc, #120]	; (8010010 <__sfp+0x84>)
 800ff96:	681e      	ldr	r6, [r3, #0]
 800ff98:	69b3      	ldr	r3, [r6, #24]
 800ff9a:	b913      	cbnz	r3, 800ffa2 <__sfp+0x16>
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f7ff ffbd 	bl	800ff1c <__sinit>
 800ffa2:	3648      	adds	r6, #72	; 0x48
 800ffa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	d503      	bpl.n	800ffb4 <__sfp+0x28>
 800ffac:	6833      	ldr	r3, [r6, #0]
 800ffae:	b30b      	cbz	r3, 800fff4 <__sfp+0x68>
 800ffb0:	6836      	ldr	r6, [r6, #0]
 800ffb2:	e7f7      	b.n	800ffa4 <__sfp+0x18>
 800ffb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ffb8:	b9d5      	cbnz	r5, 800fff0 <__sfp+0x64>
 800ffba:	4b16      	ldr	r3, [pc, #88]	; (8010014 <__sfp+0x88>)
 800ffbc:	60e3      	str	r3, [r4, #12]
 800ffbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ffc2:	6665      	str	r5, [r4, #100]	; 0x64
 800ffc4:	f000 f870 	bl	80100a8 <__retarget_lock_init_recursive>
 800ffc8:	f7ff ff96 	bl	800fef8 <__sfp_lock_release>
 800ffcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ffd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ffd4:	6025      	str	r5, [r4, #0]
 800ffd6:	61a5      	str	r5, [r4, #24]
 800ffd8:	2208      	movs	r2, #8
 800ffda:	4629      	mov	r1, r5
 800ffdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ffe0:	f7fe fb86 	bl	800e6f0 <memset>
 800ffe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ffe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ffec:	4620      	mov	r0, r4
 800ffee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fff0:	3468      	adds	r4, #104	; 0x68
 800fff2:	e7d9      	b.n	800ffa8 <__sfp+0x1c>
 800fff4:	2104      	movs	r1, #4
 800fff6:	4638      	mov	r0, r7
 800fff8:	f7ff ff62 	bl	800fec0 <__sfmoreglue>
 800fffc:	4604      	mov	r4, r0
 800fffe:	6030      	str	r0, [r6, #0]
 8010000:	2800      	cmp	r0, #0
 8010002:	d1d5      	bne.n	800ffb0 <__sfp+0x24>
 8010004:	f7ff ff78 	bl	800fef8 <__sfp_lock_release>
 8010008:	230c      	movs	r3, #12
 801000a:	603b      	str	r3, [r7, #0]
 801000c:	e7ee      	b.n	800ffec <__sfp+0x60>
 801000e:	bf00      	nop
 8010010:	0801dd9c 	.word	0x0801dd9c
 8010014:	ffff0001 	.word	0xffff0001

08010018 <fiprintf>:
 8010018:	b40e      	push	{r1, r2, r3}
 801001a:	b503      	push	{r0, r1, lr}
 801001c:	4601      	mov	r1, r0
 801001e:	ab03      	add	r3, sp, #12
 8010020:	4805      	ldr	r0, [pc, #20]	; (8010038 <fiprintf+0x20>)
 8010022:	f853 2b04 	ldr.w	r2, [r3], #4
 8010026:	6800      	ldr	r0, [r0, #0]
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	f000 fe49 	bl	8010cc0 <_vfiprintf_r>
 801002e:	b002      	add	sp, #8
 8010030:	f85d eb04 	ldr.w	lr, [sp], #4
 8010034:	b003      	add	sp, #12
 8010036:	4770      	bx	lr
 8010038:	2000002c 	.word	0x2000002c

0801003c <_fwalk_reent>:
 801003c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010040:	4606      	mov	r6, r0
 8010042:	4688      	mov	r8, r1
 8010044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010048:	2700      	movs	r7, #0
 801004a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801004e:	f1b9 0901 	subs.w	r9, r9, #1
 8010052:	d505      	bpl.n	8010060 <_fwalk_reent+0x24>
 8010054:	6824      	ldr	r4, [r4, #0]
 8010056:	2c00      	cmp	r4, #0
 8010058:	d1f7      	bne.n	801004a <_fwalk_reent+0xe>
 801005a:	4638      	mov	r0, r7
 801005c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010060:	89ab      	ldrh	r3, [r5, #12]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d907      	bls.n	8010076 <_fwalk_reent+0x3a>
 8010066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801006a:	3301      	adds	r3, #1
 801006c:	d003      	beq.n	8010076 <_fwalk_reent+0x3a>
 801006e:	4629      	mov	r1, r5
 8010070:	4630      	mov	r0, r6
 8010072:	47c0      	blx	r8
 8010074:	4307      	orrs	r7, r0
 8010076:	3568      	adds	r5, #104	; 0x68
 8010078:	e7e9      	b.n	801004e <_fwalk_reent+0x12>
	...

0801007c <_gettimeofday_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4d07      	ldr	r5, [pc, #28]	; (801009c <_gettimeofday_r+0x20>)
 8010080:	2300      	movs	r3, #0
 8010082:	4604      	mov	r4, r0
 8010084:	4608      	mov	r0, r1
 8010086:	4611      	mov	r1, r2
 8010088:	602b      	str	r3, [r5, #0]
 801008a:	f7f0 ffd9 	bl	8001040 <_gettimeofday>
 801008e:	1c43      	adds	r3, r0, #1
 8010090:	d102      	bne.n	8010098 <_gettimeofday_r+0x1c>
 8010092:	682b      	ldr	r3, [r5, #0]
 8010094:	b103      	cbz	r3, 8010098 <_gettimeofday_r+0x1c>
 8010096:	6023      	str	r3, [r4, #0]
 8010098:	bd38      	pop	{r3, r4, r5, pc}
 801009a:	bf00      	nop
 801009c:	2000d0c8 	.word	0x2000d0c8

080100a0 <_localeconv_r>:
 80100a0:	4800      	ldr	r0, [pc, #0]	; (80100a4 <_localeconv_r+0x4>)
 80100a2:	4770      	bx	lr
 80100a4:	20000180 	.word	0x20000180

080100a8 <__retarget_lock_init_recursive>:
 80100a8:	4770      	bx	lr

080100aa <__retarget_lock_acquire_recursive>:
 80100aa:	4770      	bx	lr

080100ac <__retarget_lock_release_recursive>:
 80100ac:	4770      	bx	lr
	...

080100b0 <malloc>:
 80100b0:	4b02      	ldr	r3, [pc, #8]	; (80100bc <malloc+0xc>)
 80100b2:	4601      	mov	r1, r0
 80100b4:	6818      	ldr	r0, [r3, #0]
 80100b6:	f000 bc09 	b.w	80108cc <_malloc_r>
 80100ba:	bf00      	nop
 80100bc:	2000002c 	.word	0x2000002c

080100c0 <_Balloc>:
 80100c0:	b570      	push	{r4, r5, r6, lr}
 80100c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80100c4:	4604      	mov	r4, r0
 80100c6:	460d      	mov	r5, r1
 80100c8:	b976      	cbnz	r6, 80100e8 <_Balloc+0x28>
 80100ca:	2010      	movs	r0, #16
 80100cc:	f7ff fff0 	bl	80100b0 <malloc>
 80100d0:	4602      	mov	r2, r0
 80100d2:	6260      	str	r0, [r4, #36]	; 0x24
 80100d4:	b920      	cbnz	r0, 80100e0 <_Balloc+0x20>
 80100d6:	4b18      	ldr	r3, [pc, #96]	; (8010138 <_Balloc+0x78>)
 80100d8:	4818      	ldr	r0, [pc, #96]	; (801013c <_Balloc+0x7c>)
 80100da:	2166      	movs	r1, #102	; 0x66
 80100dc:	f7ff f82e 	bl	800f13c <__assert_func>
 80100e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100e4:	6006      	str	r6, [r0, #0]
 80100e6:	60c6      	str	r6, [r0, #12]
 80100e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80100ea:	68f3      	ldr	r3, [r6, #12]
 80100ec:	b183      	cbz	r3, 8010110 <_Balloc+0x50>
 80100ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100f6:	b9b8      	cbnz	r0, 8010128 <_Balloc+0x68>
 80100f8:	2101      	movs	r1, #1
 80100fa:	fa01 f605 	lsl.w	r6, r1, r5
 80100fe:	1d72      	adds	r2, r6, #5
 8010100:	0092      	lsls	r2, r2, #2
 8010102:	4620      	mov	r0, r4
 8010104:	f000 fb60 	bl	80107c8 <_calloc_r>
 8010108:	b160      	cbz	r0, 8010124 <_Balloc+0x64>
 801010a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801010e:	e00e      	b.n	801012e <_Balloc+0x6e>
 8010110:	2221      	movs	r2, #33	; 0x21
 8010112:	2104      	movs	r1, #4
 8010114:	4620      	mov	r0, r4
 8010116:	f000 fb57 	bl	80107c8 <_calloc_r>
 801011a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801011c:	60f0      	str	r0, [r6, #12]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1e4      	bne.n	80100ee <_Balloc+0x2e>
 8010124:	2000      	movs	r0, #0
 8010126:	bd70      	pop	{r4, r5, r6, pc}
 8010128:	6802      	ldr	r2, [r0, #0]
 801012a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801012e:	2300      	movs	r3, #0
 8010130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010134:	e7f7      	b.n	8010126 <_Balloc+0x66>
 8010136:	bf00      	nop
 8010138:	0801ddd2 	.word	0x0801ddd2
 801013c:	0801df5c 	.word	0x0801df5c

08010140 <_Bfree>:
 8010140:	b570      	push	{r4, r5, r6, lr}
 8010142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010144:	4605      	mov	r5, r0
 8010146:	460c      	mov	r4, r1
 8010148:	b976      	cbnz	r6, 8010168 <_Bfree+0x28>
 801014a:	2010      	movs	r0, #16
 801014c:	f7ff ffb0 	bl	80100b0 <malloc>
 8010150:	4602      	mov	r2, r0
 8010152:	6268      	str	r0, [r5, #36]	; 0x24
 8010154:	b920      	cbnz	r0, 8010160 <_Bfree+0x20>
 8010156:	4b09      	ldr	r3, [pc, #36]	; (801017c <_Bfree+0x3c>)
 8010158:	4809      	ldr	r0, [pc, #36]	; (8010180 <_Bfree+0x40>)
 801015a:	218a      	movs	r1, #138	; 0x8a
 801015c:	f7fe ffee 	bl	800f13c <__assert_func>
 8010160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010164:	6006      	str	r6, [r0, #0]
 8010166:	60c6      	str	r6, [r0, #12]
 8010168:	b13c      	cbz	r4, 801017a <_Bfree+0x3a>
 801016a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801016c:	6862      	ldr	r2, [r4, #4]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010174:	6021      	str	r1, [r4, #0]
 8010176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801017a:	bd70      	pop	{r4, r5, r6, pc}
 801017c:	0801ddd2 	.word	0x0801ddd2
 8010180:	0801df5c 	.word	0x0801df5c

08010184 <__multadd>:
 8010184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010188:	690d      	ldr	r5, [r1, #16]
 801018a:	4607      	mov	r7, r0
 801018c:	460c      	mov	r4, r1
 801018e:	461e      	mov	r6, r3
 8010190:	f101 0c14 	add.w	ip, r1, #20
 8010194:	2000      	movs	r0, #0
 8010196:	f8dc 3000 	ldr.w	r3, [ip]
 801019a:	b299      	uxth	r1, r3
 801019c:	fb02 6101 	mla	r1, r2, r1, r6
 80101a0:	0c1e      	lsrs	r6, r3, #16
 80101a2:	0c0b      	lsrs	r3, r1, #16
 80101a4:	fb02 3306 	mla	r3, r2, r6, r3
 80101a8:	b289      	uxth	r1, r1
 80101aa:	3001      	adds	r0, #1
 80101ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80101b0:	4285      	cmp	r5, r0
 80101b2:	f84c 1b04 	str.w	r1, [ip], #4
 80101b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80101ba:	dcec      	bgt.n	8010196 <__multadd+0x12>
 80101bc:	b30e      	cbz	r6, 8010202 <__multadd+0x7e>
 80101be:	68a3      	ldr	r3, [r4, #8]
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	dc19      	bgt.n	80101f8 <__multadd+0x74>
 80101c4:	6861      	ldr	r1, [r4, #4]
 80101c6:	4638      	mov	r0, r7
 80101c8:	3101      	adds	r1, #1
 80101ca:	f7ff ff79 	bl	80100c0 <_Balloc>
 80101ce:	4680      	mov	r8, r0
 80101d0:	b928      	cbnz	r0, 80101de <__multadd+0x5a>
 80101d2:	4602      	mov	r2, r0
 80101d4:	4b0c      	ldr	r3, [pc, #48]	; (8010208 <__multadd+0x84>)
 80101d6:	480d      	ldr	r0, [pc, #52]	; (801020c <__multadd+0x88>)
 80101d8:	21b5      	movs	r1, #181	; 0xb5
 80101da:	f7fe ffaf 	bl	800f13c <__assert_func>
 80101de:	6922      	ldr	r2, [r4, #16]
 80101e0:	3202      	adds	r2, #2
 80101e2:	f104 010c 	add.w	r1, r4, #12
 80101e6:	0092      	lsls	r2, r2, #2
 80101e8:	300c      	adds	r0, #12
 80101ea:	f7fe fa59 	bl	800e6a0 <memcpy>
 80101ee:	4621      	mov	r1, r4
 80101f0:	4638      	mov	r0, r7
 80101f2:	f7ff ffa5 	bl	8010140 <_Bfree>
 80101f6:	4644      	mov	r4, r8
 80101f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80101fc:	3501      	adds	r5, #1
 80101fe:	615e      	str	r6, [r3, #20]
 8010200:	6125      	str	r5, [r4, #16]
 8010202:	4620      	mov	r0, r4
 8010204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010208:	0801dee8 	.word	0x0801dee8
 801020c:	0801df5c 	.word	0x0801df5c

08010210 <__hi0bits>:
 8010210:	0c03      	lsrs	r3, r0, #16
 8010212:	041b      	lsls	r3, r3, #16
 8010214:	b9d3      	cbnz	r3, 801024c <__hi0bits+0x3c>
 8010216:	0400      	lsls	r0, r0, #16
 8010218:	2310      	movs	r3, #16
 801021a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801021e:	bf04      	itt	eq
 8010220:	0200      	lsleq	r0, r0, #8
 8010222:	3308      	addeq	r3, #8
 8010224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010228:	bf04      	itt	eq
 801022a:	0100      	lsleq	r0, r0, #4
 801022c:	3304      	addeq	r3, #4
 801022e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010232:	bf04      	itt	eq
 8010234:	0080      	lsleq	r0, r0, #2
 8010236:	3302      	addeq	r3, #2
 8010238:	2800      	cmp	r0, #0
 801023a:	db05      	blt.n	8010248 <__hi0bits+0x38>
 801023c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010240:	f103 0301 	add.w	r3, r3, #1
 8010244:	bf08      	it	eq
 8010246:	2320      	moveq	r3, #32
 8010248:	4618      	mov	r0, r3
 801024a:	4770      	bx	lr
 801024c:	2300      	movs	r3, #0
 801024e:	e7e4      	b.n	801021a <__hi0bits+0xa>

08010250 <__lo0bits>:
 8010250:	6803      	ldr	r3, [r0, #0]
 8010252:	f013 0207 	ands.w	r2, r3, #7
 8010256:	4601      	mov	r1, r0
 8010258:	d00b      	beq.n	8010272 <__lo0bits+0x22>
 801025a:	07da      	lsls	r2, r3, #31
 801025c:	d423      	bmi.n	80102a6 <__lo0bits+0x56>
 801025e:	0798      	lsls	r0, r3, #30
 8010260:	bf49      	itett	mi
 8010262:	085b      	lsrmi	r3, r3, #1
 8010264:	089b      	lsrpl	r3, r3, #2
 8010266:	2001      	movmi	r0, #1
 8010268:	600b      	strmi	r3, [r1, #0]
 801026a:	bf5c      	itt	pl
 801026c:	600b      	strpl	r3, [r1, #0]
 801026e:	2002      	movpl	r0, #2
 8010270:	4770      	bx	lr
 8010272:	b298      	uxth	r0, r3
 8010274:	b9a8      	cbnz	r0, 80102a2 <__lo0bits+0x52>
 8010276:	0c1b      	lsrs	r3, r3, #16
 8010278:	2010      	movs	r0, #16
 801027a:	b2da      	uxtb	r2, r3
 801027c:	b90a      	cbnz	r2, 8010282 <__lo0bits+0x32>
 801027e:	3008      	adds	r0, #8
 8010280:	0a1b      	lsrs	r3, r3, #8
 8010282:	071a      	lsls	r2, r3, #28
 8010284:	bf04      	itt	eq
 8010286:	091b      	lsreq	r3, r3, #4
 8010288:	3004      	addeq	r0, #4
 801028a:	079a      	lsls	r2, r3, #30
 801028c:	bf04      	itt	eq
 801028e:	089b      	lsreq	r3, r3, #2
 8010290:	3002      	addeq	r0, #2
 8010292:	07da      	lsls	r2, r3, #31
 8010294:	d403      	bmi.n	801029e <__lo0bits+0x4e>
 8010296:	085b      	lsrs	r3, r3, #1
 8010298:	f100 0001 	add.w	r0, r0, #1
 801029c:	d005      	beq.n	80102aa <__lo0bits+0x5a>
 801029e:	600b      	str	r3, [r1, #0]
 80102a0:	4770      	bx	lr
 80102a2:	4610      	mov	r0, r2
 80102a4:	e7e9      	b.n	801027a <__lo0bits+0x2a>
 80102a6:	2000      	movs	r0, #0
 80102a8:	4770      	bx	lr
 80102aa:	2020      	movs	r0, #32
 80102ac:	4770      	bx	lr
	...

080102b0 <__i2b>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	460c      	mov	r4, r1
 80102b4:	2101      	movs	r1, #1
 80102b6:	f7ff ff03 	bl	80100c0 <_Balloc>
 80102ba:	4602      	mov	r2, r0
 80102bc:	b928      	cbnz	r0, 80102ca <__i2b+0x1a>
 80102be:	4b05      	ldr	r3, [pc, #20]	; (80102d4 <__i2b+0x24>)
 80102c0:	4805      	ldr	r0, [pc, #20]	; (80102d8 <__i2b+0x28>)
 80102c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80102c6:	f7fe ff39 	bl	800f13c <__assert_func>
 80102ca:	2301      	movs	r3, #1
 80102cc:	6144      	str	r4, [r0, #20]
 80102ce:	6103      	str	r3, [r0, #16]
 80102d0:	bd10      	pop	{r4, pc}
 80102d2:	bf00      	nop
 80102d4:	0801dee8 	.word	0x0801dee8
 80102d8:	0801df5c 	.word	0x0801df5c

080102dc <__multiply>:
 80102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e0:	4691      	mov	r9, r2
 80102e2:	690a      	ldr	r2, [r1, #16]
 80102e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	bfb8      	it	lt
 80102ec:	460b      	movlt	r3, r1
 80102ee:	460c      	mov	r4, r1
 80102f0:	bfbc      	itt	lt
 80102f2:	464c      	movlt	r4, r9
 80102f4:	4699      	movlt	r9, r3
 80102f6:	6927      	ldr	r7, [r4, #16]
 80102f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80102fc:	68a3      	ldr	r3, [r4, #8]
 80102fe:	6861      	ldr	r1, [r4, #4]
 8010300:	eb07 060a 	add.w	r6, r7, sl
 8010304:	42b3      	cmp	r3, r6
 8010306:	b085      	sub	sp, #20
 8010308:	bfb8      	it	lt
 801030a:	3101      	addlt	r1, #1
 801030c:	f7ff fed8 	bl	80100c0 <_Balloc>
 8010310:	b930      	cbnz	r0, 8010320 <__multiply+0x44>
 8010312:	4602      	mov	r2, r0
 8010314:	4b44      	ldr	r3, [pc, #272]	; (8010428 <__multiply+0x14c>)
 8010316:	4845      	ldr	r0, [pc, #276]	; (801042c <__multiply+0x150>)
 8010318:	f240 115d 	movw	r1, #349	; 0x15d
 801031c:	f7fe ff0e 	bl	800f13c <__assert_func>
 8010320:	f100 0514 	add.w	r5, r0, #20
 8010324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010328:	462b      	mov	r3, r5
 801032a:	2200      	movs	r2, #0
 801032c:	4543      	cmp	r3, r8
 801032e:	d321      	bcc.n	8010374 <__multiply+0x98>
 8010330:	f104 0314 	add.w	r3, r4, #20
 8010334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010338:	f109 0314 	add.w	r3, r9, #20
 801033c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010340:	9202      	str	r2, [sp, #8]
 8010342:	1b3a      	subs	r2, r7, r4
 8010344:	3a15      	subs	r2, #21
 8010346:	f022 0203 	bic.w	r2, r2, #3
 801034a:	3204      	adds	r2, #4
 801034c:	f104 0115 	add.w	r1, r4, #21
 8010350:	428f      	cmp	r7, r1
 8010352:	bf38      	it	cc
 8010354:	2204      	movcc	r2, #4
 8010356:	9201      	str	r2, [sp, #4]
 8010358:	9a02      	ldr	r2, [sp, #8]
 801035a:	9303      	str	r3, [sp, #12]
 801035c:	429a      	cmp	r2, r3
 801035e:	d80c      	bhi.n	801037a <__multiply+0x9e>
 8010360:	2e00      	cmp	r6, #0
 8010362:	dd03      	ble.n	801036c <__multiply+0x90>
 8010364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010368:	2b00      	cmp	r3, #0
 801036a:	d05a      	beq.n	8010422 <__multiply+0x146>
 801036c:	6106      	str	r6, [r0, #16]
 801036e:	b005      	add	sp, #20
 8010370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010374:	f843 2b04 	str.w	r2, [r3], #4
 8010378:	e7d8      	b.n	801032c <__multiply+0x50>
 801037a:	f8b3 a000 	ldrh.w	sl, [r3]
 801037e:	f1ba 0f00 	cmp.w	sl, #0
 8010382:	d024      	beq.n	80103ce <__multiply+0xf2>
 8010384:	f104 0e14 	add.w	lr, r4, #20
 8010388:	46a9      	mov	r9, r5
 801038a:	f04f 0c00 	mov.w	ip, #0
 801038e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010392:	f8d9 1000 	ldr.w	r1, [r9]
 8010396:	fa1f fb82 	uxth.w	fp, r2
 801039a:	b289      	uxth	r1, r1
 801039c:	fb0a 110b 	mla	r1, sl, fp, r1
 80103a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80103a4:	f8d9 2000 	ldr.w	r2, [r9]
 80103a8:	4461      	add	r1, ip
 80103aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80103ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80103b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80103b6:	b289      	uxth	r1, r1
 80103b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80103bc:	4577      	cmp	r7, lr
 80103be:	f849 1b04 	str.w	r1, [r9], #4
 80103c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80103c6:	d8e2      	bhi.n	801038e <__multiply+0xb2>
 80103c8:	9a01      	ldr	r2, [sp, #4]
 80103ca:	f845 c002 	str.w	ip, [r5, r2]
 80103ce:	9a03      	ldr	r2, [sp, #12]
 80103d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80103d4:	3304      	adds	r3, #4
 80103d6:	f1b9 0f00 	cmp.w	r9, #0
 80103da:	d020      	beq.n	801041e <__multiply+0x142>
 80103dc:	6829      	ldr	r1, [r5, #0]
 80103de:	f104 0c14 	add.w	ip, r4, #20
 80103e2:	46ae      	mov	lr, r5
 80103e4:	f04f 0a00 	mov.w	sl, #0
 80103e8:	f8bc b000 	ldrh.w	fp, [ip]
 80103ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80103f0:	fb09 220b 	mla	r2, r9, fp, r2
 80103f4:	4492      	add	sl, r2
 80103f6:	b289      	uxth	r1, r1
 80103f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80103fc:	f84e 1b04 	str.w	r1, [lr], #4
 8010400:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010404:	f8be 1000 	ldrh.w	r1, [lr]
 8010408:	0c12      	lsrs	r2, r2, #16
 801040a:	fb09 1102 	mla	r1, r9, r2, r1
 801040e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010412:	4567      	cmp	r7, ip
 8010414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010418:	d8e6      	bhi.n	80103e8 <__multiply+0x10c>
 801041a:	9a01      	ldr	r2, [sp, #4]
 801041c:	50a9      	str	r1, [r5, r2]
 801041e:	3504      	adds	r5, #4
 8010420:	e79a      	b.n	8010358 <__multiply+0x7c>
 8010422:	3e01      	subs	r6, #1
 8010424:	e79c      	b.n	8010360 <__multiply+0x84>
 8010426:	bf00      	nop
 8010428:	0801dee8 	.word	0x0801dee8
 801042c:	0801df5c 	.word	0x0801df5c

08010430 <__pow5mult>:
 8010430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010434:	4615      	mov	r5, r2
 8010436:	f012 0203 	ands.w	r2, r2, #3
 801043a:	4606      	mov	r6, r0
 801043c:	460f      	mov	r7, r1
 801043e:	d007      	beq.n	8010450 <__pow5mult+0x20>
 8010440:	4c25      	ldr	r4, [pc, #148]	; (80104d8 <__pow5mult+0xa8>)
 8010442:	3a01      	subs	r2, #1
 8010444:	2300      	movs	r3, #0
 8010446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801044a:	f7ff fe9b 	bl	8010184 <__multadd>
 801044e:	4607      	mov	r7, r0
 8010450:	10ad      	asrs	r5, r5, #2
 8010452:	d03d      	beq.n	80104d0 <__pow5mult+0xa0>
 8010454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010456:	b97c      	cbnz	r4, 8010478 <__pow5mult+0x48>
 8010458:	2010      	movs	r0, #16
 801045a:	f7ff fe29 	bl	80100b0 <malloc>
 801045e:	4602      	mov	r2, r0
 8010460:	6270      	str	r0, [r6, #36]	; 0x24
 8010462:	b928      	cbnz	r0, 8010470 <__pow5mult+0x40>
 8010464:	4b1d      	ldr	r3, [pc, #116]	; (80104dc <__pow5mult+0xac>)
 8010466:	481e      	ldr	r0, [pc, #120]	; (80104e0 <__pow5mult+0xb0>)
 8010468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801046c:	f7fe fe66 	bl	800f13c <__assert_func>
 8010470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010474:	6004      	str	r4, [r0, #0]
 8010476:	60c4      	str	r4, [r0, #12]
 8010478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801047c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010480:	b94c      	cbnz	r4, 8010496 <__pow5mult+0x66>
 8010482:	f240 2171 	movw	r1, #625	; 0x271
 8010486:	4630      	mov	r0, r6
 8010488:	f7ff ff12 	bl	80102b0 <__i2b>
 801048c:	2300      	movs	r3, #0
 801048e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010492:	4604      	mov	r4, r0
 8010494:	6003      	str	r3, [r0, #0]
 8010496:	f04f 0900 	mov.w	r9, #0
 801049a:	07eb      	lsls	r3, r5, #31
 801049c:	d50a      	bpl.n	80104b4 <__pow5mult+0x84>
 801049e:	4639      	mov	r1, r7
 80104a0:	4622      	mov	r2, r4
 80104a2:	4630      	mov	r0, r6
 80104a4:	f7ff ff1a 	bl	80102dc <__multiply>
 80104a8:	4639      	mov	r1, r7
 80104aa:	4680      	mov	r8, r0
 80104ac:	4630      	mov	r0, r6
 80104ae:	f7ff fe47 	bl	8010140 <_Bfree>
 80104b2:	4647      	mov	r7, r8
 80104b4:	106d      	asrs	r5, r5, #1
 80104b6:	d00b      	beq.n	80104d0 <__pow5mult+0xa0>
 80104b8:	6820      	ldr	r0, [r4, #0]
 80104ba:	b938      	cbnz	r0, 80104cc <__pow5mult+0x9c>
 80104bc:	4622      	mov	r2, r4
 80104be:	4621      	mov	r1, r4
 80104c0:	4630      	mov	r0, r6
 80104c2:	f7ff ff0b 	bl	80102dc <__multiply>
 80104c6:	6020      	str	r0, [r4, #0]
 80104c8:	f8c0 9000 	str.w	r9, [r0]
 80104cc:	4604      	mov	r4, r0
 80104ce:	e7e4      	b.n	801049a <__pow5mult+0x6a>
 80104d0:	4638      	mov	r0, r7
 80104d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104d6:	bf00      	nop
 80104d8:	0801e0a8 	.word	0x0801e0a8
 80104dc:	0801ddd2 	.word	0x0801ddd2
 80104e0:	0801df5c 	.word	0x0801df5c

080104e4 <__lshift>:
 80104e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104e8:	460c      	mov	r4, r1
 80104ea:	6849      	ldr	r1, [r1, #4]
 80104ec:	6923      	ldr	r3, [r4, #16]
 80104ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80104f2:	68a3      	ldr	r3, [r4, #8]
 80104f4:	4607      	mov	r7, r0
 80104f6:	4691      	mov	r9, r2
 80104f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104fc:	f108 0601 	add.w	r6, r8, #1
 8010500:	42b3      	cmp	r3, r6
 8010502:	db0b      	blt.n	801051c <__lshift+0x38>
 8010504:	4638      	mov	r0, r7
 8010506:	f7ff fddb 	bl	80100c0 <_Balloc>
 801050a:	4605      	mov	r5, r0
 801050c:	b948      	cbnz	r0, 8010522 <__lshift+0x3e>
 801050e:	4602      	mov	r2, r0
 8010510:	4b2a      	ldr	r3, [pc, #168]	; (80105bc <__lshift+0xd8>)
 8010512:	482b      	ldr	r0, [pc, #172]	; (80105c0 <__lshift+0xdc>)
 8010514:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010518:	f7fe fe10 	bl	800f13c <__assert_func>
 801051c:	3101      	adds	r1, #1
 801051e:	005b      	lsls	r3, r3, #1
 8010520:	e7ee      	b.n	8010500 <__lshift+0x1c>
 8010522:	2300      	movs	r3, #0
 8010524:	f100 0114 	add.w	r1, r0, #20
 8010528:	f100 0210 	add.w	r2, r0, #16
 801052c:	4618      	mov	r0, r3
 801052e:	4553      	cmp	r3, sl
 8010530:	db37      	blt.n	80105a2 <__lshift+0xbe>
 8010532:	6920      	ldr	r0, [r4, #16]
 8010534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010538:	f104 0314 	add.w	r3, r4, #20
 801053c:	f019 091f 	ands.w	r9, r9, #31
 8010540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010548:	d02f      	beq.n	80105aa <__lshift+0xc6>
 801054a:	f1c9 0e20 	rsb	lr, r9, #32
 801054e:	468a      	mov	sl, r1
 8010550:	f04f 0c00 	mov.w	ip, #0
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	fa02 f209 	lsl.w	r2, r2, r9
 801055a:	ea42 020c 	orr.w	r2, r2, ip
 801055e:	f84a 2b04 	str.w	r2, [sl], #4
 8010562:	f853 2b04 	ldr.w	r2, [r3], #4
 8010566:	4298      	cmp	r0, r3
 8010568:	fa22 fc0e 	lsr.w	ip, r2, lr
 801056c:	d8f2      	bhi.n	8010554 <__lshift+0x70>
 801056e:	1b03      	subs	r3, r0, r4
 8010570:	3b15      	subs	r3, #21
 8010572:	f023 0303 	bic.w	r3, r3, #3
 8010576:	3304      	adds	r3, #4
 8010578:	f104 0215 	add.w	r2, r4, #21
 801057c:	4290      	cmp	r0, r2
 801057e:	bf38      	it	cc
 8010580:	2304      	movcc	r3, #4
 8010582:	f841 c003 	str.w	ip, [r1, r3]
 8010586:	f1bc 0f00 	cmp.w	ip, #0
 801058a:	d001      	beq.n	8010590 <__lshift+0xac>
 801058c:	f108 0602 	add.w	r6, r8, #2
 8010590:	3e01      	subs	r6, #1
 8010592:	4638      	mov	r0, r7
 8010594:	612e      	str	r6, [r5, #16]
 8010596:	4621      	mov	r1, r4
 8010598:	f7ff fdd2 	bl	8010140 <_Bfree>
 801059c:	4628      	mov	r0, r5
 801059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80105a6:	3301      	adds	r3, #1
 80105a8:	e7c1      	b.n	801052e <__lshift+0x4a>
 80105aa:	3904      	subs	r1, #4
 80105ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80105b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80105b4:	4298      	cmp	r0, r3
 80105b6:	d8f9      	bhi.n	80105ac <__lshift+0xc8>
 80105b8:	e7ea      	b.n	8010590 <__lshift+0xac>
 80105ba:	bf00      	nop
 80105bc:	0801dee8 	.word	0x0801dee8
 80105c0:	0801df5c 	.word	0x0801df5c

080105c4 <__mcmp>:
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	6902      	ldr	r2, [r0, #16]
 80105c8:	690c      	ldr	r4, [r1, #16]
 80105ca:	1b12      	subs	r2, r2, r4
 80105cc:	d10e      	bne.n	80105ec <__mcmp+0x28>
 80105ce:	f100 0314 	add.w	r3, r0, #20
 80105d2:	3114      	adds	r1, #20
 80105d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80105d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80105dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80105e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80105e4:	42a5      	cmp	r5, r4
 80105e6:	d003      	beq.n	80105f0 <__mcmp+0x2c>
 80105e8:	d305      	bcc.n	80105f6 <__mcmp+0x32>
 80105ea:	2201      	movs	r2, #1
 80105ec:	4610      	mov	r0, r2
 80105ee:	bd30      	pop	{r4, r5, pc}
 80105f0:	4283      	cmp	r3, r0
 80105f2:	d3f3      	bcc.n	80105dc <__mcmp+0x18>
 80105f4:	e7fa      	b.n	80105ec <__mcmp+0x28>
 80105f6:	f04f 32ff 	mov.w	r2, #4294967295
 80105fa:	e7f7      	b.n	80105ec <__mcmp+0x28>

080105fc <__mdiff>:
 80105fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010600:	460c      	mov	r4, r1
 8010602:	4606      	mov	r6, r0
 8010604:	4611      	mov	r1, r2
 8010606:	4620      	mov	r0, r4
 8010608:	4690      	mov	r8, r2
 801060a:	f7ff ffdb 	bl	80105c4 <__mcmp>
 801060e:	1e05      	subs	r5, r0, #0
 8010610:	d110      	bne.n	8010634 <__mdiff+0x38>
 8010612:	4629      	mov	r1, r5
 8010614:	4630      	mov	r0, r6
 8010616:	f7ff fd53 	bl	80100c0 <_Balloc>
 801061a:	b930      	cbnz	r0, 801062a <__mdiff+0x2e>
 801061c:	4b3a      	ldr	r3, [pc, #232]	; (8010708 <__mdiff+0x10c>)
 801061e:	4602      	mov	r2, r0
 8010620:	f240 2132 	movw	r1, #562	; 0x232
 8010624:	4839      	ldr	r0, [pc, #228]	; (801070c <__mdiff+0x110>)
 8010626:	f7fe fd89 	bl	800f13c <__assert_func>
 801062a:	2301      	movs	r3, #1
 801062c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010634:	bfa4      	itt	ge
 8010636:	4643      	movge	r3, r8
 8010638:	46a0      	movge	r8, r4
 801063a:	4630      	mov	r0, r6
 801063c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010640:	bfa6      	itte	ge
 8010642:	461c      	movge	r4, r3
 8010644:	2500      	movge	r5, #0
 8010646:	2501      	movlt	r5, #1
 8010648:	f7ff fd3a 	bl	80100c0 <_Balloc>
 801064c:	b920      	cbnz	r0, 8010658 <__mdiff+0x5c>
 801064e:	4b2e      	ldr	r3, [pc, #184]	; (8010708 <__mdiff+0x10c>)
 8010650:	4602      	mov	r2, r0
 8010652:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010656:	e7e5      	b.n	8010624 <__mdiff+0x28>
 8010658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801065c:	6926      	ldr	r6, [r4, #16]
 801065e:	60c5      	str	r5, [r0, #12]
 8010660:	f104 0914 	add.w	r9, r4, #20
 8010664:	f108 0514 	add.w	r5, r8, #20
 8010668:	f100 0e14 	add.w	lr, r0, #20
 801066c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010674:	f108 0210 	add.w	r2, r8, #16
 8010678:	46f2      	mov	sl, lr
 801067a:	2100      	movs	r1, #0
 801067c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010684:	fa1f f883 	uxth.w	r8, r3
 8010688:	fa11 f18b 	uxtah	r1, r1, fp
 801068c:	0c1b      	lsrs	r3, r3, #16
 801068e:	eba1 0808 	sub.w	r8, r1, r8
 8010692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010696:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801069a:	fa1f f888 	uxth.w	r8, r8
 801069e:	1419      	asrs	r1, r3, #16
 80106a0:	454e      	cmp	r6, r9
 80106a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80106a6:	f84a 3b04 	str.w	r3, [sl], #4
 80106aa:	d8e7      	bhi.n	801067c <__mdiff+0x80>
 80106ac:	1b33      	subs	r3, r6, r4
 80106ae:	3b15      	subs	r3, #21
 80106b0:	f023 0303 	bic.w	r3, r3, #3
 80106b4:	3304      	adds	r3, #4
 80106b6:	3415      	adds	r4, #21
 80106b8:	42a6      	cmp	r6, r4
 80106ba:	bf38      	it	cc
 80106bc:	2304      	movcc	r3, #4
 80106be:	441d      	add	r5, r3
 80106c0:	4473      	add	r3, lr
 80106c2:	469e      	mov	lr, r3
 80106c4:	462e      	mov	r6, r5
 80106c6:	4566      	cmp	r6, ip
 80106c8:	d30e      	bcc.n	80106e8 <__mdiff+0xec>
 80106ca:	f10c 0203 	add.w	r2, ip, #3
 80106ce:	1b52      	subs	r2, r2, r5
 80106d0:	f022 0203 	bic.w	r2, r2, #3
 80106d4:	3d03      	subs	r5, #3
 80106d6:	45ac      	cmp	ip, r5
 80106d8:	bf38      	it	cc
 80106da:	2200      	movcc	r2, #0
 80106dc:	441a      	add	r2, r3
 80106de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80106e2:	b17b      	cbz	r3, 8010704 <__mdiff+0x108>
 80106e4:	6107      	str	r7, [r0, #16]
 80106e6:	e7a3      	b.n	8010630 <__mdiff+0x34>
 80106e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80106ec:	fa11 f288 	uxtah	r2, r1, r8
 80106f0:	1414      	asrs	r4, r2, #16
 80106f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80106f6:	b292      	uxth	r2, r2
 80106f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80106fc:	f84e 2b04 	str.w	r2, [lr], #4
 8010700:	1421      	asrs	r1, r4, #16
 8010702:	e7e0      	b.n	80106c6 <__mdiff+0xca>
 8010704:	3f01      	subs	r7, #1
 8010706:	e7ea      	b.n	80106de <__mdiff+0xe2>
 8010708:	0801dee8 	.word	0x0801dee8
 801070c:	0801df5c 	.word	0x0801df5c

08010710 <__d2b>:
 8010710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010714:	4689      	mov	r9, r1
 8010716:	2101      	movs	r1, #1
 8010718:	ec57 6b10 	vmov	r6, r7, d0
 801071c:	4690      	mov	r8, r2
 801071e:	f7ff fccf 	bl	80100c0 <_Balloc>
 8010722:	4604      	mov	r4, r0
 8010724:	b930      	cbnz	r0, 8010734 <__d2b+0x24>
 8010726:	4602      	mov	r2, r0
 8010728:	4b25      	ldr	r3, [pc, #148]	; (80107c0 <__d2b+0xb0>)
 801072a:	4826      	ldr	r0, [pc, #152]	; (80107c4 <__d2b+0xb4>)
 801072c:	f240 310a 	movw	r1, #778	; 0x30a
 8010730:	f7fe fd04 	bl	800f13c <__assert_func>
 8010734:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801073c:	bb35      	cbnz	r5, 801078c <__d2b+0x7c>
 801073e:	2e00      	cmp	r6, #0
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	d028      	beq.n	8010796 <__d2b+0x86>
 8010744:	4668      	mov	r0, sp
 8010746:	9600      	str	r6, [sp, #0]
 8010748:	f7ff fd82 	bl	8010250 <__lo0bits>
 801074c:	9900      	ldr	r1, [sp, #0]
 801074e:	b300      	cbz	r0, 8010792 <__d2b+0x82>
 8010750:	9a01      	ldr	r2, [sp, #4]
 8010752:	f1c0 0320 	rsb	r3, r0, #32
 8010756:	fa02 f303 	lsl.w	r3, r2, r3
 801075a:	430b      	orrs	r3, r1
 801075c:	40c2      	lsrs	r2, r0
 801075e:	6163      	str	r3, [r4, #20]
 8010760:	9201      	str	r2, [sp, #4]
 8010762:	9b01      	ldr	r3, [sp, #4]
 8010764:	61a3      	str	r3, [r4, #24]
 8010766:	2b00      	cmp	r3, #0
 8010768:	bf14      	ite	ne
 801076a:	2202      	movne	r2, #2
 801076c:	2201      	moveq	r2, #1
 801076e:	6122      	str	r2, [r4, #16]
 8010770:	b1d5      	cbz	r5, 80107a8 <__d2b+0x98>
 8010772:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010776:	4405      	add	r5, r0
 8010778:	f8c9 5000 	str.w	r5, [r9]
 801077c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010780:	f8c8 0000 	str.w	r0, [r8]
 8010784:	4620      	mov	r0, r4
 8010786:	b003      	add	sp, #12
 8010788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801078c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010790:	e7d5      	b.n	801073e <__d2b+0x2e>
 8010792:	6161      	str	r1, [r4, #20]
 8010794:	e7e5      	b.n	8010762 <__d2b+0x52>
 8010796:	a801      	add	r0, sp, #4
 8010798:	f7ff fd5a 	bl	8010250 <__lo0bits>
 801079c:	9b01      	ldr	r3, [sp, #4]
 801079e:	6163      	str	r3, [r4, #20]
 80107a0:	2201      	movs	r2, #1
 80107a2:	6122      	str	r2, [r4, #16]
 80107a4:	3020      	adds	r0, #32
 80107a6:	e7e3      	b.n	8010770 <__d2b+0x60>
 80107a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80107ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80107b0:	f8c9 0000 	str.w	r0, [r9]
 80107b4:	6918      	ldr	r0, [r3, #16]
 80107b6:	f7ff fd2b 	bl	8010210 <__hi0bits>
 80107ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80107be:	e7df      	b.n	8010780 <__d2b+0x70>
 80107c0:	0801dee8 	.word	0x0801dee8
 80107c4:	0801df5c 	.word	0x0801df5c

080107c8 <_calloc_r>:
 80107c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107ca:	fba1 2402 	umull	r2, r4, r1, r2
 80107ce:	b94c      	cbnz	r4, 80107e4 <_calloc_r+0x1c>
 80107d0:	4611      	mov	r1, r2
 80107d2:	9201      	str	r2, [sp, #4]
 80107d4:	f000 f87a 	bl	80108cc <_malloc_r>
 80107d8:	9a01      	ldr	r2, [sp, #4]
 80107da:	4605      	mov	r5, r0
 80107dc:	b930      	cbnz	r0, 80107ec <_calloc_r+0x24>
 80107de:	4628      	mov	r0, r5
 80107e0:	b003      	add	sp, #12
 80107e2:	bd30      	pop	{r4, r5, pc}
 80107e4:	220c      	movs	r2, #12
 80107e6:	6002      	str	r2, [r0, #0]
 80107e8:	2500      	movs	r5, #0
 80107ea:	e7f8      	b.n	80107de <_calloc_r+0x16>
 80107ec:	4621      	mov	r1, r4
 80107ee:	f7fd ff7f 	bl	800e6f0 <memset>
 80107f2:	e7f4      	b.n	80107de <_calloc_r+0x16>

080107f4 <_free_r>:
 80107f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107f6:	2900      	cmp	r1, #0
 80107f8:	d044      	beq.n	8010884 <_free_r+0x90>
 80107fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107fe:	9001      	str	r0, [sp, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	f1a1 0404 	sub.w	r4, r1, #4
 8010806:	bfb8      	it	lt
 8010808:	18e4      	addlt	r4, r4, r3
 801080a:	f000 fe13 	bl	8011434 <__malloc_lock>
 801080e:	4a1e      	ldr	r2, [pc, #120]	; (8010888 <_free_r+0x94>)
 8010810:	9801      	ldr	r0, [sp, #4]
 8010812:	6813      	ldr	r3, [r2, #0]
 8010814:	b933      	cbnz	r3, 8010824 <_free_r+0x30>
 8010816:	6063      	str	r3, [r4, #4]
 8010818:	6014      	str	r4, [r2, #0]
 801081a:	b003      	add	sp, #12
 801081c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010820:	f000 be0e 	b.w	8011440 <__malloc_unlock>
 8010824:	42a3      	cmp	r3, r4
 8010826:	d908      	bls.n	801083a <_free_r+0x46>
 8010828:	6825      	ldr	r5, [r4, #0]
 801082a:	1961      	adds	r1, r4, r5
 801082c:	428b      	cmp	r3, r1
 801082e:	bf01      	itttt	eq
 8010830:	6819      	ldreq	r1, [r3, #0]
 8010832:	685b      	ldreq	r3, [r3, #4]
 8010834:	1949      	addeq	r1, r1, r5
 8010836:	6021      	streq	r1, [r4, #0]
 8010838:	e7ed      	b.n	8010816 <_free_r+0x22>
 801083a:	461a      	mov	r2, r3
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	b10b      	cbz	r3, 8010844 <_free_r+0x50>
 8010840:	42a3      	cmp	r3, r4
 8010842:	d9fa      	bls.n	801083a <_free_r+0x46>
 8010844:	6811      	ldr	r1, [r2, #0]
 8010846:	1855      	adds	r5, r2, r1
 8010848:	42a5      	cmp	r5, r4
 801084a:	d10b      	bne.n	8010864 <_free_r+0x70>
 801084c:	6824      	ldr	r4, [r4, #0]
 801084e:	4421      	add	r1, r4
 8010850:	1854      	adds	r4, r2, r1
 8010852:	42a3      	cmp	r3, r4
 8010854:	6011      	str	r1, [r2, #0]
 8010856:	d1e0      	bne.n	801081a <_free_r+0x26>
 8010858:	681c      	ldr	r4, [r3, #0]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	6053      	str	r3, [r2, #4]
 801085e:	4421      	add	r1, r4
 8010860:	6011      	str	r1, [r2, #0]
 8010862:	e7da      	b.n	801081a <_free_r+0x26>
 8010864:	d902      	bls.n	801086c <_free_r+0x78>
 8010866:	230c      	movs	r3, #12
 8010868:	6003      	str	r3, [r0, #0]
 801086a:	e7d6      	b.n	801081a <_free_r+0x26>
 801086c:	6825      	ldr	r5, [r4, #0]
 801086e:	1961      	adds	r1, r4, r5
 8010870:	428b      	cmp	r3, r1
 8010872:	bf04      	itt	eq
 8010874:	6819      	ldreq	r1, [r3, #0]
 8010876:	685b      	ldreq	r3, [r3, #4]
 8010878:	6063      	str	r3, [r4, #4]
 801087a:	bf04      	itt	eq
 801087c:	1949      	addeq	r1, r1, r5
 801087e:	6021      	streq	r1, [r4, #0]
 8010880:	6054      	str	r4, [r2, #4]
 8010882:	e7ca      	b.n	801081a <_free_r+0x26>
 8010884:	b003      	add	sp, #12
 8010886:	bd30      	pop	{r4, r5, pc}
 8010888:	2000d0d0 	.word	0x2000d0d0

0801088c <sbrk_aligned>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	4e0e      	ldr	r6, [pc, #56]	; (80108c8 <sbrk_aligned+0x3c>)
 8010890:	460c      	mov	r4, r1
 8010892:	6831      	ldr	r1, [r6, #0]
 8010894:	4605      	mov	r5, r0
 8010896:	b911      	cbnz	r1, 801089e <sbrk_aligned+0x12>
 8010898:	f000 fb42 	bl	8010f20 <_sbrk_r>
 801089c:	6030      	str	r0, [r6, #0]
 801089e:	4621      	mov	r1, r4
 80108a0:	4628      	mov	r0, r5
 80108a2:	f000 fb3d 	bl	8010f20 <_sbrk_r>
 80108a6:	1c43      	adds	r3, r0, #1
 80108a8:	d00a      	beq.n	80108c0 <sbrk_aligned+0x34>
 80108aa:	1cc4      	adds	r4, r0, #3
 80108ac:	f024 0403 	bic.w	r4, r4, #3
 80108b0:	42a0      	cmp	r0, r4
 80108b2:	d007      	beq.n	80108c4 <sbrk_aligned+0x38>
 80108b4:	1a21      	subs	r1, r4, r0
 80108b6:	4628      	mov	r0, r5
 80108b8:	f000 fb32 	bl	8010f20 <_sbrk_r>
 80108bc:	3001      	adds	r0, #1
 80108be:	d101      	bne.n	80108c4 <sbrk_aligned+0x38>
 80108c0:	f04f 34ff 	mov.w	r4, #4294967295
 80108c4:	4620      	mov	r0, r4
 80108c6:	bd70      	pop	{r4, r5, r6, pc}
 80108c8:	2000d0d4 	.word	0x2000d0d4

080108cc <_malloc_r>:
 80108cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108d0:	1ccd      	adds	r5, r1, #3
 80108d2:	f025 0503 	bic.w	r5, r5, #3
 80108d6:	3508      	adds	r5, #8
 80108d8:	2d0c      	cmp	r5, #12
 80108da:	bf38      	it	cc
 80108dc:	250c      	movcc	r5, #12
 80108de:	2d00      	cmp	r5, #0
 80108e0:	4607      	mov	r7, r0
 80108e2:	db01      	blt.n	80108e8 <_malloc_r+0x1c>
 80108e4:	42a9      	cmp	r1, r5
 80108e6:	d905      	bls.n	80108f4 <_malloc_r+0x28>
 80108e8:	230c      	movs	r3, #12
 80108ea:	603b      	str	r3, [r7, #0]
 80108ec:	2600      	movs	r6, #0
 80108ee:	4630      	mov	r0, r6
 80108f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108f4:	4e2e      	ldr	r6, [pc, #184]	; (80109b0 <_malloc_r+0xe4>)
 80108f6:	f000 fd9d 	bl	8011434 <__malloc_lock>
 80108fa:	6833      	ldr	r3, [r6, #0]
 80108fc:	461c      	mov	r4, r3
 80108fe:	bb34      	cbnz	r4, 801094e <_malloc_r+0x82>
 8010900:	4629      	mov	r1, r5
 8010902:	4638      	mov	r0, r7
 8010904:	f7ff ffc2 	bl	801088c <sbrk_aligned>
 8010908:	1c43      	adds	r3, r0, #1
 801090a:	4604      	mov	r4, r0
 801090c:	d14d      	bne.n	80109aa <_malloc_r+0xde>
 801090e:	6834      	ldr	r4, [r6, #0]
 8010910:	4626      	mov	r6, r4
 8010912:	2e00      	cmp	r6, #0
 8010914:	d140      	bne.n	8010998 <_malloc_r+0xcc>
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	4631      	mov	r1, r6
 801091a:	4638      	mov	r0, r7
 801091c:	eb04 0803 	add.w	r8, r4, r3
 8010920:	f000 fafe 	bl	8010f20 <_sbrk_r>
 8010924:	4580      	cmp	r8, r0
 8010926:	d13a      	bne.n	801099e <_malloc_r+0xd2>
 8010928:	6821      	ldr	r1, [r4, #0]
 801092a:	3503      	adds	r5, #3
 801092c:	1a6d      	subs	r5, r5, r1
 801092e:	f025 0503 	bic.w	r5, r5, #3
 8010932:	3508      	adds	r5, #8
 8010934:	2d0c      	cmp	r5, #12
 8010936:	bf38      	it	cc
 8010938:	250c      	movcc	r5, #12
 801093a:	4629      	mov	r1, r5
 801093c:	4638      	mov	r0, r7
 801093e:	f7ff ffa5 	bl	801088c <sbrk_aligned>
 8010942:	3001      	adds	r0, #1
 8010944:	d02b      	beq.n	801099e <_malloc_r+0xd2>
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	442b      	add	r3, r5
 801094a:	6023      	str	r3, [r4, #0]
 801094c:	e00e      	b.n	801096c <_malloc_r+0xa0>
 801094e:	6822      	ldr	r2, [r4, #0]
 8010950:	1b52      	subs	r2, r2, r5
 8010952:	d41e      	bmi.n	8010992 <_malloc_r+0xc6>
 8010954:	2a0b      	cmp	r2, #11
 8010956:	d916      	bls.n	8010986 <_malloc_r+0xba>
 8010958:	1961      	adds	r1, r4, r5
 801095a:	42a3      	cmp	r3, r4
 801095c:	6025      	str	r5, [r4, #0]
 801095e:	bf18      	it	ne
 8010960:	6059      	strne	r1, [r3, #4]
 8010962:	6863      	ldr	r3, [r4, #4]
 8010964:	bf08      	it	eq
 8010966:	6031      	streq	r1, [r6, #0]
 8010968:	5162      	str	r2, [r4, r5]
 801096a:	604b      	str	r3, [r1, #4]
 801096c:	4638      	mov	r0, r7
 801096e:	f104 060b 	add.w	r6, r4, #11
 8010972:	f000 fd65 	bl	8011440 <__malloc_unlock>
 8010976:	f026 0607 	bic.w	r6, r6, #7
 801097a:	1d23      	adds	r3, r4, #4
 801097c:	1af2      	subs	r2, r6, r3
 801097e:	d0b6      	beq.n	80108ee <_malloc_r+0x22>
 8010980:	1b9b      	subs	r3, r3, r6
 8010982:	50a3      	str	r3, [r4, r2]
 8010984:	e7b3      	b.n	80108ee <_malloc_r+0x22>
 8010986:	6862      	ldr	r2, [r4, #4]
 8010988:	42a3      	cmp	r3, r4
 801098a:	bf0c      	ite	eq
 801098c:	6032      	streq	r2, [r6, #0]
 801098e:	605a      	strne	r2, [r3, #4]
 8010990:	e7ec      	b.n	801096c <_malloc_r+0xa0>
 8010992:	4623      	mov	r3, r4
 8010994:	6864      	ldr	r4, [r4, #4]
 8010996:	e7b2      	b.n	80108fe <_malloc_r+0x32>
 8010998:	4634      	mov	r4, r6
 801099a:	6876      	ldr	r6, [r6, #4]
 801099c:	e7b9      	b.n	8010912 <_malloc_r+0x46>
 801099e:	230c      	movs	r3, #12
 80109a0:	603b      	str	r3, [r7, #0]
 80109a2:	4638      	mov	r0, r7
 80109a4:	f000 fd4c 	bl	8011440 <__malloc_unlock>
 80109a8:	e7a1      	b.n	80108ee <_malloc_r+0x22>
 80109aa:	6025      	str	r5, [r4, #0]
 80109ac:	e7de      	b.n	801096c <_malloc_r+0xa0>
 80109ae:	bf00      	nop
 80109b0:	2000d0d0 	.word	0x2000d0d0

080109b4 <__ssputs_r>:
 80109b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b8:	688e      	ldr	r6, [r1, #8]
 80109ba:	429e      	cmp	r6, r3
 80109bc:	4682      	mov	sl, r0
 80109be:	460c      	mov	r4, r1
 80109c0:	4690      	mov	r8, r2
 80109c2:	461f      	mov	r7, r3
 80109c4:	d838      	bhi.n	8010a38 <__ssputs_r+0x84>
 80109c6:	898a      	ldrh	r2, [r1, #12]
 80109c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109cc:	d032      	beq.n	8010a34 <__ssputs_r+0x80>
 80109ce:	6825      	ldr	r5, [r4, #0]
 80109d0:	6909      	ldr	r1, [r1, #16]
 80109d2:	eba5 0901 	sub.w	r9, r5, r1
 80109d6:	6965      	ldr	r5, [r4, #20]
 80109d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109e0:	3301      	adds	r3, #1
 80109e2:	444b      	add	r3, r9
 80109e4:	106d      	asrs	r5, r5, #1
 80109e6:	429d      	cmp	r5, r3
 80109e8:	bf38      	it	cc
 80109ea:	461d      	movcc	r5, r3
 80109ec:	0553      	lsls	r3, r2, #21
 80109ee:	d531      	bpl.n	8010a54 <__ssputs_r+0xa0>
 80109f0:	4629      	mov	r1, r5
 80109f2:	f7ff ff6b 	bl	80108cc <_malloc_r>
 80109f6:	4606      	mov	r6, r0
 80109f8:	b950      	cbnz	r0, 8010a10 <__ssputs_r+0x5c>
 80109fa:	230c      	movs	r3, #12
 80109fc:	f8ca 3000 	str.w	r3, [sl]
 8010a00:	89a3      	ldrh	r3, [r4, #12]
 8010a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a06:	81a3      	strh	r3, [r4, #12]
 8010a08:	f04f 30ff 	mov.w	r0, #4294967295
 8010a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a10:	6921      	ldr	r1, [r4, #16]
 8010a12:	464a      	mov	r2, r9
 8010a14:	f7fd fe44 	bl	800e6a0 <memcpy>
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a22:	81a3      	strh	r3, [r4, #12]
 8010a24:	6126      	str	r6, [r4, #16]
 8010a26:	6165      	str	r5, [r4, #20]
 8010a28:	444e      	add	r6, r9
 8010a2a:	eba5 0509 	sub.w	r5, r5, r9
 8010a2e:	6026      	str	r6, [r4, #0]
 8010a30:	60a5      	str	r5, [r4, #8]
 8010a32:	463e      	mov	r6, r7
 8010a34:	42be      	cmp	r6, r7
 8010a36:	d900      	bls.n	8010a3a <__ssputs_r+0x86>
 8010a38:	463e      	mov	r6, r7
 8010a3a:	6820      	ldr	r0, [r4, #0]
 8010a3c:	4632      	mov	r2, r6
 8010a3e:	4641      	mov	r1, r8
 8010a40:	f7fd fe3c 	bl	800e6bc <memmove>
 8010a44:	68a3      	ldr	r3, [r4, #8]
 8010a46:	1b9b      	subs	r3, r3, r6
 8010a48:	60a3      	str	r3, [r4, #8]
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	4433      	add	r3, r6
 8010a4e:	6023      	str	r3, [r4, #0]
 8010a50:	2000      	movs	r0, #0
 8010a52:	e7db      	b.n	8010a0c <__ssputs_r+0x58>
 8010a54:	462a      	mov	r2, r5
 8010a56:	f000 fcf9 	bl	801144c <_realloc_r>
 8010a5a:	4606      	mov	r6, r0
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d1e1      	bne.n	8010a24 <__ssputs_r+0x70>
 8010a60:	6921      	ldr	r1, [r4, #16]
 8010a62:	4650      	mov	r0, sl
 8010a64:	f7ff fec6 	bl	80107f4 <_free_r>
 8010a68:	e7c7      	b.n	80109fa <__ssputs_r+0x46>
	...

08010a6c <_svfiprintf_r>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	4698      	mov	r8, r3
 8010a72:	898b      	ldrh	r3, [r1, #12]
 8010a74:	061b      	lsls	r3, r3, #24
 8010a76:	b09d      	sub	sp, #116	; 0x74
 8010a78:	4607      	mov	r7, r0
 8010a7a:	460d      	mov	r5, r1
 8010a7c:	4614      	mov	r4, r2
 8010a7e:	d50e      	bpl.n	8010a9e <_svfiprintf_r+0x32>
 8010a80:	690b      	ldr	r3, [r1, #16]
 8010a82:	b963      	cbnz	r3, 8010a9e <_svfiprintf_r+0x32>
 8010a84:	2140      	movs	r1, #64	; 0x40
 8010a86:	f7ff ff21 	bl	80108cc <_malloc_r>
 8010a8a:	6028      	str	r0, [r5, #0]
 8010a8c:	6128      	str	r0, [r5, #16]
 8010a8e:	b920      	cbnz	r0, 8010a9a <_svfiprintf_r+0x2e>
 8010a90:	230c      	movs	r3, #12
 8010a92:	603b      	str	r3, [r7, #0]
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295
 8010a98:	e0d1      	b.n	8010c3e <_svfiprintf_r+0x1d2>
 8010a9a:	2340      	movs	r3, #64	; 0x40
 8010a9c:	616b      	str	r3, [r5, #20]
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8010aa2:	2320      	movs	r3, #32
 8010aa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aac:	2330      	movs	r3, #48	; 0x30
 8010aae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010c58 <_svfiprintf_r+0x1ec>
 8010ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ab6:	f04f 0901 	mov.w	r9, #1
 8010aba:	4623      	mov	r3, r4
 8010abc:	469a      	mov	sl, r3
 8010abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ac2:	b10a      	cbz	r2, 8010ac8 <_svfiprintf_r+0x5c>
 8010ac4:	2a25      	cmp	r2, #37	; 0x25
 8010ac6:	d1f9      	bne.n	8010abc <_svfiprintf_r+0x50>
 8010ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8010acc:	d00b      	beq.n	8010ae6 <_svfiprintf_r+0x7a>
 8010ace:	465b      	mov	r3, fp
 8010ad0:	4622      	mov	r2, r4
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	f7ff ff6d 	bl	80109b4 <__ssputs_r>
 8010ada:	3001      	adds	r0, #1
 8010adc:	f000 80aa 	beq.w	8010c34 <_svfiprintf_r+0x1c8>
 8010ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ae2:	445a      	add	r2, fp
 8010ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f000 80a2 	beq.w	8010c34 <_svfiprintf_r+0x1c8>
 8010af0:	2300      	movs	r3, #0
 8010af2:	f04f 32ff 	mov.w	r2, #4294967295
 8010af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010afa:	f10a 0a01 	add.w	sl, sl, #1
 8010afe:	9304      	str	r3, [sp, #16]
 8010b00:	9307      	str	r3, [sp, #28]
 8010b02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b06:	931a      	str	r3, [sp, #104]	; 0x68
 8010b08:	4654      	mov	r4, sl
 8010b0a:	2205      	movs	r2, #5
 8010b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b10:	4851      	ldr	r0, [pc, #324]	; (8010c58 <_svfiprintf_r+0x1ec>)
 8010b12:	f7ef fb95 	bl	8000240 <memchr>
 8010b16:	9a04      	ldr	r2, [sp, #16]
 8010b18:	b9d8      	cbnz	r0, 8010b52 <_svfiprintf_r+0xe6>
 8010b1a:	06d0      	lsls	r0, r2, #27
 8010b1c:	bf44      	itt	mi
 8010b1e:	2320      	movmi	r3, #32
 8010b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b24:	0711      	lsls	r1, r2, #28
 8010b26:	bf44      	itt	mi
 8010b28:	232b      	movmi	r3, #43	; 0x2b
 8010b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b32:	2b2a      	cmp	r3, #42	; 0x2a
 8010b34:	d015      	beq.n	8010b62 <_svfiprintf_r+0xf6>
 8010b36:	9a07      	ldr	r2, [sp, #28]
 8010b38:	4654      	mov	r4, sl
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	f04f 0c0a 	mov.w	ip, #10
 8010b40:	4621      	mov	r1, r4
 8010b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b46:	3b30      	subs	r3, #48	; 0x30
 8010b48:	2b09      	cmp	r3, #9
 8010b4a:	d94e      	bls.n	8010bea <_svfiprintf_r+0x17e>
 8010b4c:	b1b0      	cbz	r0, 8010b7c <_svfiprintf_r+0x110>
 8010b4e:	9207      	str	r2, [sp, #28]
 8010b50:	e014      	b.n	8010b7c <_svfiprintf_r+0x110>
 8010b52:	eba0 0308 	sub.w	r3, r0, r8
 8010b56:	fa09 f303 	lsl.w	r3, r9, r3
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	9304      	str	r3, [sp, #16]
 8010b5e:	46a2      	mov	sl, r4
 8010b60:	e7d2      	b.n	8010b08 <_svfiprintf_r+0x9c>
 8010b62:	9b03      	ldr	r3, [sp, #12]
 8010b64:	1d19      	adds	r1, r3, #4
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	9103      	str	r1, [sp, #12]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	bfbb      	ittet	lt
 8010b6e:	425b      	neglt	r3, r3
 8010b70:	f042 0202 	orrlt.w	r2, r2, #2
 8010b74:	9307      	strge	r3, [sp, #28]
 8010b76:	9307      	strlt	r3, [sp, #28]
 8010b78:	bfb8      	it	lt
 8010b7a:	9204      	strlt	r2, [sp, #16]
 8010b7c:	7823      	ldrb	r3, [r4, #0]
 8010b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8010b80:	d10c      	bne.n	8010b9c <_svfiprintf_r+0x130>
 8010b82:	7863      	ldrb	r3, [r4, #1]
 8010b84:	2b2a      	cmp	r3, #42	; 0x2a
 8010b86:	d135      	bne.n	8010bf4 <_svfiprintf_r+0x188>
 8010b88:	9b03      	ldr	r3, [sp, #12]
 8010b8a:	1d1a      	adds	r2, r3, #4
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	9203      	str	r2, [sp, #12]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	bfb8      	it	lt
 8010b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b98:	3402      	adds	r4, #2
 8010b9a:	9305      	str	r3, [sp, #20]
 8010b9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010c68 <_svfiprintf_r+0x1fc>
 8010ba0:	7821      	ldrb	r1, [r4, #0]
 8010ba2:	2203      	movs	r2, #3
 8010ba4:	4650      	mov	r0, sl
 8010ba6:	f7ef fb4b 	bl	8000240 <memchr>
 8010baa:	b140      	cbz	r0, 8010bbe <_svfiprintf_r+0x152>
 8010bac:	2340      	movs	r3, #64	; 0x40
 8010bae:	eba0 000a 	sub.w	r0, r0, sl
 8010bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	4303      	orrs	r3, r0
 8010bba:	3401      	adds	r4, #1
 8010bbc:	9304      	str	r3, [sp, #16]
 8010bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc2:	4826      	ldr	r0, [pc, #152]	; (8010c5c <_svfiprintf_r+0x1f0>)
 8010bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bc8:	2206      	movs	r2, #6
 8010bca:	f7ef fb39 	bl	8000240 <memchr>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d038      	beq.n	8010c44 <_svfiprintf_r+0x1d8>
 8010bd2:	4b23      	ldr	r3, [pc, #140]	; (8010c60 <_svfiprintf_r+0x1f4>)
 8010bd4:	bb1b      	cbnz	r3, 8010c1e <_svfiprintf_r+0x1b2>
 8010bd6:	9b03      	ldr	r3, [sp, #12]
 8010bd8:	3307      	adds	r3, #7
 8010bda:	f023 0307 	bic.w	r3, r3, #7
 8010bde:	3308      	adds	r3, #8
 8010be0:	9303      	str	r3, [sp, #12]
 8010be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be4:	4433      	add	r3, r6
 8010be6:	9309      	str	r3, [sp, #36]	; 0x24
 8010be8:	e767      	b.n	8010aba <_svfiprintf_r+0x4e>
 8010bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bee:	460c      	mov	r4, r1
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	e7a5      	b.n	8010b40 <_svfiprintf_r+0xd4>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	3401      	adds	r4, #1
 8010bf8:	9305      	str	r3, [sp, #20]
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	f04f 0c0a 	mov.w	ip, #10
 8010c00:	4620      	mov	r0, r4
 8010c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c06:	3a30      	subs	r2, #48	; 0x30
 8010c08:	2a09      	cmp	r2, #9
 8010c0a:	d903      	bls.n	8010c14 <_svfiprintf_r+0x1a8>
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d0c5      	beq.n	8010b9c <_svfiprintf_r+0x130>
 8010c10:	9105      	str	r1, [sp, #20]
 8010c12:	e7c3      	b.n	8010b9c <_svfiprintf_r+0x130>
 8010c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c18:	4604      	mov	r4, r0
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	e7f0      	b.n	8010c00 <_svfiprintf_r+0x194>
 8010c1e:	ab03      	add	r3, sp, #12
 8010c20:	9300      	str	r3, [sp, #0]
 8010c22:	462a      	mov	r2, r5
 8010c24:	4b0f      	ldr	r3, [pc, #60]	; (8010c64 <_svfiprintf_r+0x1f8>)
 8010c26:	a904      	add	r1, sp, #16
 8010c28:	4638      	mov	r0, r7
 8010c2a:	f7fd fe09 	bl	800e840 <_printf_float>
 8010c2e:	1c42      	adds	r2, r0, #1
 8010c30:	4606      	mov	r6, r0
 8010c32:	d1d6      	bne.n	8010be2 <_svfiprintf_r+0x176>
 8010c34:	89ab      	ldrh	r3, [r5, #12]
 8010c36:	065b      	lsls	r3, r3, #25
 8010c38:	f53f af2c 	bmi.w	8010a94 <_svfiprintf_r+0x28>
 8010c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c3e:	b01d      	add	sp, #116	; 0x74
 8010c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c44:	ab03      	add	r3, sp, #12
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	462a      	mov	r2, r5
 8010c4a:	4b06      	ldr	r3, [pc, #24]	; (8010c64 <_svfiprintf_r+0x1f8>)
 8010c4c:	a904      	add	r1, sp, #16
 8010c4e:	4638      	mov	r0, r7
 8010c50:	f7fe f89a 	bl	800ed88 <_printf_i>
 8010c54:	e7eb      	b.n	8010c2e <_svfiprintf_r+0x1c2>
 8010c56:	bf00      	nop
 8010c58:	0801e0b4 	.word	0x0801e0b4
 8010c5c:	0801e0be 	.word	0x0801e0be
 8010c60:	0800e841 	.word	0x0800e841
 8010c64:	080109b5 	.word	0x080109b5
 8010c68:	0801e0ba 	.word	0x0801e0ba

08010c6c <__sfputc_r>:
 8010c6c:	6893      	ldr	r3, [r2, #8]
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	b410      	push	{r4}
 8010c74:	6093      	str	r3, [r2, #8]
 8010c76:	da08      	bge.n	8010c8a <__sfputc_r+0x1e>
 8010c78:	6994      	ldr	r4, [r2, #24]
 8010c7a:	42a3      	cmp	r3, r4
 8010c7c:	db01      	blt.n	8010c82 <__sfputc_r+0x16>
 8010c7e:	290a      	cmp	r1, #10
 8010c80:	d103      	bne.n	8010c8a <__sfputc_r+0x1e>
 8010c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c86:	f000 b99f 	b.w	8010fc8 <__swbuf_r>
 8010c8a:	6813      	ldr	r3, [r2, #0]
 8010c8c:	1c58      	adds	r0, r3, #1
 8010c8e:	6010      	str	r0, [r2, #0]
 8010c90:	7019      	strb	r1, [r3, #0]
 8010c92:	4608      	mov	r0, r1
 8010c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c98:	4770      	bx	lr

08010c9a <__sfputs_r>:
 8010c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	460f      	mov	r7, r1
 8010ca0:	4614      	mov	r4, r2
 8010ca2:	18d5      	adds	r5, r2, r3
 8010ca4:	42ac      	cmp	r4, r5
 8010ca6:	d101      	bne.n	8010cac <__sfputs_r+0x12>
 8010ca8:	2000      	movs	r0, #0
 8010caa:	e007      	b.n	8010cbc <__sfputs_r+0x22>
 8010cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cb0:	463a      	mov	r2, r7
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	f7ff ffda 	bl	8010c6c <__sfputc_r>
 8010cb8:	1c43      	adds	r3, r0, #1
 8010cba:	d1f3      	bne.n	8010ca4 <__sfputs_r+0xa>
 8010cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cc0 <_vfiprintf_r>:
 8010cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc4:	460d      	mov	r5, r1
 8010cc6:	b09d      	sub	sp, #116	; 0x74
 8010cc8:	4614      	mov	r4, r2
 8010cca:	4698      	mov	r8, r3
 8010ccc:	4606      	mov	r6, r0
 8010cce:	b118      	cbz	r0, 8010cd8 <_vfiprintf_r+0x18>
 8010cd0:	6983      	ldr	r3, [r0, #24]
 8010cd2:	b90b      	cbnz	r3, 8010cd8 <_vfiprintf_r+0x18>
 8010cd4:	f7ff f922 	bl	800ff1c <__sinit>
 8010cd8:	4b89      	ldr	r3, [pc, #548]	; (8010f00 <_vfiprintf_r+0x240>)
 8010cda:	429d      	cmp	r5, r3
 8010cdc:	d11b      	bne.n	8010d16 <_vfiprintf_r+0x56>
 8010cde:	6875      	ldr	r5, [r6, #4]
 8010ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ce2:	07d9      	lsls	r1, r3, #31
 8010ce4:	d405      	bmi.n	8010cf2 <_vfiprintf_r+0x32>
 8010ce6:	89ab      	ldrh	r3, [r5, #12]
 8010ce8:	059a      	lsls	r2, r3, #22
 8010cea:	d402      	bmi.n	8010cf2 <_vfiprintf_r+0x32>
 8010cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cee:	f7ff f9dc 	bl	80100aa <__retarget_lock_acquire_recursive>
 8010cf2:	89ab      	ldrh	r3, [r5, #12]
 8010cf4:	071b      	lsls	r3, r3, #28
 8010cf6:	d501      	bpl.n	8010cfc <_vfiprintf_r+0x3c>
 8010cf8:	692b      	ldr	r3, [r5, #16]
 8010cfa:	b9eb      	cbnz	r3, 8010d38 <_vfiprintf_r+0x78>
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f000 f9c6 	bl	8011090 <__swsetup_r>
 8010d04:	b1c0      	cbz	r0, 8010d38 <_vfiprintf_r+0x78>
 8010d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d08:	07dc      	lsls	r4, r3, #31
 8010d0a:	d50e      	bpl.n	8010d2a <_vfiprintf_r+0x6a>
 8010d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d10:	b01d      	add	sp, #116	; 0x74
 8010d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d16:	4b7b      	ldr	r3, [pc, #492]	; (8010f04 <_vfiprintf_r+0x244>)
 8010d18:	429d      	cmp	r5, r3
 8010d1a:	d101      	bne.n	8010d20 <_vfiprintf_r+0x60>
 8010d1c:	68b5      	ldr	r5, [r6, #8]
 8010d1e:	e7df      	b.n	8010ce0 <_vfiprintf_r+0x20>
 8010d20:	4b79      	ldr	r3, [pc, #484]	; (8010f08 <_vfiprintf_r+0x248>)
 8010d22:	429d      	cmp	r5, r3
 8010d24:	bf08      	it	eq
 8010d26:	68f5      	ldreq	r5, [r6, #12]
 8010d28:	e7da      	b.n	8010ce0 <_vfiprintf_r+0x20>
 8010d2a:	89ab      	ldrh	r3, [r5, #12]
 8010d2c:	0598      	lsls	r0, r3, #22
 8010d2e:	d4ed      	bmi.n	8010d0c <_vfiprintf_r+0x4c>
 8010d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d32:	f7ff f9bb 	bl	80100ac <__retarget_lock_release_recursive>
 8010d36:	e7e9      	b.n	8010d0c <_vfiprintf_r+0x4c>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d3c:	2320      	movs	r3, #32
 8010d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d46:	2330      	movs	r3, #48	; 0x30
 8010d48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010f0c <_vfiprintf_r+0x24c>
 8010d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d50:	f04f 0901 	mov.w	r9, #1
 8010d54:	4623      	mov	r3, r4
 8010d56:	469a      	mov	sl, r3
 8010d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d5c:	b10a      	cbz	r2, 8010d62 <_vfiprintf_r+0xa2>
 8010d5e:	2a25      	cmp	r2, #37	; 0x25
 8010d60:	d1f9      	bne.n	8010d56 <_vfiprintf_r+0x96>
 8010d62:	ebba 0b04 	subs.w	fp, sl, r4
 8010d66:	d00b      	beq.n	8010d80 <_vfiprintf_r+0xc0>
 8010d68:	465b      	mov	r3, fp
 8010d6a:	4622      	mov	r2, r4
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	4630      	mov	r0, r6
 8010d70:	f7ff ff93 	bl	8010c9a <__sfputs_r>
 8010d74:	3001      	adds	r0, #1
 8010d76:	f000 80aa 	beq.w	8010ece <_vfiprintf_r+0x20e>
 8010d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d7c:	445a      	add	r2, fp
 8010d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d80:	f89a 3000 	ldrb.w	r3, [sl]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f000 80a2 	beq.w	8010ece <_vfiprintf_r+0x20e>
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d94:	f10a 0a01 	add.w	sl, sl, #1
 8010d98:	9304      	str	r3, [sp, #16]
 8010d9a:	9307      	str	r3, [sp, #28]
 8010d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010da0:	931a      	str	r3, [sp, #104]	; 0x68
 8010da2:	4654      	mov	r4, sl
 8010da4:	2205      	movs	r2, #5
 8010da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010daa:	4858      	ldr	r0, [pc, #352]	; (8010f0c <_vfiprintf_r+0x24c>)
 8010dac:	f7ef fa48 	bl	8000240 <memchr>
 8010db0:	9a04      	ldr	r2, [sp, #16]
 8010db2:	b9d8      	cbnz	r0, 8010dec <_vfiprintf_r+0x12c>
 8010db4:	06d1      	lsls	r1, r2, #27
 8010db6:	bf44      	itt	mi
 8010db8:	2320      	movmi	r3, #32
 8010dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dbe:	0713      	lsls	r3, r2, #28
 8010dc0:	bf44      	itt	mi
 8010dc2:	232b      	movmi	r3, #43	; 0x2b
 8010dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8010dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8010dce:	d015      	beq.n	8010dfc <_vfiprintf_r+0x13c>
 8010dd0:	9a07      	ldr	r2, [sp, #28]
 8010dd2:	4654      	mov	r4, sl
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	f04f 0c0a 	mov.w	ip, #10
 8010dda:	4621      	mov	r1, r4
 8010ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010de0:	3b30      	subs	r3, #48	; 0x30
 8010de2:	2b09      	cmp	r3, #9
 8010de4:	d94e      	bls.n	8010e84 <_vfiprintf_r+0x1c4>
 8010de6:	b1b0      	cbz	r0, 8010e16 <_vfiprintf_r+0x156>
 8010de8:	9207      	str	r2, [sp, #28]
 8010dea:	e014      	b.n	8010e16 <_vfiprintf_r+0x156>
 8010dec:	eba0 0308 	sub.w	r3, r0, r8
 8010df0:	fa09 f303 	lsl.w	r3, r9, r3
 8010df4:	4313      	orrs	r3, r2
 8010df6:	9304      	str	r3, [sp, #16]
 8010df8:	46a2      	mov	sl, r4
 8010dfa:	e7d2      	b.n	8010da2 <_vfiprintf_r+0xe2>
 8010dfc:	9b03      	ldr	r3, [sp, #12]
 8010dfe:	1d19      	adds	r1, r3, #4
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	9103      	str	r1, [sp, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	bfbb      	ittet	lt
 8010e08:	425b      	neglt	r3, r3
 8010e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8010e0e:	9307      	strge	r3, [sp, #28]
 8010e10:	9307      	strlt	r3, [sp, #28]
 8010e12:	bfb8      	it	lt
 8010e14:	9204      	strlt	r2, [sp, #16]
 8010e16:	7823      	ldrb	r3, [r4, #0]
 8010e18:	2b2e      	cmp	r3, #46	; 0x2e
 8010e1a:	d10c      	bne.n	8010e36 <_vfiprintf_r+0x176>
 8010e1c:	7863      	ldrb	r3, [r4, #1]
 8010e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e20:	d135      	bne.n	8010e8e <_vfiprintf_r+0x1ce>
 8010e22:	9b03      	ldr	r3, [sp, #12]
 8010e24:	1d1a      	adds	r2, r3, #4
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	9203      	str	r2, [sp, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	bfb8      	it	lt
 8010e2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e32:	3402      	adds	r4, #2
 8010e34:	9305      	str	r3, [sp, #20]
 8010e36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010f1c <_vfiprintf_r+0x25c>
 8010e3a:	7821      	ldrb	r1, [r4, #0]
 8010e3c:	2203      	movs	r2, #3
 8010e3e:	4650      	mov	r0, sl
 8010e40:	f7ef f9fe 	bl	8000240 <memchr>
 8010e44:	b140      	cbz	r0, 8010e58 <_vfiprintf_r+0x198>
 8010e46:	2340      	movs	r3, #64	; 0x40
 8010e48:	eba0 000a 	sub.w	r0, r0, sl
 8010e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8010e50:	9b04      	ldr	r3, [sp, #16]
 8010e52:	4303      	orrs	r3, r0
 8010e54:	3401      	adds	r4, #1
 8010e56:	9304      	str	r3, [sp, #16]
 8010e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e5c:	482c      	ldr	r0, [pc, #176]	; (8010f10 <_vfiprintf_r+0x250>)
 8010e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e62:	2206      	movs	r2, #6
 8010e64:	f7ef f9ec 	bl	8000240 <memchr>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d03f      	beq.n	8010eec <_vfiprintf_r+0x22c>
 8010e6c:	4b29      	ldr	r3, [pc, #164]	; (8010f14 <_vfiprintf_r+0x254>)
 8010e6e:	bb1b      	cbnz	r3, 8010eb8 <_vfiprintf_r+0x1f8>
 8010e70:	9b03      	ldr	r3, [sp, #12]
 8010e72:	3307      	adds	r3, #7
 8010e74:	f023 0307 	bic.w	r3, r3, #7
 8010e78:	3308      	adds	r3, #8
 8010e7a:	9303      	str	r3, [sp, #12]
 8010e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e7e:	443b      	add	r3, r7
 8010e80:	9309      	str	r3, [sp, #36]	; 0x24
 8010e82:	e767      	b.n	8010d54 <_vfiprintf_r+0x94>
 8010e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e88:	460c      	mov	r4, r1
 8010e8a:	2001      	movs	r0, #1
 8010e8c:	e7a5      	b.n	8010dda <_vfiprintf_r+0x11a>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	3401      	adds	r4, #1
 8010e92:	9305      	str	r3, [sp, #20]
 8010e94:	4619      	mov	r1, r3
 8010e96:	f04f 0c0a 	mov.w	ip, #10
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ea0:	3a30      	subs	r2, #48	; 0x30
 8010ea2:	2a09      	cmp	r2, #9
 8010ea4:	d903      	bls.n	8010eae <_vfiprintf_r+0x1ee>
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d0c5      	beq.n	8010e36 <_vfiprintf_r+0x176>
 8010eaa:	9105      	str	r1, [sp, #20]
 8010eac:	e7c3      	b.n	8010e36 <_vfiprintf_r+0x176>
 8010eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	e7f0      	b.n	8010e9a <_vfiprintf_r+0x1da>
 8010eb8:	ab03      	add	r3, sp, #12
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	462a      	mov	r2, r5
 8010ebe:	4b16      	ldr	r3, [pc, #88]	; (8010f18 <_vfiprintf_r+0x258>)
 8010ec0:	a904      	add	r1, sp, #16
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	f7fd fcbc 	bl	800e840 <_printf_float>
 8010ec8:	4607      	mov	r7, r0
 8010eca:	1c78      	adds	r0, r7, #1
 8010ecc:	d1d6      	bne.n	8010e7c <_vfiprintf_r+0x1bc>
 8010ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ed0:	07d9      	lsls	r1, r3, #31
 8010ed2:	d405      	bmi.n	8010ee0 <_vfiprintf_r+0x220>
 8010ed4:	89ab      	ldrh	r3, [r5, #12]
 8010ed6:	059a      	lsls	r2, r3, #22
 8010ed8:	d402      	bmi.n	8010ee0 <_vfiprintf_r+0x220>
 8010eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010edc:	f7ff f8e6 	bl	80100ac <__retarget_lock_release_recursive>
 8010ee0:	89ab      	ldrh	r3, [r5, #12]
 8010ee2:	065b      	lsls	r3, r3, #25
 8010ee4:	f53f af12 	bmi.w	8010d0c <_vfiprintf_r+0x4c>
 8010ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eea:	e711      	b.n	8010d10 <_vfiprintf_r+0x50>
 8010eec:	ab03      	add	r3, sp, #12
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	462a      	mov	r2, r5
 8010ef2:	4b09      	ldr	r3, [pc, #36]	; (8010f18 <_vfiprintf_r+0x258>)
 8010ef4:	a904      	add	r1, sp, #16
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	f7fd ff46 	bl	800ed88 <_printf_i>
 8010efc:	e7e4      	b.n	8010ec8 <_vfiprintf_r+0x208>
 8010efe:	bf00      	nop
 8010f00:	0801df1c 	.word	0x0801df1c
 8010f04:	0801df3c 	.word	0x0801df3c
 8010f08:	0801defc 	.word	0x0801defc
 8010f0c:	0801e0b4 	.word	0x0801e0b4
 8010f10:	0801e0be 	.word	0x0801e0be
 8010f14:	0800e841 	.word	0x0800e841
 8010f18:	08010c9b 	.word	0x08010c9b
 8010f1c:	0801e0ba 	.word	0x0801e0ba

08010f20 <_sbrk_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	4d06      	ldr	r5, [pc, #24]	; (8010f3c <_sbrk_r+0x1c>)
 8010f24:	2300      	movs	r3, #0
 8010f26:	4604      	mov	r4, r0
 8010f28:	4608      	mov	r0, r1
 8010f2a:	602b      	str	r3, [r5, #0]
 8010f2c:	f7f0 f868 	bl	8001000 <_sbrk>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d102      	bne.n	8010f3a <_sbrk_r+0x1a>
 8010f34:	682b      	ldr	r3, [r5, #0]
 8010f36:	b103      	cbz	r3, 8010f3a <_sbrk_r+0x1a>
 8010f38:	6023      	str	r3, [r4, #0]
 8010f3a:	bd38      	pop	{r3, r4, r5, pc}
 8010f3c:	2000d0c8 	.word	0x2000d0c8

08010f40 <__sread>:
 8010f40:	b510      	push	{r4, lr}
 8010f42:	460c      	mov	r4, r1
 8010f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f48:	f000 fab0 	bl	80114ac <_read_r>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	bfab      	itete	ge
 8010f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f52:	89a3      	ldrhlt	r3, [r4, #12]
 8010f54:	181b      	addge	r3, r3, r0
 8010f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f5a:	bfac      	ite	ge
 8010f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f5e:	81a3      	strhlt	r3, [r4, #12]
 8010f60:	bd10      	pop	{r4, pc}

08010f62 <__swrite>:
 8010f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f66:	461f      	mov	r7, r3
 8010f68:	898b      	ldrh	r3, [r1, #12]
 8010f6a:	05db      	lsls	r3, r3, #23
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	460c      	mov	r4, r1
 8010f70:	4616      	mov	r6, r2
 8010f72:	d505      	bpl.n	8010f80 <__swrite+0x1e>
 8010f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f78:	2302      	movs	r3, #2
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f000 f9d0 	bl	8011320 <_lseek_r>
 8010f80:	89a3      	ldrh	r3, [r4, #12]
 8010f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f8a:	81a3      	strh	r3, [r4, #12]
 8010f8c:	4632      	mov	r2, r6
 8010f8e:	463b      	mov	r3, r7
 8010f90:	4628      	mov	r0, r5
 8010f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f96:	f000 b869 	b.w	801106c <_write_r>

08010f9a <__sseek>:
 8010f9a:	b510      	push	{r4, lr}
 8010f9c:	460c      	mov	r4, r1
 8010f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fa2:	f000 f9bd 	bl	8011320 <_lseek_r>
 8010fa6:	1c43      	adds	r3, r0, #1
 8010fa8:	89a3      	ldrh	r3, [r4, #12]
 8010faa:	bf15      	itete	ne
 8010fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8010fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010fb6:	81a3      	strheq	r3, [r4, #12]
 8010fb8:	bf18      	it	ne
 8010fba:	81a3      	strhne	r3, [r4, #12]
 8010fbc:	bd10      	pop	{r4, pc}

08010fbe <__sclose>:
 8010fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc2:	f000 b8db 	b.w	801117c <_close_r>
	...

08010fc8 <__swbuf_r>:
 8010fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fca:	460e      	mov	r6, r1
 8010fcc:	4614      	mov	r4, r2
 8010fce:	4605      	mov	r5, r0
 8010fd0:	b118      	cbz	r0, 8010fda <__swbuf_r+0x12>
 8010fd2:	6983      	ldr	r3, [r0, #24]
 8010fd4:	b90b      	cbnz	r3, 8010fda <__swbuf_r+0x12>
 8010fd6:	f7fe ffa1 	bl	800ff1c <__sinit>
 8010fda:	4b21      	ldr	r3, [pc, #132]	; (8011060 <__swbuf_r+0x98>)
 8010fdc:	429c      	cmp	r4, r3
 8010fde:	d12b      	bne.n	8011038 <__swbuf_r+0x70>
 8010fe0:	686c      	ldr	r4, [r5, #4]
 8010fe2:	69a3      	ldr	r3, [r4, #24]
 8010fe4:	60a3      	str	r3, [r4, #8]
 8010fe6:	89a3      	ldrh	r3, [r4, #12]
 8010fe8:	071a      	lsls	r2, r3, #28
 8010fea:	d52f      	bpl.n	801104c <__swbuf_r+0x84>
 8010fec:	6923      	ldr	r3, [r4, #16]
 8010fee:	b36b      	cbz	r3, 801104c <__swbuf_r+0x84>
 8010ff0:	6923      	ldr	r3, [r4, #16]
 8010ff2:	6820      	ldr	r0, [r4, #0]
 8010ff4:	1ac0      	subs	r0, r0, r3
 8010ff6:	6963      	ldr	r3, [r4, #20]
 8010ff8:	b2f6      	uxtb	r6, r6
 8010ffa:	4283      	cmp	r3, r0
 8010ffc:	4637      	mov	r7, r6
 8010ffe:	dc04      	bgt.n	801100a <__swbuf_r+0x42>
 8011000:	4621      	mov	r1, r4
 8011002:	4628      	mov	r0, r5
 8011004:	f000 f950 	bl	80112a8 <_fflush_r>
 8011008:	bb30      	cbnz	r0, 8011058 <__swbuf_r+0x90>
 801100a:	68a3      	ldr	r3, [r4, #8]
 801100c:	3b01      	subs	r3, #1
 801100e:	60a3      	str	r3, [r4, #8]
 8011010:	6823      	ldr	r3, [r4, #0]
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	6022      	str	r2, [r4, #0]
 8011016:	701e      	strb	r6, [r3, #0]
 8011018:	6963      	ldr	r3, [r4, #20]
 801101a:	3001      	adds	r0, #1
 801101c:	4283      	cmp	r3, r0
 801101e:	d004      	beq.n	801102a <__swbuf_r+0x62>
 8011020:	89a3      	ldrh	r3, [r4, #12]
 8011022:	07db      	lsls	r3, r3, #31
 8011024:	d506      	bpl.n	8011034 <__swbuf_r+0x6c>
 8011026:	2e0a      	cmp	r6, #10
 8011028:	d104      	bne.n	8011034 <__swbuf_r+0x6c>
 801102a:	4621      	mov	r1, r4
 801102c:	4628      	mov	r0, r5
 801102e:	f000 f93b 	bl	80112a8 <_fflush_r>
 8011032:	b988      	cbnz	r0, 8011058 <__swbuf_r+0x90>
 8011034:	4638      	mov	r0, r7
 8011036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011038:	4b0a      	ldr	r3, [pc, #40]	; (8011064 <__swbuf_r+0x9c>)
 801103a:	429c      	cmp	r4, r3
 801103c:	d101      	bne.n	8011042 <__swbuf_r+0x7a>
 801103e:	68ac      	ldr	r4, [r5, #8]
 8011040:	e7cf      	b.n	8010fe2 <__swbuf_r+0x1a>
 8011042:	4b09      	ldr	r3, [pc, #36]	; (8011068 <__swbuf_r+0xa0>)
 8011044:	429c      	cmp	r4, r3
 8011046:	bf08      	it	eq
 8011048:	68ec      	ldreq	r4, [r5, #12]
 801104a:	e7ca      	b.n	8010fe2 <__swbuf_r+0x1a>
 801104c:	4621      	mov	r1, r4
 801104e:	4628      	mov	r0, r5
 8011050:	f000 f81e 	bl	8011090 <__swsetup_r>
 8011054:	2800      	cmp	r0, #0
 8011056:	d0cb      	beq.n	8010ff0 <__swbuf_r+0x28>
 8011058:	f04f 37ff 	mov.w	r7, #4294967295
 801105c:	e7ea      	b.n	8011034 <__swbuf_r+0x6c>
 801105e:	bf00      	nop
 8011060:	0801df1c 	.word	0x0801df1c
 8011064:	0801df3c 	.word	0x0801df3c
 8011068:	0801defc 	.word	0x0801defc

0801106c <_write_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4d07      	ldr	r5, [pc, #28]	; (801108c <_write_r+0x20>)
 8011070:	4604      	mov	r4, r0
 8011072:	4608      	mov	r0, r1
 8011074:	4611      	mov	r1, r2
 8011076:	2200      	movs	r2, #0
 8011078:	602a      	str	r2, [r5, #0]
 801107a:	461a      	mov	r2, r3
 801107c:	f7ef fff6 	bl	800106c <_write>
 8011080:	1c43      	adds	r3, r0, #1
 8011082:	d102      	bne.n	801108a <_write_r+0x1e>
 8011084:	682b      	ldr	r3, [r5, #0]
 8011086:	b103      	cbz	r3, 801108a <_write_r+0x1e>
 8011088:	6023      	str	r3, [r4, #0]
 801108a:	bd38      	pop	{r3, r4, r5, pc}
 801108c:	2000d0c8 	.word	0x2000d0c8

08011090 <__swsetup_r>:
 8011090:	4b32      	ldr	r3, [pc, #200]	; (801115c <__swsetup_r+0xcc>)
 8011092:	b570      	push	{r4, r5, r6, lr}
 8011094:	681d      	ldr	r5, [r3, #0]
 8011096:	4606      	mov	r6, r0
 8011098:	460c      	mov	r4, r1
 801109a:	b125      	cbz	r5, 80110a6 <__swsetup_r+0x16>
 801109c:	69ab      	ldr	r3, [r5, #24]
 801109e:	b913      	cbnz	r3, 80110a6 <__swsetup_r+0x16>
 80110a0:	4628      	mov	r0, r5
 80110a2:	f7fe ff3b 	bl	800ff1c <__sinit>
 80110a6:	4b2e      	ldr	r3, [pc, #184]	; (8011160 <__swsetup_r+0xd0>)
 80110a8:	429c      	cmp	r4, r3
 80110aa:	d10f      	bne.n	80110cc <__swsetup_r+0x3c>
 80110ac:	686c      	ldr	r4, [r5, #4]
 80110ae:	89a3      	ldrh	r3, [r4, #12]
 80110b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110b4:	0719      	lsls	r1, r3, #28
 80110b6:	d42c      	bmi.n	8011112 <__swsetup_r+0x82>
 80110b8:	06dd      	lsls	r5, r3, #27
 80110ba:	d411      	bmi.n	80110e0 <__swsetup_r+0x50>
 80110bc:	2309      	movs	r3, #9
 80110be:	6033      	str	r3, [r6, #0]
 80110c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110c4:	81a3      	strh	r3, [r4, #12]
 80110c6:	f04f 30ff 	mov.w	r0, #4294967295
 80110ca:	e03e      	b.n	801114a <__swsetup_r+0xba>
 80110cc:	4b25      	ldr	r3, [pc, #148]	; (8011164 <__swsetup_r+0xd4>)
 80110ce:	429c      	cmp	r4, r3
 80110d0:	d101      	bne.n	80110d6 <__swsetup_r+0x46>
 80110d2:	68ac      	ldr	r4, [r5, #8]
 80110d4:	e7eb      	b.n	80110ae <__swsetup_r+0x1e>
 80110d6:	4b24      	ldr	r3, [pc, #144]	; (8011168 <__swsetup_r+0xd8>)
 80110d8:	429c      	cmp	r4, r3
 80110da:	bf08      	it	eq
 80110dc:	68ec      	ldreq	r4, [r5, #12]
 80110de:	e7e6      	b.n	80110ae <__swsetup_r+0x1e>
 80110e0:	0758      	lsls	r0, r3, #29
 80110e2:	d512      	bpl.n	801110a <__swsetup_r+0x7a>
 80110e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110e6:	b141      	cbz	r1, 80110fa <__swsetup_r+0x6a>
 80110e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110ec:	4299      	cmp	r1, r3
 80110ee:	d002      	beq.n	80110f6 <__swsetup_r+0x66>
 80110f0:	4630      	mov	r0, r6
 80110f2:	f7ff fb7f 	bl	80107f4 <_free_r>
 80110f6:	2300      	movs	r3, #0
 80110f8:	6363      	str	r3, [r4, #52]	; 0x34
 80110fa:	89a3      	ldrh	r3, [r4, #12]
 80110fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011100:	81a3      	strh	r3, [r4, #12]
 8011102:	2300      	movs	r3, #0
 8011104:	6063      	str	r3, [r4, #4]
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	6023      	str	r3, [r4, #0]
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	f043 0308 	orr.w	r3, r3, #8
 8011110:	81a3      	strh	r3, [r4, #12]
 8011112:	6923      	ldr	r3, [r4, #16]
 8011114:	b94b      	cbnz	r3, 801112a <__swsetup_r+0x9a>
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801111c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011120:	d003      	beq.n	801112a <__swsetup_r+0x9a>
 8011122:	4621      	mov	r1, r4
 8011124:	4630      	mov	r0, r6
 8011126:	f000 f933 	bl	8011390 <__smakebuf_r>
 801112a:	89a0      	ldrh	r0, [r4, #12]
 801112c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011130:	f010 0301 	ands.w	r3, r0, #1
 8011134:	d00a      	beq.n	801114c <__swsetup_r+0xbc>
 8011136:	2300      	movs	r3, #0
 8011138:	60a3      	str	r3, [r4, #8]
 801113a:	6963      	ldr	r3, [r4, #20]
 801113c:	425b      	negs	r3, r3
 801113e:	61a3      	str	r3, [r4, #24]
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	b943      	cbnz	r3, 8011156 <__swsetup_r+0xc6>
 8011144:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011148:	d1ba      	bne.n	80110c0 <__swsetup_r+0x30>
 801114a:	bd70      	pop	{r4, r5, r6, pc}
 801114c:	0781      	lsls	r1, r0, #30
 801114e:	bf58      	it	pl
 8011150:	6963      	ldrpl	r3, [r4, #20]
 8011152:	60a3      	str	r3, [r4, #8]
 8011154:	e7f4      	b.n	8011140 <__swsetup_r+0xb0>
 8011156:	2000      	movs	r0, #0
 8011158:	e7f7      	b.n	801114a <__swsetup_r+0xba>
 801115a:	bf00      	nop
 801115c:	2000002c 	.word	0x2000002c
 8011160:	0801df1c 	.word	0x0801df1c
 8011164:	0801df3c 	.word	0x0801df3c
 8011168:	0801defc 	.word	0x0801defc

0801116c <abort>:
 801116c:	b508      	push	{r3, lr}
 801116e:	2006      	movs	r0, #6
 8011170:	f000 f9d6 	bl	8011520 <raise>
 8011174:	2001      	movs	r0, #1
 8011176:	f7ef ff73 	bl	8001060 <_exit>
	...

0801117c <_close_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	4d06      	ldr	r5, [pc, #24]	; (8011198 <_close_r+0x1c>)
 8011180:	2300      	movs	r3, #0
 8011182:	4604      	mov	r4, r0
 8011184:	4608      	mov	r0, r1
 8011186:	602b      	str	r3, [r5, #0]
 8011188:	f7ef ff7e 	bl	8001088 <_close>
 801118c:	1c43      	adds	r3, r0, #1
 801118e:	d102      	bne.n	8011196 <_close_r+0x1a>
 8011190:	682b      	ldr	r3, [r5, #0]
 8011192:	b103      	cbz	r3, 8011196 <_close_r+0x1a>
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	bd38      	pop	{r3, r4, r5, pc}
 8011198:	2000d0c8 	.word	0x2000d0c8

0801119c <__sflush_r>:
 801119c:	898a      	ldrh	r2, [r1, #12]
 801119e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a2:	4605      	mov	r5, r0
 80111a4:	0710      	lsls	r0, r2, #28
 80111a6:	460c      	mov	r4, r1
 80111a8:	d458      	bmi.n	801125c <__sflush_r+0xc0>
 80111aa:	684b      	ldr	r3, [r1, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	dc05      	bgt.n	80111bc <__sflush_r+0x20>
 80111b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	dc02      	bgt.n	80111bc <__sflush_r+0x20>
 80111b6:	2000      	movs	r0, #0
 80111b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111be:	2e00      	cmp	r6, #0
 80111c0:	d0f9      	beq.n	80111b6 <__sflush_r+0x1a>
 80111c2:	2300      	movs	r3, #0
 80111c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111c8:	682f      	ldr	r7, [r5, #0]
 80111ca:	602b      	str	r3, [r5, #0]
 80111cc:	d032      	beq.n	8011234 <__sflush_r+0x98>
 80111ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111d0:	89a3      	ldrh	r3, [r4, #12]
 80111d2:	075a      	lsls	r2, r3, #29
 80111d4:	d505      	bpl.n	80111e2 <__sflush_r+0x46>
 80111d6:	6863      	ldr	r3, [r4, #4]
 80111d8:	1ac0      	subs	r0, r0, r3
 80111da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111dc:	b10b      	cbz	r3, 80111e2 <__sflush_r+0x46>
 80111de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111e0:	1ac0      	subs	r0, r0, r3
 80111e2:	2300      	movs	r3, #0
 80111e4:	4602      	mov	r2, r0
 80111e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111e8:	6a21      	ldr	r1, [r4, #32]
 80111ea:	4628      	mov	r0, r5
 80111ec:	47b0      	blx	r6
 80111ee:	1c43      	adds	r3, r0, #1
 80111f0:	89a3      	ldrh	r3, [r4, #12]
 80111f2:	d106      	bne.n	8011202 <__sflush_r+0x66>
 80111f4:	6829      	ldr	r1, [r5, #0]
 80111f6:	291d      	cmp	r1, #29
 80111f8:	d82c      	bhi.n	8011254 <__sflush_r+0xb8>
 80111fa:	4a2a      	ldr	r2, [pc, #168]	; (80112a4 <__sflush_r+0x108>)
 80111fc:	40ca      	lsrs	r2, r1
 80111fe:	07d6      	lsls	r6, r2, #31
 8011200:	d528      	bpl.n	8011254 <__sflush_r+0xb8>
 8011202:	2200      	movs	r2, #0
 8011204:	6062      	str	r2, [r4, #4]
 8011206:	04d9      	lsls	r1, r3, #19
 8011208:	6922      	ldr	r2, [r4, #16]
 801120a:	6022      	str	r2, [r4, #0]
 801120c:	d504      	bpl.n	8011218 <__sflush_r+0x7c>
 801120e:	1c42      	adds	r2, r0, #1
 8011210:	d101      	bne.n	8011216 <__sflush_r+0x7a>
 8011212:	682b      	ldr	r3, [r5, #0]
 8011214:	b903      	cbnz	r3, 8011218 <__sflush_r+0x7c>
 8011216:	6560      	str	r0, [r4, #84]	; 0x54
 8011218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801121a:	602f      	str	r7, [r5, #0]
 801121c:	2900      	cmp	r1, #0
 801121e:	d0ca      	beq.n	80111b6 <__sflush_r+0x1a>
 8011220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011224:	4299      	cmp	r1, r3
 8011226:	d002      	beq.n	801122e <__sflush_r+0x92>
 8011228:	4628      	mov	r0, r5
 801122a:	f7ff fae3 	bl	80107f4 <_free_r>
 801122e:	2000      	movs	r0, #0
 8011230:	6360      	str	r0, [r4, #52]	; 0x34
 8011232:	e7c1      	b.n	80111b8 <__sflush_r+0x1c>
 8011234:	6a21      	ldr	r1, [r4, #32]
 8011236:	2301      	movs	r3, #1
 8011238:	4628      	mov	r0, r5
 801123a:	47b0      	blx	r6
 801123c:	1c41      	adds	r1, r0, #1
 801123e:	d1c7      	bne.n	80111d0 <__sflush_r+0x34>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0c4      	beq.n	80111d0 <__sflush_r+0x34>
 8011246:	2b1d      	cmp	r3, #29
 8011248:	d001      	beq.n	801124e <__sflush_r+0xb2>
 801124a:	2b16      	cmp	r3, #22
 801124c:	d101      	bne.n	8011252 <__sflush_r+0xb6>
 801124e:	602f      	str	r7, [r5, #0]
 8011250:	e7b1      	b.n	80111b6 <__sflush_r+0x1a>
 8011252:	89a3      	ldrh	r3, [r4, #12]
 8011254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011258:	81a3      	strh	r3, [r4, #12]
 801125a:	e7ad      	b.n	80111b8 <__sflush_r+0x1c>
 801125c:	690f      	ldr	r7, [r1, #16]
 801125e:	2f00      	cmp	r7, #0
 8011260:	d0a9      	beq.n	80111b6 <__sflush_r+0x1a>
 8011262:	0793      	lsls	r3, r2, #30
 8011264:	680e      	ldr	r6, [r1, #0]
 8011266:	bf08      	it	eq
 8011268:	694b      	ldreq	r3, [r1, #20]
 801126a:	600f      	str	r7, [r1, #0]
 801126c:	bf18      	it	ne
 801126e:	2300      	movne	r3, #0
 8011270:	eba6 0807 	sub.w	r8, r6, r7
 8011274:	608b      	str	r3, [r1, #8]
 8011276:	f1b8 0f00 	cmp.w	r8, #0
 801127a:	dd9c      	ble.n	80111b6 <__sflush_r+0x1a>
 801127c:	6a21      	ldr	r1, [r4, #32]
 801127e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011280:	4643      	mov	r3, r8
 8011282:	463a      	mov	r2, r7
 8011284:	4628      	mov	r0, r5
 8011286:	47b0      	blx	r6
 8011288:	2800      	cmp	r0, #0
 801128a:	dc06      	bgt.n	801129a <__sflush_r+0xfe>
 801128c:	89a3      	ldrh	r3, [r4, #12]
 801128e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011292:	81a3      	strh	r3, [r4, #12]
 8011294:	f04f 30ff 	mov.w	r0, #4294967295
 8011298:	e78e      	b.n	80111b8 <__sflush_r+0x1c>
 801129a:	4407      	add	r7, r0
 801129c:	eba8 0800 	sub.w	r8, r8, r0
 80112a0:	e7e9      	b.n	8011276 <__sflush_r+0xda>
 80112a2:	bf00      	nop
 80112a4:	20400001 	.word	0x20400001

080112a8 <_fflush_r>:
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	690b      	ldr	r3, [r1, #16]
 80112ac:	4605      	mov	r5, r0
 80112ae:	460c      	mov	r4, r1
 80112b0:	b913      	cbnz	r3, 80112b8 <_fflush_r+0x10>
 80112b2:	2500      	movs	r5, #0
 80112b4:	4628      	mov	r0, r5
 80112b6:	bd38      	pop	{r3, r4, r5, pc}
 80112b8:	b118      	cbz	r0, 80112c2 <_fflush_r+0x1a>
 80112ba:	6983      	ldr	r3, [r0, #24]
 80112bc:	b90b      	cbnz	r3, 80112c2 <_fflush_r+0x1a>
 80112be:	f7fe fe2d 	bl	800ff1c <__sinit>
 80112c2:	4b14      	ldr	r3, [pc, #80]	; (8011314 <_fflush_r+0x6c>)
 80112c4:	429c      	cmp	r4, r3
 80112c6:	d11b      	bne.n	8011300 <_fflush_r+0x58>
 80112c8:	686c      	ldr	r4, [r5, #4]
 80112ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d0ef      	beq.n	80112b2 <_fflush_r+0xa>
 80112d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112d4:	07d0      	lsls	r0, r2, #31
 80112d6:	d404      	bmi.n	80112e2 <_fflush_r+0x3a>
 80112d8:	0599      	lsls	r1, r3, #22
 80112da:	d402      	bmi.n	80112e2 <_fflush_r+0x3a>
 80112dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112de:	f7fe fee4 	bl	80100aa <__retarget_lock_acquire_recursive>
 80112e2:	4628      	mov	r0, r5
 80112e4:	4621      	mov	r1, r4
 80112e6:	f7ff ff59 	bl	801119c <__sflush_r>
 80112ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112ec:	07da      	lsls	r2, r3, #31
 80112ee:	4605      	mov	r5, r0
 80112f0:	d4e0      	bmi.n	80112b4 <_fflush_r+0xc>
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	059b      	lsls	r3, r3, #22
 80112f6:	d4dd      	bmi.n	80112b4 <_fflush_r+0xc>
 80112f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112fa:	f7fe fed7 	bl	80100ac <__retarget_lock_release_recursive>
 80112fe:	e7d9      	b.n	80112b4 <_fflush_r+0xc>
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <_fflush_r+0x70>)
 8011302:	429c      	cmp	r4, r3
 8011304:	d101      	bne.n	801130a <_fflush_r+0x62>
 8011306:	68ac      	ldr	r4, [r5, #8]
 8011308:	e7df      	b.n	80112ca <_fflush_r+0x22>
 801130a:	4b04      	ldr	r3, [pc, #16]	; (801131c <_fflush_r+0x74>)
 801130c:	429c      	cmp	r4, r3
 801130e:	bf08      	it	eq
 8011310:	68ec      	ldreq	r4, [r5, #12]
 8011312:	e7da      	b.n	80112ca <_fflush_r+0x22>
 8011314:	0801df1c 	.word	0x0801df1c
 8011318:	0801df3c 	.word	0x0801df3c
 801131c:	0801defc 	.word	0x0801defc

08011320 <_lseek_r>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4d07      	ldr	r5, [pc, #28]	; (8011340 <_lseek_r+0x20>)
 8011324:	4604      	mov	r4, r0
 8011326:	4608      	mov	r0, r1
 8011328:	4611      	mov	r1, r2
 801132a:	2200      	movs	r2, #0
 801132c:	602a      	str	r2, [r5, #0]
 801132e:	461a      	mov	r2, r3
 8011330:	f7ef feb4 	bl	800109c <_lseek>
 8011334:	1c43      	adds	r3, r0, #1
 8011336:	d102      	bne.n	801133e <_lseek_r+0x1e>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	b103      	cbz	r3, 801133e <_lseek_r+0x1e>
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	2000d0c8 	.word	0x2000d0c8

08011344 <__swhatbuf_r>:
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	460e      	mov	r6, r1
 8011348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801134c:	2900      	cmp	r1, #0
 801134e:	b096      	sub	sp, #88	; 0x58
 8011350:	4614      	mov	r4, r2
 8011352:	461d      	mov	r5, r3
 8011354:	da08      	bge.n	8011368 <__swhatbuf_r+0x24>
 8011356:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801135a:	2200      	movs	r2, #0
 801135c:	602a      	str	r2, [r5, #0]
 801135e:	061a      	lsls	r2, r3, #24
 8011360:	d410      	bmi.n	8011384 <__swhatbuf_r+0x40>
 8011362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011366:	e00e      	b.n	8011386 <__swhatbuf_r+0x42>
 8011368:	466a      	mov	r2, sp
 801136a:	f000 f903 	bl	8011574 <_fstat_r>
 801136e:	2800      	cmp	r0, #0
 8011370:	dbf1      	blt.n	8011356 <__swhatbuf_r+0x12>
 8011372:	9a01      	ldr	r2, [sp, #4]
 8011374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801137c:	425a      	negs	r2, r3
 801137e:	415a      	adcs	r2, r3
 8011380:	602a      	str	r2, [r5, #0]
 8011382:	e7ee      	b.n	8011362 <__swhatbuf_r+0x1e>
 8011384:	2340      	movs	r3, #64	; 0x40
 8011386:	2000      	movs	r0, #0
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	b016      	add	sp, #88	; 0x58
 801138c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011390 <__smakebuf_r>:
 8011390:	898b      	ldrh	r3, [r1, #12]
 8011392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011394:	079d      	lsls	r5, r3, #30
 8011396:	4606      	mov	r6, r0
 8011398:	460c      	mov	r4, r1
 801139a:	d507      	bpl.n	80113ac <__smakebuf_r+0x1c>
 801139c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113a0:	6023      	str	r3, [r4, #0]
 80113a2:	6123      	str	r3, [r4, #16]
 80113a4:	2301      	movs	r3, #1
 80113a6:	6163      	str	r3, [r4, #20]
 80113a8:	b002      	add	sp, #8
 80113aa:	bd70      	pop	{r4, r5, r6, pc}
 80113ac:	ab01      	add	r3, sp, #4
 80113ae:	466a      	mov	r2, sp
 80113b0:	f7ff ffc8 	bl	8011344 <__swhatbuf_r>
 80113b4:	9900      	ldr	r1, [sp, #0]
 80113b6:	4605      	mov	r5, r0
 80113b8:	4630      	mov	r0, r6
 80113ba:	f7ff fa87 	bl	80108cc <_malloc_r>
 80113be:	b948      	cbnz	r0, 80113d4 <__smakebuf_r+0x44>
 80113c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113c4:	059a      	lsls	r2, r3, #22
 80113c6:	d4ef      	bmi.n	80113a8 <__smakebuf_r+0x18>
 80113c8:	f023 0303 	bic.w	r3, r3, #3
 80113cc:	f043 0302 	orr.w	r3, r3, #2
 80113d0:	81a3      	strh	r3, [r4, #12]
 80113d2:	e7e3      	b.n	801139c <__smakebuf_r+0xc>
 80113d4:	4b0d      	ldr	r3, [pc, #52]	; (801140c <__smakebuf_r+0x7c>)
 80113d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80113d8:	89a3      	ldrh	r3, [r4, #12]
 80113da:	6020      	str	r0, [r4, #0]
 80113dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113e0:	81a3      	strh	r3, [r4, #12]
 80113e2:	9b00      	ldr	r3, [sp, #0]
 80113e4:	6163      	str	r3, [r4, #20]
 80113e6:	9b01      	ldr	r3, [sp, #4]
 80113e8:	6120      	str	r0, [r4, #16]
 80113ea:	b15b      	cbz	r3, 8011404 <__smakebuf_r+0x74>
 80113ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113f0:	4630      	mov	r0, r6
 80113f2:	f000 f8d1 	bl	8011598 <_isatty_r>
 80113f6:	b128      	cbz	r0, 8011404 <__smakebuf_r+0x74>
 80113f8:	89a3      	ldrh	r3, [r4, #12]
 80113fa:	f023 0303 	bic.w	r3, r3, #3
 80113fe:	f043 0301 	orr.w	r3, r3, #1
 8011402:	81a3      	strh	r3, [r4, #12]
 8011404:	89a0      	ldrh	r0, [r4, #12]
 8011406:	4305      	orrs	r5, r0
 8011408:	81a5      	strh	r5, [r4, #12]
 801140a:	e7cd      	b.n	80113a8 <__smakebuf_r+0x18>
 801140c:	0800feb5 	.word	0x0800feb5

08011410 <__ascii_mbtowc>:
 8011410:	b082      	sub	sp, #8
 8011412:	b901      	cbnz	r1, 8011416 <__ascii_mbtowc+0x6>
 8011414:	a901      	add	r1, sp, #4
 8011416:	b142      	cbz	r2, 801142a <__ascii_mbtowc+0x1a>
 8011418:	b14b      	cbz	r3, 801142e <__ascii_mbtowc+0x1e>
 801141a:	7813      	ldrb	r3, [r2, #0]
 801141c:	600b      	str	r3, [r1, #0]
 801141e:	7812      	ldrb	r2, [r2, #0]
 8011420:	1e10      	subs	r0, r2, #0
 8011422:	bf18      	it	ne
 8011424:	2001      	movne	r0, #1
 8011426:	b002      	add	sp, #8
 8011428:	4770      	bx	lr
 801142a:	4610      	mov	r0, r2
 801142c:	e7fb      	b.n	8011426 <__ascii_mbtowc+0x16>
 801142e:	f06f 0001 	mvn.w	r0, #1
 8011432:	e7f8      	b.n	8011426 <__ascii_mbtowc+0x16>

08011434 <__malloc_lock>:
 8011434:	4801      	ldr	r0, [pc, #4]	; (801143c <__malloc_lock+0x8>)
 8011436:	f7fe be38 	b.w	80100aa <__retarget_lock_acquire_recursive>
 801143a:	bf00      	nop
 801143c:	2000d0cc 	.word	0x2000d0cc

08011440 <__malloc_unlock>:
 8011440:	4801      	ldr	r0, [pc, #4]	; (8011448 <__malloc_unlock+0x8>)
 8011442:	f7fe be33 	b.w	80100ac <__retarget_lock_release_recursive>
 8011446:	bf00      	nop
 8011448:	2000d0cc 	.word	0x2000d0cc

0801144c <_realloc_r>:
 801144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011450:	4680      	mov	r8, r0
 8011452:	4614      	mov	r4, r2
 8011454:	460e      	mov	r6, r1
 8011456:	b921      	cbnz	r1, 8011462 <_realloc_r+0x16>
 8011458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801145c:	4611      	mov	r1, r2
 801145e:	f7ff ba35 	b.w	80108cc <_malloc_r>
 8011462:	b92a      	cbnz	r2, 8011470 <_realloc_r+0x24>
 8011464:	f7ff f9c6 	bl	80107f4 <_free_r>
 8011468:	4625      	mov	r5, r4
 801146a:	4628      	mov	r0, r5
 801146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011470:	f000 f8a2 	bl	80115b8 <_malloc_usable_size_r>
 8011474:	4284      	cmp	r4, r0
 8011476:	4607      	mov	r7, r0
 8011478:	d802      	bhi.n	8011480 <_realloc_r+0x34>
 801147a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801147e:	d812      	bhi.n	80114a6 <_realloc_r+0x5a>
 8011480:	4621      	mov	r1, r4
 8011482:	4640      	mov	r0, r8
 8011484:	f7ff fa22 	bl	80108cc <_malloc_r>
 8011488:	4605      	mov	r5, r0
 801148a:	2800      	cmp	r0, #0
 801148c:	d0ed      	beq.n	801146a <_realloc_r+0x1e>
 801148e:	42bc      	cmp	r4, r7
 8011490:	4622      	mov	r2, r4
 8011492:	4631      	mov	r1, r6
 8011494:	bf28      	it	cs
 8011496:	463a      	movcs	r2, r7
 8011498:	f7fd f902 	bl	800e6a0 <memcpy>
 801149c:	4631      	mov	r1, r6
 801149e:	4640      	mov	r0, r8
 80114a0:	f7ff f9a8 	bl	80107f4 <_free_r>
 80114a4:	e7e1      	b.n	801146a <_realloc_r+0x1e>
 80114a6:	4635      	mov	r5, r6
 80114a8:	e7df      	b.n	801146a <_realloc_r+0x1e>
	...

080114ac <_read_r>:
 80114ac:	b538      	push	{r3, r4, r5, lr}
 80114ae:	4d07      	ldr	r5, [pc, #28]	; (80114cc <_read_r+0x20>)
 80114b0:	4604      	mov	r4, r0
 80114b2:	4608      	mov	r0, r1
 80114b4:	4611      	mov	r1, r2
 80114b6:	2200      	movs	r2, #0
 80114b8:	602a      	str	r2, [r5, #0]
 80114ba:	461a      	mov	r2, r3
 80114bc:	f7ef fdf0 	bl	80010a0 <_read>
 80114c0:	1c43      	adds	r3, r0, #1
 80114c2:	d102      	bne.n	80114ca <_read_r+0x1e>
 80114c4:	682b      	ldr	r3, [r5, #0]
 80114c6:	b103      	cbz	r3, 80114ca <_read_r+0x1e>
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	2000d0c8 	.word	0x2000d0c8

080114d0 <_raise_r>:
 80114d0:	291f      	cmp	r1, #31
 80114d2:	b538      	push	{r3, r4, r5, lr}
 80114d4:	4604      	mov	r4, r0
 80114d6:	460d      	mov	r5, r1
 80114d8:	d904      	bls.n	80114e4 <_raise_r+0x14>
 80114da:	2316      	movs	r3, #22
 80114dc:	6003      	str	r3, [r0, #0]
 80114de:	f04f 30ff 	mov.w	r0, #4294967295
 80114e2:	bd38      	pop	{r3, r4, r5, pc}
 80114e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114e6:	b112      	cbz	r2, 80114ee <_raise_r+0x1e>
 80114e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114ec:	b94b      	cbnz	r3, 8011502 <_raise_r+0x32>
 80114ee:	4620      	mov	r0, r4
 80114f0:	f000 f830 	bl	8011554 <_getpid_r>
 80114f4:	462a      	mov	r2, r5
 80114f6:	4601      	mov	r1, r0
 80114f8:	4620      	mov	r0, r4
 80114fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114fe:	f000 b817 	b.w	8011530 <_kill_r>
 8011502:	2b01      	cmp	r3, #1
 8011504:	d00a      	beq.n	801151c <_raise_r+0x4c>
 8011506:	1c59      	adds	r1, r3, #1
 8011508:	d103      	bne.n	8011512 <_raise_r+0x42>
 801150a:	2316      	movs	r3, #22
 801150c:	6003      	str	r3, [r0, #0]
 801150e:	2001      	movs	r0, #1
 8011510:	e7e7      	b.n	80114e2 <_raise_r+0x12>
 8011512:	2400      	movs	r4, #0
 8011514:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011518:	4628      	mov	r0, r5
 801151a:	4798      	blx	r3
 801151c:	2000      	movs	r0, #0
 801151e:	e7e0      	b.n	80114e2 <_raise_r+0x12>

08011520 <raise>:
 8011520:	4b02      	ldr	r3, [pc, #8]	; (801152c <raise+0xc>)
 8011522:	4601      	mov	r1, r0
 8011524:	6818      	ldr	r0, [r3, #0]
 8011526:	f7ff bfd3 	b.w	80114d0 <_raise_r>
 801152a:	bf00      	nop
 801152c:	2000002c 	.word	0x2000002c

08011530 <_kill_r>:
 8011530:	b538      	push	{r3, r4, r5, lr}
 8011532:	4d07      	ldr	r5, [pc, #28]	; (8011550 <_kill_r+0x20>)
 8011534:	2300      	movs	r3, #0
 8011536:	4604      	mov	r4, r0
 8011538:	4608      	mov	r0, r1
 801153a:	4611      	mov	r1, r2
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	f7ef fd87 	bl	8001050 <_kill>
 8011542:	1c43      	adds	r3, r0, #1
 8011544:	d102      	bne.n	801154c <_kill_r+0x1c>
 8011546:	682b      	ldr	r3, [r5, #0]
 8011548:	b103      	cbz	r3, 801154c <_kill_r+0x1c>
 801154a:	6023      	str	r3, [r4, #0]
 801154c:	bd38      	pop	{r3, r4, r5, pc}
 801154e:	bf00      	nop
 8011550:	2000d0c8 	.word	0x2000d0c8

08011554 <_getpid_r>:
 8011554:	f7ef bd7a 	b.w	800104c <_getpid>

08011558 <__ascii_wctomb>:
 8011558:	b149      	cbz	r1, 801156e <__ascii_wctomb+0x16>
 801155a:	2aff      	cmp	r2, #255	; 0xff
 801155c:	bf85      	ittet	hi
 801155e:	238a      	movhi	r3, #138	; 0x8a
 8011560:	6003      	strhi	r3, [r0, #0]
 8011562:	700a      	strbls	r2, [r1, #0]
 8011564:	f04f 30ff 	movhi.w	r0, #4294967295
 8011568:	bf98      	it	ls
 801156a:	2001      	movls	r0, #1
 801156c:	4770      	bx	lr
 801156e:	4608      	mov	r0, r1
 8011570:	4770      	bx	lr
	...

08011574 <_fstat_r>:
 8011574:	b538      	push	{r3, r4, r5, lr}
 8011576:	4d07      	ldr	r5, [pc, #28]	; (8011594 <_fstat_r+0x20>)
 8011578:	2300      	movs	r3, #0
 801157a:	4604      	mov	r4, r0
 801157c:	4608      	mov	r0, r1
 801157e:	4611      	mov	r1, r2
 8011580:	602b      	str	r3, [r5, #0]
 8011582:	f7ef fd84 	bl	800108e <_fstat>
 8011586:	1c43      	adds	r3, r0, #1
 8011588:	d102      	bne.n	8011590 <_fstat_r+0x1c>
 801158a:	682b      	ldr	r3, [r5, #0]
 801158c:	b103      	cbz	r3, 8011590 <_fstat_r+0x1c>
 801158e:	6023      	str	r3, [r4, #0]
 8011590:	bd38      	pop	{r3, r4, r5, pc}
 8011592:	bf00      	nop
 8011594:	2000d0c8 	.word	0x2000d0c8

08011598 <_isatty_r>:
 8011598:	b538      	push	{r3, r4, r5, lr}
 801159a:	4d06      	ldr	r5, [pc, #24]	; (80115b4 <_isatty_r+0x1c>)
 801159c:	2300      	movs	r3, #0
 801159e:	4604      	mov	r4, r0
 80115a0:	4608      	mov	r0, r1
 80115a2:	602b      	str	r3, [r5, #0]
 80115a4:	f7ef fd78 	bl	8001098 <_isatty>
 80115a8:	1c43      	adds	r3, r0, #1
 80115aa:	d102      	bne.n	80115b2 <_isatty_r+0x1a>
 80115ac:	682b      	ldr	r3, [r5, #0]
 80115ae:	b103      	cbz	r3, 80115b2 <_isatty_r+0x1a>
 80115b0:	6023      	str	r3, [r4, #0]
 80115b2:	bd38      	pop	{r3, r4, r5, pc}
 80115b4:	2000d0c8 	.word	0x2000d0c8

080115b8 <_malloc_usable_size_r>:
 80115b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115bc:	1f18      	subs	r0, r3, #4
 80115be:	2b00      	cmp	r3, #0
 80115c0:	bfbc      	itt	lt
 80115c2:	580b      	ldrlt	r3, [r1, r0]
 80115c4:	18c0      	addlt	r0, r0, r3
 80115c6:	4770      	bx	lr

080115c8 <_init>:
 80115c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ca:	bf00      	nop
 80115cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ce:	bc08      	pop	{r3}
 80115d0:	469e      	mov	lr, r3
 80115d2:	4770      	bx	lr

080115d4 <_fini>:
 80115d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d6:	bf00      	nop
 80115d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115da:	bc08      	pop	{r3}
 80115dc:	469e      	mov	lr, r3
 80115de:	4770      	bx	lr
