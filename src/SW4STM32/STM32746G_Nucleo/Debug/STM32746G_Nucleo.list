
STM32746G_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cb5c  08011490  08011490  00021490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801dfec  0801dfec  0002dfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801dff4  0801dff4  0002dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801dff8  0801dff8  0002dff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000000  0801dffc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ce84  200001fc  0801e1f8  000301fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000660  2000d080  0801e1f8  0003d080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .TxDescripSection 00000080  2004c080  2004c080  0003c080  2**2
                  ALLOC
 11 .debug_line   00043e00  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0004407d  00000000  00000000  0007402c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a391  00000000  00000000  000b80a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  000c2440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011d84d  00000000  00000000  000c43d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003520  00000000  00000000  001e1c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000262a5  00000000  00000000  001e5148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000369e7  00000000  00000000  0020b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00241dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000763c  00000000  00000000  00241e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .RxDecripSection 00000080  2004c000  2004c000  0003c000  2**2
                  ALLOC
 22 .RxarraySection 000017d0  2004c100  2004c100  0003c100  2**0
                  ALLOC
 23 .TxarraySection 000017d0  2004d8d0  2004d8d0  0003d8d0  2**0
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011474 	.word	0x08011474

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08011474 	.word	0x08011474

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fb2:	e003      	b.n	8000fbc <LoopCopyDataInit>

08000fb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fba:	3104      	adds	r1, #4

08000fbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc4:	d3f6      	bcc.n	8000fb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fc8:	e002      	b.n	8000fd0 <LoopFillZerobss>

08000fca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fcc:	f842 3b04 	str.w	r3, [r2], #4

08000fd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fd4:	d3f9      	bcc.n	8000fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f000 fff3 	bl	8001fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f00d faad 	bl	800e538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f000 fe93 	bl	8001d08 <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000fe8:	0801dffc 	.word	0x0801dffc
  ldr  r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ff0:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8000ff4:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8000ff8:	2000d080 	.word	0x2000d080

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <_sbrk+0x38>)
 8001002:	6811      	ldr	r1, [r2, #0]
{
 8001004:	b508      	push	{r3, lr}
 8001006:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001008:	b909      	cbnz	r1, 800100e <_sbrk+0xe>
		heap_end = &end;
 800100a:	490c      	ldr	r1, [pc, #48]	; (800103c <_sbrk+0x3c>)
 800100c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800100e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	prev_heap_end = heap_end;
 8001012:	6810      	ldr	r0, [r2, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8001014:	f8d1 1d08 	ldr.w	r1, [r1, #3336]	; 0xd08
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8001018:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800101a:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800101c:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8001020:	428b      	cmp	r3, r1
 8001022:	d906      	bls.n	8001032 <_sbrk+0x32>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001024:	f00d fa82 	bl	800e52c <__errno>
 8001028:	230c      	movs	r3, #12
 800102a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001030:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001032:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001034:	e7fc      	b.n	8001030 <_sbrk+0x30>
 8001036:	bf00      	nop
 8001038:	20000218 	.word	0x20000218
 800103c:	2000d080 	.word	0x2000d080

08001040 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001040:	2001      	movs	r0, #1
 8001042:	4770      	bx	lr

08001044 <_kill>:

int _kill(int pid, int sig)
{
 8001044:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001046:	f00d fa71 	bl	800e52c <__errno>
 800104a:	2316      	movs	r3, #22
 800104c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	bd08      	pop	{r3, pc}

08001054 <_exit>:

void _exit (int status)
{
 8001054:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001056:	f00d fa69 	bl	800e52c <__errno>
 800105a:	2316      	movs	r3, #22
 800105c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 800105e:	e7fe      	b.n	800105e <_exit+0xa>

08001060 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	460d      	mov	r5, r1
 8001064:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	460e      	mov	r6, r1
 8001068:	1b73      	subs	r3, r6, r5
 800106a:	429c      	cmp	r4, r3
 800106c:	dc01      	bgt.n	8001072 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 800106e:	4620      	mov	r0, r4
 8001070:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8001072:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001076:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	e7f5      	b.n	8001068 <_write+0x8>

0800107c <_close>:

int _close(int file)
{
	return -1;
}
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	4770      	bx	lr

08001082 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001086:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001088:	604b      	str	r3, [r1, #4]
}
 800108a:	4770      	bx	lr

0800108c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800108c:	2001      	movs	r0, #1
 800108e:	4770      	bx	lr

08001090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001090:	2000      	movs	r0, #0
 8001092:	4770      	bx	lr

08001094 <_read>:

int _read(int file, char *ptr, int len)
{
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	460d      	mov	r5, r1
 8001098:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	460e      	mov	r6, r1
 800109c:	1b73      	subs	r3, r6, r5
 800109e:	429c      	cmp	r4, r3
 80010a0:	dc01      	bgt.n	80010a6 <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80010a2:	4620      	mov	r0, r4
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	e7f5      	b.n	800109c <_read+0x8>

080010b0 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 80010b0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80010b4:	f013 0f01 	tst.w	r3, #1
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <User_notification+0x1c>)
 80010ba:	d002      	beq.n	80010c2 <User_notification+0x12>
  {
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
    DHCP_state = DHCP_LINK_DOWN;
#endif  /* USE_DHCP */
   /* Turn On LED 3 to indicate ETH and LwIP init error */
   BSP_LED_On(LED3);
  } 
}
 80010c0:	4770      	bx	lr
    DHCP_state = DHCP_LINK_DOWN;
 80010c2:	2205      	movs	r2, #5
   BSP_LED_On(LED3);
 80010c4:	2002      	movs	r0, #2
    DHCP_state = DHCP_LINK_DOWN;
 80010c6:	701a      	strb	r2, [r3, #0]
   BSP_LED_On(LED3);
 80010c8:	f000 bf5e 	b.w	8001f88 <BSP_LED_On>
 80010cc:	2000021c 	.word	0x2000021c

080010d0 <DHCP_thread>:
* @brief  DHCP Process
* @param  argument: network interface
* @retval None
*/
void DHCP_thread(void const * argument)
{
 80010d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d4:	4604      	mov	r4, r0
 80010d6:	b085      	sub	sp, #20
  ip_addr_t gw;
  struct dhcp *dhcp;
  
  for (;;)
  {
    switch (DHCP_state)
 80010d8:	4d21      	ldr	r5, [pc, #132]	; (8001160 <DHCP_thread+0x90>)
            
            /* Stop DHCP */
            dhcp_stop(netif);
            
            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 80010da:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001164 <DHCP_thread+0x94>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80010de:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8001168 <DHCP_thread+0x98>
    switch (DHCP_state)
 80010e2:	782b      	ldrb	r3, [r5, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	b2de      	uxtb	r6, r3
 80010e8:	d00d      	beq.n	8001106 <DHCP_thread+0x36>
 80010ea:	2e05      	cmp	r6, #5
 80010ec:	d033      	beq.n	8001156 <DHCP_thread+0x86>
 80010ee:	2e01      	cmp	r6, #1
 80010f0:	d115      	bne.n	800111e <DHCP_thread+0x4e>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 80010f2:	2300      	movs	r3, #0
        dhcp_start(netif);
 80010f4:	4620      	mov	r0, r4
        ip_addr_set_zero_ip4(&netif->netmask);
 80010f6:	e9c4 3301 	strd	r3, r3, [r4, #4]
        ip_addr_set_zero_ip4(&netif->gw);       
 80010fa:	60e3      	str	r3, [r4, #12]
        dhcp_start(netif);
 80010fc:	f007 f818 	bl	8008130 <dhcp_start>
        DHCP_state = DHCP_WAIT_ADDRESS;
 8001100:	2302      	movs	r3, #2
      break;
  case DHCP_LINK_DOWN:
    {
      /* Stop DHCP */
      dhcp_stop(netif);
      DHCP_state = DHCP_OFF; 
 8001102:	702b      	strb	r3, [r5, #0]
    }
    break;
 8001104:	e00b      	b.n	800111e <DHCP_thread+0x4e>
        if (dhcp_supplied_address(netif)) 
 8001106:	4620      	mov	r0, r4
 8001108:	f006 ffa4 	bl	8008054 <dhcp_supplied_address>
 800110c:	b158      	cbz	r0, 8001126 <DHCP_thread+0x56>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 800110e:	2303      	movs	r3, #3
 8001110:	702b      	strb	r3, [r5, #0]
          BSP_LED_Off(LED3);
 8001112:	4630      	mov	r0, r6
 8001114:	f000 ff46 	bl	8001fa4 <BSP_LED_Off>
          BSP_LED_On(LED1); 
 8001118:	2000      	movs	r0, #0
 800111a:	f000 ff35 	bl	8001f88 <BSP_LED_On>
    default: break;
    }
    
    /* wait 250 ms */
    osDelay(250);
 800111e:	20fa      	movs	r0, #250	; 0xfa
 8001120:	f004 f97f 	bl	8005422 <osDelay>
    switch (DHCP_state)
 8001124:	e7dd      	b.n	80010e2 <DHCP_thread+0x12>
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001128:	799b      	ldrb	r3, [r3, #6]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d911      	bls.n	8001152 <DHCP_thread+0x82>
            DHCP_state = DHCP_TIMEOUT;
 800112e:	2304      	movs	r3, #4
            dhcp_stop(netif);
 8001130:	4620      	mov	r0, r4
            DHCP_state = DHCP_TIMEOUT;
 8001132:	702b      	strb	r3, [r5, #0]
            dhcp_stop(netif);
 8001134:	f007 f94c 	bl	80083d0 <dhcp_stop>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8001138:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800113c:	aa02      	add	r2, sp, #8
 800113e:	a901      	add	r1, sp, #4
 8001140:	4620      	mov	r0, r4
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8001142:	f8cd 8004 	str.w	r8, [sp, #4]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8001146:	e9cd 3902 	strd	r3, r9, [sp, #8]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800114a:	ab03      	add	r3, sp, #12
 800114c:	f008 fefe 	bl	8009f4c <netif_set_addr>
            BSP_LED_Off(LED3);
 8001150:	e7df      	b.n	8001112 <DHCP_thread+0x42>
            BSP_LED_On(LED3);
 8001152:	4630      	mov	r0, r6
 8001154:	e7e1      	b.n	800111a <DHCP_thread+0x4a>
      dhcp_stop(netif);
 8001156:	4620      	mov	r0, r4
 8001158:	f007 f93a 	bl	80083d0 <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 800115c:	2300      	movs	r3, #0
 800115e:	e7d0      	b.n	8001102 <DHCP_thread+0x32>
 8001160:	2000021c 	.word	0x2000021c
 8001164:	0a00a8c0 	.word	0x0a00a8c0
 8001168:	0100a8c0 	.word	0x0100a8c0

0800116c <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800116c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8001170:	f8df a090 	ldr.w	sl, [pc, #144]	; 8001204 <low_level_output+0x98>
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 8001174:	f04f 0800 	mov.w	r8, #0
{
 8001178:	460c      	mov	r4, r1
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800117a:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800117e:	f8da 602c 	ldr.w	r6, [sl, #44]	; 0x2c
  uint32_t framelength = 0;
 8001182:	4647      	mov	r7, r8
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8001184:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 8001186:	b92c      	cbnz	r4, 8001194 <low_level_output+0x28>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 8001188:	4639      	mov	r1, r7
 800118a:	481e      	ldr	r0, [pc, #120]	; (8001204 <low_level_output+0x98>)
 800118c:	f001 f910 	bl	80023b0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8001190:	4620      	mov	r0, r4
 8001192:	e004      	b.n	800119e <low_level_output+0x32>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001194:	6832      	ldr	r2, [r6, #0]
 8001196:	2a00      	cmp	r2, #0
 8001198:	da0f      	bge.n	80011ba <low_level_output+0x4e>
      errval = ERR_USE;
 800119a:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800119e:	f8da 3000 	ldr.w	r3, [sl]
 80011a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	0692      	lsls	r2, r2, #26
 80011aa:	d503      	bpl.n	80011b4 <low_level_output+0x48>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 80011ac:	2220      	movs	r2, #32
 80011ae:	615a      	str	r2, [r3, #20]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 80011b4:	b003      	add	sp, #12
 80011b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 80011ba:	8962      	ldrh	r2, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011bc:	4645      	mov	r5, r8
    payloadoffset = 0;
 80011be:	f04f 0900 	mov.w	r9, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011c2:	eb05 0802 	add.w	r8, r5, r2
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80011c6:	6861      	ldr	r1, [r4, #4]
 80011c8:	1958      	adds	r0, r3, r5
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011ca:	45d8      	cmp	r8, fp
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80011cc:	4449      	add	r1, r9
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80011ce:	d808      	bhi.n	80011e2 <low_level_output+0x76>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80011d0:	e9cd 2300 	strd	r2, r3, [sp]
 80011d4:	f00d f9e4 	bl	800e5a0 <memcpy>
    framelength = framelength + byteslefttocopy;
 80011d8:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 80011da:	6824      	ldr	r4, [r4, #0]
    framelength = framelength + byteslefttocopy;
 80011dc:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 80011de:	9b01      	ldr	r3, [sp, #4]
 80011e0:	e7d1      	b.n	8001186 <low_level_output+0x1a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80011e2:	ebab 0505 	sub.w	r5, fp, r5
 80011e6:	462a      	mov	r2, r5
 80011e8:	f00d f9da 	bl	800e5a0 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80011ec:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80011ee:	6833      	ldr	r3, [r6, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dbd2      	blt.n	800119a <low_level_output+0x2e>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80011f4:	44a9      	add	r9, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80011f6:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80011f8:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80011fa:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
      bufferoffset = 0;
 80011fe:	2500      	movs	r5, #0
 8001200:	e7df      	b.n	80011c2 <low_level_output+0x56>
 8001202:	bf00      	nop
 8001204:	20000220 	.word	0x20000220

08001208 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	4681      	mov	r9, r0
 800120e:	b085      	sub	sp, #20
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8001210:	4d3d      	ldr	r5, [pc, #244]	; (8001308 <ethernetif_input+0x100>)
    {
      do
      {
        LOCK_TCPIP_CORE();
 8001212:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 800130c <ethernetif_input+0x104>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8001216:	f04f 31ff 	mov.w	r1, #4294967295
 800121a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800121c:	f004 f973 	bl	8005506 <osSemaphoreWait>
 8001220:	4607      	mov	r7, r0
 8001222:	2800      	cmp	r0, #0
 8001224:	d1f7      	bne.n	8001216 <ethernetif_input+0xe>
        LOCK_TCPIP_CORE();
 8001226:	4658      	mov	r0, fp
 8001228:	f00d f934 	bl	800e494 <sys_mutex_lock>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 800122c:	4628      	mov	r0, r5
 800122e:	f001 f92f 	bl	8002490 <HAL_ETH_GetReceivedFrame_IT>
 8001232:	4606      	mov	r6, r0
 8001234:	b130      	cbz	r0, 8001244 <ethernetif_input+0x3c>
    return NULL;
 8001236:	2400      	movs	r4, #0
          {
            pbuf_free(p);
          }
        }

        UNLOCK_TCPIP_CORE();
 8001238:	4658      	mov	r0, fp
 800123a:	f00d f930 	bl	800e49e <sys_mutex_unlock>

      }while(p!=NULL);
 800123e:	2c00      	cmp	r4, #0
 8001240:	d1f1      	bne.n	8001226 <ethernetif_input+0x1e>
 8001242:	e7e8      	b.n	8001216 <ethernetif_input+0xe>
  len = EthHandle.RxFrameInfos.length;
 8001244:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  if (len > 0)
 8001246:	b9e1      	cbnz	r1, 8001282 <ethernetif_input+0x7a>
  struct pbuf *p = NULL, *q = NULL;
 8001248:	2400      	movs	r4, #0
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 800124a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 800124c:	2200      	movs	r2, #0
 800124e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001250:	4282      	cmp	r2, r0
 8001252:	d151      	bne.n	80012f8 <ethernetif_input+0xf0>
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8001254:	682b      	ldr	r3, [r5, #0]
  EthHandle.RxFrameInfos.SegCount =0;
 8001256:	63af      	str	r7, [r5, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8001258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	0612      	lsls	r2, r2, #24
 8001260:	d502      	bpl.n	8001268 <ethernetif_input+0x60>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	615a      	str	r2, [r3, #20]
    EthHandle.Instance->DMARPDR = 0;
 8001266:	609f      	str	r7, [r3, #8]
        if (p != NULL)
 8001268:	2c00      	cmp	r4, #0
 800126a:	d0e4      	beq.n	8001236 <ethernetif_input+0x2e>
          if (netif->input( p, netif) != ERR_OK )
 800126c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001270:	4649      	mov	r1, r9
 8001272:	4620      	mov	r0, r4
 8001274:	4798      	blx	r3
 8001276:	2800      	cmp	r0, #0
 8001278:	d0de      	beq.n	8001238 <ethernetif_input+0x30>
            pbuf_free(p);
 800127a:	4620      	mov	r0, r4
 800127c:	f009 f818 	bl	800a2b0 <pbuf_free>
 8001280:	e7da      	b.n	8001238 <ethernetif_input+0x30>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8001282:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8001286:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800128a:	f009 f879 	bl	800a380 <pbuf_alloc>
  if (p != NULL)
 800128e:	4604      	mov	r4, r0
 8001290:	2800      	cmp	r0, #0
 8001292:	d0d9      	beq.n	8001248 <ethernetif_input+0x40>
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8001294:	f8cd 8004 	str.w	r8, [sp, #4]
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8001298:	4680      	mov	r8, r0
 800129a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
      byteslefttocopy = q->len;
 800129e:	f8b8 e00a 	ldrh.w	lr, [r8, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012a2:	46b4      	mov	ip, r6
      payloadoffset = 0;
 80012a4:	2300      	movs	r3, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012a6:	9a01      	ldr	r2, [sp, #4]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012a8:	eb0c 060e 	add.w	r6, ip, lr
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80012b0:	eb02 010c 	add.w	r1, r2, ip
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012b8:	4418      	add	r0, r3
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80012ba:	4296      	cmp	r6, r2
 80012bc:	d808      	bhi.n	80012d0 <ethernetif_input+0xc8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80012be:	4672      	mov	r2, lr
 80012c0:	f00d f96e 	bl	800e5a0 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80012c4:	f8d8 8000 	ldr.w	r8, [r8]
 80012c8:	f1b8 0f00 	cmp.w	r8, #0
 80012cc:	d1e7      	bne.n	800129e <ethernetif_input+0x96>
 80012ce:	e7bc      	b.n	800124a <ethernetif_input+0x42>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80012d0:	f5cc 62be 	rsb	r2, ip, #1520	; 0x5f0
 80012d4:	9303      	str	r3, [sp, #12]
 80012d6:	3204      	adds	r2, #4
 80012d8:	9202      	str	r2, [sp, #8]
 80012da:	f00d f961 	bl	800e5a0 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80012de:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80012e2:	f2a6 5ef4 	subw	lr, r6, #1524	; 0x5f4
        bufferoffset = 0;
 80012e6:	f04f 0c00 	mov.w	ip, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80012ea:	f8da 3008 	ldr.w	r3, [sl, #8]
 80012ee:	9301      	str	r3, [sp, #4]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80012f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012f4:	4413      	add	r3, r2
        bufferoffset = 0;
 80012f6:	e7d6      	b.n	80012a6 <ethernetif_input+0x9e>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80012f8:	6819      	ldr	r1, [r3, #0]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 80012fa:	3201      	adds	r2, #1
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80012fc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001300:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8001302:	68db      	ldr	r3, [r3, #12]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8001304:	e7a4      	b.n	8001250 <ethernetif_input+0x48>
 8001306:	bf00      	nop
 8001308:	20000220 	.word	0x20000220
 800130c:	2000693c 	.word	0x2000693c

08001310 <HAL_ETH_MspInit>:
{
 8001310:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4c36      	ldr	r4, [pc, #216]	; (80013ec <HAL_ETH_MspInit+0xdc>)
{
 8001314:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8001316:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001318:	4835      	ldr	r0, [pc, #212]	; (80013f0 <HAL_ETH_MspInit+0xe0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800131c:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6323      	str	r3, [r4, #48]	; 0x30
 8001324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6323      	str	r3, [r4, #48]	; 0x30
 8001336:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6323      	str	r3, [r4, #48]	; 0x30
 8001348:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001352:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	6323      	str	r3, [r4, #48]	; 0x30
 800135a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800135c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001360:	9303      	str	r3, [sp, #12]
 8001362:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8001368:	2302      	movs	r3, #2
 800136a:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800136e:	230b      	movs	r3, #11
 8001370:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8001372:	2386      	movs	r3, #134	; 0x86
 8001374:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001376:	f001 fabd 	bl	80028f4 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800137e:	a907      	add	r1, sp, #28
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <HAL_ETH_MspInit+0xe4>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8001382:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001384:	f001 fab6 	bl	80028f4 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8001388:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800138a:	a907      	add	r1, sp, #28
 800138c:	481a      	ldr	r0, [pc, #104]	; (80013f8 <HAL_ETH_MspInit+0xe8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800138e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001390:	f001 fab0 	bl	80028f4 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8001394:	f642 0304 	movw	r3, #10244	; 0x2804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001398:	a907      	add	r1, sp, #28
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <HAL_ETH_MspInit+0xec>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 800139c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800139e:	f001 faa9 	bl	80028f4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80013a2:	462a      	mov	r2, r5
 80013a4:	2107      	movs	r1, #7
 80013a6:	203d      	movs	r0, #61	; 0x3d
 80013a8:	f000 fe72 	bl	8002090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80013ac:	203d      	movs	r0, #61	; 0x3d
 80013ae:	f000 fea1 	bl	80020f4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 80013b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b8:	6323      	str	r3, [r4, #48]	; 0x30
 80013ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	9b04      	ldr	r3, [sp, #16]
 80013c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013ca:	6323      	str	r3, [r4, #48]	; 0x30
 80013cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013d2:	9305      	str	r3, [sp, #20]
 80013d4:	9b05      	ldr	r3, [sp, #20]
 80013d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013dc:	6323      	str	r3, [r4, #48]	; 0x30
 80013de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013e4:	9306      	str	r3, [sp, #24]
 80013e6:	9b06      	ldr	r3, [sp, #24]
}
 80013e8:	b00d      	add	sp, #52	; 0x34
 80013ea:	bd30      	pop	{r4, r5, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40021800 	.word	0x40021800

08001400 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8001400:	4b01      	ldr	r3, [pc, #4]	; (8001408 <HAL_ETH_RxCpltCallback+0x8>)
 8001402:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001404:	f004 b8a4 	b.w	8005550 <osSemaphoreRelease>
 8001408:	20000220 	.word	0x20000220

0800140c <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800140e:	4604      	mov	r4, r0
{
 8001410:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001412:	b930      	cbnz	r0, 8001422 <ethernetif_init+0x16>
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <ethernetif_init+0xcc>)
 8001416:	f240 12d3 	movw	r2, #467	; 0x1d3
 800141a:	4930      	ldr	r1, [pc, #192]	; (80014dc <ethernetif_init+0xd0>)
 800141c:	4830      	ldr	r0, [pc, #192]	; (80014e0 <ethernetif_init+0xd4>)
 800141e:	f00d fd59 	bl	800eed4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8001422:	f247 4373 	movw	r3, #29811	; 0x7473
  EthHandle.Instance = ETH;  
 8001426:	4d2f      	ldr	r5, [pc, #188]	; (80014e4 <ethernetif_init+0xd8>)
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8001428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  netif->name[0] = IFNAME0;
 800142c:	8663      	strh	r3, [r4, #50]	; 0x32

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <ethernetif_init+0xdc>)
 8001430:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <ethernetif_init+0xe0>)
 8001434:	61a3      	str	r3, [r4, #24]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <ethernetif_init+0xe4>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 800143e:	4628      	mov	r0, r5
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8001440:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;  
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <ethernetif_init+0xe8>)
 8001446:	602b      	str	r3, [r5, #0]
  EthHandle.Init.MACAddr = macaddress;
 8001448:	ab01      	add	r3, sp, #4
 800144a:	616b      	str	r3, [r5, #20]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 800144c:	2301      	movs	r3, #1
 800144e:	e9c5 3201 	strd	r3, r2, [r5, #4]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8001452:	f44f 6200 	mov.w	r2, #2048	; 0x800
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8001456:	61ab      	str	r3, [r5, #24]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001458:	2300      	movs	r3, #0
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800145a:	60ea      	str	r2, [r5, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800145c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001460:	61eb      	str	r3, [r5, #28]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001462:	622a      	str	r2, [r5, #32]
  EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001464:	822b      	strh	r3, [r5, #16]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 8001466:	f001 f90b 	bl	8002680 <HAL_ETH_Init>
 800146a:	b928      	cbnz	r0, 8001478 <ethernetif_init+0x6c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800146c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8001478:	2304      	movs	r3, #4
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <ethernetif_init+0xec>)
 800147c:	491f      	ldr	r1, [pc, #124]	; (80014fc <ethernetif_init+0xf0>)
  netif->hwaddr[2] =  MAC_ADDR2;
 800147e:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <ethernetif_init+0xd8>)
 8001482:	f000 ff1d 	bl	80022c0 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <ethernetif_init+0xf4>)
 8001488:	2304      	movs	r3, #4
 800148a:	491e      	ldr	r1, [pc, #120]	; (8001504 <ethernetif_init+0xf8>)
 800148c:	4815      	ldr	r0, [pc, #84]	; (80014e4 <ethernetif_init+0xd8>)
 800148e:	f000 ff54 	bl	800233a <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[2] =  MAC_ADDR2;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <ethernetif_init+0xfc>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8001494:	4e1d      	ldr	r6, [pc, #116]	; (800150c <ethernetif_init+0x100>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8001496:	2101      	movs	r1, #1
 8001498:	4668      	mov	r0, sp
  osSemaphoreDef(SEM);
 800149a:	9700      	str	r7, [sp, #0]
  netif->hwaddr[2] =  MAC_ADDR2;
 800149c:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80014a0:	2306      	movs	r3, #6
 80014a2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80014a6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80014aa:	f043 030a 	orr.w	r3, r3, #10
 80014ae:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80014b2:	f004 f813 	bl	80054dc <osSemaphoreCreate>
 80014b6:	64a8      	str	r0, [r5, #72]	; 0x48
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80014b8:	ad03      	add	r5, sp, #12
 80014ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 80014c0:	4621      	mov	r1, r4
 80014c2:	a803      	add	r0, sp, #12
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80014c4:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 80014c6:	f003 ff8f 	bl	80053e8 <osThreadCreate>
  HAL_ETH_Start(&EthHandle);
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <ethernetif_init+0xd8>)
 80014cc:	f001 f9d4 	bl	8002878 <HAL_ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80014d0:	4638      	mov	r0, r7
 80014d2:	b009      	add	sp, #36	; 0x24
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0801a599 	.word	0x0801a599
 80014dc:	0801b5b6 	.word	0x0801b5b6
 80014e0:	0801a5dc 	.word	0x0801a5dc
 80014e4:	20000220 	.word	0x20000220
 80014e8:	080089d5 	.word	0x080089d5
 80014ec:	0800116d 	.word	0x0800116d
 80014f0:	08011490 	.word	0x08011490
 80014f4:	40028000 	.word	0x40028000
 80014f8:	2004d8d0 	.word	0x2004d8d0
 80014fc:	2004c080 	.word	0x2004c080
 8001500:	2004c100 	.word	0x2004c100
 8001504:	2004c000 	.word	0x2004c000
 8001508:	000205dc 	.word	0x000205dc
 800150c:	08011498 	.word	0x08011498

08001510 <sys_now>:
  * @param  None
  * @retval Time
  */
u32_t sys_now(void)
{
  return HAL_GetTick();
 8001510:	f000 bd94 	b.w	800203c <HAL_GetTick>

08001514 <setHI2C>:
  * @param conn: pointer on connection structure 
  * @retval None
  */

void setHI2C(I2C_HandleTypeDef* hi2c1){
	hi2c = hi2c1;
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <setHI2C+0x8>)
 8001516:	6018      	str	r0, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2000026c 	.word	0x2000026c

08001520 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8001520:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	data = (uint8_t)(PRESSURE_DATA_RATE_7Hz | POWER_DOWN);
 8001524:	4d6a      	ldr	r5, [pc, #424]	; (80016d0 <http_server_netconn_init+0x1b0>)
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001526:	2401      	movs	r4, #1
 8001528:	2632      	movs	r6, #50	; 0x32
	data = (uint8_t)(PRESSURE_DATA_RATE_7Hz | POWER_DOWN);
 800152a:	23a0      	movs	r3, #160	; 0xa0
 800152c:	462f      	mov	r7, r5
	  	  data = 0;
 800152e:	f04f 0800 	mov.w	r8, #0
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001532:	2220      	movs	r2, #32
 8001534:	21ba      	movs	r1, #186	; 0xba
	data = (uint8_t)(PRESSURE_DATA_RATE_7Hz | POWER_DOWN);
 8001536:	f807 3f04 	strb.w	r3, [r7, #4]!
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 800153a:	4623      	mov	r3, r4
 800153c:	9700      	str	r7, [sp, #0]
 800153e:	6828      	ldr	r0, [r5, #0]
 8001540:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001544:	f001 fca2 	bl	8002e8c <HAL_I2C_Mem_Write>
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x10, 1, &data, 1, 50);
 8001548:	4623      	mov	r3, r4
 800154a:	9700      	str	r7, [sp, #0]
 800154c:	2210      	movs	r2, #16
 800154e:	21ba      	movs	r1, #186	; 0xba
 8001550:	6828      	ldr	r0, [r5, #0]
	  	  data = 0;
 8001552:	f885 8004 	strb.w	r8, [r5, #4]
	  	  HAL_I2C_Mem_Write(hi2c, PRESSURE_SENSOR_ADDR, 0x10, 1, &data, 1, 50);
 8001556:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800155a:	f001 fc97 	bl	8002e8c <HAL_I2C_Mem_Write>

	  	  data = POWER_DOWN | 0b00000010;
	  	  HAL_I2C_Mem_Write(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 800155e:	9700      	str	r7, [sp, #0]
 8001560:	462f      	mov	r7, r5
	  	  data = POWER_DOWN | 0b00000010;
 8001562:	2382      	movs	r3, #130	; 0x82
	  	  HAL_I2C_Mem_Write(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001564:	2220      	movs	r2, #32
 8001566:	21be      	movs	r1, #190	; 0xbe
	  	  data = POWER_DOWN | 0b00000010;
 8001568:	712b      	strb	r3, [r5, #4]
	  	  HAL_I2C_Mem_Write(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 800156a:	4623      	mov	r3, r4
 800156c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001570:	f857 0b05 	ldr.w	r0, [r7], #5
 8001574:	f001 fc8a 	bl	8002e8c <HAL_I2C_Mem_Write>

	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3C, 1, &rawT0[0], 1, 50);
 8001578:	4623      	mov	r3, r4
 800157a:	9700      	str	r7, [sp, #0]
 800157c:	462f      	mov	r7, r5
 800157e:	223c      	movs	r2, #60	; 0x3c
 8001580:	21be      	movs	r1, #190	; 0xbe
 8001582:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001586:	f857 0b06 	ldr.w	r0, [r7], #6
 800158a:	f001 fd35 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3D, 1, &rawT0[1], 1, 50);
 800158e:	4623      	mov	r3, r4
 8001590:	9700      	str	r7, [sp, #0]
 8001592:	462f      	mov	r7, r5
 8001594:	223d      	movs	r2, #61	; 0x3d
 8001596:	21be      	movs	r1, #190	; 0xbe
 8001598:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800159c:	f857 0b07 	ldr.w	r0, [r7], #7
 80015a0:	f001 fd2a 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3E, 1, &rawT1[0], 1, 50);
 80015a4:	4623      	mov	r3, r4
 80015a6:	9700      	str	r7, [sp, #0]
 80015a8:	462f      	mov	r7, r5
 80015aa:	223e      	movs	r2, #62	; 0x3e
 80015ac:	21be      	movs	r1, #190	; 0xbe
 80015ae:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015b2:	f857 0b08 	ldr.w	r0, [r7], #8
 80015b6:	f001 fd1f 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3F, 1, &rawT1[1], 1, 50);
 80015ba:	4623      	mov	r3, r4
 80015bc:	9700      	str	r7, [sp, #0]
 80015be:	462f      	mov	r7, r5
 80015c0:	223f      	movs	r2, #63	; 0x3f
 80015c2:	21be      	movs	r1, #190	; 0xbe
 80015c4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015c8:	f857 0b09 	ldr.w	r0, [r7], #9
 80015cc:	f001 fd14 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x32, 1, &Tdeg[0], 1, 50);
 80015d0:	4623      	mov	r3, r4
 80015d2:	9700      	str	r7, [sp, #0]
 80015d4:	462f      	mov	r7, r5
 80015d6:	4632      	mov	r2, r6
 80015d8:	21be      	movs	r1, #190	; 0xbe
 80015da:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015de:	f857 0b0a 	ldr.w	r0, [r7], #10
 80015e2:	f001 fd09 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x33, 1, &Tdeg[1], 1, 50);
 80015e6:	4623      	mov	r3, r4
 80015e8:	9700      	str	r7, [sp, #0]
 80015ea:	462f      	mov	r7, r5
 80015ec:	2233      	movs	r2, #51	; 0x33
 80015ee:	21be      	movs	r1, #190	; 0xbe
 80015f0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80015f4:	f857 0b0b 	ldr.w	r0, [r7], #11
 80015f8:	f001 fcfe 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x35, 1, &t0t1MSB, 1, 50);
 80015fc:	4623      	mov	r3, r4
 80015fe:	9700      	str	r7, [sp, #0]
 8001600:	2235      	movs	r2, #53	; 0x35
 8001602:	21be      	movs	r1, #190	; 0xbe
 8001604:	6828      	ldr	r0, [r5, #0]

	  	  T0 = rawT0[0] + (rawT0[1] << 8);
	  	  T1 = rawT1[0] + (rawT1[1] << 8);

	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001606:	462f      	mov	r7, r5
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x35, 1, &t0t1MSB, 1, 50);
 8001608:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800160c:	f001 fcf4 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  T0 = rawT0[0] + (rawT0[1] << 8);
 8001610:	79aa      	ldrb	r2, [r5, #6]
 8001612:	796b      	ldrb	r3, [r5, #5]
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001614:	21be      	movs	r1, #190	; 0xbe
	  	  T0 = rawT0[0] + (rawT0[1] << 8);
 8001616:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	  	  T1 = rawT1[0] + (rawT1[1] << 8);
 800161a:	7a2a      	ldrb	r2, [r5, #8]
	  	  T0 = rawT0[0] + (rawT0[1] << 8);
 800161c:	81ab      	strh	r3, [r5, #12]
	  	  T1 = rawT1[0] + (rawT1[1] << 8);
 800161e:	79eb      	ldrb	r3, [r5, #7]
 8001620:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001624:	2236      	movs	r2, #54	; 0x36
	  	  T1 = rawT1[0] + (rawT1[1] << 8);
 8001626:	81eb      	strh	r3, [r5, #14]
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001628:	f105 0310 	add.w	r3, r5, #16
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4623      	mov	r3, r4
 8001630:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001634:	f857 0b11 	ldr.w	r0, [r7], #17
 8001638:	f001 fcde 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x37, 1, &rawH0[1], 1, 50);
 800163c:	4623      	mov	r3, r4
 800163e:	9700      	str	r7, [sp, #0]
 8001640:	462f      	mov	r7, r5
 8001642:	2237      	movs	r2, #55	; 0x37
 8001644:	21be      	movs	r1, #190	; 0xbe
 8001646:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800164a:	f857 0b12 	ldr.w	r0, [r7], #18
 800164e:	f001 fcd3 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3A, 1, &rawH1[0], 1, 50);
 8001652:	4623      	mov	r3, r4
 8001654:	9700      	str	r7, [sp, #0]
 8001656:	462f      	mov	r7, r5
 8001658:	223a      	movs	r2, #58	; 0x3a
 800165a:	21be      	movs	r1, #190	; 0xbe
 800165c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001660:	f857 0b13 	ldr.w	r0, [r7], #19
 8001664:	f001 fcc8 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3B, 1, &rawH1[1], 1, 50);
 8001668:	4623      	mov	r3, r4
 800166a:	9700      	str	r7, [sp, #0]
 800166c:	462f      	mov	r7, r5
 800166e:	223b      	movs	r2, #59	; 0x3b
 8001670:	21be      	movs	r1, #190	; 0xbe
 8001672:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001676:	f857 0b14 	ldr.w	r0, [r7], #20
 800167a:	f001 fcbd 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x30, 1, &Hdeg[0], 1, 50);
 800167e:	4623      	mov	r3, r4
 8001680:	9700      	str	r7, [sp, #0]
 8001682:	462f      	mov	r7, r5
 8001684:	2230      	movs	r2, #48	; 0x30
 8001686:	21be      	movs	r1, #190	; 0xbe
 8001688:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800168c:	f857 0b15 	ldr.w	r0, [r7], #21
 8001690:	f001 fcb2 	bl	8002ff8 <HAL_I2C_Mem_Read>
	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x31, 1, &Hdeg[1], 1, 50);
 8001694:	4623      	mov	r3, r4
 8001696:	2231      	movs	r2, #49	; 0x31
 8001698:	21be      	movs	r1, #190	; 0xbe
 800169a:	6828      	ldr	r0, [r5, #0]
 800169c:	9700      	str	r7, [sp, #0]
 800169e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016a2:	f001 fca9 	bl	8002ff8 <HAL_I2C_Mem_Read>

	  	  H0 = rawH0[0] + (rawH0[1] << 8);
 80016a6:	7c6a      	ldrb	r2, [r5, #17]
 80016a8:	7c2b      	ldrb	r3, [r5, #16]
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016aa:	490a      	ldr	r1, [pc, #40]	; (80016d4 <http_server_netconn_init+0x1b4>)
	  	  H0 = rawH0[0] + (rawH0[1] << 8);
 80016ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016b0:	7cea      	ldrb	r2, [r5, #19]
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016b2:	9400      	str	r4, [sp, #0]
	  	  H0 = rawH0[0] + (rawH0[1] << 8);
 80016b4:	82eb      	strh	r3, [r5, #22]
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016b6:	7cab      	ldrb	r3, [r5, #18]
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <http_server_netconn_init+0x1b8>)
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016be:	4642      	mov	r2, r8
	  	  H1 = rawH1[0] + (rawH1[1] << 8);
 80016c0:	832b      	strh	r3, [r5, #24]
	sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80016c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c6:	f00c feed 	bl	800e4a4 <sys_thread_new>
}
 80016ca:	b004      	add	sp, #16
 80016cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016d0:	2000026c 	.word	0x2000026c
 80016d4:	08001a69 	.word	0x08001a69
 80016d8:	0801a604 	.word	0x0801a604

080016dc <DynWebPage>:
		  "Calibri; font-style: normal\"><strong>Station meteo domestique</strong></span></i></b><span style=\"font-size: 13.5pt;\">"
		  "</span></p></div><div class=\"MsoNormal\" style=\"text-align: center;\" align=\"center\"><hr align=\"center\" size=\"3\" "
		  "width=\"100%\"></div><div style=\"position:absolute; width: 100%;\">";

void DynWebPage(struct netconn *conn)
{
 80016dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016e0:	ed2d 8b02 	vpush	{d8}
 80016e4:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
  //netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
  //<meta http-equiv=\"refresh\" content=\"2\">

  //HAL_Delay(1000);

  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 80016e8:	4ccc      	ldr	r4, [pc, #816]	; (8001a1c <DynWebPage+0x340>)
  portCHAR valeur[10] = {0};
 80016ea:	2100      	movs	r1, #0
{
 80016ec:	4607      	mov	r7, r0
  memset(PAGE_BODY, 0,1024);
 80016ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f2:	a808      	add	r0, sp, #32
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 80016f4:	2501      	movs	r5, #1
 80016f6:	2632      	movs	r6, #50	; 0x32
 80016f8:	46a0      	mov	r8, r4
  portCHAR valeur[10] = {0};
 80016fa:	f8ad 101c 	strh.w	r1, [sp, #28]

  	  	  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
  	  	  temperature = 42.5 + temperatureData/480.0;


  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 80016fe:	f04f 0932 	mov.w	r9, #50	; 0x32
  portCHAR valeur[10] = {0};
 8001702:	e9cd 1105 	strd	r1, r1, [sp, #20]
  memset(PAGE_BODY, 0,1024);
 8001706:	f00c ff73 	bl	800e5f0 <memset>
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 800170a:	f104 031a 	add.w	r3, r4, #26
 800170e:	2228      	movs	r2, #40	; 0x28
 8001710:	21ba      	movs	r1, #186	; 0xba
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	462b      	mov	r3, r5
 8001716:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800171a:	f858 0b1b 	ldr.w	r0, [r8], #27
 800171e:	f001 fc6b 	bl	8002ff8 <HAL_I2C_Mem_Read>
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x29, 1, &rawPressureData[1], 1, 50);
 8001722:	462b      	mov	r3, r5
 8001724:	f8cd 8000 	str.w	r8, [sp]
 8001728:	46a0      	mov	r8, r4
 800172a:	2229      	movs	r2, #41	; 0x29
 800172c:	21ba      	movs	r1, #186	; 0xba
 800172e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8001732:	f858 0b1c 	ldr.w	r0, [r8], #28
 8001736:	f001 fc5f 	bl	8002ff8 <HAL_I2C_Mem_Read>
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2A, 1, &rawPressureData[2], 1, 50);
 800173a:	462b      	mov	r3, r5
 800173c:	f8cd 8000 	str.w	r8, [sp]
 8001740:	46a0      	mov	r8, r4
 8001742:	222a      	movs	r2, #42	; 0x2a
 8001744:	21ba      	movs	r1, #186	; 0xba
 8001746:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800174a:	f858 0b1d 	ldr.w	r0, [r8], #29
 800174e:	f001 fc53 	bl	8002ff8 <HAL_I2C_Mem_Read>
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2B, 1, &rawTemperatureData[0], 1, 50);
 8001752:	462b      	mov	r3, r5
 8001754:	f8cd 8000 	str.w	r8, [sp]
 8001758:	46a0      	mov	r8, r4
 800175a:	222b      	movs	r2, #43	; 0x2b
 800175c:	21ba      	movs	r1, #186	; 0xba
 800175e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8001762:	f858 0b1e 	ldr.w	r0, [r8], #30
 8001766:	f001 fc47 	bl	8002ff8 <HAL_I2C_Mem_Read>
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2C, 1, &rawTemperatureData[1], 1, 50);
 800176a:	462b      	mov	r3, r5
 800176c:	f8cd 8000 	str.w	r8, [sp]
 8001770:	222c      	movs	r2, #44	; 0x2c
 8001772:	21ba      	movs	r1, #186	; 0xba
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 8001774:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8001a64 <DynWebPage+0x388>
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2C, 1, &rawTemperatureData[1], 1, 50);
 8001778:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800177c:	6820      	ldr	r0, [r4, #0]
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 800177e:	2501      	movs	r5, #1
  	  	  HAL_I2C_Mem_Read(hi2c, PRESSURE_SENSOR_ADDR, 0x2C, 1, &rawTemperatureData[1], 1, 50);
 8001780:	f001 fc3a 	bl	8002ff8 <HAL_I2C_Mem_Read>
  	  	  if(rawPressureData[2] & 0x80){
 8001784:	7f20      	ldrb	r0, [r4, #28]
  	  	  pressureData |= (rawPressureData[1] << 8);
 8001786:	8b63      	ldrh	r3, [r4, #26]
  	  	  if(rawPressureData[2] & 0x80){
 8001788:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800178c:	0400      	lsls	r0, r0, #16
 800178e:	2a00      	cmp	r2, #0
  	  		  pressureData |= (rawPressureData[2] << 16);
 8001790:	ea40 0003 	orr.w	r0, r0, r3
  	  		  pressureData |= (0xFF << 24);
 8001794:	bfb8      	it	lt
 8001796:	f040 407f 	orrlt.w	r0, r0, #4278190080	; 0xff000000
 800179a:	6220      	str	r0, [r4, #32]
  	  	  pressure = pressureData/4096.0;
 800179c:	f7fe fef2 	bl	8000584 <__aeabi_i2d>
 80017a0:	2200      	movs	r2, #0
 80017a2:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <DynWebPage+0x344>)
 80017a4:	f7fe ff58 	bl	8000658 <__aeabi_dmul>
 80017a8:	f7ff fa2e 	bl	8000c08 <__aeabi_d2f>
  	  	  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
 80017ac:	7fa3      	ldrb	r3, [r4, #30]
  	  	  pressure = pressureData/4096.0;
 80017ae:	6260      	str	r0, [r4, #36]	; 0x24
  	  	  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
 80017b0:	7f60      	ldrb	r0, [r4, #29]
 80017b2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80017b6:	b200      	sxth	r0, r0
 80017b8:	8520      	strh	r0, [r4, #40]	; 0x28
  	  	  temperature = 42.5 + temperatureData/480.0;
 80017ba:	f7fe fee3 	bl	8000584 <__aeabi_i2d>
 80017be:	2200      	movs	r2, #0
 80017c0:	4b98      	ldr	r3, [pc, #608]	; (8001a24 <DynWebPage+0x348>)
 80017c2:	f7ff f873 	bl	80008ac <__aeabi_ddiv>
 80017c6:	2200      	movs	r2, #0
 80017c8:	4b97      	ldr	r3, [pc, #604]	; (8001a28 <DynWebPage+0x34c>)
 80017ca:	f7fe fd8f 	bl	80002ec <__adddf3>
 80017ce:	f7ff fa1b 	bl	8000c08 <__aeabi_d2f>
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 80017d2:	462b      	mov	r3, r5
  	  	  temperature = 42.5 + temperatureData/480.0;
 80017d4:	62e0      	str	r0, [r4, #44]	; 0x2c
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 80017d6:	222a      	movs	r2, #42	; 0x2a
 80017d8:	f8cd 8000 	str.w	r8, [sp]
 80017dc:	21be      	movs	r1, #190	; 0xbe
 80017de:	e9cd 5901 	strd	r5, r9, [sp, #4]
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	f001 fc08 	bl	8002ff8 <HAL_I2C_Mem_Read>
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2B, 1, &rawTemperatureData2[1], 1, 50);
 80017e8:	eb08 0305 	add.w	r3, r8, r5
 80017ec:	222b      	movs	r2, #43	; 0x2b
 80017ee:	21be      	movs	r1, #190	; 0xbe
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	462b      	mov	r3, r5
 80017f4:	e9cd 5901 	strd	r5, r9, [sp, #4]
 80017f8:	6820      	ldr	r0, [r4, #0]
 80017fa:	f001 fbfd 	bl	8002ff8 <HAL_I2C_Mem_Read>

  	  	  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 80017fe:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  	  	  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 8001802:	f894 a00b 	ldrb.w	sl, [r4, #11]
  	  	  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 8001806:	f894 6030 	ldrb.w	r6, [r4, #48]	; 0x30
  	  	  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 800180a:	7a60      	ldrb	r0, [r4, #9]
  	  	  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 800180c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  	  	  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 8001810:	ea4f 230a 	mov.w	r3, sl, lsl #8
  	  	  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 8001814:	b236      	sxth	r6, r6
  	  	  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 8001816:	f403 7340 	and.w	r3, r3, #768	; 0x300
  	  	  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 800181a:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
  	  	  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 800181e:	8666      	strh	r6, [r4, #50]	; 0x32
  	  	  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 8001820:	4418      	add	r0, r3
  	  	  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 8001822:	f40a 7a40 	and.w	sl, sl, #768	; 0x300
  	  	  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 8001826:	f7fe fead 	bl	8000584 <__aeabi_i2d>
 800182a:	2200      	movs	r2, #0
 800182c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001830:	f7fe ff12 	bl	8000658 <__aeabi_dmul>
 8001834:	f7ff f9e8 	bl	8000c08 <__aeabi_d2f>
 8001838:	ee08 0a10 	vmov	s16, r0
 800183c:	6360      	str	r0, [r4, #52]	; 0x34
  	  	  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 800183e:	7aa0      	ldrb	r0, [r4, #10]
 8001840:	4450      	add	r0, sl
 8001842:	f7fe fe9f 	bl	8000584 <__aeabi_i2d>
 8001846:	2200      	movs	r2, #0
 8001848:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800184c:	f7fe ff04 	bl	8000658 <__aeabi_dmul>
 8001850:	f7ff f9da 	bl	8000c08 <__aeabi_d2f>
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001858:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  	  	  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 800185c:	ee07 0a90 	vmov	s15, r0
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001860:	1ab6      	subs	r6, r6, r2
  	  	  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 8001862:	63a0      	str	r0, [r4, #56]	; 0x38
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001864:	1a9b      	subs	r3, r3, r2
	return (b - a) * alpha + a;
 8001866:	ee77 7ac8 	vsub.f32	s15, s15, s16
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 800186a:	ee07 6a10 	vmov	s14, r6

  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 800186e:	2228      	movs	r2, #40	; 0x28
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001870:	ee06 3a90 	vmov	s13, r3
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 8001874:	f108 0310 	add.w	r3, r8, #16
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 8001878:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 800187c:	21be      	movs	r1, #190	; 0xbe
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 800187e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001882:	ee87 6a26 	vdiv.f32	s12, s14, s13
	return (b - a) * alpha + a;
 8001886:	eea6 8a27 	vfma.f32	s16, s12, s15
  	  	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 800188a:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	462b      	mov	r3, r5
 8001892:	e9cd 5901 	strd	r5, r9, [sp, #4]
 8001896:	6820      	ldr	r0, [r4, #0]
 8001898:	f001 fbae 	bl	8002ff8 <HAL_I2C_Mem_Read>
  	  	  HAL_I2C_Mem_Read(hi2c, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x29, 1, &rawHumidityData[1], 1, 50);
 800189c:	f108 0311 	add.w	r3, r8, #17
 80018a0:	2229      	movs	r2, #41	; 0x29
 80018a2:	21be      	movs	r1, #190	; 0xbe
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	462b      	mov	r3, r5
 80018a8:	e9cd 5901 	strd	r5, r9, [sp, #4]
 80018ac:	6820      	ldr	r0, [r4, #0]
 80018ae:	f001 fba3 	bl	8002ff8 <HAL_I2C_Mem_Read>

  	  	  humidityData = rawHumidityData[0] + (rawHumidityData[1] << 8);
 80018b2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80018b6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  	  	  Halpha = (float)(humidityData - H0)/(H1-H0);
  	  	  humidity = lerp(Hdeg[0]/2.0, Hdeg[1]/2.0, Halpha);
 80018ba:	7d20      	ldrb	r0, [r4, #20]
  	  	  humidityData = rawHumidityData[0] + (rawHumidityData[1] << 8);
 80018bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  	  	  Halpha = (float)(humidityData - H0)/(H1-H0);
 80018c0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  	  	  humidityData = rawHumidityData[0] + (rawHumidityData[1] << 8);
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  	  	  Halpha = (float)(humidityData - H0)/(H1-H0);
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018da:	ee07 3a10 	vmov	s14, r3
 80018de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018e2:	eec7 8a87 	vdiv.f32	s17, s15, s14
 80018e6:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
  	  	  humidity = lerp(Hdeg[0]/2.0, Hdeg[1]/2.0, Halpha);
 80018ea:	f7fe fe4b 	bl	8000584 <__aeabi_i2d>
 80018ee:	2200      	movs	r2, #0
 80018f0:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <DynWebPage+0x350>)
 80018f2:	f7fe feb1 	bl	8000658 <__aeabi_dmul>
 80018f6:	f7ff f987 	bl	8000c08 <__aeabi_d2f>
 80018fa:	ee08 0a10 	vmov	s16, r0
 80018fe:	7d60      	ldrb	r0, [r4, #21]
 8001900:	f7fe fe40 	bl	8000584 <__aeabi_i2d>
 8001904:	2200      	movs	r2, #0
 8001906:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <DynWebPage+0x350>)
 8001908:	f7fe fea6 	bl	8000658 <__aeabi_dmul>
 800190c:	f7ff f97c 	bl	8000c08 <__aeabi_d2f>
	return (b - a) * alpha + a;
 8001910:	ee07 0a90 	vmov	s15, r0

  float t1 = 0.5;
  float t2 = 0.7;
  float t3 = 5.1;

  sprintf(valeur, "%.1f %s", temperature2, "deg C");
 8001914:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	return (b - a) * alpha + a;
 8001916:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800191a:	eea8 8aa7 	vfma.f32	s16, s17, s15
  	  	  humidity = lerp(Hdeg[0]/2.0, Hdeg[1]/2.0, Halpha);
 800191e:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
  sprintf(valeur, "%.1f %s", temperature2, "deg C");
 8001922:	f7fe fe41 	bl	80005a8 <__aeabi_f2d>
 8001926:	460b      	mov	r3, r1
 8001928:	4941      	ldr	r1, [pc, #260]	; (8001a30 <DynWebPage+0x354>)
 800192a:	4602      	mov	r2, r0
 800192c:	a805      	add	r0, sp, #20
 800192e:	9100      	str	r1, [sp, #0]
 8001930:	4940      	ldr	r1, [pc, #256]	; (8001a34 <DynWebPage+0x358>)
 8001932:	f00d fb25 	bl	800ef80 <siprintf>
  strcat((char *)PAGE_BODY, "<div style=\"position: relative; top:0px; float: left; width: 33%; text-align: center; font-size:30px;\"> Temperature : ");
 8001936:	4940      	ldr	r1, [pc, #256]	; (8001a38 <DynWebPage+0x35c>)
 8001938:	a808      	add	r0, sp, #32
 800193a:	f00d fb41 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, valeur);
 800193e:	a905      	add	r1, sp, #20
 8001940:	a808      	add	r0, sp, #32
 8001942:	f00d fb3d 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001946:	493d      	ldr	r1, [pc, #244]	; (8001a3c <DynWebPage+0x360>)
 8001948:	a808      	add	r0, sp, #32
 800194a:	f00d fb39 	bl	800efc0 <strcat>
  sprintf(valeur, "%.1f %s", pressure, "Pa");
 800194e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001950:	f7fe fe2a 	bl	80005a8 <__aeabi_f2d>
 8001954:	460b      	mov	r3, r1
 8001956:	493a      	ldr	r1, [pc, #232]	; (8001a40 <DynWebPage+0x364>)
 8001958:	4602      	mov	r2, r0
 800195a:	a805      	add	r0, sp, #20
 800195c:	9100      	str	r1, [sp, #0]
 800195e:	4935      	ldr	r1, [pc, #212]	; (8001a34 <DynWebPage+0x358>)
 8001960:	f00d fb0e 	bl	800ef80 <siprintf>
  strcat((char *)PAGE_BODY, "<div style=\"position: relative; top:0px; float: left; width: 33%; text-align: center; font-size:30px;\"> Pression : ");
 8001964:	4937      	ldr	r1, [pc, #220]	; (8001a44 <DynWebPage+0x368>)
 8001966:	a808      	add	r0, sp, #32
 8001968:	f00d fb2a 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, valeur);
 800196c:	a905      	add	r1, sp, #20
 800196e:	a808      	add	r0, sp, #32
 8001970:	f00d fb26 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 8001974:	4931      	ldr	r1, [pc, #196]	; (8001a3c <DynWebPage+0x360>)
 8001976:	a808      	add	r0, sp, #32
 8001978:	f00d fb22 	bl	800efc0 <strcat>
  sprintf(valeur, "%.1f %s", humidity, "%");
 800197c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800197e:	f7fe fe13 	bl	80005a8 <__aeabi_f2d>
 8001982:	460b      	mov	r3, r1
 8001984:	4930      	ldr	r1, [pc, #192]	; (8001a48 <DynWebPage+0x36c>)
 8001986:	4602      	mov	r2, r0
 8001988:	a805      	add	r0, sp, #20
  strcat((char *)PAGE_BODY, "<div style=\"padding-top: 150px; text-align: center; font-size: 40px; width 50%; float: left;position: relative;\">Il va faire ");
    strcat((char *)PAGE_BODY, "</div>");
  strcat((char *)PAGE_BODY, "</div>");

  strcat((char *)PAGE_BODY, "</body></html>");
  netconn_write(conn, header, strlen(header), NETCONN_COPY);
 800198a:	2400      	movs	r4, #0
  sprintf(valeur, "%.1f %s", humidity, "%");
 800198c:	9100      	str	r1, [sp, #0]
 800198e:	4929      	ldr	r1, [pc, #164]	; (8001a34 <DynWebPage+0x358>)
 8001990:	f00d faf6 	bl	800ef80 <siprintf>
  strcat((char *)PAGE_BODY, "<div style=\"position: relative; top:0px; float: left; width: 33%; text-align: center; font-size:30px;\"> Humidite : ");
 8001994:	492d      	ldr	r1, [pc, #180]	; (8001a4c <DynWebPage+0x370>)
 8001996:	a808      	add	r0, sp, #32
 8001998:	f00d fb12 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, valeur);
 800199c:	a905      	add	r1, sp, #20
 800199e:	a808      	add	r0, sp, #32
 80019a0:	f00d fb0e 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 80019a4:	4925      	ldr	r1, [pc, #148]	; (8001a3c <DynWebPage+0x360>)
 80019a6:	a808      	add	r0, sp, #32
 80019a8:	f00d fb0a 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 80019ac:	4923      	ldr	r1, [pc, #140]	; (8001a3c <DynWebPage+0x360>)
 80019ae:	a808      	add	r0, sp, #32
 80019b0:	f00d fb06 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "<div style=\"padding-top: 150px; text-align: center; font-size: 40px\">Prevision :");
 80019b4:	4926      	ldr	r1, [pc, #152]	; (8001a50 <DynWebPage+0x374>)
 80019b6:	a808      	add	r0, sp, #32
 80019b8:	f00d fb02 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "<div style=\"padding-top: 150px; text-align: center; font-size: 40px; width 50%; float: left;position: relative;\">Il fait ");
 80019bc:	4925      	ldr	r1, [pc, #148]	; (8001a54 <DynWebPage+0x378>)
 80019be:	a808      	add	r0, sp, #32
 80019c0:	f00d fafe 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 80019c4:	491d      	ldr	r1, [pc, #116]	; (8001a3c <DynWebPage+0x360>)
 80019c6:	a808      	add	r0, sp, #32
 80019c8:	f00d fafa 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "<div style=\"padding-top: 150px; text-align: center; font-size: 40px; width 50%; float: left;position: relative;\">Il va faire ");
 80019cc:	4922      	ldr	r1, [pc, #136]	; (8001a58 <DynWebPage+0x37c>)
 80019ce:	a808      	add	r0, sp, #32
 80019d0:	f00d faf6 	bl	800efc0 <strcat>
    strcat((char *)PAGE_BODY, "</div>");
 80019d4:	4919      	ldr	r1, [pc, #100]	; (8001a3c <DynWebPage+0x360>)
 80019d6:	a808      	add	r0, sp, #32
 80019d8:	f00d faf2 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "</div>");
 80019dc:	4917      	ldr	r1, [pc, #92]	; (8001a3c <DynWebPage+0x360>)
 80019de:	a808      	add	r0, sp, #32
 80019e0:	f00d faee 	bl	800efc0 <strcat>
  strcat((char *)PAGE_BODY, "</body></html>");
 80019e4:	491d      	ldr	r1, [pc, #116]	; (8001a5c <DynWebPage+0x380>)
 80019e6:	a808      	add	r0, sp, #32
 80019e8:	f00d faea 	bl	800efc0 <strcat>
  netconn_write(conn, header, strlen(header), NETCONN_COPY);
 80019ec:	462b      	mov	r3, r5
 80019ee:	f240 2253 	movw	r2, #595	; 0x253
 80019f2:	491b      	ldr	r1, [pc, #108]	; (8001a60 <DynWebPage+0x384>)
 80019f4:	4638      	mov	r0, r7
 80019f6:	9400      	str	r4, [sp, #0]
 80019f8:	f004 fa0c 	bl	8005e14 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 80019fc:	a808      	add	r0, sp, #32
 80019fe:	f7fe fc11 	bl	8000224 <strlen>
 8001a02:	462b      	mov	r3, r5
 8001a04:	4602      	mov	r2, r0
 8001a06:	a908      	add	r1, sp, #32
 8001a08:	4638      	mov	r0, r7
 8001a0a:	9400      	str	r4, [sp, #0]
 8001a0c:	f004 fa02 	bl	8005e14 <netconn_write_partly>

}
 8001a10:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 8001a14:	ecbd 8b02 	vpop	{d8}
 8001a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a1c:	2000026c 	.word	0x2000026c
 8001a20:	3f300000 	.word	0x3f300000
 8001a24:	407e0000 	.word	0x407e0000
 8001a28:	40454000 	.word	0x40454000
 8001a2c:	3fe00000 	.word	0x3fe00000
 8001a30:	0801a611 	.word	0x0801a611
 8001a34:	0801a609 	.word	0x0801a609
 8001a38:	0801a617 	.word	0x0801a617
 8001a3c:	0801a68e 	.word	0x0801a68e
 8001a40:	0801a695 	.word	0x0801a695
 8001a44:	0801a698 	.word	0x0801a698
 8001a48:	0801a70c 	.word	0x0801a70c
 8001a4c:	0801a70e 	.word	0x0801a70e
 8001a50:	0801a782 	.word	0x0801a782
 8001a54:	0801a7d3 	.word	0x0801a7d3
 8001a58:	0801a84d 	.word	0x0801a84d
 8001a5c:	0801a8cb 	.word	0x0801a8cb
 8001a60:	080114ac 	.word	0x080114ac
 8001a64:	2000029c 	.word	0x2000029c

08001a68 <http_server_netconn_thread>:
  conn = netconn_new(NETCONN_TCP);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2010      	movs	r0, #16
{ 
 8001a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  conn = netconn_new(NETCONN_TCP);
 8001a70:	4611      	mov	r1, r2
{ 
 8001a72:	b08c      	sub	sp, #48	; 0x30
  conn = netconn_new(NETCONN_TCP);
 8001a74:	f004 f8a6 	bl	8005bc4 <netconn_new_with_proto_and_callback>
  if (conn!= NULL)
 8001a78:	4606      	mov	r6, r0
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	f000 8082 	beq.w	8001b84 <http_server_netconn_thread+0x11c>
    err = netconn_bind(conn, NULL, 80);
 8001a80:	2250      	movs	r2, #80	; 0x50
 8001a82:	2100      	movs	r1, #0
 8001a84:	f004 f916 	bl	8005cb4 <netconn_bind>
    if (err == ERR_OK)
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d17b      	bne.n	8001b84 <http_server_netconn_thread+0x11c>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8001a8c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8001bac <http_server_netconn_thread+0x144>
      netconn_listen(conn);
 8001a90:	21ff      	movs	r1, #255	; 0xff
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8001a92:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001bb0 <http_server_netconn_thread+0x148>
      netconn_listen(conn);
 8001a96:	4630      	mov	r0, r6
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8001a98:	f8df a118 	ldr.w	sl, [pc, #280]	; 8001bb4 <http_server_netconn_thread+0x14c>
      netconn_listen(conn);
 8001a9c:	f004 f930 	bl	8005d00 <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 8001aa0:	a904      	add	r1, sp, #16
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	f004 f9d4 	bl	8005e50 <netconn_accept>
        if(accept_err == ERR_OK)
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d1f9      	bne.n	8001aa0 <http_server_netconn_thread+0x38>
          http_server_serve(newconn);
 8001aac:	9c04      	ldr	r4, [sp, #16]
  recv_err = netconn_recv(conn, &inbuf);
 8001aae:	a905      	add	r1, sp, #20
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f004 fae5 	bl	8006080 <netconn_recv>
  if (recv_err == ERR_OK)
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d146      	bne.n	8001b48 <http_server_netconn_thread+0xe0>
    if (netconn_err(conn) == ERR_OK) 
 8001aba:	4620      	mov	r0, r4
 8001abc:	f004 f9b9 	bl	8005e32 <netconn_err>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d141      	bne.n	8001b48 <http_server_netconn_thread+0xe0>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8001ac4:	f10d 020e 	add.w	r2, sp, #14
 8001ac8:	a906      	add	r1, sp, #24
 8001aca:	9805      	ldr	r0, [sp, #20]
 8001acc:	f005 fad6 	bl	800707c <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8001ad0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d937      	bls.n	8001b48 <http_server_netconn_thread+0xe0>
 8001ad8:	9d06      	ldr	r5, [sp, #24]
 8001ada:	2205      	movs	r2, #5
 8001adc:	4641      	mov	r1, r8
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f00d fa7d 	bl	800efde <strncmp>
 8001ae4:	bb80      	cbnz	r0, 8001b48 <http_server_netconn_thread+0xe0>
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8001ae6:	221b      	movs	r2, #27
 8001ae8:	4649      	mov	r1, r9
 8001aea:	4628      	mov	r0, r5
 8001aec:	f00d fa77 	bl	800efde <strncmp>
 8001af0:	4607      	mov	r7, r0
 8001af2:	b970      	cbnz	r0, 8001b12 <http_server_netconn_thread+0xaa>
          fs_open(&file, "/STM32F7xx_files/ST.gif"); 
 8001af4:	4925      	ldr	r1, [pc, #148]	; (8001b8c <http_server_netconn_thread+0x124>)
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8001af6:	a807      	add	r0, sp, #28
 8001af8:	f00c fcf6 	bl	800e4e8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001afc:	463b      	mov	r3, r7
 8001afe:	9700      	str	r7, [sp, #0]
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001b00:	4620      	mov	r0, r4
 8001b02:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8001b06:	f004 f985 	bl	8005e14 <netconn_write_partly>
          fs_close(&file);
 8001b0a:	a807      	add	r0, sp, #28
 8001b0c:	f00c fd0c 	bl	800e528 <fs_close>
 8001b10:	e01a      	b.n	8001b48 <http_server_netconn_thread+0xe0>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8001b12:	221e      	movs	r2, #30
 8001b14:	4651      	mov	r1, sl
 8001b16:	4628      	mov	r0, r5
 8001b18:	f00d fa61 	bl	800efde <strncmp>
 8001b1c:	4607      	mov	r7, r0
 8001b1e:	b908      	cbnz	r0, 8001b24 <http_server_netconn_thread+0xbc>
          fs_open(&file, "/STM32F7xx_files/stm32.jpg"); 
 8001b20:	491b      	ldr	r1, [pc, #108]	; (8001b90 <http_server_netconn_thread+0x128>)
 8001b22:	e7e8      	b.n	8001af6 <http_server_netconn_thread+0x8e>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/logo.jpg", 29) == 0)                                           
 8001b24:	221d      	movs	r2, #29
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <http_server_netconn_thread+0x12c>)
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f00d fa58 	bl	800efde <strncmp>
 8001b2e:	4607      	mov	r7, r0
 8001b30:	b908      	cbnz	r0, 8001b36 <http_server_netconn_thread+0xce>
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8001b32:	4919      	ldr	r1, [pc, #100]	; (8001b98 <http_server_netconn_thread+0x130>)
 8001b34:	e7df      	b.n	8001af6 <http_server_netconn_thread+0x8e>
        else if(strncmp(buf, "GET /STM32F7xxTASKS.html", 24) == 0)
 8001b36:	2218      	movs	r2, #24
 8001b38:	4918      	ldr	r1, [pc, #96]	; (8001b9c <http_server_netconn_thread+0x134>)
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f00d fa4f 	bl	800efde <strncmp>
 8001b40:	b960      	cbnz	r0, 8001b5c <http_server_netconn_thread+0xf4>
        	DynWebPage(conn);
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff fdca 	bl	80016dc <DynWebPage>
  netconn_close(conn);
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f004 f96f 	bl	8005e2c <netconn_close>
  netbuf_delete(inbuf);
 8001b4e:	9805      	ldr	r0, [sp, #20]
 8001b50:	f005 fa82 	bl	8007058 <netbuf_delete>
          netconn_delete(newconn);
 8001b54:	9804      	ldr	r0, [sp, #16]
 8001b56:	f004 f89f 	bl	8005c98 <netconn_delete>
 8001b5a:	e7a1      	b.n	8001aa0 <http_server_netconn_thread+0x38>
        else if((strncmp(buf, "GET /index.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0))
 8001b5c:	4910      	ldr	r1, [pc, #64]	; (8001ba0 <http_server_netconn_thread+0x138>)
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f7fe fb56 	bl	8000210 <strcmp>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d0ec      	beq.n	8001b42 <http_server_netconn_thread+0xda>
 8001b68:	2206      	movs	r2, #6
 8001b6a:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <http_server_netconn_thread+0x13c>)
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f00d fa36 	bl	800efde <strncmp>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d0e5      	beq.n	8001b42 <http_server_netconn_thread+0xda>
          fs_open(&file, "/404.html"); 
 8001b76:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <http_server_netconn_thread+0x140>)
 8001b78:	a807      	add	r0, sp, #28
 8001b7a:	f00c fcb5 	bl	800e4e8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	e7bd      	b.n	8001b00 <http_server_netconn_thread+0x98>
}
 8001b84:	b00c      	add	sp, #48	; 0x30
 8001b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b8a:	bf00      	nop
 8001b8c:	0801a8e4 	.word	0x0801a8e4
 8001b90:	0801a900 	.word	0x0801a900
 8001b94:	0801a91b 	.word	0x0801a91b
 8001b98:	0801a91f 	.word	0x0801a91f
 8001b9c:	0801a939 	.word	0x0801a939
 8001ba0:	0801a952 	.word	0x0801a952
 8001ba4:	0801a962 	.word	0x0801a962
 8001ba8:	0801a969 	.word	0x0801a969
 8001bac:	0801a8da 	.word	0x0801a8da
 8001bb0:	0801a8e0 	.word	0x0801a8e0
 8001bb4:	0801a8fc 	.word	0x0801a8fc

08001bb8 <StartThread>:
  * @retval None
  */
static void StartThread(void const * argument)
{ 
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001bb8:	2100      	movs	r1, #0
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* USE_DHCP */
  
  /* add the network interface */    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001bba:	4c1a      	ldr	r4, [pc, #104]	; (8001c24 <StartThread+0x6c>)
{ 
 8001bbc:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 8001bbe:	4608      	mov	r0, r1
{ 
 8001bc0:	b08d      	sub	sp, #52	; 0x34
  tcpip_init(NULL, NULL);
 8001bc2:	f005 fb33 	bl	800722c <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <StartThread+0x70>)
  ip_addr_set_zero_ip4(&ipaddr);
 8001bc8:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001bca:	a905      	add	r1, sp, #20
 8001bcc:	9202      	str	r2, [sp, #8]
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4a16      	ldr	r2, [pc, #88]	; (8001c2c <StartThread+0x74>)
  ip_addr_set_zero_ip4(&gw);
 8001bd2:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001bd4:	e9cd 3200 	strd	r3, r2, [sp]
  ip_addr_set_zero_ip4(&netmask);
 8001bd8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001bdc:	aa06      	add	r2, sp, #24
 8001bde:	ab07      	add	r3, sp, #28
 8001be0:	f008 f9e0 	bl	8009fa4 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001be4:	4620      	mov	r0, r4
 8001be6:	f008 fa6d 	bl	800a0c4 <netif_set_default>
  
  if (netif_is_link_up(&gnetif))
 8001bea:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8001bee:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8001bf0:	075b      	lsls	r3, r3, #29
 8001bf2:	d514      	bpl.n	8001c1e <StartThread+0x66>
    netif_set_up(&gnetif);
 8001bf4:	f008 fa6c 	bl	800a0d0 <netif_set_up>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001bf8:	4d0d      	ldr	r5, [pc, #52]	; (8001c30 <StartThread+0x78>)
  http_server_netconn_init();
 8001bfa:	f7ff fc91 	bl	8001520 <http_server_netconn_init>
  User_notification(&gnetif);
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <StartThread+0x6c>)
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001c00:	ac07      	add	r4, sp, #28
  User_notification(&gnetif);
 8001c02:	f7ff fa55 	bl	80010b0 <User_notification>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0a:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8001c0c:	a807      	add	r0, sp, #28
 8001c0e:	4905      	ldr	r1, [pc, #20]	; (8001c24 <StartThread+0x6c>)
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001c10:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8001c12:	f003 fbe9 	bl	80053e8 <osThreadCreate>
    osThreadTerminate(NULL);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f003 fbfe 	bl	8005418 <osThreadTerminate>
  for( ;; )
 8001c1c:	e7fb      	b.n	8001c16 <StartThread+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8001c1e:	f008 fa71 	bl	800a104 <netif_set_down>
 8001c22:	e7e9      	b.n	8001bf8 <StartThread+0x40>
 8001c24:	200002f0 	.word	0x200002f0
 8001c28:	080071f1 	.word	0x080071f1
 8001c2c:	0800140d 	.word	0x0800140d
 8001c30:	08011700 	.word	0x08011700

08001c34 <MX_I2C1_Init>:
{
 8001c34:	b510      	push	{r4, lr}
  hi2c1.Init.Timing = 0x00808CD2;
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <MX_I2C1_Init+0x44>)
  hi2c1.Instance = I2C1;
 8001c38:	4c10      	ldr	r4, [pc, #64]	; (8001c7c <MX_I2C1_Init+0x48>)
  hi2c1.Init.Timing = 0x00808CD2;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_I2C1_Init+0x4c>)
 8001c3c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	2300      	movs	r3, #0
 8001c42:	2201      	movs	r2, #1
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c44:	65a3      	str	r3, [r4, #88]	; 0x58
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c46:	e9c4 3210 	strd	r3, r2, [r4, #64]	; 0x40
  hi2c1.Init.OwnAddress2 = 0;
 8001c4a:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c52:	3438      	adds	r4, #56	; 0x38
 8001c54:	4620      	mov	r0, r4
 8001c56:	f001 f8c8 	bl	8002dea <HAL_I2C_Init>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	b100      	cbz	r0, 8001c60 <MX_I2C1_Init+0x2c>
  * @retval None
  */
static void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 8001c5e:	e7fe      	b.n	8001c5e <MX_I2C1_Init+0x2a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c60:	4620      	mov	r0, r4
 8001c62:	f001 fa85 	bl	8003170 <HAL_I2CEx_ConfigAnalogFilter>
 8001c66:	4601      	mov	r1, r0
 8001c68:	b100      	cbz	r0, 8001c6c <MX_I2C1_Init+0x38>
  while(1)
 8001c6a:	e7fe      	b.n	8001c6a <MX_I2C1_Init+0x36>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f001 faa5 	bl	80031bc <HAL_I2CEx_ConfigDigitalFilter>
 8001c72:	b100      	cbz	r0, 8001c76 <MX_I2C1_Init+0x42>
  while(1)
 8001c74:	e7fe      	b.n	8001c74 <MX_I2C1_Init+0x40>
}
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	200002f0 	.word	0x200002f0
 8001c80:	00808cd2 	.word	0x00808cd2

08001c84 <HAL_I2C_MspInit>:
{
 8001c84:	b510      	push	{r4, lr}
 8001c86:	b0a8      	sub	sp, #160	; 0xa0
 8001c88:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	2214      	movs	r2, #20
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	a802      	add	r0, sp, #8
 8001c90:	f00c fcae 	bl	800e5f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c94:	2284      	movs	r2, #132	; 0x84
 8001c96:	2100      	movs	r1, #0
 8001c98:	a807      	add	r0, sp, #28
 8001c9a:	f00c fca9 	bl	800e5f0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c9e:	6822      	ldr	r2, [r4, #0]
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_I2C_MspInit+0x78>)
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d128      	bne.n	8001cf8 <HAL_I2C_MspInit+0x74>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001caa:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cac:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cae:	f001 fda3 	bl	80037f8 <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	b100      	cbz	r0, 8001cb6 <HAL_I2C_MspInit+0x32>
  while(1)
 8001cb4:	e7fe      	b.n	8001cb4 <HAL_I2C_MspInit+0x30>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	4c12      	ldr	r4, [pc, #72]	; (8001d00 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb8:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbc:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8001cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	a902      	add	r1, sp, #8
 8001ce2:	f000 fe07 	bl	80028f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cec:	6423      	str	r3, [r4, #64]	; 0x40
 8001cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	9b01      	ldr	r3, [sp, #4]
}
 8001cf8:	b028      	add	sp, #160	; 0xa0
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020400 	.word	0x40020400

08001d08 <main>:
{
 8001d08:	b500      	push	{lr}
 8001d0a:	b093      	sub	sp, #76	; 0x4c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d0c:	f240 1501 	movw	r5, #257	; 0x101
  HAL_MPU_Disable();
 8001d10:	f000 f9fe 	bl	8002110 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d14:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d16:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d18:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d1a:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d1e:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d22:	9509      	str	r5, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d24:	e9cd 4307 	strd	r4, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d28:	f000 fa10 	bl	800214c <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d2c:	f8ad 5018 	strh.w	r5, [sp, #24]
  MPU_InitStruct.BaseAddress = 0x2004C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <main+0x158>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d32:	a806      	add	r0, sp, #24
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001d34:	4d4b      	ldr	r5, [pc, #300]	; (8001e64 <main+0x15c>)
 8001d36:	e9cd 5307 	strd	r5, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d40:	f000 fa04 	bl	800214c <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d44:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8001d48:	9507      	str	r5, [sp, #28]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d4a:	4d47      	ldr	r5, [pc, #284]	; (8001e68 <main+0x160>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d4c:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d4e:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d52:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8001d56:	e9cd 5308 	strd	r5, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d5a:	f000 f9f7 	bl	800214c <HAL_MPU_ConfigRegion>
  
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d5e:	2004      	movs	r0, #4
 8001d60:	f000 f9e4 	bl	800212c <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d68:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d6c:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <main+0x164>)
 8001d6e:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d76:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d7a:	6953      	ldr	r3, [r2, #20]
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d86:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001d8a:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d96:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d9a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d9e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001da2:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001da4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001da8:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001daa:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001dae:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001db0:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001db4:	d2f9      	bcs.n	8001daa <main+0xa2>
    } while(sets-- != 0U);
 8001db6:	3b20      	subs	r3, #32
 8001db8:	f113 0f20 	cmn.w	r3, #32
 8001dbc:	d1f2      	bne.n	8001da4 <main+0x9c>
 8001dbe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001dc2:	6953      	ldr	r3, [r2, #20]
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6153      	str	r3, [r2, #20]
 8001dca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dce:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8001dd2:	f000 f91c 	bl	800200e <HAL_Init>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd6:	2402      	movs	r4, #2
  MX_I2C1_Init();
 8001dd8:	f7ff ff2c 	bl	8001c34 <MX_I2C1_Init>
  setHI2C(&hi2c1);
 8001ddc:	4824      	ldr	r0, [pc, #144]	; (8001e70 <main+0x168>)
 8001dde:	f7ff fb99 	bl	8001514 <setHI2C>
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001de2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001de6:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001de8:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dea:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001dec:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001df0:	2300      	movs	r3, #0
 8001df2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001df8:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001dfc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e00:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e04:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e06:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e08:	9311      	str	r3, [sp, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0a:	f001 fa35 	bl	8003278 <HAL_RCC_OscConfig>
 8001e0e:	b100      	cbz	r0, 8001e12 <main+0x10a>
  while(1)
 8001e10:	e7fe      	b.n	8001e10 <main+0x108>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e12:	f001 f9f9 	bl	8003208 <HAL_PWREx_EnableOverDrive>
 8001e16:	b100      	cbz	r0, 8001e1a <main+0x112>
  while(1)
 8001e18:	e7fe      	b.n	8001e18 <main+0x110>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e1a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001e1c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e20:	9003      	str	r0, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e22:	2107      	movs	r1, #7
 8001e24:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e32:	f001 fc0d 	bl	8003650 <HAL_RCC_ClockConfig>
 8001e36:	4606      	mov	r6, r0
 8001e38:	b100      	cbz	r0, 8001e3c <main+0x134>
  while(1)
 8001e3a:	e7fe      	b.n	8001e3a <main+0x132>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001e3c:	4d0d      	ldr	r5, [pc, #52]	; (8001e74 <main+0x16c>)
  BSP_LED_Init(LED1);
 8001e3e:	f000 f873 	bl	8001f28 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001e42:	4620      	mov	r0, r4
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001e44:	ac06      	add	r4, sp, #24
  BSP_LED_Init(LED3);
 8001e46:	f000 f86f 	bl	8001f28 <BSP_LED_Init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4e:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 8001e50:	4631      	mov	r1, r6
 8001e52:	a806      	add	r0, sp, #24
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001e54:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001e56:	f003 fac7 	bl	80053e8 <osThreadCreate>
  osKernelStart();
 8001e5a:	f003 fab9 	bl	80053d0 <osKernelStart>
  for( ;; );
 8001e5e:	e7fe      	b.n	8001e5e <main+0x156>
 8001e60:	0301000d 	.word	0x0301000d
 8001e64:	2004c000 	.word	0x2004c000
 8001e68:	03000007 	.word	0x03000007
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	20000328 	.word	0x20000328
 8001e74:	08011714 	.word	0x08011714

08001e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001e78:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2036      	movs	r0, #54	; 0x36
{
 8001e7e:	b510      	push	{r4, lr}
 8001e80:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001e82:	f000 f905 	bl	8002090 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e86:	2036      	movs	r0, #54	; 0x36
 8001e88:	f000 f934 	bl	80020f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8e:	a901      	add	r1, sp, #4
 8001e90:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e94:	f042 0210 	orr.w	r2, r2, #16
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	9302      	str	r3, [sp, #8]
 8001ea2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea4:	f001 fc8a 	bl	80037bc <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001ea8:	9b06      	ldr	r3, [sp, #24]
 8001eaa:	b9c3      	cbnz	r3, 8001ede <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eac:	f001 fc76 	bl	800379c <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001eb0:	4c0f      	ldr	r4, [pc, #60]	; (8001ef0 <HAL_InitTick+0x78>)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_InitTick+0x7c>)
 8001eb4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001eb6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001eba:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_InitTick+0x80>)
 8001ebe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ec2:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8001ec4:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001ec6:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001ec8:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8001eca:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001ece:	f002 f875 	bl	8003fbc <HAL_TIM_Base_Init>
 8001ed2:	b940      	cbnz	r0, 8001ee6 <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f001 ff19 	bl	8003d0c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001eda:	b008      	add	sp, #32
 8001edc:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ede:	f001 fc5d 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8001ee2:	0040      	lsls	r0, r0, #1
 8001ee4:	e7e4      	b.n	8001eb0 <HAL_InitTick+0x38>
  return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	e7f7      	b.n	8001eda <HAL_InitTick+0x62>
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	20000374 	.word	0x20000374
 8001ef4:	40001000 	.word	0x40001000
 8001ef8:	000f4240 	.word	0x000f4240

08001efc <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8001efc:	f000 b892 	b.w	8002024 <HAL_IncTick>

08001f00 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001f00:	4801      	ldr	r0, [pc, #4]	; (8001f08 <TIM6_DAC_IRQHandler+0x8>)
 8001f02:	f001 bf45 	b.w	8003d90 <HAL_TIM_IRQHandler>
 8001f06:	bf00      	nop
 8001f08:	20000374 	.word	0x20000374

08001f0c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001f0c:	4770      	bx	lr

08001f0e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler>

08001f10 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler>

08001f12 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler>

08001f14 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler>

08001f16 <DebugMon_Handler>:
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8001f18:	f003 bb83 	b.w	8005622 <osSystickHandler>

08001f1c <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8001f1c:	4801      	ldr	r0, [pc, #4]	; (8001f24 <ETH_IRQHandler+0x8>)
 8001f1e:	f000 bafd 	b.w	800251c <HAL_ETH_IRQHandler>
 8001f22:	bf00      	nop
 8001f24:	20000220 	.word	0x20000220

08001f28 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <BSP_LED_Init+0x54>)
 8001f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2c:	f042 0202 	orr.w	r2, r2, #2
{
 8001f30:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
{
 8001f34:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	4604      	mov	r4, r0
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	b9c8      	cbnz	r0, 8001f74 <BSP_LED_Init+0x4c>
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <BSP_LED_Init+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f48:	4d0e      	ldr	r5, [pc, #56]	; (8001f84 <BSP_LED_Init+0x5c>)
 8001f4a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001f4c:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f52:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001f56:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f60:	f000 fcc8 	bl	80028f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001f64:	463a      	mov	r2, r7
 8001f66:	4631      	mov	r1, r6
 8001f68:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001f6c:	f000 fda6 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001f70:	b009      	add	sp, #36	; 0x24
 8001f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	9b02      	ldr	r3, [sp, #8]
 8001f78:	e7e4      	b.n	8001f44 <BSP_LED_Init+0x1c>
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08011728 	.word	0x08011728
 8001f84:	20000000 	.word	0x20000000

08001f88 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <BSP_LED_On+0x14>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <BSP_LED_On+0x18>)
 8001f92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001f96:	f000 bd91 	b.w	8002abc <HAL_GPIO_WritePin>
 8001f9a:	bf00      	nop
 8001f9c:	08011728 	.word	0x08011728
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <BSP_LED_Off>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <BSP_LED_Off+0x14>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <BSP_LED_Off+0x18>)
 8001fae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001fb2:	f000 bd83 	b.w	8002abc <HAL_GPIO_WritePin>
 8001fb6:	bf00      	nop
 8001fb8:	08011728 	.word	0x08011728
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc0:	490f      	ldr	r1, [pc, #60]	; (8002000 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fc2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <SystemInit+0x44>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001fda:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fe2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <SystemInit+0x48>)
 8001fea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ff4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ffa:	608b      	str	r3, [r1, #8]
#endif
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00
 8002004:	40023800 	.word	0x40023800
 8002008:	24003010 	.word	0x24003010

0800200c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800200c:	4770      	bx	lr

0800200e <HAL_Init>:
{
 800200e:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 f82b 	bl	800206c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002016:	200f      	movs	r0, #15
 8002018:	f7ff ff2e 	bl	8001e78 <HAL_InitTick>
  HAL_MspInit();
 800201c:	f7ff fff6 	bl	800200c <HAL_MspInit>
}
 8002020:	2000      	movs	r0, #0
 8002022:	bd08      	pop	{r3, pc}

08002024 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_IncTick+0x10>)
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_IncTick+0x14>)
 8002028:	6811      	ldr	r1, [r2, #0]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	440b      	add	r3, r1
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200003c0 	.word	0x200003c0
 8002038:	20000014 	.word	0x20000014

0800203c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800203c:	4b01      	ldr	r3, [pc, #4]	; (8002044 <HAL_GetTick+0x8>)
 800203e:	6818      	ldr	r0, [r3, #0]
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	200003c0 	.word	0x200003c0

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff fff6 	bl	800203c <HAL_GetTick>
 8002050:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002054:	bf1e      	ittt	ne
 8002056:	4b04      	ldrne	r3, [pc, #16]	; (8002068 <HAL_Delay+0x20>)
 8002058:	781b      	ldrbne	r3, [r3, #0]
 800205a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	1b43      	subs	r3, r0, r5
 8002062:	42a3      	cmp	r3, r4
 8002064:	d3fa      	bcc.n	800205c <HAL_Delay+0x14>
  {
  }
}
 8002066:	bd38      	pop	{r3, r4, r5, pc}
 8002068:	20000014 	.word	0x20000014

0800206c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002072:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800207a:	0412      	lsls	r2, r2, #16
 800207c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002088:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002092:	b530      	push	{r4, r5, lr}
 8002094:	68dc      	ldr	r4, [r3, #12]
 8002096:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	2d04      	cmp	r5, #4
 80020a2:	bf28      	it	cs
 80020a4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ac:	bf8c      	ite	hi
 80020ae:	3c03      	subhi	r4, #3
 80020b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80020b6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	fa01 f104 	lsl.w	r1, r1, r4
 80020c8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80020d0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80020d2:	db06      	blt.n	80020e2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80020d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80020dc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020e0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	f000 000f 	and.w	r0, r0, #15
 80020e6:	4a02      	ldr	r2, [pc, #8]	; (80020f0 <HAL_NVIC_SetPriority+0x60>)
 80020e8:	5413      	strb	r3, [r2, r0]
 80020ea:	e7f9      	b.n	80020e0 <HAL_NVIC_SetPriority+0x50>
 80020ec:	e000ed00 	.word	0xe000ed00
 80020f0:	e000ed14 	.word	0xe000ed14

080020f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020f4:	2800      	cmp	r0, #0
 80020f6:	db08      	blt.n	800210a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f8:	0942      	lsrs	r2, r0, #5
 80020fa:	2301      	movs	r3, #1
 80020fc:	f000 001f 	and.w	r0, r0, #31
 8002100:	fa03 f000 	lsl.w	r0, r3, r0
 8002104:	4b01      	ldr	r3, [pc, #4]	; (800210c <HAL_NVIC_EnableIRQ+0x18>)
 8002106:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100

08002110 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002110:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_MPU_Disable+0x18>)
 8002116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002118:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800211e:	2200      	movs	r2, #0
 8002120:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_MPU_Enable+0x1c>)
 800212e:	f040 0001 	orr.w	r0, r0, #1
 8002132:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002138:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800213e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002142:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800214c:	7843      	ldrb	r3, [r0, #1]
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_MPU_ConfigRegion+0x54>)
{
 8002150:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8002152:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8002156:	7801      	ldrb	r1, [r0, #0]
 8002158:	b1e9      	cbz	r1, 8002196 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800215a:	6843      	ldr	r3, [r0, #4]
 800215c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002160:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002162:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002164:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002166:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800216a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800216c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800216e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002172:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002174:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002178:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800217a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800217e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002180:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002184:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002186:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800218a:	7a01      	ldrb	r1, [r0, #8]
 800218c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002190:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002194:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8002196:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800219a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800219e:	e7f9      	b.n	8002194 <HAL_MPU_ConfigRegion+0x48>
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80021a4:	2300      	movs	r3, #0
{
 80021a6:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 80021a8:	9301      	str	r3, [sp, #4]
{
 80021aa:	4604      	mov	r4, r0
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021ac:	6803      	ldr	r3, [r0, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ae:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021ba:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c0:	f7ff ff42 	bl	8002048 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	9a01      	ldr	r2, [sp, #4]
 80021c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	b002      	add	sp, #8
 80021d0:	bd10      	pop	{r4, pc}
	...

080021d4 <ETH_MACDMAConfig>:
{
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021d8:	b129      	cbz	r1, 80021e6 <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 80021da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e2:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021e6:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 80021e8:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021ea:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
 80021ec:	6810      	ldr	r0, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021ee:	bf0c      	ite	eq
 80021f0:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80021f4:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 80021f6:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
 80021fa:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
 80021fc:	430b      	orrs	r3, r1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021fe:	492c      	ldr	r1, [pc, #176]	; (80022b0 <ETH_MACDMAConfig+0xdc>)
 8002200:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002202:	2001      	movs	r0, #1
 8002204:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800220a:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800220c:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800220e:	f7ff ff1b 	bl	8002048 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002212:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002214:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002216:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8002218:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800221a:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800221c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800221e:	f7ff ff13 	bl	8002048 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002222:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8002226:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002228:	2500      	movs	r5, #0
 800222a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800222c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800222e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002230:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8002234:	0412      	lsls	r2, r2, #16
 8002236:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800223c:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800223e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002240:	f7ff ff02 	bl	8002048 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002244:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002246:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8002248:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800224a:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800224c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800224e:	f7ff fefb 	bl	8002048 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002252:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002254:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8002258:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800225a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800225e:	6991      	ldr	r1, [r2, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002260:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002262:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8002266:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800226a:	6193      	str	r3, [r2, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800226c:	6995      	ldr	r5, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800226e:	f7ff feeb 	bl	8002048 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002272:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002274:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->DMAOMR = tmpreg;
 8002278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227c:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800227e:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8002280:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002282:	f7ff fee1 	bl	8002048 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002286:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002288:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800228a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800228e:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8002290:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002292:	d105      	bne.n	80022a0 <ETH_MACDMAConfig+0xcc>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800229a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800229e:	61da      	str	r2, [r3, #28]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022a0:	6962      	ldr	r2, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80022a4:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80022a6:	6419      	str	r1, [r3, #64]	; 0x40
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80022a8:	6812      	ldr	r2, [r2, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80022aa:	645a      	str	r2, [r3, #68]	; 0x44
}
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
 80022ae:	bf00      	nop
 80022b0:	ff20810f 	.word	0xff20810f
 80022b4:	f8de3f23 	.word	0xf8de3f23
 80022b8:	02c12080 	.word	0x02c12080
 80022bc:	40028000 	.word	0x40028000

080022c0 <HAL_ETH_DMATxDescListInit>:
{
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80022c2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80022c6:	2c01      	cmp	r4, #1
 80022c8:	f04f 0402 	mov.w	r4, #2
 80022cc:	d033      	beq.n	8002336 <HAL_ETH_DMATxDescListInit+0x76>
 80022ce:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80022d0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80022d4:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80022d8:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80022dc:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80022e0:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 80022e4:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 80022e6:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 80022ea:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 80022ec:	429d      	cmp	r5, r3
 80022ee:	d10b      	bne.n	8002308 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80022f0:	6803      	ldr	r3, [r0, #0]
 80022f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f6:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80022fe:	2300      	movs	r3, #0
 8002300:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002304:	4618      	mov	r0, r3
}
 8002306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002308:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800230c:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002310:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002314:	69c6      	ldr	r6, [r0, #28]
 8002316:	b92e      	cbnz	r6, 8002324 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002318:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800231c:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8002320:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002324:	45ae      	cmp	lr, r5
 8002326:	bf94      	ite	ls
 8002328:	460e      	movls	r6, r1
 800232a:	4626      	movhi	r6, r4
 800232c:	3501      	adds	r5, #1
 800232e:	3420      	adds	r4, #32
 8002330:	f844 6c34 	str.w	r6, [r4, #-52]
  for(i=0; i < TxBuffCount; i++)
 8002334:	e7da      	b.n	80022ec <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8002336:	4620      	mov	r0, r4
 8002338:	e7e5      	b.n	8002306 <HAL_ETH_DMATxDescListInit+0x46>

0800233a <HAL_ETH_DMARxDescListInit>:
{
 800233a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800233e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002342:	2c01      	cmp	r4, #1
 8002344:	f04f 0402 	mov.w	r4, #2
 8002348:	d030      	beq.n	80023ac <HAL_ETH_DMARxDescListInit+0x72>
 800234a:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800234c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002350:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002354:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8002358:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800235c:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8002360:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002362:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8002366:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 800236a:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 800236c:	42ab      	cmp	r3, r5
 800236e:	d10c      	bne.n	800238a <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002370:	6803      	ldr	r3, [r0, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 8002378:	2301      	movs	r3, #1
 800237a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800237e:	2300      	movs	r3, #0
 8002380:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002384:	4618      	mov	r0, r3
}
 8002386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800238a:	fb0c 2805 	mla	r8, ip, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800238e:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002392:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002396:	45ae      	cmp	lr, r5
 8002398:	bf94      	ite	ls
 800239a:	4688      	movls	r8, r1
 800239c:	46a0      	movhi	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800239e:	f844 7c1c 	str.w	r7, [r4, #-28]
    if(i < (RxBuffCount-1))
 80023a2:	3501      	adds	r5, #1
 80023a4:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0; i < RxBuffCount; i++)
 80023a8:	3420      	adds	r4, #32
 80023aa:	e7df      	b.n	800236c <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 80023ac:	4620      	mov	r0, r4
 80023ae:	e7ea      	b.n	8002386 <HAL_ETH_DMARxDescListInit+0x4c>

080023b0 <HAL_ETH_TransmitFrame>:
{
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80023b2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	f04f 0302 	mov.w	r3, #2
 80023bc:	d064      	beq.n	8002488 <HAL_ETH_TransmitFrame+0xd8>
 80023be:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80023c0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80023c4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 80023c8:	b929      	cbnz	r1, 80023d6 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80023ca:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80023ce:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80023d2:	4610      	mov	r0, r2
}
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80023d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023d8:	681c      	ldr	r4, [r3, #0]
 80023da:	2c00      	cmp	r4, #0
 80023dc:	da06      	bge.n	80023ec <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80023de:	2312      	movs	r3, #18
 80023e0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80023e4:	2300      	movs	r3, #0
 80023e6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80023ea:	e7f2      	b.n	80023d2 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80023ec:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80023f0:	42a1      	cmp	r1, r4
 80023f2:	d92c      	bls.n	800244e <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80023f4:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80023f8:	fb04 1412 	mls	r4, r4, r2, r1
 80023fc:	b32c      	cbz	r4, 800244a <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 80023fe:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002400:	4c22      	ldr	r4, [pc, #136]	; (800248c <HAL_ETH_TransmitFrame+0xdc>)
 8002402:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002406:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 800240a:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800240c:	fb04 1102 	mla	r1, r4, r2, r1
    for (i=0; i< bufcount; i++)
 8002410:	2400      	movs	r4, #0
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002412:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002416:	681d      	ldr	r5, [r3, #0]
 8002418:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 800241c:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 800241e:	b91c      	cbnz	r4, 8002428 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002420:	681d      	ldr	r5, [r3, #0]
 8002422:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8002426:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8002428:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800242a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 800242c:	d104      	bne.n	8002438 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800242e:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002430:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002432:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002436:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002438:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 800243a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800243c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8002440:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002442:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002444:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8002446:	d1e6      	bne.n	8002416 <HAL_ETH_TransmitFrame+0x66>
 8002448:	e00d      	b.n	8002466 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 800244a:	2a01      	cmp	r2, #1
 800244c:	d1d8      	bne.n	8002400 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800244e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002450:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002454:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002458:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800245a:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002462:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002468:	6803      	ldr	r3, [r0, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	0752      	lsls	r2, r2, #29
 8002472:	d503      	bpl.n	800247c <HAL_ETH_TransmitFrame+0xcc>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002474:	2204      	movs	r2, #4
 8002476:	615a      	str	r2, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  heth->State = HAL_ETH_STATE_READY;
 800247c:	2301      	movs	r3, #1
 800247e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002482:	2300      	movs	r3, #0
 8002484:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8002488:	4618      	mov	r0, r3
 800248a:	e7a3      	b.n	80023d4 <HAL_ETH_TransmitFrame+0x24>
 800248c:	fffffa0c 	.word	0xfffffa0c

08002490 <HAL_ETH_GetReceivedFrame_IT>:
{
 8002490:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8002492:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002496:	2b01      	cmp	r3, #1
 8002498:	f04f 0302 	mov.w	r3, #2
 800249c:	d03a      	beq.n	8002514 <HAL_ETH_GetReceivedFrame_IT+0x84>
 800249e:	2501      	movs	r5, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80024a0:	2105      	movs	r1, #5
  heth->State = HAL_ETH_STATE_BUSY;
 80024a2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80024a6:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80024aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	db01      	blt.n	80024b6 <HAL_ETH_GetReceivedFrame_IT+0x26>
 80024b2:	3901      	subs	r1, #1
 80024b4:	d106      	bne.n	80024c4 <HAL_ETH_GetReceivedFrame_IT+0x34>
  heth->State = HAL_ETH_STATE_READY;
 80024b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80024b8:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 80024ba:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80024be:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 80024c2:	e027      	b.n	8002514 <HAL_ETH_GetReceivedFrame_IT+0x84>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80024c4:	681a      	ldr	r2, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024c6:	68dc      	ldr	r4, [r3, #12]
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80024c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80024cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80024d0:	d103      	bne.n	80024da <HAL_ETH_GetReceivedFrame_IT+0x4a>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80024d2:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80024d4:	6385      	str	r5, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80024d6:	6284      	str	r4, [r0, #40]	; 0x28
 80024d8:	e7e7      	b.n	80024aa <HAL_ETH_GetReceivedFrame_IT+0x1a>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80024da:	681e      	ldr	r6, [r3, #0]
      (heth->RxFrameInfos.SegCount)++;
 80024dc:	6b82      	ldr	r2, [r0, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80024de:	f416 7f40 	tst.w	r6, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 80024e2:	f102 0201 	add.w	r2, r2, #1
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80024e6:	d101      	bne.n	80024ec <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 80024e8:	6382      	str	r2, [r0, #56]	; 0x38
 80024ea:	e7f4      	b.n	80024d6 <HAL_ETH_GetReceivedFrame_IT+0x46>
      if ((heth->RxFrameInfos.SegCount) == 1)
 80024ec:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 80024ee:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80024f2:	bf08      	it	eq
 80024f4:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80024fc:	3b04      	subs	r3, #4
 80024fe:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002500:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002502:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002504:	6284      	str	r4, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002506:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8002508:	2301      	movs	r3, #1
 800250a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800250e:	2300      	movs	r3, #0
 8002510:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd70      	pop	{r4, r5, r6, pc}

08002518 <HAL_ETH_TxCpltCallback>:
 8002518:	4770      	bx	lr

0800251a <HAL_ETH_ErrorCallback>:
 800251a:	4770      	bx	lr

0800251c <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800251c:	6802      	ldr	r2, [r0, #0]
 800251e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 8002522:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002524:	6955      	ldr	r5, [r2, #20]
{
 8002526:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002528:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800252c:	d025      	beq.n	800257a <HAL_ETH_IRQHandler+0x5e>
    HAL_ETH_RxCpltCallback(heth);
 800252e:	f7fe ff67 	bl	8001400 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	2240      	movs	r2, #64	; 0x40
 8002536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253a:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800253c:	2301      	movs	r3, #1
 800253e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002542:	2300      	movs	r3, #0
 8002544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800254e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002552:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	d50e      	bpl.n	8002578 <HAL_ETH_IRQHandler+0x5c>
    HAL_ETH_ErrorCallback(heth);
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff ffdd 	bl	800251a <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256a:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800256c:	2301      	movs	r3, #1
 800256e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002572:	2300      	movs	r3, #0
 8002574:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002578:	bd38      	pop	{r3, r4, r5, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800257a:	6953      	ldr	r3, [r2, #20]
 800257c:	07da      	lsls	r2, r3, #31
 800257e:	d5e3      	bpl.n	8002548 <HAL_ETH_IRQHandler+0x2c>
    HAL_ETH_TxCpltCallback(heth);
 8002580:	f7ff ffca 	bl	8002518 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	2201      	movs	r2, #1
 8002588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258c:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800258e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002592:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002596:	e7d7      	b.n	8002548 <HAL_ETH_IRQHandler+0x2c>

08002598 <HAL_ETH_ReadPHYRegister>:
{
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800259a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 800259e:	4606      	mov	r6, r0
 80025a0:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80025a2:	2b82      	cmp	r3, #130	; 0x82
 80025a4:	d031      	beq.n	800260a <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80025a6:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80025a8:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80025aa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80025ae:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80025b2:	8a34      	ldrh	r4, [r6, #16]
  tmpreg = heth->Instance->MACMIIAR;
 80025b4:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80025b6:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 80025b8:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80025ba:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80025bc:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80025c0:	430c      	orrs	r4, r1
 80025c2:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80025c4:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 80025c8:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80025ca:	f7ff fd37 	bl	800203c <HAL_GetTick>
 80025ce:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025d0:	f014 0401 	ands.w	r4, r4, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025d6:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 80025d8:	4620      	mov	r0, r4
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  return HAL_OK;
 80025e6:	e00c      	b.n	8002602 <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80025e8:	f7ff fd28 	bl	800203c <HAL_GetTick>
 80025ec:	1bc0      	subs	r0, r0, r7
 80025ee:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80025f2:	d307      	bcc.n	8002604 <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 80025f4:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80025f6:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80025f8:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80025fc:	2300      	movs	r3, #0
 80025fe:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
}
 8002602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8002604:	6833      	ldr	r3, [r6, #0]
 8002606:	691c      	ldr	r4, [r3, #16]
 8002608:	e7e2      	b.n	80025d0 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 800260a:	2002      	movs	r0, #2
 800260c:	e7f9      	b.n	8002602 <HAL_ETH_ReadPHYRegister+0x6a>

0800260e <HAL_ETH_WritePHYRegister>:
{
 800260e:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002610:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002614:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002616:	2b42      	cmp	r3, #66	; 0x42
 8002618:	d02f      	beq.n	800267a <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800261a:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800261c:	0189      	lsls	r1, r1, #6
 800261e:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002620:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002624:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002628:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg = heth->Instance->MACMIIAR;
 800262a:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800262c:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 800262e:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002630:	b2a4      	uxth	r4, r4
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002632:	615a      	str	r2, [r3, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002634:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002638:	430c      	orrs	r4, r1
 800263a:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800263c:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg;
 8002640:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002642:	f7ff fcfb 	bl	800203c <HAL_GetTick>
 8002646:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002648:	f014 0401 	ands.w	r4, r4, #1
 800264c:	d104      	bne.n	8002658 <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 800264e:	2301      	movs	r3, #1
  return HAL_OK; 
 8002650:	4620      	mov	r0, r4
  heth->State = HAL_ETH_STATE_READY;
 8002652:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8002656:	e00c      	b.n	8002672 <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002658:	f7ff fcf0 	bl	800203c <HAL_GetTick>
 800265c:	1b80      	subs	r0, r0, r6
 800265e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002662:	d307      	bcc.n	8002674 <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 8002664:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8002666:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8002668:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800266c:	2300      	movs	r3, #0
 800266e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8002672:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	691c      	ldr	r4, [r3, #16]
 8002678:	e7e6      	b.n	8002648 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800267a:	2002      	movs	r0, #2
 800267c:	e7f9      	b.n	8002672 <HAL_ETH_WritePHYRegister+0x64>
	...

08002680 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8002680:	2300      	movs	r3, #0
{
 8002682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8002684:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8002686:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8002688:	2800      	cmp	r0, #0
 800268a:	f000 80de 	beq.w	800284a <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 800268e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002692:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002696:	b91b      	cbnz	r3, 80026a0 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8002698:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800269c:	f7fe fe38 	bl	8001310 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a0:	4b6b      	ldr	r3, [pc, #428]	; (8002850 <HAL_ETH_Init+0x1d0>)
 80026a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026b4:	4b67      	ldr	r3, [pc, #412]	; (8002854 <HAL_ETH_Init+0x1d4>)
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80026bc:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	6a21      	ldr	r1, [r4, #32]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80026d4:	f7ff fcb2 	bl	800203c <HAL_GetTick>
 80026d8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	07d0      	lsls	r0, r2, #31
 80026e4:	d41d      	bmi.n	8002722 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 80026e6:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80026e8:	f001 f852 	bl	8003790 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80026ec:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <HAL_ETH_Init+0x1d8>)
 80026ee:	4a5b      	ldr	r2, [pc, #364]	; (800285c <HAL_ETH_Init+0x1dc>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80026f0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80026f4:	4403      	add	r3, r0
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d222      	bcs.n	8002740 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026fa:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80026fe:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002704:	2100      	movs	r1, #0
 8002706:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002708:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800270a:	f7ff ff80 	bl	800260e <HAL_ETH_WritePHYRegister>
 800270e:	4605      	mov	r5, r0
 8002710:	b368      	cbz	r0, 800276e <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8002712:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8002714:	2101      	movs	r1, #1
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff fd5c 	bl	80021d4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800271c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002720:	e00b      	b.n	800273a <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002722:	f7ff fc8b 	bl	800203c <HAL_GetTick>
 8002726:	1b40      	subs	r0, r0, r5
 8002728:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800272c:	d9d5      	bls.n	80026da <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800272e:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8002730:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002732:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800273a:	4628      	mov	r0, r5
 800273c:	b003      	add	sp, #12
 800273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002740:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_ETH_Init+0x1e0>)
 8002742:	4a48      	ldr	r2, [pc, #288]	; (8002864 <HAL_ETH_Init+0x1e4>)
 8002744:	4403      	add	r3, r0
 8002746:	4293      	cmp	r3, r2
 8002748:	d802      	bhi.n	8002750 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800274a:	f045 050c 	orr.w	r5, r5, #12
 800274e:	e7d6      	b.n	80026fe <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_ETH_Init+0x1e8>)
 8002752:	4a46      	ldr	r2, [pc, #280]	; (800286c <HAL_ETH_Init+0x1ec>)
 8002754:	4403      	add	r3, r0
 8002756:	4293      	cmp	r3, r2
 8002758:	d3d1      	bcc.n	80026fe <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800275a:	4b45      	ldr	r3, [pc, #276]	; (8002870 <HAL_ETH_Init+0x1f0>)
 800275c:	4a45      	ldr	r2, [pc, #276]	; (8002874 <HAL_ETH_Init+0x1f4>)
 800275e:	4403      	add	r3, r0
 8002760:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002762:	bf94      	ite	ls
 8002764:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002768:	f045 0510 	orrhi.w	r5, r5, #16
 800276c:	e7c7      	b.n	80026fe <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 800276e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002772:	f7ff fc69 	bl	8002048 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d054      	beq.n	8002826 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 800277c:	f7ff fc5e 	bl	800203c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002780:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002784:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002786:	466a      	mov	r2, sp
 8002788:	2101      	movs	r1, #1
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff ff04 	bl	8002598 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002790:	f7ff fc54 	bl	800203c <HAL_GetTick>
 8002794:	1b80      	subs	r0, r0, r6
 8002796:	42b8      	cmp	r0, r7
 8002798:	d90b      	bls.n	80027b2 <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 800279a:	2101      	movs	r1, #1
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff fd19 	bl	80021d4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80027a2:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 80027a4:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 80027a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80027aa:	2300      	movs	r3, #0
 80027ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80027b0:	e7c3      	b.n	800273a <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80027b2:	9b00      	ldr	r3, [sp, #0]
 80027b4:	0759      	lsls	r1, r3, #29
 80027b6:	d5e6      	bpl.n	8002786 <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80027b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027bc:	2100      	movs	r1, #0
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff ff25 	bl	800260e <HAL_ETH_WritePHYRegister>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d1a4      	bne.n	8002712 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 80027c8:	f7ff fc38 	bl	800203c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80027cc:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027d0:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027d2:	466a      	mov	r2, sp
 80027d4:	2101      	movs	r1, #1
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fede 	bl	8002598 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80027dc:	f7ff fc2e 	bl	800203c <HAL_GetTick>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	42b8      	cmp	r0, r7
 80027e4:	d8d9      	bhi.n	800279a <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80027e6:	9b00      	ldr	r3, [sp, #0]
 80027e8:	069a      	lsls	r2, r3, #26
 80027ea:	d5f2      	bpl.n	80027d2 <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80027ec:	466a      	mov	r2, sp
 80027ee:	211f      	movs	r1, #31
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fed1 	bl	8002598 <HAL_ETH_ReadPHYRegister>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d18b      	bne.n	8002712 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80027fa:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80027fc:	f013 0210 	ands.w	r2, r3, #16
 8002800:	bf18      	it	ne
 8002802:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002806:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 8002808:	bf58      	it	pl
 800280a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 800280e:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002810:	bf4c      	ite	mi
 8002812:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 8002814:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8002816:	2100      	movs	r1, #0
 8002818:	4620      	mov	r0, r4
 800281a:	f7ff fcdb 	bl	80021d4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800281e:	2301      	movs	r3, #1
 8002820:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002824:	e789      	b.n	800273a <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002826:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800282a:	4629      	mov	r1, r5
 800282c:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800282e:	0852      	lsrs	r2, r2, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002830:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8002834:	b292      	uxth	r2, r2
 8002836:	f7ff feea 	bl	800260e <HAL_ETH_WritePHYRegister>
 800283a:	2800      	cmp	r0, #0
 800283c:	f47f af69 	bne.w	8002712 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002840:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002844:	f7ff fc00 	bl	8002048 <HAL_Delay>
 8002848:	e7e5      	b.n	8002816 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 800284a:	2501      	movs	r5, #1
 800284c:	e775      	b.n	800273a <HAL_ETH_Init+0xba>
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40013800 	.word	0x40013800
 8002858:	feced300 	.word	0xfeced300
 800285c:	00e4e1c0 	.word	0x00e4e1c0
 8002860:	fde9f140 	.word	0xfde9f140
 8002864:	017d783f 	.word	0x017d783f
 8002868:	fc6c7900 	.word	0xfc6c7900
 800286c:	02625a00 	.word	0x02625a00
 8002870:	fa0a1f00 	.word	0xfa0a1f00
 8002874:	02faf07f 	.word	0x02faf07f

08002878 <HAL_ETH_Start>:
{  
 8002878:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800287a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{  
 800287e:	4604      	mov	r4, r0
 8002880:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
 8002882:	2b01      	cmp	r3, #1
 8002884:	d033      	beq.n	80028ee <HAL_ETH_Start+0x76>
 8002886:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8002888:	2500      	movs	r5, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800288a:	6823      	ldr	r3, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800288c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002890:	4630      	mov	r0, r6
  __IO uint32_t tmpreg = 0;
 8002892:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8002894:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	f042 0208 	orr.w	r2, r2, #8
 800289e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a4:	f7ff fbd0 	bl	8002048 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80028a8:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028aa:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 80028b0:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f042 0204 	orr.w	r2, r2, #4
 80028b8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028be:	f7ff fbc3 	bl	8002048 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80028c2:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 80028c4:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 80028c6:	9a00      	ldr	r2, [sp, #0]
 80028c8:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 80028ca:	f7ff fc6b 	bl	80021a4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80028ce:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80028d0:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80028d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028dc:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	f042 0202 	orr.w	r2, r2, #2
 80028e4:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 80028e6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80028ea:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 80028ee:	b002      	add	sp, #8
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028f8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002ab8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fe:	4a6c      	ldr	r2, [pc, #432]	; (8002ab0 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002900:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002902:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002904:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800290a:	43ac      	bics	r4, r5
 800290c:	f040 80b6 	bne.w	8002a7c <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002910:	684d      	ldr	r5, [r1, #4]
 8002912:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002916:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002918:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800291c:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002920:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002922:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002924:	2f01      	cmp	r7, #1
 8002926:	d834      	bhi.n	8002992 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8002928:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800292a:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800292e:	68cf      	ldr	r7, [r1, #12]
 8002930:	fa07 f708 	lsl.w	r7, r7, r8
 8002934:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002938:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800293a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002940:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002944:	409f      	lsls	r7, r3
 8002946:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800294a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800294c:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002950:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002954:	688f      	ldr	r7, [r1, #8]
 8002956:	fa07 f708 	lsl.w	r7, r7, r8
 800295a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800295e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002960:	d119      	bne.n	8002996 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8002962:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002966:	f003 0b07 	and.w	fp, r3, #7
 800296a:	f04f 0e0f 	mov.w	lr, #15
 800296e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002972:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002976:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800297a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800297e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002982:	690f      	ldr	r7, [r1, #16]
 8002984:	fa07 f70b 	lsl.w	r7, r7, fp
 8002988:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 800298c:	f8ca 7020 	str.w	r7, [sl, #32]
 8002990:	e001      	b.n	8002996 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002992:	2c03      	cmp	r4, #3
 8002994:	d1da      	bne.n	800294c <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8002996:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002998:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800299c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029a0:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029a4:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80029a8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029aa:	d067      	beq.n	8002a7c <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ac:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80029b0:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029b4:	f003 0703 	and.w	r7, r3, #3
 80029b8:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029bc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80029c0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029c4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80029ca:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80029ce:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80029d2:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80029d6:	9401      	str	r4, [sp, #4]
 80029d8:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029da:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80029de:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029e2:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029e6:	4c33      	ldr	r4, [pc, #204]	; (8002ab4 <HAL_GPIO_Init+0x1c0>)
 80029e8:	42a0      	cmp	r0, r4
 80029ea:	d04e      	beq.n	8002a8a <HAL_GPIO_Init+0x196>
 80029ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029f0:	42a0      	cmp	r0, r4
 80029f2:	d04c      	beq.n	8002a8e <HAL_GPIO_Init+0x19a>
 80029f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80029f8:	42a0      	cmp	r0, r4
 80029fa:	d04a      	beq.n	8002a92 <HAL_GPIO_Init+0x19e>
 80029fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a00:	42a0      	cmp	r0, r4
 8002a02:	d048      	beq.n	8002a96 <HAL_GPIO_Init+0x1a2>
 8002a04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a08:	42a0      	cmp	r0, r4
 8002a0a:	d046      	beq.n	8002a9a <HAL_GPIO_Init+0x1a6>
 8002a0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a10:	42a0      	cmp	r0, r4
 8002a12:	d044      	beq.n	8002a9e <HAL_GPIO_Init+0x1aa>
 8002a14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d042      	beq.n	8002aa2 <HAL_GPIO_Init+0x1ae>
 8002a1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a20:	42a0      	cmp	r0, r4
 8002a22:	d040      	beq.n	8002aa6 <HAL_GPIO_Init+0x1b2>
 8002a24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a28:	42a0      	cmp	r0, r4
 8002a2a:	d03e      	beq.n	8002aaa <HAL_GPIO_Init+0x1b6>
 8002a2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a30:	42a0      	cmp	r0, r4
 8002a32:	bf0c      	ite	eq
 8002a34:	2409      	moveq	r4, #9
 8002a36:	240a      	movne	r4, #10
 8002a38:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3a:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a3c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a40:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8002a46:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	bf54      	ite	pl
 8002a4a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002a4c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a50:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8002a52:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8002a54:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002a56:	bf54      	ite	pl
 8002a58:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002a5a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a5e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8002a60:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8002a62:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	bf54      	ite	pl
 8002a66:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002a68:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a6c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002a6e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002a70:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	bf54      	ite	pl
 8002a74:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002a76:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002a7a:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	f47f af3e 	bne.w	8002900 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002a84:	b003      	add	sp, #12
 8002a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a8a:	2400      	movs	r4, #0
 8002a8c:	e7d4      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002a8e:	2401      	movs	r4, #1
 8002a90:	e7d2      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002a92:	2402      	movs	r4, #2
 8002a94:	e7d0      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002a96:	2403      	movs	r4, #3
 8002a98:	e7ce      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002a9a:	2404      	movs	r4, #4
 8002a9c:	e7cc      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002a9e:	2405      	movs	r4, #5
 8002aa0:	e7ca      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002aa2:	2406      	movs	r4, #6
 8002aa4:	e7c8      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002aa6:	2407      	movs	r4, #7
 8002aa8:	e7c6      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002aaa:	2408      	movs	r4, #8
 8002aac:	e7c4      	b.n	8002a38 <HAL_GPIO_Init+0x144>
 8002aae:	bf00      	nop
 8002ab0:	40013c00 	.word	0x40013c00
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002abc:	b10a      	cbz	r2, 8002ac2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002abe:	6181      	str	r1, [r0, #24]
  }
}
 8002ac0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ac2:	0409      	lsls	r1, r1, #16
 8002ac4:	e7fb      	b.n	8002abe <HAL_GPIO_WritePin+0x2>

08002ac6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac6:	6803      	ldr	r3, [r0, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	0791      	lsls	r1, r2, #30
 8002acc:	d501      	bpl.n	8002ad2 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ace:	2200      	movs	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	07d2      	lsls	r2, r2, #31
 8002ad6:	d403      	bmi.n	8002ae0 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	619a      	str	r2, [r3, #24]
  }
}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae4:	b530      	push	{r4, r5, lr}
 8002ae6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002aec:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aee:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8002af0:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002af8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002afa:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b02:	ea20 0002 	bic.w	r0, r0, r2
 8002b06:	4303      	orrs	r3, r0
 8002b08:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b0a:	bd30      	pop	{r4, r5, pc}
 8002b0c:	03ff63ff 	.word	0x03ff63ff

08002b10 <I2C_IsErrorOccurred>:
{
 8002b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b14:	6803      	ldr	r3, [r0, #0]
{
 8002b16:	4605      	mov	r5, r0
 8002b18:	4688      	mov	r8, r1
 8002b1a:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b1c:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b1e:	f014 0410 	ands.w	r4, r4, #16
 8002b22:	d079      	beq.n	8002c18 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b24:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2c:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b2e:	682b      	ldr	r3, [r5, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	0694      	lsls	r4, r2, #26
 8002b34:	d436      	bmi.n	8002ba4 <I2C_IsErrorOccurred+0x94>
 8002b36:	b10e      	cbz	r6, 8002b3c <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8002b38:	2404      	movs	r4, #4
 8002b3a:	e039      	b.n	8002bb0 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8002b3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002b40:	d0f6      	beq.n	8002b30 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7ff fa7b 	bl	800203c <HAL_GetTick>
 8002b46:	1bc0      	subs	r0, r0, r7
 8002b48:	4540      	cmp	r0, r8
 8002b4a:	d802      	bhi.n	8002b52 <I2C_IsErrorOccurred+0x42>
 8002b4c:	f1b8 0f00 	cmp.w	r8, #0
 8002b50:	d1ed      	bne.n	8002b2e <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8002b56:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b5a:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8002b5c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b5e:	0400      	lsls	r0, r0, #16
 8002b60:	d50a      	bpl.n	8002b78 <I2C_IsErrorOccurred+0x68>
 8002b62:	0449      	lsls	r1, r1, #17
 8002b64:	d408      	bmi.n	8002b78 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8002b66:	2a20      	cmp	r2, #32
 8002b68:	d006      	beq.n	8002b78 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b70:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002b72:	f7ff fa63 	bl	800203c <HAL_GetTick>
 8002b76:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	699c      	ldr	r4, [r3, #24]
 8002b7c:	f014 0420 	ands.w	r4, r4, #32
 8002b80:	d1d5      	bne.n	8002b2e <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b82:	f7ff fa5b 	bl	800203c <HAL_GetTick>
 8002b86:	1bc0      	subs	r0, r0, r7
 8002b88:	2819      	cmp	r0, #25
 8002b8a:	d9f5      	bls.n	8002b78 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8002b8e:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8002b90:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8002ba2:	e7e9      	b.n	8002b78 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8002ba4:	2e00      	cmp	r6, #0
 8002ba6:	d1c7      	bne.n	8002b38 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba8:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8002baa:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8002bac:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bae:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bb4:	05d0      	lsls	r0, r2, #23
 8002bb6:	d505      	bpl.n	8002bc4 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8002bbc:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8002bc0:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bc2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bc4:	0551      	lsls	r1, r2, #21
 8002bc6:	d505      	bpl.n	8002bd4 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8002bcc:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8002bd0:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bd2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bd4:	0592      	lsls	r2, r2, #22
 8002bd6:	d521      	bpl.n	8002c1c <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bdc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002be0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002be2:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 8002be4:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8002be6:	f7ff ff6e 	bl	8002ac6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002bea:	682a      	ldr	r2, [r5, #0]
 8002bec:	6853      	ldr	r3, [r2, #4]
 8002bee:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002bf2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002bf6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002c00:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002c02:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8002c06:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002c12:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8002c16:	e003      	b.n	8002c20 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	4626      	mov	r6, r4
 8002c1a:	e7c9      	b.n	8002bb0 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8002c1c:	2e00      	cmp	r6, #0
 8002c1e:	d1e0      	bne.n	8002be2 <I2C_IsErrorOccurred+0xd2>
}
 8002c20:	4630      	mov	r0, r6
 8002c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002c26 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002c26:	b570      	push	{r4, r5, r6, lr}
 8002c28:	4604      	mov	r4, r0
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	079b      	lsls	r3, r3, #30
 8002c34:	d501      	bpl.n	8002c3a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002c36:	2000      	movs	r0, #0
}
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	4632      	mov	r2, r6
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ff66 	bl	8002b10 <I2C_IsErrorOccurred>
 8002c44:	b9a0      	cbnz	r0, 8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	1c6a      	adds	r2, r5, #1
 8002c48:	d0f1      	beq.n	8002c2e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7ff f9f7 	bl	800203c <HAL_GetTick>
 8002c4e:	1b80      	subs	r0, r0, r6
 8002c50:	42a8      	cmp	r0, r5
 8002c52:	d801      	bhi.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002c54:	2d00      	cmp	r5, #0
 8002c56:	d1ea      	bne.n	8002c2e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c5a:	f043 0320 	orr.w	r3, r3, #32
 8002c5e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	2320      	movs	r3, #32
 8002c62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002c6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
 8002c72:	e7e1      	b.n	8002c38 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08002c74 <I2C_WaitOnFlagUntilTimeout>:
{
 8002c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c78:	9f06      	ldr	r7, [sp, #24]
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	4688      	mov	r8, r1
 8002c7e:	4616      	mov	r6, r2
 8002c80:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	6993      	ldr	r3, [r2, #24]
 8002c86:	ea38 0303 	bics.w	r3, r8, r3
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	42b3      	cmp	r3, r6
 8002c92:	d001      	beq.n	8002c98 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002c94:	2000      	movs	r0, #0
 8002c96:	e015      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002c98:	1c6b      	adds	r3, r5, #1
 8002c9a:	d0f3      	beq.n	8002c84 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9c:	f7ff f9ce 	bl	800203c <HAL_GetTick>
 8002ca0:	1bc0      	subs	r0, r0, r7
 8002ca2:	42a8      	cmp	r0, r5
 8002ca4:	d801      	bhi.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x36>
 8002ca6:	2d00      	cmp	r5, #0
 8002ca8:	d1eb      	bne.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002caa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002cac:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cae:	f043 0320 	orr.w	r3, r3, #32
 8002cb2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002cc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002cc8 <I2C_RequestMemoryWrite>:
{
 8002cc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002ccc:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <I2C_RequestMemoryWrite+0x68>)
{
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	b2f2      	uxtb	r2, r6
 8002cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8002cdc:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ce0:	f7ff ff00 	bl	8002ae4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	4642      	mov	r2, r8
 8002ce8:	4639      	mov	r1, r7
 8002cea:	f7ff ff9c 	bl	8002c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cee:	b118      	cbz	r0, 8002cf8 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8002cf0:	2001      	movs	r0, #1
}
 8002cf2:	b002      	add	sp, #8
 8002cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf8:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfa:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfc:	d10d      	bne.n	8002d1a <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfe:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d06:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d08:	463b      	mov	r3, r7
 8002d0a:	f8cd 8000 	str.w	r8, [sp]
 8002d0e:	f7ff ffb1 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002d12:	3800      	subs	r0, #0
 8002d14:	bf18      	it	ne
 8002d16:	2001      	movne	r0, #1
 8002d18:	e7eb      	b.n	8002cf2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1a:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1c:	4639      	mov	r1, r7
 8002d1e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d20:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d22:	4642      	mov	r2, r8
 8002d24:	f7ff ff7f 	bl	8002c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d1e1      	bne.n	8002cf0 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	e7e6      	b.n	8002cfe <I2C_RequestMemoryWrite+0x36>
 8002d30:	80002000 	.word	0x80002000

08002d34 <I2C_RequestMemoryRead>:
{
 8002d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002d38:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <I2C_RequestMemoryRead+0x68>)
{
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	b2f2      	uxtb	r2, r6
 8002d44:	2300      	movs	r3, #0
{
 8002d46:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d4a:	f7ff fecb 	bl	8002ae4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	4628      	mov	r0, r5
 8002d50:	4642      	mov	r2, r8
 8002d52:	4639      	mov	r1, r7
 8002d54:	f7ff ff67 	bl	8002c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d58:	b118      	cbz	r0, 8002d62 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8002d5a:	2001      	movs	r0, #1
}
 8002d5c:	b002      	add	sp, #8
 8002d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d62:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d64:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d66:	d10d      	bne.n	8002d84 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d68:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d70:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d72:	463b      	mov	r3, r7
 8002d74:	f8cd 8000 	str.w	r8, [sp]
 8002d78:	f7ff ff7c 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002d7c:	3800      	subs	r0, #0
 8002d7e:	bf18      	it	ne
 8002d80:	2001      	movne	r0, #1
 8002d82:	e7eb      	b.n	8002d5c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d84:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d86:	4639      	mov	r1, r7
 8002d88:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	f7ff ff4a 	bl	8002c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d1e1      	bne.n	8002d5a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d96:	682b      	ldr	r3, [r5, #0]
 8002d98:	e7e6      	b.n	8002d68 <I2C_RequestMemoryRead+0x34>
 8002d9a:	bf00      	nop
 8002d9c:	80002000 	.word	0x80002000

08002da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	069b      	lsls	r3, r3, #26
 8002dae:	d501      	bpl.n	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002db0:	2000      	movs	r0, #0
}
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db4:	4632      	mov	r2, r6
 8002db6:	4629      	mov	r1, r5
 8002db8:	4620      	mov	r0, r4
 8002dba:	f7ff fea9 	bl	8002b10 <I2C_IsErrorOccurred>
 8002dbe:	b990      	cbnz	r0, 8002de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7ff f93c 	bl	800203c <HAL_GetTick>
 8002dc4:	1b80      	subs	r0, r0, r6
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	d801      	bhi.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d1ec      	bne.n	8002da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dd0:	f043 0320 	orr.w	r3, r3, #32
 8002dd4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002de2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002de6:	2001      	movs	r0, #1
 8002de8:	e7e3      	b.n	8002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08002dea <HAL_I2C_Init>:
{
 8002dea:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002dec:	4604      	mov	r4, r0
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d04a      	beq.n	8002e88 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002df6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dfa:	b91b      	cbnz	r3, 8002e04 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002dfc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002e00:	f7fe ff40 	bl	8001c84 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e04:	2324      	movs	r3, #36	; 0x24
 8002e06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e14:	6862      	ldr	r2, [r4, #4]
 8002e16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e1a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e22:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e24:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e28:	2901      	cmp	r1, #1
 8002e2a:	d124      	bne.n	8002e76 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e30:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e32:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e36:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e3e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e46:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e48:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002e4c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e4e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e54:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e56:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002e74:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e7a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e7c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e7e:	d1d8      	bne.n	8002e32 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	e7d4      	b.n	8002e32 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e7f3      	b.n	8002e74 <HAL_I2C_Init+0x8a>

08002e8c <HAL_I2C_Mem_Write>:
{
 8002e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e90:	b085      	sub	sp, #20
 8002e92:	469b      	mov	fp, r3
 8002e94:	4604      	mov	r4, r0
 8002e96:	460f      	mov	r7, r1
 8002e98:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002e9c:	4692      	mov	sl, r2
 8002e9e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8002ea2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	f040 80a3 	bne.w	8002ff4 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8002eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eb0:	b10b      	cbz	r3, 8002eb6 <HAL_I2C_Mem_Write+0x2a>
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	b933      	cbnz	r3, 8002ec4 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eba:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002ebc:	2001      	movs	r0, #1
}
 8002ebe:	b005      	add	sp, #20
 8002ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002ec4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f000 8093 	beq.w	8002ff4 <HAL_I2C_Mem_Write+0x168>
 8002ece:	2501      	movs	r5, #1
 8002ed0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002ed4:	f7ff f8b2 	bl	800203c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ed8:	2319      	movs	r3, #25
 8002eda:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002edc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ede:	462a      	mov	r2, r5
 8002ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f7ff fec5 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4680      	mov	r8, r0
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d1e5      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ef0:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8002ef2:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ef8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002efc:	2340      	movs	r3, #64	; 0x40
 8002efe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f04:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f06:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8002f08:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f0a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f0c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8002f10:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f12:	465b      	mov	r3, fp
 8002f14:	f7ff fed8 	bl	8002cc8 <I2C_RequestMemoryWrite>
 8002f18:	b110      	cbz	r0, 8002f20 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8002f1a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002f1e:	e7cd      	b.n	8002ebc <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2bff      	cmp	r3, #255	; 0xff
 8002f26:	d955      	bls.n	8002fd4 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f28:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f2e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f30:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f32:	4639      	mov	r1, r7
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff fdd5 	bl	8002ae4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3a:	4632      	mov	r2, r6
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff fe71 	bl	8002c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d1b9      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002f50:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002f52:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002f54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f58:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002f5a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002f5c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002f5e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002f60:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002f64:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	b1ab      	cbz	r3, 8002f96 <HAL_I2C_Mem_Write+0x10a>
 8002f6a:	b9a2      	cbnz	r2, 8002f96 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	4620      	mov	r0, r4
 8002f72:	9600      	str	r6, [sp, #0]
 8002f74:	f7ff fe7e 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d19f      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2bff      	cmp	r3, #255	; 0xff
 8002f82:	d92f      	bls.n	8002fe4 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f84:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f8a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7ff fda7 	bl	8002ae4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002f96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1cd      	bne.n	8002f3a <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	4632      	mov	r2, r6
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff fefc 	bl	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d187      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	2120      	movs	r1, #32
 8002fb0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002fb8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002fbc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002fca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fce:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002fd2:	e774      	b.n	8002ebe <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002fd4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fda:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	e7a6      	b.n	8002f32 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8002fe4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fea:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002fec:	b292      	uxth	r2, r2
 8002fee:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	e7cc      	b.n	8002f8e <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	e762      	b.n	8002ebe <HAL_I2C_Mem_Write+0x32>

08002ff8 <HAL_I2C_Mem_Read>:
{
 8002ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	469b      	mov	fp, r3
 8003000:	4604      	mov	r4, r0
 8003002:	460f      	mov	r7, r1
 8003004:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003008:	4692      	mov	sl, r2
 800300a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800300e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003010:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 80a7 	bne.w	8003168 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800301a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800301c:	b10b      	cbz	r3, 8003022 <HAL_I2C_Mem_Read+0x2a>
 800301e:	9b03      	ldr	r3, [sp, #12]
 8003020:	b933      	cbnz	r3, 8003030 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003026:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
}
 800302a:	b005      	add	sp, #20
 800302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003030:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003034:	2b01      	cmp	r3, #1
 8003036:	f000 8097 	beq.w	8003168 <HAL_I2C_Mem_Read+0x170>
 800303a:	2501      	movs	r5, #1
 800303c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003040:	f7fe fffc 	bl	800203c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003044:	2319      	movs	r3, #25
 8003046:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003048:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800304a:	462a      	mov	r2, r5
 800304c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003050:	4620      	mov	r0, r4
 8003052:	f7ff fe0f 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4680      	mov	r8, r0
 8003058:	2800      	cmp	r0, #0
 800305a:	d1e5      	bne.n	8003028 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800305c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 800305e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003060:	4652      	mov	r2, sl
 8003062:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003064:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003068:	2340      	movs	r3, #64	; 0x40
 800306a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800306e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003070:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003072:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003074:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003076:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003078:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 800307c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800307e:	465b      	mov	r3, fp
 8003080:	f7ff fe58 	bl	8002d34 <I2C_RequestMemoryRead>
 8003084:	b110      	cbz	r0, 800308c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8003086:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800308a:	e7cd      	b.n	8003028 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800308c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	2bff      	cmp	r3, #255	; 0xff
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_I2C_Mem_Read+0x174>)
 8003094:	d958      	bls.n	8003148 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003096:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800309e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030a0:	4639      	mov	r1, r7
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff fd1e 	bl	8002ae4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030a8:	464b      	mov	r3, r9
 80030aa:	2200      	movs	r2, #0
 80030ac:	2104      	movs	r1, #4
 80030ae:	4620      	mov	r0, r4
 80030b0:	9600      	str	r6, [sp, #0]
 80030b2:	f7ff fddf 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	d1b6      	bne.n	8003028 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030c0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80030c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80030c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80030c6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80030c8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80030ca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030ce:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80030d0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80030d2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	b1ab      	cbz	r3, 800310a <HAL_I2C_Mem_Read+0x112>
 80030de:	b9a2      	cbnz	r2, 800310a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030e0:	464b      	mov	r3, r9
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	4620      	mov	r0, r4
 80030e6:	9600      	str	r6, [sp, #0]
 80030e8:	f7ff fdc4 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d19b      	bne.n	8003028 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2bff      	cmp	r3, #255	; 0xff
 80030f6:	d92f      	bls.n	8003158 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030fe:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003100:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003102:	4639      	mov	r1, r7
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff fced 	bl	8002ae4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800310a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ca      	bne.n	80030a8 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	4632      	mov	r2, r6
 8003114:	4649      	mov	r1, r9
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff fe42 	bl	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800311c:	2800      	cmp	r0, #0
 800311e:	d183      	bne.n	8003028 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	2120      	movs	r1, #32
 8003124:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800312c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003130:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800313e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003142:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003146:	e770      	b.n	800302a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8003148:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8003150:	b292      	uxth	r2, r2
 8003152:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	e7a3      	b.n	80030a0 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8003158:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800315a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800315e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003160:	b292      	uxth	r2, r2
 8003162:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	e7cc      	b.n	8003102 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8003168:	2002      	movs	r0, #2
 800316a:	e75e      	b.n	800302a <HAL_I2C_Mem_Read+0x32>
 800316c:	80002400 	.word	0x80002400

08003170 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003170:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003176:	2b20      	cmp	r3, #32
 8003178:	b2dc      	uxtb	r4, r3
 800317a:	d11d      	bne.n	80031b8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003180:	2b01      	cmp	r3, #1
 8003182:	d019      	beq.n	80031b8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003184:	2324      	movs	r3, #36	; 0x24
 8003186:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800319a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4311      	orrs	r1, r2
 80031a0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031aa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80031b4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80031b6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80031b8:	2002      	movs	r0, #2
 80031ba:	e7fc      	b.n	80031b6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080031bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031bc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	b2dc      	uxtb	r4, r3
 80031c6:	d11c      	bne.n	8003202 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d018      	beq.n	8003202 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d0:	2324      	movs	r3, #36	; 0x24
 80031d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d6:	6803      	ldr	r3, [r0, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031e0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031e6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ea:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80031fe:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003200:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003202:	2002      	movs	r0, #2
 8003204:	e7fc      	b.n	8003200 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08003208 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800320a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800320c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800320e:	4c19      	ldr	r4, [pc, #100]	; (8003274 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003226:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003228:	f7fe ff08 	bl	800203c <HAL_GetTick>
 800322c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	03da      	lsls	r2, r3, #15
 8003232:	d50c      	bpl.n	800324e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003234:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003236:	4d0f      	ldr	r5, [pc, #60]	; (8003274 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800323e:	f7fe fefd 	bl	800203c <HAL_GetTick>
 8003242:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003244:	686b      	ldr	r3, [r5, #4]
 8003246:	039b      	lsls	r3, r3, #14
 8003248:	d50a      	bpl.n	8003260 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800324a:	2000      	movs	r0, #0
 800324c:	e006      	b.n	800325c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800324e:	f7fe fef5 	bl	800203c <HAL_GetTick>
 8003252:	1b40      	subs	r0, r0, r5
 8003254:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003258:	d9e9      	bls.n	800322e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800325a:	2003      	movs	r0, #3
}
 800325c:	b003      	add	sp, #12
 800325e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003260:	f7fe feec 	bl	800203c <HAL_GetTick>
 8003264:	1b00      	subs	r0, r0, r4
 8003266:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800326a:	d9eb      	bls.n	8003244 <HAL_PWREx_EnableOverDrive+0x3c>
 800326c:	e7f5      	b.n	800325a <HAL_PWREx_EnableOverDrive+0x52>
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40007000 	.word	0x40007000

08003278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800327c:	4604      	mov	r4, r0
 800327e:	b340      	cbz	r0, 80032d2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003280:	6803      	ldr	r3, [r0, #0]
 8003282:	07db      	lsls	r3, r3, #31
 8003284:	d410      	bmi.n	80032a8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	079f      	lsls	r7, r3, #30
 800328a:	d464      	bmi.n	8003356 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	0719      	lsls	r1, r3, #28
 8003290:	f100 80aa 	bmi.w	80033e8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	075a      	lsls	r2, r3, #29
 8003298:	f100 80cb 	bmi.w	8003432 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329c:	69a2      	ldr	r2, [r4, #24]
 800329e:	2a00      	cmp	r2, #0
 80032a0:	f040 8134 	bne.w	800350c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80032a4:	2000      	movs	r0, #0
 80032a6:	e02b      	b.n	8003300 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a8:	4b96      	ldr	r3, [pc, #600]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	f002 020c 	and.w	r2, r2, #12
 80032b0:	2a04      	cmp	r2, #4
 80032b2:	d007      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	f002 020c 	and.w	r2, r2, #12
 80032ba:	2a08      	cmp	r2, #8
 80032bc:	d10b      	bne.n	80032d6 <HAL_RCC_OscConfig+0x5e>
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	0256      	lsls	r6, r2, #9
 80032c2:	d508      	bpl.n	80032d6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	4b8f      	ldr	r3, [pc, #572]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	039d      	lsls	r5, r3, #14
 80032ca:	d5dc      	bpl.n	8003286 <HAL_RCC_OscConfig+0xe>
 80032cc:	6863      	ldr	r3, [r4, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1d9      	bne.n	8003286 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80032d2:	2001      	movs	r0, #1
 80032d4:	e014      	b.n	8003300 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d6:	6862      	ldr	r2, [r4, #4]
 80032d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80032dc:	d113      	bne.n	8003306 <HAL_RCC_OscConfig+0x8e>
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032e6:	f7fe fea9 	bl	800203c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4e86      	ldr	r6, [pc, #536]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80032ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	6833      	ldr	r3, [r6, #0]
 80032f0:	0398      	lsls	r0, r3, #14
 80032f2:	d4c8      	bmi.n	8003286 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fea2 	bl	800203c <HAL_GetTick>
 80032f8:	1b40      	subs	r0, r0, r5
 80032fa:	2864      	cmp	r0, #100	; 0x64
 80032fc:	d9f7      	bls.n	80032ee <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80032fe:	2003      	movs	r0, #3
}
 8003300:	b002      	add	sp, #8
 8003302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003306:	4d7f      	ldr	r5, [pc, #508]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	b992      	cbnz	r2, 8003332 <HAL_RCC_OscConfig+0xba>
 800330c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	682b      	ldr	r3, [r5, #0]
 8003314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003318:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800331a:	f7fe fe8f 	bl	800203c <HAL_GetTick>
 800331e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	0399      	lsls	r1, r3, #14
 8003324:	d5af      	bpl.n	8003286 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003326:	f7fe fe89 	bl	800203c <HAL_GetTick>
 800332a:	1b80      	subs	r0, r0, r6
 800332c:	2864      	cmp	r0, #100	; 0x64
 800332e:	d9f7      	bls.n	8003320 <HAL_RCC_OscConfig+0xa8>
 8003330:	e7e5      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003332:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0xd0>
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333c:	602b      	str	r3, [r5, #0]
 800333e:	682b      	ldr	r3, [r5, #0]
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	e7ce      	b.n	80032e6 <HAL_RCC_OscConfig+0x6e>
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	602b      	str	r3, [r5, #0]
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003354:	e7f6      	b.n	8003344 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003356:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	f012 0f0c 	tst.w	r2, #12
 800335e:	d007      	beq.n	8003370 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	f002 020c 	and.w	r2, r2, #12
 8003366:	2a08      	cmp	r2, #8
 8003368:	d111      	bne.n	800338e <HAL_RCC_OscConfig+0x116>
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	0252      	lsls	r2, r2, #9
 800336e:	d40e      	bmi.n	800338e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003370:	4a64      	ldr	r2, [pc, #400]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003372:	6813      	ldr	r3, [r2, #0]
 8003374:	079b      	lsls	r3, r3, #30
 8003376:	d502      	bpl.n	800337e <HAL_RCC_OscConfig+0x106>
 8003378:	68e3      	ldr	r3, [r4, #12]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d1a9      	bne.n	80032d2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	6921      	ldr	r1, [r4, #16]
 8003382:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003386:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800338a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338c:	e77e      	b.n	800328c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800338e:	68e2      	ldr	r2, [r4, #12]
 8003390:	b1c2      	cbz	r2, 80033c4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8003392:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4d5b      	ldr	r5, [pc, #364]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800339c:	f7fe fe4e 	bl	800203c <HAL_GetTick>
 80033a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	682b      	ldr	r3, [r5, #0]
 80033a4:	079f      	lsls	r7, r3, #30
 80033a6:	d507      	bpl.n	80033b8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	6922      	ldr	r2, [r4, #16]
 80033ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80033b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033b4:	602b      	str	r3, [r5, #0]
 80033b6:	e769      	b.n	800328c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b8:	f7fe fe40 	bl	800203c <HAL_GetTick>
 80033bc:	1b80      	subs	r0, r0, r6
 80033be:	2802      	cmp	r0, #2
 80033c0:	d9ef      	bls.n	80033a2 <HAL_RCC_OscConfig+0x12a>
 80033c2:	e79c      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80033c4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	4e4f      	ldr	r6, [pc, #316]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033ce:	f7fe fe35 	bl	800203c <HAL_GetTick>
 80033d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	0798      	lsls	r0, r3, #30
 80033d8:	f57f af58 	bpl.w	800328c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033dc:	f7fe fe2e 	bl	800203c <HAL_GetTick>
 80033e0:	1b40      	subs	r0, r0, r5
 80033e2:	2802      	cmp	r0, #2
 80033e4:	d9f6      	bls.n	80033d4 <HAL_RCC_OscConfig+0x15c>
 80033e6:	e78a      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033e8:	6963      	ldr	r3, [r4, #20]
 80033ea:	4d46      	ldr	r5, [pc, #280]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 80033ec:	b183      	cbz	r3, 8003410 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80033ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80033f6:	f7fe fe21 	bl	800203c <HAL_GetTick>
 80033fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80033fe:	079b      	lsls	r3, r3, #30
 8003400:	f53f af48 	bmi.w	8003294 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fe1a 	bl	800203c <HAL_GetTick>
 8003408:	1b80      	subs	r0, r0, r6
 800340a:	2802      	cmp	r0, #2
 800340c:	d9f6      	bls.n	80033fc <HAL_RCC_OscConfig+0x184>
 800340e:	e776      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003410:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003418:	f7fe fe10 	bl	800203c <HAL_GetTick>
 800341c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003420:	079f      	lsls	r7, r3, #30
 8003422:	f57f af37 	bpl.w	8003294 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003426:	f7fe fe09 	bl	800203c <HAL_GetTick>
 800342a:	1b80      	subs	r0, r0, r6
 800342c:	2802      	cmp	r0, #2
 800342e:	d9f6      	bls.n	800341e <HAL_RCC_OscConfig+0x1a6>
 8003430:	e765      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003432:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003436:	00d0      	lsls	r0, r2, #3
 8003438:	d427      	bmi.n	800348a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800343c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	4d2e      	ldr	r5, [pc, #184]	; (8003508 <HAL_RCC_OscConfig+0x290>)
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	05d9      	lsls	r1, r3, #23
 8003454:	d51b      	bpl.n	800348e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003456:	68a3      	ldr	r3, [r4, #8]
 8003458:	4d2a      	ldr	r5, [pc, #168]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 800345a:	2b01      	cmp	r3, #1
 800345c:	d127      	bne.n	80034ae <HAL_RCC_OscConfig+0x236>
 800345e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800346a:	f7fe fde7 	bl	800203c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	4e25      	ldr	r6, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003470:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003474:	079b      	lsls	r3, r3, #30
 8003476:	d53f      	bpl.n	80034f8 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8003478:	2f00      	cmp	r7, #0
 800347a:	f43f af0f 	beq.w	800329c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_RCC_OscConfig+0x28c>)
 8003480:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003486:	6413      	str	r3, [r2, #64]	; 0x40
 8003488:	e708      	b.n	800329c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800348a:	2700      	movs	r7, #0
 800348c:	e7df      	b.n	800344e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003496:	f7fe fdd1 	bl	800203c <HAL_GetTick>
 800349a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	05da      	lsls	r2, r3, #23
 80034a0:	d4d9      	bmi.n	8003456 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fe fdcb 	bl	800203c <HAL_GetTick>
 80034a6:	1b80      	subs	r0, r0, r6
 80034a8:	2864      	cmp	r0, #100	; 0x64
 80034aa:	d9f7      	bls.n	800349c <HAL_RCC_OscConfig+0x224>
 80034ac:	e727      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ae:	b9ab      	cbnz	r3, 80034dc <HAL_RCC_OscConfig+0x264>
 80034b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	672b      	str	r3, [r5, #112]	; 0x70
 80034bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80034be:	f023 0304 	bic.w	r3, r3, #4
 80034c2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80034c4:	f7fe fdba 	bl	800203c <HAL_GetTick>
 80034c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80034cc:	0798      	lsls	r0, r3, #30
 80034ce:	d5d3      	bpl.n	8003478 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe fdb4 	bl	800203c <HAL_GetTick>
 80034d4:	1b80      	subs	r0, r0, r6
 80034d6:	4540      	cmp	r0, r8
 80034d8:	d9f7      	bls.n	80034ca <HAL_RCC_OscConfig+0x252>
 80034da:	e710      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	2b05      	cmp	r3, #5
 80034de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80034e0:	d103      	bne.n	80034ea <HAL_RCC_OscConfig+0x272>
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	672b      	str	r3, [r5, #112]	; 0x70
 80034e8:	e7b9      	b.n	800345e <HAL_RCC_OscConfig+0x1e6>
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	672b      	str	r3, [r5, #112]	; 0x70
 80034f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	e7b5      	b.n	8003464 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fda0 	bl	800203c <HAL_GetTick>
 80034fc:	1b40      	subs	r0, r0, r5
 80034fe:	4540      	cmp	r0, r8
 8003500:	d9b7      	bls.n	8003472 <HAL_RCC_OscConfig+0x1fa>
 8003502:	e6fc      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
 8003504:	40023800 	.word	0x40023800
 8003508:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350c:	4d38      	ldr	r5, [pc, #224]	; (80035f0 <HAL_RCC_OscConfig+0x378>)
 800350e:	68ab      	ldr	r3, [r5, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d041      	beq.n	800359c <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8003518:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800351c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003520:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003522:	d12e      	bne.n	8003582 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8003524:	f7fe fd8a 	bl	800203c <HAL_GetTick>
 8003528:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	682b      	ldr	r3, [r5, #0]
 800352c:	0199      	lsls	r1, r3, #6
 800352e:	d422      	bmi.n	8003576 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800353a:	430b      	orrs	r3, r1
 800353c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003540:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003542:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003548:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800354c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003550:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003558:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800355a:	f7fe fd6f 	bl	800203c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4d24      	ldr	r5, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8003560:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	682b      	ldr	r3, [r5, #0]
 8003564:	019a      	lsls	r2, r3, #6
 8003566:	f53f ae9d 	bmi.w	80032a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe fd67 	bl	800203c <HAL_GetTick>
 800356e:	1b00      	subs	r0, r0, r4
 8003570:	2802      	cmp	r0, #2
 8003572:	d9f6      	bls.n	8003562 <HAL_RCC_OscConfig+0x2ea>
 8003574:	e6c3      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fd61 	bl	800203c <HAL_GetTick>
 800357a:	1b80      	subs	r0, r0, r6
 800357c:	2802      	cmp	r0, #2
 800357e:	d9d4      	bls.n	800352a <HAL_RCC_OscConfig+0x2b2>
 8003580:	e6bd      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003582:	f7fe fd5b 	bl	800203c <HAL_GetTick>
 8003586:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	019b      	lsls	r3, r3, #6
 800358c:	f57f ae8a 	bpl.w	80032a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe fd54 	bl	800203c <HAL_GetTick>
 8003594:	1b00      	subs	r0, r0, r4
 8003596:	2802      	cmp	r0, #2
 8003598:	d9f6      	bls.n	8003588 <HAL_RCC_OscConfig+0x310>
 800359a:	e6b0      	b.n	80032fe <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800359e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a0:	f43f ae97 	beq.w	80032d2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	69e1      	ldr	r1, [r4, #28]
 80035aa:	428a      	cmp	r2, r1
 80035ac:	f47f ae91 	bne.w	80032d2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b4:	6a21      	ldr	r1, [r4, #32]
 80035b6:	428a      	cmp	r2, r1
 80035b8:	f47f ae8b 	bne.w	80032d2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035bc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c2:	401a      	ands	r2, r3
 80035c4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80035c8:	f47f ae83 	bne.w	80032d2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80035ce:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80035d2:	0852      	lsrs	r2, r2, #1
 80035d4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80035da:	f47f ae7a 	bne.w	80032d2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035de:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80035e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035e4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80035e8:	f43f ae5c 	beq.w	80032a4 <HAL_RCC_OscConfig+0x2c>
 80035ec:	e671      	b.n	80032d2 <HAL_RCC_OscConfig+0x5a>
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f4:	4913      	ldr	r1, [pc, #76]	; (8003644 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80035f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f8:	688b      	ldr	r3, [r1, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d01b      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x46>
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11b      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003606:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003608:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800360c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003610:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003614:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003618:	bf1a      	itte	ne
 800361a:	480b      	ldrne	r0, [pc, #44]	; (8003648 <HAL_RCC_GetSysClockFreq+0x54>)
 800361c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	480b      	ldreq	r0, [pc, #44]	; (800364c <HAL_RCC_GetSysClockFreq+0x58>)
 8003620:	fba1 0100 	umull	r0, r1, r1, r0
 8003624:	f7fd fb40 	bl	8000ca8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCC_GetSysClockFreq+0x50>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003630:	3301      	adds	r3, #1
 8003632:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003634:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003638:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363a:	4803      	ldr	r0, [pc, #12]	; (8003648 <HAL_RCC_GetSysClockFreq+0x54>)
 800363c:	e7fc      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800363e:	4803      	ldr	r0, [pc, #12]	; (800364c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003640:	e7fa      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x44>
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	007a1200 	.word	0x007a1200
 800364c:	00f42400 	.word	0x00f42400

08003650 <HAL_RCC_ClockConfig>:
{
 8003650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003654:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003656:	4604      	mov	r4, r0
 8003658:	b910      	cbnz	r0, 8003660 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800365a:	2001      	movs	r0, #1
}
 800365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4a46      	ldr	r2, [pc, #280]	; (800377c <HAL_RCC_ClockConfig+0x12c>)
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	428b      	cmp	r3, r1
 800366a:	d328      	bcc.n	80036be <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	0797      	lsls	r7, r2, #30
 8003670:	d430      	bmi.n	80036d4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	07d0      	lsls	r0, r2, #31
 8003674:	d444      	bmi.n	8003700 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003676:	4a41      	ldr	r2, [pc, #260]	; (800377c <HAL_RCC_ClockConfig+0x12c>)
 8003678:	6813      	ldr	r3, [r2, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	42ab      	cmp	r3, r5
 8003680:	d867      	bhi.n	8003752 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	0751      	lsls	r1, r2, #29
 8003686:	d470      	bmi.n	800376a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	0713      	lsls	r3, r2, #28
 800368a:	d507      	bpl.n	800369c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368c:	4a3c      	ldr	r2, [pc, #240]	; (8003780 <HAL_RCC_ClockConfig+0x130>)
 800368e:	6921      	ldr	r1, [r4, #16]
 8003690:	6893      	ldr	r3, [r2, #8]
 8003692:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003696:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800369a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800369c:	f7ff ffaa 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_RCC_ClockConfig+0x130>)
 80036a2:	4a38      	ldr	r2, [pc, #224]	; (8003784 <HAL_RCC_ClockConfig+0x134>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	40d8      	lsrs	r0, r3
 80036ae:	4b36      	ldr	r3, [pc, #216]	; (8003788 <HAL_RCC_ClockConfig+0x138>)
 80036b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_ClockConfig+0x13c>)
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	f7fe fbdf 	bl	8001e78 <HAL_InitTick>
  return HAL_OK;
 80036ba:	2000      	movs	r0, #0
 80036bc:	e7ce      	b.n	800365c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	f023 030f 	bic.w	r3, r3, #15
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	428b      	cmp	r3, r1
 80036d0:	d1c3      	bne.n	800365a <HAL_RCC_ClockConfig+0xa>
 80036d2:	e7cb      	b.n	800366c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	f012 0f04 	tst.w	r2, #4
 80036d8:	4b29      	ldr	r3, [pc, #164]	; (8003780 <HAL_RCC_ClockConfig+0x130>)
 80036da:	d003      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036dc:	6899      	ldr	r1, [r3, #8]
 80036de:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80036e2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	0716      	lsls	r6, r2, #28
 80036e6:	d503      	bpl.n	80036f0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80036ee:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4923      	ldr	r1, [pc, #140]	; (8003780 <HAL_RCC_ClockConfig+0x130>)
 80036f2:	68a0      	ldr	r0, [r4, #8]
 80036f4:	688b      	ldr	r3, [r1, #8]
 80036f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036fa:	4303      	orrs	r3, r0
 80036fc:	608b      	str	r3, [r1, #8]
 80036fe:	e7b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003700:	6861      	ldr	r1, [r4, #4]
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <HAL_RCC_ClockConfig+0x130>)
 8003704:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003708:	d11b      	bne.n	8003742 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	d0a4      	beq.n	800365a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003710:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003712:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4f1a      	ldr	r7, [pc, #104]	; (8003780 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003718:	f022 0203 	bic.w	r2, r2, #3
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003720:	f7fe fc8c 	bl	800203c <HAL_GetTick>
 8003724:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6862      	ldr	r2, [r4, #4]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003732:	d0a0      	beq.n	8003676 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003734:	f7fe fc82 	bl	800203c <HAL_GetTick>
 8003738:	1b80      	subs	r0, r0, r6
 800373a:	4540      	cmp	r0, r8
 800373c:	d9f3      	bls.n	8003726 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800373e:	2003      	movs	r0, #3
 8003740:	e78c      	b.n	800365c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003742:	2902      	cmp	r1, #2
 8003744:	d102      	bne.n	800374c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800374a:	e7e0      	b.n	800370e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	f012 0f02 	tst.w	r2, #2
 8003750:	e7dd      	b.n	800370e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	f023 030f 	bic.w	r3, r3, #15
 8003758:	432b      	orrs	r3, r5
 800375a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375c:	6813      	ldr	r3, [r2, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	42ab      	cmp	r3, r5
 8003764:	f47f af79 	bne.w	800365a <HAL_RCC_ClockConfig+0xa>
 8003768:	e78b      	b.n	8003682 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376a:	4905      	ldr	r1, [pc, #20]	; (8003780 <HAL_RCC_ClockConfig+0x130>)
 800376c:	68e0      	ldr	r0, [r4, #12]
 800376e:	688b      	ldr	r3, [r1, #8]
 8003770:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003774:	4303      	orrs	r3, r0
 8003776:	608b      	str	r3, [r1, #8]
 8003778:	e786      	b.n	8003688 <HAL_RCC_ClockConfig+0x38>
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00
 8003780:	40023800 	.word	0x40023800
 8003784:	08011732 	.word	0x08011732
 8003788:	20000010 	.word	0x20000010
 800378c:	20000018 	.word	0x20000018

08003790 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003790:	4b01      	ldr	r3, [pc, #4]	; (8003798 <HAL_RCC_GetHCLKFreq+0x8>)
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000010 	.word	0x20000010

0800379c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800379e:	4a05      	ldr	r2, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	4a03      	ldr	r2, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80037aa:	6810      	ldr	r0, [r2, #0]
}
 80037ac:	40d8      	lsrs	r0, r3
 80037ae:	4770      	bx	lr
 80037b0:	40023800 	.word	0x40023800
 80037b4:	08011742 	.word	0x08011742
 80037b8:	20000010 	.word	0x20000010

080037bc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037bc:	230f      	movs	r3, #15
 80037be:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetClockConfig+0x34>)
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	f002 0203 	and.w	r2, r2, #3
 80037c8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80037d0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80037d8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80037e2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCC_GetClockConfig+0x38>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	600b      	str	r3, [r1, #0]
}
 80037ee:	4770      	bx	lr
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40023c00 	.word	0x40023c00

080037f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037f8:	6803      	ldr	r3, [r0, #0]
{
 80037fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037fe:	f013 0601 	ands.w	r6, r3, #1
{
 8003802:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003804:	d00b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003806:	4aaa      	ldr	r2, [pc, #680]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003808:	6891      	ldr	r1, [r2, #8]
 800380a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800380e:	6091      	str	r1, [r2, #8]
 8003810:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003812:	6891      	ldr	r1, [r2, #8]
 8003814:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003816:	fab6 f686 	clz	r6, r6
 800381a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800381c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800381e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003822:	d012      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003824:	49a2      	ldr	r1, [pc, #648]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003826:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003828:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800382c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003830:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003834:	bf08      	it	eq
 8003836:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003838:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800383c:	bf16      	itet	ne
 800383e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003842:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003844:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003846:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800384a:	02d8      	lsls	r0, r3, #11
 800384c:	d510      	bpl.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800384e:	4898      	ldr	r0, [pc, #608]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003850:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003852:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003856:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800385a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800385e:	ea42 0201 	orr.w	r2, r2, r1
 8003862:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003866:	f000 8184 	beq.w	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800386a:	2900      	cmp	r1, #0
 800386c:	bf08      	it	eq
 800386e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003870:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003874:	bf18      	it	ne
 8003876:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003878:	0699      	lsls	r1, r3, #26
 800387a:	d531      	bpl.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	4b8c      	ldr	r3, [pc, #560]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800387e:	4f8d      	ldr	r7, [pc, #564]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003882:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389a:	f7fe fbcf 	bl	800203c <HAL_GetTick>
 800389e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	05da      	lsls	r2, r3, #23
 80038a4:	f140 8167 	bpl.w	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038a8:	4f81      	ldr	r7, [pc, #516]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80038aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80038b0:	f040 816c 	bne.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038b6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80038ba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80038be:	4a7c      	ldr	r2, [pc, #496]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80038c0:	f040 818a 	bne.w	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80038c4:	6891      	ldr	r1, [r2, #8]
 80038c6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80038ca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80038ce:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6091      	str	r1, [r2, #8]
 80038d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038da:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80038dc:	430b      	orrs	r3, r1
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	06d9      	lsls	r1, r3, #27
 80038e4:	d50c      	bpl.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038e6:	4a72      	ldr	r2, [pc, #456]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80038e8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80038ec:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80038f0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80038f4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80038f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038fa:	4301      	orrs	r1, r0
 80038fc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003900:	045a      	lsls	r2, r3, #17
 8003902:	d508      	bpl.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003904:	496a      	ldr	r1, [pc, #424]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003906:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003908:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800390c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003910:	4302      	orrs	r2, r0
 8003912:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003916:	041f      	lsls	r7, r3, #16
 8003918:	d508      	bpl.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800391a:	4965      	ldr	r1, [pc, #404]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800391c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800391e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003922:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003926:	4302      	orrs	r2, r0
 8003928:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800392c:	03d8      	lsls	r0, r3, #15
 800392e:	d508      	bpl.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003930:	495f      	ldr	r1, [pc, #380]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003932:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003934:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003938:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800393c:	4302      	orrs	r2, r0
 800393e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003942:	0399      	lsls	r1, r3, #14
 8003944:	d508      	bpl.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003946:	495a      	ldr	r1, [pc, #360]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003948:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800394a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800394e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003952:	4302      	orrs	r2, r0
 8003954:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003958:	065a      	lsls	r2, r3, #25
 800395a:	d508      	bpl.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800395c:	4954      	ldr	r1, [pc, #336]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800395e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003960:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003964:	f022 0203 	bic.w	r2, r2, #3
 8003968:	4302      	orrs	r2, r0
 800396a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396e:	061f      	lsls	r7, r3, #24
 8003970:	d508      	bpl.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003972:	494f      	ldr	r1, [pc, #316]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003974:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003976:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800397a:	f022 020c 	bic.w	r2, r2, #12
 800397e:	4302      	orrs	r2, r0
 8003980:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003984:	05d8      	lsls	r0, r3, #23
 8003986:	d508      	bpl.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003988:	4949      	ldr	r1, [pc, #292]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800398a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800398c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003990:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003994:	4302      	orrs	r2, r0
 8003996:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800399a:	0599      	lsls	r1, r3, #22
 800399c:	d508      	bpl.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800399e:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80039a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80039aa:	4302      	orrs	r2, r0
 80039ac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b0:	055a      	lsls	r2, r3, #21
 80039b2:	d508      	bpl.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039b4:	493e      	ldr	r1, [pc, #248]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039c0:	4302      	orrs	r2, r0
 80039c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039c6:	051f      	lsls	r7, r3, #20
 80039c8:	d508      	bpl.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ca:	4939      	ldr	r1, [pc, #228]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039d6:	4302      	orrs	r2, r0
 80039d8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039dc:	04d8      	lsls	r0, r3, #19
 80039de:	d508      	bpl.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039e0:	4933      	ldr	r1, [pc, #204]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039e2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80039e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80039ec:	4302      	orrs	r2, r0
 80039ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039f2:	0499      	lsls	r1, r3, #18
 80039f4:	d508      	bpl.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039f6:	492e      	ldr	r1, [pc, #184]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80039f8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80039fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80039fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003a02:	4302      	orrs	r2, r0
 8003a04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a08:	025a      	lsls	r2, r3, #9
 8003a0a:	d508      	bpl.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a0c:	4928      	ldr	r1, [pc, #160]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a0e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003a10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a14:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003a18:	4302      	orrs	r2, r0
 8003a1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a1e:	029f      	lsls	r7, r3, #10
 8003a20:	d50c      	bpl.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a22:	4823      	ldr	r0, [pc, #140]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a24:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003a26:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003a2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a2e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003a32:	bf08      	it	eq
 8003a34:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a36:	430a      	orrs	r2, r1
 8003a38:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003a3c:	f013 0f08 	tst.w	r3, #8
 8003a40:	bf18      	it	ne
 8003a42:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a44:	0358      	lsls	r0, r3, #13
 8003a46:	d508      	bpl.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a48:	4919      	ldr	r1, [pc, #100]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a4a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003a4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a54:	4302      	orrs	r2, r0
 8003a56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a5a:	0219      	lsls	r1, r3, #8
 8003a5c:	d509      	bpl.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a5e:	4914      	ldr	r1, [pc, #80]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a60:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003a64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003a68:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003a6c:	4302      	orrs	r2, r0
 8003a6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a72:	2e01      	cmp	r6, #1
 8003a74:	f000 80b4 	beq.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003a78:	019a      	lsls	r2, r3, #6
 8003a7a:	f100 80b1 	bmi.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a7e:	2d01      	cmp	r5, #1
 8003a80:	d175      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a82:	4d0b      	ldr	r5, [pc, #44]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8c:	f7fe fad6 	bl	800203c <HAL_GetTick>
 8003a90:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	009f      	lsls	r7, r3, #2
 8003a96:	f100 8127 	bmi.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	0316      	lsls	r6, r2, #12
 8003a9e:	d501      	bpl.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003aa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003aa2:	b14b      	cbz	r3, 8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003aa4:	02d0      	lsls	r0, r2, #11
 8003aa6:	d522      	bpl.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aaa:	bb03      	cbnz	r3, 8003aee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003aac:	e004      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ab8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003abc:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6961      	ldr	r1, [r4, #20]
 8003acc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003ad0:	69a1      	ldr	r1, [r4, #24]
 8003ad2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ad6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ada:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003ade:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ae0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003ae4:	3901      	subs	r1, #1
 8003ae6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003aea:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003aee:	0291      	lsls	r1, r2, #10
 8003af0:	d515      	bpl.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003af2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af8:	d111      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003afa:	4982      	ldr	r1, [pc, #520]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003afc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b00:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b04:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003b08:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003b0c:	4303      	orrs	r3, r0
 8003b0e:	6960      	ldr	r0, [r4, #20]
 8003b10:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003b14:	6a20      	ldr	r0, [r4, #32]
 8003b16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b1e:	0712      	lsls	r2, r2, #28
 8003b20:	d519      	bpl.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b22:	4a78      	ldr	r2, [pc, #480]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b24:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b28:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b2c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6961      	ldr	r1, [r4, #20]
 8003b38:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003b3c:	69e1      	ldr	r1, [r4, #28]
 8003b3e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003b42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b46:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003b4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b4c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b50:	430b      	orrs	r3, r1
 8003b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b56:	4c6b      	ldr	r4, [pc, #428]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b60:	f7fe fa6c 	bl	800203c <HAL_GetTick>
 8003b64:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	f140 80c4 	bpl.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e009      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8003b72:	2601      	movs	r6, #1
 8003b74:	e67c      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b76:	f7fe fa61 	bl	800203c <HAL_GetTick>
 8003b7a:	eba0 0008 	sub.w	r0, r0, r8
 8003b7e:	2864      	cmp	r0, #100	; 0x64
 8003b80:	f67f ae8e 	bls.w	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003b84:	2003      	movs	r0, #3
}
 8003b86:	b003      	add	sp, #12
 8003b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003b8e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f43f ae8e 	beq.w	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ba4:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ba8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bac:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003bae:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb2:	07db      	lsls	r3, r3, #31
 8003bb4:	f57f ae7e 	bpl.w	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8003bb8:	f7fe fa40 	bl	800203c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bbc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003bc0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc4:	0798      	lsls	r0, r3, #30
 8003bc6:	f53f ae75 	bmi.w	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fe fa37 	bl	800203c <HAL_GetTick>
 8003bce:	eba0 0008 	sub.w	r0, r0, r8
 8003bd2:	4548      	cmp	r0, r9
 8003bd4:	d9f5      	bls.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8003bd6:	e7d5      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd8:	6891      	ldr	r1, [r2, #8]
 8003bda:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003bde:	e679      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8003be0:	4e48      	ldr	r6, [pc, #288]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003be2:	6833      	ldr	r3, [r6, #0]
 8003be4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003bea:	f7fe fa27 	bl	800203c <HAL_GetTick>
 8003bee:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bf0:	6833      	ldr	r3, [r6, #0]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	d472      	bmi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003bf6:	6822      	ldr	r2, [r4, #0]
 8003bf8:	07d7      	lsls	r7, r2, #31
 8003bfa:	d512      	bpl.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bfe:	b983      	cbnz	r3, 8003c22 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c00:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c04:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c0c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6861      	ldr	r1, [r4, #4]
 8003c14:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003c18:	68a1      	ldr	r1, [r4, #8]
 8003c1a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003c1e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c22:	0316      	lsls	r6, r2, #12
 8003c24:	d503      	bpl.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003c26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2c:	d005      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003c2e:	02d0      	lsls	r0, r2, #11
 8003c30:	d51e      	bpl.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c38:	d11a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c3a:	4932      	ldr	r1, [pc, #200]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c3c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c40:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c48:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003c4c:	4303      	orrs	r3, r0
 8003c4e:	6860      	ldr	r0, [r4, #4]
 8003c50:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c54:	68e0      	ldr	r0, [r4, #12]
 8003c56:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c5e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8003c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c64:	f020 001f 	bic.w	r0, r0, #31
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	4303      	orrs	r3, r0
 8003c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c70:	01d1      	lsls	r1, r2, #7
 8003c72:	d511      	bpl.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c74:	4923      	ldr	r1, [pc, #140]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c76:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c7a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c7e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003c82:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003c86:	4303      	orrs	r3, r0
 8003c88:	6860      	ldr	r0, [r4, #4]
 8003c8a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c8e:	6920      	ldr	r0, [r4, #16]
 8003c90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c98:	0192      	lsls	r2, r2, #6
 8003c9a:	d50d      	bpl.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c9c:	6923      	ldr	r3, [r4, #16]
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003ca6:	68e2      	ldr	r2, [r4, #12]
 8003ca8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003cac:	68a2      	ldr	r2, [r4, #8]
 8003cae:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003cb2:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003cb8:	4e12      	ldr	r6, [pc, #72]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cba:	6833      	ldr	r3, [r6, #0]
 8003cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003cc2:	f7fe f9bb 	bl	800203c <HAL_GetTick>
 8003cc6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cc8:	6833      	ldr	r3, [r6, #0]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	f53f aed7 	bmi.w	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd0:	f7fe f9b4 	bl	800203c <HAL_GetTick>
 8003cd4:	1bc0      	subs	r0, r0, r7
 8003cd6:	2864      	cmp	r0, #100	; 0x64
 8003cd8:	d9f6      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003cda:	e753      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cdc:	f7fe f9ae 	bl	800203c <HAL_GetTick>
 8003ce0:	1bc0      	subs	r0, r0, r7
 8003ce2:	2864      	cmp	r0, #100	; 0x64
 8003ce4:	d984      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003ce6:	e74d      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ce8:	f7fe f9a8 	bl	800203c <HAL_GetTick>
 8003cec:	1b80      	subs	r0, r0, r6
 8003cee:	2864      	cmp	r0, #100	; 0x64
 8003cf0:	f67f aecf 	bls.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003cf4:	e746      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf6:	f7fe f9a1 	bl	800203c <HAL_GetTick>
 8003cfa:	1b40      	subs	r0, r0, r5
 8003cfc:	2864      	cmp	r0, #100	; 0x64
 8003cfe:	f67f af32 	bls.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d02:	e73f      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8003d04:	40023800 	.word	0x40023800

08003d08 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d133      	bne.n	8003d7c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	2302      	movs	r3, #2
 8003d16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d1a:	6803      	ldr	r3, [r0, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d24:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <HAL_TIM_Base_Start_IT+0x74>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01a      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x54>
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d017      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x54>
 8003d30:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x54>
 8003d38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00f      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x54>
 8003d40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x54>
 8003d48:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x54>
 8003d50:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x54>
 8003d58:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d107      	bne.n	8003d70 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	6899      	ldr	r1, [r3, #8]
 8003d62:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <HAL_TIM_Base_Start_IT+0x78>)
 8003d64:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	2a06      	cmp	r2, #6
 8003d68:	d006      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x6c>
 8003d6a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003d6e:	d003      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d78:	2000      	movs	r0, #0
}
 8003d7a:	4770      	bx	lr
    return HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	4770      	bx	lr
 8003d80:	40010000 	.word	0x40010000
 8003d84:	00010007 	.word	0x00010007

08003d88 <HAL_TIM_OC_DelayElapsedCallback>:
 8003d88:	4770      	bx	lr

08003d8a <HAL_TIM_IC_CaptureCallback>:
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIM_PWM_PulseFinishedCallback>:
 8003d8c:	4770      	bx	lr

08003d8e <HAL_TIM_TriggerCallback>:
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d90:	6803      	ldr	r3, [r0, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	0791      	lsls	r1, r2, #30
{
 8003d96:	b510      	push	{r4, lr}
 8003d98:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d9a:	d50f      	bpl.n	8003dbc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	0792      	lsls	r2, r2, #30
 8003da0:	d50c      	bpl.n	8003dbc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003da2:	f06f 0202 	mvn.w	r2, #2
 8003da6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da8:	2201      	movs	r2, #1
 8003daa:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	0799      	lsls	r1, r3, #30
 8003db0:	f000 8085 	beq.w	8003ebe <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db4:	f7ff ffe9 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db8:	2300      	movs	r3, #0
 8003dba:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	0752      	lsls	r2, r2, #29
 8003dc2:	d510      	bpl.n	8003de6 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	0750      	lsls	r0, r2, #29
 8003dc8:	d50d      	bpl.n	8003de6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dca:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ddc:	d075      	beq.n	8003eca <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	f7ff ffd4 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	2300      	movs	r3, #0
 8003de4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	0711      	lsls	r1, r2, #28
 8003dec:	d50f      	bpl.n	8003e0e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	0712      	lsls	r2, r2, #28
 8003df2:	d50c      	bpl.n	8003e0e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df4:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	079b      	lsls	r3, r3, #30
 8003e04:	d067      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	f7ff ffc0 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	06d0      	lsls	r0, r2, #27
 8003e14:	d510      	bpl.n	8003e38 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	06d1      	lsls	r1, r2, #27
 8003e1a:	d50d      	bpl.n	8003e38 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e1c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e24:	2208      	movs	r2, #8
 8003e26:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003e2e:	d058      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e30:	f7ff ffab 	bl	8003d8a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e34:	2300      	movs	r3, #0
 8003e36:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	07d2      	lsls	r2, r2, #31
 8003e3e:	d508      	bpl.n	8003e52 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	07d0      	lsls	r0, r2, #31
 8003e44:	d505      	bpl.n	8003e52 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e46:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e4c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4e:	f7fe f855 	bl	8001efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	0611      	lsls	r1, r2, #24
 8003e58:	d508      	bpl.n	8003e6c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	0612      	lsls	r2, r2, #24
 8003e5e:	d505      	bpl.n	8003e6c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e64:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e68:	f000 f8d9 	bl	800401e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	05d0      	lsls	r0, r2, #23
 8003e72:	d508      	bpl.n	8003e86 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	0611      	lsls	r1, r2, #24
 8003e78:	d505      	bpl.n	8003e86 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003e82:	f000 f8cd 	bl	8004020 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	d508      	bpl.n	8003ea0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	0650      	lsls	r0, r2, #25
 8003e92:	d505      	bpl.n	8003ea0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e9c:	f7ff ff77 	bl	8003d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	0691      	lsls	r1, r2, #26
 8003ea6:	d522      	bpl.n	8003eee <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	0692      	lsls	r2, r2, #26
 8003eac:	d51f      	bpl.n	8003eee <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eae:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003eba:	f000 b8af 	b.w	800401c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	f7ff ff63 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff ff62 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8003ec8:	e776      	b.n	8003db8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	f7ff ff5d 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7ff ff5c 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8003ed4:	e785      	b.n	8003de2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	f7ff ff57 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff ff56 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8003ee0:	e793      	b.n	8003e0a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee2:	f7ff ff51 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f7ff ff50 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedCallback>
 8003eec:	e7a2      	b.n	8003e34 <HAL_TIM_IRQHandler+0xa4>
}
 8003eee:	bd10      	pop	{r4, pc}

08003ef0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef0:	4a30      	ldr	r2, [pc, #192]	; (8003fb4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003ef2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef4:	4290      	cmp	r0, r2
 8003ef6:	d012      	beq.n	8003f1e <TIM_Base_SetConfig+0x2e>
 8003ef8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0x2e>
 8003efe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003f02:	4290      	cmp	r0, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0x2e>
 8003f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f0a:	4290      	cmp	r0, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0x2e>
 8003f0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f12:	4290      	cmp	r0, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x2e>
 8003f16:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003f1a:	4290      	cmp	r0, r2
 8003f1c:	d119      	bne.n	8003f52 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003f1e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f24:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f26:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <TIM_Base_SetConfig+0xc4>)
 8003f28:	4290      	cmp	r0, r2
 8003f2a:	d029      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f30:	d026      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003f36:	4290      	cmp	r0, r2
 8003f38:	d022      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f3e:	4290      	cmp	r0, r2
 8003f40:	d01e      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f46:	4290      	cmp	r0, r2
 8003f48:	d01a      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f4a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003f4e:	4290      	cmp	r0, r2
 8003f50:	d016      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f52:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <TIM_Base_SetConfig+0xc8>)
 8003f54:	4290      	cmp	r0, r2
 8003f56:	d013      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f5c:	4290      	cmp	r0, r2
 8003f5e:	d00f      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f64:	4290      	cmp	r0, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f68:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003f6c:	4290      	cmp	r0, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f74:	4290      	cmp	r0, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x90>
 8003f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f7c:	4290      	cmp	r0, r2
 8003f7e:	d103      	bne.n	8003f88 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f84:	68ca      	ldr	r2, [r1, #12]
 8003f86:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f88:	694a      	ldr	r2, [r1, #20]
 8003f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003f90:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f92:	688b      	ldr	r3, [r1, #8]
 8003f94:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f96:	680b      	ldr	r3, [r1, #0]
 8003f98:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <TIM_Base_SetConfig+0xc4>)
 8003f9c:	4298      	cmp	r0, r3
 8003f9e:	d003      	beq.n	8003fa8 <TIM_Base_SetConfig+0xb8>
 8003fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa4:	4298      	cmp	r0, r3
 8003fa6:	d101      	bne.n	8003fac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa8:	690b      	ldr	r3, [r1, #16]
 8003faa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fac:	2301      	movs	r3, #1
 8003fae:	6143      	str	r3, [r0, #20]
}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40014000 	.word	0x40014000

08003fbc <HAL_TIM_Base_Init>:
{
 8003fbc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	b350      	cbz	r0, 8004018 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fca:	b91b      	cbnz	r3, 8003fd4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003fcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fd0:	f7ff fe9a 	bl	8003d08 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fde:	f7ff ff87 	bl	8003ef0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe2:	2301      	movs	r3, #1
  return HAL_OK;
 8003fe4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ff2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003ff6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004002:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800400a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800400e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004012:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004016:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e7fc      	b.n	8004016 <HAL_TIM_Base_Init+0x5a>

0800401c <HAL_TIMEx_CommutCallback>:
 800401c:	4770      	bx	lr

0800401e <HAL_TIMEx_BreakCallback>:
 800401e:	4770      	bx	lr

08004020 <HAL_TIMEx_Break2Callback>:
 8004020:	4770      	bx	lr

08004022 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004022:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402c:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402e:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004036:	4770      	bx	lr

08004038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800403c:	4770      	bx	lr

0800403e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800403e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004040:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004042:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004044:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800404a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800404c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800404e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004050:	3301      	adds	r3, #1
 8004052:	6003      	str	r3, [r0, #0]
}
 8004054:	4770      	bx	lr

08004056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004056:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004058:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800405a:	1c63      	adds	r3, r4, #1
 800405c:	d10a      	bne.n	8004074 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800405e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004064:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004066:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004068:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800406a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800406c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800406e:	3301      	adds	r3, #1
 8004070:	6003      	str	r3, [r0, #0]
}
 8004072:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004074:	f100 0208 	add.w	r2, r0, #8
 8004078:	4613      	mov	r3, r2
 800407a:	6852      	ldr	r2, [r2, #4]
 800407c:	6815      	ldr	r5, [r2, #0]
 800407e:	42a5      	cmp	r5, r4
 8004080:	d9fa      	bls.n	8004078 <vListInsert+0x22>
 8004082:	e7ed      	b.n	8004060 <vListInsert+0xa>

08004084 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004084:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004086:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800408a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800408c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004092:	bf08      	it	eq
 8004094:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004096:	2200      	movs	r2, #0
 8004098:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	3a01      	subs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040a0:	6818      	ldr	r0, [r3, #0]
}
 80040a2:	4770      	bx	lr

080040a4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a8:	f001 fc14 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80040ae:	f001 fc35 	bl	800591c <vPortExitCritical>

	return xReturn;
}
 80040b2:	fab4 f084 	clz	r0, r4
 80040b6:	0940      	lsrs	r0, r0, #5
 80040b8:	bd10      	pop	{r4, pc}

080040ba <prvCopyDataToQueue>:
{
 80040ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040bc:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040be:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80040c0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040c4:	b952      	cbnz	r2, 80040dc <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c6:	6807      	ldr	r7, [r0, #0]
 80040c8:	bb47      	cbnz	r7, 800411c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040ca:	6880      	ldr	r0, [r0, #8]
 80040cc:	f001 f8c4 	bl	8005258 <xTaskPriorityDisinherit>
 80040d0:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040d2:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040d4:	3601      	adds	r6, #1
}
 80040d6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040d8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80040dc:	b965      	cbnz	r5, 80040f8 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040de:	6840      	ldr	r0, [r0, #4]
 80040e0:	f00a fa5e 	bl	800e5a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040e4:	6863      	ldr	r3, [r4, #4]
 80040e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040e8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ea:	68a2      	ldr	r2, [r4, #8]
 80040ec:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040ee:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040f0:	d3f0      	bcc.n	80040d4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	6063      	str	r3, [r4, #4]
 80040f6:	e7ed      	b.n	80040d4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040f8:	68c0      	ldr	r0, [r0, #12]
 80040fa:	f00a fa51 	bl	800e5a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004100:	68e3      	ldr	r3, [r4, #12]
 8004102:	4251      	negs	r1, r2
 8004104:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800410a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800410c:	bf3e      	ittt	cc
 800410e:	68a3      	ldrcc	r3, [r4, #8]
 8004110:	185b      	addcc	r3, r3, r1
 8004112:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004114:	2d02      	cmp	r5, #2
 8004116:	d101      	bne.n	800411c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004118:	b116      	cbz	r6, 8004120 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800411a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800411c:	2500      	movs	r5, #0
 800411e:	e7d9      	b.n	80040d4 <prvCopyDataToQueue+0x1a>
 8004120:	4635      	mov	r5, r6
 8004122:	e7d7      	b.n	80040d4 <prvCopyDataToQueue+0x1a>

08004124 <prvCopyDataFromQueue>:
{
 8004124:	4603      	mov	r3, r0
 8004126:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800412a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800412c:	b162      	cbz	r2, 8004148 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800412e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004130:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004132:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004134:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004136:	60dc      	str	r4, [r3, #12]
}
 8004138:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800413c:	bf24      	itt	cs
 800413e:	6819      	ldrcs	r1, [r3, #0]
 8004140:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004142:	68d9      	ldr	r1, [r3, #12]
 8004144:	f00a ba2c 	b.w	800e5a0 <memcpy>
}
 8004148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800414c:	4770      	bx	lr

0800414e <prvUnlockQueue>:
{
 800414e:	b570      	push	{r4, r5, r6, lr}
 8004150:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004152:	f001 fbbf 	bl	80058d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004156:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800415e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004160:	2d00      	cmp	r5, #0
 8004162:	dc14      	bgt.n	800418e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8004164:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004166:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800416a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800416e:	f001 fbd5 	bl	800591c <vPortExitCritical>
	taskENTER_CRITICAL();
 8004172:	f001 fbaf 	bl	80058d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004176:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800417a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800417c:	2d00      	cmp	r5, #0
 800417e:	dc12      	bgt.n	80041a6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004180:	23ff      	movs	r3, #255	; 0xff
 8004182:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8004186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800418a:	f001 bbc7 	b.w	800591c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800418e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0e7      	beq.n	8004164 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004194:	4630      	mov	r0, r6
 8004196:	f000 ff75 	bl	8005084 <xTaskRemoveFromEventList>
 800419a:	b108      	cbz	r0, 80041a0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800419c:	f000 fff6 	bl	800518c <vTaskMissedYield>
			--cTxLock;
 80041a0:	3d01      	subs	r5, #1
 80041a2:	b26d      	sxtb	r5, r5
 80041a4:	e7dc      	b.n	8004160 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0e9      	beq.n	8004180 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 ff69 	bl	8005084 <xTaskRemoveFromEventList>
 80041b2:	b108      	cbz	r0, 80041b8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80041b4:	f000 ffea 	bl	800518c <vTaskMissedYield>
				--cRxLock;
 80041b8:	3d01      	subs	r5, #1
 80041ba:	b26d      	sxtb	r5, r5
 80041bc:	e7de      	b.n	800417c <prvUnlockQueue+0x2e>

080041be <xQueueGenericReset>:
{
 80041be:	b538      	push	{r3, r4, r5, lr}
 80041c0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80041c2:	4604      	mov	r4, r0
 80041c4:	b950      	cbnz	r0, 80041dc <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	b672      	cpsid	i
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	b662      	cpsie	i
 80041da:	e7fe      	b.n	80041da <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80041dc:	f001 fb7a 	bl	80058d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041e6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041e8:	434b      	muls	r3, r1
 80041ea:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041ec:	1a5b      	subs	r3, r3, r1
 80041ee:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f0:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041f2:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041f6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041f8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80041fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004202:	b9a5      	cbnz	r5, 800422e <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	b173      	cbz	r3, 8004226 <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004208:	f104 0010 	add.w	r0, r4, #16
 800420c:	f000 ff3a 	bl	8005084 <xTaskRemoveFromEventList>
 8004210:	b148      	cbz	r0, 8004226 <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8004212:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004226:	f001 fb79 	bl	800591c <vPortExitCritical>
}
 800422a:	2001      	movs	r0, #1
 800422c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800422e:	f104 0010 	add.w	r0, r4, #16
 8004232:	f7ff fef6 	bl	8004022 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004236:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800423a:	f7ff fef2 	bl	8004022 <vListInitialise>
 800423e:	e7f2      	b.n	8004226 <xQueueGenericReset+0x68>

08004240 <xQueueGenericCreate>:
	{
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	460d      	mov	r5, r1
 8004244:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004246:	4606      	mov	r6, r0
 8004248:	b950      	cbnz	r0, 8004260 <xQueueGenericCreate+0x20>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	b672      	cpsid	i
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	b662      	cpsie	i
 800425e:	e7fe      	b.n	800425e <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004260:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004262:	3050      	adds	r0, #80	; 0x50
 8004264:	f001 fa12 	bl	800568c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004268:	4604      	mov	r4, r0
 800426a:	b158      	cbz	r0, 8004284 <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800426c:	b165      	cbz	r5, 8004288 <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800426e:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004272:	2101      	movs	r1, #1
 8004274:	4620      	mov	r0, r4
 8004276:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004278:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800427c:	f7ff ff9f 	bl	80041be <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004280:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8004284:	4620      	mov	r0, r4
 8004286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004288:	4603      	mov	r3, r0
 800428a:	e7f2      	b.n	8004272 <xQueueGenericCreate+0x32>

0800428c <xQueueCreateCountingSemaphore>:
	{
 800428c:	b510      	push	{r4, lr}
 800428e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004290:	b950      	cbnz	r0, 80042a8 <xQueueCreateCountingSemaphore+0x1c>
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	b672      	cpsid	i
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	b662      	cpsie	i
 80042a6:	e7fe      	b.n	80042a6 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80042a8:	4288      	cmp	r0, r1
 80042aa:	d20a      	bcs.n	80042c2 <xQueueCreateCountingSemaphore+0x36>
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	b672      	cpsid	i
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	b662      	cpsie	i
 80042c0:	e7fe      	b.n	80042c0 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80042c2:	2202      	movs	r2, #2
 80042c4:	2100      	movs	r1, #0
 80042c6:	f7ff ffbb 	bl	8004240 <xQueueGenericCreate>
		if( xHandle != NULL )
 80042ca:	b100      	cbz	r0, 80042ce <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80042cc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <xQueueGenericSend>:
{
 80042d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042d4:	b085      	sub	sp, #20
 80042d6:	4688      	mov	r8, r1
 80042d8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80042da:	4604      	mov	r4, r0
{
 80042dc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80042de:	b950      	cbnz	r0, 80042f6 <xQueueGenericSend+0x26>
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	b672      	cpsid	i
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	b662      	cpsie	i
 80042f4:	e7fe      	b.n	80042f4 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f6:	b961      	cbnz	r1, 8004312 <xQueueGenericSend+0x42>
 80042f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042fa:	b153      	cbz	r3, 8004312 <xQueueGenericSend+0x42>
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	b672      	cpsid	i
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	b662      	cpsie	i
 8004310:	e7fe      	b.n	8004310 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004312:	2f02      	cmp	r7, #2
 8004314:	d10d      	bne.n	8004332 <xQueueGenericSend+0x62>
 8004316:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d00a      	beq.n	8004332 <xQueueGenericSend+0x62>
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	b672      	cpsid	i
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	b662      	cpsie	i
 8004330:	e7fe      	b.n	8004330 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004332:	f000 ff33 	bl	800519c <xTaskGetSchedulerState>
 8004336:	4606      	mov	r6, r0
 8004338:	b960      	cbnz	r0, 8004354 <xQueueGenericSend+0x84>
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	b15b      	cbz	r3, 8004356 <xQueueGenericSend+0x86>
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	b672      	cpsid	i
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	b662      	cpsie	i
 8004352:	e7fe      	b.n	8004352 <xQueueGenericSend+0x82>
 8004354:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004356:	f04f 0900 	mov.w	r9, #0
 800435a:	e037      	b.n	80043cc <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800435c:	9d01      	ldr	r5, [sp, #4]
 800435e:	b91d      	cbnz	r5, 8004368 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8004360:	f001 fadc 	bl	800591c <vPortExitCritical>
			return errQUEUE_FULL;
 8004364:	2000      	movs	r0, #0
 8004366:	e052      	b.n	800440e <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8004368:	b916      	cbnz	r6, 8004370 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800436a:	a802      	add	r0, sp, #8
 800436c:	f000 fec8 	bl	8005100 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004370:	f001 fad4 	bl	800591c <vPortExitCritical>
		vTaskSuspendAll();
 8004374:	f000 fd14 	bl	8004da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004378:	f001 faac 	bl	80058d4 <vPortEnterCritical>
 800437c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004380:	2bff      	cmp	r3, #255	; 0xff
 8004382:	d101      	bne.n	8004388 <xQueueGenericSend+0xb8>
 8004384:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8004388:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800438c:	2bff      	cmp	r3, #255	; 0xff
 800438e:	d101      	bne.n	8004394 <xQueueGenericSend+0xc4>
 8004390:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8004394:	f001 fac2 	bl	800591c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004398:	a901      	add	r1, sp, #4
 800439a:	a802      	add	r0, sp, #8
 800439c:	f000 feba 	bl	8005114 <xTaskCheckForTimeOut>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d14a      	bne.n	800443a <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043a4:	f001 fa96 	bl	80058d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d131      	bne.n	8004414 <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80043b0:	f001 fab4 	bl	800591c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043b4:	9901      	ldr	r1, [sp, #4]
 80043b6:	f104 0010 	add.w	r0, r4, #16
 80043ba:	f000 fe49 	bl	8005050 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043be:	4620      	mov	r0, r4
 80043c0:	f7ff fec5 	bl	800414e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043c4:	f000 fd78 	bl	8004eb8 <xTaskResumeAll>
 80043c8:	b360      	cbz	r0, 8004424 <xQueueGenericSend+0x154>
 80043ca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80043cc:	f001 fa82 	bl	80058d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d301      	bcc.n	80043dc <xQueueGenericSend+0x10c>
 80043d8:	2f02      	cmp	r7, #2
 80043da:	d1bf      	bne.n	800435c <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043dc:	463a      	mov	r2, r7
 80043de:	4641      	mov	r1, r8
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7ff fe6a 	bl	80040ba <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043e8:	b11b      	cbz	r3, 80043f2 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043ee:	f000 fe49 	bl	8005084 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80043f2:	b148      	cbz	r0, 8004408 <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80043f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80043f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004408:	f001 fa88 	bl	800591c <vPortExitCritical>
				return pdPASS;
 800440c:	2001      	movs	r0, #1
}
 800440e:	b005      	add	sp, #20
 8004410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8004414:	f001 fa82 	bl	800591c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004418:	4620      	mov	r0, r4
 800441a:	f7ff fe98 	bl	800414e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800441e:	f000 fd4b 	bl	8004eb8 <xTaskResumeAll>
 8004422:	e7d2      	b.n	80043ca <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8004424:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	e7c7      	b.n	80043ca <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800443a:	4620      	mov	r0, r4
 800443c:	f7ff fe87 	bl	800414e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004440:	f000 fd3a 	bl	8004eb8 <xTaskResumeAll>
 8004444:	e78e      	b.n	8004364 <xQueueGenericSend+0x94>

08004446 <xQueueCreateMutex>:
	{
 8004446:	b570      	push	{r4, r5, r6, lr}
 8004448:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800444a:	2050      	movs	r0, #80	; 0x50
 800444c:	f001 f91e 	bl	800568c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004450:	4604      	mov	r4, r0
 8004452:	b188      	cbz	r0, 8004478 <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8004454:	2500      	movs	r5, #0
 8004456:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004458:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800445a:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800445e:	f7ff feae 	bl	80041be <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004462:	462b      	mov	r3, r5
 8004464:	462a      	mov	r2, r5
 8004466:	4629      	mov	r1, r5
 8004468:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800446a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800446e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004470:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004472:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004474:	f7ff ff2c 	bl	80042d0 <xQueueGenericSend>
	}
 8004478:	4620      	mov	r0, r4
 800447a:	bd70      	pop	{r4, r5, r6, pc}

0800447c <xQueueGenericSendFromISR>:
{
 800447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004480:	4689      	mov	r9, r1
 8004482:	4690      	mov	r8, r2
 8004484:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004486:	4604      	mov	r4, r0
 8004488:	b950      	cbnz	r0, 80044a0 <xQueueGenericSendFromISR+0x24>
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	b672      	cpsid	i
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	b662      	cpsie	i
 800449e:	e7fe      	b.n	800449e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a0:	b961      	cbnz	r1, 80044bc <xQueueGenericSendFromISR+0x40>
 80044a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044a4:	b153      	cbz	r3, 80044bc <xQueueGenericSendFromISR+0x40>
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	b672      	cpsid	i
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	b662      	cpsie	i
 80044ba:	e7fe      	b.n	80044ba <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044bc:	2f02      	cmp	r7, #2
 80044be:	d10d      	bne.n	80044dc <xQueueGenericSendFromISR+0x60>
 80044c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d00a      	beq.n	80044dc <xQueueGenericSendFromISR+0x60>
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	b672      	cpsid	i
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	b662      	cpsie	i
 80044da:	e7fe      	b.n	80044da <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044dc:	f001 faf6 	bl	8005acc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044e0:	f3ef 8611 	mrs	r6, BASEPRI
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	b672      	cpsid	i
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80044fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d301      	bcc.n	8004504 <xQueueGenericSendFromISR+0x88>
 8004500:	2f02      	cmp	r7, #2
 8004502:	d122      	bne.n	800454a <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004504:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004508:	463a      	mov	r2, r7
 800450a:	4649      	mov	r1, r9
 800450c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800450e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004510:	f7ff fdd3 	bl	80040ba <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004514:	1c6b      	adds	r3, r5, #1
 8004516:	d113      	bne.n	8004540 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451a:	b90b      	cbnz	r3, 8004520 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800451c:	2001      	movs	r0, #1
 800451e:	e00b      	b.n	8004538 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004520:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004524:	f000 fdae 	bl	8005084 <xTaskRemoveFromEventList>
 8004528:	2800      	cmp	r0, #0
 800452a:	d0f7      	beq.n	800451c <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800452c:	f1b8 0f00 	cmp.w	r8, #0
 8004530:	d0f4      	beq.n	800451c <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004532:	2001      	movs	r0, #1
 8004534:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004538:	f386 8811 	msr	BASEPRI, r6
}
 800453c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004540:	3501      	adds	r5, #1
 8004542:	b26d      	sxtb	r5, r5
 8004544:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004548:	e7e8      	b.n	800451c <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800454a:	2000      	movs	r0, #0
 800454c:	e7f4      	b.n	8004538 <xQueueGenericSendFromISR+0xbc>

0800454e <xQueueGiveFromISR>:
{
 800454e:	b570      	push	{r4, r5, r6, lr}
 8004550:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004552:	4604      	mov	r4, r0
 8004554:	b950      	cbnz	r0, 800456c <xQueueGiveFromISR+0x1e>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	b672      	cpsid	i
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	b662      	cpsie	i
 800456a:	e7fe      	b.n	800456a <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800456c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800456e:	b153      	cbz	r3, 8004586 <xQueueGiveFromISR+0x38>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	b672      	cpsid	i
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	b662      	cpsie	i
 8004584:	e7fe      	b.n	8004584 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004586:	6803      	ldr	r3, [r0, #0]
 8004588:	b963      	cbnz	r3, 80045a4 <xQueueGiveFromISR+0x56>
 800458a:	6883      	ldr	r3, [r0, #8]
 800458c:	b153      	cbz	r3, 80045a4 <xQueueGiveFromISR+0x56>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	b672      	cpsid	i
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	b662      	cpsie	i
 80045a2:	e7fe      	b.n	80045a2 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045a4:	f001 fa92 	bl	8005acc <vPortValidateInterruptPriority>
	__asm volatile
 80045a8:	f3ef 8611 	mrs	r6, BASEPRI
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	b672      	cpsid	i
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80045c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d91c      	bls.n	8004602 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80045c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045cc:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80045ce:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80045d0:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045d2:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80045d4:	d110      	bne.n	80045f8 <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d8:	b90b      	cbnz	r3, 80045de <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80045da:	2001      	movs	r0, #1
 80045dc:	e009      	b.n	80045f2 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045e2:	f000 fd4f 	bl	8005084 <xTaskRemoveFromEventList>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0f7      	beq.n	80045da <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	d0f5      	beq.n	80045da <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045ee:	2001      	movs	r0, #1
 80045f0:	6028      	str	r0, [r5, #0]
	__asm volatile
 80045f2:	f386 8811 	msr	BASEPRI, r6
}
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045f8:	3301      	adds	r3, #1
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004600:	e7eb      	b.n	80045da <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8004602:	2000      	movs	r0, #0
 8004604:	e7f5      	b.n	80045f2 <xQueueGiveFromISR+0xa4>

08004606 <xQueueReceive>:
{
 8004606:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800460a:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800460c:	4604      	mov	r4, r0
{
 800460e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004610:	b950      	cbnz	r0, 8004628 <xQueueReceive+0x22>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	b672      	cpsid	i
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	b662      	cpsie	i
 8004626:	e7fe      	b.n	8004626 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004628:	b961      	cbnz	r1, 8004644 <xQueueReceive+0x3e>
 800462a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800462c:	b153      	cbz	r3, 8004644 <xQueueReceive+0x3e>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	b672      	cpsid	i
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	b662      	cpsie	i
 8004642:	e7fe      	b.n	8004642 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004644:	f000 fdaa 	bl	800519c <xTaskGetSchedulerState>
 8004648:	4606      	mov	r6, r0
 800464a:	b960      	cbnz	r0, 8004666 <xQueueReceive+0x60>
 800464c:	9b01      	ldr	r3, [sp, #4]
 800464e:	b15b      	cbz	r3, 8004668 <xQueueReceive+0x62>
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	b672      	cpsid	i
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	b662      	cpsie	i
 8004664:	e7fe      	b.n	8004664 <xQueueReceive+0x5e>
 8004666:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004668:	f04f 0800 	mov.w	r8, #0
 800466c:	e03d      	b.n	80046ea <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800466e:	9d01      	ldr	r5, [sp, #4]
 8004670:	b91d      	cbnz	r5, 800467a <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8004672:	f001 f953 	bl	800591c <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004676:	2000      	movs	r0, #0
 8004678:	e056      	b.n	8004728 <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800467a:	b916      	cbnz	r6, 8004682 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800467c:	a802      	add	r0, sp, #8
 800467e:	f000 fd3f 	bl	8005100 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004682:	f001 f94b 	bl	800591c <vPortExitCritical>
		vTaskSuspendAll();
 8004686:	f000 fb8b 	bl	8004da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800468a:	f001 f923 	bl	80058d4 <vPortEnterCritical>
 800468e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004692:	2bff      	cmp	r3, #255	; 0xff
 8004694:	d101      	bne.n	800469a <xQueueReceive+0x94>
 8004696:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800469a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800469e:	2bff      	cmp	r3, #255	; 0xff
 80046a0:	d101      	bne.n	80046a6 <xQueueReceive+0xa0>
 80046a2:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80046a6:	f001 f939 	bl	800591c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046aa:	a901      	add	r1, sp, #4
 80046ac:	a802      	add	r0, sp, #8
 80046ae:	f000 fd31 	bl	8005114 <xTaskCheckForTimeOut>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d141      	bne.n	800473a <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fcf4 	bl	80040a4 <prvIsQueueEmpty>
 80046bc:	b3b8      	cbz	r0, 800472e <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046be:	9901      	ldr	r1, [sp, #4]
 80046c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046c4:	f000 fcc4 	bl	8005050 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff fd40 	bl	800414e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046ce:	f000 fbf3 	bl	8004eb8 <xTaskResumeAll>
 80046d2:	b948      	cbnz	r0, 80046e8 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 80046d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80046d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80046ea:	f001 f8f3 	bl	80058d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	d0bc      	beq.n	800466e <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046f4:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046f6:	4639      	mov	r1, r7
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7ff fd13 	bl	8004124 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046fe:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004700:	6923      	ldr	r3, [r4, #16]
 8004702:	b173      	cbz	r3, 8004722 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004704:	f104 0010 	add.w	r0, r4, #16
 8004708:	f000 fcbc 	bl	8005084 <xTaskRemoveFromEventList>
 800470c:	b148      	cbz	r0, 8004722 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800470e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004716:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004722:	f001 f8fb 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8004726:	2001      	movs	r0, #1
}
 8004728:	b004      	add	sp, #16
 800472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800472e:	4620      	mov	r0, r4
 8004730:	f7ff fd0d 	bl	800414e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004734:	f000 fbc0 	bl	8004eb8 <xTaskResumeAll>
 8004738:	e7d6      	b.n	80046e8 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800473a:	4620      	mov	r0, r4
 800473c:	f7ff fd07 	bl	800414e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004740:	f000 fbba 	bl	8004eb8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004744:	4620      	mov	r0, r4
 8004746:	f7ff fcad 	bl	80040a4 <prvIsQueueEmpty>
 800474a:	2800      	cmp	r0, #0
 800474c:	d0cc      	beq.n	80046e8 <xQueueReceive+0xe2>
 800474e:	e792      	b.n	8004676 <xQueueReceive+0x70>

08004750 <xQueueSemaphoreTake>:
{
 8004750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004752:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8004754:	4604      	mov	r4, r0
{
 8004756:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004758:	b950      	cbnz	r0, 8004770 <xQueueSemaphoreTake+0x20>
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	b672      	cpsid	i
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	b662      	cpsie	i
 800476e:	e7fe      	b.n	800476e <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004770:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004772:	b155      	cbz	r5, 800478a <xQueueSemaphoreTake+0x3a>
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	b672      	cpsid	i
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	b662      	cpsie	i
 8004788:	e7fe      	b.n	8004788 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800478a:	f000 fd07 	bl	800519c <xTaskGetSchedulerState>
 800478e:	4606      	mov	r6, r0
 8004790:	b960      	cbnz	r0, 80047ac <xQueueSemaphoreTake+0x5c>
 8004792:	9b01      	ldr	r3, [sp, #4]
 8004794:	b16b      	cbz	r3, 80047b2 <xQueueSemaphoreTake+0x62>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	b672      	cpsid	i
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	b662      	cpsie	i
 80047aa:	e7fe      	b.n	80047aa <xQueueSemaphoreTake+0x5a>
 80047ac:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80047ae:	2700      	movs	r7, #0
 80047b0:	e055      	b.n	800485e <xQueueSemaphoreTake+0x10e>
 80047b2:	4605      	mov	r5, r0
 80047b4:	e7fb      	b.n	80047ae <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80047b6:	9b01      	ldr	r3, [sp, #4]
 80047b8:	b973      	cbnz	r3, 80047d8 <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047ba:	b155      	cbz	r5, 80047d2 <xQueueSemaphoreTake+0x82>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	b672      	cpsid	i
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	b662      	cpsie	i
 80047d0:	e7fe      	b.n	80047d0 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 80047d2:	f001 f8a3 	bl	800591c <vPortExitCritical>
					return errQUEUE_EMPTY;
 80047d6:	e062      	b.n	800489e <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 80047d8:	b916      	cbnz	r6, 80047e0 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047da:	a802      	add	r0, sp, #8
 80047dc:	f000 fc90 	bl	8005100 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80047e0:	f001 f89c 	bl	800591c <vPortExitCritical>
		vTaskSuspendAll();
 80047e4:	f000 fadc 	bl	8004da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e8:	f001 f874 	bl	80058d4 <vPortEnterCritical>
 80047ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80047f0:	2bff      	cmp	r3, #255	; 0xff
 80047f2:	d101      	bne.n	80047f8 <xQueueSemaphoreTake+0xa8>
 80047f4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80047f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80047fc:	2bff      	cmp	r3, #255	; 0xff
 80047fe:	d101      	bne.n	8004804 <xQueueSemaphoreTake+0xb4>
 8004800:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004804:	f001 f88a 	bl	800591c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004808:	a901      	add	r1, sp, #4
 800480a:	a802      	add	r0, sp, #8
 800480c:	f000 fc82 	bl	8005114 <xTaskCheckForTimeOut>
 8004810:	2800      	cmp	r0, #0
 8004812:	d14d      	bne.n	80048b0 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004814:	4620      	mov	r0, r4
 8004816:	f7ff fc45 	bl	80040a4 <prvIsQueueEmpty>
 800481a:	2800      	cmp	r0, #0
 800481c:	d042      	beq.n	80048a4 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	b93b      	cbnz	r3, 8004832 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8004822:	f001 f857 	bl	80058d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004826:	68a0      	ldr	r0, [r4, #8]
 8004828:	f000 fcc8 	bl	80051bc <xTaskPriorityInherit>
 800482c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800482e:	f001 f875 	bl	800591c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004832:	9901      	ldr	r1, [sp, #4]
 8004834:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004838:	f000 fc0a 	bl	8005050 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800483c:	4620      	mov	r0, r4
 800483e:	f7ff fc86 	bl	800414e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004842:	f000 fb39 	bl	8004eb8 <xTaskResumeAll>
 8004846:	b948      	cbnz	r0, 800485c <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8004848:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800484c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004850:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800485e:	f001 f839 	bl	80058d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0a6      	beq.n	80047b6 <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004868:	3b01      	subs	r3, #1
 800486a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	b913      	cbnz	r3, 8004876 <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004870:	f000 fda2 	bl	80053b8 <pvTaskIncrementMutexHeldCount>
 8004874:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	b173      	cbz	r3, 8004898 <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800487a:	f104 0010 	add.w	r0, r4, #16
 800487e:	f000 fc01 	bl	8005084 <xTaskRemoveFromEventList>
 8004882:	b148      	cbz	r0, 8004898 <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8004884:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8004898:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800489a:	f001 f83f 	bl	800591c <vPortExitCritical>
}
 800489e:	4628      	mov	r0, r5
 80048a0:	b005      	add	sp, #20
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80048a4:	4620      	mov	r0, r4
 80048a6:	f7ff fc52 	bl	800414e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048aa:	f000 fb05 	bl	8004eb8 <xTaskResumeAll>
 80048ae:	e7d5      	b.n	800485c <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff fc4c 	bl	800414e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048b6:	f000 faff 	bl	8004eb8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7ff fbf2 	bl	80040a4 <prvIsQueueEmpty>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d0cb      	beq.n	800485c <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 80048c4:	2d00      	cmp	r5, #0
 80048c6:	d0ea      	beq.n	800489e <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 80048c8:	f001 f804 	bl	80058d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048ce:	b119      	cbz	r1, 80048d8 <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048d8:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80048da:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048dc:	f000 fd10 	bl	8005300 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80048e0:	f001 f81c 	bl	800591c <vPortExitCritical>
 80048e4:	e7db      	b.n	800489e <xQueueSemaphoreTake+0x14e>

080048e6 <xQueueReceiveFromISR>:
{
 80048e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ea:	4689      	mov	r9, r1
 80048ec:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80048ee:	4605      	mov	r5, r0
 80048f0:	b950      	cbnz	r0, 8004908 <xQueueReceiveFromISR+0x22>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	b672      	cpsid	i
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	b662      	cpsie	i
 8004906:	e7fe      	b.n	8004906 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004908:	b961      	cbnz	r1, 8004924 <xQueueReceiveFromISR+0x3e>
 800490a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800490c:	b153      	cbz	r3, 8004924 <xQueueReceiveFromISR+0x3e>
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	b672      	cpsid	i
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	b662      	cpsie	i
 8004922:	e7fe      	b.n	8004922 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004924:	f001 f8d2 	bl	8005acc <vPortValidateInterruptPriority>
	__asm volatile
 8004928:	f3ef 8711 	mrs	r7, BASEPRI
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	b672      	cpsid	i
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004940:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004942:	b31c      	cbz	r4, 800498c <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004944:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004948:	4649      	mov	r1, r9
 800494a:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800494c:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800494e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004950:	f7ff fbe8 	bl	8004124 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004954:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004956:	1c73      	adds	r3, r6, #1
 8004958:	d113      	bne.n	8004982 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800495a:	692b      	ldr	r3, [r5, #16]
 800495c:	b90b      	cbnz	r3, 8004962 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800495e:	2001      	movs	r0, #1
 8004960:	e00b      	b.n	800497a <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004962:	f105 0010 	add.w	r0, r5, #16
 8004966:	f000 fb8d 	bl	8005084 <xTaskRemoveFromEventList>
 800496a:	2800      	cmp	r0, #0
 800496c:	d0f7      	beq.n	800495e <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800496e:	f1b8 0f00 	cmp.w	r8, #0
 8004972:	d0f4      	beq.n	800495e <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004974:	2001      	movs	r0, #1
 8004976:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800497a:	f387 8811 	msr	BASEPRI, r7
}
 800497e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004982:	3601      	adds	r6, #1
 8004984:	b276      	sxtb	r6, r6
 8004986:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800498a:	e7e8      	b.n	800495e <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800498c:	4620      	mov	r0, r4
 800498e:	e7f4      	b.n	800497a <xQueueReceiveFromISR+0x94>

08004990 <uxQueueMessagesWaiting>:
{
 8004990:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8004992:	4604      	mov	r4, r0
 8004994:	b950      	cbnz	r0, 80049ac <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	b672      	cpsid	i
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	b662      	cpsie	i
 80049aa:	e7fe      	b.n	80049aa <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 80049ac:	f000 ff92 	bl	80058d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80049b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049b2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80049b4:	f000 ffb2 	bl	800591c <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80049b8:	9801      	ldr	r0, [sp, #4]
 80049ba:	b002      	add	sp, #8
 80049bc:	bd10      	pop	{r4, pc}

080049be <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80049be:	b950      	cbnz	r0, 80049d6 <uxQueueMessagesWaitingFromISR+0x18>
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	b672      	cpsid	i
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	b662      	cpsie	i
 80049d4:	e7fe      	b.n	80049d4 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 80049d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80049d8:	4770      	bx	lr
	...

080049dc <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049dc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80049de:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <vQueueUnregisterQueue+0x24>)
	{
 80049e0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80049e2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80049e6:	684c      	ldr	r4, [r1, #4]
 80049e8:	4284      	cmp	r4, r0
 80049ea:	d104      	bne.n	80049f6 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80049ec:	2000      	movs	r0, #0
 80049ee:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80049f2:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80049f4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049f6:	3301      	adds	r3, #1
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d1f2      	bne.n	80049e2 <vQueueUnregisterQueue+0x6>
 80049fc:	e7fa      	b.n	80049f4 <vQueueUnregisterQueue+0x18>
 80049fe:	bf00      	nop
 8004a00:	200003c4 	.word	0x200003c4

08004a04 <vQueueDelete>:
{
 8004a04:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8004a06:	4604      	mov	r4, r0
 8004a08:	b950      	cbnz	r0, 8004a20 <vQueueDelete+0x1c>
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	b672      	cpsid	i
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	b662      	cpsie	i
 8004a1e:	e7fe      	b.n	8004a1e <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8004a20:	f7ff ffdc 	bl	80049dc <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8004a24:	4620      	mov	r0, r4
}
 8004a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8004a2a:	f000 beb5 	b.w	8005798 <vPortFree>
	...

08004a30 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <prvResetNextTaskUnblockTime+0x1c>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	b91a      	cbnz	r2, 8004a40 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a3c:	605a      	str	r2, [r3, #4]
	}
}
 8004a3e:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	6852      	ldr	r2, [r2, #4]
 8004a48:	e7f8      	b.n	8004a3c <prvResetNextTaskUnblockTime+0xc>
 8004a4a:	bf00      	nop
 8004a4c:	20000404 	.word	0x20000404

08004a50 <prvAddCurrentTaskToDelayedList.constprop.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8004a50:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a52:	4c12      	ldr	r4, [pc, #72]	; (8004a9c <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8004a54:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8004a56:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a58:	68e0      	ldr	r0, [r4, #12]
 8004a5a:	3004      	adds	r0, #4
 8004a5c:	f7ff fb12 	bl	8004084 <uxListRemove>
 8004a60:	b938      	cbnz	r0, 8004a72 <prvAddCurrentTaskToDelayedList.constprop.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a62:	68e2      	ldr	r2, [r4, #12]
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a68:	2201      	movs	r2, #1
 8004a6a:	408a      	lsls	r2, r1
 8004a6c:	ea23 0302 	bic.w	r3, r3, r2
 8004a70:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8004a72:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a74:	68e3      	ldr	r3, [r4, #12]
 8004a76:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8004a78:	d306      	bcc.n	8004a88 <prvAddCurrentTaskToDelayedList.constprop.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7a:	6960      	ldr	r0, [r4, #20]
 8004a7c:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a82:	3104      	adds	r1, #4
 8004a84:	f7ff bae7 	b.w	8004056 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	68e1      	ldr	r1, [r4, #12]
 8004a8c:	3104      	adds	r1, #4
 8004a8e:	f7ff fae2 	bl	8004056 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8004a92:	6863      	ldr	r3, [r4, #4]
 8004a94:	429d      	cmp	r5, r3
 8004a96:	d200      	bcs.n	8004a9a <prvAddCurrentTaskToDelayedList.constprop.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 8004a98:	6065      	str	r5, [r4, #4]
}
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	20000404 	.word	0x20000404

08004aa0 <prvIdleTask>:
{
 8004aa0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa2:	4c13      	ldr	r4, [pc, #76]	; (8004af0 <prvIdleTask+0x50>)
				taskYIELD();
 8004aa4:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 8004aa8:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aae:	b94b      	cbnz	r3, 8004ac4 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d9fa      	bls.n	8004aac <prvIdleTask+0xc>
				taskYIELD();
 8004ab6:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	e7f3      	b.n	8004aac <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 8004ac4:	f000 ff06 	bl	80058d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aca:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004acc:	1d28      	adds	r0, r5, #4
 8004ace:	f7ff fad9 	bl	8004084 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8004ad8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8004ade:	f000 ff1d 	bl	800591c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004ae2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004ae4:	f000 fe58 	bl	8005798 <vPortFree>
			vPortFree( pxTCB );
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 fe55 	bl	8005798 <vPortFree>
	}
 8004aee:	e7dd      	b.n	8004aac <prvIdleTask+0xc>
 8004af0:	20000404 	.word	0x20000404

08004af4 <xTaskCreate>:
	{
 8004af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004af8:	0096      	lsls	r6, r2, #2
	{
 8004afa:	4607      	mov	r7, r0
 8004afc:	460d      	mov	r5, r1
 8004afe:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 fdc3 	bl	800568c <pvPortMalloc>
			if( pxStack != NULL )
 8004b06:	4681      	mov	r9, r0
 8004b08:	b1a0      	cbz	r0, 8004b34 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b0a:	205c      	movs	r0, #92	; 0x5c
 8004b0c:	f000 fdbe 	bl	800568c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004b10:	4604      	mov	r4, r0
 8004b12:	b160      	cbz	r0, 8004b2e <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8004b14:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b18:	4632      	mov	r2, r6
 8004b1a:	21a5      	movs	r1, #165	; 0xa5
 8004b1c:	4648      	mov	r0, r9
 8004b1e:	f009 fd67 	bl	800e5f0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b22:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 8004b26:	b945      	cbnz	r5, 8004b3a <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b28:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8004b2c:	e013      	b.n	8004b56 <xTaskCreate+0x62>
					vPortFree( pxStack );
 8004b2e:	4648      	mov	r0, r9
 8004b30:	f000 fe32 	bl	8005798 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b34:	f04f 36ff 	mov.w	r6, #4294967295
 8004b38:	e088      	b.n	8004c4c <xTaskCreate+0x158>
 8004b3a:	1e6b      	subs	r3, r5, #1
 8004b3c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004b40:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b42:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004b46:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8004b4a:	b108      	cbz	r0, 8004b50 <xTaskCreate+0x5c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b4c:	429d      	cmp	r5, r3
 8004b4e:	d1f8      	bne.n	8004b42 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b50:	2300      	movs	r3, #0
 8004b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8004b58:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b5c:	f104 0904 	add.w	r9, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b60:	3e04      	subs	r6, #4
 8004b62:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004b64:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b68:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b6a:	445e      	add	r6, fp
 8004b6c:	bf28      	it	cs
 8004b6e:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004b70:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004b72:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b74:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b78:	f7ff fa5e 	bl	8004038 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b7c:	f104 0018 	add.w	r0, r4, #24
 8004b80:	f7ff fa5a 	bl	8004038 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004b84:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b88:	4642      	mov	r2, r8
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b90:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b92:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b94:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b96:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b9a:	f000 fe77 	bl	800588c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8004b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ba0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004ba2:	b103      	cbz	r3, 8004ba6 <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ba4:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 8004ba6:	4d30      	ldr	r5, [pc, #192]	; (8004c68 <xTaskCreate+0x174>)
	taskENTER_CRITICAL();
 8004ba8:	f000 fe94 	bl	80058d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004bac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004bae:	f105 0734 	add.w	r7, r5, #52	; 0x34
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8004bb6:	68ee      	ldr	r6, [r5, #12]
 8004bb8:	2e00      	cmp	r6, #0
 8004bba:	d14a      	bne.n	8004c52 <xTaskCreate+0x15e>
			pxCurrentTCB = pxNewTCB;
 8004bbc:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d11c      	bne.n	8004bfe <xTaskCreate+0x10a>
 8004bc4:	46b8      	mov	r8, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc6:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bc8:	4640      	mov	r0, r8
 8004bca:	f7ff fa2a 	bl	8004022 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bce:	f108 0814 	add.w	r8, r8, #20
 8004bd2:	2e07      	cmp	r6, #7
 8004bd4:	d1f7      	bne.n	8004bc6 <xTaskCreate+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 8004bd6:	4e25      	ldr	r6, [pc, #148]	; (8004c6c <xTaskCreate+0x178>)
	vListInitialise( &xDelayedTaskList2 );
 8004bd8:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f7ff fa20 	bl	8004022 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004be2:	4640      	mov	r0, r8
 8004be4:	f7ff fa1d 	bl	8004022 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004be8:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8004bec:	f7ff fa19 	bl	8004022 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004bf0:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 8004bf4:	f7ff fa15 	bl	8004022 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bf8:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bfa:	f8c5 8014 	str.w	r8, [r5, #20]
		uxTaskNumber++;
 8004bfe:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8004c02:	2601      	movs	r6, #1
 8004c04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c06:	2014      	movs	r0, #20
		uxTaskNumber++;
 8004c08:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8004c0a:	6929      	ldr	r1, [r5, #16]
 8004c0c:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8004c10:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c14:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004c16:	fa06 f302 	lsl.w	r3, r6, r2
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	612b      	str	r3, [r5, #16]
 8004c20:	f7ff fa0d 	bl	800403e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004c24:	f000 fe7a 	bl	800591c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004c28:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8004c2c:	b173      	cbz	r3, 8004c4c <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c2e:	68eb      	ldr	r3, [r5, #12]
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d209      	bcs.n	8004c4c <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 8004c38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c40:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
	}
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8004c52:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1d1      	bne.n	8004bfe <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c5a:	68eb      	ldr	r3, [r5, #12]
 8004c5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d3cc      	bcc.n	8004bfe <xTaskCreate+0x10a>
					pxCurrentTCB = pxNewTCB;
 8004c64:	60ec      	str	r4, [r5, #12]
 8004c66:	e7ca      	b.n	8004bfe <xTaskCreate+0x10a>
 8004c68:	20000404 	.word	0x20000404
 8004c6c:	200004c4 	.word	0x200004c4

08004c70 <vTaskDelete>:
	{
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	4605      	mov	r5, r0
 8004c74:	4c2b      	ldr	r4, [pc, #172]	; (8004d24 <vTaskDelete+0xb4>)
		taskENTER_CRITICAL();
 8004c76:	f000 fe2d 	bl	80058d4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004c7a:	b905      	cbnz	r5, 8004c7e <vTaskDelete+0xe>
 8004c7c:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7e:	1d2e      	adds	r6, r5, #4
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff f9ff 	bl	8004084 <uxListRemove>
 8004c86:	b958      	cbnz	r0, 8004ca0 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c88:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004c8a:	2014      	movs	r0, #20
 8004c8c:	fb00 4001 	mla	r0, r0, r1, r4
 8004c90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004c92:	b92b      	cbnz	r3, 8004ca0 <vTaskDelete+0x30>
 8004c94:	2201      	movs	r2, #1
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	408a      	lsls	r2, r1
 8004c9a:	ea23 0302 	bic.w	r3, r3, r2
 8004c9e:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ca0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004ca2:	b11b      	cbz	r3, 8004cac <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ca4:	f105 0018 	add.w	r0, r5, #24
 8004ca8:	f7ff f9ec 	bl	8004084 <uxListRemove>
			uxTaskNumber++;
 8004cac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	42ab      	cmp	r3, r5
 8004cba:	d11c      	bne.n	8004cf6 <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	481a      	ldr	r0, [pc, #104]	; (8004d28 <vTaskDelete+0xb8>)
 8004cc0:	f7ff f9bd 	bl	800403e <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8004cc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8004cca:	f000 fe27 	bl	800591c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8004cce:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8004cd2:	b333      	cbz	r3, 8004d22 <vTaskDelete+0xb2>
			if( pxTCB == pxCurrentTCB )
 8004cd4:	68e3      	ldr	r3, [r4, #12]
 8004cd6:	42ab      	cmp	r3, r5
 8004cd8:	d123      	bne.n	8004d22 <vTaskDelete+0xb2>
				configASSERT( uxSchedulerSuspended == 0 );
 8004cda:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004cde:	b1b3      	cbz	r3, 8004d0e <vTaskDelete+0x9e>
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	b672      	cpsid	i
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	b662      	cpsie	i
 8004cf4:	e7fe      	b.n	8004cf4 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 8004cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8004cf8:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8004cfe:	f000 fd4b 	bl	8005798 <vPortFree>
			vPortFree( pxTCB );
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 fd48 	bl	8005798 <vPortFree>
				prvResetNextTaskUnblockTime();
 8004d08:	f7ff fe92 	bl	8004a30 <prvResetNextTaskUnblockTime>
 8004d0c:	e7dd      	b.n	8004cca <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 8004d0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	f3bf 8f6f 	isb	sy
	}
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	20000404 	.word	0x20000404
 8004d28:	2000041c 	.word	0x2000041c

08004d2c <vTaskStartScheduler>:
{
 8004d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004d2e:	4c19      	ldr	r4, [pc, #100]	; (8004d94 <vTaskStartScheduler+0x68>)
 8004d30:	2500      	movs	r5, #0
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	4918      	ldr	r1, [pc, #96]	; (8004d98 <vTaskStartScheduler+0x6c>)
 8004d36:	f504 7384 	add.w	r3, r4, #264	; 0x108
 8004d3a:	4818      	ldr	r0, [pc, #96]	; (8004d9c <vTaskStartScheduler+0x70>)
 8004d3c:	9500      	str	r5, [sp, #0]
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	462b      	mov	r3, r5
 8004d42:	f7ff fed7 	bl	8004af4 <xTaskCreate>
	if( xReturn == pdPASS )
 8004d46:	2801      	cmp	r0, #1
 8004d48:	d114      	bne.n	8004d74 <vTaskStartScheduler+0x48>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	b672      	cpsid	i
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8004d64:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d68:	60a5      	str	r5, [r4, #8]
}
 8004d6a:	b003      	add	sp, #12
 8004d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004d70:	f000 be4a 	b.w	8005a08 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d74:	3001      	adds	r0, #1
 8004d76:	d10a      	bne.n	8004d8e <vTaskStartScheduler+0x62>
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	b672      	cpsid	i
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	b662      	cpsie	i
 8004d8c:	e7fe      	b.n	8004d8c <vTaskStartScheduler+0x60>
}
 8004d8e:	b003      	add	sp, #12
 8004d90:	bd30      	pop	{r4, r5, pc}
 8004d92:	bf00      	nop
 8004d94:	20000404 	.word	0x20000404
 8004d98:	0801a97e 	.word	0x0801a97e
 8004d9c:	08004aa1 	.word	0x08004aa1

08004da0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004da0:	4a03      	ldr	r2, [pc, #12]	; (8004db0 <vTaskSuspendAll+0x10>)
 8004da2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8004da6:	3301      	adds	r3, #1
 8004da8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000404 	.word	0x20000404

08004db4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004db4:	4b01      	ldr	r3, [pc, #4]	; (8004dbc <xTaskGetTickCount+0x8>)
 8004db6:	6898      	ldr	r0, [r3, #8]
}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000404 	.word	0x20000404

08004dc0 <xTaskGetTickCountFromISR>:
{
 8004dc0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dc2:	f000 fe83 	bl	8005acc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004dc6:	4b01      	ldr	r3, [pc, #4]	; (8004dcc <xTaskGetTickCountFromISR+0xc>)
 8004dc8:	6898      	ldr	r0, [r3, #8]
}
 8004dca:	bd08      	pop	{r3, pc}
 8004dcc:	20000404 	.word	0x20000404

08004dd0 <xTaskIncrementTick>:
{
 8004dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd4:	4c36      	ldr	r4, [pc, #216]	; (8004eb0 <xTaskIncrementTick+0xe0>)
 8004dd6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d161      	bne.n	8004ea2 <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dde:	68a7      	ldr	r7, [r4, #8]
 8004de0:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8004de2:	60a7      	str	r7, [r4, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004de4:	b9c7      	cbnz	r7, 8004e18 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b153      	cbz	r3, 8004e02 <xTaskIncrementTick+0x32>
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	b672      	cpsid	i
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	b662      	cpsie	i
 8004e00:	e7fe      	b.n	8004e00 <xTaskIncrementTick+0x30>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	6962      	ldr	r2, [r4, #20]
 8004e06:	6022      	str	r2, [r4, #0]
 8004e08:	6163      	str	r3, [r4, #20]
 8004e0a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8004e14:	f7ff fe0c 	bl	8004a30 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e18:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8004e1a:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e1c:	42bb      	cmp	r3, r7
 8004e1e:	d910      	bls.n	8004e42 <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e20:	68e3      	ldr	r3, [r4, #12]
 8004e22:	2214      	movs	r2, #20
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	fb02 4303 	mla	r3, r2, r3, r4
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	bf28      	it	cs
 8004e30:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8004e32:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 8004e36:	2b00      	cmp	r3, #0
}
 8004e38:	bf0c      	ite	eq
 8004e3a:	4628      	moveq	r0, r5
 8004e3c:	2001      	movne	r0, #1
 8004e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8004e42:	f04f 0a01 	mov.w	sl, #1
 8004e46:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004eb4 <xTaskIncrementTick+0xe4>
 8004e4a:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	b91b      	cbnz	r3, 8004e5c <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e54:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8004e58:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e5a:	e7e1      	b.n	8004e20 <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e62:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004e64:	429f      	cmp	r7, r3
 8004e66:	d3f7      	bcc.n	8004e58 <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e68:	f106 0b04 	add.w	fp, r6, #4
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	f7ff f909 	bl	8004084 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e72:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004e74:	b11b      	cbz	r3, 8004e7e <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e76:	f106 0018 	add.w	r0, r6, #24
 8004e7a:	f7ff f903 	bl	8004084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e7e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004e80:	4659      	mov	r1, fp
 8004e82:	6922      	ldr	r2, [r4, #16]
 8004e84:	fa0a f300 	lsl.w	r3, sl, r0
 8004e88:	fb09 8000 	mla	r0, r9, r0, r8
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	6123      	str	r3, [r4, #16]
 8004e90:	f7ff f8d5 	bl	800403e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e94:	68e3      	ldr	r3, [r4, #12]
 8004e96:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	bf28      	it	cs
 8004e9e:	2501      	movcs	r5, #1
 8004ea0:	e7d5      	b.n	8004e4e <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 8004ea2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8004ea6:	2500      	movs	r5, #0
		++uxPendedTicks;
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004eae:	e7c0      	b.n	8004e32 <xTaskIncrementTick+0x62>
 8004eb0:	20000404 	.word	0x20000404
 8004eb4:	20000438 	.word	0x20000438

08004eb8 <xTaskResumeAll>:
{
 8004eb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004ebc:	4c35      	ldr	r4, [pc, #212]	; (8004f94 <xTaskResumeAll+0xdc>)
 8004ebe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004ec2:	b953      	cbnz	r3, 8004eda <xTaskResumeAll+0x22>
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	b672      	cpsid	i
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	b662      	cpsie	i
 8004ed8:	e7fe      	b.n	8004ed8 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8004eda:	f000 fcfb 	bl	80058d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004ede:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee8:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8004eec:	b135      	cbz	r5, 8004efc <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8004eee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004ef0:	f000 fd14 	bl	800591c <vPortExitCritical>
}
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	b002      	add	sp, #8
 8004ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f5      	beq.n	8004eee <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 8004f02:	2601      	movs	r6, #1
 8004f04:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8004f08:	f04f 0814 	mov.w	r8, #20
 8004f0c:	e01d      	b.n	8004f4a <xTaskResumeAll+0x92>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004f12:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f14:	f105 0018 	add.w	r0, r5, #24
 8004f18:	f7ff f8b4 	bl	8004084 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f1c:	1d29      	adds	r1, r5, #4
 8004f1e:	4608      	mov	r0, r1
 8004f20:	9101      	str	r1, [sp, #4]
 8004f22:	f7ff f8af 	bl	8004084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f26:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004f28:	6922      	ldr	r2, [r4, #16]
 8004f2a:	fa06 f300 	lsl.w	r3, r6, r0
 8004f2e:	9901      	ldr	r1, [sp, #4]
 8004f30:	fb08 7000 	mla	r0, r8, r0, r7
 8004f34:	4313      	orrs	r3, r2
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	f7ff f881 	bl	800403e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f3c:	68e3      	ldr	r3, [r4, #12]
 8004f3e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d301      	bcc.n	8004f4a <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8004f46:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f4a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1dd      	bne.n	8004f0e <xTaskResumeAll+0x56>
				if( pxTCB != NULL )
 8004f52:	b10d      	cbz	r5, 8004f58 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8004f54:	f7ff fd6c 	bl	8004a30 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f58:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f5c:	b14d      	cbz	r5, 8004f72 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8004f5e:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004f60:	f7ff ff36 	bl	8004dd0 <xTaskIncrementTick>
 8004f64:	b108      	cbz	r0, 8004f6a <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8004f66:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f6a:	3d01      	subs	r5, #1
 8004f6c:	d1f8      	bne.n	8004f60 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 8004f6e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 8004f72:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0b9      	beq.n	8004eee <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 8004f7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004f8e:	2401      	movs	r4, #1
 8004f90:	e7ae      	b.n	8004ef0 <xTaskResumeAll+0x38>
 8004f92:	bf00      	nop
 8004f94:	20000404 	.word	0x20000404

08004f98 <vTaskDelay>:
	{
 8004f98:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f9a:	b950      	cbnz	r0, 8004fb2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8004f9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
	}
 8004fb0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <vTaskDelay+0x4c>)
 8004fb4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004fb8:	b153      	cbz	r3, 8004fd0 <vTaskDelay+0x38>
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	b672      	cpsid	i
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	b662      	cpsie	i
 8004fce:	e7fe      	b.n	8004fce <vTaskDelay+0x36>
			vTaskSuspendAll();
 8004fd0:	f7ff fee6 	bl	8004da0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fd4:	f7ff fd3c 	bl	8004a50 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 8004fd8:	f7ff ff6e 	bl	8004eb8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d0dd      	beq.n	8004f9c <vTaskDelay+0x4>
 8004fe0:	e7e6      	b.n	8004fb0 <vTaskDelay+0x18>
 8004fe2:	bf00      	nop
 8004fe4:	20000404 	.word	0x20000404

08004fe8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <vTaskSwitchContext+0x64>)
 8004fea:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 8004fee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ff0:	b11b      	cbz	r3, 8004ffa <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8004ff8:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004ffa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ffe:	6913      	ldr	r3, [r2, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2114      	movs	r1, #20
 8005008:	f1c3 031f 	rsb	r3, r3, #31
 800500c:	4359      	muls	r1, r3
 800500e:	1850      	adds	r0, r2, r1
 8005010:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005012:	b954      	cbnz	r4, 800502a <vTaskSwitchContext+0x42>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	e7fe      	b.n	8005028 <vTaskSwitchContext+0x40>
 800502a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800502c:	4411      	add	r1, r2
 800502e:	6864      	ldr	r4, [r4, #4]
 8005030:	313c      	adds	r1, #60	; 0x3c
 8005032:	428c      	cmp	r4, r1
 8005034:	6384      	str	r4, [r0, #56]	; 0x38
 8005036:	bf04      	itt	eq
 8005038:	6861      	ldreq	r1, [r4, #4]
 800503a:	6381      	streq	r1, [r0, #56]	; 0x38
 800503c:	2114      	movs	r1, #20
 800503e:	fb01 2303 	mla	r3, r1, r3, r2
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	60d3      	str	r3, [r2, #12]
}
 8005048:	e7d6      	b.n	8004ff8 <vTaskSwitchContext+0x10>
 800504a:	bf00      	nop
 800504c:	20000404 	.word	0x20000404

08005050 <vTaskPlaceOnEventList>:
{
 8005050:	b510      	push	{r4, lr}
 8005052:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005054:	b950      	cbnz	r0, 800506c <vTaskPlaceOnEventList+0x1c>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	b672      	cpsid	i
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	b662      	cpsie	i
 800506a:	e7fe      	b.n	800506a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <vTaskPlaceOnEventList+0x30>)
 800506e:	68d9      	ldr	r1, [r3, #12]
 8005070:	3118      	adds	r1, #24
 8005072:	f7fe fff0 	bl	8004056 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005076:	4620      	mov	r0, r4
}
 8005078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800507c:	f7ff bce8 	b.w	8004a50 <prvAddCurrentTaskToDelayedList.constprop.0>
 8005080:	20000404 	.word	0x20000404

08005084 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005084:	68c3      	ldr	r3, [r0, #12]
{
 8005086:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005088:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800508a:	b955      	cbnz	r5, 80050a2 <xTaskRemoveFromEventList+0x1e>
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	b672      	cpsid	i
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	b662      	cpsie	i
 80050a0:	e7fe      	b.n	80050a0 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050a2:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a6:	4c15      	ldr	r4, [pc, #84]	; (80050fc <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050a8:	4608      	mov	r0, r1
 80050aa:	9101      	str	r1, [sp, #4]
 80050ac:	f7fe ffea 	bl	8004084 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80050b4:	9901      	ldr	r1, [sp, #4]
 80050b6:	b9e3      	cbnz	r3, 80050f2 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050b8:	1d29      	adds	r1, r5, #4
 80050ba:	4608      	mov	r0, r1
 80050bc:	9101      	str	r1, [sp, #4]
 80050be:	f7fe ffe1 	bl	8004084 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050c2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80050c4:	2301      	movs	r3, #1
 80050c6:	6920      	ldr	r0, [r4, #16]
 80050c8:	9901      	ldr	r1, [sp, #4]
 80050ca:	4093      	lsls	r3, r2
 80050cc:	4303      	orrs	r3, r0
 80050ce:	2014      	movs	r0, #20
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80050d6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050da:	f7fe ffb0 	bl	800403e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d907      	bls.n	80050f8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 80050e8:	2001      	movs	r0, #1
 80050ea:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 80050ee:	b003      	add	sp, #12
 80050f0:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050f2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80050f6:	e7f0      	b.n	80050da <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 80050f8:	2000      	movs	r0, #0
	return xReturn;
 80050fa:	e7f8      	b.n	80050ee <xTaskRemoveFromEventList+0x6a>
 80050fc:	20000404 	.word	0x20000404

08005100 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <vTaskInternalSetTimeOutState+0x10>)
 8005102:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005106:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005108:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800510a:	6043      	str	r3, [r0, #4]
}
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000404 	.word	0x20000404

08005114 <xTaskCheckForTimeOut>:
{
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8005118:	4605      	mov	r5, r0
 800511a:	b950      	cbnz	r0, 8005132 <xTaskCheckForTimeOut+0x1e>
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	b672      	cpsid	i
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	b662      	cpsie	i
 8005130:	e7fe      	b.n	8005130 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005132:	b951      	cbnz	r1, 800514a <xTaskCheckForTimeOut+0x36>
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	b672      	cpsid	i
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	b662      	cpsie	i
 8005148:	e7fe      	b.n	8005148 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800514a:	f000 fbc3 	bl	80058d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800514e:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005150:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005152:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005154:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005158:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800515a:	4298      	cmp	r0, r3
 800515c:	d001      	beq.n	8005162 <xTaskCheckForTimeOut+0x4e>
 800515e:	428a      	cmp	r2, r1
 8005160:	d910      	bls.n	8005184 <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005162:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005164:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005166:	4283      	cmp	r3, r0
 8005168:	d90a      	bls.n	8005180 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 800516a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800516c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800516e:	4413      	add	r3, r2
 8005170:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 8005172:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005174:	f7ff ffc4 	bl	8005100 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 8005178:	f000 fbd0 	bl	800591c <vPortExitCritical>
}
 800517c:	4620      	mov	r0, r4
 800517e:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005184:	2401      	movs	r4, #1
 8005186:	e7f7      	b.n	8005178 <xTaskCheckForTimeOut+0x64>
 8005188:	20000404 	.word	0x20000404

0800518c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800518c:	4b02      	ldr	r3, [pc, #8]	; (8005198 <vTaskMissedYield+0xc>)
 800518e:	2201      	movs	r2, #1
 8005190:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000404 	.word	0x20000404

0800519c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <xTaskGetSchedulerState+0x1c>)
 800519e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80051a2:	b132      	cbz	r2, 80051b2 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
				xReturn = taskSCHEDULER_SUSPENDED;
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2002      	moveq	r0, #2
 80051ae:	2000      	movne	r0, #0
 80051b0:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051b2:	2001      	movs	r0, #1
	}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000404 	.word	0x20000404

080051bc <xTaskPriorityInherit>:
	{
 80051bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80051be:	4604      	mov	r4, r0
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d034      	beq.n	800522e <xTaskPriorityInherit+0x72>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80051c4:	4d22      	ldr	r5, [pc, #136]	; (8005250 <xTaskPriorityInherit+0x94>)
 80051c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80051c8:	68ea      	ldr	r2, [r5, #12]
 80051ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d236      	bcs.n	800523e <xTaskPriorityInherit+0x82>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051d0:	6982      	ldr	r2, [r0, #24]
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	db04      	blt.n	80051e0 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d6:	68ea      	ldr	r2, [r5, #12]
 80051d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051da:	f1c2 0207 	rsb	r2, r2, #7
 80051de:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051e0:	4f1c      	ldr	r7, [pc, #112]	; (8005254 <xTaskPriorityInherit+0x98>)
 80051e2:	2614      	movs	r6, #20
 80051e4:	6962      	ldr	r2, [r4, #20]
 80051e6:	fb06 7303 	mla	r3, r6, r3, r7
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d121      	bne.n	8005232 <xTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ee:	1d21      	adds	r1, r4, #4
 80051f0:	4608      	mov	r0, r1
 80051f2:	9101      	str	r1, [sp, #4]
 80051f4:	f7fe ff46 	bl	8004084 <uxListRemove>
 80051f8:	9901      	ldr	r1, [sp, #4]
 80051fa:	b950      	cbnz	r0, 8005212 <xTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80051fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80051fe:	fb06 5600 	mla	r6, r6, r0, r5
 8005202:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005204:	b92b      	cbnz	r3, 8005212 <xTaskPriorityInherit+0x56>
 8005206:	2201      	movs	r2, #1
 8005208:	692b      	ldr	r3, [r5, #16]
 800520a:	4082      	lsls	r2, r0
 800520c:	ea23 0302 	bic.w	r3, r3, r2
 8005210:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005212:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005214:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800521a:	2401      	movs	r4, #1
 800521c:	fa04 f203 	lsl.w	r2, r4, r3
 8005220:	4302      	orrs	r2, r0
 8005222:	2014      	movs	r0, #20
 8005224:	fb00 7003 	mla	r0, r0, r3, r7
 8005228:	612a      	str	r2, [r5, #16]
 800522a:	f7fe ff08 	bl	800403e <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800522e:	4620      	mov	r0, r4
		return xReturn;
 8005230:	e003      	b.n	800523a <xTaskPriorityInherit+0x7e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005232:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8005234:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800523a:	b003      	add	sp, #12
 800523c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800523e:	68eb      	ldr	r3, [r5, #12]
 8005240:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005242:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005244:	42a0      	cmp	r0, r4
 8005246:	bf2c      	ite	cs
 8005248:	2000      	movcs	r0, #0
 800524a:	2001      	movcc	r0, #1
 800524c:	e7f5      	b.n	800523a <xTaskPriorityInherit+0x7e>
 800524e:	bf00      	nop
 8005250:	20000404 	.word	0x20000404
 8005254:	20000438 	.word	0x20000438

08005258 <xTaskPriorityDisinherit>:
	{
 8005258:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800525a:	4604      	mov	r4, r0
 800525c:	b910      	cbnz	r0, 8005264 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 800525e:	2000      	movs	r0, #0
	}
 8005260:	b002      	add	sp, #8
 8005262:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005264:	4d24      	ldr	r5, [pc, #144]	; (80052f8 <xTaskPriorityDisinherit+0xa0>)
 8005266:	68eb      	ldr	r3, [r5, #12]
 8005268:	4283      	cmp	r3, r0
 800526a:	d00a      	beq.n	8005282 <xTaskPriorityDisinherit+0x2a>
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	b672      	cpsid	i
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	b662      	cpsie	i
 8005280:	e7fe      	b.n	8005280 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 8005282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005284:	b953      	cbnz	r3, 800529c <xTaskPriorityDisinherit+0x44>
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	b672      	cpsid	i
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	b662      	cpsie	i
 800529a:	e7fe      	b.n	800529a <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800529c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800529e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052a0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80052a2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052a4:	4291      	cmp	r1, r2
 80052a6:	d0da      	beq.n	800525e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1d8      	bne.n	800525e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ac:	1d01      	adds	r1, r0, #4
 80052ae:	4608      	mov	r0, r1
 80052b0:	9101      	str	r1, [sp, #4]
 80052b2:	f7fe fee7 	bl	8004084 <uxListRemove>
 80052b6:	9901      	ldr	r1, [sp, #4]
 80052b8:	b958      	cbnz	r0, 80052d2 <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80052ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052bc:	2014      	movs	r0, #20
 80052be:	fb00 5006 	mla	r0, r0, r6, r5
 80052c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052c4:	b92b      	cbnz	r3, 80052d2 <xTaskPriorityDisinherit+0x7a>
 80052c6:	2201      	movs	r2, #1
 80052c8:	692b      	ldr	r3, [r5, #16]
 80052ca:	40b2      	lsls	r2, r6
 80052cc:	ea23 0302 	bic.w	r3, r3, r2
 80052d0:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80052d4:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d6:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052da:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052dc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80052de:	2401      	movs	r4, #1
 80052e0:	fa04 f203 	lsl.w	r2, r4, r3
 80052e4:	4302      	orrs	r2, r0
 80052e6:	2014      	movs	r0, #20
 80052e8:	612a      	str	r2, [r5, #16]
 80052ea:	4a04      	ldr	r2, [pc, #16]	; (80052fc <xTaskPriorityDisinherit+0xa4>)
 80052ec:	fb00 2003 	mla	r0, r0, r3, r2
 80052f0:	f7fe fea5 	bl	800403e <vListInsertEnd>
					xReturn = pdTRUE;
 80052f4:	4620      	mov	r0, r4
		return xReturn;
 80052f6:	e7b3      	b.n	8005260 <xTaskPriorityDisinherit+0x8>
 80052f8:	20000404 	.word	0x20000404
 80052fc:	20000438 	.word	0x20000438

08005300 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005302:	4604      	mov	r4, r0
 8005304:	2800      	cmp	r0, #0
 8005306:	d051      	beq.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 8005308:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800530a:	b952      	cbnz	r2, 8005322 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	b672      	cpsid	i
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	b662      	cpsie	i
 8005320:	e7fe      	b.n	8005320 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005322:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005324:	4299      	cmp	r1, r3
 8005326:	bf38      	it	cc
 8005328:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800532a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800532c:	428b      	cmp	r3, r1
 800532e:	d03d      	beq.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005330:	2a01      	cmp	r2, #1
 8005332:	d13b      	bne.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 8005334:	4d1e      	ldr	r5, [pc, #120]	; (80053b0 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8005336:	68ea      	ldr	r2, [r5, #12]
 8005338:	4282      	cmp	r2, r0
 800533a:	d10a      	bne.n	8005352 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	b672      	cpsid	i
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	b662      	cpsie	i
 8005350:	e7fe      	b.n	8005350 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005352:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005354:	2614      	movs	r6, #20
 8005356:	4f17      	ldr	r7, [pc, #92]	; (80053b4 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005358:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 800535a:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800535c:	fb06 7303 	mla	r3, r6, r3, r7
 8005360:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005362:	bfa4      	itt	ge
 8005364:	f1c1 0107 	rsbge	r1, r1, #7
 8005368:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800536a:	429a      	cmp	r2, r3
 800536c:	d11e      	bne.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800536e:	1d01      	adds	r1, r0, #4
 8005370:	4608      	mov	r0, r1
 8005372:	9101      	str	r1, [sp, #4]
 8005374:	f7fe fe86 	bl	8004084 <uxListRemove>
 8005378:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800537a:	9901      	ldr	r1, [sp, #4]
 800537c:	b948      	cbnz	r0, 8005392 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800537e:	fb06 5602 	mla	r6, r6, r2, r5
 8005382:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005384:	b92b      	cbnz	r3, 8005392 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8005386:	2001      	movs	r0, #1
 8005388:	692b      	ldr	r3, [r5, #16]
 800538a:	4090      	lsls	r0, r2
 800538c:	ea23 0300 	bic.w	r3, r3, r0
 8005390:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8005392:	2301      	movs	r3, #1
 8005394:	6928      	ldr	r0, [r5, #16]
 8005396:	4093      	lsls	r3, r2
 8005398:	4303      	orrs	r3, r0
 800539a:	2014      	movs	r0, #20
 800539c:	fb00 7002 	mla	r0, r0, r2, r7
 80053a0:	612b      	str	r3, [r5, #16]
	}
 80053a2:	b003      	add	sp, #12
 80053a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80053a8:	f7fe be49 	b.w	800403e <vListInsertEnd>
	}
 80053ac:	b003      	add	sp, #12
 80053ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b0:	20000404 	.word	0x20000404
 80053b4:	20000438 	.word	0x20000438

080053b8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <pvTaskIncrementMutexHeldCount+0x14>)
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	b11a      	cbz	r2, 80053c6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80053be:	68d9      	ldr	r1, [r3, #12]
 80053c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80053c2:	3201      	adds	r2, #1
 80053c4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80053c6:	68d8      	ldr	r0, [r3, #12]
	}
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000404 	.word	0x20000404

080053d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053d0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80053d2:	f7ff fcab 	bl	8004d2c <vTaskStartScheduler>
  
  return osOK;
}
 80053d6:	2000      	movs	r0, #0
 80053d8:	bd08      	pop	{r3, pc}

080053da <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053da:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80053de:	b10b      	cbz	r3, 80053e4 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80053e0:	f7ff bcee 	b.w	8004dc0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80053e4:	f7ff bce6 	b.w	8004db4 <xTaskGetTickCount>

080053e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053e8:	b530      	push	{r4, r5, lr}
 80053ea:	4604      	mov	r4, r0
 80053ec:	b085      	sub	sp, #20
 80053ee:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053f0:	8a22      	ldrh	r2, [r4, #16]
 80053f2:	ad03      	add	r5, sp, #12
 80053f4:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 80053f8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80053fa:	bf14      	ite	ne
 80053fc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053fe:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005400:	e9d0 1000 	ldrd	r1, r0, [r0]
 8005404:	e9cd 4500 	strd	r4, r5, [sp]
 8005408:	f7ff fb74 	bl	8004af4 <xTaskCreate>
 800540c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800540e:	bf0c      	ite	eq
 8005410:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8005412:	2000      	movne	r0, #0
}
 8005414:	b005      	add	sp, #20
 8005416:	bd30      	pop	{r4, r5, pc}

08005418 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005418:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800541a:	f7ff fc29 	bl	8004c70 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 800541e:	2000      	movs	r0, #0
 8005420:	bd08      	pop	{r3, pc}

08005422 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005422:	2801      	cmp	r0, #1
{
 8005424:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005426:	bf38      	it	cc
 8005428:	2001      	movcc	r0, #1
 800542a:	f7ff fdb5 	bl	8004f98 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800542e:	2000      	movs	r0, #0
 8005430:	bd08      	pop	{r3, pc}

08005432 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005432:	2001      	movs	r0, #1
 8005434:	f7ff b807 	b.w	8004446 <xQueueCreateMutex>

08005438 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005438:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800543a:	2400      	movs	r4, #0
 800543c:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800543e:	b1f0      	cbz	r0, 800547e <osMutexWait+0x46>
 8005440:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005444:	b1ab      	cbz	r3, 8005472 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005446:	aa01      	add	r2, sp, #4
 8005448:	4621      	mov	r1, r4
 800544a:	f7ff fa4c 	bl	80048e6 <xQueueReceiveFromISR>
 800544e:	2801      	cmp	r0, #1
 8005450:	d113      	bne.n	800547a <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	b913      	cbnz	r3, 800545c <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8005456:	2000      	movs	r0, #0
}
 8005458:	b002      	add	sp, #8
 800545a:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800545c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005464:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	e7f1      	b.n	8005456 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005472:	f7ff f96d 	bl	8004750 <xQueueSemaphoreTake>
 8005476:	2801      	cmp	r0, #1
 8005478:	d0ed      	beq.n	8005456 <osMutexWait+0x1e>
    return osErrorOS;
 800547a:	20ff      	movs	r0, #255	; 0xff
 800547c:	e7ec      	b.n	8005458 <osMutexWait+0x20>
    return osErrorParameter;
 800547e:	2080      	movs	r0, #128	; 0x80
 8005480:	e7ea      	b.n	8005458 <osMutexWait+0x20>

08005482 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005482:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8005484:	2400      	movs	r4, #0
 8005486:	9401      	str	r4, [sp, #4]
 8005488:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800548c:	b1a3      	cbz	r3, 80054b8 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800548e:	a901      	add	r1, sp, #4
 8005490:	f7ff f85d 	bl	800454e <xQueueGiveFromISR>
 8005494:	2801      	cmp	r0, #1
 8005496:	d115      	bne.n	80054c4 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005498:	9b01      	ldr	r3, [sp, #4]
 800549a:	b913      	cbnz	r3, 80054a2 <osMutexRelease+0x20>
  osStatus result = osOK;
 800549c:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800549e:	b002      	add	sp, #8
 80054a0:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80054a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80054a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	e7f1      	b.n	800549c <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80054b8:	461a      	mov	r2, r3
 80054ba:	4619      	mov	r1, r3
 80054bc:	f7fe ff08 	bl	80042d0 <xQueueGenericSend>
 80054c0:	2801      	cmp	r0, #1
 80054c2:	d0eb      	beq.n	800549c <osMutexRelease+0x1a>
    result = osErrorOS;
 80054c4:	20ff      	movs	r0, #255	; 0xff
 80054c6:	e7ea      	b.n	800549e <osMutexRelease+0x1c>

080054c8 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80054c8:	b510      	push	{r4, lr}
 80054ca:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 80054ce:	b91c      	cbnz	r4, 80054d8 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 80054d0:	f7ff fa98 	bl	8004a04 <vQueueDelete>

  return osOK;
}
 80054d4:	4620      	mov	r0, r4
 80054d6:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80054d8:	2482      	movs	r4, #130	; 0x82
 80054da:	e7fb      	b.n	80054d4 <osMutexDelete+0xc>

080054dc <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80054dc:	2901      	cmp	r1, #1
{ 
 80054de:	4608      	mov	r0, r1
 80054e0:	b510      	push	{r4, lr}
  if (count == 1) {
 80054e2:	d10c      	bne.n	80054fe <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80054e4:	2203      	movs	r2, #3
 80054e6:	2100      	movs	r1, #0
 80054e8:	f7fe feaa 	bl	8004240 <xQueueGenericCreate>
 80054ec:	4604      	mov	r4, r0
 80054ee:	b120      	cbz	r0, 80054fa <osSemaphoreCreate+0x1e>
 80054f0:	2300      	movs	r3, #0
 80054f2:	461a      	mov	r2, r3
 80054f4:	4619      	mov	r1, r3
 80054f6:	f7fe feeb 	bl	80042d0 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80054fa:	4620      	mov	r0, r4
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8005502:	f7fe bec3 	b.w	800428c <xQueueCreateCountingSemaphore>

08005506 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005506:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005508:	2400      	movs	r4, #0
 800550a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800550c:	b1f0      	cbz	r0, 800554c <osSemaphoreWait+0x46>
 800550e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005512:	b1ab      	cbz	r3, 8005540 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005514:	aa01      	add	r2, sp, #4
 8005516:	4621      	mov	r1, r4
 8005518:	f7ff f9e5 	bl	80048e6 <xQueueReceiveFromISR>
 800551c:	2801      	cmp	r0, #1
 800551e:	d113      	bne.n	8005548 <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005520:	9b01      	ldr	r3, [sp, #4]
 8005522:	b913      	cbnz	r3, 800552a <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8005524:	2000      	movs	r0, #0
}
 8005526:	b002      	add	sp, #8
 8005528:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800552a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005532:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	e7f1      	b.n	8005524 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005540:	f7ff f906 	bl	8004750 <xQueueSemaphoreTake>
 8005544:	2801      	cmp	r0, #1
 8005546:	d0ed      	beq.n	8005524 <osSemaphoreWait+0x1e>
    return osErrorOS;
 8005548:	20ff      	movs	r0, #255	; 0xff
 800554a:	e7ec      	b.n	8005526 <osSemaphoreWait+0x20>
    return osErrorParameter;
 800554c:	2080      	movs	r0, #128	; 0x80
 800554e:	e7ea      	b.n	8005526 <osSemaphoreWait+0x20>

08005550 <osSemaphoreRelease>:
 8005550:	f7ff bf97 	b.w	8005482 <osMutexRelease>

08005554 <osSemaphoreDelete>:
 8005554:	f7ff bfb8 	b.w	80054c8 <osMutexDelete>

08005558 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005558:	2200      	movs	r2, #0
 800555a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800555e:	f7fe be6f 	b.w	8004240 <xQueueGenericCreate>

08005562 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005562:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8005564:	2400      	movs	r4, #0
{
 8005566:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005568:	9403      	str	r4, [sp, #12]
 800556a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800556e:	b1b3      	cbz	r3, 800559e <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005570:	4623      	mov	r3, r4
 8005572:	aa03      	add	r2, sp, #12
 8005574:	a901      	add	r1, sp, #4
 8005576:	f7fe ff81 	bl	800447c <xQueueGenericSendFromISR>
 800557a:	2801      	cmp	r0, #1
 800557c:	d117      	bne.n	80055ae <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	b913      	cbnz	r3, 8005588 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005582:	2000      	movs	r0, #0
}
 8005584:	b004      	add	sp, #16
 8005586:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005588:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800558c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005590:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	e7f1      	b.n	8005582 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800559e:	2a01      	cmp	r2, #1
 80055a0:	a901      	add	r1, sp, #4
 80055a2:	bf38      	it	cc
 80055a4:	2201      	movcc	r2, #1
 80055a6:	f7fe fe93 	bl	80042d0 <xQueueGenericSend>
 80055aa:	2801      	cmp	r0, #1
 80055ac:	d0e9      	beq.n	8005582 <osMessagePut+0x20>
      return osErrorOS;
 80055ae:	20ff      	movs	r0, #255	; 0xff
 80055b0:	e7e8      	b.n	8005584 <osMessagePut+0x22>

080055b2 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80055b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80055b4:	2300      	movs	r3, #0
{
 80055b6:	4604      	mov	r4, r0
 80055b8:	4616      	mov	r6, r2
 80055ba:	4608      	mov	r0, r1
 80055bc:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 80055be:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80055c0:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 80055c2:	b911      	cbnz	r1, 80055ca <osMessageGet+0x18>
    event.status = osErrorParameter;
 80055c4:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	e018      	b.n	80055fc <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80055d0:	b1db      	cbz	r3, 800560a <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80055d2:	466a      	mov	r2, sp
 80055d4:	a902      	add	r1, sp, #8
 80055d6:	f7ff f986 	bl	80048e6 <xQueueReceiveFromISR>
      event.status = osOK;
 80055da:	2801      	cmp	r0, #1
 80055dc:	bf0c      	ite	eq
 80055de:	2310      	moveq	r3, #16
 80055e0:	2300      	movne	r3, #0
 80055e2:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80055e4:	9b00      	ldr	r3, [sp, #0]
 80055e6:	b14b      	cbz	r3, 80055fc <osMessageGet+0x4a>
 80055e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80055ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80055fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005604:	4620      	mov	r0, r4
 8005606:	b004      	add	sp, #16
 8005608:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800560a:	a902      	add	r1, sp, #8
 800560c:	f7fe fffb 	bl	8004606 <xQueueReceive>
 8005610:	2801      	cmp	r0, #1
 8005612:	d101      	bne.n	8005618 <osMessageGet+0x66>
      event.status = osEventMessage;
 8005614:	2310      	movs	r3, #16
 8005616:	e7d6      	b.n	80055c6 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005618:	2e00      	cmp	r6, #0
 800561a:	bf18      	it	ne
 800561c:	2640      	movne	r6, #64	; 0x40
 800561e:	9601      	str	r6, [sp, #4]
 8005620:	e7ec      	b.n	80055fc <osMessageGet+0x4a>

08005622 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005622:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005624:	f7ff fdba 	bl	800519c <xTaskGetSchedulerState>
 8005628:	2801      	cmp	r0, #1
 800562a:	d003      	beq.n	8005634 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800562c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005630:	f000 b9c0 	b.w	80059b4 <xPortSysTickHandler>
}
 8005634:	bd08      	pop	{r3, pc}

08005636 <osMessageWaiting>:
 8005636:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 800563a:	b10b      	cbz	r3, 8005640 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800563c:	f7ff b9bf 	b.w	80049be <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005640:	f7ff b9a6 	b.w	8004990 <uxQueueMessagesWaiting>

08005644 <osMessageDelete>:
 8005644:	f7ff bf40 	b.w	80054c8 <osMutexDelete>

08005648 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005648:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <prvInsertBlockIntoFreeList+0x40>)
{
 800564a:	b530      	push	{r4, r5, lr}
 800564c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800564e:	461a      	mov	r2, r3
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4283      	cmp	r3, r0
 8005654:	d3fb      	bcc.n	800564e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005656:	6854      	ldr	r4, [r2, #4]
 8005658:	1911      	adds	r1, r2, r4
 800565a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800565c:	bf01      	itttt	eq
 800565e:	6841      	ldreq	r1, [r0, #4]
 8005660:	4610      	moveq	r0, r2
 8005662:	1909      	addeq	r1, r1, r4
 8005664:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005666:	6844      	ldr	r4, [r0, #4]
 8005668:	1901      	adds	r1, r0, r4
 800566a:	428b      	cmp	r3, r1
 800566c:	d106      	bne.n	800567c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800566e:	68a9      	ldr	r1, [r5, #8]
 8005670:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005672:	bf1f      	itttt	ne
 8005674:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005676:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005678:	1909      	addne	r1, r1, r4
 800567a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800567c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800567e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005680:	bf18      	it	ne
 8005682:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005684:	bd30      	pop	{r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	2000051c 	.word	0x2000051c

0800568c <pvPortMalloc>:
{
 800568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8005690:	4d3f      	ldr	r5, [pc, #252]	; (8005790 <pvPortMalloc+0x104>)
{
 8005692:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005694:	f7ff fb84 	bl	8004da0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005698:	68ab      	ldr	r3, [r5, #8]
 800569a:	b9f3      	cbnz	r3, 80056da <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 800569c:	493d      	ldr	r1, [pc, #244]	; (8005794 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800569e:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056a0:	bf1b      	ittet	ne
 80056a2:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056a4:	f501 42c8 	addne.w	r2, r1, #25600	; 0x6400
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056a8:	f44f 42c8 	moveq.w	r2, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056ac:	f023 0307 	bicne.w	r3, r3, #7
 80056b0:	bf1c      	itt	ne
 80056b2:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056b4:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 80056b6:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056b8:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056ba:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056bc:	606b      	str	r3, [r5, #4]
	uxAddress -= xHeapStructSize;
 80056be:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c0:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 80056c4:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056c8:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 80056ca:	60aa      	str	r2, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056cc:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056d0:	e9c5 3303 	strd	r3, r3, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056d8:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056da:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80056de:	ea18 0f04 	tst.w	r8, r4
 80056e2:	d14f      	bne.n	8005784 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	d03e      	beq.n	8005766 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 80056e8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056ec:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ee:	bf1c      	itt	ne
 80056f0:	f023 0307 	bicne.w	r3, r3, #7
 80056f4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d044      	beq.n	8005784 <pvPortMalloc+0xf8>
 80056fa:	692f      	ldr	r7, [r5, #16]
 80056fc:	429f      	cmp	r7, r3
 80056fe:	d341      	bcc.n	8005784 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 8005700:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8005702:	4823      	ldr	r0, [pc, #140]	; (8005790 <pvPortMalloc+0x104>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005704:	6872      	ldr	r2, [r6, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d201      	bcs.n	800570e <pvPortMalloc+0x82>
 800570a:	6831      	ldr	r1, [r6, #0]
 800570c:	b9b1      	cbnz	r1, 800573c <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800570e:	68a9      	ldr	r1, [r5, #8]
 8005710:	42b1      	cmp	r1, r6
 8005712:	d037      	beq.n	8005784 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005714:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005716:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005718:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800571a:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800571c:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800571e:	d914      	bls.n	800574a <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005720:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005722:	0741      	lsls	r1, r0, #29
 8005724:	d00d      	beq.n	8005742 <pvPortMalloc+0xb6>
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	b672      	cpsid	i
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	b662      	cpsie	i
 800573a:	e7fe      	b.n	800573a <pvPortMalloc+0xae>
 800573c:	4630      	mov	r0, r6
 800573e:	460e      	mov	r6, r1
 8005740:	e7e0      	b.n	8005704 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005742:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005744:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005746:	f7ff ff7f 	bl	8005648 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800574a:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800574c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800574e:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005750:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005752:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005756:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005758:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800575a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800575e:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005760:	bf38      	it	cc
 8005762:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 8005764:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8005766:	f7ff fba7 	bl	8004eb8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800576a:	0763      	lsls	r3, r4, #29
 800576c:	d00c      	beq.n	8005788 <pvPortMalloc+0xfc>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	b672      	cpsid	i
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	b662      	cpsie	i
 8005782:	e7fe      	b.n	8005782 <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 8005784:	2400      	movs	r4, #0
 8005786:	e7ee      	b.n	8005766 <pvPortMalloc+0xda>
}
 8005788:	4620      	mov	r0, r4
 800578a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578e:	bf00      	nop
 8005790:	2000051c 	.word	0x2000051c
 8005794:	20000534 	.word	0x20000534

08005798 <vPortFree>:
{
 8005798:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 800579a:	4604      	mov	r4, r0
 800579c:	b388      	cbz	r0, 8005802 <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800579e:	4d19      	ldr	r5, [pc, #100]	; (8005804 <vPortFree+0x6c>)
 80057a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80057a4:	696a      	ldr	r2, [r5, #20]
 80057a6:	4213      	tst	r3, r2
 80057a8:	d10a      	bne.n	80057c0 <vPortFree+0x28>
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	b672      	cpsid	i
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	b662      	cpsie	i
 80057be:	e7fe      	b.n	80057be <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057c0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80057c4:	b151      	cbz	r1, 80057dc <vPortFree+0x44>
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	b672      	cpsid	i
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	b662      	cpsie	i
 80057da:	e7fe      	b.n	80057da <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057dc:	ea23 0302 	bic.w	r3, r3, r2
 80057e0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80057e4:	f7ff fadc 	bl	8004da0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057e8:	692a      	ldr	r2, [r5, #16]
 80057ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ee:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057f2:	4413      	add	r3, r2
 80057f4:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057f6:	f7ff ff27 	bl	8005648 <prvInsertBlockIntoFreeList>
}
 80057fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80057fe:	f7ff bb5b 	b.w	8004eb8 <xTaskResumeAll>
}
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	2000051c 	.word	0x2000051c

08005808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005808:	4808      	ldr	r0, [pc, #32]	; (800582c <prvPortStartFirstTask+0x24>)
 800580a:	6800      	ldr	r0, [r0, #0]
 800580c:	6800      	ldr	r0, [r0, #0]
 800580e:	f380 8808 	msr	MSP, r0
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f380 8814 	msr	CONTROL, r0
 800581a:	b662      	cpsie	i
 800581c:	b661      	cpsie	f
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	df00      	svc	0
 8005828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800582a:	0000      	.short	0x0000
 800582c:	e000ed08 	.word	0xe000ed08

08005830 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005830:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005840 <vPortEnableVFP+0x10>
 8005834:	6801      	ldr	r1, [r0, #0]
 8005836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800583a:	6001      	str	r1, [r0, #0]
 800583c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800583e:	0000      	.short	0x0000
 8005840:	e000ed88 	.word	0xe000ed88

08005844 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8005844:	2300      	movs	r3, #0
{
 8005846:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005848:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <prvTaskExitError+0x44>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	d00a      	beq.n	8005868 <prvTaskExitError+0x24>
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	b672      	cpsid	i
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	b662      	cpsie	i
 8005866:	e7fe      	b.n	8005866 <prvTaskExitError+0x22>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	b672      	cpsid	i
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	b662      	cpsie	i
	while( ulDummy == 0 )
 800587c:	9b01      	ldr	r3, [sp, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0fc      	beq.n	800587c <prvTaskExitError+0x38>
}
 8005882:	b002      	add	sp, #8
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	2000001c 	.word	0x2000001c

0800588c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800588c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005890:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005894:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005898:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800589a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800589e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058a0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058a2:	f06f 0302 	mvn.w	r3, #2
 80058a6:	6203      	str	r3, [r0, #32]
}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	08005845 	.word	0x08005845

080058b0 <SVC_Handler>:
	__asm volatile (
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <pxCurrentTCBConst2>)
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	f380 8809 	msr	PSP, r0
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8811 	msr	BASEPRI, r0
 80058ca:	4770      	bx	lr
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst2>:
 80058d0:	20000410 	.word	0x20000410

080058d4 <vPortEnterCritical>:
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	b672      	cpsid	i
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	b662      	cpsie	i
	uxCriticalNesting++;
 80058e8:	4a0b      	ldr	r2, [pc, #44]	; (8005918 <vPortEnterCritical+0x44>)
 80058ea:	6813      	ldr	r3, [r2, #0]
 80058ec:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80058ee:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80058f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80058f2:	d110      	bne.n	8005916 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058f8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	b153      	cbz	r3, 8005916 <vPortEnterCritical+0x42>
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	b672      	cpsid	i
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	b662      	cpsie	i
 8005914:	e7fe      	b.n	8005914 <vPortEnterCritical+0x40>
}
 8005916:	4770      	bx	lr
 8005918:	2000001c 	.word	0x2000001c

0800591c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800591c:	4a09      	ldr	r2, [pc, #36]	; (8005944 <vPortExitCritical+0x28>)
 800591e:	6813      	ldr	r3, [r2, #0]
 8005920:	b953      	cbnz	r3, 8005938 <vPortExitCritical+0x1c>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	b672      	cpsid	i
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	b662      	cpsie	i
 8005936:	e7fe      	b.n	8005936 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8005938:	3b01      	subs	r3, #1
 800593a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800593c:	b90b      	cbnz	r3, 8005942 <vPortExitCritical+0x26>
	__asm volatile
 800593e:	f383 8811 	msr	BASEPRI, r3
}
 8005942:	4770      	bx	lr
 8005944:	2000001c 	.word	0x2000001c
	...

08005950 <PendSV_Handler>:
	__asm volatile
 8005950:	f3ef 8009 	mrs	r0, PSP
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <pxCurrentTCBConst>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	f01e 0f10 	tst.w	lr, #16
 8005960:	bf08      	it	eq
 8005962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	6010      	str	r0, [r2, #0]
 800596c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005974:	b672      	cpsid	i
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	b662      	cpsie	i
 8005984:	f7ff fb30 	bl	8004fe8 <vTaskSwitchContext>
 8005988:	f04f 0000 	mov.w	r0, #0
 800598c:	f380 8811 	msr	BASEPRI, r0
 8005990:	bc09      	pop	{r0, r3}
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f01e 0f10 	tst.w	lr, #16
 800599e:	bf08      	it	eq
 80059a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059a4:	f380 8809 	msr	PSP, r0
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop

080059b0 <pxCurrentTCBConst>:
 80059b0:	20000410 	.word	0x20000410

080059b4 <xPortSysTickHandler>:
{
 80059b4:	b508      	push	{r3, lr}
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	b672      	cpsid	i
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80059ca:	f7ff fa01 	bl	8004dd0 <xTaskIncrementTick>
 80059ce:	b128      	cbz	r0, 80059dc <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80059d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80059dc:	2300      	movs	r3, #0
 80059de:	f383 8811 	msr	BASEPRI, r3
}
 80059e2:	bd08      	pop	{r3, pc}

080059e4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059e4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80059e8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059ee:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059f0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059f2:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <vPortSetupTimerInterrupt+0x20>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80059fa:	3b01      	subs	r3, #1
 80059fc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059fe:	2307      	movs	r3, #7
 8005a00:	6113      	str	r3, [r2, #16]
}
 8005a02:	4770      	bx	lr
 8005a04:	20000010 	.word	0x20000010

08005a08 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a08:	4b2d      	ldr	r3, [pc, #180]	; (8005ac0 <xPortStartScheduler+0xb8>)
{
 8005a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a0c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a0e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a18:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <xPortStartScheduler+0xbc>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a2a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a2c:	2307      	movs	r3, #7
 8005a2e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a30:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005a34:	1e5c      	subs	r4, r3, #1
 8005a36:	0600      	lsls	r0, r0, #24
 8005a38:	d40e      	bmi.n	8005a58 <xPortStartScheduler+0x50>
 8005a3a:	b111      	cbz	r1, 8005a42 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	6053      	str	r3, [r2, #4]
 8005a40:	d013      	beq.n	8005a6a <xPortStartScheduler+0x62>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	b672      	cpsid	i
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	b662      	cpsie	i
 8005a56:	e7fe      	b.n	8005a56 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a58:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f88d 3003 	strb.w	r3, [sp, #3]
 8005a66:	4623      	mov	r3, r4
 8005a68:	e7e2      	b.n	8005a30 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a6e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8005a72:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a74:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	4a11      	ldr	r2, [pc, #68]	; (8005ac0 <xPortStartScheduler+0xb8>)
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a7e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005a82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a86:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a8a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005a8e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a92:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005a96:	f7ff ffa5 	bl	80059e4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <xPortStartScheduler+0xc0>)
 8005a9c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005a9e:	f7ff fec7 	bl	8005830 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aa2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8005aa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005aaa:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005aae:	f7ff feab 	bl	8005808 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005ab2:	f7ff fa99 	bl	8004fe8 <vTaskSwitchContext>
}
 8005ab6:	4628      	mov	r0, r5
	prvTaskExitError();
 8005ab8:	f7ff fec4 	bl	8005844 <prvTaskExitError>
}
 8005abc:	b003      	add	sp, #12
 8005abe:	bd30      	pop	{r4, r5, pc}
 8005ac0:	e000e400 	.word	0xe000e400
 8005ac4:	20006934 	.word	0x20006934
 8005ac8:	2000001c 	.word	0x2000001c

08005acc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005acc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ad0:	2b0f      	cmp	r3, #15
 8005ad2:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <vPortValidateInterruptPriority+0x54>)
 8005ad4:	d90f      	bls.n	8005af6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ad6:	4913      	ldr	r1, [pc, #76]	; (8005b24 <vPortValidateInterruptPriority+0x58>)
 8005ad8:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ada:	7811      	ldrb	r1, [r2, #0]
 8005adc:	4299      	cmp	r1, r3
 8005ade:	d90a      	bls.n	8005af6 <vPortValidateInterruptPriority+0x2a>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	b672      	cpsid	i
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	b662      	cpsie	i
 8005af4:	e7fe      	b.n	8005af4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005af6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005afa:	6852      	ldr	r2, [r2, #4]
 8005afc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d90a      	bls.n	8005b1e <vPortValidateInterruptPriority+0x52>
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	b672      	cpsid	i
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	b662      	cpsie	i
 8005b1c:	e7fe      	b.n	8005b1c <vPortValidateInterruptPriority+0x50>
	}
 8005b1e:	4770      	bx	lr
 8005b20:	20006934 	.word	0x20006934
 8005b24:	e000e3f0 	.word	0xe000e3f0

08005b28 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005b28:	680a      	ldr	r2, [r1, #0]
{
 8005b2a:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005b2c:	320c      	adds	r2, #12
{
 8005b2e:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005b30:	f001 fb6c 	bl	800720c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8005b34:	b908      	cbnz	r0, 8005b3a <netconn_apimsg+0x12>
    return apimsg->err;
 8005b36:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8005b3a:	bd10      	pop	{r4, pc}

08005b3c <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8005b3c:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005b3e:	b160      	cbz	r0, 8005b5a <netconn_tcp_recvd_msg+0x1e>
 8005b40:	7803      	ldrb	r3, [r0, #0]
 8005b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d107      	bne.n	8005b5a <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8005b4a:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8005b4c:	6091      	str	r1, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4807      	ldr	r0, [pc, #28]	; (8005b70 <netconn_tcp_recvd_msg+0x34>)
}
 8005b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005b56:	f7ff bfe7 	b.w	8005b28 <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <netconn_tcp_recvd_msg+0x38>)
 8005b5c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005b60:	4905      	ldr	r1, [pc, #20]	; (8005b78 <netconn_tcp_recvd_msg+0x3c>)
 8005b62:	4806      	ldr	r0, [pc, #24]	; (8005b7c <netconn_tcp_recvd_msg+0x40>)
 8005b64:	f009 f9b6 	bl	800eed4 <iprintf>
}
 8005b68:	f06f 000f 	mvn.w	r0, #15
 8005b6c:	bd08      	pop	{r3, pc}
 8005b6e:	bf00      	nop
 8005b70:	08006e99 	.word	0x08006e99
 8005b74:	0801a992 	.word	0x0801a992
 8005b78:	0801a9f3 	.word	0x0801a9f3
 8005b7c:	0801a5dc 	.word	0x0801a5dc

08005b80 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005b80:	b500      	push	{lr}
 8005b82:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005b84:	b958      	cbnz	r0, 8005b9e <netconn_close_shutdown+0x1e>
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <netconn_close_shutdown+0x34>)
 8005b88:	f240 4247 	movw	r2, #1095	; 0x447
 8005b8c:	490a      	ldr	r1, [pc, #40]	; (8005bb8 <netconn_close_shutdown+0x38>)
 8005b8e:	480b      	ldr	r0, [pc, #44]	; (8005bbc <netconn_close_shutdown+0x3c>)
 8005b90:	f009 f9a0 	bl	800eed4 <iprintf>
 8005b94:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8005b98:	b009      	add	sp, #36	; 0x24
 8005b9a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005b9e:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005ba0:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005ba2:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005ba6:	4669      	mov	r1, sp
 8005ba8:	4805      	ldr	r0, [pc, #20]	; (8005bc0 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005baa:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005bae:	f7ff ffbb 	bl	8005b28 <netconn_apimsg>
  return err;
 8005bb2:	e7f1      	b.n	8005b98 <netconn_close_shutdown+0x18>
 8005bb4:	0801a992 	.word	0x0801a992
 8005bb8:	0801aa17 	.word	0x0801aa17
 8005bbc:	0801a5dc 	.word	0x0801a5dc
 8005bc0:	08006f9d 	.word	0x08006f9d

08005bc4 <netconn_new_with_proto_and_callback>:
{
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	460d      	mov	r5, r1
 8005bc8:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8005bca:	4611      	mov	r1, r2
 8005bcc:	f000 ff20 	bl	8006a10 <netconn_alloc>
  if (conn != NULL) {
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d03e      	beq.n	8005c54 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8005bd6:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005bd8:	4669      	mov	r1, sp
 8005bda:	4820      	ldr	r0, [pc, #128]	; (8005c5c <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005bdc:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005be0:	f7ff ffa2 	bl	8005b28 <netconn_apimsg>
    if (err != ERR_OK) {
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d035      	beq.n	8005c54 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8005be8:	6863      	ldr	r3, [r4, #4]
 8005bea:	b12b      	cbz	r3, 8005bf8 <netconn_new_with_proto_and_callback+0x34>
 8005bec:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <netconn_new_with_proto_and_callback+0x9c>)
 8005bee:	22a3      	movs	r2, #163	; 0xa3
 8005bf0:	491c      	ldr	r1, [pc, #112]	; (8005c64 <netconn_new_with_proto_and_callback+0xa0>)
 8005bf2:	481d      	ldr	r0, [pc, #116]	; (8005c68 <netconn_new_with_proto_and_callback+0xa4>)
 8005bf4:	f009 f96e 	bl	800eed4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005bf8:	f104 0510 	add.w	r5, r4, #16
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f008 fbe6 	bl	800e3ce <sys_mbox_valid>
 8005c02:	b928      	cbnz	r0, 8005c10 <netconn_new_with_proto_and_callback+0x4c>
 8005c04:	4b16      	ldr	r3, [pc, #88]	; (8005c60 <netconn_new_with_proto_and_callback+0x9c>)
 8005c06:	22a4      	movs	r2, #164	; 0xa4
 8005c08:	4918      	ldr	r1, [pc, #96]	; (8005c6c <netconn_new_with_proto_and_callback+0xa8>)
 8005c0a:	4817      	ldr	r0, [pc, #92]	; (8005c68 <netconn_new_with_proto_and_callback+0xa4>)
 8005c0c:	f009 f962 	bl	800eed4 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005c10:	f104 0014 	add.w	r0, r4, #20
 8005c14:	f008 fbdb 	bl	800e3ce <sys_mbox_valid>
 8005c18:	b128      	cbz	r0, 8005c26 <netconn_new_with_proto_and_callback+0x62>
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <netconn_new_with_proto_and_callback+0x9c>)
 8005c1c:	22a6      	movs	r2, #166	; 0xa6
 8005c1e:	4914      	ldr	r1, [pc, #80]	; (8005c70 <netconn_new_with_proto_and_callback+0xac>)
 8005c20:	4811      	ldr	r0, [pc, #68]	; (8005c68 <netconn_new_with_proto_and_callback+0xa4>)
 8005c22:	f009 f957 	bl	800eed4 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005c26:	f104 060c 	add.w	r6, r4, #12
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f008 fc0f 	bl	800e44e <sys_sem_valid>
 8005c30:	b928      	cbnz	r0, 8005c3e <netconn_new_with_proto_and_callback+0x7a>
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <netconn_new_with_proto_and_callback+0x9c>)
 8005c34:	22a9      	movs	r2, #169	; 0xa9
 8005c36:	490f      	ldr	r1, [pc, #60]	; (8005c74 <netconn_new_with_proto_and_callback+0xb0>)
 8005c38:	480b      	ldr	r0, [pc, #44]	; (8005c68 <netconn_new_with_proto_and_callback+0xa4>)
 8005c3a:	f009 f94b 	bl	800eed4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f008 fc02 	bl	800e448 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8005c44:	4628      	mov	r0, r5
 8005c46:	f008 fb7b 	bl	800e340 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8005c4a:	4621      	mov	r1, r4
      return NULL;
 8005c4c:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8005c4e:	2007      	movs	r0, #7
 8005c50:	f004 f914 	bl	8009e7c <memp_free>
}
 8005c54:	4620      	mov	r0, r4
 8005c56:	b008      	add	sp, #32
 8005c58:	bd70      	pop	{r4, r5, r6, pc}
 8005c5a:	bf00      	nop
 8005c5c:	080069b1 	.word	0x080069b1
 8005c60:	0801a992 	.word	0x0801a992
 8005c64:	0801aa33 	.word	0x0801aa33
 8005c68:	0801a5dc 	.word	0x0801a5dc
 8005c6c:	0801aa54 	.word	0x0801aa54
 8005c70:	0801aa69 	.word	0x0801aa69
 8005c74:	0801aa8a 	.word	0x0801aa8a

08005c78 <netconn_prepare_delete>:
{
 8005c78:	b500      	push	{lr}
 8005c7a:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8005c7c:	b138      	cbz	r0, 8005c8e <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005c7e:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8005c80:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005c82:	4669      	mov	r1, sp
 8005c84:	4803      	ldr	r0, [pc, #12]	; (8005c94 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005c86:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005c8a:	f7ff ff4d 	bl	8005b28 <netconn_apimsg>
}
 8005c8e:	b009      	add	sp, #36	; 0x24
 8005c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c94:	08006ca1 	.word	0x08006ca1

08005c98 <netconn_delete>:
{
 8005c98:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b140      	cbz	r0, 8005cb0 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8005c9e:	f7ff ffeb 	bl	8005c78 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	b910      	cbnz	r0, 8005cac <netconn_delete+0x14>
    netconn_free(conn);
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fef4 	bl	8006a94 <netconn_free>
}
 8005cac:	4620      	mov	r0, r4
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	e7fb      	b.n	8005cac <netconn_delete+0x14>

08005cb4 <netconn_bind>:
{
 8005cb4:	b500      	push	{lr}
 8005cb6:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005cb8:	b958      	cbnz	r0, 8005cd2 <netconn_bind+0x1e>
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <netconn_bind+0x38>)
 8005cbc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005cc0:	490b      	ldr	r1, [pc, #44]	; (8005cf0 <netconn_bind+0x3c>)
 8005cc2:	480c      	ldr	r0, [pc, #48]	; (8005cf4 <netconn_bind+0x40>)
 8005cc4:	f009 f906 	bl	800eed4 <iprintf>
 8005cc8:	f06f 000f 	mvn.w	r0, #15
}
 8005ccc:	b009      	add	sp, #36	; 0x24
 8005cce:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8005cd4:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8005cd6:	2900      	cmp	r1, #0
 8005cd8:	bf08      	it	eq
 8005cda:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005cdc:	4807      	ldr	r0, [pc, #28]	; (8005cfc <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005cde:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005ce2:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005ce4:	4669      	mov	r1, sp
 8005ce6:	f7ff ff1f 	bl	8005b28 <netconn_apimsg>
  return err;
 8005cea:	e7ef      	b.n	8005ccc <netconn_bind+0x18>
 8005cec:	0801a992 	.word	0x0801a992
 8005cf0:	0801aafd 	.word	0x0801aafd
 8005cf4:	0801a5dc 	.word	0x0801a5dc
 8005cf8:	08011768 	.word	0x08011768
 8005cfc:	08006dad 	.word	0x08006dad

08005d00 <netconn_listen_with_backlog>:
{
 8005d00:	b500      	push	{lr}
 8005d02:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005d04:	b958      	cbnz	r0, 8005d1e <netconn_listen_with_backlog+0x1e>
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <netconn_listen_with_backlog+0x2c>)
 8005d08:	f240 12bb 	movw	r2, #443	; 0x1bb
 8005d0c:	4908      	ldr	r1, [pc, #32]	; (8005d30 <netconn_listen_with_backlog+0x30>)
 8005d0e:	4809      	ldr	r0, [pc, #36]	; (8005d34 <netconn_listen_with_backlog+0x34>)
 8005d10:	f009 f8e0 	bl	800eed4 <iprintf>
 8005d14:	f06f 000f 	mvn.w	r0, #15
}
 8005d18:	b009      	add	sp, #36	; 0x24
 8005d1a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8005d1e:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8005d20:	4669      	mov	r1, sp
 8005d22:	4805      	ldr	r0, [pc, #20]	; (8005d38 <netconn_listen_with_backlog+0x38>)
 8005d24:	f7ff ff00 	bl	8005b28 <netconn_apimsg>
  return err;
 8005d28:	e7f6      	b.n	8005d18 <netconn_listen_with_backlog+0x18>
 8005d2a:	bf00      	nop
 8005d2c:	0801a992 	.word	0x0801a992
 8005d30:	0801ab75 	.word	0x0801ab75
 8005d34:	0801a5dc 	.word	0x0801a5dc
 8005d38:	08006de1 	.word	0x08006de1

08005d3c <netconn_write_vectors_partly>:
{
 8005d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3e:	b089      	sub	sp, #36	; 0x24
 8005d40:	469e      	mov	lr, r3
 8005d42:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005d44:	b958      	cbnz	r0, 8005d5e <netconn_write_vectors_partly+0x22>
 8005d46:	f06f 040f 	mvn.w	r4, #15
 8005d4a:	4b2c      	ldr	r3, [pc, #176]	; (8005dfc <netconn_write_vectors_partly+0xc0>)
 8005d4c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005d50:	492b      	ldr	r1, [pc, #172]	; (8005e00 <netconn_write_vectors_partly+0xc4>)
 8005d52:	482c      	ldr	r0, [pc, #176]	; (8005e04 <netconn_write_vectors_partly+0xc8>)
 8005d54:	f009 f8be 	bl	800eed4 <iprintf>
}
 8005d58:	4620      	mov	r0, r4
 8005d5a:	b009      	add	sp, #36	; 0x24
 8005d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8005d5e:	7804      	ldrb	r4, [r0, #0]
 8005d60:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8005d64:	2c10      	cmp	r4, #16
 8005d66:	d009      	beq.n	8005d7c <netconn_write_vectors_partly+0x40>
 8005d68:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <netconn_write_vectors_partly+0xc0>)
 8005d6a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8005d6e:	4926      	ldr	r1, [pc, #152]	; (8005e08 <netconn_write_vectors_partly+0xcc>)
 8005d70:	4824      	ldr	r0, [pc, #144]	; (8005e04 <netconn_write_vectors_partly+0xc8>)
 8005d72:	f009 f8af 	bl	800eed4 <iprintf>
    return ERR_VAL;
 8005d76:	f06f 0405 	mvn.w	r4, #5
 8005d7a:	e7ed      	b.n	8005d58 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8005d7c:	7e05      	ldrb	r5, [r0, #24]
 8005d7e:	f003 0404 	and.w	r4, r3, #4
 8005d82:	f005 0502 	and.w	r5, r5, #2
 8005d86:	4325      	orrs	r5, r4
 8005d88:	d002      	beq.n	8005d90 <netconn_write_vectors_partly+0x54>
 8005d8a:	2f00      	cmp	r7, #0
 8005d8c:	d0f3      	beq.n	8005d76 <netconn_write_vectors_partly+0x3a>
 8005d8e:	2501      	movs	r5, #1
 8005d90:	2400      	movs	r4, #0
    size += vectors[i].len;
 8005d92:	f101 0c04 	add.w	ip, r1, #4
 8005d96:	4626      	mov	r6, r4
 8005d98:	e004      	b.n	8005da4 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 8005d9a:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 8005d9e:	199e      	adds	r6, r3, r6
 8005da0:	d2e9      	bcs.n	8005d76 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 8005da2:	3401      	adds	r4, #1
 8005da4:	42a2      	cmp	r2, r4
 8005da6:	dcf8      	bgt.n	8005d9a <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	d101      	bne.n	8005db0 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8005dac:	2400      	movs	r4, #0
 8005dae:	e7d3      	b.n	8005d58 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 8005db0:	da03      	bge.n	8005dba <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	d0df      	beq.n	8005d76 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 8005db6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8005dba:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005dbe:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 8005dc0:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8005dc2:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005dc4:	4669      	mov	r1, sp
 8005dc6:	4811      	ldr	r0, [pc, #68]	; (8005e0c <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005dc8:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005dca:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8005dce:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005dd2:	f7ff fea9 	bl	8005b28 <netconn_apimsg>
  if (err == ERR_OK) {
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d1bd      	bne.n	8005d58 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 8005ddc:	b10f      	cbz	r7, 8005de2 <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8005dde:	9b06      	ldr	r3, [sp, #24]
 8005de0:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	d1e2      	bne.n	8005dac <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	42b3      	cmp	r3, r6
 8005dea:	d0df      	beq.n	8005dac <netconn_write_vectors_partly+0x70>
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <netconn_write_vectors_partly+0xc0>)
 8005dee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005df2:	4907      	ldr	r1, [pc, #28]	; (8005e10 <netconn_write_vectors_partly+0xd4>)
 8005df4:	4803      	ldr	r0, [pc, #12]	; (8005e04 <netconn_write_vectors_partly+0xc8>)
 8005df6:	f009 f86d 	bl	800eed4 <iprintf>
 8005dfa:	e7ad      	b.n	8005d58 <netconn_write_vectors_partly+0x1c>
 8005dfc:	0801a992 	.word	0x0801a992
 8005e00:	0801abad 	.word	0x0801abad
 8005e04:	0801a5dc 	.word	0x0801a5dc
 8005e08:	0801abc9 	.word	0x0801abc9
 8005e0c:	08006ed1 	.word	0x08006ed1
 8005e10:	0801abeb 	.word	0x0801abeb

08005e14 <netconn_write_partly>:
{
 8005e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 8005e16:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8005e1a:	9a06      	ldr	r2, [sp, #24]
 8005e1c:	a902      	add	r1, sp, #8
 8005e1e:	9200      	str	r2, [sp, #0]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f7ff ff8b 	bl	8005d3c <netconn_write_vectors_partly>
}
 8005e26:	b005      	add	sp, #20
 8005e28:	f85d fb04 	ldr.w	pc, [sp], #4

08005e2c <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8005e2c:	2103      	movs	r1, #3
 8005e2e:	f7ff bea7 	b.w	8005b80 <netconn_close_shutdown>

08005e32 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8005e32:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8005e34:	4604      	mov	r4, r0
 8005e36:	b148      	cbz	r0, 8005e4c <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8005e38:	f008 fb44 	bl	800e4c4 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8005e3c:	2300      	movs	r3, #0
  err = conn->pending_err;
 8005e3e:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8005e42:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8005e44:	f008 fb4a 	bl	800e4dc <sys_arch_unprotect>
  return err;
}
 8005e48:	4628      	mov	r0, r5
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	e7fb      	b.n	8005e48 <netconn_err+0x16>

08005e50 <netconn_accept>:
{
 8005e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e52:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005e54:	460e      	mov	r6, r1
 8005e56:	b959      	cbnz	r1, 8005e70 <netconn_accept+0x20>
 8005e58:	4b25      	ldr	r3, [pc, #148]	; (8005ef0 <netconn_accept+0xa0>)
 8005e5a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005e5e:	4925      	ldr	r1, [pc, #148]	; (8005ef4 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005e60:	f06f 040f 	mvn.w	r4, #15
 8005e64:	4824      	ldr	r0, [pc, #144]	; (8005ef8 <netconn_accept+0xa8>)
 8005e66:	f009 f835 	bl	800eed4 <iprintf>
}
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	b003      	add	sp, #12
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005e74:	b920      	cbnz	r0, 8005e80 <netconn_accept+0x30>
 8005e76:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <netconn_accept+0xa0>)
 8005e78:	f240 12e3 	movw	r2, #483	; 0x1e3
 8005e7c:	491f      	ldr	r1, [pc, #124]	; (8005efc <netconn_accept+0xac>)
 8005e7e:	e7ef      	b.n	8005e60 <netconn_accept+0x10>
  err = netconn_err(conn);
 8005e80:	f7ff ffd7 	bl	8005e32 <netconn_err>
 8005e84:	4604      	mov	r4, r0
 8005e86:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d1ed      	bne.n	8005e6a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005e8e:	f105 0714 	add.w	r7, r5, #20
 8005e92:	4638      	mov	r0, r7
 8005e94:	f008 fa9b 	bl	800e3ce <sys_mbox_valid>
 8005e98:	b910      	cbnz	r0, 8005ea0 <netconn_accept+0x50>
    return ERR_CLSD;
 8005e9a:	f06f 040e 	mvn.w	r4, #14
 8005e9e:	e7e4      	b.n	8005e6a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8005ea0:	7e2b      	ldrb	r3, [r5, #24]
 8005ea2:	07da      	lsls	r2, r3, #31
 8005ea4:	d4f9      	bmi.n	8005e9a <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8005ea6:	079b      	lsls	r3, r3, #30
 8005ea8:	d508      	bpl.n	8005ebc <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8005eaa:	a901      	add	r1, sp, #4
 8005eac:	4638      	mov	r0, r7
 8005eae:	f008 fa7d 	bl	800e3ac <sys_arch_mbox_tryfetch>
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d107      	bne.n	8005ec6 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005eb6:	f06f 0406 	mvn.w	r4, #6
 8005eba:	e7d6      	b.n	8005e6a <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	a901      	add	r1, sp, #4
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f008 fa51 	bl	800e368 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005ec6:	6a2b      	ldr	r3, [r5, #32]
 8005ec8:	b11b      	cbz	r3, 8005ed2 <netconn_accept+0x82>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8005ed2:	f10d 0103 	add.w	r1, sp, #3
 8005ed6:	9801      	ldr	r0, [sp, #4]
 8005ed8:	f000 fd42 	bl	8006960 <lwip_netconn_is_err_msg>
 8005edc:	b110      	cbz	r0, 8005ee4 <netconn_accept+0x94>
    return err;
 8005ede:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8005ee2:	e7c2      	b.n	8005e6a <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8005ee4:	9b01      	ldr	r3, [sp, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0d7      	beq.n	8005e9a <netconn_accept+0x4a>
  *new_conn = newconn;
 8005eea:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8005eec:	e7bd      	b.n	8005e6a <netconn_accept+0x1a>
 8005eee:	bf00      	nop
 8005ef0:	0801a992 	.word	0x0801a992
 8005ef4:	0801ac0e 	.word	0x0801ac0e
 8005ef8:	0801a5dc 	.word	0x0801a5dc
 8005efc:	0801ac2e 	.word	0x0801ac2e

08005f00 <netconn_recv_data>:
  void *buf = NULL;
 8005f00:	2300      	movs	r3, #0
{
 8005f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f04:	4604      	mov	r4, r0
 8005f06:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005f08:	460d      	mov	r5, r1
  void *buf = NULL;
 8005f0a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005f0c:	b951      	cbnz	r1, 8005f24 <netconn_recv_data+0x24>
 8005f0e:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <netconn_recv_data+0xd8>)
 8005f10:	f44f 7212 	mov.w	r2, #584	; 0x248
 8005f14:	4931      	ldr	r1, [pc, #196]	; (8005fdc <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005f16:	4832      	ldr	r0, [pc, #200]	; (8005fe0 <netconn_recv_data+0xe0>)
 8005f18:	f008 ffdc 	bl	800eed4 <iprintf>
 8005f1c:	f06f 000f 	mvn.w	r0, #15
}
 8005f20:	b003      	add	sp, #12
 8005f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8005f24:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005f26:	b920      	cbnz	r0, 8005f32 <netconn_recv_data+0x32>
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <netconn_recv_data+0xd8>)
 8005f2a:	f240 224a 	movw	r2, #586	; 0x24a
 8005f2e:	492d      	ldr	r1, [pc, #180]	; (8005fe4 <netconn_recv_data+0xe4>)
 8005f30:	e7f1      	b.n	8005f16 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005f32:	f100 0710 	add.w	r7, r0, #16
 8005f36:	4638      	mov	r0, r7
 8005f38:	f008 fa49 	bl	800e3ce <sys_mbox_valid>
 8005f3c:	b938      	cbnz	r0, 8005f4e <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ff77 	bl	8005e32 <netconn_err>
    if (err != ERR_OK) {
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d1eb      	bne.n	8005f20 <netconn_recv_data+0x20>
    return ERR_CONN;
 8005f48:	f06f 000a 	mvn.w	r0, #10
 8005f4c:	e7e8      	b.n	8005f20 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005f4e:	7e23      	ldrb	r3, [r4, #24]
 8005f50:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005f54:	a901      	add	r1, sp, #4
 8005f56:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	4333      	orrs	r3, r6
 8005f5e:	d102      	bne.n	8005f66 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8005f60:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8005f64:	b172      	cbz	r2, 8005f84 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005f66:	f008 fa21 	bl	800e3ac <sys_arch_mbox_tryfetch>
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d10c      	bne.n	8005f88 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff ff5f 	bl	8005e32 <netconn_err>
      if (err != ERR_OK) {
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d1d3      	bne.n	8005f20 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8005f78:	7e23      	ldrb	r3, [r4, #24]
 8005f7a:	07db      	lsls	r3, r3, #31
 8005f7c:	d4e4      	bmi.n	8005f48 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8005f7e:	f06f 0006 	mvn.w	r0, #6
 8005f82:	e7cd      	b.n	8005f20 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005f84:	f008 f9f0 	bl	800e368 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005f88:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005f8a:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d116      	bne.n	8005fc2 <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005f94:	f10d 0103 	add.w	r1, sp, #3
 8005f98:	f000 fce2 	bl	8006960 <lwip_netconn_is_err_msg>
 8005f9c:	b130      	cbz	r0, 8005fac <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 8005f9e:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8005fa2:	f110 0f0f 	cmn.w	r0, #15
 8005fa6:	bf08      	it	eq
 8005fa8:	2000      	moveq	r0, #0
 8005faa:	e7b9      	b.n	8005f20 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8005fac:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 8005fae:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8005fb0:	6a23      	ldr	r3, [r4, #32]
 8005fb2:	b113      	cbz	r3, 8005fba <netconn_recv_data+0xba>
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4798      	blx	r3
  *new_buf = buf;
 8005fba:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8005fbc:	2000      	movs	r0, #0
  *new_buf = buf;
 8005fbe:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8005fc0:	e7ae      	b.n	8005f20 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005fc2:	b930      	cbnz	r0, 8005fd2 <netconn_recv_data+0xd2>
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <netconn_recv_data+0xd8>)
 8005fc6:	f240 2291 	movw	r2, #657	; 0x291
 8005fca:	4907      	ldr	r1, [pc, #28]	; (8005fe8 <netconn_recv_data+0xe8>)
 8005fcc:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <netconn_recv_data+0xe0>)
 8005fce:	f008 ff81 	bl	800eed4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8005fd2:	9b01      	ldr	r3, [sp, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	e7ea      	b.n	8005fae <netconn_recv_data+0xae>
 8005fd8:	0801a992 	.word	0x0801a992
 8005fdc:	0801ac4b 	.word	0x0801ac4b
 8005fe0:	0801a5dc 	.word	0x0801a5dc
 8005fe4:	0801ac69 	.word	0x0801ac69
 8005fe8:	0801ac84 	.word	0x0801ac84

08005fec <netconn_recv_data_tcp>:
{
 8005fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fee:	4604      	mov	r4, r0
 8005ff0:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005ff2:	3010      	adds	r0, #16
{
 8005ff4:	460f      	mov	r7, r1
 8005ff6:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005ff8:	f008 f9e9 	bl	800e3ce <sys_mbox_valid>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d03c      	beq.n	800607a <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8006000:	f994 2018 	ldrsb.w	r2, [r4, #24]
 8006004:	7e23      	ldrb	r3, [r4, #24]
 8006006:	2a00      	cmp	r2, #0
 8006008:	da12      	bge.n	8006030 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800600a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600e:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006010:	6a23      	ldr	r3, [r4, #32]
 8006012:	b11b      	cbz	r3, 800601c <netconn_recv_data_tcp+0x30>
 8006014:	2200      	movs	r2, #0
 8006016:	2101      	movs	r1, #1
 8006018:	4620      	mov	r0, r4
 800601a:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	bb2b      	cbnz	r3, 800606c <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8006020:	4620      	mov	r0, r4
 8006022:	f7ff ff06 	bl	8005e32 <netconn_err>
        return ERR_RST;
 8006026:	1e05      	subs	r5, r0, #0
 8006028:	bf08      	it	eq
 800602a:	f06f 050d 	mvneq.w	r5, #13
 800602e:	e018      	b.n	8006062 <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8006030:	4632      	mov	r2, r6
 8006032:	4639      	mov	r1, r7
 8006034:	4620      	mov	r0, r4
 8006036:	f7ff ff63 	bl	8005f00 <netconn_recv_data>
  if (err != ERR_OK) {
 800603a:	4605      	mov	r5, r0
 800603c:	b988      	cbnz	r0, 8006062 <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800603e:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8006040:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006042:	d405      	bmi.n	8006050 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 8006044:	b187      	cbz	r7, 8006068 <netconn_recv_data_tcp+0x7c>
 8006046:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8006048:	466a      	mov	r2, sp
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff fd76 	bl	8005b3c <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8006050:	b93f      	cbnz	r7, 8006062 <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 8006052:	06f3      	lsls	r3, r6, #27
 8006054:	d5dc      	bpl.n	8006010 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006056:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8006058:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800605c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006060:	7623      	strb	r3, [r4, #24]
}
 8006062:	4628      	mov	r0, r5
 8006064:	b009      	add	sp, #36	; 0x24
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8006068:	2101      	movs	r1, #1
 800606a:	e7ed      	b.n	8006048 <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800606c:	2101      	movs	r1, #1
 800606e:	4620      	mov	r0, r4
      return ERR_CLSD;
 8006070:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8006074:	f7ff fd84 	bl	8005b80 <netconn_close_shutdown>
      return ERR_CLSD;
 8006078:	e7f3      	b.n	8006062 <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 800607a:	f06f 050a 	mvn.w	r5, #10
 800607e:	e7f0      	b.n	8006062 <netconn_recv_data_tcp+0x76>

08006080 <netconn_recv>:
{
 8006080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006082:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006084:	460e      	mov	r6, r1
 8006086:	b959      	cbnz	r1, 80060a0 <netconn_recv+0x20>
 8006088:	4b22      	ldr	r3, [pc, #136]	; (8006114 <netconn_recv+0x94>)
 800608a:	f240 3263 	movw	r2, #867	; 0x363
 800608e:	4922      	ldr	r1, [pc, #136]	; (8006118 <netconn_recv+0x98>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006090:	f06f 050f 	mvn.w	r5, #15
 8006094:	4821      	ldr	r0, [pc, #132]	; (800611c <netconn_recv+0x9c>)
 8006096:	f008 ff1d 	bl	800eed4 <iprintf>
}
 800609a:	4628      	mov	r0, r5
 800609c:	b003      	add	sp, #12
 800609e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80060a0:	2700      	movs	r7, #0
 80060a2:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80060a4:	b920      	cbnz	r0, 80060b0 <netconn_recv+0x30>
 80060a6:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <netconn_recv+0x94>)
 80060a8:	f240 3265 	movw	r2, #869	; 0x365
 80060ac:	491c      	ldr	r1, [pc, #112]	; (8006120 <netconn_recv+0xa0>)
 80060ae:	e7ef      	b.n	8006090 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80060b0:	7803      	ldrb	r3, [r0, #0]
 80060b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d125      	bne.n	8006106 <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80060ba:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 80060bc:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80060be:	f003 fec1 	bl	8009e44 <memp_malloc>
    if (buf == NULL) {
 80060c2:	4604      	mov	r4, r0
 80060c4:	b1e0      	cbz	r0, 8006100 <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 80060c6:	4628      	mov	r0, r5
 80060c8:	463a      	mov	r2, r7
 80060ca:	a901      	add	r1, sp, #4
 80060cc:	f7ff ff8e 	bl	8005fec <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 80060d0:	4605      	mov	r5, r0
 80060d2:	b120      	cbz	r0, 80060de <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 80060d4:	4621      	mov	r1, r4
 80060d6:	2006      	movs	r0, #6
 80060d8:	f003 fed0 	bl	8009e7c <memp_free>
      return err;
 80060dc:	e7dd      	b.n	800609a <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	b933      	cbnz	r3, 80060f0 <netconn_recv+0x70>
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <netconn_recv+0x94>)
 80060e4:	f240 3279 	movw	r2, #889	; 0x379
 80060e8:	490e      	ldr	r1, [pc, #56]	; (8006124 <netconn_recv+0xa4>)
 80060ea:	480c      	ldr	r0, [pc, #48]	; (800611c <netconn_recv+0x9c>)
 80060ec:	f008 fef2 	bl	800eed4 <iprintf>
    buf->p = p;
 80060f0:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 80060f2:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 80060fa:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 80060fc:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 80060fe:	e7cc      	b.n	800609a <netconn_recv+0x1a>
      return ERR_MEM;
 8006100:	f04f 35ff 	mov.w	r5, #4294967295
 8006104:	e7c9      	b.n	800609a <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8006106:	463a      	mov	r2, r7
}
 8006108:	b003      	add	sp, #12
 800610a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800610e:	f7ff bef7 	b.w	8005f00 <netconn_recv_data>
 8006112:	bf00      	nop
 8006114:	0801a992 	.word	0x0801a992
 8006118:	0801ac4b 	.word	0x0801ac4b
 800611c:	0801a5dc 	.word	0x0801a5dc
 8006120:	0801ac69 	.word	0x0801ac69
 8006124:	0801c2e1 	.word	0x0801c2e1

08006128 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8006128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800612c:	4606      	mov	r6, r0
 800612e:	4617      	mov	r7, r2
 8006130:	461d      	mov	r5, r3
 8006132:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8006136:	460c      	mov	r4, r1
 8006138:	b929      	cbnz	r1, 8006146 <recv_udp+0x1e>
 800613a:	4b25      	ldr	r3, [pc, #148]	; (80061d0 <recv_udp+0xa8>)
 800613c:	22e5      	movs	r2, #229	; 0xe5
 800613e:	4925      	ldr	r1, [pc, #148]	; (80061d4 <recv_udp+0xac>)
 8006140:	4825      	ldr	r0, [pc, #148]	; (80061d8 <recv_udp+0xb0>)
 8006142:	f008 fec7 	bl	800eed4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006146:	b99e      	cbnz	r6, 8006170 <recv_udp+0x48>
 8006148:	4b21      	ldr	r3, [pc, #132]	; (80061d0 <recv_udp+0xa8>)
 800614a:	22e6      	movs	r2, #230	; 0xe6
 800614c:	4923      	ldr	r1, [pc, #140]	; (80061dc <recv_udp+0xb4>)
 800614e:	4822      	ldr	r0, [pc, #136]	; (80061d8 <recv_udp+0xb0>)
 8006150:	f008 fec0 	bl	800eed4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8006154:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8006156:	b003      	add	sp, #12
 8006158:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 800615c:	f004 b8a8 	b.w	800a2b0 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006160:	6a33      	ldr	r3, [r6, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d031      	beq.n	80061ca <recv_udp+0xa2>
 8006166:	4630      	mov	r0, r6
}
 8006168:	b003      	add	sp, #12
 800616a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800616e:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006170:	6873      	ldr	r3, [r6, #4]
 8006172:	42a3      	cmp	r3, r4
 8006174:	d005      	beq.n	8006182 <recv_udp+0x5a>
 8006176:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <recv_udp+0xa8>)
 8006178:	22ee      	movs	r2, #238	; 0xee
 800617a:	4919      	ldr	r1, [pc, #100]	; (80061e0 <recv_udp+0xb8>)
 800617c:	4816      	ldr	r0, [pc, #88]	; (80061d8 <recv_udp+0xb0>)
 800617e:	f008 fea9 	bl	800eed4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006182:	f106 0910 	add.w	r9, r6, #16
 8006186:	4648      	mov	r0, r9
 8006188:	f008 f921 	bl	800e3ce <sys_mbox_valid>
 800618c:	2800      	cmp	r0, #0
 800618e:	d0e1      	beq.n	8006154 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006190:	2006      	movs	r0, #6
 8006192:	f003 fe57 	bl	8009e44 <memp_malloc>
  if (buf == NULL) {
 8006196:	4604      	mov	r4, r0
 8006198:	2800      	cmp	r0, #0
 800619a:	d0db      	beq.n	8006154 <recv_udp+0x2c>
    buf->ptr = p;
 800619c:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 80061a0:	b105      	cbz	r5, 80061a4 <recv_udp+0x7c>
 80061a2:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 80061a4:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80061a6:	4621      	mov	r1, r4
 80061a8:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 80061aa:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 80061ac:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 80061b0:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80061b2:	f008 f8cf 	bl	800e354 <sys_mbox_trypost>
 80061b6:	9a01      	ldr	r2, [sp, #4]
 80061b8:	4601      	mov	r1, r0
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d0d0      	beq.n	8006160 <recv_udp+0x38>
    netbuf_delete(buf);
 80061be:	4620      	mov	r0, r4
}
 80061c0:	b003      	add	sp, #12
 80061c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 80061c6:	f000 bf47 	b.w	8007058 <netbuf_delete>
}
 80061ca:	b003      	add	sp, #12
 80061cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061d0:	0801acba 	.word	0x0801acba
 80061d4:	0801ad1b 	.word	0x0801ad1b
 80061d8:	0801a5dc 	.word	0x0801a5dc
 80061dc:	0801ad3d 	.word	0x0801ad3d
 80061e0:	0801ad5c 	.word	0x0801ad5c

080061e4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80061e4:	b507      	push	{r0, r1, r2, lr}
 80061e6:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80061e8:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 80061ea:	9001      	str	r0, [sp, #4]
 80061ec:	f004 fcaa 	bl	800ab44 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80061f0:	9801      	ldr	r0, [sp, #4]
 80061f2:	4909      	ldr	r1, [pc, #36]	; (8006218 <setup_tcp+0x34>)
 80061f4:	f004 fcaa 	bl	800ab4c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80061f8:	9801      	ldr	r0, [sp, #4]
 80061fa:	4908      	ldr	r1, [pc, #32]	; (800621c <setup_tcp+0x38>)
 80061fc:	f004 fcbe 	bl	800ab7c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006200:	9801      	ldr	r0, [sp, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	4906      	ldr	r1, [pc, #24]	; (8006220 <setup_tcp+0x3c>)
 8006206:	f004 fced 	bl	800abe4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800620a:	4906      	ldr	r1, [pc, #24]	; (8006224 <setup_tcp+0x40>)
 800620c:	9801      	ldr	r0, [sp, #4]
}
 800620e:	b003      	add	sp, #12
 8006210:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8006214:	f004 bcc8 	b.w	800aba8 <tcp_err>
 8006218:	08006751 	.word	0x08006751
 800621c:	080066e1 	.word	0x080066e1
 8006220:	08006665 	.word	0x08006665
 8006224:	08006821 	.word	0x08006821

08006228 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800622e:	4604      	mov	r4, r0
 8006230:	b930      	cbnz	r0, 8006240 <lwip_netconn_do_writemore+0x18>
 8006232:	4b89      	ldr	r3, [pc, #548]	; (8006458 <lwip_netconn_do_writemore+0x230>)
 8006234:	f240 6273 	movw	r2, #1651	; 0x673
 8006238:	4988      	ldr	r1, [pc, #544]	; (800645c <lwip_netconn_do_writemore+0x234>)
 800623a:	4889      	ldr	r0, [pc, #548]	; (8006460 <lwip_netconn_do_writemore+0x238>)
 800623c:	f008 fe4a 	bl	800eed4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006240:	7863      	ldrb	r3, [r4, #1]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d006      	beq.n	8006254 <lwip_netconn_do_writemore+0x2c>
 8006246:	4b84      	ldr	r3, [pc, #528]	; (8006458 <lwip_netconn_do_writemore+0x230>)
 8006248:	f240 6274 	movw	r2, #1652	; 0x674
 800624c:	4985      	ldr	r1, [pc, #532]	; (8006464 <lwip_netconn_do_writemore+0x23c>)
 800624e:	4884      	ldr	r0, [pc, #528]	; (8006460 <lwip_netconn_do_writemore+0x238>)
 8006250:	f008 fe40 	bl	800eed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006254:	69e3      	ldr	r3, [r4, #28]
 8006256:	b933      	cbnz	r3, 8006266 <lwip_netconn_do_writemore+0x3e>
 8006258:	4b7f      	ldr	r3, [pc, #508]	; (8006458 <lwip_netconn_do_writemore+0x230>)
 800625a:	f240 6275 	movw	r2, #1653	; 0x675
 800625e:	4982      	ldr	r1, [pc, #520]	; (8006468 <lwip_netconn_do_writemore+0x240>)
 8006260:	487f      	ldr	r0, [pc, #508]	; (8006460 <lwip_netconn_do_writemore+0x238>)
 8006262:	f008 fe37 	bl	800eed4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8006266:	6863      	ldr	r3, [r4, #4]
 8006268:	b933      	cbnz	r3, 8006278 <lwip_netconn_do_writemore+0x50>
 800626a:	4b7b      	ldr	r3, [pc, #492]	; (8006458 <lwip_netconn_do_writemore+0x230>)
 800626c:	f240 6276 	movw	r2, #1654	; 0x676
 8006270:	497e      	ldr	r1, [pc, #504]	; (800646c <lwip_netconn_do_writemore+0x244>)
 8006272:	487b      	ldr	r0, [pc, #492]	; (8006460 <lwip_netconn_do_writemore+0x238>)
 8006274:	f008 fe2e 	bl	800eed4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8006278:	69e3      	ldr	r3, [r4, #28]
 800627a:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800627e:	429a      	cmp	r2, r3
 8006280:	d306      	bcc.n	8006290 <lwip_netconn_do_writemore+0x68>
 8006282:	4b75      	ldr	r3, [pc, #468]	; (8006458 <lwip_netconn_do_writemore+0x230>)
 8006284:	f240 6277 	movw	r2, #1655	; 0x677
 8006288:	4979      	ldr	r1, [pc, #484]	; (8006470 <lwip_netconn_do_writemore+0x248>)
 800628a:	4875      	ldr	r0, [pc, #468]	; (8006460 <lwip_netconn_do_writemore+0x238>)
 800628c:	f008 fe22 	bl	800eed4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8006290:	69e3      	ldr	r3, [r4, #28]
 8006292:	899b      	ldrh	r3, [r3, #12]
 8006294:	b933      	cbnz	r3, 80062a4 <lwip_netconn_do_writemore+0x7c>
 8006296:	4b70      	ldr	r3, [pc, #448]	; (8006458 <lwip_netconn_do_writemore+0x230>)
 8006298:	f240 6279 	movw	r2, #1657	; 0x679
 800629c:	4975      	ldr	r1, [pc, #468]	; (8006474 <lwip_netconn_do_writemore+0x24c>)
 800629e:	4870      	ldr	r0, [pc, #448]	; (8006460 <lwip_netconn_do_writemore+0x238>)
 80062a0:	f008 fe18 	bl	800eed4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80062a4:	69e3      	ldr	r3, [r4, #28]
 80062a6:	7e26      	ldrb	r6, [r4, #24]
 80062a8:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80062ac:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80062b0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8006460 <lwip_netconn_do_writemore+0x238>
 80062b4:	f008 0304 	and.w	r3, r8, #4
 80062b8:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80062ba:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 80062bc:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80062be:	688a      	ldr	r2, [r1, #8]
 80062c0:	690b      	ldr	r3, [r1, #16]
 80062c2:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 80062c4:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80062c8:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80062cc:	6850      	ldr	r0, [r2, #4]
 80062ce:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 80062d2:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 80062d6:	bf2a      	itet	cs
 80062d8:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 80062dc:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 80062e0:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 80062e4:	42aa      	cmp	r2, r5
 80062e6:	d979      	bls.n	80063dc <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 80062e8:	2e00      	cmp	r6, #0
 80062ea:	d038      	beq.n	800635e <lwip_netconn_do_writemore+0x136>
          if (!len) {
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	d138      	bne.n	8006362 <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80062f0:	698b      	ldr	r3, [r1, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bf0c      	ite	eq
 80062f6:	f06f 0a06 	mvneq.w	sl, #6
 80062fa:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80062fe:	69e3      	ldr	r3, [r4, #28]
 8006300:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006304:	429a      	cmp	r2, r3
 8006306:	d276      	bcs.n	80063f6 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006308:	6a23      	ldr	r3, [r4, #32]
 800630a:	b11b      	cbz	r3, 8006314 <lwip_netconn_do_writemore+0xec>
 800630c:	2200      	movs	r2, #0
 800630e:	2103      	movs	r1, #3
 8006310:	4620      	mov	r0, r4
 8006312:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8006314:	7e23      	ldrb	r3, [r4, #24]
 8006316:	f043 0310 	orr.w	r3, r3, #16
 800631a:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 800631c:	f1ba 0f00 	cmp.w	sl, #0
 8006320:	d17e      	bne.n	8006420 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8006322:	69e3      	ldr	r3, [r4, #28]
 8006324:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006328:	429a      	cmp	r2, r3
 800632a:	d077      	beq.n	800641c <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800632c:	3e00      	subs	r6, #0
 800632e:	bf18      	it	ne
 8006330:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8006332:	6860      	ldr	r0, [r4, #4]
 8006334:	f007 f964 	bl	800d600 <tcp_output>
      if (out_err == ERR_RTE) {
 8006338:	3004      	adds	r0, #4
 800633a:	f040 8084 	bne.w	8006446 <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800633e:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006342:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8006344:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006346:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8006348:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 800634c:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 800634e:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8006350:	2f00      	cmp	r7, #0
 8006352:	d07e      	beq.n	8006452 <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8006354:	300c      	adds	r0, #12
 8006356:	f008 f874 	bl	800e442 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800635a:	4628      	mov	r0, r5
 800635c:	e06b      	b.n	8006436 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800635e:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006362:	442b      	add	r3, r5
 8006364:	4298      	cmp	r0, r3
 8006366:	d206      	bcs.n	8006376 <lwip_netconn_do_writemore+0x14e>
 8006368:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <lwip_netconn_do_writemore+0x230>)
 800636a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800636e:	4942      	ldr	r1, [pc, #264]	; (8006478 <lwip_netconn_do_writemore+0x250>)
 8006370:	4658      	mov	r0, fp
 8006372:	f008 fdaf 	bl	800eed4 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800637a:	429d      	cmp	r5, r3
 800637c:	d102      	bne.n	8006384 <lwip_netconn_do_writemore+0x15c>
 800637e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8006382:	d207      	bcs.n	8006394 <lwip_netconn_do_writemore+0x16c>
 8006384:	fa1f f989 	uxth.w	r9, r9
 8006388:	45a9      	cmp	r9, r5
 800638a:	d129      	bne.n	80063e0 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800638c:	69e3      	ldr	r3, [r4, #28]
 800638e:	899b      	ldrh	r3, [r3, #12]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d925      	bls.n	80063e0 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006394:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8006398:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800639c:	4651      	mov	r1, sl
 800639e:	4643      	mov	r3, r8
 80063a0:	462a      	mov	r2, r5
 80063a2:	6860      	ldr	r0, [r4, #4]
 80063a4:	f006 fbce 	bl	800cb44 <tcp_write>
      if (err == ERR_OK) {
 80063a8:	4682      	mov	sl, r0
 80063aa:	b9e0      	cbnz	r0, 80063e6 <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 80063ac:	69e3      	ldr	r3, [r4, #28]
 80063ae:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80063b0:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 80063b2:	442a      	add	r2, r5
 80063b4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80063ba:	684a      	ldr	r2, [r1, #4]
 80063bc:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 80063be:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80063c0:	d107      	bne.n	80063d2 <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 80063c2:	899a      	ldrh	r2, [r3, #12]
 80063c4:	3a01      	subs	r2, #1
 80063c6:	b292      	uxth	r2, r2
 80063c8:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80063ca:	b112      	cbz	r2, 80063d2 <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 80063cc:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 80063ce:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 80063d0:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 80063d2:	f1b9 0f00 	cmp.w	r9, #0
 80063d6:	f47f af70 	bne.w	80062ba <lwip_netconn_do_writemore+0x92>
 80063da:	e00a      	b.n	80063f2 <lwip_netconn_do_writemore+0x1ca>
 80063dc:	4615      	mov	r5, r2
 80063de:	e7c0      	b.n	8006362 <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 80063e0:	f04f 0900 	mov.w	r9, #0
 80063e4:	e7da      	b.n	800639c <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d8a9      	bhi.n	8006342 <lwip_netconn_do_writemore+0x11a>
err_mem:
 80063ee:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	d183      	bne.n	80062fe <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	f640 3269 	movw	r2, #2921	; 0xb69
 80063fc:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8006400:	4291      	cmp	r1, r2
 8006402:	d903      	bls.n	800640c <lwip_netconn_do_writemore+0x1e4>
 8006404:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006408:	2b04      	cmp	r3, #4
 800640a:	d987      	bls.n	800631c <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800640c:	6a23      	ldr	r3, [r4, #32]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d084      	beq.n	800631c <lwip_netconn_do_writemore+0xf4>
 8006412:	2200      	movs	r2, #0
 8006414:	2103      	movs	r1, #3
 8006416:	4620      	mov	r0, r4
 8006418:	4798      	blx	r3
 800641a:	e77f      	b.n	800631c <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 800641c:	2601      	movs	r6, #1
 800641e:	e788      	b.n	8006332 <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8006420:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006424:	d18d      	bne.n	8006342 <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8006426:	6860      	ldr	r0, [r4, #4]
 8006428:	f007 f8ea 	bl	800d600 <tcp_output>
      if (out_err == ERR_RTE) {
 800642c:	3004      	adds	r0, #4
 800642e:	d086      	beq.n	800633e <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8006430:	b91e      	cbnz	r6, 800643a <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800643a:	69e3      	ldr	r3, [r4, #28]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	b12b      	cbz	r3, 800644c <lwip_netconn_do_writemore+0x224>
 8006440:	f04f 0a00 	mov.w	sl, #0
 8006444:	e77d      	b.n	8006342 <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 8006446:	2e00      	cmp	r6, #0
 8006448:	d1fa      	bne.n	8006440 <lwip_netconn_do_writemore+0x218>
 800644a:	e7f2      	b.n	8006432 <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800644c:	f06f 0a06 	mvn.w	sl, #6
 8006450:	e777      	b.n	8006342 <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 8006452:	4638      	mov	r0, r7
 8006454:	e7ef      	b.n	8006436 <lwip_netconn_do_writemore+0x20e>
 8006456:	bf00      	nop
 8006458:	0801acba 	.word	0x0801acba
 800645c:	0801adf3 	.word	0x0801adf3
 8006460:	0801a5dc 	.word	0x0801a5dc
 8006464:	0801ae00 	.word	0x0801ae00
 8006468:	0801ae1d 	.word	0x0801ae1d
 800646c:	0801ae37 	.word	0x0801ae37
 8006470:	0801ae4d 	.word	0x0801ae4d
 8006474:	0801ae8c 	.word	0x0801ae8c
 8006478:	0801aeb4 	.word	0x0801aeb4

0800647c <lwip_netconn_do_close_internal>:
{
 800647c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006482:	4604      	mov	r4, r0
 8006484:	b930      	cbnz	r0, 8006494 <lwip_netconn_do_close_internal+0x18>
 8006486:	4b6c      	ldr	r3, [pc, #432]	; (8006638 <lwip_netconn_do_close_internal+0x1bc>)
 8006488:	f240 32a2 	movw	r2, #930	; 0x3a2
 800648c:	496b      	ldr	r1, [pc, #428]	; (800663c <lwip_netconn_do_close_internal+0x1c0>)
 800648e:	486c      	ldr	r0, [pc, #432]	; (8006640 <lwip_netconn_do_close_internal+0x1c4>)
 8006490:	f008 fd20 	bl	800eed4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006494:	7823      	ldrb	r3, [r4, #0]
 8006496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800649a:	2b10      	cmp	r3, #16
 800649c:	d006      	beq.n	80064ac <lwip_netconn_do_close_internal+0x30>
 800649e:	4b66      	ldr	r3, [pc, #408]	; (8006638 <lwip_netconn_do_close_internal+0x1bc>)
 80064a0:	f240 32a3 	movw	r2, #931	; 0x3a3
 80064a4:	4967      	ldr	r1, [pc, #412]	; (8006644 <lwip_netconn_do_close_internal+0x1c8>)
 80064a6:	4866      	ldr	r0, [pc, #408]	; (8006640 <lwip_netconn_do_close_internal+0x1c4>)
 80064a8:	f008 fd14 	bl	800eed4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80064ac:	7863      	ldrb	r3, [r4, #1]
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d006      	beq.n	80064c0 <lwip_netconn_do_close_internal+0x44>
 80064b2:	4b61      	ldr	r3, [pc, #388]	; (8006638 <lwip_netconn_do_close_internal+0x1bc>)
 80064b4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80064b8:	4963      	ldr	r1, [pc, #396]	; (8006648 <lwip_netconn_do_close_internal+0x1cc>)
 80064ba:	4861      	ldr	r0, [pc, #388]	; (8006640 <lwip_netconn_do_close_internal+0x1c4>)
 80064bc:	f008 fd0a 	bl	800eed4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80064c0:	6863      	ldr	r3, [r4, #4]
 80064c2:	b933      	cbnz	r3, 80064d2 <lwip_netconn_do_close_internal+0x56>
 80064c4:	4b5c      	ldr	r3, [pc, #368]	; (8006638 <lwip_netconn_do_close_internal+0x1bc>)
 80064c6:	f240 32a5 	movw	r2, #933	; 0x3a5
 80064ca:	4960      	ldr	r1, [pc, #384]	; (800664c <lwip_netconn_do_close_internal+0x1d0>)
 80064cc:	485c      	ldr	r0, [pc, #368]	; (8006640 <lwip_netconn_do_close_internal+0x1c4>)
 80064ce:	f008 fd01 	bl	800eed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80064d2:	69e3      	ldr	r3, [r4, #28]
 80064d4:	b933      	cbnz	r3, 80064e4 <lwip_netconn_do_close_internal+0x68>
 80064d6:	4b58      	ldr	r3, [pc, #352]	; (8006638 <lwip_netconn_do_close_internal+0x1bc>)
 80064d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80064dc:	495c      	ldr	r1, [pc, #368]	; (8006650 <lwip_netconn_do_close_internal+0x1d4>)
 80064de:	4858      	ldr	r0, [pc, #352]	; (8006640 <lwip_netconn_do_close_internal+0x1c4>)
 80064e0:	f008 fcf8 	bl	800eed4 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80064e4:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 80064e6:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80064e8:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80064ea:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80064ec:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80064f0:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80064f4:	d00f      	beq.n	8006516 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 80064f6:	f1ba 0f00 	cmp.w	sl, #0
 80064fa:	d005      	beq.n	8006508 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 80064fc:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 80064fe:	1f5a      	subs	r2, r3, #5
 8006500:	2a01      	cmp	r2, #1
 8006502:	d908      	bls.n	8006516 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8006504:	2b08      	cmp	r3, #8
 8006506:	d006      	beq.n	8006516 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006508:	f1b8 0f00 	cmp.w	r8, #0
 800650c:	d016      	beq.n	800653c <lwip_netconn_do_close_internal+0xc0>
 800650e:	8b6f      	ldrh	r7, [r5, #26]
 8006510:	f017 0710 	ands.w	r7, r7, #16
 8006514:	d004      	beq.n	8006520 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8006516:	2701      	movs	r7, #1
 8006518:	2100      	movs	r1, #0
 800651a:	4628      	mov	r0, r5
 800651c:	f004 fb12 	bl	800ab44 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8006520:	7d2b      	ldrb	r3, [r5, #20]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d10c      	bne.n	8006540 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8006526:	2100      	movs	r1, #0
 8006528:	4628      	mov	r0, r5
 800652a:	f004 fb55 	bl	800abd8 <tcp_accept>
  if (shut_close) {
 800652e:	bb27      	cbnz	r7, 800657a <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006530:	4642      	mov	r2, r8
 8006532:	4651      	mov	r1, sl
 8006534:	4628      	mov	r0, r5
 8006536:	f004 ff73 	bl	800b420 <tcp_shutdown>
 800653a:	e021      	b.n	8006580 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 800653c:	4647      	mov	r7, r8
 800653e:	e7ef      	b.n	8006520 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8006540:	f1ba 0f00 	cmp.w	sl, #0
 8006544:	d007      	beq.n	8006556 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8006546:	2100      	movs	r1, #0
 8006548:	4628      	mov	r0, r5
 800654a:	f004 faff 	bl	800ab4c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800654e:	2100      	movs	r1, #0
 8006550:	4628      	mov	r0, r5
 8006552:	f004 fb41 	bl	800abd8 <tcp_accept>
    if (shut_tx) {
 8006556:	f1b8 0f00 	cmp.w	r8, #0
 800655a:	d003      	beq.n	8006564 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 800655c:	2100      	movs	r1, #0
 800655e:	4628      	mov	r0, r5
 8006560:	f004 fb0c 	bl	800ab7c <tcp_sent>
    if (shut_close) {
 8006564:	2f00      	cmp	r7, #0
 8006566:	d0e3      	beq.n	8006530 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8006568:	2200      	movs	r2, #0
 800656a:	4628      	mov	r0, r5
 800656c:	4611      	mov	r1, r2
 800656e:	f004 fb39 	bl	800abe4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006572:	2100      	movs	r1, #0
 8006574:	4628      	mov	r0, r5
 8006576:	f004 fb17 	bl	800aba8 <tcp_err>
      err = tcp_close(tpcb);
 800657a:	4628      	mov	r0, r5
 800657c:	f004 fe82 	bl	800b284 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006580:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8006582:	b160      	cbz	r0, 800659e <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d10a      	bne.n	800659e <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006588:	69e3      	ldr	r3, [r4, #28]
 800658a:	f893 b009 	ldrb.w	fp, [r3, #9]
 800658e:	f1bb 0f00 	cmp.w	fp, #0
 8006592:	d130      	bne.n	80065f6 <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 8006594:	b11f      	cbz	r7, 800659e <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 8006596:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8006598:	4628      	mov	r0, r5
 800659a:	f004 fff7 	bl	800b58c <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800659e:	69e3      	ldr	r3, [r4, #28]
 80065a0:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80065a2:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 80065a8:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80065aa:	b9ce      	cbnz	r6, 80065e0 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 80065ac:	b137      	cbz	r7, 80065bc <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80065ae:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 80065b0:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80065b2:	b11b      	cbz	r3, 80065bc <lwip_netconn_do_close_internal+0x140>
 80065b4:	4632      	mov	r2, r6
 80065b6:	2104      	movs	r1, #4
 80065b8:	4620      	mov	r0, r4
 80065ba:	4798      	blx	r3
      if (shut_rx) {
 80065bc:	f1ba 0f00 	cmp.w	sl, #0
 80065c0:	d005      	beq.n	80065ce <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80065c2:	6a23      	ldr	r3, [r4, #32]
 80065c4:	b11b      	cbz	r3, 80065ce <lwip_netconn_do_close_internal+0x152>
 80065c6:	2200      	movs	r2, #0
 80065c8:	4620      	mov	r0, r4
 80065ca:	4611      	mov	r1, r2
 80065cc:	4798      	blx	r3
      if (shut_tx) {
 80065ce:	f1b8 0f00 	cmp.w	r8, #0
 80065d2:	d005      	beq.n	80065e0 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80065d4:	6a23      	ldr	r3, [r4, #32]
 80065d6:	b11b      	cbz	r3, 80065e0 <lwip_netconn_do_close_internal+0x164>
 80065d8:	2200      	movs	r2, #0
 80065da:	2102      	movs	r1, #2
 80065dc:	4620      	mov	r0, r4
 80065de:	4798      	blx	r3
    if (delayed)
 80065e0:	f1b9 0f00 	cmp.w	r9, #0
 80065e4:	d026      	beq.n	8006634 <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 80065e6:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 80065e8:	f105 000c 	add.w	r0, r5, #12
 80065ec:	f007 ff29 	bl	800e442 <sys_sem_signal>
}
 80065f0:	4630      	mov	r0, r6
 80065f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80065f6:	7d2b      	ldrb	r3, [r5, #20]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <lwip_netconn_do_close_internal+0x18e>
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <lwip_netconn_do_close_internal+0x1bc>)
 80065fe:	f240 4241 	movw	r2, #1089	; 0x441
 8006602:	4914      	ldr	r1, [pc, #80]	; (8006654 <lwip_netconn_do_close_internal+0x1d8>)
 8006604:	480e      	ldr	r0, [pc, #56]	; (8006640 <lwip_netconn_do_close_internal+0x1c4>)
 8006606:	f008 fc65 	bl	800eed4 <iprintf>
    if (shut_tx) {
 800660a:	f1b8 0f00 	cmp.w	r8, #0
 800660e:	d003      	beq.n	8006618 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8006610:	4911      	ldr	r1, [pc, #68]	; (8006658 <lwip_netconn_do_close_internal+0x1dc>)
 8006612:	4628      	mov	r0, r5
 8006614:	f004 fab2 	bl	800ab7c <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8006618:	2201      	movs	r2, #1
 800661a:	4628      	mov	r0, r5
 800661c:	490f      	ldr	r1, [pc, #60]	; (800665c <lwip_netconn_do_close_internal+0x1e0>)
 800661e:	f004 fae1 	bl	800abe4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8006622:	4628      	mov	r0, r5
 8006624:	490e      	ldr	r1, [pc, #56]	; (8006660 <lwip_netconn_do_close_internal+0x1e4>)
 8006626:	f004 fabf 	bl	800aba8 <tcp_err>
    tcp_arg(tpcb, conn);
 800662a:	4621      	mov	r1, r4
 800662c:	4628      	mov	r0, r5
 800662e:	f004 fa89 	bl	800ab44 <tcp_arg>
  return err;
 8006632:	e7dd      	b.n	80065f0 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 8006634:	464e      	mov	r6, r9
 8006636:	e7db      	b.n	80065f0 <lwip_netconn_do_close_internal+0x174>
 8006638:	0801acba 	.word	0x0801acba
 800663c:	0801aba0 	.word	0x0801aba0
 8006640:	0801a5dc 	.word	0x0801a5dc
 8006644:	0801aedf 	.word	0x0801aedf
 8006648:	0801aefd 	.word	0x0801aefd
 800664c:	0801af21 	.word	0x0801af21
 8006650:	0801ae1d 	.word	0x0801ae1d
 8006654:	0801af34 	.word	0x0801af34
 8006658:	080066e1 	.word	0x080066e1
 800665c:	08006665 	.word	0x08006665
 8006660:	08006821 	.word	0x08006821

08006664 <poll_tcp>:
{
 8006664:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006666:	4604      	mov	r4, r0
 8006668:	b930      	cbnz	r0, 8006678 <poll_tcp+0x14>
 800666a:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <poll_tcp+0x70>)
 800666c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006670:	4919      	ldr	r1, [pc, #100]	; (80066d8 <poll_tcp+0x74>)
 8006672:	481a      	ldr	r0, [pc, #104]	; (80066dc <poll_tcp+0x78>)
 8006674:	f008 fc2e 	bl	800eed4 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8006678:	7861      	ldrb	r1, [r4, #1]
 800667a:	2901      	cmp	r1, #1
 800667c:	d11c      	bne.n	80066b8 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800667e:	4620      	mov	r0, r4
 8006680:	f7ff fdd2 	bl	8006228 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006684:	7e23      	ldrb	r3, [r4, #24]
 8006686:	06da      	lsls	r2, r3, #27
 8006688:	d514      	bpl.n	80066b4 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800668a:	6862      	ldr	r2, [r4, #4]
 800668c:	b192      	cbz	r2, 80066b4 <poll_tcp+0x50>
 800668e:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8006692:	f640 3169 	movw	r1, #2921	; 0xb69
 8006696:	4288      	cmp	r0, r1
 8006698:	d90c      	bls.n	80066b4 <poll_tcp+0x50>
 800669a:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800669e:	2a04      	cmp	r2, #4
 80066a0:	d808      	bhi.n	80066b4 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80066a8:	6a23      	ldr	r3, [r4, #32]
 80066aa:	b11b      	cbz	r3, 80066b4 <poll_tcp+0x50>
 80066ac:	2200      	movs	r2, #0
 80066ae:	2102      	movs	r1, #2
 80066b0:	4620      	mov	r0, r4
 80066b2:	4798      	blx	r3
}
 80066b4:	2000      	movs	r0, #0
 80066b6:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 80066b8:	2904      	cmp	r1, #4
 80066ba:	d1e3      	bne.n	8006684 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80066bc:	69e2      	ldr	r2, [r4, #28]
 80066be:	b11a      	cbz	r2, 80066c8 <poll_tcp+0x64>
 80066c0:	7a53      	ldrb	r3, [r2, #9]
 80066c2:	b10b      	cbz	r3, 80066c8 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 80066c4:	3b01      	subs	r3, #1
 80066c6:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80066c8:	2101      	movs	r1, #1
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7ff fed6 	bl	800647c <lwip_netconn_do_close_internal>
 80066d0:	e7d8      	b.n	8006684 <poll_tcp+0x20>
 80066d2:	bf00      	nop
 80066d4:	0801acba 	.word	0x0801acba
 80066d8:	0801adf3 	.word	0x0801adf3
 80066dc:	0801a5dc 	.word	0x0801a5dc

080066e0 <sent_tcp>:
{
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80066e4:	4604      	mov	r4, r0
 80066e6:	b970      	cbnz	r0, 8006706 <sent_tcp+0x26>
 80066e8:	4b16      	ldr	r3, [pc, #88]	; (8006744 <sent_tcp+0x64>)
 80066ea:	f240 1293 	movw	r2, #403	; 0x193
 80066ee:	4916      	ldr	r1, [pc, #88]	; (8006748 <sent_tcp+0x68>)
 80066f0:	4816      	ldr	r0, [pc, #88]	; (800674c <sent_tcp+0x6c>)
 80066f2:	f008 fbef 	bl	800eed4 <iprintf>
}
 80066f6:	2000      	movs	r0, #0
 80066f8:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80066fa:	2904      	cmp	r1, #4
 80066fc:	d108      	bne.n	8006710 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80066fe:	2101      	movs	r1, #1
 8006700:	f7ff febc 	bl	800647c <lwip_netconn_do_close_internal>
 8006704:	e004      	b.n	8006710 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8006706:	7841      	ldrb	r1, [r0, #1]
 8006708:	2901      	cmp	r1, #1
 800670a:	d1f6      	bne.n	80066fa <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800670c:	f7ff fd8c 	bl	8006228 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006710:	6863      	ldr	r3, [r4, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ef      	beq.n	80066f6 <sent_tcp+0x16>
 8006716:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800671a:	f640 3269 	movw	r2, #2921	; 0xb69
 800671e:	4291      	cmp	r1, r2
 8006720:	d9e9      	bls.n	80066f6 <sent_tcp+0x16>
 8006722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006726:	2b04      	cmp	r3, #4
 8006728:	d8e5      	bhi.n	80066f6 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800672a:	7e23      	ldrb	r3, [r4, #24]
 800672c:	f023 0310 	bic.w	r3, r3, #16
 8006730:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006732:	6a23      	ldr	r3, [r4, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0de      	beq.n	80066f6 <sent_tcp+0x16>
 8006738:	462a      	mov	r2, r5
 800673a:	2102      	movs	r1, #2
 800673c:	4620      	mov	r0, r4
 800673e:	4798      	blx	r3
  return ERR_OK;
 8006740:	e7d9      	b.n	80066f6 <sent_tcp+0x16>
 8006742:	bf00      	nop
 8006744:	0801acba 	.word	0x0801acba
 8006748:	0801adf3 	.word	0x0801adf3
 800674c:	0801a5dc 	.word	0x0801a5dc

08006750 <recv_tcp>:
{
 8006750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	4606      	mov	r6, r0
 8006756:	4615      	mov	r5, r2
 8006758:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800675a:	460f      	mov	r7, r1
 800675c:	b931      	cbnz	r1, 800676c <recv_tcp+0x1c>
 800675e:	4b29      	ldr	r3, [pc, #164]	; (8006804 <recv_tcp+0xb4>)
 8006760:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006764:	4928      	ldr	r1, [pc, #160]	; (8006808 <recv_tcp+0xb8>)
 8006766:	4829      	ldr	r0, [pc, #164]	; (800680c <recv_tcp+0xbc>)
 8006768:	f008 fbb4 	bl	800eed4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800676c:	bb4e      	cbnz	r6, 80067c2 <recv_tcp+0x72>
 800676e:	4b25      	ldr	r3, [pc, #148]	; (8006804 <recv_tcp+0xb4>)
 8006770:	f240 122d 	movw	r2, #301	; 0x12d
 8006774:	4926      	ldr	r1, [pc, #152]	; (8006810 <recv_tcp+0xc0>)
 8006776:	4825      	ldr	r0, [pc, #148]	; (800680c <recv_tcp+0xbc>)
 8006778:	f008 fbac 	bl	800eed4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800677c:	bb14      	cbnz	r4, 80067c4 <recv_tcp+0x74>
    return ERR_VAL;
 800677e:	f06f 0405 	mvn.w	r4, #5
}
 8006782:	4620      	mov	r0, r4
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8006788:	4638      	mov	r0, r7
 800678a:	8929      	ldrh	r1, [r5, #8]
 800678c:	f004 f986 	bl	800aa9c <tcp_recved>
      pbuf_free(p);
 8006790:	4628      	mov	r0, r5
 8006792:	f003 fd8d 	bl	800a2b0 <pbuf_free>
 8006796:	e7f4      	b.n	8006782 <recv_tcp+0x32>
  if (p != NULL) {
 8006798:	b16d      	cbz	r5, 80067b6 <recv_tcp+0x66>
    len = p->tot_len;
 800679a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800679c:	4629      	mov	r1, r5
 800679e:	4640      	mov	r0, r8
 80067a0:	f007 fdd8 	bl	800e354 <sys_mbox_trypost>
 80067a4:	4604      	mov	r4, r0
 80067a6:	b948      	cbnz	r0, 80067bc <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80067a8:	6a33      	ldr	r3, [r6, #32]
 80067aa:	b343      	cbz	r3, 80067fe <recv_tcp+0xae>
 80067ac:	4601      	mov	r1, r0
 80067ae:	463a      	mov	r2, r7
 80067b0:	4630      	mov	r0, r6
 80067b2:	4798      	blx	r3
 80067b4:	e7e5      	b.n	8006782 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80067b6:	4d17      	ldr	r5, [pc, #92]	; (8006814 <recv_tcp+0xc4>)
    len = 0;
 80067b8:	2700      	movs	r7, #0
 80067ba:	e7ef      	b.n	800679c <recv_tcp+0x4c>
    return ERR_MEM;
 80067bc:	f04f 34ff 	mov.w	r4, #4294967295
 80067c0:	e7df      	b.n	8006782 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80067c2:	b144      	cbz	r4, 80067d6 <recv_tcp+0x86>
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <recv_tcp+0xb4>)
 80067c6:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80067ca:	4913      	ldr	r1, [pc, #76]	; (8006818 <recv_tcp+0xc8>)
 80067cc:	480f      	ldr	r0, [pc, #60]	; (800680c <recv_tcp+0xbc>)
 80067ce:	f008 fb81 	bl	800eed4 <iprintf>
  if (conn == NULL) {
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	d0d3      	beq.n	800677e <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80067d6:	6873      	ldr	r3, [r6, #4]
 80067d8:	42bb      	cmp	r3, r7
 80067da:	d006      	beq.n	80067ea <recv_tcp+0x9a>
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <recv_tcp+0xb4>)
 80067de:	f240 1235 	movw	r2, #309	; 0x135
 80067e2:	490e      	ldr	r1, [pc, #56]	; (800681c <recv_tcp+0xcc>)
 80067e4:	4809      	ldr	r0, [pc, #36]	; (800680c <recv_tcp+0xbc>)
 80067e6:	f008 fb75 	bl	800eed4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80067ea:	f106 0810 	add.w	r8, r6, #16
 80067ee:	4640      	mov	r0, r8
 80067f0:	f007 fded 	bl	800e3ce <sys_mbox_valid>
 80067f4:	4604      	mov	r4, r0
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d1ce      	bne.n	8006798 <recv_tcp+0x48>
    if (p != NULL) {
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	d1c4      	bne.n	8006788 <recv_tcp+0x38>
    return ERR_OK;
 80067fe:	2400      	movs	r4, #0
 8006800:	e7bf      	b.n	8006782 <recv_tcp+0x32>
 8006802:	bf00      	nop
 8006804:	0801acba 	.word	0x0801acba
 8006808:	0801af57 	.word	0x0801af57
 800680c:	0801a5dc 	.word	0x0801a5dc
 8006810:	0801af79 	.word	0x0801af79
 8006814:	0801174c 	.word	0x0801174c
 8006818:	0801af98 	.word	0x0801af98
 800681c:	0801afb0 	.word	0x0801afb0

08006820 <err_tcp>:
{
 8006820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006824:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006826:	4604      	mov	r4, r0
 8006828:	b930      	cbnz	r0, 8006838 <err_tcp+0x18>
 800682a:	4b45      	ldr	r3, [pc, #276]	; (8006940 <err_tcp+0x120>)
 800682c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006830:	4944      	ldr	r1, [pc, #272]	; (8006944 <err_tcp+0x124>)
 8006832:	4845      	ldr	r0, [pc, #276]	; (8006948 <err_tcp+0x128>)
 8006834:	f008 fb4e 	bl	800eed4 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8006838:	f007 fe44 	bl	800e4c4 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800683c:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 800683e:	2600      	movs	r6, #0
  old_state = conn->state;
 8006840:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8006842:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8006846:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8006848:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800684a:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 800684c:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800684e:	f007 fe45 	bl	800e4dc <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006852:	6a23      	ldr	r3, [r4, #32]
 8006854:	b11b      	cbz	r3, 800685e <err_tcp+0x3e>
 8006856:	4632      	mov	r2, r6
 8006858:	2104      	movs	r1, #4
 800685a:	4620      	mov	r0, r4
 800685c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800685e:	6a23      	ldr	r3, [r4, #32]
 8006860:	b11b      	cbz	r3, 800686a <err_tcp+0x4a>
 8006862:	2200      	movs	r2, #0
 8006864:	4620      	mov	r0, r4
 8006866:	4611      	mov	r1, r2
 8006868:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800686a:	6a23      	ldr	r3, [r4, #32]
 800686c:	b11b      	cbz	r3, 8006876 <err_tcp+0x56>
 800686e:	2200      	movs	r2, #0
 8006870:	2102      	movs	r1, #2
 8006872:	4620      	mov	r0, r4
 8006874:	4798      	blx	r3
  switch (err) {
 8006876:	f105 030f 	add.w	r3, r5, #15
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d846      	bhi.n	800690e <err_tcp+0xee>
 8006880:	4a32      	ldr	r2, [pc, #200]	; (800694c <err_tcp+0x12c>)
 8006882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006886:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006888:	f104 0810 	add.w	r8, r4, #16
 800688c:	4640      	mov	r0, r8
 800688e:	f007 fd9e 	bl	800e3ce <sys_mbox_valid>
 8006892:	b118      	cbz	r0, 800689c <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8006894:	4631      	mov	r1, r6
 8006896:	4640      	mov	r0, r8
 8006898:	f007 fd5c 	bl	800e354 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800689c:	f104 0814 	add.w	r8, r4, #20
 80068a0:	4640      	mov	r0, r8
 80068a2:	f007 fd94 	bl	800e3ce <sys_mbox_valid>
 80068a6:	b118      	cbz	r0, 80068b0 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80068a8:	4631      	mov	r1, r6
 80068aa:	4640      	mov	r0, r8
 80068ac:	f007 fd52 	bl	800e354 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80068b0:	2f01      	cmp	r7, #1
 80068b2:	d002      	beq.n	80068ba <err_tcp+0x9a>
 80068b4:	1efb      	subs	r3, r7, #3
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d834      	bhi.n	8006924 <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80068ba:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80068bc:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 80068c0:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 80068c2:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 80068c4:	d439      	bmi.n	800693a <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80068c6:	69e3      	ldr	r3, [r4, #28]
 80068c8:	b933      	cbnz	r3, 80068d8 <err_tcp+0xb8>
 80068ca:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <err_tcp+0x120>)
 80068cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80068d0:	491f      	ldr	r1, [pc, #124]	; (8006950 <err_tcp+0x130>)
 80068d2:	481d      	ldr	r0, [pc, #116]	; (8006948 <err_tcp+0x128>)
 80068d4:	f008 fafe 	bl	800eed4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80068d8:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 80068da:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 80068dc:	bf14      	ite	ne
 80068de:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 80068e0:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80068e2:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 80068e4:	bf08      	it	eq
 80068e6:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80068e8:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80068ea:	4628      	mov	r0, r5
 80068ec:	f007 fdaf 	bl	800e44e <sys_sem_valid>
 80068f0:	b930      	cbnz	r0, 8006900 <err_tcp+0xe0>
 80068f2:	4b13      	ldr	r3, [pc, #76]	; (8006940 <err_tcp+0x120>)
 80068f4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80068f8:	4916      	ldr	r1, [pc, #88]	; (8006954 <err_tcp+0x134>)
 80068fa:	4813      	ldr	r0, [pc, #76]	; (8006948 <err_tcp+0x128>)
 80068fc:	f008 faea 	bl	800eed4 <iprintf>
      conn->current_msg = NULL;
 8006900:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8006902:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8006904:	61e3      	str	r3, [r4, #28]
}
 8006906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800690a:	f007 bd9a 	b.w	800e442 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800690e:	b13d      	cbz	r5, 8006920 <err_tcp+0x100>
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <err_tcp+0x120>)
 8006912:	227d      	movs	r2, #125	; 0x7d
 8006914:	4910      	ldr	r1, [pc, #64]	; (8006958 <err_tcp+0x138>)
 8006916:	2600      	movs	r6, #0
 8006918:	480b      	ldr	r0, [pc, #44]	; (8006948 <err_tcp+0x128>)
 800691a:	f008 fadb 	bl	800eed4 <iprintf>
 800691e:	e7b3      	b.n	8006888 <err_tcp+0x68>
      return NULL;
 8006920:	462e      	mov	r6, r5
 8006922:	e7b1      	b.n	8006888 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006924:	69e3      	ldr	r3, [r4, #28]
 8006926:	b143      	cbz	r3, 800693a <err_tcp+0x11a>
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <err_tcp+0x120>)
 800692a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800692e:	490b      	ldr	r1, [pc, #44]	; (800695c <err_tcp+0x13c>)
 8006930:	4805      	ldr	r0, [pc, #20]	; (8006948 <err_tcp+0x128>)
}
 8006932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006936:	f008 bacd 	b.w	800eed4 <iprintf>
}
 800693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800693e:	bf00      	nop
 8006940:	0801acba 	.word	0x0801acba
 8006944:	0801adf3 	.word	0x0801adf3
 8006948:	0801a5dc 	.word	0x0801a5dc
 800694c:	0801174c 	.word	0x0801174c
 8006950:	0801ae1d 	.word	0x0801ae1d
 8006954:	0801afde 	.word	0x0801afde
 8006958:	0801afce 	.word	0x0801afce
 800695c:	0801aff7 	.word	0x0801aff7

08006960 <lwip_netconn_is_err_msg>:
{
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8006964:	460c      	mov	r4, r1
 8006966:	b929      	cbnz	r1, 8006974 <lwip_netconn_is_err_msg+0x14>
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <lwip_netconn_is_err_msg+0x40>)
 800696a:	2285      	movs	r2, #133	; 0x85
 800696c:	490d      	ldr	r1, [pc, #52]	; (80069a4 <lwip_netconn_is_err_msg+0x44>)
 800696e:	480e      	ldr	r0, [pc, #56]	; (80069a8 <lwip_netconn_is_err_msg+0x48>)
 8006970:	f008 fab0 	bl	800eed4 <iprintf>
  if (msg == &netconn_aborted) {
 8006974:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <lwip_netconn_is_err_msg+0x4c>)
 8006976:	f103 0210 	add.w	r2, r3, #16
 800697a:	4295      	cmp	r5, r2
 800697c:	d103      	bne.n	8006986 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 800697e:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8006980:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8006982:	7023      	strb	r3, [r4, #0]
}
 8006984:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8006986:	f103 0211 	add.w	r2, r3, #17
 800698a:	4295      	cmp	r5, r2
 800698c:	d101      	bne.n	8006992 <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 800698e:	23f2      	movs	r3, #242	; 0xf2
 8006990:	e7f6      	b.n	8006980 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8006992:	429d      	cmp	r5, r3
 8006994:	d101      	bne.n	800699a <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8006996:	23f1      	movs	r3, #241	; 0xf1
 8006998:	e7f2      	b.n	8006980 <lwip_netconn_is_err_msg+0x20>
  return 0;
 800699a:	2000      	movs	r0, #0
 800699c:	e7f2      	b.n	8006984 <lwip_netconn_is_err_msg+0x24>
 800699e:	bf00      	nop
 80069a0:	0801acba 	.word	0x0801acba
 80069a4:	0801b011 	.word	0x0801b011
 80069a8:	0801a5dc 	.word	0x0801a5dc
 80069ac:	0801174c 	.word	0x0801174c

080069b0 <lwip_netconn_do_newconn>:
{
 80069b0:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 80069b2:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 80069b4:	6805      	ldr	r5, [r0, #0]
{
 80069b6:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80069b8:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80069ba:	6868      	ldr	r0, [r5, #4]
 80069bc:	bb28      	cbnz	r0, 8006a0a <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80069be:	782b      	ldrb	r3, [r5, #0]
 80069c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d014      	beq.n	80069f2 <lwip_netconn_do_newconn+0x42>
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d11c      	bne.n	8006a06 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80069cc:	f007 fc08 	bl	800e1e0 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 80069d0:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80069d2:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 80069d4:	6850      	ldr	r0, [r2, #4]
 80069d6:	b150      	cbz	r0, 80069ee <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80069d8:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80069da:	490c      	ldr	r1, [pc, #48]	; (8006a0c <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80069dc:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80069de:	bf04      	itt	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80069e4:	f007 fbb6 	bl	800e154 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b96b      	cbnz	r3, 8006a0a <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 80069ee:	23ff      	movs	r3, #255	; 0xff
 80069f0:	e00a      	b.n	8006a08 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80069f2:	f004 feaf 	bl	800b754 <tcp_new_ip_type>
 80069f6:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	6843      	ldr	r3, [r0, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f6      	beq.n	80069ee <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8006a00:	f7ff fbf0 	bl	80061e4 <setup_tcp>
 8006a04:	e7f0      	b.n	80069e8 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8006a06:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8006a08:	7123      	strb	r3, [r4, #4]
}
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	08006129 	.word	0x08006129

08006a10 <netconn_alloc>:
{
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006a14:	2007      	movs	r0, #7
{
 8006a16:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006a18:	f003 fa14 	bl	8009e44 <memp_malloc>
  if (conn == NULL) {
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	b388      	cbz	r0, 8006a84 <netconn_alloc+0x74>
  conn->type = t;
 8006a20:	7005      	strb	r5, [r0, #0]
 8006a22:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8006a26:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8006a28:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8006a2a:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8006a2c:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8006a2e:	d00e      	beq.n	8006a4e <netconn_alloc+0x3e>
 8006a30:	2d20      	cmp	r5, #32
 8006a32:	d00c      	beq.n	8006a4e <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006a34:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <netconn_alloc+0x78>)
 8006a36:	f240 22e5 	movw	r2, #741	; 0x2e5
 8006a3a:	4914      	ldr	r1, [pc, #80]	; (8006a8c <netconn_alloc+0x7c>)
 8006a3c:	4814      	ldr	r0, [pc, #80]	; (8006a90 <netconn_alloc+0x80>)
 8006a3e:	f008 fa49 	bl	800eed4 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8006a42:	4621      	mov	r1, r4
 8006a44:	2007      	movs	r0, #7
  return NULL;
 8006a46:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8006a48:	f003 fa18 	bl	8009e7c <memp_free>
  return NULL;
 8006a4c:	e01a      	b.n	8006a84 <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006a4e:	f104 0710 	add.w	r7, r4, #16
 8006a52:	2106      	movs	r1, #6
 8006a54:	4638      	mov	r0, r7
 8006a56:	f007 fc63 	bl	800e320 <sys_mbox_new>
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d1f0      	bne.n	8006a42 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006a60:	f104 000c 	add.w	r0, r4, #12
 8006a64:	f007 fcbb 	bl	800e3de <sys_sem_new>
 8006a68:	4605      	mov	r5, r0
 8006a6a:	b118      	cbz	r0, 8006a74 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f007 fc67 	bl	800e340 <sys_mbox_free>
    goto free_and_return;
 8006a72:	e7e6      	b.n	8006a42 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006a74:	f104 0014 	add.w	r0, r4, #20
 8006a78:	f007 fcae 	bl	800e3d8 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8006a7c:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 8006a7e:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8006a80:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 8006a84:	4620      	mov	r0, r4
 8006a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a88:	0801acba 	.word	0x0801acba
 8006a8c:	0801b01d 	.word	0x0801b01d
 8006a90:	0801a5dc 	.word	0x0801a5dc

08006a94 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006a94:	6843      	ldr	r3, [r0, #4]
{
 8006a96:	b513      	push	{r0, r1, r4, lr}
 8006a98:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006a9a:	b133      	cbz	r3, 8006aaa <netconn_free+0x16>
 8006a9c:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <netconn_free+0x64>)
 8006a9e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006aa2:	4916      	ldr	r1, [pc, #88]	; (8006afc <netconn_free+0x68>)
 8006aa4:	4816      	ldr	r0, [pc, #88]	; (8006b00 <netconn_free+0x6c>)
 8006aa6:	f008 fa15 	bl	800eed4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006aaa:	f104 0010 	add.w	r0, r4, #16
 8006aae:	f007 fc8e 	bl	800e3ce <sys_mbox_valid>
 8006ab2:	b130      	cbz	r0, 8006ac2 <netconn_free+0x2e>
 8006ab4:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <netconn_free+0x64>)
 8006ab6:	f240 3223 	movw	r2, #803	; 0x323
 8006aba:	4912      	ldr	r1, [pc, #72]	; (8006b04 <netconn_free+0x70>)
 8006abc:	4810      	ldr	r0, [pc, #64]	; (8006b00 <netconn_free+0x6c>)
 8006abe:	f008 fa09 	bl	800eed4 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006ac2:	f104 0014 	add.w	r0, r4, #20
 8006ac6:	f007 fc82 	bl	800e3ce <sys_mbox_valid>
 8006aca:	b130      	cbz	r0, 8006ada <netconn_free+0x46>
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <netconn_free+0x64>)
 8006ace:	f240 3226 	movw	r2, #806	; 0x326
 8006ad2:	490d      	ldr	r1, [pc, #52]	; (8006b08 <netconn_free+0x74>)
 8006ad4:	480a      	ldr	r0, [pc, #40]	; (8006b00 <netconn_free+0x6c>)
 8006ad6:	f008 f9fd 	bl	800eed4 <iprintf>
  sys_sem_free(&conn->op_completed);
 8006ada:	f104 000c 	add.w	r0, r4, #12
 8006ade:	9001      	str	r0, [sp, #4]
 8006ae0:	f007 fcb2 	bl	800e448 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006ae4:	9801      	ldr	r0, [sp, #4]
 8006ae6:	f007 fcb7 	bl	800e458 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8006aea:	4621      	mov	r1, r4
 8006aec:	2007      	movs	r0, #7
}
 8006aee:	b002      	add	sp, #8
 8006af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8006af4:	f003 b9c2 	b.w	8009e7c <memp_free>
 8006af8:	0801acba 	.word	0x0801acba
 8006afc:	0801b043 	.word	0x0801b043
 8006b00:	0801a5dc 	.word	0x0801a5dc
 8006b04:	0801b071 	.word	0x0801b071
 8006b08:	0801b0ab 	.word	0x0801b0ab

08006b0c <netconn_drain>:
{
 8006b0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006b0e:	f100 0510 	add.w	r5, r0, #16
{
 8006b12:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006b14:	4628      	mov	r0, r5
 8006b16:	f007 fc5a 	bl	800e3ce <sys_mbox_valid>
 8006b1a:	b158      	cbz	r0, 8006b34 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006b1c:	a901      	add	r1, sp, #4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f007 fc44 	bl	800e3ac <sys_arch_mbox_tryfetch>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d118      	bne.n	8006b5a <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f007 fc09 	bl	800e340 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f007 fc52 	bl	800e3d8 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006b34:	3414      	adds	r4, #20
 8006b36:	4620      	mov	r0, r4
 8006b38:	f007 fc49 	bl	800e3ce <sys_mbox_valid>
 8006b3c:	b158      	cbz	r0, 8006b56 <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006b3e:	a901      	add	r1, sp, #4
 8006b40:	4620      	mov	r0, r4
 8006b42:	f007 fc33 	bl	800e3ac <sys_arch_mbox_tryfetch>
 8006b46:	3001      	adds	r0, #1
 8006b48:	d11a      	bne.n	8006b80 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f007 fbf8 	bl	800e340 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8006b50:	4620      	mov	r0, r4
 8006b52:	f007 fc41 	bl	800e3d8 <sys_mbox_set_invalid>
}
 8006b56:	b002      	add	sp, #8
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006b5a:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006b5c:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d109      	bne.n	8006b7a <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006b66:	f10d 0103 	add.w	r1, sp, #3
 8006b6a:	f7ff fef9 	bl	8006960 <lwip_netconn_is_err_msg>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1d4      	bne.n	8006b1c <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8006b72:	9801      	ldr	r0, [sp, #4]
 8006b74:	f003 fb9c 	bl	800a2b0 <pbuf_free>
 8006b78:	e7d0      	b.n	8006b1c <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 8006b7a:	f000 fa6d 	bl	8007058 <netbuf_delete>
 8006b7e:	e7cd      	b.n	8006b1c <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006b80:	f10d 0103 	add.w	r1, sp, #3
 8006b84:	9801      	ldr	r0, [sp, #4]
 8006b86:	f7ff feeb 	bl	8006960 <lwip_netconn_is_err_msg>
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d1d6      	bne.n	8006b3e <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8006b90:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff ffba 	bl	8006b0c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8006b98:	6868      	ldr	r0, [r5, #4]
 8006b9a:	b110      	cbz	r0, 8006ba2 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8006b9c:	f004 fcf6 	bl	800b58c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8006ba0:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f7ff ff76 	bl	8006a94 <netconn_free>
 8006ba8:	e7c9      	b.n	8006b3e <netconn_drain+0x32>
	...

08006bac <accept_function>:
{
 8006bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bae:	460f      	mov	r7, r1
 8006bb0:	4616      	mov	r6, r2
  if (conn == NULL) {
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	b920      	cbnz	r0, 8006bc0 <accept_function+0x14>
    return ERR_VAL;
 8006bb6:	f06f 0405 	mvn.w	r4, #5
}
 8006bba:	4620      	mov	r0, r4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8006bc0:	f100 0414 	add.w	r4, r0, #20
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f007 fc02 	bl	800e3ce <sys_mbox_valid>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0f3      	beq.n	8006bb6 <accept_function+0xa>
  if (newpcb == NULL) {
 8006bce:	b96f      	cbnz	r7, 8006bec <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006bd0:	492f      	ldr	r1, [pc, #188]	; (8006c90 <accept_function+0xe4>)
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f007 fbbe 	bl	800e354 <sys_mbox_trypost>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d1eb      	bne.n	8006bb6 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006bde:	6a2b      	ldr	r3, [r5, #32]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0e8      	beq.n	8006bb6 <accept_function+0xa>
 8006be4:	4601      	mov	r1, r0
 8006be6:	4628      	mov	r0, r5
 8006be8:	4798      	blx	r3
 8006bea:	e7e4      	b.n	8006bb6 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8006bec:	b136      	cbz	r6, 8006bfc <accept_function+0x50>
 8006bee:	4b29      	ldr	r3, [pc, #164]	; (8006c94 <accept_function+0xe8>)
 8006bf0:	f240 222a 	movw	r2, #554	; 0x22a
 8006bf4:	4928      	ldr	r1, [pc, #160]	; (8006c98 <accept_function+0xec>)
 8006bf6:	4829      	ldr	r0, [pc, #164]	; (8006c9c <accept_function+0xf0>)
 8006bf8:	f008 f96c 	bl	800eed4 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8006bfc:	6a29      	ldr	r1, [r5, #32]
 8006bfe:	7828      	ldrb	r0, [r5, #0]
 8006c00:	f7ff ff06 	bl	8006a10 <netconn_alloc>
  if (newconn == NULL) {
 8006c04:	4606      	mov	r6, r0
 8006c06:	b968      	cbnz	r0, 8006c24 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8006c08:	4921      	ldr	r1, [pc, #132]	; (8006c90 <accept_function+0xe4>)
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f007 fba2 	bl	800e354 <sys_mbox_trypost>
 8006c10:	4602      	mov	r2, r0
 8006c12:	b920      	cbnz	r0, 8006c1e <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006c14:	6a2b      	ldr	r3, [r5, #32]
 8006c16:	b113      	cbz	r3, 8006c1e <accept_function+0x72>
 8006c18:	4601      	mov	r1, r0
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	4798      	blx	r3
    return ERR_MEM;
 8006c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006c22:	e7ca      	b.n	8006bba <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8006c24:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8006c26:	f7ff fadd 	bl	80061e4 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	f007 fb91 	bl	800e354 <sys_mbox_trypost>
 8006c32:	4604      	mov	r4, r0
 8006c34:	b318      	cbz	r0, 8006c7e <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8006c36:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8006c38:	2100      	movs	r1, #0
 8006c3a:	9001      	str	r0, [sp, #4]
 8006c3c:	f003 ff82 	bl	800ab44 <tcp_arg>
    tcp_recv(pcb, NULL);
 8006c40:	9801      	ldr	r0, [sp, #4]
 8006c42:	2100      	movs	r1, #0
 8006c44:	f003 ff82 	bl	800ab4c <tcp_recv>
    tcp_sent(pcb, NULL);
 8006c48:	9801      	ldr	r0, [sp, #4]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	f003 ff96 	bl	800ab7c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8006c50:	2200      	movs	r2, #0
 8006c52:	9801      	ldr	r0, [sp, #4]
 8006c54:	4611      	mov	r1, r2
 8006c56:	f003 ffc5 	bl	800abe4 <tcp_poll>
    tcp_err(pcb, NULL);
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	9801      	ldr	r0, [sp, #4]
 8006c5e:	f003 ffa3 	bl	800aba8 <tcp_err>
    newconn->pcb.tcp = NULL;
 8006c62:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8006c64:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8006c68:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8006c6a:	9001      	str	r0, [sp, #4]
 8006c6c:	f007 fb68 	bl	800e340 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8006c70:	9801      	ldr	r0, [sp, #4]
 8006c72:	f007 fbb1 	bl	800e3d8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ff0c 	bl	8006a94 <netconn_free>
    return ERR_MEM;
 8006c7c:	e7cf      	b.n	8006c1e <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006c7e:	6a2b      	ldr	r3, [r5, #32]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d09a      	beq.n	8006bba <accept_function+0xe>
 8006c84:	4602      	mov	r2, r0
 8006c86:	4601      	mov	r1, r0
 8006c88:	4628      	mov	r0, r5
 8006c8a:	4798      	blx	r3
 8006c8c:	e795      	b.n	8006bba <accept_function+0xe>
 8006c8e:	bf00      	nop
 8006c90:	0801175c 	.word	0x0801175c
 8006c94:	0801acba 	.word	0x0801acba
 8006c98:	0801b0e7 	.word	0x0801b0e7
 8006c9c:	0801a5dc 	.word	0x0801a5dc

08006ca0 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8006ca0:	6803      	ldr	r3, [r0, #0]
{
 8006ca2:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8006ca4:	785d      	ldrb	r5, [r3, #1]
{
 8006ca6:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8006ca8:	b16d      	cbz	r5, 8006cc6 <lwip_netconn_do_delconn+0x26>
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d006      	beq.n	8006cc2 <lwip_netconn_do_delconn+0x22>
 8006cb4:	4b37      	ldr	r3, [pc, #220]	; (8006d94 <lwip_netconn_do_delconn+0xf4>)
 8006cb6:	f240 425e 	movw	r2, #1118	; 0x45e
 8006cba:	4937      	ldr	r1, [pc, #220]	; (8006d98 <lwip_netconn_do_delconn+0xf8>)
 8006cbc:	4837      	ldr	r0, [pc, #220]	; (8006d9c <lwip_netconn_do_delconn+0xfc>)
 8006cbe:	f008 f909 	bl	800eed4 <iprintf>
  if (((state != NETCONN_NONE) &&
 8006cc2:	2d02      	cmp	r5, #2
 8006cc4:	d121      	bne.n	8006d0a <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 8006cc6:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8006cc8:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8006cca:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8006ccc:	f7ff ff1e 	bl	8006b0c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	6850      	ldr	r0, [r2, #4]
 8006cd4:	b160      	cbz	r0, 8006cf0 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006cd6:	7813      	ldrb	r3, [r2, #0]
 8006cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d022      	beq.n	8006d26 <lwip_netconn_do_delconn+0x86>
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d102      	bne.n	8006cea <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 8006ce4:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 8006ce6:	f007 fa47 	bl	800e178 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	2200      	movs	r2, #0
 8006cee:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006cf0:	6820      	ldr	r0, [r4, #0]
 8006cf2:	6a03      	ldr	r3, [r0, #32]
 8006cf4:	b113      	cbz	r3, 8006cfc <lwip_netconn_do_delconn+0x5c>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	6a03      	ldr	r3, [r0, #32]
 8006d00:	b15b      	cbz	r3, 8006d1a <lwip_netconn_do_delconn+0x7a>
 8006d02:	2200      	movs	r2, #0
 8006d04:	2102      	movs	r1, #2
 8006d06:	4798      	blx	r3
 8006d08:	e007      	b.n	8006d1a <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8006d0a:	2d03      	cmp	r5, #3
 8006d0c:	d103      	bne.n	8006d16 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	7e1b      	ldrb	r3, [r3, #24]
 8006d12:	075b      	lsls	r3, r3, #29
 8006d14:	d4d7      	bmi.n	8006cc6 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8006d16:	23fb      	movs	r3, #251	; 0xfb
 8006d18:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006d1a:	6820      	ldr	r0, [r4, #0]
}
 8006d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006d20:	300c      	adds	r0, #12
 8006d22:	f007 bb94 	b.w	800e44e <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006d26:	69d3      	ldr	r3, [r2, #28]
 8006d28:	b133      	cbz	r3, 8006d38 <lwip_netconn_do_delconn+0x98>
 8006d2a:	4b1a      	ldr	r3, [pc, #104]	; (8006d94 <lwip_netconn_do_delconn+0xf4>)
 8006d2c:	f240 4294 	movw	r2, #1172	; 0x494
 8006d30:	491b      	ldr	r1, [pc, #108]	; (8006da0 <lwip_netconn_do_delconn+0x100>)
 8006d32:	481a      	ldr	r0, [pc, #104]	; (8006d9c <lwip_netconn_do_delconn+0xfc>)
 8006d34:	f008 f8ce 	bl	800eed4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006d3c:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8006d3e:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006d40:	2303      	movs	r3, #3
 8006d42:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8006d44:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006d46:	f7ff fb99 	bl	800647c <lwip_netconn_do_close_internal>
 8006d4a:	b308      	cbz	r0, 8006d90 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d006      	beq.n	8006d62 <lwip_netconn_do_delconn+0xc2>
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <lwip_netconn_do_delconn+0xf4>)
 8006d56:	f240 429a 	movw	r2, #1178	; 0x49a
 8006d5a:	4912      	ldr	r1, [pc, #72]	; (8006da4 <lwip_netconn_do_delconn+0x104>)
 8006d5c:	480f      	ldr	r0, [pc, #60]	; (8006d9c <lwip_netconn_do_delconn+0xfc>)
 8006d5e:	f008 f8b9 	bl	800eed4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8006d62:	4811      	ldr	r0, [pc, #68]	; (8006da8 <lwip_netconn_do_delconn+0x108>)
 8006d64:	f007 fb9b 	bl	800e49e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	300c      	adds	r0, #12
 8006d6e:	f007 fb4d 	bl	800e40c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8006d72:	480d      	ldr	r0, [pc, #52]	; (8006da8 <lwip_netconn_do_delconn+0x108>)
 8006d74:	f007 fb8e 	bl	800e494 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	b143      	cbz	r3, 8006d90 <lwip_netconn_do_delconn+0xf0>
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <lwip_netconn_do_delconn+0xf4>)
 8006d80:	f240 429e 	movw	r2, #1182	; 0x49e
 8006d84:	4907      	ldr	r1, [pc, #28]	; (8006da4 <lwip_netconn_do_delconn+0x104>)
 8006d86:	4805      	ldr	r0, [pc, #20]	; (8006d9c <lwip_netconn_do_delconn+0xfc>)
}
 8006d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006d8c:	f008 b8a2 	b.w	800eed4 <iprintf>
}
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
 8006d92:	bf00      	nop
 8006d94:	0801acba 	.word	0x0801acba
 8006d98:	0801b10e 	.word	0x0801b10e
 8006d9c:	0801a5dc 	.word	0x0801a5dc
 8006da0:	0801b122 	.word	0x0801b122
 8006da4:	0801b13d 	.word	0x0801b13d
 8006da8:	2000693c 	.word	0x2000693c

08006dac <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8006dac:	6803      	ldr	r3, [r0, #0]
{
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8006db2:	6858      	ldr	r0, [r3, #4]
 8006db4:	b188      	cbz	r0, 8006dda <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dbc:	2b10      	cmp	r3, #16
 8006dbe:	d007      	beq.n	8006dd0 <lwip_netconn_do_bind+0x24>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d10a      	bne.n	8006dda <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006dc4:	89a2      	ldrh	r2, [r4, #12]
 8006dc6:	68a1      	ldr	r1, [r4, #8]
 8006dc8:	f007 f84a 	bl	800de60 <udp_bind>
  msg->err = err;
 8006dcc:	7120      	strb	r0, [r4, #4]
}
 8006dce:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006dd0:	89a2      	ldrh	r2, [r4, #12]
 8006dd2:	68a1      	ldr	r1, [r4, #8]
 8006dd4:	f003 fd72 	bl	800a8bc <tcp_bind>
        break;
 8006dd8:	e7f8      	b.n	8006dcc <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006dda:	f06f 0005 	mvn.w	r0, #5
 8006dde:	e7f5      	b.n	8006dcc <lwip_netconn_do_bind+0x20>

08006de0 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8006de0:	6803      	ldr	r3, [r0, #0]
{
 8006de2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006de4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8006de6:	6858      	ldr	r0, [r3, #4]
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d04f      	beq.n	8006e8c <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006df2:	2a10      	cmp	r2, #16
 8006df4:	d14c      	bne.n	8006e90 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d143      	bne.n	8006e84 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8006dfc:	7d03      	ldrb	r3, [r0, #20]
 8006dfe:	b11b      	cbz	r3, 8006e08 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8006e00:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 8006e02:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e06:	e031      	b.n	8006e6c <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006e08:	f10d 0207 	add.w	r2, sp, #7
 8006e0c:	21ff      	movs	r1, #255	; 0xff
 8006e0e:	f003 fdab 	bl	800a968 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8006e12:	4605      	mov	r5, r0
 8006e14:	b350      	cbz	r0, 8006e6c <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	3010      	adds	r0, #16
 8006e1a:	f007 fad8 	bl	800e3ce <sys_mbox_valid>
 8006e1e:	b138      	cbz	r0, 8006e30 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8006e20:	6820      	ldr	r0, [r4, #0]
 8006e22:	3010      	adds	r0, #16
 8006e24:	f007 fa8c 	bl	800e340 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	3010      	adds	r0, #16
 8006e2c:	f007 fad4 	bl	800e3d8 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006e30:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8006e32:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006e34:	3014      	adds	r0, #20
            err = ERR_OK;
 8006e36:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006e3a:	f007 fac8 	bl	800e3ce <sys_mbox_valid>
 8006e3e:	b930      	cbnz	r0, 8006e4e <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	2106      	movs	r1, #6
 8006e44:	3014      	adds	r0, #20
 8006e46:	f007 fa6b 	bl	800e320 <sys_mbox_new>
 8006e4a:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8006e4e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8006e52:	b983      	cbnz	r3, 8006e76 <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8006e54:	6821      	ldr	r1, [r4, #0]
 8006e56:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006e58:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8006e5a:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8006e5c:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006e5e:	f003 fe71 	bl	800ab44 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	490b      	ldr	r1, [pc, #44]	; (8006e94 <lwip_netconn_do_listen+0xb4>)
 8006e66:	6858      	ldr	r0, [r3, #4]
 8006e68:	f003 feb6 	bl	800abd8 <tcp_accept>
  msg->err = err;
 8006e6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e70:	7123      	strb	r3, [r4, #4]
}
 8006e72:	b003      	add	sp, #12
 8006e74:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8006e76:	4628      	mov	r0, r5
 8006e78:	f004 fa04 	bl	800b284 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	e7f3      	b.n	8006e6c <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d101      	bne.n	8006e8c <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e7ba      	b.n	8006e02 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8006e8c:	23f5      	movs	r3, #245	; 0xf5
 8006e8e:	e7b8      	b.n	8006e02 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8006e90:	23f0      	movs	r3, #240	; 0xf0
 8006e92:	e7b6      	b.n	8006e02 <lwip_netconn_do_listen+0x22>
 8006e94:	08006bad 	.word	0x08006bad

08006e98 <lwip_netconn_do_recv>:
{
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8006e9a:	2300      	movs	r3, #0
{
 8006e9c:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006e9e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006ea0:	6803      	ldr	r3, [r0, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	b192      	cbz	r2, 8006ecc <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d10d      	bne.n	8006ecc <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8006eb0:	6885      	ldr	r5, [r0, #8]
 8006eb2:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8006eb6:	42bd      	cmp	r5, r7
 8006eb8:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	bf28      	it	cs
 8006ebe:	463e      	movcs	r6, r7
 8006ec0:	6858      	ldr	r0, [r3, #4]
 8006ec2:	b2b1      	uxth	r1, r6
 8006ec4:	f003 fdea 	bl	800aa9c <tcp_recved>
      } while (remaining != 0);
 8006ec8:	1bad      	subs	r5, r5, r6
 8006eca:	d1f4      	bne.n	8006eb6 <lwip_netconn_do_recv+0x1e>
}
 8006ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ed0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8006ed4:	6800      	ldr	r0, [r0, #0]
 8006ed6:	f7fe ffac 	bl	8005e32 <netconn_err>
  if (err == ERR_OK) {
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d14a      	bne.n	8006f74 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006ee6:	2a10      	cmp	r2, #16
 8006ee8:	d142      	bne.n	8006f70 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8006eea:	785a      	ldrb	r2, [r3, #1]
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d143      	bne.n	8006f78 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	d043      	beq.n	8006f7e <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	b133      	cbz	r3, 8006f0c <lwip_netconn_do_write+0x3c>
 8006efe:	4b21      	ldr	r3, [pc, #132]	; (8006f84 <lwip_netconn_do_write+0xb4>)
 8006f00:	f240 7223 	movw	r2, #1827	; 0x723
 8006f04:	4920      	ldr	r1, [pc, #128]	; (8006f88 <lwip_netconn_do_write+0xb8>)
 8006f06:	4821      	ldr	r0, [pc, #132]	; (8006f8c <lwip_netconn_do_write+0xbc>)
 8006f08:	f007 ffe4 	bl	800eed4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8006f0c:	6963      	ldr	r3, [r4, #20]
 8006f0e:	b933      	cbnz	r3, 8006f1e <lwip_netconn_do_write+0x4e>
 8006f10:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <lwip_netconn_do_write+0xb4>)
 8006f12:	f240 7224 	movw	r2, #1828	; 0x724
 8006f16:	491e      	ldr	r1, [pc, #120]	; (8006f90 <lwip_netconn_do_write+0xc0>)
 8006f18:	481c      	ldr	r0, [pc, #112]	; (8006f8c <lwip_netconn_do_write+0xbc>)
 8006f1a:	f007 ffdb 	bl	800eed4 <iprintf>
        msg->conn->current_msg = msg;
 8006f1e:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8006f20:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8006f22:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8006f24:	f7ff f980 	bl	8006228 <lwip_netconn_do_writemore>
 8006f28:	b328      	cbz	r0, 8006f76 <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d006      	beq.n	8006f40 <lwip_netconn_do_write+0x70>
 8006f32:	4b14      	ldr	r3, [pc, #80]	; (8006f84 <lwip_netconn_do_write+0xb4>)
 8006f34:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8006f38:	4916      	ldr	r1, [pc, #88]	; (8006f94 <lwip_netconn_do_write+0xc4>)
 8006f3a:	4814      	ldr	r0, [pc, #80]	; (8006f8c <lwip_netconn_do_write+0xbc>)
 8006f3c:	f007 ffca 	bl	800eed4 <iprintf>
          UNLOCK_TCPIP_CORE();
 8006f40:	4815      	ldr	r0, [pc, #84]	; (8006f98 <lwip_netconn_do_write+0xc8>)
 8006f42:	f007 faac 	bl	800e49e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006f46:	6820      	ldr	r0, [r4, #0]
 8006f48:	2100      	movs	r1, #0
 8006f4a:	300c      	adds	r0, #12
 8006f4c:	f007 fa5e 	bl	800e40c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8006f50:	4811      	ldr	r0, [pc, #68]	; (8006f98 <lwip_netconn_do_write+0xc8>)
 8006f52:	f007 fa9f 	bl	800e494 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d10b      	bne.n	8006f76 <lwip_netconn_do_write+0xa6>
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <lwip_netconn_do_write+0xb4>)
 8006f60:	f240 722c 	movw	r2, #1836	; 0x72c
 8006f64:	490b      	ldr	r1, [pc, #44]	; (8006f94 <lwip_netconn_do_write+0xc4>)
 8006f66:	4809      	ldr	r0, [pc, #36]	; (8006f8c <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8006f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8006f6c:	f007 bfb2 	b.w	800eed4 <iprintf>
      err = ERR_VAL;
 8006f70:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8006f74:	7120      	strb	r0, [r4, #4]
}
 8006f76:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8006f78:	f06f 0004 	mvn.w	r0, #4
 8006f7c:	e7fa      	b.n	8006f74 <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 8006f7e:	f06f 000a 	mvn.w	r0, #10
 8006f82:	e7f7      	b.n	8006f74 <lwip_netconn_do_write+0xa4>
 8006f84:	0801acba 	.word	0x0801acba
 8006f88:	0801b122 	.word	0x0801b122
 8006f8c:	0801a5dc 	.word	0x0801a5dc
 8006f90:	0801b159 	.word	0x0801b159
 8006f94:	0801b13d 	.word	0x0801b13d
 8006f98:	2000693c 	.word	0x2000693c

08006f9c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006fa0:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8006fa2:	6843      	ldr	r3, [r0, #4]
 8006fa4:	b163      	cbz	r3, 8006fc0 <lwip_netconn_do_close+0x24>
 8006fa6:	7803      	ldrb	r3, [r0, #0]
 8006fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d107      	bne.n	8006fc0 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006fb0:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 8006fb2:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8006fb4:	2a03      	cmp	r2, #3
 8006fb6:	d001      	beq.n	8006fbc <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d001      	beq.n	8006fc0 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d102      	bne.n	8006fc6 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8006fc0:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8006fc2:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8006fc4:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8006fca:	23fb      	movs	r3, #251	; 0xfb
 8006fcc:	e7f9      	b.n	8006fc2 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8006fce:	07d3      	lsls	r3, r2, #31
 8006fd0:	d501      	bpl.n	8006fd6 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 8006fd2:	f7ff fd9b 	bl	8006b0c <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	b133      	cbz	r3, 8006fea <lwip_netconn_do_close+0x4e>
 8006fdc:	4b19      	ldr	r3, [pc, #100]	; (8007044 <lwip_netconn_do_close+0xa8>)
 8006fde:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8006fe2:	4919      	ldr	r1, [pc, #100]	; (8007048 <lwip_netconn_do_close+0xac>)
 8006fe4:	4819      	ldr	r0, [pc, #100]	; (800704c <lwip_netconn_do_close+0xb0>)
 8006fe6:	f007 ff75 	bl	800eed4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8006fea:	6820      	ldr	r0, [r4, #0]
 8006fec:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006fee:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8006ff0:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8006ff2:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006ff4:	f7ff fa42 	bl	800647c <lwip_netconn_do_close_internal>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d0e3      	beq.n	8006fc4 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d006      	beq.n	8007012 <lwip_netconn_do_close+0x76>
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <lwip_netconn_do_close+0xa8>)
 8007006:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800700a:	4911      	ldr	r1, [pc, #68]	; (8007050 <lwip_netconn_do_close+0xb4>)
 800700c:	480f      	ldr	r0, [pc, #60]	; (800704c <lwip_netconn_do_close+0xb0>)
 800700e:	f007 ff61 	bl	800eed4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8007012:	4810      	ldr	r0, [pc, #64]	; (8007054 <lwip_netconn_do_close+0xb8>)
 8007014:	f007 fa43 	bl	800e49e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	2100      	movs	r1, #0
 800701c:	300c      	adds	r0, #12
 800701e:	f007 f9f5 	bl	800e40c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007022:	480c      	ldr	r0, [pc, #48]	; (8007054 <lwip_netconn_do_close+0xb8>)
 8007024:	f007 fa36 	bl	800e494 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0c9      	beq.n	8006fc4 <lwip_netconn_do_close+0x28>
 8007030:	4b04      	ldr	r3, [pc, #16]	; (8007044 <lwip_netconn_do_close+0xa8>)
 8007032:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007036:	4906      	ldr	r1, [pc, #24]	; (8007050 <lwip_netconn_do_close+0xb4>)
 8007038:	4804      	ldr	r0, [pc, #16]	; (800704c <lwip_netconn_do_close+0xb0>)
}
 800703a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800703e:	f007 bf49 	b.w	800eed4 <iprintf>
 8007042:	bf00      	nop
 8007044:	0801acba 	.word	0x0801acba
 8007048:	0801b122 	.word	0x0801b122
 800704c:	0801a5dc 	.word	0x0801a5dc
 8007050:	0801b13d 	.word	0x0801b13d
 8007054:	2000693c 	.word	0x2000693c

08007058 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007058:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800705a:	4604      	mov	r4, r0
 800705c:	b160      	cbz	r0, 8007078 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	b120      	cbz	r0, 800706c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8007062:	f003 f925 	bl	800a2b0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800706c:	4621      	mov	r1, r4
 800706e:	2006      	movs	r0, #6
  }
}
 8007070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8007074:	f002 bf02 	b.w	8009e7c <memp_free>
}
 8007078:	bd10      	pop	{r4, pc}
	...

0800707c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800707c:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800707e:	b940      	cbnz	r0, 8007092 <netbuf_data+0x16>
 8007080:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <netbuf_data+0x44>)
 8007082:	22c6      	movs	r2, #198	; 0xc6
 8007084:	490f      	ldr	r1, [pc, #60]	; (80070c4 <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8007086:	4810      	ldr	r0, [pc, #64]	; (80070c8 <netbuf_data+0x4c>)
 8007088:	f007 ff24 	bl	800eed4 <iprintf>
 800708c:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8007090:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007092:	b919      	cbnz	r1, 800709c <netbuf_data+0x20>
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <netbuf_data+0x44>)
 8007096:	22c7      	movs	r2, #199	; 0xc7
 8007098:	490c      	ldr	r1, [pc, #48]	; (80070cc <netbuf_data+0x50>)
 800709a:	e7f4      	b.n	8007086 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800709c:	b91a      	cbnz	r2, 80070a6 <netbuf_data+0x2a>
 800709e:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <netbuf_data+0x44>)
 80070a0:	22c8      	movs	r2, #200	; 0xc8
 80070a2:	490b      	ldr	r1, [pc, #44]	; (80070d0 <netbuf_data+0x54>)
 80070a4:	e7ef      	b.n	8007086 <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 80070a6:	6843      	ldr	r3, [r0, #4]
 80070a8:	b133      	cbz	r3, 80070b8 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 80070ae:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 80070b0:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 80070b2:	895b      	ldrh	r3, [r3, #10]
 80070b4:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80070b6:	e7eb      	b.n	8007090 <netbuf_data+0x14>
    return ERR_BUF;
 80070b8:	f06f 0001 	mvn.w	r0, #1
 80070bc:	e7e8      	b.n	8007090 <netbuf_data+0x14>
 80070be:	bf00      	nop
 80070c0:	0801b182 	.word	0x0801b182
 80070c4:	0801b287 	.word	0x0801b287
 80070c8:	0801a5dc 	.word	0x0801a5dc
 80070cc:	0801b2a0 	.word	0x0801b2a0
 80070d0:	0801b2bd 	.word	0x0801b2bd

080070d4 <tcpip_thread>:
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80070d4:	4c2c      	ldr	r4, [pc, #176]	; (8007188 <tcpip_thread+0xb4>)
{
 80070d6:	b583      	push	{r0, r1, r7, lr}
  LOCK_TCPIP_CORE();
 80070d8:	4620      	mov	r0, r4
 80070da:	f007 f9db 	bl	800e494 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80070de:	6863      	ldr	r3, [r4, #4]
 80070e0:	b10b      	cbz	r3, 80070e6 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 80070e2:	68a0      	ldr	r0, [r4, #8]
 80070e4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80070e6:	4d28      	ldr	r5, [pc, #160]	; (8007188 <tcpip_thread+0xb4>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80070e8:	4e28      	ldr	r6, [pc, #160]	; (800718c <tcpip_thread+0xb8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80070ea:	f105 070c 	add.w	r7, r5, #12
  sleeptime = sys_timeouts_sleeptime();
 80070ee:	f006 fdc1 	bl	800dc74 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80070f2:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80070f4:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80070f6:	d113      	bne.n	8007120 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 80070f8:	4628      	mov	r0, r5
 80070fa:	f007 f9d0 	bl	800e49e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80070fe:	2200      	movs	r2, #0
 8007100:	a901      	add	r1, sp, #4
 8007102:	4638      	mov	r0, r7
 8007104:	f007 f930 	bl	800e368 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007108:	4628      	mov	r0, r5
 800710a:	f007 f9c3 	bl	800e494 <sys_mutex_lock>
    if (msg == NULL) {
 800710e:	9c01      	ldr	r4, [sp, #4]
 8007110:	b9cc      	cbnz	r4, 8007146 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007112:	4633      	mov	r3, r6
 8007114:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007116:	491e      	ldr	r1, [pc, #120]	; (8007190 <tcpip_thread+0xbc>)
 8007118:	481e      	ldr	r0, [pc, #120]	; (8007194 <tcpip_thread+0xc0>)
 800711a:	f007 fedb 	bl	800eed4 <iprintf>
      break;
 800711e:	e7e6      	b.n	80070ee <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8007120:	b910      	cbnz	r0, 8007128 <tcpip_thread+0x54>
    sys_check_timeouts();
 8007122:	f006 fd8b 	bl	800dc3c <sys_check_timeouts>
    goto again;
 8007126:	e7e2      	b.n	80070ee <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8007128:	4628      	mov	r0, r5
 800712a:	f007 f9b8 	bl	800e49e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800712e:	4622      	mov	r2, r4
 8007130:	a901      	add	r1, sp, #4
 8007132:	4638      	mov	r0, r7
 8007134:	f007 f918 	bl	800e368 <sys_arch_mbox_fetch>
 8007138:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800713a:	4628      	mov	r0, r5
 800713c:	f007 f9aa 	bl	800e494 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007140:	3401      	adds	r4, #1
 8007142:	d0ee      	beq.n	8007122 <tcpip_thread+0x4e>
 8007144:	e7e3      	b.n	800710e <tcpip_thread+0x3a>
  switch (msg->type) {
 8007146:	7823      	ldrb	r3, [r4, #0]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d00f      	beq.n	800716c <tcpip_thread+0x98>
 800714c:	2b02      	cmp	r3, #2
 800714e:	d013      	beq.n	8007178 <tcpip_thread+0xa4>
 8007150:	b9b3      	cbnz	r3, 8007180 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007152:	6860      	ldr	r0, [r4, #4]
 8007154:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8007158:	4798      	blx	r3
 800715a:	b110      	cbz	r0, 8007162 <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 800715c:	6860      	ldr	r0, [r4, #4]
 800715e:	f003 f8a7 	bl	800a2b0 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007162:	4621      	mov	r1, r4
 8007164:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007166:	f002 fe89 	bl	8009e7c <memp_free>
      break;
 800716a:	e7c0      	b.n	80070ee <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800716c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8007170:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007172:	4621      	mov	r1, r4
 8007174:	2008      	movs	r0, #8
 8007176:	e7f6      	b.n	8007166 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007178:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800717c:	4798      	blx	r3
      break;
 800717e:	e7b6      	b.n	80070ee <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007180:	4633      	mov	r3, r6
 8007182:	22cf      	movs	r2, #207	; 0xcf
 8007184:	e7c7      	b.n	8007116 <tcpip_thread+0x42>
 8007186:	bf00      	nop
 8007188:	2000693c 	.word	0x2000693c
 800718c:	0801b309 	.word	0x0801b309
 8007190:	0801b368 	.word	0x0801b368
 8007194:	0801a5dc 	.word	0x0801a5dc

08007198 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800719c:	4810      	ldr	r0, [pc, #64]	; (80071e0 <tcpip_inpkt+0x48>)
{
 800719e:	460e      	mov	r6, r1
 80071a0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80071a2:	f007 f914 	bl	800e3ce <sys_mbox_valid>
 80071a6:	b928      	cbnz	r0, 80071b4 <tcpip_inpkt+0x1c>
 80071a8:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <tcpip_inpkt+0x4c>)
 80071aa:	22fc      	movs	r2, #252	; 0xfc
 80071ac:	490e      	ldr	r1, [pc, #56]	; (80071e8 <tcpip_inpkt+0x50>)
 80071ae:	480f      	ldr	r0, [pc, #60]	; (80071ec <tcpip_inpkt+0x54>)
 80071b0:	f007 fe90 	bl	800eed4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80071b4:	2009      	movs	r0, #9
 80071b6:	f002 fe45 	bl	8009e44 <memp_malloc>
  if (msg == NULL) {
 80071ba:	4604      	mov	r4, r0
 80071bc:	b168      	cbz	r0, 80071da <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80071be:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80071c0:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80071c2:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80071c4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80071c6:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80071ca:	4805      	ldr	r0, [pc, #20]	; (80071e0 <tcpip_inpkt+0x48>)
 80071cc:	f007 f8c2 	bl	800e354 <sys_mbox_trypost>
 80071d0:	b128      	cbz	r0, 80071de <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80071d2:	4621      	mov	r1, r4
 80071d4:	2009      	movs	r0, #9
 80071d6:	f002 fe51 	bl	8009e7c <memp_free>
    return ERR_MEM;
 80071da:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e0:	20006948 	.word	0x20006948
 80071e4:	0801b309 	.word	0x0801b309
 80071e8:	0801b386 	.word	0x0801b386
 80071ec:	0801a5dc 	.word	0x0801a5dc

080071f0 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80071f0:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80071f4:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80071f8:	bf14      	ite	ne
 80071fa:	4a02      	ldrne	r2, [pc, #8]	; (8007204 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80071fc:	4a02      	ldreq	r2, [pc, #8]	; (8007208 <tcpip_input+0x18>)
 80071fe:	f7ff bfcb 	b.w	8007198 <tcpip_inpkt>
 8007202:	bf00      	nop
 8007204:	0800e211 	.word	0x0800e211
 8007208:	08008d79 	.word	0x08008d79

0800720c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800720c:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800720e:	4e06      	ldr	r6, [pc, #24]	; (8007228 <tcpip_send_msg_wait_sem+0x1c>)
{
 8007210:	460d      	mov	r5, r1
 8007212:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007214:	4630      	mov	r0, r6
 8007216:	f007 f93d 	bl	800e494 <sys_mutex_lock>
  fn(apimsg);
 800721a:	4628      	mov	r0, r5
 800721c:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800721e:	4630      	mov	r0, r6
 8007220:	f007 f93d 	bl	800e49e <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8007224:	2000      	movs	r0, #0
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	2000693c 	.word	0x2000693c

0800722c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800722c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800722e:	4605      	mov	r5, r0
 8007230:	460c      	mov	r4, r1
  lwip_init();
 8007232:	f002 fb3b 	bl	80098ac <lwip_init>

  tcpip_init_done = initfunc;
 8007236:	4812      	ldr	r0, [pc, #72]	; (8007280 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007238:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800723a:	e9c0 5401 	strd	r5, r4, [r0, #4]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800723e:	300c      	adds	r0, #12
 8007240:	f007 f86e 	bl	800e320 <sys_mbox_new>
 8007244:	b130      	cbz	r0, 8007254 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007246:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <tcpip_init+0x58>)
 8007248:	f240 2261 	movw	r2, #609	; 0x261
 800724c:	490e      	ldr	r1, [pc, #56]	; (8007288 <tcpip_init+0x5c>)
 800724e:	480f      	ldr	r0, [pc, #60]	; (800728c <tcpip_init+0x60>)
 8007250:	f007 fe40 	bl	800eed4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007254:	480a      	ldr	r0, [pc, #40]	; (8007280 <tcpip_init+0x54>)
 8007256:	f007 f90f 	bl	800e478 <sys_mutex_new>
 800725a:	b130      	cbz	r0, 800726a <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <tcpip_init+0x58>)
 800725e:	f240 2265 	movw	r2, #613	; 0x265
 8007262:	490b      	ldr	r1, [pc, #44]	; (8007290 <tcpip_init+0x64>)
 8007264:	4809      	ldr	r0, [pc, #36]	; (800728c <tcpip_init+0x60>)
 8007266:	f007 fe35 	bl	800eed4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800726a:	2302      	movs	r3, #2
 800726c:	2200      	movs	r2, #0
 800726e:	4909      	ldr	r1, [pc, #36]	; (8007294 <tcpip_init+0x68>)
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007276:	4808      	ldr	r0, [pc, #32]	; (8007298 <tcpip_init+0x6c>)
 8007278:	f007 f914 	bl	800e4a4 <sys_thread_new>
}
 800727c:	b003      	add	sp, #12
 800727e:	bd30      	pop	{r4, r5, pc}
 8007280:	2000693c 	.word	0x2000693c
 8007284:	0801b309 	.word	0x0801b309
 8007288:	0801b393 	.word	0x0801b393
 800728c:	0801a5dc 	.word	0x0801a5dc
 8007290:	0801b3b6 	.word	0x0801b3b6
 8007294:	080070d5 	.word	0x080070d5
 8007298:	0801b3d7 	.word	0x0801b3d7

0800729c <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800729c:	7943      	ldrb	r3, [r0, #5]
 800729e:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80072a0:	bf1f      	itttt	ne
 80072a2:	2300      	movne	r3, #0
    dhcp->state = new_state;
 80072a4:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 80072a6:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 80072a8:	8103      	strhne	r3, [r0, #8]
  }
}
 80072aa:	4770      	bx	lr

080072ac <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80072ae:	1c87      	adds	r7, r0, #2
{
 80072b0:	4604      	mov	r4, r0
 80072b2:	460d      	mov	r5, r1
 80072b4:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80072b6:	2f44      	cmp	r7, #68	; 0x44
 80072b8:	d906      	bls.n	80072c8 <dhcp_option_short+0x1c>
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <dhcp_option_short+0x2c>)
 80072bc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80072c0:	4906      	ldr	r1, [pc, #24]	; (80072dc <dhcp_option_short+0x30>)
 80072c2:	4807      	ldr	r0, [pc, #28]	; (80072e0 <dhcp_option_short+0x34>)
 80072c4:	f007 fe06 	bl	800eed4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80072c8:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 80072ca:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80072cc:	552b      	strb	r3, [r5, r4]
 80072ce:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80072d0:	b2a4      	uxth	r4, r4
 80072d2:	552e      	strb	r6, [r5, r4]
}
 80072d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d6:	bf00      	nop
 80072d8:	0801b3de 	.word	0x0801b3de
 80072dc:	0801b442 	.word	0x0801b442
 80072e0:	0801a5dc 	.word	0x0801a5dc

080072e4 <dhcp_option>:
{
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80072e8:	3302      	adds	r3, #2
{
 80072ea:	4604      	mov	r4, r0
 80072ec:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80072ee:	fa50 f383 	uxtab	r3, r0, r3
{
 80072f2:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80072f4:	2b44      	cmp	r3, #68	; 0x44
 80072f6:	d906      	bls.n	8007306 <dhcp_option+0x22>
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <dhcp_option+0x30>)
 80072fa:	f240 529a 	movw	r2, #1434	; 0x59a
 80072fe:	4906      	ldr	r1, [pc, #24]	; (8007318 <dhcp_option+0x34>)
 8007300:	4806      	ldr	r0, [pc, #24]	; (800731c <dhcp_option+0x38>)
 8007302:	f007 fde7 	bl	800eed4 <iprintf>
  options[options_out_len++] = option_type;
 8007306:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8007308:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 800730a:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800730c:	b29b      	uxth	r3, r3
}
 800730e:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8007310:	54ee      	strb	r6, [r5, r3]
}
 8007312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007314:	0801b3de 	.word	0x0801b3de
 8007318:	0801b47d 	.word	0x0801b47d
 800731c:	0801a5dc 	.word	0x0801a5dc

08007320 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8007320:	2843      	cmp	r0, #67	; 0x43
{
 8007322:	b570      	push	{r4, r5, r6, lr}
 8007324:	4604      	mov	r4, r0
 8007326:	460d      	mov	r5, r1
 8007328:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800732a:	d906      	bls.n	800733a <dhcp_option_byte+0x1a>
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <dhcp_option_byte+0x24>)
 800732e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8007332:	4905      	ldr	r1, [pc, #20]	; (8007348 <dhcp_option_byte+0x28>)
 8007334:	4805      	ldr	r0, [pc, #20]	; (800734c <dhcp_option_byte+0x2c>)
 8007336:	f007 fdcd 	bl	800eed4 <iprintf>
  options[options_out_len++] = value;
 800733a:	1c60      	adds	r0, r4, #1
 800733c:	552e      	strb	r6, [r5, r4]
}
 800733e:	b280      	uxth	r0, r0
 8007340:	bd70      	pop	{r4, r5, r6, pc}
 8007342:	bf00      	nop
 8007344:	0801b3de 	.word	0x0801b3de
 8007348:	0801b4bf 	.word	0x0801b4bf
 800734c:	0801a5dc 	.word	0x0801a5dc

08007350 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8007352:	1d07      	adds	r7, r0, #4
{
 8007354:	4604      	mov	r4, r0
 8007356:	460d      	mov	r5, r1
 8007358:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800735a:	2f44      	cmp	r7, #68	; 0x44
 800735c:	d906      	bls.n	800736c <dhcp_option_long+0x1c>
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <dhcp_option_long+0x3c>)
 8007360:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007364:	490a      	ldr	r1, [pc, #40]	; (8007390 <dhcp_option_long+0x40>)
 8007366:	480b      	ldr	r0, [pc, #44]	; (8007394 <dhcp_option_long+0x44>)
 8007368:	f007 fdb4 	bl	800eed4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800736c:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800736e:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8007370:	552b      	strb	r3, [r5, r4]
 8007372:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8007374:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8007376:	b29b      	uxth	r3, r3
 8007378:	54ea      	strb	r2, [r5, r3]
 800737a:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800737c:	3403      	adds	r4, #3
 800737e:	0a32      	lsrs	r2, r6, #8
 8007380:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8007382:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8007384:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8007386:	552e      	strb	r6, [r5, r4]
}
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	bf00      	nop
 800738c:	0801b3de 	.word	0x0801b3de
 8007390:	0801b4f4 	.word	0x0801b4f4
 8007394:	0801a5dc 	.word	0x0801a5dc

08007398 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8007398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800739c:	460e      	mov	r6, r1
 800739e:	4690      	mov	r8, r2
 80073a0:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80073a2:	4605      	mov	r5, r0
 80073a4:	b958      	cbnz	r0, 80073be <dhcp_create_msg+0x26>
 80073a6:	462f      	mov	r7, r5
 80073a8:	4b3f      	ldr	r3, [pc, #252]	; (80074a8 <dhcp_create_msg+0x110>)
 80073aa:	f240 7269 	movw	r2, #1897	; 0x769
 80073ae:	493f      	ldr	r1, [pc, #252]	; (80074ac <dhcp_create_msg+0x114>)
 80073b0:	483f      	ldr	r0, [pc, #252]	; (80074b0 <dhcp_create_msg+0x118>)
 80073b2:	f007 fd8f 	bl	800eed4 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 80073b6:	4638      	mov	r0, r7
 80073b8:	b003      	add	sp, #12
 80073ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80073be:	b941      	cbnz	r1, 80073d2 <dhcp_create_msg+0x3a>
 80073c0:	4b39      	ldr	r3, [pc, #228]	; (80074a8 <dhcp_create_msg+0x110>)
 80073c2:	f240 726a 	movw	r2, #1898	; 0x76a
 80073c6:	493b      	ldr	r1, [pc, #236]	; (80074b4 <dhcp_create_msg+0x11c>)
 80073c8:	4637      	mov	r7, r6
 80073ca:	4839      	ldr	r0, [pc, #228]	; (80074b0 <dhcp_create_msg+0x118>)
 80073cc:	f007 fd82 	bl	800eed4 <iprintf>
 80073d0:	e7f1      	b.n	80073b6 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80073d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80073d6:	f44f 719a 	mov.w	r1, #308	; 0x134
 80073da:	2036      	movs	r0, #54	; 0x36
 80073dc:	f002 ffd0 	bl	800a380 <pbuf_alloc>
  if (p_out == NULL) {
 80073e0:	4607      	mov	r7, r0
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d0e7      	beq.n	80073b6 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80073e6:	8943      	ldrh	r3, [r0, #10]
 80073e8:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80073ec:	d206      	bcs.n	80073fc <dhcp_create_msg+0x64>
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <dhcp_create_msg+0x110>)
 80073f0:	f240 7271 	movw	r2, #1905	; 0x771
 80073f4:	4930      	ldr	r1, [pc, #192]	; (80074b8 <dhcp_create_msg+0x120>)
 80073f6:	482e      	ldr	r0, [pc, #184]	; (80074b0 <dhcp_create_msg+0x118>)
 80073f8:	f007 fd6c 	bl	800eed4 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80073fc:	f1b8 0f03 	cmp.w	r8, #3
 8007400:	d102      	bne.n	8007408 <dhcp_create_msg+0x70>
 8007402:	7973      	ldrb	r3, [r6, #5]
 8007404:	2b03      	cmp	r3, #3
 8007406:	d107      	bne.n	8007418 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8007408:	79b3      	ldrb	r3, [r6, #6]
 800740a:	4c2c      	ldr	r4, [pc, #176]	; (80074bc <dhcp_create_msg+0x124>)
 800740c:	b913      	cbnz	r3, 8007414 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 800740e:	f007 fd79 	bl	800ef04 <rand>
 8007412:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8007418:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800741a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800741e:	2100      	movs	r1, #0
 8007420:	4620      	mov	r0, r4
 8007422:	f007 f8e5 	bl	800e5f0 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8007426:	2301      	movs	r3, #1
 8007428:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800742a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800742c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007430:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8007432:	6830      	ldr	r0, [r6, #0]
 8007434:	f002 f9e9 	bl	800980a <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8007438:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 800743c:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800743e:	d00a      	beq.n	8007456 <dhcp_create_msg+0xbe>
 8007440:	f1a8 0307 	sub.w	r3, r8, #7
 8007444:	2b01      	cmp	r3, #1
 8007446:	d906      	bls.n	8007456 <dhcp_create_msg+0xbe>
 8007448:	f1b8 0f03 	cmp.w	r8, #3
 800744c:	d105      	bne.n	800745a <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800744e:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8007450:	3b04      	subs	r3, #4
 8007452:	2b01      	cmp	r3, #1
 8007454:	d801      	bhi.n	800745a <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8007456:	686b      	ldr	r3, [r5, #4]
 8007458:	60e3      	str	r3, [r4, #12]
 800745a:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 800745e:	f104 021c 	add.w	r2, r4, #28
 8007462:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 8007464:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007468:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 800746a:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800746e:	d1f9      	bne.n	8007464 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007470:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8007474:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007476:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 800747a:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800747c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8007480:	2253      	movs	r2, #83	; 0x53
 8007482:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8007486:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800748a:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800748c:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007490:	2301      	movs	r3, #1
 8007492:	9101      	str	r1, [sp, #4]
 8007494:	f7ff ff26 	bl	80072e4 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8007498:	4642      	mov	r2, r8
 800749a:	9901      	ldr	r1, [sp, #4]
 800749c:	f7ff ff40 	bl	8007320 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 80074a0:	f8a9 0000 	strh.w	r0, [r9]
 80074a4:	e787      	b.n	80073b6 <dhcp_create_msg+0x1e>
 80074a6:	bf00      	nop
 80074a8:	0801b3de 	.word	0x0801b3de
 80074ac:	0801b52e 	.word	0x0801b52e
 80074b0:	0801a5dc 	.word	0x0801a5dc
 80074b4:	0801b54d 	.word	0x0801b54d
 80074b8:	0801b56b 	.word	0x0801b56b
 80074bc:	2000694c 	.word	0x2000694c

080074c0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	4604      	mov	r4, r0
  options[options_out_len++] = DHCP_OPTION_END;
 80074c4:	23ff      	movs	r3, #255	; 0xff
{
 80074c6:	4608      	mov	r0, r1
 80074c8:	4617      	mov	r7, r2
  options[options_out_len++] = DHCP_OPTION_END;
 80074ca:	1c66      	adds	r6, r4, #1
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80074cc:	f1c4 0543 	rsb	r5, r4, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80074d0:	550b      	strb	r3, [r1, r4]
    options[options_out_len++] = 0;
 80074d2:	2100      	movs	r1, #0
  options[options_out_len++] = DHCP_OPTION_END;
 80074d4:	b2b6      	uxth	r6, r6
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80074d6:	34f1      	adds	r4, #241	; 0xf1
    options[options_out_len++] = 0;
 80074d8:	b2ad      	uxth	r5, r5
 80074da:	2e44      	cmp	r6, #68	; 0x44
 80074dc:	4430      	add	r0, r6
 80074de:	bf94      	ite	ls
 80074e0:	462a      	movls	r2, r5
 80074e2:	2200      	movhi	r2, #0
 80074e4:	f007 f884 	bl	800e5f0 <memset>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80074e8:	2e44      	cmp	r6, #68	; 0x44
 80074ea:	4638      	mov	r0, r7
 80074ec:	bf94      	ite	ls
 80074ee:	4629      	movls	r1, r5
 80074f0:	2100      	movhi	r1, #0
 80074f2:	4421      	add	r1, r4
}
 80074f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80074f8:	b289      	uxth	r1, r1
 80074fa:	f002 bfbd 	b.w	800a478 <pbuf_realloc>
	...

08007500 <dhcp_discover>:
{
 8007500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8007504:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007506:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007508:	b086      	sub	sp, #24
 800750a:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800750c:	2106      	movs	r1, #6
 800750e:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8007510:	61e3      	str	r3, [r4, #28]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8007512:	2201      	movs	r2, #1
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8007514:	f7ff fec2 	bl	800729c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8007518:	f10d 0316 	add.w	r3, sp, #22
 800751c:	4621      	mov	r1, r4
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ff3a 	bl	8007398 <dhcp_create_msg>
  if (p_out != NULL) {
 8007524:	4605      	mov	r5, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	d039      	beq.n	800759e <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800752a:	6841      	ldr	r1, [r0, #4]
 800752c:	2302      	movs	r3, #2
 800752e:	2239      	movs	r2, #57	; 0x39
 8007530:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007534:	31f0      	adds	r1, #240	; 0xf0
 8007536:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80075ec <dhcp_discover+0xec>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800753a:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800753c:	9103      	str	r1, [sp, #12]
 800753e:	f7ff fed1 	bl	80072e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007542:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8007544:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007546:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800754a:	f7ff feaf 	bl	80072ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800754e:	9903      	ldr	r1, [sp, #12]
 8007550:	2303      	movs	r3, #3
 8007552:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007554:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007558:	f7ff fec4 	bl	80072e4 <dhcp_option>
 800755c:	9903      	ldr	r1, [sp, #12]
 800755e:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007562:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007564:	f818 2b01 	ldrb.w	r2, [r8], #1
 8007568:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800756c:	9103      	str	r1, [sp, #12]
 800756e:	f7ff fed7 	bl	8007320 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007572:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8007576:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007578:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800757c:	d1f1      	bne.n	8007562 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800757e:	462a      	mov	r2, r5
 8007580:	f7ff ff9e 	bl	80074c0 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007584:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <dhcp_discover+0xe0>)
 8007586:	4817      	ldr	r0, [pc, #92]	; (80075e4 <dhcp_discover+0xe4>)
 8007588:	4629      	mov	r1, r5
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <dhcp_discover+0xe8>)
 800758c:	e9cd 6300 	strd	r6, r3, [sp]
 8007590:	2343      	movs	r3, #67	; 0x43
 8007592:	6840      	ldr	r0, [r0, #4]
 8007594:	f006 fcca 	bl	800df2c <udp_sendto_if_src>
    pbuf_free(p_out);
 8007598:	4628      	mov	r0, r5
 800759a:	f002 fe89 	bl	800a2b0 <pbuf_free>
  if (dhcp->tries < 255) {
 800759e:	79a3      	ldrb	r3, [r4, #6]
}
 80075a0:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 80075a2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80075a4:	bf1c      	itt	ne
 80075a6:	3301      	addne	r3, #1
 80075a8:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80075aa:	79a2      	ldrb	r2, [r4, #6]
 80075ac:	2a05      	cmp	r2, #5
 80075ae:	bf97      	itett	ls
 80075b0:	2301      	movls	r3, #1
 80075b2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80075b6:	4093      	lslls	r3, r2
 80075b8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80075bc:	bf98      	it	ls
 80075be:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80075c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80075c6:	bf9c      	itt	ls
 80075c8:	00db      	lslls	r3, r3, #3
 80075ca:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80075cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80075d6:	8123      	strh	r3, [r4, #8]
}
 80075d8:	b006      	add	sp, #24
 80075da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075de:	bf00      	nop
 80075e0:	08011768 	.word	0x08011768
 80075e4:	2000694c 	.word	0x2000694c
 80075e8:	08011764 	.word	0x08011764
 80075ec:	0801175e 	.word	0x0801175e

080075f0 <dhcp_check>:
{
 80075f0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80075f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 80075f4:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80075f6:	2108      	movs	r1, #8
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80075f8:	2200      	movs	r2, #0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80075fa:	4620      	mov	r0, r4
 80075fc:	f7ff fe4e 	bl	800729c <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8007600:	f104 011c 	add.w	r1, r4, #28
 8007604:	4628      	mov	r0, r5
 8007606:	f001 f94f 	bl	80088a8 <etharp_query>
  if (dhcp->tries < 255) {
 800760a:	79a3      	ldrb	r3, [r4, #6]
 800760c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800760e:	bf1c      	itt	ne
 8007610:	3301      	addne	r3, #1
 8007612:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007614:	2301      	movs	r3, #1
 8007616:	8123      	strh	r3, [r4, #8]
}
 8007618:	bd38      	pop	{r3, r4, r5, pc}
	...

0800761c <dhcp_bind>:
{
 800761c:	b513      	push	{r0, r1, r4, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800761e:	4604      	mov	r4, r0
 8007620:	b948      	cbnz	r0, 8007636 <dhcp_bind+0x1a>
 8007622:	4b3e      	ldr	r3, [pc, #248]	; (800771c <dhcp_bind+0x100>)
 8007624:	f240 4215 	movw	r2, #1045	; 0x415
 8007628:	493d      	ldr	r1, [pc, #244]	; (8007720 <dhcp_bind+0x104>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800762a:	483e      	ldr	r0, [pc, #248]	; (8007724 <dhcp_bind+0x108>)
}
 800762c:	b002      	add	sp, #8
 800762e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8007632:	f007 bc4f 	b.w	800eed4 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8007636:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8007638:	b920      	cbnz	r0, 8007644 <dhcp_bind+0x28>
 800763a:	4b38      	ldr	r3, [pc, #224]	; (800771c <dhcp_bind+0x100>)
 800763c:	f240 4217 	movw	r2, #1047	; 0x417
 8007640:	4939      	ldr	r1, [pc, #228]	; (8007728 <dhcp_bind+0x10c>)
 8007642:	e7f2      	b.n	800762a <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8007648:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	d00c      	beq.n	8007668 <dhcp_bind+0x4c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800764e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8007650:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007654:	bf36      	itet	cc
 8007656:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8007658:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800765c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 8007660:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 8007662:	2b00      	cmp	r3, #0
 8007664:	d043      	beq.n	80076ee <dhcp_bind+0xd2>
    dhcp->t0_timeout = (u16_t)timeout;
 8007666:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8007668:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	d00e      	beq.n	800768c <dhcp_bind+0x70>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800766e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8007670:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007674:	bf36      	itet	cc
 8007676:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8007678:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800767c:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8007680:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8007682:	2b00      	cmp	r3, #0
 8007684:	d036      	beq.n	80076f4 <dhcp_bind+0xd8>
    dhcp->t1_timeout = (u16_t)timeout;
 8007686:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8007688:	8943      	ldrh	r3, [r0, #10]
 800768a:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800768c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	d00d      	beq.n	80076ae <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007692:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8007694:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8007698:	bf36      	itet	cc
 800769a:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 800769c:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80076a0:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 80076a4:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 80076a6:	b343      	cbz	r3, 80076fa <dhcp_bind+0xde>
    dhcp->t2_timeout = (u16_t)timeout;
 80076a8:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80076aa:	8983      	ldrh	r3, [r0, #12]
 80076ac:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80076ae:	8983      	ldrh	r3, [r0, #12]
 80076b0:	8942      	ldrh	r2, [r0, #10]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d302      	bcc.n	80076bc <dhcp_bind+0xa0>
 80076b6:	b10b      	cbz	r3, 80076bc <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 80076bc:	79c3      	ldrb	r3, [r0, #7]
 80076be:	b1fb      	cbz	r3, 8007700 <dhcp_bind+0xe4>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80076c0:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80076c2:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80076c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076c6:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80076c8:	b92b      	cbnz	r3, 80076d6 <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80076ca:	69c3      	ldr	r3, [r0, #28]
 80076cc:	9a00      	ldr	r2, [sp, #0]
 80076ce:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80076d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076d4:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80076d6:	210a      	movs	r1, #10
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80076d8:	466a      	mov	r2, sp
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80076da:	f7ff fddf 	bl	800729c <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80076de:	f100 011c 	add.w	r1, r0, #28
 80076e2:	ab01      	add	r3, sp, #4
 80076e4:	4620      	mov	r0, r4
 80076e6:	f002 fc31 	bl	8009f4c <netif_set_addr>
}
 80076ea:	b002      	add	sp, #8
 80076ec:	bd10      	pop	{r4, pc}
      dhcp->t0_timeout = 1;
 80076ee:	2301      	movs	r3, #1
 80076f0:	8283      	strh	r3, [r0, #20]
 80076f2:	e7b9      	b.n	8007668 <dhcp_bind+0x4c>
      dhcp->t1_timeout = 1;
 80076f4:	2301      	movs	r3, #1
 80076f6:	8143      	strh	r3, [r0, #10]
 80076f8:	e7c6      	b.n	8007688 <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 80076fa:	2301      	movs	r3, #1
 80076fc:	8183      	strh	r3, [r0, #12]
 80076fe:	e7d4      	b.n	80076aa <dhcp_bind+0x8e>
    if (first_octet <= 127) {
 8007700:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8007704:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 8007706:	2a00      	cmp	r2, #0
 8007708:	db01      	blt.n	800770e <dhcp_bind+0xf2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800770a:	23ff      	movs	r3, #255	; 0xff
 800770c:	e7d9      	b.n	80076c2 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 800770e:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8007710:	bf8c      	ite	hi
 8007712:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8007716:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800771a:	e7d2      	b.n	80076c2 <dhcp_bind+0xa6>
 800771c:	0801b3de 	.word	0x0801b3de
 8007720:	0801b5ab 	.word	0x0801b5ab
 8007724:	0801a5dc 	.word	0x0801a5dc
 8007728:	0801b5c4 	.word	0x0801b5c4

0800772c <dhcp_inc_pcb_refcount>:
{
 800772c:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 800772e:	4c14      	ldr	r4, [pc, #80]	; (8007780 <dhcp_inc_pcb_refcount+0x54>)
 8007730:	7a23      	ldrb	r3, [r4, #8]
 8007732:	b9eb      	cbnz	r3, 8007770 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	b12b      	cbz	r3, 8007744 <dhcp_inc_pcb_refcount+0x18>
 8007738:	4b12      	ldr	r3, [pc, #72]	; (8007784 <dhcp_inc_pcb_refcount+0x58>)
 800773a:	22e5      	movs	r2, #229	; 0xe5
 800773c:	4912      	ldr	r1, [pc, #72]	; (8007788 <dhcp_inc_pcb_refcount+0x5c>)
 800773e:	4813      	ldr	r0, [pc, #76]	; (800778c <dhcp_inc_pcb_refcount+0x60>)
 8007740:	f007 fbc8 	bl	800eed4 <iprintf>
    dhcp_pcb = udp_new();
 8007744:	f006 fd3e 	bl	800e1c4 <udp_new>
 8007748:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 800774a:	b1b0      	cbz	r0, 800777a <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800774c:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800774e:	4910      	ldr	r1, [pc, #64]	; (8007790 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007750:	f042 0220 	orr.w	r2, r2, #32
 8007754:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8007756:	2244      	movs	r2, #68	; 0x44
 8007758:	f006 fb82 	bl	800de60 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800775c:	2243      	movs	r2, #67	; 0x43
 800775e:	490c      	ldr	r1, [pc, #48]	; (8007790 <dhcp_inc_pcb_refcount+0x64>)
 8007760:	6860      	ldr	r0, [r4, #4]
 8007762:	f006 fcbb 	bl	800e0dc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8007766:	2200      	movs	r2, #0
 8007768:	490a      	ldr	r1, [pc, #40]	; (8007794 <dhcp_inc_pcb_refcount+0x68>)
 800776a:	6860      	ldr	r0, [r4, #4]
 800776c:	f006 fcf2 	bl	800e154 <udp_recv>
  dhcp_pcb_refcount++;
 8007770:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 8007772:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8007774:	3301      	adds	r3, #1
 8007776:	7223      	strb	r3, [r4, #8]
}
 8007778:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 800777a:	f04f 30ff 	mov.w	r0, #4294967295
 800777e:	e7fb      	b.n	8007778 <dhcp_inc_pcb_refcount+0x4c>
 8007780:	2000694c 	.word	0x2000694c
 8007784:	0801b3de 	.word	0x0801b3de
 8007788:	0801b5dc 	.word	0x0801b5dc
 800778c:	0801a5dc 	.word	0x0801a5dc
 8007790:	08011768 	.word	0x08011768
 8007794:	08007a95 	.word	0x08007a95

08007798 <dhcp_dec_pcb_refcount>:
{
 8007798:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800779a:	4d09      	ldr	r5, [pc, #36]	; (80077c0 <dhcp_dec_pcb_refcount+0x28>)
 800779c:	7a2b      	ldrb	r3, [r5, #8]
 800779e:	b92b      	cbnz	r3, 80077ac <dhcp_dec_pcb_refcount+0x14>
 80077a0:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <dhcp_dec_pcb_refcount+0x2c>)
 80077a2:	22ff      	movs	r2, #255	; 0xff
 80077a4:	4908      	ldr	r1, [pc, #32]	; (80077c8 <dhcp_dec_pcb_refcount+0x30>)
 80077a6:	4809      	ldr	r0, [pc, #36]	; (80077cc <dhcp_dec_pcb_refcount+0x34>)
 80077a8:	f007 fb94 	bl	800eed4 <iprintf>
  dhcp_pcb_refcount--;
 80077ac:	7a2c      	ldrb	r4, [r5, #8]
 80077ae:	3c01      	subs	r4, #1
 80077b0:	b2e4      	uxtb	r4, r4
 80077b2:	722c      	strb	r4, [r5, #8]
  if (dhcp_pcb_refcount == 0) {
 80077b4:	b91c      	cbnz	r4, 80077be <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 80077b6:	6868      	ldr	r0, [r5, #4]
 80077b8:	f006 fcde 	bl	800e178 <udp_remove>
    dhcp_pcb = NULL;
 80077bc:	606c      	str	r4, [r5, #4]
}
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	2000694c 	.word	0x2000694c
 80077c4:	0801b3de 	.word	0x0801b3de
 80077c8:	0801b601 	.word	0x0801b601
 80077cc:	0801a5dc 	.word	0x0801a5dc

080077d0 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 80077d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80077d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
dhcp_reboot(struct netif *netif)
 80077d6:	b085      	sub	sp, #20
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80077d8:	2103      	movs	r1, #3
dhcp_reboot(struct netif *netif)
 80077da:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80077dc:	4620      	mov	r0, r4
 80077de:	f7ff fd5d 	bl	800729c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80077e2:	460a      	mov	r2, r1
 80077e4:	f10d 030e 	add.w	r3, sp, #14
 80077e8:	4621      	mov	r1, r4
 80077ea:	4638      	mov	r0, r7
 80077ec:	f7ff fdd4 	bl	8007398 <dhcp_create_msg>
  if (p_out != NULL) {
 80077f0:	4606      	mov	r6, r0
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d04b      	beq.n	800788e <dhcp_reboot.isra.0+0xbe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80077f6:	6845      	ldr	r5, [r0, #4]
 80077f8:	2302      	movs	r3, #2
 80077fa:	2239      	movs	r2, #57	; 0x39
 80077fc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007800:	35f0      	adds	r5, #240	; 0xf0
 8007802:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80078d0 <dhcp_reboot.isra.0+0x100>
 8007806:	4629      	mov	r1, r5
 8007808:	f7ff fd6c 	bl	80072e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800780c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007810:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007812:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8007816:	f7ff fd49 	bl	80072ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800781a:	2304      	movs	r3, #4
 800781c:	2232      	movs	r2, #50	; 0x32
 800781e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8007820:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007824:	f7ff fd5e 	bl	80072e4 <dhcp_option>
 8007828:	4680      	mov	r8, r0
 800782a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800782e:	69e0      	ldr	r0, [r4, #28]
 8007830:	f001 ffeb 	bl	800980a <lwip_htonl>
 8007834:	4629      	mov	r1, r5
 8007836:	4602      	mov	r2, r0
 8007838:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800783a:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800783e:	f7ff fd87 	bl	8007350 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007842:	2303      	movs	r3, #3
 8007844:	2237      	movs	r2, #55	; 0x37
 8007846:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007848:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800784c:	f7ff fd4a 	bl	80072e4 <dhcp_option>
 8007850:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007854:	f108 38ff 	add.w	r8, r8, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007858:	f819 2b01 	ldrb.w	r2, [r9], #1
 800785c:	4629      	mov	r1, r5
 800785e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007862:	f7ff fd5d 	bl	8007320 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007866:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800786a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800786e:	d1f1      	bne.n	8007854 <dhcp_reboot.isra.0+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007870:	4632      	mov	r2, r6
 8007872:	4629      	mov	r1, r5
 8007874:	f7ff fe24 	bl	80074c0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007878:	4813      	ldr	r0, [pc, #76]	; (80078c8 <dhcp_reboot.isra.0+0xf8>)
 800787a:	9700      	str	r7, [sp, #0]
 800787c:	2343      	movs	r3, #67	; 0x43
 800787e:	4a13      	ldr	r2, [pc, #76]	; (80078cc <dhcp_reboot.isra.0+0xfc>)
 8007880:	4631      	mov	r1, r6
 8007882:	6840      	ldr	r0, [r0, #4]
 8007884:	f006 fbea 	bl	800e05c <udp_sendto_if>
    pbuf_free(p_out);
 8007888:	4630      	mov	r0, r6
 800788a:	f002 fd11 	bl	800a2b0 <pbuf_free>
  if (dhcp->tries < 255) {
 800788e:	79a3      	ldrb	r3, [r4, #6]
 8007890:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007892:	bf1c      	itt	ne
 8007894:	3301      	addne	r3, #1
 8007896:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8007898:	79a3      	ldrb	r3, [r4, #6]
 800789a:	2b09      	cmp	r3, #9
 800789c:	bf96      	itet	ls
 800789e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80078a2:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80078a6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80078aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80078ae:	bf9c      	itt	ls
 80078b0:	00db      	lslls	r3, r3, #3
 80078b2:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80078b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80078be:	8123      	strh	r3, [r4, #8]
}
 80078c0:	b005      	add	sp, #20
 80078c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078c6:	bf00      	nop
 80078c8:	2000694c 	.word	0x2000694c
 80078cc:	08011764 	.word	0x08011764
 80078d0:	0801175e 	.word	0x0801175e

080078d4 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80078d4:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80078d6:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80078d8:	4d14      	ldr	r5, [pc, #80]	; (800792c <dhcp_handle_ack.isra.0+0x58>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80078da:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80078dc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80078e0:	7b2b      	ldrb	r3, [r5, #12]
 80078e2:	b10b      	cbz	r3, 80078e8 <dhcp_handle_ack.isra.0+0x14>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80078e4:	6a2b      	ldr	r3, [r5, #32]
 80078e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80078e8:	7b6b      	ldrb	r3, [r5, #13]
 80078ea:	b1b3      	cbz	r3, 800791a <dhcp_handle_ack.isra.0+0x46>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80078ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80078f0:	7bab      	ldrb	r3, [r5, #14]
 80078f2:	b1ab      	cbz	r3, 8007920 <dhcp_handle_ack.isra.0+0x4c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80078f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80078f6:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80078f8:	690b      	ldr	r3, [r1, #16]
 80078fa:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80078fc:	7beb      	ldrb	r3, [r5, #15]
 80078fe:	b123      	cbz	r3, 800790a <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8007900:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007902:	f001 ff82 	bl	800980a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8007906:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8007908:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 800790a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800790c:	7c2b      	ldrb	r3, [r5, #16]
 800790e:	b11b      	cbz	r3, 8007918 <dhcp_handle_ack.isra.0+0x44>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8007910:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007912:	f001 ff7a 	bl	800980a <lwip_htonl>
 8007916:	6260      	str	r0, [r4, #36]	; 0x24
}
 8007918:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800791a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	e7e6      	b.n	80078ee <dhcp_handle_ack.isra.0+0x1a>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8007920:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007922:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007926:	08db      	lsrs	r3, r3, #3
 8007928:	e7e5      	b.n	80078f6 <dhcp_handle_ack.isra.0+0x22>
 800792a:	bf00      	nop
 800792c:	2000694c 	.word	0x2000694c

08007930 <dhcp_select.isra.0>:
dhcp_select(struct netif *netif)
 8007930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8007934:	4607      	mov	r7, r0
dhcp_select(struct netif *netif)
 8007936:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8007938:	b948      	cbnz	r0, 800794e <dhcp_select.isra.0+0x1e>
 800793a:	4b4e      	ldr	r3, [pc, #312]	; (8007a74 <dhcp_select.isra.0+0x144>)
 800793c:	f240 1277 	movw	r2, #375	; 0x177
 8007940:	494d      	ldr	r1, [pc, #308]	; (8007a78 <dhcp_select.isra.0+0x148>)
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8007942:	484e      	ldr	r0, [pc, #312]	; (8007a7c <dhcp_select.isra.0+0x14c>)
}
 8007944:	b005      	add	sp, #20
 8007946:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800794a:	f007 bac3 	b.w	800eed4 <iprintf>
  dhcp = netif_dhcp_data(netif);
 800794e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8007950:	b924      	cbnz	r4, 800795c <dhcp_select.isra.0+0x2c>
 8007952:	4b48      	ldr	r3, [pc, #288]	; (8007a74 <dhcp_select.isra.0+0x144>)
 8007954:	f240 1279 	movw	r2, #377	; 0x179
 8007958:	4949      	ldr	r1, [pc, #292]	; (8007a80 <dhcp_select.isra.0+0x150>)
 800795a:	e7f2      	b.n	8007942 <dhcp_select.isra.0+0x12>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800795c:	2101      	movs	r1, #1
 800795e:	4620      	mov	r0, r4
 8007960:	f7ff fc9c 	bl	800729c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007964:	2203      	movs	r2, #3
 8007966:	f10d 030e 	add.w	r3, sp, #14
 800796a:	4621      	mov	r1, r4
 800796c:	4638      	mov	r0, r7
 800796e:	f7ff fd13 	bl	8007398 <dhcp_create_msg>
  if (p_out != NULL) {
 8007972:	4606      	mov	r6, r0
 8007974:	2800      	cmp	r0, #0
 8007976:	d05e      	beq.n	8007a36 <dhcp_select.isra.0+0x106>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007978:	6845      	ldr	r5, [r0, #4]
 800797a:	2302      	movs	r3, #2
 800797c:	2239      	movs	r2, #57	; 0x39
 800797e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007982:	35f0      	adds	r5, #240	; 0xf0
 8007984:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007a90 <dhcp_select.isra.0+0x160>
 8007988:	4629      	mov	r1, r5
 800798a:	f7ff fcab 	bl	80072e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800798e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007990:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007992:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007996:	f7ff fc89 	bl	80072ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800799a:	2304      	movs	r3, #4
 800799c:	2232      	movs	r2, #50	; 0x32
 800799e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80079a0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80079a4:	f7ff fc9e 	bl	80072e4 <dhcp_option>
 80079a8:	4680      	mov	r8, r0
 80079aa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80079ae:	69e0      	ldr	r0, [r4, #28]
 80079b0:	f001 ff2b 	bl	800980a <lwip_htonl>
 80079b4:	4629      	mov	r1, r5
 80079b6:	4602      	mov	r2, r0
 80079b8:	4640      	mov	r0, r8
 80079ba:	f7ff fcc9 	bl	8007350 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80079be:	2304      	movs	r3, #4
 80079c0:	2236      	movs	r2, #54	; 0x36
 80079c2:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80079c4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80079c8:	f7ff fc8c 	bl	80072e4 <dhcp_option>
 80079cc:	4680      	mov	r8, r0
 80079ce:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80079d2:	69a0      	ldr	r0, [r4, #24]
 80079d4:	f001 ff19 	bl	800980a <lwip_htonl>
 80079d8:	4629      	mov	r1, r5
 80079da:	4602      	mov	r2, r0
 80079dc:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80079de:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80079e2:	f7ff fcb5 	bl	8007350 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80079e6:	2303      	movs	r3, #3
 80079e8:	2237      	movs	r2, #55	; 0x37
 80079ea:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80079ec:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80079f0:	f7ff fc78 	bl	80072e4 <dhcp_option>
 80079f4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80079f8:	f108 38ff 	add.w	r8, r8, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80079fc:	f819 2b01 	ldrb.w	r2, [r9], #1
 8007a00:	4629      	mov	r1, r5
 8007a02:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007a06:	f7ff fc8b 	bl	8007320 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007a0a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007a0e:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007a12:	d1f1      	bne.n	80079f8 <dhcp_select.isra.0+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007a14:	4632      	mov	r2, r6
 8007a16:	4629      	mov	r1, r5
 8007a18:	f7ff fd52 	bl	80074c0 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007a1c:	4b19      	ldr	r3, [pc, #100]	; (8007a84 <dhcp_select.isra.0+0x154>)
 8007a1e:	481a      	ldr	r0, [pc, #104]	; (8007a88 <dhcp_select.isra.0+0x158>)
 8007a20:	4631      	mov	r1, r6
 8007a22:	4a1a      	ldr	r2, [pc, #104]	; (8007a8c <dhcp_select.isra.0+0x15c>)
 8007a24:	e9cd 7300 	strd	r7, r3, [sp]
 8007a28:	2343      	movs	r3, #67	; 0x43
 8007a2a:	6840      	ldr	r0, [r0, #4]
 8007a2c:	f006 fa7e 	bl	800df2c <udp_sendto_if_src>
    pbuf_free(p_out);
 8007a30:	4630      	mov	r0, r6
 8007a32:	f002 fc3d 	bl	800a2b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8007a36:	79a3      	ldrb	r3, [r4, #6]
 8007a38:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007a3a:	bf1c      	itt	ne
 8007a3c:	3301      	addne	r3, #1
 8007a3e:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8007a40:	79a2      	ldrb	r2, [r4, #6]
 8007a42:	2a05      	cmp	r2, #5
 8007a44:	bf97      	itett	ls
 8007a46:	2301      	movls	r3, #1
 8007a48:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8007a4c:	4093      	lslls	r3, r2
 8007a4e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8007a52:	bf98      	it	ls
 8007a54:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007a58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8007a5c:	bf9c      	itt	ls
 8007a5e:	00db      	lslls	r3, r3, #3
 8007a60:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007a62:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a6c:	8123      	strh	r3, [r4, #8]
}
 8007a6e:	b005      	add	sp, #20
 8007a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a74:	0801b3de 	.word	0x0801b3de
 8007a78:	0801b625 	.word	0x0801b625
 8007a7c:	0801a5dc 	.word	0x0801a5dc
 8007a80:	0801b640 	.word	0x0801b640
 8007a84:	08011768 	.word	0x08011768
 8007a88:	2000694c 	.word	0x2000694c
 8007a8c:	08011764 	.word	0x08011764
 8007a90:	0801175e 	.word	0x0801175e

08007a94 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8007a94:	4ba1      	ldr	r3, [pc, #644]	; (8007d1c <dhcp_recv+0x288>)
{
 8007a96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8007a9a:	685e      	ldr	r6, [r3, #4]
{
 8007a9c:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007a9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
{
 8007aa0:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007aa2:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d03c      	beq.n	8007b22 <dhcp_recv+0x8e>
 8007aa8:	791b      	ldrb	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d039      	beq.n	8007b22 <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8007aae:	8953      	ldrh	r3, [r2, #10]
 8007ab0:	2b2b      	cmp	r3, #43	; 0x2b
 8007ab2:	d936      	bls.n	8007b22 <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8007ab4:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8007ab6:	7813      	ldrb	r3, [r2, #0]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d132      	bne.n	8007b22 <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007abc:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
 8007ac0:	f106 002a 	add.w	r0, r6, #42	; 0x2a
 8007ac4:	f102 011c 	add.w	r1, r2, #28
 8007ac8:	2300      	movs	r3, #0
 8007aca:	b2dd      	uxtb	r5, r3
 8007acc:	42ac      	cmp	r4, r5
 8007ace:	d901      	bls.n	8007ad4 <dhcp_recv+0x40>
 8007ad0:	2b06      	cmp	r3, #6
 8007ad2:	d11f      	bne.n	8007b14 <dhcp_recv+0x80>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8007ad4:	6850      	ldr	r0, [r2, #4]
 8007ad6:	f001 fe98 	bl	800980a <lwip_htonl>
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4298      	cmp	r0, r3
 8007ae0:	d11f      	bne.n	8007b22 <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
 8007ae2:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8007d44 <dhcp_recv+0x2b0>
 8007ae6:	2300      	movs	r3, #0
  if (p->len < DHCP_SNAME_OFS) {
 8007ae8:	9a01      	ldr	r2, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8007aea:	f8c9 300d 	str.w	r3, [r9, #13]
  if (p->len < DHCP_SNAME_OFS) {
 8007aee:	8952      	ldrh	r2, [r2, #10]
  dhcp_clear_all_options(dhcp);
 8007af0:	f8c9 3009 	str.w	r3, [r9, #9]
  if (p->len < DHCP_SNAME_OFS) {
 8007af4:	2a2b      	cmp	r2, #43	; 0x2b
 8007af6:	d914      	bls.n	8007b22 <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
 8007af8:	9a01      	ldr	r2, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 8007afa:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 8007afe:	9303      	str	r3, [sp, #12]
  options_idx_max = p->tot_len;
 8007b00:	f8b2 a008 	ldrh.w	sl, [r2, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8007b04:	9f01      	ldr	r7, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8007b06:	897b      	ldrh	r3, [r7, #10]
 8007b08:	455b      	cmp	r3, fp
 8007b0a:	d910      	bls.n	8007b2e <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	465c      	mov	r4, fp
 8007b10:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8007b12:	e0db      	b.n	8007ccc <dhcp_recv+0x238>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8007b14:	f810 7b01 	ldrb.w	r7, [r0], #1
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007b1e:	42af      	cmp	r7, r5
 8007b20:	d0d3      	beq.n	8007aca <dhcp_recv+0x36>
  pbuf_free(p);
 8007b22:	9801      	ldr	r0, [sp, #4]
}
 8007b24:	b009      	add	sp, #36	; 0x24
 8007b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007b2a:	f002 bbc1 	b.w	800a2b0 <pbuf_free>
    options_idx = (u16_t)(options_idx - q->len);
 8007b2e:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8007b32:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8007b36:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8007b38:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8007b3c:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8007b40:	2f00      	cmp	r7, #0
 8007b42:	d1e0      	bne.n	8007b06 <dhcp_recv+0x72>
 8007b44:	e7ed      	b.n	8007b22 <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
 8007b46:	1ca3      	adds	r3, r4, #2
 8007b48:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 8007b4a:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 8007b4c:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 8007b4e:	d3e8      	bcc.n	8007b22 <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
 8007b50:	1c60      	adds	r0, r4, #1
 8007b52:	897b      	ldrh	r3, [r7, #10]
 8007b54:	4298      	cmp	r0, r3
 8007b56:	da16      	bge.n	8007b86 <dhcp_recv+0xf2>
      len = options[offset + 1];
 8007b58:	9b05      	ldr	r3, [sp, #20]
 8007b5a:	4423      	add	r3, r4
 8007b5c:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8007b5e:	2a3b      	cmp	r2, #59	; 0x3b
 8007b60:	d854      	bhi.n	8007c0c <dhcp_recv+0x178>
 8007b62:	2a32      	cmp	r2, #50	; 0x32
 8007b64:	f200 8186 	bhi.w	8007e74 <dhcp_recv+0x3e0>
 8007b68:	2a01      	cmp	r2, #1
 8007b6a:	d013      	beq.n	8007b94 <dhcp_recv+0x100>
 8007b6c:	2a03      	cmp	r2, #3
 8007b6e:	d14d      	bne.n	8007c0c <dhcp_recv+0x178>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	f200 816c 	bhi.w	8007e4e <dhcp_recv+0x3ba>
 8007b76:	4b6a      	ldr	r3, [pc, #424]	; (8007d20 <dhcp_recv+0x28c>)
 8007b78:	f240 6233 	movw	r2, #1587	; 0x633
 8007b7c:	4969      	ldr	r1, [pc, #420]	; (8007d24 <dhcp_recv+0x290>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007b7e:	486a      	ldr	r0, [pc, #424]	; (8007d28 <dhcp_recv+0x294>)
 8007b80:	f007 f9a8 	bl	800eed4 <iprintf>
 8007b84:	e7cd      	b.n	8007b22 <dhcp_recv+0x8e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8136 	beq.w	8007dfa <dhcp_recv+0x366>
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	e7e4      	b.n	8007b5e <dhcp_recv+0xca>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	f000 8157 	beq.w	8007e48 <dhcp_recv+0x3b4>
 8007b9a:	4b61      	ldr	r3, [pc, #388]	; (8007d20 <dhcp_recv+0x28c>)
 8007b9c:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007ba0:	4962      	ldr	r1, [pc, #392]	; (8007d2c <dhcp_recv+0x298>)
 8007ba2:	e7ec      	b.n	8007b7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	f000 8156 	beq.w	8007e56 <dhcp_recv+0x3c2>
 8007baa:	4b5d      	ldr	r3, [pc, #372]	; (8007d20 <dhcp_recv+0x28c>)
 8007bac:	f240 6241 	movw	r2, #1601	; 0x641
 8007bb0:	e7f6      	b.n	8007ba0 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d004      	beq.n	8007bc0 <dhcp_recv+0x12c>
 8007bb6:	4b5a      	ldr	r3, [pc, #360]	; (8007d20 <dhcp_recv+0x28c>)
 8007bb8:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8007bbc:	495c      	ldr	r1, [pc, #368]	; (8007d30 <dhcp_recv+0x29c>)
 8007bbe:	e7de      	b.n	8007b7e <dhcp_recv+0xea>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8007bc0:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8007bc4:	f000 814a 	beq.w	8007e5c <dhcp_recv+0x3c8>
 8007bc8:	4b55      	ldr	r3, [pc, #340]	; (8007d20 <dhcp_recv+0x28c>)
 8007bca:	f240 6251 	movw	r2, #1617	; 0x651
 8007bce:	4959      	ldr	r1, [pc, #356]	; (8007d34 <dhcp_recv+0x2a0>)
 8007bd0:	e7d5      	b.n	8007b7e <dhcp_recv+0xea>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	f000 8148 	beq.w	8007e68 <dhcp_recv+0x3d4>
 8007bd8:	4b51      	ldr	r3, [pc, #324]	; (8007d20 <dhcp_recv+0x28c>)
 8007bda:	f240 6255 	movw	r2, #1621	; 0x655
 8007bde:	e7ed      	b.n	8007bbc <dhcp_recv+0x128>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	f000 813e 	beq.w	8007e62 <dhcp_recv+0x3ce>
 8007be6:	4b4e      	ldr	r3, [pc, #312]	; (8007d20 <dhcp_recv+0x28c>)
 8007be8:	f240 6259 	movw	r2, #1625	; 0x659
 8007bec:	e7d8      	b.n	8007ba0 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	f000 813a 	beq.w	8007e68 <dhcp_recv+0x3d4>
 8007bf4:	4b4a      	ldr	r3, [pc, #296]	; (8007d20 <dhcp_recv+0x28c>)
 8007bf6:	f240 625d 	movw	r2, #1629	; 0x65d
 8007bfa:	e7d1      	b.n	8007ba0 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	f000 8136 	beq.w	8007e6e <dhcp_recv+0x3da>
 8007c02:	4b47      	ldr	r3, [pc, #284]	; (8007d20 <dhcp_recv+0x28c>)
 8007c04:	f240 6261 	movw	r2, #1633	; 0x661
 8007c08:	e7ca      	b.n	8007ba0 <dhcp_recv+0x10c>
    switch (op) {
 8007c0a:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 8007c0c:	b9a2      	cbnz	r2, 8007c38 <dhcp_recv+0x1a4>
      offset++;
 8007c0e:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 8007c10:	897b      	ldrh	r3, [r7, #10]
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	d85a      	bhi.n	8007ccc <dhcp_recv+0x238>
      offset = (u16_t)(offset - q->len);
 8007c16:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8007c18:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8007c1c:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8007c1e:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8007c22:	4554      	cmp	r4, sl
 8007c24:	f4bf af7d 	bcs.w	8007b22 <dhcp_recv+0x8e>
        q = q->next;
 8007c28:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8007c2a:	2f00      	cmp	r7, #0
 8007c2c:	d14c      	bne.n	8007cc8 <dhcp_recv+0x234>
 8007c2e:	4b3c      	ldr	r3, [pc, #240]	; (8007d20 <dhcp_recv+0x28c>)
 8007c30:	f240 629d 	movw	r2, #1693	; 0x69d
 8007c34:	4940      	ldr	r1, [pc, #256]	; (8007d38 <dhcp_recv+0x2a4>)
 8007c36:	e7a2      	b.n	8007b7e <dhcp_recv+0xea>
 8007c38:	f04f 35ff 	mov.w	r5, #4294967295
 8007c3c:	f04f 0800 	mov.w	r8, #0
      if (offset + len + 2 > 0xFFFF) {
 8007c40:	441c      	add	r4, r3
 8007c42:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8007c46:	4294      	cmp	r4, r2
 8007c48:	f73f af6b 	bgt.w	8007b22 <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
 8007c4c:	9a04      	ldr	r2, [sp, #16]
 8007c4e:	4413      	add	r3, r2
 8007c50:	b29c      	uxth	r4, r3
      if (decode_len > 0) {
 8007c52:	f1b8 0f00 	cmp.w	r8, #0
 8007c56:	d0db      	beq.n	8007c10 <dhcp_recv+0x17c>
        u32_t value = 0;
 8007c58:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8007c5a:	2d07      	cmp	r5, #7
        u32_t value = 0;
 8007c5c:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8007c5e:	d906      	bls.n	8007c6e <dhcp_recv+0x1da>
 8007c60:	4b2f      	ldr	r3, [pc, #188]	; (8007d20 <dhcp_recv+0x28c>)
 8007c62:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8007c66:	4935      	ldr	r1, [pc, #212]	; (8007d3c <dhcp_recv+0x2a8>)
 8007c68:	482f      	ldr	r0, [pc, #188]	; (8007d28 <dhcp_recv+0x294>)
 8007c6a:	f007 f933 	bl	800eed4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8007c6e:	eb09 0305 	add.w	r3, r9, r5
 8007c72:	7a5b      	ldrb	r3, [r3, #9]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1cb      	bne.n	8007c10 <dhcp_recv+0x17c>
          copy_len = LWIP_MIN(decode_len, 4);
 8007c78:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	a907      	add	r1, sp, #28
 8007c80:	4638      	mov	r0, r7
 8007c82:	9204      	str	r2, [sp, #16]
 8007c84:	f002 fd3a 	bl	800a6fc <pbuf_copy_partial>
 8007c88:	9a04      	ldr	r2, [sp, #16]
 8007c8a:	4282      	cmp	r2, r0
 8007c8c:	f47f af49 	bne.w	8007b22 <dhcp_recv+0x8e>
          } else if (decode_len == 4) {
 8007c90:	f1b8 0f04 	cmp.w	r8, #4
 8007c94:	d10c      	bne.n	8007cb0 <dhcp_recv+0x21c>
            value = lwip_ntohl(value);
 8007c96:	9807      	ldr	r0, [sp, #28]
 8007c98:	f001 fdb7 	bl	800980a <lwip_htonl>
 8007c9c:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8007c9e:	eb09 0305 	add.w	r3, r9, r5
 8007ca2:	2201      	movs	r2, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 8007ca4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
          dhcp_got_option(dhcp, decode_idx);
 8007ca8:	725a      	strb	r2, [r3, #9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	616b      	str	r3, [r5, #20]
 8007cae:	e7af      	b.n	8007c10 <dhcp_recv+0x17c>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8007cb0:	f1b8 0f01 	cmp.w	r8, #1
 8007cb4:	d004      	beq.n	8007cc0 <dhcp_recv+0x22c>
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <dhcp_recv+0x28c>)
 8007cb8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8007cbc:	4920      	ldr	r1, [pc, #128]	; (8007d40 <dhcp_recv+0x2ac>)
 8007cbe:	e75e      	b.n	8007b7e <dhcp_recv+0xea>
            value = ((u8_t *)&value)[0];
 8007cc0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007cc4:	9307      	str	r3, [sp, #28]
 8007cc6:	e7ea      	b.n	8007c9e <dhcp_recv+0x20a>
        options = (u8_t *)q->payload;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8007ccc:	4554      	cmp	r4, sl
 8007cce:	d204      	bcs.n	8007cda <dhcp_recv+0x246>
 8007cd0:	9b05      	ldr	r3, [sp, #20]
 8007cd2:	5d1a      	ldrb	r2, [r3, r4]
 8007cd4:	2aff      	cmp	r2, #255	; 0xff
 8007cd6:	f47f af36 	bne.w	8007b46 <dhcp_recv+0xb2>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8007cda:	f899 3009 	ldrb.w	r3, [r9, #9]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d132      	bne.n	8007d48 <dhcp_recv+0x2b4>
  } else if (parse_sname_as_options) {
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d138      	bne.n	8007d5a <dhcp_recv+0x2c6>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8007ce8:	f899 300a 	ldrb.w	r3, [r9, #10]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f43f af18 	beq.w	8007b22 <dhcp_recv+0x8e>
  msg_in = (struct dhcp_msg *)p->payload;
 8007cf2:	9b01      	ldr	r3, [sp, #4]
 8007cf4:	6859      	ldr	r1, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8007cf6:	f899 3018 	ldrb.w	r3, [r9, #24]
  if (msg_type == DHCP_ACK) {
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	d148      	bne.n	8007d90 <dhcp_recv+0x2fc>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8007cfe:	9b02      	ldr	r3, [sp, #8]
 8007d00:	795b      	ldrb	r3, [r3, #5]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d139      	bne.n	8007d7a <dhcp_recv+0x2e6>
      dhcp_handle_ack(netif, msg_in);
 8007d06:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007d08:	f7ff fde4 	bl	80078d4 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8007d0c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
        dhcp_check(netif);
 8007d10:	4630      	mov	r0, r6
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8007d12:	071b      	lsls	r3, r3, #28
 8007d14:	d539      	bpl.n	8007d8a <dhcp_recv+0x2f6>
        dhcp_check(netif);
 8007d16:	f7ff fc6b 	bl	80075f0 <dhcp_check>
 8007d1a:	e702      	b.n	8007b22 <dhcp_recv+0x8e>
 8007d1c:	20006a7c 	.word	0x20006a7c
 8007d20:	0801b3de 	.word	0x0801b3de
 8007d24:	0801b663 	.word	0x0801b663
 8007d28:	0801a5dc 	.word	0x0801a5dc
 8007d2c:	0801b65a 	.word	0x0801b65a
 8007d30:	0801b675 	.word	0x0801b675
 8007d34:	0801b67e 	.word	0x0801b67e
 8007d38:	0801b6b9 	.word	0x0801b6b9
 8007d3c:	0801b695 	.word	0x0801b695
 8007d40:	0801b6a6 	.word	0x0801b6a6
 8007d44:	2000694c 	.word	0x2000694c
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007d48:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007d4c:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 8007d4e:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007d50:	f889 2009 	strb.w	r2, [r9, #9]
    if (overload == DHCP_OVERLOAD_FILE) {
 8007d54:	d00c      	beq.n	8007d70 <dhcp_recv+0x2dc>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d106      	bne.n	8007d68 <dhcp_recv+0x2d4>
    parse_sname_as_options = 0;
 8007d5a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8007d5c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8007d60:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	e6cd      	b.n	8007b04 <dhcp_recv+0x70>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d1ba      	bne.n	8007ce2 <dhcp_recv+0x24e>
      parse_sname_as_options = 1;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8007d70:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8007d74:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8007d78:	e6c4      	b.n	8007b04 <dhcp_recv+0x70>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8007d7a:	3b03      	subs	r3, #3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	f63f aed0 	bhi.w	8007b22 <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
 8007d82:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007d84:	f7ff fda6 	bl	80078d4 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff fc47 	bl	800761c <dhcp_bind>
 8007d8e:	e6c8      	b.n	8007b22 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
 8007d90:	2b06      	cmp	r3, #6
 8007d92:	d115      	bne.n	8007dc0 <dhcp_recv+0x32c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8007d94:	9b02      	ldr	r3, [sp, #8]
 8007d96:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8007d98:	1eda      	subs	r2, r3, #3
 8007d9a:	2a02      	cmp	r2, #2
 8007d9c:	d902      	bls.n	8007da4 <dhcp_recv+0x310>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	f47f aebf 	bne.w	8007b22 <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007da4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8007da6:	210c      	movs	r1, #12
 8007da8:	f7ff fa78 	bl	800729c <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007dac:	4b3e      	ldr	r3, [pc, #248]	; (8007ea8 <dhcp_recv+0x414>)
 8007dae:	4630      	mov	r0, r6
 8007db0:	461a      	mov	r2, r3
 8007db2:	4619      	mov	r1, r3
 8007db4:	f002 f8ca 	bl	8009f4c <netif_set_addr>
  dhcp_discover(netif);
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7ff fba1 	bl	8007500 <dhcp_discover>
}
 8007dbe:	e6b0      	b.n	8007b22 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	f47f aeae 	bne.w	8007b22 <dhcp_recv+0x8e>
 8007dc6:	9b02      	ldr	r3, [sp, #8]
 8007dc8:	795b      	ldrb	r3, [r3, #5]
 8007dca:	2b06      	cmp	r3, #6
 8007dcc:	f47f aea9 	bne.w	8007b22 <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8007dd0:	f899 300b 	ldrb.w	r3, [r9, #11]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f43f aea4 	beq.w	8007b22 <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007dda:	6a74      	ldr	r4, [r6, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8007ddc:	9b03      	ldr	r3, [sp, #12]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007dde:	f8d9 001c 	ldr.w	r0, [r9, #28]
    dhcp->request_timeout = 0; /* stop timer */
 8007de2:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007de4:	9102      	str	r1, [sp, #8]
 8007de6:	f001 fd10 	bl	800980a <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007dea:	9902      	ldr	r1, [sp, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007dec:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
 8007dee:	4630      	mov	r0, r6
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007df0:	690b      	ldr	r3, [r1, #16]
 8007df2:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8007df4:	f7ff fd9c 	bl	8007930 <dhcp_select.isra.0>
 8007df8:	e693      	b.n	8007b22 <dhcp_recv+0x8e>
    switch (op) {
 8007dfa:	2a3b      	cmp	r2, #59	; 0x3b
 8007dfc:	f63f af06 	bhi.w	8007c0c <dhcp_recv+0x178>
 8007e00:	2a32      	cmp	r2, #50	; 0x32
 8007e02:	d806      	bhi.n	8007e12 <dhcp_recv+0x37e>
 8007e04:	2a01      	cmp	r2, #1
 8007e06:	f43f aec8 	beq.w	8007b9a <dhcp_recv+0x106>
 8007e0a:	2a03      	cmp	r2, #3
 8007e0c:	f43f aeb3 	beq.w	8007b76 <dhcp_recv+0xe2>
 8007e10:	e6fc      	b.n	8007c0c <dhcp_recv+0x178>
 8007e12:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	f63f aef7 	bhi.w	8007c0a <dhcp_recv+0x176>
 8007e1c:	a101      	add	r1, pc, #4	; (adr r1, 8007e24 <dhcp_recv+0x390>)
 8007e1e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007bab 	.word	0x08007bab
 8007e28:	08007bb7 	.word	0x08007bb7
 8007e2c:	08007bd9 	.word	0x08007bd9
 8007e30:	08007be7 	.word	0x08007be7
 8007e34:	08007c0b 	.word	0x08007c0b
 8007e38:	08007c0b 	.word	0x08007c0b
 8007e3c:	08007c0b 	.word	0x08007c0b
 8007e40:	08007bf5 	.word	0x08007bf5
 8007e44:	08007c03 	.word	0x08007c03
 8007e48:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8007e4a:	2506      	movs	r5, #6
 8007e4c:	e6f8      	b.n	8007c40 <dhcp_recv+0x1ac>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8007e4e:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
 8007e50:	f04f 0804 	mov.w	r8, #4
 8007e54:	e6f4      	b.n	8007c40 <dhcp_recv+0x1ac>
 8007e56:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8007e58:	2503      	movs	r5, #3
 8007e5a:	e6f1      	b.n	8007c40 <dhcp_recv+0x1ac>
    decode_len = len;
 8007e5c:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8007e5e:	2500      	movs	r5, #0
 8007e60:	e6ee      	b.n	8007c40 <dhcp_recv+0x1ac>
 8007e62:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8007e64:	2502      	movs	r5, #2
 8007e66:	e6eb      	b.n	8007c40 <dhcp_recv+0x1ac>
 8007e68:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8007e6a:	461d      	mov	r5, r3
 8007e6c:	e6e8      	b.n	8007c40 <dhcp_recv+0x1ac>
 8007e6e:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8007e70:	2505      	movs	r5, #5
    if (op == DHCP_OPTION_PAD) {
 8007e72:	e6e5      	b.n	8007c40 <dhcp_recv+0x1ac>
    switch (op) {
 8007e74:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8007e78:	2908      	cmp	r1, #8
 8007e7a:	f63f aec7 	bhi.w	8007c0c <dhcp_recv+0x178>
 8007e7e:	a501      	add	r5, pc, #4	; (adr r5, 8007e84 <dhcp_recv+0x3f0>)
 8007e80:	f855 f021 	ldr.w	pc, [r5, r1, lsl #2]
 8007e84:	08007ba5 	.word	0x08007ba5
 8007e88:	08007bb3 	.word	0x08007bb3
 8007e8c:	08007bd3 	.word	0x08007bd3
 8007e90:	08007be1 	.word	0x08007be1
 8007e94:	08007c0d 	.word	0x08007c0d
 8007e98:	08007c0d 	.word	0x08007c0d
 8007e9c:	08007c0d 	.word	0x08007c0d
 8007ea0:	08007bef 	.word	0x08007bef
 8007ea4:	08007bfd 	.word	0x08007bfd
 8007ea8:	08011768 	.word	0x08011768

08007eac <dhcp_arp_reply>:
{
 8007eac:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007eae:	4606      	mov	r6, r0
{
 8007eb0:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007eb2:	b948      	cbnz	r0, 8007ec8 <dhcp_arp_reply+0x1c>
 8007eb4:	4b28      	ldr	r3, [pc, #160]	; (8007f58 <dhcp_arp_reply+0xac>)
 8007eb6:	f240 328b 	movw	r2, #907	; 0x38b
 8007eba:	4928      	ldr	r1, [pc, #160]	; (8007f5c <dhcp_arp_reply+0xb0>)
 8007ebc:	4828      	ldr	r0, [pc, #160]	; (8007f60 <dhcp_arp_reply+0xb4>)
}
 8007ebe:	b007      	add	sp, #28
 8007ec0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007ec4:	f007 b806 	b.w	800eed4 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8007ec8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8007eca:	2c00      	cmp	r4, #0
 8007ecc:	d041      	beq.n	8007f52 <dhcp_arp_reply+0xa6>
 8007ece:	7963      	ldrb	r3, [r4, #5]
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d13e      	bne.n	8007f52 <dhcp_arp_reply+0xa6>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8007ed4:	680a      	ldr	r2, [r1, #0]
 8007ed6:	69e3      	ldr	r3, [r4, #28]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d13a      	bne.n	8007f52 <dhcp_arp_reply+0xa6>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007edc:	210c      	movs	r1, #12
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f7ff f9dc 	bl	800729c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	f10d 0316 	add.w	r3, sp, #22
 8007eea:	4621      	mov	r1, r4
 8007eec:	4630      	mov	r0, r6
 8007eee:	f7ff fa53 	bl	8007398 <dhcp_create_msg>
  if (p_out != NULL) {
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	b330      	cbz	r0, 8007f44 <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007ef6:	6841      	ldr	r1, [r0, #4]
 8007ef8:	2304      	movs	r3, #4
 8007efa:	2232      	movs	r2, #50	; 0x32
 8007efc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007f00:	31f0      	adds	r1, #240	; 0xf0
 8007f02:	9103      	str	r1, [sp, #12]
 8007f04:	f7ff f9ee 	bl	80072e4 <dhcp_option>
 8007f08:	4607      	mov	r7, r0
 8007f0a:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007f0e:	69e0      	ldr	r0, [r4, #28]
 8007f10:	f001 fc7b 	bl	800980a <lwip_htonl>
 8007f14:	9903      	ldr	r1, [sp, #12]
 8007f16:	4602      	mov	r2, r0
 8007f18:	4638      	mov	r0, r7
 8007f1a:	f7ff fa19 	bl	8007350 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007f1e:	462a      	mov	r2, r5
 8007f20:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007f22:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007f26:	f7ff facb 	bl	80074c0 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007f2a:	4b0e      	ldr	r3, [pc, #56]	; (8007f64 <dhcp_arp_reply+0xb8>)
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	480e      	ldr	r0, [pc, #56]	; (8007f68 <dhcp_arp_reply+0xbc>)
 8007f30:	4a0e      	ldr	r2, [pc, #56]	; (8007f6c <dhcp_arp_reply+0xc0>)
 8007f32:	e9cd 6300 	strd	r6, r3, [sp]
 8007f36:	2343      	movs	r3, #67	; 0x43
 8007f38:	6840      	ldr	r0, [r0, #4]
 8007f3a:	f005 fff7 	bl	800df2c <udp_sendto_if_src>
    pbuf_free(p_out);
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f002 f9b6 	bl	800a2b0 <pbuf_free>
  if (dhcp->tries < 255) {
 8007f44:	79a3      	ldrb	r3, [r4, #6]
 8007f46:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007f48:	bf1c      	itt	ne
 8007f4a:	3301      	addne	r3, #1
 8007f4c:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007f4e:	2314      	movs	r3, #20
 8007f50:	8123      	strh	r3, [r4, #8]
}
 8007f52:	b007      	add	sp, #28
 8007f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f56:	bf00      	nop
 8007f58:	0801b3de 	.word	0x0801b3de
 8007f5c:	0801b5b6 	.word	0x0801b5b6
 8007f60:	0801a5dc 	.word	0x0801a5dc
 8007f64:	08011768 	.word	0x08011768
 8007f68:	2000694c 	.word	0x2000694c
 8007f6c:	08011764 	.word	0x08011764

08007f70 <dhcp_renew>:
{
 8007f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007f74:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007f76:	b086      	sub	sp, #24
 8007f78:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8007f7a:	2105      	movs	r1, #5
 8007f7c:	4620      	mov	r0, r4
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007f7e:	2203      	movs	r2, #3
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8007f80:	f7ff f98c 	bl	800729c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007f84:	f10d 0316 	add.w	r3, sp, #22
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff fa04 	bl	8007398 <dhcp_create_msg>
  if (p_out != NULL) {
 8007f90:	4605      	mov	r5, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d056      	beq.n	8008044 <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007f96:	6841      	ldr	r1, [r0, #4]
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2239      	movs	r2, #57	; 0x39
 8007f9c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007fa0:	31f0      	adds	r1, #240	; 0xf0
 8007fa2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008050 <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007fa6:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007fa8:	9103      	str	r1, [sp, #12]
 8007faa:	f7ff f99b 	bl	80072e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007fae:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8007fb0:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007fb2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007fb6:	f7ff f979 	bl	80072ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007fba:	9903      	ldr	r1, [sp, #12]
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007fc0:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007fc4:	f7ff f98e 	bl	80072e4 <dhcp_option>
 8007fc8:	9903      	ldr	r1, [sp, #12]
 8007fca:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007fce:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007fd0:	f818 2b01 	ldrb.w	r2, [r8], #1
 8007fd4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007fd8:	9103      	str	r1, [sp, #12]
 8007fda:	f7ff f9a1 	bl	8007320 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007fde:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8007fe2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007fe4:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007fe8:	d1f1      	bne.n	8007fce <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007fea:	462a      	mov	r2, r5
 8007fec:	f7ff fa68 	bl	80074c0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007ff0:	4816      	ldr	r0, [pc, #88]	; (800804c <dhcp_renew+0xdc>)
 8007ff2:	9600      	str	r6, [sp, #0]
 8007ff4:	2343      	movs	r3, #67	; 0x43
 8007ff6:	f104 0218 	add.w	r2, r4, #24
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	6840      	ldr	r0, [r0, #4]
 8007ffe:	f006 f82d 	bl	800e05c <udp_sendto_if>
 8008002:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8008004:	4628      	mov	r0, r5
 8008006:	f002 f953 	bl	800a2b0 <pbuf_free>
  if (dhcp->tries < 255) {
 800800a:	79a3      	ldrb	r3, [r4, #6]
}
 800800c:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 800800e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008010:	bf1c      	itt	ne
 8008012:	3301      	addne	r3, #1
 8008014:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8008016:	79a3      	ldrb	r3, [r4, #6]
 8008018:	2b09      	cmp	r3, #9
 800801a:	bf96      	itet	ls
 800801c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008020:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8008024:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008028:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800802c:	bf9c      	itt	ls
 800802e:	011b      	lslls	r3, r3, #4
 8008030:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008032:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008036:	b29b      	uxth	r3, r3
 8008038:	fbb3 f3f2 	udiv	r3, r3, r2
 800803c:	8123      	strh	r3, [r4, #8]
}
 800803e:	b006      	add	sp, #24
 8008040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8008044:	f04f 36ff 	mov.w	r6, #4294967295
 8008048:	e7df      	b.n	800800a <dhcp_renew+0x9a>
 800804a:	bf00      	nop
 800804c:	2000694c 	.word	0x2000694c
 8008050:	0801175e 	.word	0x0801175e

08008054 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8008054:	b150      	cbz	r0, 800806c <dhcp_supplied_address+0x18>
 8008056:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008058:	b140      	cbz	r0, 800806c <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800805a:	7940      	ldrb	r0, [r0, #5]
 800805c:	280a      	cmp	r0, #10
 800805e:	d006      	beq.n	800806e <dhcp_supplied_address+0x1a>
 8008060:	3804      	subs	r0, #4
 8008062:	2801      	cmp	r0, #1
 8008064:	bf8c      	ite	hi
 8008066:	2000      	movhi	r0, #0
 8008068:	2001      	movls	r0, #1
 800806a:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800806c:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800806e:	2001      	movs	r0, #1
 8008070:	e7fb      	b.n	800806a <dhcp_supplied_address+0x16>
	...

08008074 <dhcp_release_and_stop>:
{
 8008074:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008076:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008078:	b087      	sub	sp, #28
 800807a:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800807c:	2c00      	cmp	r4, #0
 800807e:	d050      	beq.n	8008122 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8008080:	7963      	ldrb	r3, [r4, #5]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d04d      	beq.n	8008122 <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8008086:	69a3      	ldr	r3, [r4, #24]
 8008088:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800808a:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800808c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008090:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8008094:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8008098:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800809a:	81e3      	strh	r3, [r4, #14]
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 80080a0:	f7ff ffd8 	bl	8008054 <dhcp_supplied_address>
 80080a4:	b368      	cbz	r0, 8008102 <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80080a6:	f10d 0312 	add.w	r3, sp, #18
 80080aa:	2207      	movs	r2, #7
 80080ac:	4621      	mov	r1, r4
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7ff f972 	bl	8007398 <dhcp_create_msg>
    if (p_out != NULL) {
 80080b4:	4605      	mov	r5, r0
 80080b6:	b320      	cbz	r0, 8008102 <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80080b8:	6841      	ldr	r1, [r0, #4]
 80080ba:	2304      	movs	r3, #4
 80080bc:	2236      	movs	r2, #54	; 0x36
 80080be:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 80080c2:	31f0      	adds	r1, #240	; 0xf0
 80080c4:	9103      	str	r1, [sp, #12]
 80080c6:	f7ff f90d 	bl	80072e4 <dhcp_option>
 80080ca:	4607      	mov	r7, r0
 80080cc:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80080d0:	9805      	ldr	r0, [sp, #20]
 80080d2:	f001 fb9a 	bl	800980a <lwip_htonl>
 80080d6:	9903      	ldr	r1, [sp, #12]
 80080d8:	4602      	mov	r2, r0
 80080da:	4638      	mov	r0, r7
 80080dc:	f7ff f938 	bl	8007350 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80080e0:	462a      	mov	r2, r5
 80080e2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80080e4:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80080e8:	f7ff f9ea 	bl	80074c0 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80080ec:	480e      	ldr	r0, [pc, #56]	; (8008128 <dhcp_release_and_stop+0xb4>)
 80080ee:	2343      	movs	r3, #67	; 0x43
 80080f0:	9600      	str	r6, [sp, #0]
 80080f2:	aa05      	add	r2, sp, #20
 80080f4:	4629      	mov	r1, r5
 80080f6:	6840      	ldr	r0, [r0, #4]
 80080f8:	f005 ffb0 	bl	800e05c <udp_sendto_if>
      pbuf_free(p_out);
 80080fc:	4628      	mov	r0, r5
 80080fe:	f002 f8d7 	bl	800a2b0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <dhcp_release_and_stop+0xb8>)
 8008104:	4630      	mov	r0, r6
 8008106:	4619      	mov	r1, r3
 8008108:	461a      	mov	r2, r3
 800810a:	f001 ff1f 	bl	8009f4c <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800810e:	2100      	movs	r1, #0
 8008110:	4620      	mov	r0, r4
 8008112:	f7ff f8c3 	bl	800729c <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8008116:	7923      	ldrb	r3, [r4, #4]
 8008118:	b11b      	cbz	r3, 8008122 <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800811a:	f7ff fb3d 	bl	8007798 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	7123      	strb	r3, [r4, #4]
}
 8008122:	b007      	add	sp, #28
 8008124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008126:	bf00      	nop
 8008128:	2000694c 	.word	0x2000694c
 800812c:	08011768 	.word	0x08011768

08008130 <dhcp_start>:
{
 8008130:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008132:	4604      	mov	r4, r0
 8008134:	b950      	cbnz	r0, 800814c <dhcp_start+0x1c>
 8008136:	4b24      	ldr	r3, [pc, #144]	; (80081c8 <dhcp_start+0x98>)
 8008138:	f240 22e7 	movw	r2, #743	; 0x2e7
 800813c:	4923      	ldr	r1, [pc, #140]	; (80081cc <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800813e:	4824      	ldr	r0, [pc, #144]	; (80081d0 <dhcp_start+0xa0>)
 8008140:	f006 fec8 	bl	800eed4 <iprintf>
 8008144:	f06f 020f 	mvn.w	r2, #15
}
 8008148:	4610      	mov	r0, r2
 800814a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800814c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008150:	07da      	lsls	r2, r3, #31
 8008152:	d404      	bmi.n	800815e <dhcp_start+0x2e>
 8008154:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <dhcp_start+0x98>)
 8008156:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800815a:	491e      	ldr	r1, [pc, #120]	; (80081d4 <dhcp_start+0xa4>)
 800815c:	e7ef      	b.n	800813e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800815e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8008160:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008162:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008166:	d202      	bcs.n	800816e <dhcp_start+0x3e>
    return ERR_MEM;
 8008168:	f04f 32ff 	mov.w	r2, #4294967295
 800816c:	e7ec      	b.n	8008148 <dhcp_start+0x18>
  if (dhcp == NULL) {
 800816e:	b9dd      	cbnz	r5, 80081a8 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8008170:	2034      	movs	r0, #52	; 0x34
 8008172:	f001 fd65 	bl	8009c40 <mem_malloc>
    if (dhcp == NULL) {
 8008176:	4605      	mov	r5, r0
 8008178:	2800      	cmp	r0, #0
 800817a:	d0f5      	beq.n	8008168 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800817c:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 800817e:	2234      	movs	r2, #52	; 0x34
 8008180:	2100      	movs	r1, #0
 8008182:	4628      	mov	r0, r5
 8008184:	f006 fa34 	bl	800e5f0 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008188:	f7ff fad0 	bl	800772c <dhcp_inc_pcb_refcount>
 800818c:	4602      	mov	r2, r0
 800818e:	2800      	cmp	r0, #0
 8008190:	d1ea      	bne.n	8008168 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8008192:	2301      	movs	r3, #1
 8008194:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8008196:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800819a:	075b      	lsls	r3, r3, #29
 800819c:	d40a      	bmi.n	80081b4 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800819e:	2102      	movs	r1, #2
 80081a0:	4628      	mov	r0, r5
 80081a2:	f7ff f87b 	bl	800729c <dhcp_set_state>
    return ERR_OK;
 80081a6:	e7cf      	b.n	8008148 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 80081a8:	792b      	ldrb	r3, [r5, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0e7      	beq.n	800817e <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80081ae:	f7ff faf3 	bl	8007798 <dhcp_dec_pcb_refcount>
 80081b2:	e7e4      	b.n	800817e <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 80081b4:	4620      	mov	r0, r4
 80081b6:	f7ff f9a3 	bl	8007500 <dhcp_discover>
  if (result != ERR_OK) {
 80081ba:	4602      	mov	r2, r0
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0c3      	beq.n	8008148 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff ff57 	bl	8008074 <dhcp_release_and_stop>
 80081c6:	e7cf      	b.n	8008168 <dhcp_start+0x38>
 80081c8:	0801b3de 	.word	0x0801b3de
 80081cc:	0801b5b6 	.word	0x0801b5b6
 80081d0:	0801a5dc 	.word	0x0801a5dc
 80081d4:	0801b704 	.word	0x0801b704

080081d8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80081d8:	4b59      	ldr	r3, [pc, #356]	; (8008340 <dhcp_coarse_tmr+0x168>)
{
 80081da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80081de:	681d      	ldr	r5, [r3, #0]
{
 80081e0:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80081e2:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80081e6:	4f57      	ldr	r7, [pc, #348]	; (8008344 <dhcp_coarse_tmr+0x16c>)
 80081e8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8008348 <dhcp_coarse_tmr+0x170>
  NETIF_FOREACH(netif) {
 80081ec:	b915      	cbnz	r5, 80081f4 <dhcp_coarse_tmr+0x1c>
}
 80081ee:	b007      	add	sp, #28
 80081f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80081f4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80081f6:	b17c      	cbz	r4, 8008218 <dhcp_coarse_tmr+0x40>
 80081f8:	7963      	ldrb	r3, [r4, #5]
 80081fa:	b16b      	cbz	r3, 8008218 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80081fc:	8aa1      	ldrh	r1, [r4, #20]
 80081fe:	b169      	cbz	r1, 800821c <dhcp_coarse_tmr+0x44>
 8008200:	8a62      	ldrh	r2, [r4, #18]
 8008202:	3201      	adds	r2, #1
 8008204:	b292      	uxth	r2, r2
 8008206:	4291      	cmp	r1, r2
 8008208:	8262      	strh	r2, [r4, #18]
 800820a:	d107      	bne.n	800821c <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 800820c:	4628      	mov	r0, r5
 800820e:	f7ff ff31 	bl	8008074 <dhcp_release_and_stop>
        dhcp_start(netif);
 8008212:	4628      	mov	r0, r5
 8008214:	f7ff ff8c 	bl	8008130 <dhcp_start>
  NETIF_FOREACH(netif) {
 8008218:	682d      	ldr	r5, [r5, #0]
 800821a:	e7e7      	b.n	80081ec <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800821c:	8a22      	ldrh	r2, [r4, #16]
 800821e:	2a00      	cmp	r2, #0
 8008220:	d073      	beq.n	800830a <dhcp_coarse_tmr+0x132>
 8008222:	1e51      	subs	r1, r2, #1
 8008224:	2a01      	cmp	r2, #1
 8008226:	8221      	strh	r1, [r4, #16]
 8008228:	d16f      	bne.n	800830a <dhcp_coarse_tmr+0x132>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800822a:	3b01      	subs	r3, #1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b09      	cmp	r3, #9
 8008230:	d8f2      	bhi.n	8008218 <dhcp_coarse_tmr+0x40>
 8008232:	fa26 f303 	lsr.w	r3, r6, r3
 8008236:	07db      	lsls	r3, r3, #31
 8008238:	d5ee      	bpl.n	8008218 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800823a:	2104      	movs	r1, #4
 800823c:	4620      	mov	r0, r4
 800823e:	f7ff f82d 	bl	800729c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008242:	2203      	movs	r2, #3
 8008244:	f10d 0316 	add.w	r3, sp, #22
 8008248:	4621      	mov	r1, r4
 800824a:	4628      	mov	r0, r5
 800824c:	f7ff f8a4 	bl	8007398 <dhcp_create_msg>
  if (p_out != NULL) {
 8008250:	4681      	mov	r9, r0
 8008252:	2800      	cmp	r0, #0
 8008254:	d038      	beq.n	80082c8 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008256:	6841      	ldr	r1, [r0, #4]
 8008258:	2302      	movs	r3, #2
 800825a:	2239      	movs	r2, #57	; 0x39
 800825c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008260:	31f0      	adds	r1, #240	; 0xf0
 8008262:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 800834c <dhcp_coarse_tmr+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008266:	f04f 0a03 	mov.w	sl, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800826a:	9103      	str	r1, [sp, #12]
 800826c:	f7ff f83a 	bl	80072e4 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008270:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8008272:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008274:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008278:	f7ff f818 	bl	80072ac <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800827c:	9903      	ldr	r1, [sp, #12]
 800827e:	2303      	movs	r3, #3
 8008280:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008282:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008286:	f7ff f82d 	bl	80072e4 <dhcp_option>
 800828a:	9903      	ldr	r1, [sp, #12]
 800828c:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008290:	f10a 3aff 	add.w	sl, sl, #4294967295
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008294:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8008298:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800829c:	9103      	str	r1, [sp, #12]
 800829e:	f7ff f83f 	bl	8007320 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80082a2:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 80082a6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80082a8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80082ac:	d1f0      	bne.n	8008290 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80082ae:	464a      	mov	r2, r9
 80082b0:	f7ff f906 	bl	80074c0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80082b4:	2343      	movs	r3, #67	; 0x43
 80082b6:	4642      	mov	r2, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	9500      	str	r5, [sp, #0]
 80082be:	f005 fecd 	bl	800e05c <udp_sendto_if>
    pbuf_free(p_out);
 80082c2:	4648      	mov	r0, r9
 80082c4:	f001 fff4 	bl	800a2b0 <pbuf_free>
  if (dhcp->tries < 255) {
 80082c8:	79a3      	ldrb	r3, [r4, #6]
 80082ca:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80082cc:	bf1c      	itt	ne
 80082ce:	3301      	addne	r3, #1
 80082d0:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80082d2:	79a3      	ldrb	r3, [r4, #6]
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	bf96      	itet	ls
 80082d8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80082dc:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80082e0:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80082e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80082e8:	bf9c      	itt	ls
 80082ea:	00db      	lslls	r3, r3, #3
 80082ec:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80082ee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80082f8:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80082fa:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80082fc:	8aa3      	ldrh	r3, [r4, #20]
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	2b01      	cmp	r3, #1
 8008302:	dd89      	ble.n	8008218 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8008304:	105b      	asrs	r3, r3, #1
 8008306:	8223      	strh	r3, [r4, #16]
 8008308:	e786      	b.n	8008218 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800830a:	89e2      	ldrh	r2, [r4, #14]
 800830c:	2a00      	cmp	r2, #0
 800830e:	d083      	beq.n	8008218 <dhcp_coarse_tmr+0x40>
 8008310:	1e51      	subs	r1, r2, #1
 8008312:	2a01      	cmp	r2, #1
 8008314:	81e1      	strh	r1, [r4, #14]
 8008316:	f47f af7f 	bne.w	8008218 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800831a:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800831e:	2a01      	cmp	r2, #1
 8008320:	d002      	beq.n	8008328 <dhcp_coarse_tmr+0x150>
 8008322:	2b0a      	cmp	r3, #10
 8008324:	f47f af78 	bne.w	8008218 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8008328:	4628      	mov	r0, r5
 800832a:	f7ff fe21 	bl	8007f70 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	8a62      	ldrh	r2, [r4, #18]
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8008336:	bfc4      	itt	gt
 8008338:	105b      	asrgt	r3, r3, #1
 800833a:	81e3      	strhgt	r3, [r4, #14]
 800833c:	e76c      	b.n	8008218 <dhcp_coarse_tmr+0x40>
 800833e:	bf00      	nop
 8008340:	2000cff8 	.word	0x2000cff8
 8008344:	2000694c 	.word	0x2000694c
 8008348:	08011764 	.word	0x08011764
 800834c:	0801175e 	.word	0x0801175e

08008350 <dhcp_fine_tmr>:
{
 8008350:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8008352:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8008354:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8008356:	681c      	ldr	r4, [r3, #0]
 8008358:	b904      	cbnz	r4, 800835c <dhcp_fine_tmr+0xc>
}
 800835a:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800835c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800835e:	b123      	cbz	r3, 800836a <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8008360:	891a      	ldrh	r2, [r3, #8]
 8008362:	2a01      	cmp	r2, #1
 8008364:	d903      	bls.n	800836e <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8008366:	3a01      	subs	r2, #1
 8008368:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 800836a:	6824      	ldr	r4, [r4, #0]
 800836c:	e7f4      	b.n	8008358 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 800836e:	d1fc      	bne.n	800836a <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008370:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8008372:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008374:	2a0c      	cmp	r2, #12
 8008376:	d001      	beq.n	800837c <dhcp_fine_tmr+0x2c>
 8008378:	2a06      	cmp	r2, #6
 800837a:	d103      	bne.n	8008384 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 800837c:	4620      	mov	r0, r4
      dhcp_discover(netif);
 800837e:	f7ff f8bf 	bl	8007500 <dhcp_discover>
 8008382:	e7f2      	b.n	800836a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8008384:	2a01      	cmp	r2, #1
 8008386:	d10c      	bne.n	80083a2 <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8008388:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 800838a:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 800838c:	2b05      	cmp	r3, #5
 800838e:	d802      	bhi.n	8008396 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8008390:	f7ff face 	bl	8007930 <dhcp_select.isra.0>
 8008394:	e7e9      	b.n	800836a <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8008396:	f7ff fe6d 	bl	8008074 <dhcp_release_and_stop>
      dhcp_start(netif);
 800839a:	4620      	mov	r0, r4
 800839c:	f7ff fec8 	bl	8008130 <dhcp_start>
 80083a0:	e7e3      	b.n	800836a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80083a2:	2a08      	cmp	r2, #8
 80083a4:	d109      	bne.n	80083ba <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 80083a6:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 80083a8:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d802      	bhi.n	80083b4 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 80083ae:	f7ff f91f 	bl	80075f0 <dhcp_check>
 80083b2:	e7da      	b.n	800836a <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80083b4:	f7ff f932 	bl	800761c <dhcp_bind>
 80083b8:	e7d7      	b.n	800836a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80083ba:	2a03      	cmp	r2, #3
 80083bc:	d1d5      	bne.n	800836a <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80083be:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80083c0:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d8db      	bhi.n	800837e <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 80083c6:	f7ff fa03 	bl	80077d0 <dhcp_reboot.isra.0>
 80083ca:	e7ce      	b.n	800836a <dhcp_fine_tmr+0x1a>
 80083cc:	2000cff8 	.word	0x2000cff8

080083d0 <dhcp_stop>:
  dhcp_release_and_stop(netif);
 80083d0:	f7ff be50 	b.w	8008074 <dhcp_release_and_stop>

080083d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80083d4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80083d6:	2618      	movs	r6, #24
 80083d8:	4c07      	ldr	r4, [pc, #28]	; (80083f8 <etharp_free_entry+0x24>)
{
 80083da:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80083dc:	4346      	muls	r6, r0
 80083de:	59a0      	ldr	r0, [r4, r6]
 80083e0:	b118      	cbz	r0, 80083ea <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80083e2:	f001 ff65 	bl	800a2b0 <pbuf_free>
    arp_table[i].q = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80083ea:	2018      	movs	r0, #24
 80083ec:	2300      	movs	r3, #0
 80083ee:	fb00 4405 	mla	r4, r0, r5, r4
 80083f2:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	bf00      	nop
 80083f8:	20006980 	.word	0x20006980

080083fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80083fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008402:	f04f 0e0a 	mov.w	lr, #10
{
 8008406:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008408:	4699      	mov	r9, r3
 800840a:	469b      	mov	fp, r3
 800840c:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 800840e:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008410:	4675      	mov	r5, lr
 8008412:	46f0      	mov	r8, lr
{
 8008414:	e9cd 2100 	strd	r2, r1, [sp]
 8008418:	4a3a      	ldr	r2, [pc, #232]	; (8008504 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800841a:	2c0a      	cmp	r4, #10
 800841c:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 800841e:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008422:	d11a      	bne.n	800845a <etharp_find_entry+0x5e>
 8008424:	f1ba 0f00 	cmp.w	sl, #0
 8008428:	d05d      	beq.n	80084e6 <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800842a:	b156      	cbz	r6, 8008442 <etharp_find_entry+0x46>
 800842c:	6831      	ldr	r1, [r6, #0]
 800842e:	6857      	ldr	r7, [r2, #4]
 8008430:	42b9      	cmp	r1, r7
 8008432:	d106      	bne.n	8008442 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008434:	9900      	ldr	r1, [sp, #0]
 8008436:	2900      	cmp	r1, #0
 8008438:	d048      	beq.n	80084cc <etharp_find_entry+0xd0>
 800843a:	6891      	ldr	r1, [r2, #8]
 800843c:	9f00      	ldr	r7, [sp, #0]
 800843e:	42b9      	cmp	r1, r7
 8008440:	d044      	beq.n	80084cc <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008442:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 8008446:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 8008448:	d148      	bne.n	80084dc <etharp_find_entry+0xe0>
        if (arp_table[i].q != NULL) {
 800844a:	6817      	ldr	r7, [r2, #0]
 800844c:	2f00      	cmp	r7, #0
 800844e:	d040      	beq.n	80084d2 <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8008450:	4561      	cmp	r1, ip
 8008452:	d305      	bcc.n	8008460 <etharp_find_entry+0x64>
 8008454:	468c      	mov	ip, r1
 8008456:	4686      	mov	lr, r0
 8008458:	e002      	b.n	8008460 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 800845a:	f1ba 0f00 	cmp.w	sl, #0
 800845e:	d1e4      	bne.n	800842a <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008460:	3301      	adds	r3, #1
 8008462:	3218      	adds	r2, #24
 8008464:	2b0a      	cmp	r3, #10
 8008466:	d1d8      	bne.n	800841a <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8008468:	9b01      	ldr	r3, [sp, #4]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d143      	bne.n	80084f6 <etharp_find_entry+0xfa>
 800846e:	2c0a      	cmp	r4, #10
 8008470:	d111      	bne.n	8008496 <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8008472:	2d0a      	cmp	r5, #10
 8008474:	d039      	beq.n	80084ea <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008476:	2318      	movs	r3, #24
 8008478:	4a22      	ldr	r2, [pc, #136]	; (8008504 <etharp_find_entry+0x108>)
 800847a:	436b      	muls	r3, r5
 800847c:	58d3      	ldr	r3, [r2, r3]
 800847e:	b133      	cbz	r3, 800848e <etharp_find_entry+0x92>
 8008480:	4b21      	ldr	r3, [pc, #132]	; (8008508 <etharp_find_entry+0x10c>)
 8008482:	f240 126d 	movw	r2, #365	; 0x16d
 8008486:	4921      	ldr	r1, [pc, #132]	; (800850c <etharp_find_entry+0x110>)
 8008488:	4821      	ldr	r0, [pc, #132]	; (8008510 <etharp_find_entry+0x114>)
 800848a:	f006 fd23 	bl	800eed4 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800848e:	462c      	mov	r4, r5
 8008490:	4628      	mov	r0, r5
 8008492:	f7ff ff9f 	bl	80083d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008496:	4d1b      	ldr	r5, [pc, #108]	; (8008504 <etharp_find_entry+0x108>)
 8008498:	2318      	movs	r3, #24
 800849a:	fb03 5304 	mla	r3, r3, r4, r5
 800849e:	7d1b      	ldrb	r3, [r3, #20]
 80084a0:	b133      	cbz	r3, 80084b0 <etharp_find_entry+0xb4>
 80084a2:	4b19      	ldr	r3, [pc, #100]	; (8008508 <etharp_find_entry+0x10c>)
 80084a4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80084a8:	491a      	ldr	r1, [pc, #104]	; (8008514 <etharp_find_entry+0x118>)
 80084aa:	4819      	ldr	r0, [pc, #100]	; (8008510 <etharp_find_entry+0x114>)
 80084ac:	f006 fd12 	bl	800eed4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80084b0:	b126      	cbz	r6, 80084bc <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80084b2:	2318      	movs	r3, #24
 80084b4:	6832      	ldr	r2, [r6, #0]
 80084b6:	fb03 5304 	mla	r3, r3, r4, r5
 80084ba:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80084bc:	2318      	movs	r3, #24
 80084be:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80084c0:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 80084c2:	fb03 5304 	mla	r3, r3, r4, r5
 80084c6:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = netif;
 80084c8:	9a00      	ldr	r2, [sp, #0]
 80084ca:	609a      	str	r2, [r3, #8]
}
 80084cc:	b003      	add	sp, #12
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80084d2:	4559      	cmp	r1, fp
 80084d4:	d3c4      	bcc.n	8008460 <etharp_find_entry+0x64>
 80084d6:	468b      	mov	fp, r1
 80084d8:	4680      	mov	r8, r0
 80084da:	e7c1      	b.n	8008460 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 80084dc:	4549      	cmp	r1, r9
 80084de:	d3bf      	bcc.n	8008460 <etharp_find_entry+0x64>
 80084e0:	4689      	mov	r9, r1
 80084e2:	4605      	mov	r5, r0
 80084e4:	e7bc      	b.n	8008460 <etharp_find_entry+0x64>
 80084e6:	4604      	mov	r4, r0
 80084e8:	e7ba      	b.n	8008460 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80084ea:	f1b8 0f0a 	cmp.w	r8, #10
 80084ee:	d105      	bne.n	80084fc <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80084f0:	f1be 0f0a 	cmp.w	lr, #10
 80084f4:	d104      	bne.n	8008500 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	e7e7      	b.n	80084cc <etharp_find_entry+0xd0>
 80084fc:	4645      	mov	r5, r8
 80084fe:	e7c6      	b.n	800848e <etharp_find_entry+0x92>
 8008500:	4675      	mov	r5, lr
 8008502:	e7c4      	b.n	800848e <etharp_find_entry+0x92>
 8008504:	20006980 	.word	0x20006980
 8008508:	0801b725 	.word	0x0801b725
 800850c:	0801b78b 	.word	0x0801b78b
 8008510:	0801a5dc 	.word	0x0801a5dc
 8008514:	0801b7a2 	.word	0x0801b7a2

08008518 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8008518:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008520:	4688      	mov	r8, r1
 8008522:	4691      	mov	r9, r2
 8008524:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008526:	4607      	mov	r7, r0
 8008528:	b930      	cbnz	r0, 8008538 <etharp_raw+0x20>
 800852a:	4b2d      	ldr	r3, [pc, #180]	; (80085e0 <etharp_raw+0xc8>)
 800852c:	f240 4257 	movw	r2, #1111	; 0x457
 8008530:	492c      	ldr	r1, [pc, #176]	; (80085e4 <etharp_raw+0xcc>)
 8008532:	482d      	ldr	r0, [pc, #180]	; (80085e8 <etharp_raw+0xd0>)
 8008534:	f006 fcce 	bl	800eed4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008538:	f44f 7220 	mov.w	r2, #640	; 0x280
 800853c:	211c      	movs	r1, #28
 800853e:	200e      	movs	r0, #14
 8008540:	f001 ff1e 	bl	800a380 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008544:	4605      	mov	r5, r0
 8008546:	2800      	cmp	r0, #0
 8008548:	d047      	beq.n	80085da <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800854a:	8943      	ldrh	r3, [r0, #10]
 800854c:	2b1b      	cmp	r3, #27
 800854e:	d806      	bhi.n	800855e <etharp_raw+0x46>
 8008550:	4b23      	ldr	r3, [pc, #140]	; (80085e0 <etharp_raw+0xc8>)
 8008552:	f240 4262 	movw	r2, #1122	; 0x462
 8008556:	4925      	ldr	r1, [pc, #148]	; (80085ec <etharp_raw+0xd4>)
 8008558:	4823      	ldr	r0, [pc, #140]	; (80085e8 <etharp_raw+0xd0>)
 800855a:	f006 fcbb 	bl	800eed4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800855e:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008560:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8008564:	f001 f94e 	bl	8009804 <lwip_htons>
 8008568:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800856a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800856e:	2b06      	cmp	r3, #6
 8008570:	d006      	beq.n	8008580 <etharp_raw+0x68>
 8008572:	4b1b      	ldr	r3, [pc, #108]	; (80085e0 <etharp_raw+0xc8>)
 8008574:	f240 4269 	movw	r2, #1129	; 0x469
 8008578:	491d      	ldr	r1, [pc, #116]	; (80085f0 <etharp_raw+0xd8>)
 800857a:	481b      	ldr	r0, [pc, #108]	; (80085e8 <etharp_raw+0xd0>)
 800857c:	f006 fcaa 	bl	800eed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008580:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008582:	4642      	mov	r2, r8
 8008584:	4629      	mov	r1, r5
 8008586:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800858c:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800858e:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008590:	f8da 3000 	ldr.w	r3, [sl]
 8008594:	f8c4 3012 	str.w	r3, [r4, #18]
 8008598:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800859c:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800859e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80085a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a8:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80085aa:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80085ac:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80085ae:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80085b0:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80085b2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80085b4:	2308      	movs	r3, #8
 80085b6:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80085b8:	2306      	movs	r3, #6
 80085ba:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80085bc:	2304      	movs	r3, #4
 80085be:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80085c0:	f640 0306 	movw	r3, #2054	; 0x806
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	464b      	mov	r3, r9
 80085c8:	f005 fe72 	bl	800e2b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80085cc:	4628      	mov	r0, r5
 80085ce:	f001 fe6f 	bl	800a2b0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80085d2:	4630      	mov	r0, r6
}
 80085d4:	b002      	add	sp, #8
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80085da:	f04f 30ff 	mov.w	r0, #4294967295
 80085de:	e7f9      	b.n	80085d4 <etharp_raw+0xbc>
 80085e0:	0801b725 	.word	0x0801b725
 80085e4:	0801b5b6 	.word	0x0801b5b6
 80085e8:	0801a5dc 	.word	0x0801a5dc
 80085ec:	0801b7cb 	.word	0x0801b7cb
 80085f0:	0801b7fc 	.word	0x0801b7fc

080085f4 <etharp_cleanup_netif>:
{
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4606      	mov	r6, r0
 80085f8:	4d07      	ldr	r5, [pc, #28]	; (8008618 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80085fa:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80085fc:	7d2b      	ldrb	r3, [r5, #20]
 80085fe:	b12b      	cbz	r3, 800860c <etharp_cleanup_netif+0x18>
 8008600:	68ab      	ldr	r3, [r5, #8]
 8008602:	42b3      	cmp	r3, r6
 8008604:	d102      	bne.n	800860c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8008606:	4620      	mov	r0, r4
 8008608:	f7ff fee4 	bl	80083d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800860c:	3401      	adds	r4, #1
 800860e:	3518      	adds	r5, #24
 8008610:	2c0a      	cmp	r4, #10
 8008612:	d1f3      	bne.n	80085fc <etharp_cleanup_netif+0x8>
}
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	bf00      	nop
 8008618:	20006980 	.word	0x20006980

0800861c <etharp_input>:
{
 800861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	4607      	mov	r7, r0
 8008622:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008624:	460c      	mov	r4, r1
 8008626:	b949      	cbnz	r1, 800863c <etharp_input+0x20>
 8008628:	4b4f      	ldr	r3, [pc, #316]	; (8008768 <etharp_input+0x14c>)
 800862a:	f240 228a 	movw	r2, #650	; 0x28a
 800862e:	494f      	ldr	r1, [pc, #316]	; (800876c <etharp_input+0x150>)
 8008630:	484f      	ldr	r0, [pc, #316]	; (8008770 <etharp_input+0x154>)
}
 8008632:	b008      	add	sp, #32
 8008634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008638:	f006 bc4c 	b.w	800eed4 <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 800863c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800863e:	882b      	ldrh	r3, [r5, #0]
 8008640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008644:	d108      	bne.n	8008658 <etharp_input+0x3c>
 8008646:	792b      	ldrb	r3, [r5, #4]
 8008648:	2b06      	cmp	r3, #6
 800864a:	d105      	bne.n	8008658 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800864c:	796b      	ldrb	r3, [r5, #5]
 800864e:	2b04      	cmp	r3, #4
 8008650:	d102      	bne.n	8008658 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008652:	886b      	ldrh	r3, [r5, #2]
 8008654:	2b08      	cmp	r3, #8
 8008656:	d005      	beq.n	8008664 <etharp_input+0x48>
    pbuf_free(p);
 8008658:	4638      	mov	r0, r7
}
 800865a:	b008      	add	sp, #32
 800865c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8008660:	f001 be26 	b.w	800a2b0 <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008664:	f8d5 300e 	ldr.w	r3, [r5, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008668:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800866c:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800866e:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008670:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008672:	2e00      	cmp	r6, #0
 8008674:	d05e      	beq.n	8008734 <etharp_input+0x118>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008676:	1af3      	subs	r3, r6, r3
 8008678:	425e      	negs	r6, r3
 800867a:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800867c:	f1c6 0a02 	rsb	sl, r6, #2
 8008680:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008684:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008688:	2b06      	cmp	r3, #6
 800868a:	d006      	beq.n	800869a <etharp_input+0x7e>
 800868c:	4b36      	ldr	r3, [pc, #216]	; (8008768 <etharp_input+0x14c>)
 800868e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008692:	4938      	ldr	r1, [pc, #224]	; (8008774 <etharp_input+0x158>)
 8008694:	4836      	ldr	r0, [pc, #216]	; (8008770 <etharp_input+0x154>)
 8008696:	f006 fc1d 	bl	800eed4 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800869a:	9807      	ldr	r0, [sp, #28]
 800869c:	2800      	cmp	r0, #0
 800869e:	d03c      	beq.n	800871a <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80086a0:	4621      	mov	r1, r4
 80086a2:	f000 fcba 	bl	800901a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80086a6:	4681      	mov	r9, r0
 80086a8:	bbb8      	cbnz	r0, 800871a <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 80086aa:	9b07      	ldr	r3, [sp, #28]
 80086ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80086b0:	2be0      	cmp	r3, #224	; 0xe0
 80086b2:	d032      	beq.n	800871a <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 80086b4:	4622      	mov	r2, r4
 80086b6:	4651      	mov	r1, sl
 80086b8:	a807      	add	r0, sp, #28
 80086ba:	f7ff fe9f 	bl	80083fc <etharp_find_entry>
  if (i < 0) {
 80086be:	1e03      	subs	r3, r0, #0
 80086c0:	db2b      	blt.n	800871a <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80086c2:	2018      	movs	r0, #24
 80086c4:	4a2c      	ldr	r2, [pc, #176]	; (8008778 <etharp_input+0x15c>)
 80086c6:	f04f 0e02 	mov.w	lr, #2
 80086ca:	fb00 fc03 	mul.w	ip, r0, r3
 80086ce:	eb02 010c 	add.w	r1, r2, ip
 80086d2:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80086d6:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 80086da:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80086dc:	fb13 e300 	smlabb	r3, r3, r0, lr
 80086e0:	68a8      	ldr	r0, [r5, #8]
 80086e2:	eb02 0e03 	add.w	lr, r2, r3
 80086e6:	50d0      	str	r0, [r2, r3]
 80086e8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80086ec:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 80086f0:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 80086f4:	f852 100c 	ldr.w	r1, [r2, ip]
 80086f8:	b179      	cbz	r1, 800871a <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80086fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 80086fe:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008702:	4620      	mov	r0, r4
 8008704:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	4643      	mov	r3, r8
 800870c:	9105      	str	r1, [sp, #20]
 800870e:	f005 fdcf 	bl	800e2b0 <ethernet_output>
    pbuf_free(p);
 8008712:	9905      	ldr	r1, [sp, #20]
 8008714:	4608      	mov	r0, r1
 8008716:	f001 fdcb 	bl	800a2b0 <pbuf_free>
  switch (hdr->opcode) {
 800871a:	88eb      	ldrh	r3, [r5, #6]
 800871c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008720:	d00b      	beq.n	800873a <etharp_input+0x11e>
 8008722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008726:	d019      	beq.n	800875c <etharp_input+0x140>
  pbuf_free(p);
 8008728:	4638      	mov	r0, r7
 800872a:	f001 fdc1 	bl	800a2b0 <pbuf_free>
}
 800872e:	b008      	add	sp, #32
 8008730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008734:	f04f 0a02 	mov.w	sl, #2
 8008738:	e7a4      	b.n	8008684 <etharp_input+0x68>
      if (for_us) {
 800873a:	2e00      	cmp	r6, #0
 800873c:	d0f4      	beq.n	8008728 <etharp_input+0x10c>
        etharp_raw(netif,
 800873e:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008740:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 8008744:	4620      	mov	r0, r4
 8008746:	9203      	str	r2, [sp, #12]
 8008748:	aa07      	add	r2, sp, #28
 800874a:	4619      	mov	r1, r3
 800874c:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008750:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8008752:	9200      	str	r2, [sp, #0]
 8008754:	4642      	mov	r2, r8
 8008756:	f7ff fedf 	bl	8008518 <etharp_raw>
 800875a:	e7e5      	b.n	8008728 <etharp_input+0x10c>
      dhcp_arp_reply(netif, &sipaddr);
 800875c:	a907      	add	r1, sp, #28
 800875e:	4620      	mov	r0, r4
 8008760:	f7ff fba4 	bl	8007eac <dhcp_arp_reply>
      break;
 8008764:	e7e0      	b.n	8008728 <etharp_input+0x10c>
 8008766:	bf00      	nop
 8008768:	0801b725 	.word	0x0801b725
 800876c:	0801b5b6 	.word	0x0801b5b6
 8008770:	0801a5dc 	.word	0x0801a5dc
 8008774:	0801b87e 	.word	0x0801b87e
 8008778:	20006980 	.word	0x20006980

0800877c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800877c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800877e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008780:	2401      	movs	r4, #1
 8008782:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008786:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008788:	e9cd 1402 	strd	r1, r4, [sp, #8]
 800878c:	4904      	ldr	r1, [pc, #16]	; (80087a0 <etharp_request+0x24>)
 800878e:	9200      	str	r2, [sp, #0]
 8008790:	9101      	str	r1, [sp, #4]
 8008792:	4619      	mov	r1, r3
 8008794:	4a03      	ldr	r2, [pc, #12]	; (80087a4 <etharp_request+0x28>)
 8008796:	f7ff febf 	bl	8008518 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800879a:	b004      	add	sp, #16
 800879c:	bd10      	pop	{r4, pc}
 800879e:	bf00      	nop
 80087a0:	080118be 	.word	0x080118be
 80087a4:	080118b8 	.word	0x080118b8

080087a8 <etharp_tmr>:
{
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	4c13      	ldr	r4, [pc, #76]	; (80087f8 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80087ac:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80087ae:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80087b0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80087b2:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 80087b4:	b16a      	cbz	r2, 80087d2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80087b6:	8a63      	ldrh	r3, [r4, #18]
 80087b8:	3301      	adds	r3, #1
 80087ba:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80087bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80087c0:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80087c2:	d203      	bcs.n	80087cc <etharp_tmr+0x24>
 80087c4:	2a01      	cmp	r2, #1
 80087c6:	d109      	bne.n	80087dc <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d90f      	bls.n	80087ec <etharp_tmr+0x44>
        etharp_free_entry(i);
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7ff fe01 	bl	80083d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80087d2:	3501      	adds	r5, #1
 80087d4:	3418      	adds	r4, #24
 80087d6:	2d0a      	cmp	r5, #10
 80087d8:	d1eb      	bne.n	80087b2 <etharp_tmr+0xa>
}
 80087da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80087dc:	2a03      	cmp	r2, #3
 80087de:	d101      	bne.n	80087e4 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80087e0:	7527      	strb	r7, [r4, #20]
 80087e2:	e7f6      	b.n	80087d2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80087e4:	2a04      	cmp	r2, #4
 80087e6:	d1f4      	bne.n	80087d2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80087e8:	7526      	strb	r6, [r4, #20]
 80087ea:	e7f2      	b.n	80087d2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80087ec:	1d21      	adds	r1, r4, #4
 80087ee:	68a0      	ldr	r0, [r4, #8]
 80087f0:	f7ff ffc4 	bl	800877c <etharp_request>
 80087f4:	e7ed      	b.n	80087d2 <etharp_tmr+0x2a>
 80087f6:	bf00      	nop
 80087f8:	20006980 	.word	0x20006980

080087fc <etharp_output_to_arp_index>:
{
 80087fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008800:	4f24      	ldr	r7, [pc, #144]	; (8008894 <etharp_output_to_arp_index+0x98>)
 8008802:	2318      	movs	r3, #24
{
 8008804:	4606      	mov	r6, r0
 8008806:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008808:	fb03 7302 	mla	r3, r3, r2, r7
{
 800880c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800880e:	7d1b      	ldrb	r3, [r3, #20]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d806      	bhi.n	8008822 <etharp_output_to_arp_index+0x26>
 8008814:	4b20      	ldr	r3, [pc, #128]	; (8008898 <etharp_output_to_arp_index+0x9c>)
 8008816:	f240 22ee 	movw	r2, #750	; 0x2ee
 800881a:	4920      	ldr	r1, [pc, #128]	; (800889c <etharp_output_to_arp_index+0xa0>)
 800881c:	4820      	ldr	r0, [pc, #128]	; (80088a0 <etharp_output_to_arp_index+0xa4>)
 800881e:	f006 fb59 	bl	800eed4 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008822:	2218      	movs	r2, #24
 8008824:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008828:	f106 092a 	add.w	r9, r6, #42	; 0x2a
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800882c:	fb02 7404 	mla	r4, r2, r4, r7
 8008830:	00ed      	lsls	r5, r5, #3
 8008832:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008834:	f105 0a0c 	add.w	sl, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008838:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800883a:	44ba      	add	sl, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800883c:	d10b      	bne.n	8008856 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800883e:	8a63      	ldrh	r3, [r4, #18]
 8008840:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008844:	d913      	bls.n	800886e <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008846:	3504      	adds	r5, #4
 8008848:	4630      	mov	r0, r6
 800884a:	1979      	adds	r1, r7, r5
 800884c:	f7ff ff96 	bl	800877c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008850:	b908      	cbnz	r0, 8008856 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008852:	2303      	movs	r3, #3
 8008854:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800885a:	464a      	mov	r2, r9
 800885c:	4641      	mov	r1, r8
 800885e:	4630      	mov	r0, r6
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4653      	mov	r3, sl
 8008864:	f005 fd24 	bl	800e2b0 <ethernet_output>
}
 8008868:	b004      	add	sp, #16
 800886a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800886e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008872:	d3f0      	bcc.n	8008856 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008874:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008876:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008878:	4652      	mov	r2, sl
 800887a:	4649      	mov	r1, r9
 800887c:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800887e:	443d      	add	r5, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008880:	4b08      	ldr	r3, [pc, #32]	; (80088a4 <etharp_output_to_arp_index+0xa8>)
 8008882:	4630      	mov	r0, r6
 8008884:	9502      	str	r5, [sp, #8]
 8008886:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008888:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	464b      	mov	r3, r9
 800888e:	f7ff fe43 	bl	8008518 <etharp_raw>
 8008892:	e7dd      	b.n	8008850 <etharp_output_to_arp_index+0x54>
 8008894:	20006980 	.word	0x20006980
 8008898:	0801b725 	.word	0x0801b725
 800889c:	0801b8a2 	.word	0x0801b8a2
 80088a0:	0801a5dc 	.word	0x0801a5dc
 80088a4:	080118be 	.word	0x080118be

080088a8 <etharp_query>:
{
 80088a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	4688      	mov	r8, r1
 80088ae:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80088b0:	4601      	mov	r1, r0
{
 80088b2:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80088b4:	f8d8 0000 	ldr.w	r0, [r8]
 80088b8:	f000 fbaf 	bl	800901a <ip4_addr_isbroadcast_u32>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d16a      	bne.n	8008996 <etharp_query+0xee>
      ip4_addr_ismulticast(ipaddr) ||
 80088c0:	f8d8 3000 	ldr.w	r3, [r8]
 80088c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80088c8:	2ae0      	cmp	r2, #224	; 0xe0
 80088ca:	d064      	beq.n	8008996 <etharp_query+0xee>
      ip4_addr_isany(ipaddr)) {
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d062      	beq.n	8008996 <etharp_query+0xee>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80088d0:	4632      	mov	r2, r6
 80088d2:	2101      	movs	r1, #1
 80088d4:	4640      	mov	r0, r8
 80088d6:	f7ff fd91 	bl	80083fc <etharp_find_entry>
  if (i_err < 0) {
 80088da:	1e04      	subs	r4, r0, #0
 80088dc:	da03      	bge.n	80088e6 <etharp_query+0x3e>
    return (err_t)i_err;
 80088de:	b260      	sxtb	r0, r4
}
 80088e0:	b002      	add	sp, #8
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80088e6:	2c7e      	cmp	r4, #126	; 0x7e
 80088e8:	dd06      	ble.n	80088f8 <etharp_query+0x50>
 80088ea:	4b35      	ldr	r3, [pc, #212]	; (80089c0 <etharp_query+0x118>)
 80088ec:	f240 32c1 	movw	r2, #961	; 0x3c1
 80088f0:	4934      	ldr	r1, [pc, #208]	; (80089c4 <etharp_query+0x11c>)
 80088f2:	4835      	ldr	r0, [pc, #212]	; (80089c8 <etharp_query+0x120>)
 80088f4:	f006 faee 	bl	800eed4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80088f8:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80088fa:	4f34      	ldr	r7, [pc, #208]	; (80089cc <etharp_query+0x124>)
 80088fc:	2318      	movs	r3, #24
 80088fe:	fb03 7304 	mla	r3, r3, r4, r7
 8008902:	7d1a      	ldrb	r2, [r3, #20]
 8008904:	2a00      	cmp	r2, #0
 8008906:	d155      	bne.n	80089b4 <etharp_query+0x10c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008908:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 800890a:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800890c:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 800890e:	4641      	mov	r1, r8
 8008910:	4630      	mov	r0, r6
 8008912:	f7ff ff33 	bl	800877c <etharp_request>
    if (q == NULL) {
 8008916:	2d00      	cmp	r5, #0
 8008918:	d0e2      	beq.n	80088e0 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800891a:	2318      	movs	r3, #24
 800891c:	fb03 7204 	mla	r2, r3, r4, r7
 8008920:	7d12      	ldrb	r2, [r2, #20]
 8008922:	2a01      	cmp	r2, #1
 8008924:	d90e      	bls.n	8008944 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008926:	fb03 7304 	mla	r3, r3, r4, r7
 800892a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800892e:	4629      	mov	r1, r5
 8008930:	4630      	mov	r0, r6
 8008932:	9200      	str	r2, [sp, #0]
 8008934:	330c      	adds	r3, #12
 8008936:	f106 022a 	add.w	r2, r6, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 800893a:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800893e:	f005 fcb7 	bl	800e2b0 <ethernet_output>
 8008942:	e7cd      	b.n	80088e0 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008944:	d1cc      	bne.n	80088e0 <etharp_query+0x38>
 8008946:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008948:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80089c0 <etharp_query+0x118>
 800894c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80089d0 <etharp_query+0x128>
 8008950:	f8df a074 	ldr.w	sl, [pc, #116]	; 80089c8 <etharp_query+0x120>
 8008954:	8972      	ldrh	r2, [r6, #10]
 8008956:	8933      	ldrh	r3, [r6, #8]
 8008958:	429a      	cmp	r2, r3
 800895a:	d108      	bne.n	800896e <etharp_query+0xc6>
 800895c:	6833      	ldr	r3, [r6, #0]
 800895e:	b133      	cbz	r3, 800896e <etharp_query+0xc6>
 8008960:	4643      	mov	r3, r8
 8008962:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008966:	4649      	mov	r1, r9
 8008968:	4650      	mov	r0, sl
 800896a:	f006 fab3 	bl	800eed4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800896e:	7b33      	ldrb	r3, [r6, #12]
 8008970:	065b      	lsls	r3, r3, #25
 8008972:	d413      	bmi.n	800899c <etharp_query+0xf4>
      p = p->next;
 8008974:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8008976:	2e00      	cmp	r6, #0
 8008978:	d1ec      	bne.n	8008954 <etharp_query+0xac>
      pbuf_ref(p);
 800897a:	4628      	mov	r0, r5
 800897c:	f001 fddc 	bl	800a538 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8008980:	2618      	movs	r6, #24
 8008982:	fb06 f304 	mul.w	r3, r6, r4
 8008986:	58f8      	ldr	r0, [r7, r3]
 8008988:	b108      	cbz	r0, 800898e <etharp_query+0xe6>
        pbuf_free(arp_table[i].q);
 800898a:	f001 fc91 	bl	800a2b0 <pbuf_free>
      arp_table[i].q = p;
 800898e:	4374      	muls	r4, r6
      result = ERR_OK;
 8008990:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8008992:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8008994:	e7a4      	b.n	80088e0 <etharp_query+0x38>
    return ERR_ARG;
 8008996:	f06f 000f 	mvn.w	r0, #15
 800899a:	e7a1      	b.n	80088e0 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800899c:	462a      	mov	r2, r5
 800899e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80089a2:	200e      	movs	r0, #14
 80089a4:	f001 fef0 	bl	800a788 <pbuf_clone>
    if (p != NULL) {
 80089a8:	4605      	mov	r5, r0
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d1e8      	bne.n	8008980 <etharp_query+0xd8>
      result = ERR_MEM;
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295
 80089b2:	e795      	b.n	80088e0 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	d0aa      	beq.n	800890e <etharp_query+0x66>
  err_t result = ERR_MEM;
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	e7ad      	b.n	800891a <etharp_query+0x72>
 80089be:	bf00      	nop
 80089c0:	0801b725 	.word	0x0801b725
 80089c4:	0801b8d2 	.word	0x0801b8d2
 80089c8:	0801a5dc 	.word	0x0801a5dc
 80089cc:	20006980 	.word	0x20006980
 80089d0:	0801b8e0 	.word	0x0801b8e0

080089d4 <etharp_output>:
{
 80089d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d6:	460e      	mov	r6, r1
 80089d8:	b085      	sub	sp, #20
 80089da:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80089dc:	4604      	mov	r4, r0
 80089de:	b930      	cbnz	r0, 80089ee <etharp_output+0x1a>
 80089e0:	4b44      	ldr	r3, [pc, #272]	; (8008af4 <etharp_output+0x120>)
 80089e2:	f240 321e 	movw	r2, #798	; 0x31e
 80089e6:	4944      	ldr	r1, [pc, #272]	; (8008af8 <etharp_output+0x124>)
 80089e8:	4844      	ldr	r0, [pc, #272]	; (8008afc <etharp_output+0x128>)
 80089ea:	f006 fa73 	bl	800eed4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80089ee:	b936      	cbnz	r6, 80089fe <etharp_output+0x2a>
 80089f0:	4b40      	ldr	r3, [pc, #256]	; (8008af4 <etharp_output+0x120>)
 80089f2:	f240 321f 	movw	r2, #799	; 0x31f
 80089f6:	4942      	ldr	r1, [pc, #264]	; (8008b00 <etharp_output+0x12c>)
 80089f8:	4840      	ldr	r0, [pc, #256]	; (8008afc <etharp_output+0x128>)
 80089fa:	f006 fa6b 	bl	800eed4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80089fe:	b935      	cbnz	r5, 8008a0e <etharp_output+0x3a>
 8008a00:	4b3c      	ldr	r3, [pc, #240]	; (8008af4 <etharp_output+0x120>)
 8008a02:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008a06:	493f      	ldr	r1, [pc, #252]	; (8008b04 <etharp_output+0x130>)
 8008a08:	483c      	ldr	r0, [pc, #240]	; (8008afc <etharp_output+0x128>)
 8008a0a:	f006 fa63 	bl	800eed4 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008a0e:	4621      	mov	r1, r4
 8008a10:	6828      	ldr	r0, [r5, #0]
 8008a12:	f000 fb02 	bl	800901a <ip4_addr_isbroadcast_u32>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d167      	bne.n	8008aea <etharp_output+0x116>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008a20:	2ae0      	cmp	r2, #224	; 0xe0
 8008a22:	d11e      	bne.n	8008a62 <etharp_output+0x8e>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008a24:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008a26:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008a2a:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008a2e:	235e      	movs	r3, #94	; 0x5e
 8008a30:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008a34:	786b      	ldrb	r3, [r5, #1]
 8008a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008a3e:	78ab      	ldrb	r3, [r5, #2]
 8008a40:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008a44:	78eb      	ldrb	r3, [r5, #3]
 8008a46:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8008a4a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a50:	4631      	mov	r1, r6
 8008a52:	4620      	mov	r0, r4
 8008a54:	9200      	str	r2, [sp, #0]
 8008a56:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8008a5a:	f005 fc29 	bl	800e2b0 <ethernet_output>
}
 8008a5e:	b005      	add	sp, #20
 8008a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008a62:	6862      	ldr	r2, [r4, #4]
 8008a64:	68a1      	ldr	r1, [r4, #8]
 8008a66:	405a      	eors	r2, r3
 8008a68:	420a      	tst	r2, r1
 8008a6a:	d009      	beq.n	8008a80 <etharp_output+0xac>
        !ip4_addr_islinklocal(ipaddr)) {
 8008a6c:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008a6e:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <etharp_output+0xac>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d038      	beq.n	8008aee <etharp_output+0x11a>
            dst_addr = netif_ip4_gw(netif);
 8008a7c:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008a80:	4821      	ldr	r0, [pc, #132]	; (8008b08 <etharp_output+0x134>)
 8008a82:	2318      	movs	r3, #24
 8008a84:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8008a88:	fb03 0302 	mla	r3, r3, r2, r0
 8008a8c:	7d19      	ldrb	r1, [r3, #20]
 8008a8e:	2901      	cmp	r1, #1
 8008a90:	d90d      	bls.n	8008aae <etharp_output+0xda>
 8008a92:	6899      	ldr	r1, [r3, #8]
 8008a94:	42a1      	cmp	r1, r4
 8008a96:	d10a      	bne.n	8008aae <etharp_output+0xda>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008a98:	6829      	ldr	r1, [r5, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	d106      	bne.n	8008aae <etharp_output+0xda>
        return etharp_output_to_arp_index(netif, q, i);
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4620      	mov	r0, r4
}
 8008aa4:	b005      	add	sp, #20
 8008aa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8008aaa:	f7ff bea7 	b.w	80087fc <etharp_output_to_arp_index>
 8008aae:	4b16      	ldr	r3, [pc, #88]	; (8008b08 <etharp_output+0x134>)
{
 8008ab0:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008ab2:	7d1f      	ldrb	r7, [r3, #20]
 8008ab4:	fa5f fc81 	uxtb.w	ip, r1
 8008ab8:	2f01      	cmp	r7, #1
 8008aba:	d90a      	bls.n	8008ad2 <etharp_output+0xfe>
 8008abc:	689f      	ldr	r7, [r3, #8]
 8008abe:	42a7      	cmp	r7, r4
 8008ac0:	d107      	bne.n	8008ad2 <etharp_output+0xfe>
          (arp_table[i].netif == netif) &&
 8008ac2:	685f      	ldr	r7, [r3, #4]
 8008ac4:	682a      	ldr	r2, [r5, #0]
 8008ac6:	42ba      	cmp	r2, r7
 8008ac8:	d103      	bne.n	8008ad2 <etharp_output+0xfe>
        return etharp_output_to_arp_index(netif, q, i);
 8008aca:	4662      	mov	r2, ip
        ETHARP_SET_ADDRHINT(netif, i);
 8008acc:	f880 c0f0 	strb.w	ip, [r0, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 8008ad0:	e7e6      	b.n	8008aa0 <etharp_output+0xcc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008ad2:	3101      	adds	r1, #1
 8008ad4:	3318      	adds	r3, #24
 8008ad6:	290a      	cmp	r1, #10
 8008ad8:	d1eb      	bne.n	8008ab2 <etharp_output+0xde>
    return etharp_query(netif, dst_addr, q);
 8008ada:	4632      	mov	r2, r6
 8008adc:	4629      	mov	r1, r5
 8008ade:	4620      	mov	r0, r4
}
 8008ae0:	b005      	add	sp, #20
 8008ae2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 8008ae6:	f7ff bedf 	b.w	80088a8 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 8008aea:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <etharp_output+0x138>)
 8008aec:	e7ae      	b.n	8008a4c <etharp_output+0x78>
            return ERR_RTE;
 8008aee:	f06f 0003 	mvn.w	r0, #3
 8008af2:	e7b4      	b.n	8008a5e <etharp_output+0x8a>
 8008af4:	0801b725 	.word	0x0801b725
 8008af8:	0801b5b6 	.word	0x0801b5b6
 8008afc:	0801a5dc 	.word	0x0801a5dc
 8008b00:	0801c2f9 	.word	0x0801c2f9
 8008b04:	0801b85f 	.word	0x0801b85f
 8008b08:	20006980 	.word	0x20006980
 8008b0c:	080118b8 	.word	0x080118b8

08008b10 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8008b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	b087      	sub	sp, #28
 8008b16:	460f      	mov	r7, r1
 8008b18:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008b1a:	2124      	movs	r1, #36	; 0x24
 8008b1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008b20:	2022      	movs	r0, #34	; 0x22
 8008b22:	f001 fc2d 	bl	800a380 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8008b26:	4605      	mov	r5, r0
 8008b28:	b390      	cbz	r0, 8008b90 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008b2a:	8943      	ldrh	r3, [r0, #10]
 8008b2c:	2b23      	cmp	r3, #35	; 0x23
 8008b2e:	d806      	bhi.n	8008b3e <icmp_send_response+0x2e>
 8008b30:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <icmp_send_response+0x84>)
 8008b32:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008b36:	4918      	ldr	r1, [pc, #96]	; (8008b98 <icmp_send_response+0x88>)
 8008b38:	4818      	ldr	r0, [pc, #96]	; (8008b9c <icmp_send_response+0x8c>)
 8008b3a:	f006 f9cb 	bl	800eed4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8008b3e:	6860      	ldr	r0, [r4, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8008b40:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8008b42:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008b44:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8008b48:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008b4a:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8008b4e:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8008b50:	71a3      	strb	r3, [r4, #6]
 8008b52:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008b54:	4603      	mov	r3, r0
  icmphdr->type = type;
 8008b56:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8008b58:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008b5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b5e:	428b      	cmp	r3, r1
 8008b60:	f842 6b04 	str.w	r6, [r2], #4
 8008b64:	d1f9      	bne.n	8008b5a <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8008b66:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008b68:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8008b6a:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8008b6c:	f000 f8d6 	bl	8008d1c <ip4_route>
#endif
  if (netif != NULL) {
 8008b70:	b158      	cbz	r0, 8008b8a <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8008b72:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008b74:	2301      	movs	r3, #1
 8008b76:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 8008b78:	70a1      	strb	r1, [r4, #2]
 8008b7a:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008b7c:	9002      	str	r0, [sp, #8]
 8008b7e:	4628      	mov	r0, r5
 8008b80:	e9cd 1300 	strd	r1, r3, [sp]
 8008b84:	23ff      	movs	r3, #255	; 0xff
 8008b86:	f000 fa37 	bl	8008ff8 <ip4_output_if>
  }
  pbuf_free(q);
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f001 fb90 	bl	800a2b0 <pbuf_free>
}
 8008b90:	b007      	add	sp, #28
 8008b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b94:	0801b8fa 	.word	0x0801b8fa
 8008b98:	0801b95e 	.word	0x0801b95e
 8008b9c:	0801a5dc 	.word	0x0801a5dc

08008ba0 <icmp_input>:
{
 8008ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8008ba4:	4f46      	ldr	r7, [pc, #280]	; (8008cc0 <icmp_input+0x120>)
{
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8008bac:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8008bb0:	f899 5000 	ldrb.w	r5, [r9]
 8008bb4:	f005 050f 	and.w	r5, r5, #15
 8008bb8:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8008bba:	2d13      	cmp	r5, #19
 8008bbc:	d916      	bls.n	8008bec <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 8008bbe:	8943      	ldrh	r3, [r0, #10]
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d913      	bls.n	8008bec <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 8008bc4:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d10f      	bne.n	8008bec <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008bcc:	6978      	ldr	r0, [r7, #20]
 8008bce:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8008bd2:	2be0      	cmp	r3, #224	; 0xe0
 8008bd4:	d00a      	beq.n	8008bec <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	f000 fa1f 	bl	800901a <ip4_addr_isbroadcast_u32>
 8008bdc:	b930      	cbnz	r0, 8008bec <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8008bde:	8923      	ldrh	r3, [r4, #8]
 8008be0:	2b07      	cmp	r3, #7
 8008be2:	d903      	bls.n	8008bec <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fe3f 	bl	8009868 <inet_chksum_pbuf>
 8008bea:	b128      	cbz	r0, 8008bf8 <icmp_input+0x58>
  pbuf_free(p);
 8008bec:	4620      	mov	r0, r4
}
 8008bee:	b007      	add	sp, #28
 8008bf0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8008bf4:	f001 bb5c 	b.w	800a2b0 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008bf8:	f105 010e 	add.w	r1, r5, #14
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	9105      	str	r1, [sp, #20]
 8008c00:	f001 fb1e 	bl	800a240 <pbuf_add_header>
 8008c04:	9905      	ldr	r1, [sp, #20]
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d04e      	beq.n	8008ca8 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008c0a:	8923      	ldrh	r3, [r4, #8]
 8008c0c:	1959      	adds	r1, r3, r5
 8008c0e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8008c10:	428b      	cmp	r3, r1
 8008c12:	d8eb      	bhi.n	8008bec <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8008c14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008c18:	200e      	movs	r0, #14
 8008c1a:	f001 fbb1 	bl	800a380 <pbuf_alloc>
        if (r == NULL) {
 8008c1e:	4606      	mov	r6, r0
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d0e3      	beq.n	8008bec <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008c24:	8942      	ldrh	r2, [r0, #10]
 8008c26:	f105 0308 	add.w	r3, r5, #8
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d203      	bcs.n	8008c36 <icmp_input+0x96>
          pbuf_free(r);
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f001 fb3e 	bl	800a2b0 <pbuf_free>
          goto icmperr;
 8008c34:	e7da      	b.n	8008bec <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8008c36:	4649      	mov	r1, r9
 8008c38:	462a      	mov	r2, r5
 8008c3a:	6840      	ldr	r0, [r0, #4]
 8008c3c:	f005 fcb0 	bl	800e5a0 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f001 fb00 	bl	800a248 <pbuf_remove_header>
 8008c48:	b130      	cbz	r0, 8008c58 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <icmp_input+0x124>)
 8008c4c:	22b6      	movs	r2, #182	; 0xb6
 8008c4e:	491e      	ldr	r1, [pc, #120]	; (8008cc8 <icmp_input+0x128>)
 8008c50:	481e      	ldr	r0, [pc, #120]	; (8008ccc <icmp_input+0x12c>)
 8008c52:	f006 f93f 	bl	800eed4 <iprintf>
          pbuf_free(r);
 8008c56:	e7ea      	b.n	8008c2e <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f001 fccc 	bl	800a5f8 <pbuf_copy>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d1e4      	bne.n	8008c2e <icmp_input+0x8e>
        pbuf_free(p);
 8008c64:	4620      	mov	r0, r4
 8008c66:	4634      	mov	r4, r6
 8008c68:	f001 fb22 	bl	800a2b0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8008c70:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8008c72:	f001 fae5 	bl	800a240 <pbuf_add_header>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1b8      	bne.n	8008bec <icmp_input+0x4c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008c7a:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8008c7c:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008c7e:	4914      	ldr	r1, [pc, #80]	; (8008cd0 <icmp_input+0x130>)
        ip4_addr_copy(iphdr->src, *src);
 8008c80:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008c86:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8008c88:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8008c8a:	70b0      	strb	r0, [r6, #2]
 8008c8c:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008c8e:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008c90:	7290      	strb	r0, [r2, #10]
 8008c92:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008c94:	2201      	movs	r2, #1
 8008c96:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c9a:	e9cd 0200 	strd	r0, r2, [sp]
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 f9a9 	bl	8008ff8 <ip4_output_if>
  pbuf_free(p);
 8008ca6:	e7a1      	b.n	8008bec <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 facd 	bl	800a248 <pbuf_remove_header>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d0dc      	beq.n	8008c6c <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8008cb2:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <icmp_input+0x124>)
 8008cb4:	22c7      	movs	r2, #199	; 0xc7
 8008cb6:	4907      	ldr	r1, [pc, #28]	; (8008cd4 <icmp_input+0x134>)
 8008cb8:	4804      	ldr	r0, [pc, #16]	; (8008ccc <icmp_input+0x12c>)
 8008cba:	f006 f90b 	bl	800eed4 <iprintf>
          goto icmperr;
 8008cbe:	e795      	b.n	8008bec <icmp_input+0x4c>
 8008cc0:	20006a7c 	.word	0x20006a7c
 8008cc4:	0801b8fa 	.word	0x0801b8fa
 8008cc8:	0801b98a 	.word	0x0801b98a
 8008ccc:	0801a5dc 	.word	0x0801a5dc
 8008cd0:	20006a90 	.word	0x20006a90
 8008cd4:	0801b9bf 	.word	0x0801b9bf

08008cd8 <icmp_dest_unreach>:
{
 8008cd8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8008cda:	2103      	movs	r1, #3
 8008cdc:	f7ff bf18 	b.w	8008b10 <icmp_send_response>

08008ce0 <icmp_time_exceeded>:
{
 8008ce0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8008ce2:	210b      	movs	r1, #11
 8008ce4:	f7ff bf14 	b.w	8008b10 <icmp_send_response>

08008ce8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8008ce8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008cea:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8008cee:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008cf0:	f013 0301 	ands.w	r3, r3, #1
 8008cf4:	d00b      	beq.n	8008d0e <ip4_input_accept+0x26>
 8008cf6:	6843      	ldr	r3, [r0, #4]
 8008cf8:	b14b      	cbz	r3, 8008d0e <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008cfa:	4a07      	ldr	r2, [pc, #28]	; (8008d18 <ip4_input_accept+0x30>)
 8008cfc:	6950      	ldr	r0, [r2, #20]
 8008cfe:	4283      	cmp	r3, r0
 8008d00:	d007      	beq.n	8008d12 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008d02:	f000 f98a 	bl	800901a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008d06:	3800      	subs	r0, #0
 8008d08:	bf18      	it	ne
 8008d0a:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8008d0c:	bd08      	pop	{r3, pc}
  return 0;
 8008d0e:	4618      	mov	r0, r3
 8008d10:	e7fc      	b.n	8008d0c <ip4_input_accept+0x24>
      return 1;
 8008d12:	2001      	movs	r0, #1
 8008d14:	e7fa      	b.n	8008d0c <ip4_input_accept+0x24>
 8008d16:	bf00      	nop
 8008d18:	20006a7c 	.word	0x20006a7c

08008d1c <ip4_route>:
  NETIF_FOREACH(netif) {
 8008d1c:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <ip4_route+0x54>)
{
 8008d1e:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8008d20:	6818      	ldr	r0, [r3, #0]
{
 8008d22:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8008d24:	b978      	cbnz	r0, 8008d46 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <ip4_route+0x58>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	b15b      	cbz	r3, 8008d44 <ip4_route+0x28>
 8008d2c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8008d30:	f001 0105 	and.w	r1, r1, #5
 8008d34:	2905      	cmp	r1, #5
 8008d36:	d105      	bne.n	8008d44 <ip4_route+0x28>
 8008d38:	6859      	ldr	r1, [r3, #4]
 8008d3a:	b119      	cbz	r1, 8008d44 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008d3c:	7812      	ldrb	r2, [r2, #0]
 8008d3e:	2a7f      	cmp	r2, #127	; 0x7f
 8008d40:	bf18      	it	ne
 8008d42:	4618      	movne	r0, r3
}
 8008d44:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008d46:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8008d4a:	07cd      	lsls	r5, r1, #31
 8008d4c:	d50d      	bpl.n	8008d6a <ip4_route+0x4e>
 8008d4e:	074c      	lsls	r4, r1, #29
 8008d50:	d50b      	bpl.n	8008d6a <ip4_route+0x4e>
 8008d52:	6843      	ldr	r3, [r0, #4]
 8008d54:	b14b      	cbz	r3, 8008d6a <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008d56:	6814      	ldr	r4, [r2, #0]
 8008d58:	6885      	ldr	r5, [r0, #8]
 8008d5a:	4063      	eors	r3, r4
 8008d5c:	422b      	tst	r3, r5
 8008d5e:	d0f1      	beq.n	8008d44 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008d60:	078b      	lsls	r3, r1, #30
 8008d62:	d402      	bmi.n	8008d6a <ip4_route+0x4e>
 8008d64:	68c3      	ldr	r3, [r0, #12]
 8008d66:	429c      	cmp	r4, r3
 8008d68:	d0ec      	beq.n	8008d44 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	e7da      	b.n	8008d24 <ip4_route+0x8>
 8008d6e:	bf00      	nop
 8008d70:	2000cff8 	.word	0x2000cff8
 8008d74:	2000cffc 	.word	0x2000cffc

08008d78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008d7c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8008d80:	4604      	mov	r4, r0
 8008d82:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8008d84:	f898 5000 	ldrb.w	r5, [r8]
 8008d88:	092b      	lsrs	r3, r5, #4
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d005      	beq.n	8008d9a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f001 fa8e 	bl	800a2b0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8008d94:	2000      	movs	r0, #0
 8008d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008d9a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008d9e:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008da2:	f000 fd2f 	bl	8009804 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8008da6:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008da8:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008dac:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8008dae:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008db0:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 8008db2:	d903      	bls.n	8008dbc <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8008db4:	4601      	mov	r1, r0
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 fb5e 	bl	800a478 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8008dbc:	8963      	ldrh	r3, [r4, #10]
 8008dbe:	42ab      	cmp	r3, r5
 8008dc0:	d3e5      	bcc.n	8008d8e <ip4_input+0x16>
 8008dc2:	8923      	ldrh	r3, [r4, #8]
 8008dc4:	42bb      	cmp	r3, r7
 8008dc6:	d3e2      	bcc.n	8008d8e <ip4_input+0x16>
 8008dc8:	2d13      	cmp	r5, #19
 8008dca:	d9e0      	bls.n	8008d8e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8008dcc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008dd0:	4d49      	ldr	r5, [pc, #292]	; (8008ef8 <ip4_input+0x180>)
 8008dd2:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008dd8:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ddc:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008dde:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008de0:	d143      	bne.n	8008e6a <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008de2:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8008de6:	07db      	lsls	r3, r3, #31
 8008de8:	d405      	bmi.n	8008df6 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8008dea:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008dee:	2b11      	cmp	r3, #17
 8008df0:	d053      	beq.n	8008e9a <ip4_input+0x122>
 8008df2:	2700      	movs	r7, #0
 8008df4:	e003      	b.n	8008dfe <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008df6:	6873      	ldr	r3, [r6, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0f6      	beq.n	8008dea <ip4_input+0x72>
 8008dfc:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8008dfe:	6928      	ldr	r0, [r5, #16]
 8008e00:	b148      	cbz	r0, 8008e16 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008e02:	4631      	mov	r1, r6
 8008e04:	f000 f909 	bl	800901a <ip4_addr_isbroadcast_u32>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1c0      	bne.n	8008d8e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8008e0c:	692b      	ldr	r3, [r5, #16]
 8008e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008e12:	2be0      	cmp	r3, #224	; 0xe0
 8008e14:	d0bb      	beq.n	8008d8e <ip4_input+0x16>
  if (netif == NULL) {
 8008e16:	2f00      	cmp	r7, #0
 8008e18:	d0b9      	beq.n	8008d8e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8008e1a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8008e1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e22:	b13b      	cbz	r3, 8008e34 <ip4_input+0xbc>
    p = ip4_reass(p);
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fa2b 	bl	8009280 <ip4_reass>
    if (p == NULL) {
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d0b1      	beq.n	8008d94 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8008e30:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8008e34:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8008e3c:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8008e40:	f898 3000 	ldrb.w	r3, [r8]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008e4c:	f001 f9fc 	bl	800a248 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8008e50:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008e54:	2b06      	cmp	r3, #6
 8008e56:	d034      	beq.n	8008ec2 <ip4_input+0x14a>
 8008e58:	2b11      	cmp	r3, #17
 8008e5a:	d026      	beq.n	8008eaa <ip4_input+0x132>
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d135      	bne.n	8008ecc <ip4_input+0x154>
        icmp_input(p, inp);
 8008e60:	4631      	mov	r1, r6
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff fe9c 	bl	8008ba0 <icmp_input>
        break;
 8008e68:	e023      	b.n	8008eb2 <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ff3c 	bl	8008ce8 <ip4_input_accept>
 8008e70:	b980      	cbnz	r0, 8008e94 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8008e72:	7d2b      	ldrb	r3, [r5, #20]
 8008e74:	2b7f      	cmp	r3, #127	; 0x7f
 8008e76:	d0b8      	beq.n	8008dea <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8008e78:	4b20      	ldr	r3, [pc, #128]	; (8008efc <ip4_input+0x184>)
 8008e7a:	681f      	ldr	r7, [r3, #0]
 8008e7c:	2f00      	cmp	r7, #0
 8008e7e:	d0b4      	beq.n	8008dea <ip4_input+0x72>
          if (netif == inp) {
 8008e80:	42b7      	cmp	r7, r6
 8008e82:	d101      	bne.n	8008e88 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8008e84:	683f      	ldr	r7, [r7, #0]
 8008e86:	e7f9      	b.n	8008e7c <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff ff2d 	bl	8008ce8 <ip4_input_accept>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d0f8      	beq.n	8008e84 <ip4_input+0x10c>
 8008e92:	e7b4      	b.n	8008dfe <ip4_input+0x86>
  if (netif == NULL) {
 8008e94:	2e00      	cmp	r6, #0
 8008e96:	d1b1      	bne.n	8008dfc <ip4_input+0x84>
 8008e98:	e7a7      	b.n	8008dea <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8008e9a:	eb08 0309 	add.w	r3, r8, r9
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8008ea4:	d1a5      	bne.n	8008df2 <ip4_input+0x7a>
 8008ea6:	4637      	mov	r7, r6
 8008ea8:	e7b5      	b.n	8008e16 <ip4_input+0x9e>
        udp_input(p, inp);
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4620      	mov	r0, r4
 8008eae:	f004 feff 	bl	800dcb0 <udp_input>
  ip_data.current_netif = NULL;
 8008eb2:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8008eb4:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 8008eb8:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 8008eba:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8008ebc:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 8008ec0:	e768      	b.n	8008d94 <ip4_input+0x1c>
        tcp_input(p, inp);
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f002 ffbf 	bl	800be48 <tcp_input>
        break;
 8008eca:	e7f2      	b.n	8008eb2 <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008ecc:	4639      	mov	r1, r7
 8008ece:	6968      	ldr	r0, [r5, #20]
 8008ed0:	f000 f8a3 	bl	800901a <ip4_addr_isbroadcast_u32>
 8008ed4:	b960      	cbnz	r0, 8008ef0 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ed6:	696b      	ldr	r3, [r5, #20]
 8008ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8008edc:	2be0      	cmp	r3, #224	; 0xe0
 8008ede:	d007      	beq.n	8008ef0 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8008ee0:	4649      	mov	r1, r9
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f001 f9dc 	bl	800a2a0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8008ee8:	2102      	movs	r1, #2
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7ff fef4 	bl	8008cd8 <icmp_dest_unreach>
        pbuf_free(p);
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f001 f9dd 	bl	800a2b0 <pbuf_free>
        break;
 8008ef6:	e7dc      	b.n	8008eb2 <ip4_input+0x13a>
 8008ef8:	20006a7c 	.word	0x20006a7c
 8008efc:	2000cff8 	.word	0x2000cff8

08008f00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8008f00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f04:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008f06:	7b83      	ldrb	r3, [r0, #14]
{
 8008f08:	4604      	mov	r4, r0
 8008f0a:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008f0c:	2b01      	cmp	r3, #1
{
 8008f0e:	4616      	mov	r6, r2
 8008f10:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008f12:	d006      	beq.n	8008f22 <ip4_output_if_src+0x22>
 8008f14:	4b32      	ldr	r3, [pc, #200]	; (8008fe0 <ip4_output_if_src+0xe0>)
 8008f16:	f44f 7255 	mov.w	r2, #852	; 0x354
 8008f1a:	4932      	ldr	r1, [pc, #200]	; (8008fe4 <ip4_output_if_src+0xe4>)
 8008f1c:	4832      	ldr	r0, [pc, #200]	; (8008fe8 <ip4_output_if_src+0xe8>)
 8008f1e:	f005 ffd9 	bl	800eed4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d04e      	beq.n	8008fc4 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8008f26:	2114      	movs	r1, #20
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f001 f989 	bl	800a240 <pbuf_add_header>
 8008f2e:	b120      	cbz	r0, 8008f3a <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8008f30:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8008f34:	b002      	add	sp, #8
 8008f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008f3a:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8008f3c:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008f3e:	2b13      	cmp	r3, #19
 8008f40:	d806      	bhi.n	8008f50 <ip4_output_if_src+0x50>
 8008f42:	4b27      	ldr	r3, [pc, #156]	; (8008fe0 <ip4_output_if_src+0xe0>)
 8008f44:	f44f 7262 	mov.w	r2, #904	; 0x388
 8008f48:	4928      	ldr	r1, [pc, #160]	; (8008fec <ip4_output_if_src+0xec>)
 8008f4a:	4827      	ldr	r0, [pc, #156]	; (8008fe8 <ip4_output_if_src+0xe8>)
 8008f4c:	f005 ffc2 	bl	800eed4 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8008f50:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8008f54:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8008f58:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 8008f5c:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8008f5e:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008f60:	f8df a090 	ldr.w	sl, [pc, #144]	; 8008ff4 <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 8008f64:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8008f66:	2345      	movs	r3, #69	; 0x45
 8008f68:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8008f6a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8008f6e:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008f70:	8920      	ldrh	r0, [r4, #8]
 8008f72:	f000 fc47 	bl	8009804 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8008f76:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008f7a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8008f7c:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008f80:	f8ba 0000 	ldrh.w	r0, [sl]
 8008f84:	f000 fc3e 	bl	8009804 <lwip_htons>
    ++ip_id;
 8008f88:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008f8c:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8008f8e:	3301      	adds	r3, #1
 8008f90:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8008f94:	f1b9 0f00 	cmp.w	r9, #0
 8008f98:	d111      	bne.n	8008fbe <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <ip4_output_if_src+0xf0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8008fa0:	f885 800a 	strb.w	r8, [r5, #10]
 8008fa4:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8008fa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008faa:	b19b      	cbz	r3, 8008fd4 <ip4_output_if_src+0xd4>
 8008fac:	8922      	ldrh	r2, [r4, #8]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d910      	bls.n	8008fd4 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 8008fb2:	4632      	mov	r2, r6
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 fb38 	bl	800962c <ip4_frag>
 8008fbc:	e7ba      	b.n	8008f34 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 8008fbe:	f8d9 3000 	ldr.w	r3, [r9]
 8008fc2:	e7ec      	b.n	8008f9e <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 8008fc4:	8963      	ldrh	r3, [r4, #10]
 8008fc6:	2b13      	cmp	r3, #19
 8008fc8:	d9b2      	bls.n	8008f30 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8008fca:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8008fcc:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8008fd2:	e7e9      	b.n	8008fa8 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4638      	mov	r0, r7
 8008fdc:	4798      	blx	r3
 8008fde:	e7a9      	b.n	8008f34 <ip4_output_if_src+0x34>
 8008fe0:	0801b9f1 	.word	0x0801b9f1
 8008fe4:	0801ba54 	.word	0x0801ba54
 8008fe8:	0801a5dc 	.word	0x0801a5dc
 8008fec:	0801ba60 	.word	0x0801ba60
 8008ff0:	08011768 	.word	0x08011768
 8008ff4:	20006a72 	.word	0x20006a72

08008ff8 <ip4_output_if>:
{
 8008ff8:	b4f0      	push	{r4, r5, r6, r7}
 8008ffa:	9c06      	ldr	r4, [sp, #24]
 8008ffc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8009000:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009004:	b11a      	cbz	r2, 800900e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8009006:	b109      	cbz	r1, 800900c <ip4_output_if+0x14>
 8009008:	680f      	ldr	r7, [r1, #0]
 800900a:	b907      	cbnz	r7, 800900e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800900c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800900e:	9504      	str	r5, [sp, #16]
 8009010:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8009014:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009016:	f7ff bf73 	b.w	8008f00 <ip4_output_if_src>

0800901a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800901a:	1e43      	subs	r3, r0, #1
{
 800901c:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800901e:	3303      	adds	r3, #3
 8009020:	d812      	bhi.n	8009048 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009022:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8009026:	f013 0002 	ands.w	r0, r3, #2
 800902a:	d010      	beq.n	800904e <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800902c:	684b      	ldr	r3, [r1, #4]
 800902e:	4293      	cmp	r3, r2
 8009030:	d00c      	beq.n	800904c <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009032:	6888      	ldr	r0, [r1, #8]
 8009034:	4053      	eors	r3, r2
 8009036:	4203      	tst	r3, r0
 8009038:	d108      	bne.n	800904c <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800903a:	43c3      	mvns	r3, r0
 800903c:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8009040:	1ac3      	subs	r3, r0, r3
 8009042:	4258      	negs	r0, r3
 8009044:	4158      	adcs	r0, r3
 8009046:	4770      	bx	lr
    return 1;
 8009048:	2001      	movs	r0, #1
 800904a:	4770      	bx	lr
    return 0;
 800904c:	2000      	movs	r0, #0
  }
}
 800904e:	4770      	bx	lr

08009050 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009050:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <ip_reass_dequeue_datagram+0x34>)
{
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4282      	cmp	r2, r0
 800905c:	d107      	bne.n	800906e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800905e:	6802      	ldr	r2, [r0, #0]
 8009060:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009062:	4621      	mov	r1, r4
 8009064:	2004      	movs	r0, #4
}
 8009066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800906a:	f000 bf07 	b.w	8009e7c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800906e:	b931      	cbnz	r1, 800907e <ip_reass_dequeue_datagram+0x2e>
 8009070:	4b05      	ldr	r3, [pc, #20]	; (8009088 <ip_reass_dequeue_datagram+0x38>)
 8009072:	f240 1245 	movw	r2, #325	; 0x145
 8009076:	4905      	ldr	r1, [pc, #20]	; (800908c <ip_reass_dequeue_datagram+0x3c>)
 8009078:	4805      	ldr	r0, [pc, #20]	; (8009090 <ip_reass_dequeue_datagram+0x40>)
 800907a:	f005 ff2b 	bl	800eed4 <iprintf>
    prev->next = ipr->next;
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	e7ee      	b.n	8009062 <ip_reass_dequeue_datagram+0x12>
 8009084:	20006a74 	.word	0x20006a74
 8009088:	0801ba8d 	.word	0x0801ba8d
 800908c:	0801baf5 	.word	0x0801baf5
 8009090:	0801a5dc 	.word	0x0801a5dc

08009094 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009094:	4281      	cmp	r1, r0
{
 8009096:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909a:	4604      	mov	r4, r0
 800909c:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800909e:	d105      	bne.n	80090ac <ip_reass_free_complete_datagram+0x18>
 80090a0:	4b2f      	ldr	r3, [pc, #188]	; (8009160 <ip_reass_free_complete_datagram+0xcc>)
 80090a2:	22ab      	movs	r2, #171	; 0xab
 80090a4:	492f      	ldr	r1, [pc, #188]	; (8009164 <ip_reass_free_complete_datagram+0xd0>)
 80090a6:	4830      	ldr	r0, [pc, #192]	; (8009168 <ip_reass_free_complete_datagram+0xd4>)
 80090a8:	f005 ff14 	bl	800eed4 <iprintf>
  if (prev != NULL) {
 80090ac:	b146      	cbz	r6, 80090c0 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80090ae:	6833      	ldr	r3, [r6, #0]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d005      	beq.n	80090c0 <ip_reass_free_complete_datagram+0x2c>
 80090b4:	4b2a      	ldr	r3, [pc, #168]	; (8009160 <ip_reass_free_complete_datagram+0xcc>)
 80090b6:	22ad      	movs	r2, #173	; 0xad
 80090b8:	492c      	ldr	r1, [pc, #176]	; (800916c <ip_reass_free_complete_datagram+0xd8>)
 80090ba:	482b      	ldr	r0, [pc, #172]	; (8009168 <ip_reass_free_complete_datagram+0xd4>)
 80090bc:	f005 ff0a 	bl	800eed4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80090c0:	6867      	ldr	r7, [r4, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 80090c4:	889a      	ldrh	r2, [r3, #4]
 80090c6:	bb92      	cbnz	r2, 800912e <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80090c8:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80090ca:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 80090ce:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80090d0:	f104 0208 	add.w	r2, r4, #8
 80090d4:	f852 0b04 	ldr.w	r0, [r2], #4
 80090d8:	428a      	cmp	r2, r1
 80090da:	f843 0b04 	str.w	r0, [r3], #4
 80090de:	d1f9      	bne.n	80090d4 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80090e0:	2101      	movs	r1, #1
 80090e2:	4638      	mov	r0, r7
 80090e4:	f7ff fdfc 	bl	8008ce0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80090e8:	4638      	mov	r0, r7
 80090ea:	f001 fa1d 	bl	800a528 <pbuf_clen>
 80090ee:	4605      	mov	r5, r0
    pbuf_free(p);
 80090f0:	4638      	mov	r0, r7
 80090f2:	f001 f8dd 	bl	800a2b0 <pbuf_free>
  p = ipr->p;
 80090f6:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80090f8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009160 <ip_reass_free_complete_datagram+0xcc>
 80090fc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009178 <ip_reass_free_complete_datagram+0xe4>
 8009100:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009168 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8009104:	b9af      	cbnz	r7, 8009132 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8009106:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009108:	4c19      	ldr	r4, [pc, #100]	; (8009170 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800910a:	4631      	mov	r1, r6
 800910c:	f7ff ffa0 	bl	8009050 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009110:	88a3      	ldrh	r3, [r4, #4]
 8009112:	42ab      	cmp	r3, r5
 8009114:	d205      	bcs.n	8009122 <ip_reass_free_complete_datagram+0x8e>
 8009116:	4b12      	ldr	r3, [pc, #72]	; (8009160 <ip_reass_free_complete_datagram+0xcc>)
 8009118:	22d2      	movs	r2, #210	; 0xd2
 800911a:	4916      	ldr	r1, [pc, #88]	; (8009174 <ip_reass_free_complete_datagram+0xe0>)
 800911c:	4812      	ldr	r0, [pc, #72]	; (8009168 <ip_reass_free_complete_datagram+0xd4>)
 800911e:	f005 fed9 	bl	800eed4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009122:	88a3      	ldrh	r3, [r4, #4]
}
 8009124:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009126:	1b5b      	subs	r3, r3, r5
 8009128:	80a3      	strh	r3, [r4, #4]
}
 800912a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800912e:	2500      	movs	r5, #0
 8009130:	e7e1      	b.n	80090f6 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8009132:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8009134:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8009136:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800913a:	f001 f9f5 	bl	800a528 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800913e:	4405      	add	r5, r0
 8009140:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009144:	db05      	blt.n	8009152 <ip_reass_free_complete_datagram+0xbe>
 8009146:	4643      	mov	r3, r8
 8009148:	22cc      	movs	r2, #204	; 0xcc
 800914a:	4649      	mov	r1, r9
 800914c:	4650      	mov	r0, sl
 800914e:	f005 fec1 	bl	800eed4 <iprintf>
    pbuf_free(pcur);
 8009152:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009154:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8009156:	465f      	mov	r7, fp
    pbuf_free(pcur);
 8009158:	f001 f8aa 	bl	800a2b0 <pbuf_free>
 800915c:	e7d2      	b.n	8009104 <ip_reass_free_complete_datagram+0x70>
 800915e:	bf00      	nop
 8009160:	0801ba8d 	.word	0x0801ba8d
 8009164:	0801bb0e 	.word	0x0801bb0e
 8009168:	0801a5dc 	.word	0x0801a5dc
 800916c:	0801bb1a 	.word	0x0801bb1a
 8009170:	20006a74 	.word	0x20006a74
 8009174:	0801bb49 	.word	0x0801bb49
 8009178:	0801bb2c 	.word	0x0801bb2c

0800917c <ip_reass_remove_oldest_datagram>:
{
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	4605      	mov	r5, r0
 8009182:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8009184:	2600      	movs	r6, #0
    r = reassdatagrams;
 8009186:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80091f0 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800918a:	2400      	movs	r4, #0
    r = reassdatagrams;
 800918c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8009190:	4621      	mov	r1, r4
    prev = NULL;
 8009192:	46a4      	mov	ip, r4
    oldest = NULL;
 8009194:	4620      	mov	r0, r4
    while (r != NULL) {
 8009196:	b953      	cbnz	r3, 80091ae <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8009198:	b110      	cbz	r0, 80091a0 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800919a:	f7ff ff7b 	bl	8009094 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800919e:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80091a0:	42be      	cmp	r6, r7
 80091a2:	da01      	bge.n	80091a8 <ip_reass_remove_oldest_datagram+0x2c>
 80091a4:	2c01      	cmp	r4, #1
 80091a6:	dcf0      	bgt.n	800918a <ip_reass_remove_oldest_datagram+0xe>
}
 80091a8:	4630      	mov	r0, r6
 80091aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80091ae:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80091b2:	695a      	ldr	r2, [r3, #20]
 80091b4:	4572      	cmp	r2, lr
 80091b6:	d109      	bne.n	80091cc <ip_reass_remove_oldest_datagram+0x50>
 80091b8:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80091bc:	699a      	ldr	r2, [r3, #24]
 80091be:	4572      	cmp	r2, lr
 80091c0:	d104      	bne.n	80091cc <ip_reass_remove_oldest_datagram+0x50>
 80091c2:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80091c6:	88aa      	ldrh	r2, [r5, #4]
 80091c8:	4596      	cmp	lr, r2
 80091ca:	d008      	beq.n	80091de <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80091cc:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80091ce:	b160      	cbz	r0, 80091ea <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80091d0:	7fc2      	ldrb	r2, [r0, #31]
 80091d2:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 80091d6:	4596      	cmp	lr, r2
 80091d8:	bf9c      	itt	ls
 80091da:	4661      	movls	r1, ip
 80091dc:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	2a00      	cmp	r2, #0
 80091e2:	bf18      	it	ne
 80091e4:	469c      	movne	ip, r3
 80091e6:	4613      	mov	r3, r2
 80091e8:	e7d5      	b.n	8009196 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80091ea:	4661      	mov	r1, ip
 80091ec:	4618      	mov	r0, r3
 80091ee:	e7f6      	b.n	80091de <ip_reass_remove_oldest_datagram+0x62>
 80091f0:	20006a74 	.word	0x20006a74

080091f4 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80091f4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80091f6:	4604      	mov	r4, r0
 80091f8:	b930      	cbnz	r0, 8009208 <ip_frag_free_pbuf_custom_ref+0x14>
 80091fa:	4b06      	ldr	r3, [pc, #24]	; (8009214 <ip_frag_free_pbuf_custom_ref+0x20>)
 80091fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009200:	4905      	ldr	r1, [pc, #20]	; (8009218 <ip_frag_free_pbuf_custom_ref+0x24>)
 8009202:	4806      	ldr	r0, [pc, #24]	; (800921c <ip_frag_free_pbuf_custom_ref+0x28>)
 8009204:	f005 fe66 	bl	800eed4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009208:	4621      	mov	r1, r4
 800920a:	2005      	movs	r0, #5
}
 800920c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8009210:	f000 be34 	b.w	8009e7c <memp_free>
 8009214:	0801ba8d 	.word	0x0801ba8d
 8009218:	0801c2e1 	.word	0x0801c2e1
 800921c:	0801a5dc 	.word	0x0801a5dc

08009220 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009220:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009222:	4604      	mov	r4, r0
 8009224:	b930      	cbnz	r0, 8009234 <ipfrag_free_pbuf_custom+0x14>
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <ipfrag_free_pbuf_custom+0x28>)
 8009228:	f240 22ce 	movw	r2, #718	; 0x2ce
 800922c:	4907      	ldr	r1, [pc, #28]	; (800924c <ipfrag_free_pbuf_custom+0x2c>)
 800922e:	4808      	ldr	r0, [pc, #32]	; (8009250 <ipfrag_free_pbuf_custom+0x30>)
 8009230:	f005 fe50 	bl	800eed4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8009234:	6960      	ldr	r0, [r4, #20]
 8009236:	b108      	cbz	r0, 800923c <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8009238:	f001 f83a 	bl	800a2b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800923c:	4620      	mov	r0, r4
}
 800923e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8009242:	f7ff bfd7 	b.w	80091f4 <ip_frag_free_pbuf_custom_ref>
 8009246:	bf00      	nop
 8009248:	0801ba8d 	.word	0x0801ba8d
 800924c:	0801bb6b 	.word	0x0801bb6b
 8009250:	0801a5dc 	.word	0x0801a5dc

08009254 <ip_reass_tmr>:
{
 8009254:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8009256:	4b09      	ldr	r3, [pc, #36]	; (800927c <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 8009258:	2400      	movs	r4, #0
  r = reassdatagrams;
 800925a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800925c:	b900      	cbnz	r0, 8009260 <ip_reass_tmr+0xc>
}
 800925e:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8009260:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8009262:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8009264:	b123      	cbz	r3, 8009270 <ip_reass_tmr+0x1c>
      r->timer--;
 8009266:	3b01      	subs	r3, #1
 8009268:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800926a:	4604      	mov	r4, r0
 800926c:	4628      	mov	r0, r5
 800926e:	e7f5      	b.n	800925c <ip_reass_tmr+0x8>
 8009270:	4621      	mov	r1, r4
 8009272:	f7ff ff0f 	bl	8009094 <ip_reass_free_complete_datagram>
 8009276:	4620      	mov	r0, r4
 8009278:	e7f7      	b.n	800926a <ip_reass_tmr+0x16>
 800927a:	bf00      	nop
 800927c:	20006a74 	.word	0x20006a74

08009280 <ip4_reass>:
{
 8009280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8009284:	6845      	ldr	r5, [r0, #4]
{
 8009286:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009288:	782b      	ldrb	r3, [r5, #0]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	2b05      	cmp	r3, #5
 8009290:	f040 80a0 	bne.w	80093d4 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009294:	88e8      	ldrh	r0, [r5, #6]
 8009296:	f000 fab5 	bl	8009804 <lwip_htons>
 800929a:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800929c:	8868      	ldrh	r0, [r5, #2]
 800929e:	f000 fab1 	bl	8009804 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80092a2:	782a      	ldrb	r2, [r5, #0]
 80092a4:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80092a8:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80092ac:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80092b0:	f0c0 8090 	bcc.w	80093d4 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 80092b4:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80092b6:	4eb5      	ldr	r6, [pc, #724]	; (800958c <ip4_reass+0x30c>)
  clen = pbuf_clen(p);
 80092b8:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80092be:	f001 f933 	bl	800a528 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80092c2:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 80092c4:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80092c6:	4403      	add	r3, r0
 80092c8:	2b0a      	cmp	r3, #10
 80092ca:	dc79      	bgt.n	80093c0 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80092cc:	6834      	ldr	r4, [r6, #0]
 80092ce:	2c00      	cmp	r4, #0
 80092d0:	f040 8085 	bne.w	80093de <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80092d4:	2004      	movs	r0, #4
 80092d6:	f000 fdb5 	bl	8009e44 <memp_malloc>
  if (ipr == NULL) {
 80092da:	4604      	mov	r4, r0
 80092dc:	b958      	cbnz	r0, 80092f6 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80092de:	4649      	mov	r1, r9
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7ff ff4b 	bl	800917c <ip_reass_remove_oldest_datagram>
 80092e6:	4581      	cmp	r9, r0
 80092e8:	dc74      	bgt.n	80093d4 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80092ea:	2004      	movs	r0, #4
 80092ec:	f000 fdaa 	bl	8009e44 <memp_malloc>
    if (ipr == NULL)
 80092f0:	4604      	mov	r4, r0
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d06e      	beq.n	80093d4 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80092f6:	221c      	movs	r2, #28
 80092f8:	2100      	movs	r1, #0
 80092fa:	1d20      	adds	r0, r4, #4
 80092fc:	f005 f978 	bl	800e5f0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8009300:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009302:	f104 0208 	add.w	r2, r4, #8
 8009306:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800930a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800930c:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800930e:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8009310:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009312:	462b      	mov	r3, r5
 8009314:	f853 0b04 	ldr.w	r0, [r3], #4
 8009318:	428b      	cmp	r3, r1
 800931a:	f842 0b04 	str.w	r0, [r2], #4
 800931e:	d1f9      	bne.n	8009314 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009320:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009324:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 8009328:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800932c:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8009330:	d10a      	bne.n	8009348 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009338:	429f      	cmp	r7, r3
 800933a:	f200 8137 	bhi.w	80095ac <ip4_reass+0x32c>
 800933e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009342:	4293      	cmp	r3, r2
 8009344:	f200 8132 	bhi.w	80095ac <ip4_reass+0x32c>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009348:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800934c:	8868      	ldrh	r0, [r5, #2]
 800934e:	f000 fa59 	bl	8009804 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009352:	782b      	ldrb	r3, [r5, #0]
 8009354:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009358:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800935c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009360:	f0c0 8124 	bcc.w	80095ac <ip4_reass+0x32c>
  len = (u16_t)(len - hlen);
 8009364:	1a80      	subs	r0, r0, r2
 8009366:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800936a:	88e8      	ldrh	r0, [r5, #6]
 800936c:	f000 fa4a 	bl	8009804 <lwip_htons>
 8009370:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009374:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 8009378:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800937a:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 800937c:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 800937e:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 8009382:	7075      	strb	r5, [r6, #1]
 8009384:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8009386:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 800938a:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800938c:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 800938e:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 8009390:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8009392:	f200 810b 	bhi.w	80095ac <ip4_reass+0x32c>
  for (q = ipr->p; q != NULL;) {
 8009396:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800939a:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 800939e:	4671      	mov	r1, lr
 80093a0:	bb61      	cbnz	r1, 80093fc <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	f040 80a9 	bne.w	80094fa <ip4_reass+0x27a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80093a8:	f1be 0f00 	cmp.w	lr, #0
 80093ac:	f000 8095 	beq.w	80094da <ip4_reass+0x25a>
 80093b0:	4b77      	ldr	r3, [pc, #476]	; (8009590 <ip4_reass+0x310>)
 80093b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80093b6:	4977      	ldr	r1, [pc, #476]	; (8009594 <ip4_reass+0x314>)
 80093b8:	4877      	ldr	r0, [pc, #476]	; (8009598 <ip4_reass+0x318>)
 80093ba:	f005 fd8b 	bl	800eed4 <iprintf>
 80093be:	e08c      	b.n	80094da <ip4_reass+0x25a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80093c0:	4601      	mov	r1, r0
 80093c2:	4628      	mov	r0, r5
 80093c4:	f7ff feda 	bl	800917c <ip_reass_remove_oldest_datagram>
 80093c8:	b120      	cbz	r0, 80093d4 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80093ca:	88b3      	ldrh	r3, [r6, #4]
 80093cc:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80093ce:	2b0a      	cmp	r3, #10
 80093d0:	f77f af7c 	ble.w	80092cc <ip4_reass+0x4c>
  pbuf_free(p);
 80093d4:	4640      	mov	r0, r8
 80093d6:	f000 ff6b 	bl	800a2b0 <pbuf_free>
  return NULL;
 80093da:	2700      	movs	r7, #0
 80093dc:	e077      	b.n	80094ce <ip4_reass+0x24e>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80093de:	68eb      	ldr	r3, [r5, #12]
 80093e0:	6962      	ldr	r2, [r4, #20]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d108      	bne.n	80093f8 <ip4_reass+0x178>
 80093e6:	692b      	ldr	r3, [r5, #16]
 80093e8:	69a2      	ldr	r2, [r4, #24]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d104      	bne.n	80093f8 <ip4_reass+0x178>
 80093ee:	89a2      	ldrh	r2, [r4, #12]
 80093f0:	88ab      	ldrh	r3, [r5, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f000 80ee 	beq.w	80095d4 <ip4_reass+0x354>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80093f8:	6824      	ldr	r4, [r4, #0]
 80093fa:	e768      	b.n	80092ce <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80093fc:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80093fe:	889a      	ldrh	r2, [r3, #4]
 8009400:	4290      	cmp	r0, r2
 8009402:	d26d      	bcs.n	80094e0 <ip4_reass+0x260>
      iprh->next_pbuf = q;
 8009404:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8009406:	2d00      	cmp	r5, #0
 8009408:	d065      	beq.n	80094d6 <ip4_reass+0x256>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800940a:	88eb      	ldrh	r3, [r5, #6]
 800940c:	4298      	cmp	r0, r3
 800940e:	f0c0 80cd 	bcc.w	80095ac <ip4_reass+0x32c>
 8009412:	4594      	cmp	ip, r2
 8009414:	f200 80ca 	bhi.w	80095ac <ip4_reass+0x32c>
        if (iprh_prev->end != iprh->start) {
 8009418:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 800941a:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800941e:	f040 80f5 	bne.w	800960c <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009422:	f1bb 0f00 	cmp.w	fp, #0
 8009426:	d004      	beq.n	8009432 <ip4_reass+0x1b2>
 8009428:	7fa3      	ldrb	r3, [r4, #30]
 800942a:	f013 0301 	ands.w	r3, r3, #1
 800942e:	f000 809b 	beq.w	8009568 <ip4_reass+0x2e8>
    if (valid) {
 8009432:	f1ba 0f00 	cmp.w	sl, #0
 8009436:	d170      	bne.n	800951a <ip4_reass+0x29a>
          q = iprh->next_pbuf;
 8009438:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800943c:	4e53      	ldr	r6, [pc, #332]	; (800958c <ip4_reass+0x30c>)
 800943e:	88b0      	ldrh	r0, [r6, #4]
 8009440:	4481      	add	r9, r0
 8009442:	f8a6 9004 	strh.w	r9, [r6, #4]
  if (is_last) {
 8009446:	f1bb 0f00 	cmp.w	fp, #0
 800944a:	d106      	bne.n	800945a <ip4_reass+0x1da>
    u16_t datagram_len = (u16_t)(offset + len);
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009450:	7fa3      	ldrb	r3, [r4, #30]
 8009452:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8009456:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009458:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800945a:	f1ba 0f01 	cmp.w	sl, #1
 800945e:	d1bc      	bne.n	80093da <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009460:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009462:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009466:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009468:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800946a:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800946e:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009470:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009472:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009474:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009476:	f853 cb04 	ldr.w	ip, [r3], #4
 800947a:	428b      	cmp	r3, r1
 800947c:	f842 cb04 	str.w	ip, [r2], #4
 8009480:	d1f9      	bne.n	8009476 <ip4_reass+0x1f6>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009482:	f000 f9bf 	bl	8009804 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8009486:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009488:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800948a:	71bb      	strb	r3, [r7, #6]
 800948c:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800948e:	72bb      	strb	r3, [r7, #10]
 8009490:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8009492:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8009494:	2d00      	cmp	r5, #0
 8009496:	d169      	bne.n	800956c <ip4_reass+0x2ec>
    if (ipr == reassdatagrams) {
 8009498:	6833      	ldr	r3, [r6, #0]
        if (ipr_prev->next == ipr) {
 800949a:	42a3      	cmp	r3, r4
 800949c:	d002      	beq.n	80094a4 <ip4_reass+0x224>
 800949e:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d170      	bne.n	8009586 <ip4_reass+0x306>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80094a4:	4620      	mov	r0, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	f7ff fdd2 	bl	8009050 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80094ac:	4638      	mov	r0, r7
 80094ae:	f001 f83b 	bl	800a528 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80094b2:	88b3      	ldrh	r3, [r6, #4]
    clen = pbuf_clen(p);
 80094b4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80094b6:	4283      	cmp	r3, r0
 80094b8:	d206      	bcs.n	80094c8 <ip4_reass+0x248>
 80094ba:	4b35      	ldr	r3, [pc, #212]	; (8009590 <ip4_reass+0x310>)
 80094bc:	f240 229b 	movw	r2, #667	; 0x29b
 80094c0:	4936      	ldr	r1, [pc, #216]	; (800959c <ip4_reass+0x31c>)
 80094c2:	4835      	ldr	r0, [pc, #212]	; (8009598 <ip4_reass+0x318>)
 80094c4:	f005 fd06 	bl	800eed4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80094c8:	88b0      	ldrh	r0, [r6, #4]
 80094ca:	1b04      	subs	r4, r0, r4
 80094cc:	80b4      	strh	r4, [r6, #4]
}
 80094ce:	4638      	mov	r0, r7
 80094d0:	b003      	add	sp, #12
 80094d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 80094d6:	4594      	cmp	ip, r2
 80094d8:	d868      	bhi.n	80095ac <ip4_reass+0x32c>
      ipr->p = new_p;
 80094da:	f8c4 8004 	str.w	r8, [r4, #4]
 80094de:	e7a0      	b.n	8009422 <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 80094e0:	d064      	beq.n	80095ac <ip4_reass+0x32c>
    } else if (iprh->start < iprh_tmp->end) {
 80094e2:	88d9      	ldrh	r1, [r3, #6]
 80094e4:	4281      	cmp	r1, r0
 80094e6:	d861      	bhi.n	80095ac <ip4_reass+0x32c>
      if (iprh_prev != NULL) {
 80094e8:	b125      	cbz	r5, 80094f4 <ip4_reass+0x274>
        if (iprh_prev->end != iprh_tmp->start) {
 80094ea:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 80094ec:	4291      	cmp	r1, r2
 80094ee:	bf18      	it	ne
 80094f0:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80094f4:	6819      	ldr	r1, [r3, #0]
 80094f6:	461d      	mov	r5, r3
 80094f8:	e752      	b.n	80093a0 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80094fa:	88eb      	ldrh	r3, [r5, #6]
 80094fc:	4283      	cmp	r3, r0
 80094fe:	d906      	bls.n	800950e <ip4_reass+0x28e>
 8009500:	4b23      	ldr	r3, [pc, #140]	; (8009590 <ip4_reass+0x310>)
 8009502:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8009506:	4926      	ldr	r1, [pc, #152]	; (80095a0 <ip4_reass+0x320>)
 8009508:	4823      	ldr	r0, [pc, #140]	; (8009598 <ip4_reass+0x318>)
 800950a:	f005 fce3 	bl	800eed4 <iprintf>
      if (iprh_prev->end != iprh->start) {
 800950e:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 8009510:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8009514:	88b3      	ldrh	r3, [r6, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	e781      	b.n	800941e <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d08b      	beq.n	8009438 <ip4_reass+0x1b8>
 8009520:	6859      	ldr	r1, [r3, #4]
 8009522:	888b      	ldrh	r3, [r1, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d187      	bne.n	8009438 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 8009528:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800952a:	b9a3      	cbnz	r3, 8009556 <ip4_reass+0x2d6>
          LWIP_ASSERT("sanity check",
 800952c:	42b1      	cmp	r1, r6
 800952e:	d106      	bne.n	800953e <ip4_reass+0x2be>
 8009530:	4b17      	ldr	r3, [pc, #92]	; (8009590 <ip4_reass+0x310>)
 8009532:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009536:	491b      	ldr	r1, [pc, #108]	; (80095a4 <ip4_reass+0x324>)
 8009538:	4817      	ldr	r0, [pc, #92]	; (8009598 <ip4_reass+0x318>)
 800953a:	f005 fccb 	bl	800eed4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800953e:	6833      	ldr	r3, [r6, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f43f af7b 	beq.w	800943c <ip4_reass+0x1bc>
 8009546:	4b12      	ldr	r3, [pc, #72]	; (8009590 <ip4_reass+0x310>)
 8009548:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800954c:	4916      	ldr	r1, [pc, #88]	; (80095a8 <ip4_reass+0x328>)
 800954e:	4812      	ldr	r0, [pc, #72]	; (8009598 <ip4_reass+0x318>)
 8009550:	f005 fcc0 	bl	800eed4 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8009554:	e772      	b.n	800943c <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 8009556:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8009558:	88f0      	ldrh	r0, [r6, #6]
 800955a:	8893      	ldrh	r3, [r2, #4]
 800955c:	4298      	cmp	r0, r3
 800955e:	f47f af6b 	bne.w	8009438 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	4616      	mov	r6, r2
 8009566:	e7e0      	b.n	800952a <ip4_reass+0x2aa>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8009568:	469a      	mov	sl, r3
 800956a:	e767      	b.n	800943c <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 800956c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8009570:	2114      	movs	r1, #20
 8009572:	4628      	mov	r0, r5
 8009574:	f000 fe68 	bl	800a248 <pbuf_remove_header>
      pbuf_cat(p, r);
 8009578:	4629      	mov	r1, r5
 800957a:	4638      	mov	r0, r7
 800957c:	f000 fff8 	bl	800a570 <pbuf_cat>
      r = iprh->next_pbuf;
 8009580:	f8d8 5000 	ldr.w	r5, [r8]
 8009584:	e786      	b.n	8009494 <ip4_reass+0x214>
        if (ipr_prev->next == ipr) {
 8009586:	682b      	ldr	r3, [r5, #0]
 8009588:	e787      	b.n	800949a <ip4_reass+0x21a>
 800958a:	bf00      	nop
 800958c:	20006a74 	.word	0x20006a74
 8009590:	0801ba8d 	.word	0x0801ba8d
 8009594:	0801bb95 	.word	0x0801bb95
 8009598:	0801a5dc 	.word	0x0801a5dc
 800959c:	0801bbfb 	.word	0x0801bbfb
 80095a0:	0801bb77 	.word	0x0801bb77
 80095a4:	0801bbcc 	.word	0x0801bbcc
 80095a8:	0801bbd9 	.word	0x0801bbd9
  if (ipr->p == NULL) {
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f47f af10 	bne.w	80093d4 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80095b4:	4b19      	ldr	r3, [pc, #100]	; (800961c <ip4_reass+0x39c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	d006      	beq.n	80095ca <ip4_reass+0x34a>
 80095bc:	4b18      	ldr	r3, [pc, #96]	; (8009620 <ip4_reass+0x3a0>)
 80095be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80095c2:	4918      	ldr	r1, [pc, #96]	; (8009624 <ip4_reass+0x3a4>)
 80095c4:	4818      	ldr	r0, [pc, #96]	; (8009628 <ip4_reass+0x3a8>)
 80095c6:	f005 fc85 	bl	800eed4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80095ca:	2100      	movs	r1, #0
 80095cc:	4620      	mov	r0, r4
 80095ce:	f7ff fd3f 	bl	8009050 <ip_reass_dequeue_datagram>
 80095d2:	e6ff      	b.n	80093d4 <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80095d4:	88e8      	ldrh	r0, [r5, #6]
 80095d6:	f000 f915 	bl	8009804 <lwip_htons>
 80095da:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80095de:	2800      	cmp	r0, #0
 80095e0:	f47f ae9e 	bne.w	8009320 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80095e4:	89e0      	ldrh	r0, [r4, #14]
 80095e6:	f000 f90d 	bl	8009804 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80095ea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f ae96 	beq.w	8009320 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80095f4:	462b      	mov	r3, r5
 80095f6:	f104 0208 	add.w	r2, r4, #8
 80095fa:	f105 0114 	add.w	r1, r5, #20
 80095fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8009602:	428b      	cmp	r3, r1
 8009604:	f842 0b04 	str.w	r0, [r2], #4
 8009608:	d1f9      	bne.n	80095fe <ip4_reass+0x37e>
 800960a:	e689      	b.n	8009320 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800960c:	f1bb 0f00 	cmp.w	fp, #0
 8009610:	f43f af12 	beq.w	8009438 <ip4_reass+0x1b8>
 8009614:	f04f 0a00 	mov.w	sl, #0
 8009618:	e706      	b.n	8009428 <ip4_reass+0x1a8>
 800961a:	bf00      	nop
 800961c:	20006a74 	.word	0x20006a74
 8009620:	0801ba8d 	.word	0x0801ba8d
 8009624:	0801bc16 	.word	0x0801bc16
 8009628:	0801a5dc 	.word	0x0801a5dc

0800962c <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800962c:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 800962e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009632:	ed2d 8b02 	vpush	{d8}
 8009636:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800963a:	f1b3 0214 	subs.w	r2, r3, #20
{
 800963e:	b08b      	sub	sp, #44	; 0x2c
 8009640:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009642:	bf48      	it	mi
 8009644:	f1a3 020d 	submi.w	r2, r3, #13
{
 8009648:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800964a:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 800964e:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8009650:	6843      	ldr	r3, [r0, #4]
 8009652:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	2b05      	cmp	r3, #5
 800965c:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8009660:	d109      	bne.n	8009676 <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8009662:	8943      	ldrh	r3, [r0, #10]
 8009664:	2b13      	cmp	r3, #19
 8009666:	d809      	bhi.n	800967c <ip4_frag+0x50>
 8009668:	4b60      	ldr	r3, [pc, #384]	; (80097ec <ip4_frag+0x1c0>)
 800966a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800966e:	4960      	ldr	r1, [pc, #384]	; (80097f0 <ip4_frag+0x1c4>)
 8009670:	4860      	ldr	r0, [pc, #384]	; (80097f4 <ip4_frag+0x1c8>)
 8009672:	f005 fc2f 	bl	800eed4 <iprintf>
    return ERR_VAL;
 8009676:	f06f 0005 	mvn.w	r0, #5
 800967a:	e013      	b.n	80096a4 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800967c:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 800967e:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009680:	88d8      	ldrh	r0, [r3, #6]
 8009682:	f000 f8bf 	bl	8009804 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8009686:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800968a:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 800968c:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 800968e:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8009692:	3c14      	subs	r4, #20
 8009694:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009696:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8009698:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	b29b      	uxth	r3, r3
 800969e:	9306      	str	r3, [sp, #24]
  while (left) {
 80096a0:	b92c      	cbnz	r4, 80096ae <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80096a2:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80096a4:	b00b      	add	sp, #44	; 0x2c
 80096a6:	ecbd 8b02 	vpop	{d8}
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80096ae:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80096b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80096b4:	2114      	movs	r1, #20
 80096b6:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	bf28      	it	cs
 80096bc:	4623      	movcs	r3, r4
 80096be:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80096c0:	f000 fe5e 	bl	800a380 <pbuf_alloc>
    if (rambuf == NULL) {
 80096c4:	4680      	mov	r8, r0
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d036      	beq.n	8009738 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80096ca:	8943      	ldrh	r3, [r0, #10]
 80096cc:	2b13      	cmp	r3, #19
 80096ce:	d806      	bhi.n	80096de <ip4_frag+0xb2>
 80096d0:	4b46      	ldr	r3, [pc, #280]	; (80097ec <ip4_frag+0x1c0>)
 80096d2:	f44f 7249 	mov.w	r2, #804	; 0x324
 80096d6:	4948      	ldr	r1, [pc, #288]	; (80097f8 <ip4_frag+0x1cc>)
 80096d8:	4846      	ldr	r0, [pc, #280]	; (80097f4 <ip4_frag+0x1c8>)
 80096da:	f005 fbfb 	bl	800eed4 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80096de:	9b02      	ldr	r3, [sp, #8]
 80096e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80096e4:	4619      	mov	r1, r3
 80096e6:	3114      	adds	r1, #20
 80096e8:	f853 0b04 	ldr.w	r0, [r3], #4
 80096ec:	428b      	cmp	r3, r1
 80096ee:	f842 0b04 	str.w	r0, [r2], #4
 80096f2:	d1f9      	bne.n	80096e8 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80096f4:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 80096f8:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 80096fc:	f1b9 0f00 	cmp.w	r9, #0
 8009700:	d041      	beq.n	8009786 <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8009702:	896b      	ldrh	r3, [r5, #10]
 8009704:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009706:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8009708:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800970a:	d206      	bcs.n	800971a <ip4_frag+0xee>
 800970c:	4b37      	ldr	r3, [pc, #220]	; (80097ec <ip4_frag+0x1c0>)
 800970e:	f240 322d 	movw	r2, #813	; 0x32d
 8009712:	493a      	ldr	r1, [pc, #232]	; (80097fc <ip4_frag+0x1d0>)
 8009714:	4837      	ldr	r0, [pc, #220]	; (80097f4 <ip4_frag+0x1c8>)
 8009716:	f005 fbdd 	bl	800eed4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800971a:	454e      	cmp	r6, r9
 800971c:	bf28      	it	cs
 800971e:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8009720:	b916      	cbnz	r6, 8009728 <ip4_frag+0xfc>
        p = p->next;
 8009722:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8009724:	2700      	movs	r7, #0
 8009726:	e7e9      	b.n	80096fc <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8009728:	2005      	movs	r0, #5
 800972a:	f000 fb8b 	bl	8009e44 <memp_malloc>
      if (pcr == NULL) {
 800972e:	4603      	mov	r3, r0
 8009730:	b928      	cbnz	r0, 800973e <ip4_frag+0x112>
        pbuf_free(rambuf);
 8009732:	4640      	mov	r0, r8
 8009734:	f000 fdbc 	bl	800a2b0 <pbuf_free>
  return ERR_MEM;
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	e7b2      	b.n	80096a4 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800973e:	9601      	str	r6, [sp, #4]
 8009740:	4631      	mov	r1, r6
 8009742:	686a      	ldr	r2, [r5, #4]
 8009744:	9008      	str	r0, [sp, #32]
 8009746:	2000      	movs	r0, #0
 8009748:	443a      	add	r2, r7
 800974a:	9200      	str	r2, [sp, #0]
 800974c:	2241      	movs	r2, #65	; 0x41
 800974e:	f000 fd5d 	bl	800a20c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	b918      	cbnz	r0, 800975e <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fd4c 	bl	80091f4 <ip_frag_free_pbuf_custom_ref>
 800975c:	e7e9      	b.n	8009732 <ip4_frag+0x106>
 800975e:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009762:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8009766:	4628      	mov	r0, r5
 8009768:	f000 fee6 	bl	800a538 <pbuf_ref>
      pcr->original = p;
 800976c:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800976e:	4a24      	ldr	r2, [pc, #144]	; (8009800 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009770:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8009774:	9908      	ldr	r1, [sp, #32]
 8009776:	4640      	mov	r0, r8
      pcr->original = p;
 8009778:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800977a:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800977c:	f000 fef8 	bl	800a570 <pbuf_cat>
      if (left_to_copy) {
 8009780:	f1b9 0f00 	cmp.w	r9, #0
 8009784:	d1cd      	bne.n	8009722 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8009786:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 8009788:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 800978a:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800978e:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 8009792:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8009794:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8009796:	42a3      	cmp	r3, r4
 8009798:	dd01      	ble.n	800979e <ip4_frag+0x172>
 800979a:	9b07      	ldr	r3, [sp, #28]
 800979c:	b10b      	cbz	r3, 80097a2 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 800979e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80097a2:	f000 f82f 	bl	8009804 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80097a6:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80097a8:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80097ac:	f103 0014 	add.w	r0, r3, #20
 80097b0:	b280      	uxth	r0, r0
 80097b2:	f000 f827 	bl	8009804 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80097b6:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 80097b8:	ee18 2a10 	vmov	r2, s16
 80097bc:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80097be:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 80097c2:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 80097c4:	f88b 300a 	strb.w	r3, [fp, #10]
 80097c8:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 80097cc:	f8da 3014 	ldr.w	r3, [sl, #20]
 80097d0:	4798      	blx	r3
    pbuf_free(rambuf);
 80097d2:	4640      	mov	r0, r8
 80097d4:	f000 fd6c 	bl	800a2b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80097d8:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 80097da:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 80097dc:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 80097de:	9b03      	ldr	r3, [sp, #12]
 80097e0:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 80097e2:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	9303      	str	r3, [sp, #12]
 80097e8:	e75a      	b.n	80096a0 <ip4_frag+0x74>
 80097ea:	bf00      	nop
 80097ec:	0801ba8d 	.word	0x0801ba8d
 80097f0:	0801bc36 	.word	0x0801bc36
 80097f4:	0801a5dc 	.word	0x0801a5dc
 80097f8:	0801bc51 	.word	0x0801bc51
 80097fc:	0801bc71 	.word	0x0801bc71
 8009800:	08009221 	.word	0x08009221

08009804 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8009804:	ba40      	rev16	r0, r0
}
 8009806:	b280      	uxth	r0, r0
 8009808:	4770      	bx	lr

0800980a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800980a:	ba00      	rev	r0, r0
 800980c:	4770      	bx	lr

0800980e <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800980e:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009810:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009812:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8009816:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 800981a:	d007      	beq.n	800982c <lwip_standard_chksum+0x1e>
 800981c:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 800981e:	bfc2      	ittt	gt
 8009820:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 8009824:	f101 31ff 	addgt.w	r1, r1, #4294967295
    ((u8_t *)&t)[1] = *pb++;
 8009828:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 800982c:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800982e:	2901      	cmp	r1, #1
 8009830:	dc15      	bgt.n	800985e <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009832:	bf04      	itt	eq
 8009834:	7803      	ldrbeq	r3, [r0, #0]
 8009836:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800983a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800983e:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009840:	b298      	uxth	r0, r3
 8009842:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8009846:	b298      	uxth	r0, r3
 8009848:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800984c:	b124      	cbz	r4, 8009858 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800984e:	0203      	lsls	r3, r0, #8
 8009850:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009854:	b29b      	uxth	r3, r3
 8009856:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8009858:	b280      	uxth	r0, r0
 800985a:	b002      	add	sp, #8
 800985c:	bd10      	pop	{r4, pc}
    sum += *ps++;
 800985e:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8009862:	3902      	subs	r1, #2
    sum += *ps++;
 8009864:	441a      	add	r2, r3
    len -= 2;
 8009866:	e7e2      	b.n	800982e <lwip_standard_chksum+0x20>

08009868 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009868:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800986a:	2600      	movs	r6, #0
{
 800986c:	4605      	mov	r5, r0

  acc = 0;
 800986e:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8009870:	b945      	cbnz	r5, 8009884 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8009872:	b126      	cbz	r6, 800987e <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009874:	0223      	lsls	r3, r4, #8
 8009876:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800987a:	b29b      	uxth	r3, r3
 800987c:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800987e:	43e0      	mvns	r0, r4
}
 8009880:	b280      	uxth	r0, r0
 8009882:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009884:	8969      	ldrh	r1, [r5, #10]
 8009886:	6868      	ldr	r0, [r5, #4]
 8009888:	f7ff ffc1 	bl	800980e <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800988c:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800988e:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8009890:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8009892:	b2a0      	uxth	r0, r4
 8009894:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8009898:	d506      	bpl.n	80098a8 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800989a:	0223      	lsls	r3, r4, #8
 800989c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80098a0:	f086 0601 	eor.w	r6, r6, #1
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 80098a8:	682d      	ldr	r5, [r5, #0]
 80098aa:	e7e1      	b.n	8009870 <inet_chksum_pbuf+0x8>

080098ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80098ac:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80098ae:	f004 fdd7 	bl	800e460 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80098b2:	f000 f80d 	bl	80098d0 <mem_init>
  memp_init();
 80098b6:	f000 fab7 	bl	8009e28 <memp_init>
  pbuf_init();
  netif_init();
 80098ba:	f000 fb45 	bl	8009f48 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80098be:	f004 f9eb 	bl	800dc98 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80098c2:	f000 ffd7 	bl	800a874 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80098c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80098ca:	f004 b9a5 	b.w	800dc18 <sys_timeouts_init>
	...

080098d0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80098d0:	4b14      	ldr	r3, [pc, #80]	; (8009924 <mem_init+0x54>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80098d2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80098d6:	4814      	ldr	r0, [pc, #80]	; (8009928 <mem_init+0x58>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 80098d8:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80098dc:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80098e0:	300c      	adds	r0, #12
{
 80098e2:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 80098e4:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 80098e6:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80098e8:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->used = 0;
 80098ec:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 80098ee:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  lfree = (struct mem *)(void *)ram;
 80098f2:	f840 3c04 	str.w	r3, [r0, #-4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80098f6:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80098fa:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80098fe:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
  ram_end->used = 1;
 8009902:	2101      	movs	r1, #1
 8009904:	f882 1804 	strb.w	r1, [r2, #2052]	; 0x804
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009908:	f004 fdb6 	bl	800e478 <sys_mutex_new>
 800990c:	b140      	cbz	r0, 8009920 <mem_init+0x50>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800990e:	4b07      	ldr	r3, [pc, #28]	; (800992c <mem_init+0x5c>)
 8009910:	f240 221f 	movw	r2, #543	; 0x21f
 8009914:	4906      	ldr	r1, [pc, #24]	; (8009930 <mem_init+0x60>)
 8009916:	4807      	ldr	r0, [pc, #28]	; (8009934 <mem_init+0x64>)
  }
}
 8009918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800991c:	f005 bada 	b.w	800eed4 <iprintf>
}
 8009920:	bd10      	pop	{r4, pc}
 8009922:	bf00      	nop
 8009924:	20006aa7 	.word	0x20006aa7
 8009928:	20006a94 	.word	0x20006a94
 800992c:	0801bc80 	.word	0x0801bc80
 8009930:	0801bcde 	.word	0x0801bcde
 8009934:	0801a5dc 	.word	0x0801a5dc

08009938 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009938:	b570      	push	{r4, r5, r6, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800993a:	4604      	mov	r4, r0
 800993c:	2800      	cmp	r0, #0
 800993e:	f000 80b7 	beq.w	8009ab0 <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009942:	0783      	lsls	r3, r0, #30
 8009944:	d00c      	beq.n	8009960 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009946:	4b5b      	ldr	r3, [pc, #364]	; (8009ab4 <mem_free+0x17c>)
 8009948:	f240 2273 	movw	r2, #627	; 0x273
 800994c:	495a      	ldr	r1, [pc, #360]	; (8009ab8 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800994e:	485b      	ldr	r0, [pc, #364]	; (8009abc <mem_free+0x184>)
 8009950:	f005 fac0 	bl	800eed4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009954:	f004 fdb6 	bl	800e4c4 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800995c:	f004 bdbe 	b.w	800e4dc <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009960:	4d57      	ldr	r5, [pc, #348]	; (8009ac0 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009962:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009966:	682b      	ldr	r3, [r5, #0]
 8009968:	42b3      	cmp	r3, r6
 800996a:	d804      	bhi.n	8009976 <mem_free+0x3e>
 800996c:	f100 030c 	add.w	r3, r0, #12
 8009970:	686a      	ldr	r2, [r5, #4]
 8009972:	429a      	cmp	r2, r3
 8009974:	d204      	bcs.n	8009980 <mem_free+0x48>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009976:	4b4f      	ldr	r3, [pc, #316]	; (8009ab4 <mem_free+0x17c>)
 8009978:	f240 227f 	movw	r2, #639	; 0x27f
 800997c:	4951      	ldr	r1, [pc, #324]	; (8009ac4 <mem_free+0x18c>)
 800997e:	e7e6      	b.n	800994e <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8009980:	f105 000c 	add.w	r0, r5, #12
 8009984:	f004 fd86 	bl	800e494 <sys_mutex_lock>
  if (!mem->used) {
 8009988:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800998c:	b95b      	cbnz	r3, 80099a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800998e:	4b49      	ldr	r3, [pc, #292]	; (8009ab4 <mem_free+0x17c>)
 8009990:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009994:	494c      	ldr	r1, [pc, #304]	; (8009ac8 <mem_free+0x190>)
 8009996:	4849      	ldr	r0, [pc, #292]	; (8009abc <mem_free+0x184>)
 8009998:	f005 fa9c 	bl	800eed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800999c:	f105 000c 	add.w	r0, r5, #12
    LWIP_MEM_FREE_UNPROTECT();
 80099a0:	f004 fd7d 	bl	800e49e <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 80099a4:	e7d6      	b.n	8009954 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 80099a6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80099aa:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 80099ae:	d813      	bhi.n	80099d8 <mem_free+0xa0>
  pmem = ptr_to_mem(mem->prev);
 80099b0:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80099b4:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 80099b8:	d80e      	bhi.n	80099d8 <mem_free+0xa0>
  return (mem_size_t)((u8_t *)mem - ram);
 80099ba:	6829      	ldr	r1, [r5, #0]
 80099bc:	1a73      	subs	r3, r6, r1
 80099be:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80099c0:	4283      	cmp	r3, r0
 80099c2:	d002      	beq.n	80099ca <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80099c4:	5a08      	ldrh	r0, [r1, r0]
 80099c6:	4298      	cmp	r0, r3
 80099c8:	d106      	bne.n	80099d8 <mem_free+0xa0>
  return (struct mem *)(void *)&ram[ptr];
 80099ca:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80099cc:	6868      	ldr	r0, [r5, #4]
 80099ce:	4282      	cmp	r2, r0
 80099d0:	d00b      	beq.n	80099ea <mem_free+0xb2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80099d2:	8852      	ldrh	r2, [r2, #2]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d008      	beq.n	80099ea <mem_free+0xb2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80099d8:	4b36      	ldr	r3, [pc, #216]	; (8009ab4 <mem_free+0x17c>)
 80099da:	f240 2295 	movw	r2, #661	; 0x295
 80099de:	493b      	ldr	r1, [pc, #236]	; (8009acc <mem_free+0x194>)
 80099e0:	4836      	ldr	r0, [pc, #216]	; (8009abc <mem_free+0x184>)
 80099e2:	f005 fa77 	bl	800eed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80099e6:	483a      	ldr	r0, [pc, #232]	; (8009ad0 <mem_free+0x198>)
 80099e8:	e7da      	b.n	80099a0 <mem_free+0x68>
  mem->used = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80099f0:	68ab      	ldr	r3, [r5, #8]
 80099f2:	42b3      	cmp	r3, r6
    lfree = mem;
 80099f4:	bf88      	it	hi
 80099f6:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80099f8:	428e      	cmp	r6, r1
 80099fa:	d206      	bcs.n	8009a0a <mem_free+0xd2>
 80099fc:	4b2d      	ldr	r3, [pc, #180]	; (8009ab4 <mem_free+0x17c>)
 80099fe:	f240 12df 	movw	r2, #479	; 0x1df
 8009a02:	4934      	ldr	r1, [pc, #208]	; (8009ad4 <mem_free+0x19c>)
 8009a04:	482d      	ldr	r0, [pc, #180]	; (8009abc <mem_free+0x184>)
 8009a06:	f005 fa65 	bl	800eed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009a0a:	686b      	ldr	r3, [r5, #4]
 8009a0c:	429e      	cmp	r6, r3
 8009a0e:	d306      	bcc.n	8009a1e <mem_free+0xe6>
 8009a10:	4b28      	ldr	r3, [pc, #160]	; (8009ab4 <mem_free+0x17c>)
 8009a12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009a16:	4930      	ldr	r1, [pc, #192]	; (8009ad8 <mem_free+0x1a0>)
 8009a18:	4828      	ldr	r0, [pc, #160]	; (8009abc <mem_free+0x184>)
 8009a1a:	f005 fa5b 	bl	800eed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009a1e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009a22:	b133      	cbz	r3, 8009a32 <mem_free+0xfa>
 8009a24:	4b23      	ldr	r3, [pc, #140]	; (8009ab4 <mem_free+0x17c>)
 8009a26:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009a2a:	492c      	ldr	r1, [pc, #176]	; (8009adc <mem_free+0x1a4>)
 8009a2c:	4823      	ldr	r0, [pc, #140]	; (8009abc <mem_free+0x184>)
 8009a2e:	f005 fa51 	bl	800eed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009a32:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009a36:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009a3a:	d906      	bls.n	8009a4a <mem_free+0x112>
 8009a3c:	4b1d      	ldr	r3, [pc, #116]	; (8009ab4 <mem_free+0x17c>)
 8009a3e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009a42:	4927      	ldr	r1, [pc, #156]	; (8009ae0 <mem_free+0x1a8>)
 8009a44:	481d      	ldr	r0, [pc, #116]	; (8009abc <mem_free+0x184>)
 8009a46:	f005 fa45 	bl	800eed4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009a50:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009a52:	4296      	cmp	r6, r2
 8009a54:	d012      	beq.n	8009a7c <mem_free+0x144>
 8009a56:	7910      	ldrb	r0, [r2, #4]
 8009a58:	b980      	cbnz	r0, 8009a7c <mem_free+0x144>
 8009a5a:	6868      	ldr	r0, [r5, #4]
 8009a5c:	4282      	cmp	r2, r0
 8009a5e:	d00d      	beq.n	8009a7c <mem_free+0x144>
    if (lfree == nmem) {
 8009a60:	68a8      	ldr	r0, [r5, #8]
 8009a62:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8009a64:	5a5a      	ldrh	r2, [r3, r1]
 8009a66:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009a6a:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8009a6c:	bf08      	it	eq
 8009a6e:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009a70:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009a74:	bf1e      	ittt	ne
 8009a76:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8009a78:	1af1      	subne	r1, r6, r3
 8009a7a:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8009a7c:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8009a80:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8009a82:	428e      	cmp	r6, r1
 8009a84:	d00f      	beq.n	8009aa6 <mem_free+0x16e>
 8009a86:	7908      	ldrb	r0, [r1, #4]
 8009a88:	b968      	cbnz	r0, 8009aa6 <mem_free+0x16e>
    if (lfree == mem) {
 8009a8a:	68a8      	ldr	r0, [r5, #8]
 8009a8c:	4286      	cmp	r6, r0
      lfree = pmem;
 8009a8e:	bf08      	it	eq
 8009a90:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 8009a92:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009a96:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009a98:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009a9c:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009aa0:	bf1c      	itt	ne
 8009aa2:	185b      	addne	r3, r3, r1
 8009aa4:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009aa6:	480a      	ldr	r0, [pc, #40]	; (8009ad0 <mem_free+0x198>)
}
 8009aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8009aac:	f004 bcf7 	b.w	800e49e <sys_mutex_unlock>
}
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	bf00      	nop
 8009ab4:	0801bc80 	.word	0x0801bc80
 8009ab8:	0801bcf9 	.word	0x0801bcf9
 8009abc:	0801a5dc 	.word	0x0801a5dc
 8009ac0:	20006a94 	.word	0x20006a94
 8009ac4:	0801bd1a 	.word	0x0801bd1a
 8009ac8:	0801bd33 	.word	0x0801bd33
 8009acc:	0801bd59 	.word	0x0801bd59
 8009ad0:	20006aa0 	.word	0x20006aa0
 8009ad4:	0801bd8b 	.word	0x0801bd8b
 8009ad8:	0801bda2 	.word	0x0801bda2
 8009adc:	0801bdbc 	.word	0x0801bdbc
 8009ae0:	0801bdd7 	.word	0x0801bdd7

08009ae4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009ae8:	1ccc      	adds	r4, r1, #3
{
 8009aea:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009aec:	f024 0403 	bic.w	r4, r4, #3
 8009af0:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8009af2:	2c0b      	cmp	r4, #11
 8009af4:	d904      	bls.n	8009b00 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009af6:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8009afa:	d902      	bls.n	8009b02 <mem_trim+0x1e>
    return NULL;
 8009afc:	2500      	movs	r5, #0
 8009afe:	e01a      	b.n	8009b36 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8009b00:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009b02:	42a1      	cmp	r1, r4
 8009b04:	d8fa      	bhi.n	8009afc <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009b06:	4e47      	ldr	r6, [pc, #284]	; (8009c24 <mem_trim+0x140>)
 8009b08:	6833      	ldr	r3, [r6, #0]
 8009b0a:	42ab      	cmp	r3, r5
 8009b0c:	d802      	bhi.n	8009b14 <mem_trim+0x30>
 8009b0e:	6873      	ldr	r3, [r6, #4]
 8009b10:	42ab      	cmp	r3, r5
 8009b12:	d806      	bhi.n	8009b22 <mem_trim+0x3e>
 8009b14:	4b44      	ldr	r3, [pc, #272]	; (8009c28 <mem_trim+0x144>)
 8009b16:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009b1a:	4944      	ldr	r1, [pc, #272]	; (8009c2c <mem_trim+0x148>)
 8009b1c:	4844      	ldr	r0, [pc, #272]	; (8009c30 <mem_trim+0x14c>)
 8009b1e:	f005 f9d9 	bl	800eed4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009b22:	6833      	ldr	r3, [r6, #0]
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	d802      	bhi.n	8009b2e <mem_trim+0x4a>
 8009b28:	6872      	ldr	r2, [r6, #4]
 8009b2a:	42aa      	cmp	r2, r5
 8009b2c:	d806      	bhi.n	8009b3c <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009b2e:	f004 fcc9 	bl	800e4c4 <sys_arch_protect>
 8009b32:	f004 fcd3 	bl	800e4dc <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8009b36:	4628      	mov	r0, r5
 8009b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009b3c:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009b40:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8009b44:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009b46:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8009b4a:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009b4c:	eba8 0807 	sub.w	r8, r8, r7
 8009b50:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009b54:	45a0      	cmp	r8, r4
 8009b56:	d207      	bcs.n	8009b68 <mem_trim+0x84>
 8009b58:	4b33      	ldr	r3, [pc, #204]	; (8009c28 <mem_trim+0x144>)
 8009b5a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009b5e:	4935      	ldr	r1, [pc, #212]	; (8009c34 <mem_trim+0x150>)
 8009b60:	4833      	ldr	r0, [pc, #204]	; (8009c30 <mem_trim+0x14c>)
 8009b62:	f005 f9b7 	bl	800eed4 <iprintf>
  if (newsize > size) {
 8009b66:	e7c9      	b.n	8009afc <mem_trim+0x18>
  if (newsize == size) {
 8009b68:	d0e5      	beq.n	8009b36 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 8009b6a:	4833      	ldr	r0, [pc, #204]	; (8009c38 <mem_trim+0x154>)
 8009b6c:	f004 fc92 	bl	800e494 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8009b70:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009b74:	f8d6 b000 	ldr.w	fp, [r6]
 8009b78:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8009b7c:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8009b80:	bb3b      	cbnz	r3, 8009bd2 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b82:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 8009b86:	d106      	bne.n	8009b96 <mem_trim+0xb2>
 8009b88:	4b27      	ldr	r3, [pc, #156]	; (8009c28 <mem_trim+0x144>)
 8009b8a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009b8e:	492b      	ldr	r1, [pc, #172]	; (8009c3c <mem_trim+0x158>)
 8009b90:	4827      	ldr	r0, [pc, #156]	; (8009c30 <mem_trim+0x14c>)
 8009b92:	f005 f99f 	bl	800eed4 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b96:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8009b9a:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8009b9c:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ba0:	441c      	add	r4, r3
  return (struct mem *)(void *)&ram[ptr];
 8009ba2:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8009ba4:	4551      	cmp	r1, sl
    mem2->used = 0;
 8009ba6:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009baa:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8009bac:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8009bb0:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8009bb2:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8009bb4:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8009bb6:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bba:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8009bbc:	bf08      	it	eq
 8009bbe:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bc0:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 8009bc4:	d001      	beq.n	8009bca <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009bc6:	440b      	add	r3, r1
 8009bc8:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009bca:	481b      	ldr	r0, [pc, #108]	; (8009c38 <mem_trim+0x154>)
 8009bcc:	f004 fc67 	bl	800e49e <sys_mutex_unlock>
  return rmem;
 8009bd0:	e7b1      	b.n	8009b36 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009bd2:	f104 0314 	add.w	r3, r4, #20
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4598      	cmp	r8, r3
 8009bda:	d3f6      	bcc.n	8009bca <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009bdc:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009be0:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009be4:	441c      	add	r4, r3
 8009be6:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009be8:	d106      	bne.n	8009bf8 <mem_trim+0x114>
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <mem_trim+0x144>)
 8009bec:	f240 3216 	movw	r2, #790	; 0x316
 8009bf0:	4912      	ldr	r1, [pc, #72]	; (8009c3c <mem_trim+0x158>)
 8009bf2:	480f      	ldr	r0, [pc, #60]	; (8009c30 <mem_trim+0x14c>)
 8009bf4:	f005 f96e 	bl	800eed4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009bf8:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8009bfa:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8009bfc:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8009bfe:	4291      	cmp	r1, r2
    mem2->used = 0;
 8009c00:	f04f 0100 	mov.w	r1, #0
 8009c04:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8009c06:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8009c0a:	bf88      	it	hi
 8009c0c:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8009c0e:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8009c10:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8009c12:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009c16:	5b1a      	ldrh	r2, [r3, r4]
 8009c18:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009c1c:	bf1c      	itt	ne
 8009c1e:	189b      	addne	r3, r3, r2
 8009c20:	805c      	strhne	r4, [r3, #2]
 8009c22:	e7d2      	b.n	8009bca <mem_trim+0xe6>
 8009c24:	20006a94 	.word	0x20006a94
 8009c28:	0801bc80 	.word	0x0801bc80
 8009c2c:	0801be01 	.word	0x0801be01
 8009c30:	0801a5dc 	.word	0x0801a5dc
 8009c34:	0801be18 	.word	0x0801be18
 8009c38:	20006aa0 	.word	0x20006aa0
 8009c3c:	0801be38 	.word	0x0801be38

08009c40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f000 8084 	beq.w	8009d52 <mem_malloc+0x112>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009c4a:	1cc5      	adds	r5, r0, #3
 8009c4c:	f025 0503 	bic.w	r5, r5, #3
 8009c50:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8009c52:	2d0b      	cmp	r5, #11
 8009c54:	d904      	bls.n	8009c60 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009c56:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8009c5a:	d902      	bls.n	8009c62 <mem_malloc+0x22>
    return NULL;
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e078      	b.n	8009d52 <mem_malloc+0x112>
    size = MIN_SIZE_ALIGNED;
 8009c60:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009c62:	42a8      	cmp	r0, r5
 8009c64:	d8fa      	bhi.n	8009c5c <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009c66:	4f40      	ldr	r7, [pc, #256]	; (8009d68 <mem_malloc+0x128>)
 8009c68:	f107 000c 	add.w	r0, r7, #12
 8009c6c:	f004 fc12 	bl	800e494 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c74:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c78:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8009c7c:	1ab6      	subs	r6, r6, r2
 8009c7e:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c80:	4286      	cmp	r6, r0
 8009c82:	d303      	bcc.n	8009c8c <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009c84:	4839      	ldr	r0, [pc, #228]	; (8009d6c <mem_malloc+0x12c>)
 8009c86:	f004 fc0a 	bl	800e49e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009c8a:	e7e7      	b.n	8009c5c <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8009c8c:	1994      	adds	r4, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c8e:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8009c90:	7923      	ldrb	r3, [r4, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d165      	bne.n	8009d62 <mem_malloc+0x122>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c96:	ebac 0306 	sub.w	r3, ip, r6
 8009c9a:	440b      	add	r3, r1
      if ((!mem->used) &&
 8009c9c:	42ab      	cmp	r3, r5
 8009c9e:	d360      	bcc.n	8009d62 <mem_malloc+0x122>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009ca0:	f105 0808 	add.w	r8, r5, #8
 8009ca4:	3514      	adds	r5, #20
 8009ca6:	b2ad      	uxth	r5, r5
 8009ca8:	fa1f f888 	uxth.w	r8, r8
 8009cac:	42ab      	cmp	r3, r5
 8009cae:	d352      	bcc.n	8009d56 <mem_malloc+0x116>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009cb0:	eb08 0506 	add.w	r5, r8, r6
 8009cb4:	b2ad      	uxth	r5, r5
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009cb6:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8009cba:	d106      	bne.n	8009cca <mem_malloc+0x8a>
 8009cbc:	4b2c      	ldr	r3, [pc, #176]	; (8009d70 <mem_malloc+0x130>)
 8009cbe:	f240 3287 	movw	r2, #903	; 0x387
 8009cc2:	492c      	ldr	r1, [pc, #176]	; (8009d74 <mem_malloc+0x134>)
 8009cc4:	482c      	ldr	r0, [pc, #176]	; (8009d78 <mem_malloc+0x138>)
 8009cc6:	f005 f905 	bl	800eed4 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009cca:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8009ccc:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8009cce:	195a      	adds	r2, r3, r5
          mem2->used = 0;
 8009cd0:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8009cd2:	8821      	ldrh	r1, [r4, #0]
 8009cd4:	5359      	strh	r1, [r3, r5]
          mem2->prev = ptr;
 8009cd6:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8009cd8:	2201      	movs	r2, #1
          mem->next = ptr2;
 8009cda:	8025      	strh	r5, [r4, #0]
          mem->used = 1;
 8009cdc:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009cde:	5b5a      	ldrh	r2, [r3, r5]
 8009ce0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009ce4:	d001      	beq.n	8009cea <mem_malloc+0xaa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009ce6:	4413      	add	r3, r2
 8009ce8:	805d      	strh	r5, [r3, #2]
        if (mem == lfree) {
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	d110      	bne.n	8009d12 <mem_malloc+0xd2>
  return (struct mem *)(void *)&ram[ptr];
 8009cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 8009cf4:	791a      	ldrb	r2, [r3, #4]
 8009cf6:	b10a      	cbz	r2, 8009cfc <mem_malloc+0xbc>
 8009cf8:	4299      	cmp	r1, r3
 8009cfa:	d12f      	bne.n	8009d5c <mem_malloc+0x11c>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009cfc:	4299      	cmp	r1, r3
          lfree = cur;
 8009cfe:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009d00:	d007      	beq.n	8009d12 <mem_malloc+0xd2>
 8009d02:	b132      	cbz	r2, 8009d12 <mem_malloc+0xd2>
 8009d04:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <mem_malloc+0x130>)
 8009d06:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009d0a:	491c      	ldr	r1, [pc, #112]	; (8009d7c <mem_malloc+0x13c>)
 8009d0c:	481a      	ldr	r0, [pc, #104]	; (8009d78 <mem_malloc+0x138>)
 8009d0e:	f005 f8e1 	bl	800eed4 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8009d12:	4816      	ldr	r0, [pc, #88]	; (8009d6c <mem_malloc+0x12c>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009d14:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 8009d16:	f004 fbc2 	bl	800e49e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4543      	cmp	r3, r8
 8009d1e:	d206      	bcs.n	8009d2e <mem_malloc+0xee>
 8009d20:	4b13      	ldr	r3, [pc, #76]	; (8009d70 <mem_malloc+0x130>)
 8009d22:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009d26:	4916      	ldr	r1, [pc, #88]	; (8009d80 <mem_malloc+0x140>)
 8009d28:	4813      	ldr	r0, [pc, #76]	; (8009d78 <mem_malloc+0x138>)
 8009d2a:	f005 f8d3 	bl	800eed4 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009d2e:	07a3      	lsls	r3, r4, #30
 8009d30:	d00d      	beq.n	8009d4e <mem_malloc+0x10e>
 8009d32:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <mem_malloc+0x130>)
 8009d34:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009d38:	4912      	ldr	r1, [pc, #72]	; (8009d84 <mem_malloc+0x144>)
 8009d3a:	480f      	ldr	r0, [pc, #60]	; (8009d78 <mem_malloc+0x138>)
 8009d3c:	f005 f8ca 	bl	800eed4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009d40:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <mem_malloc+0x130>)
 8009d42:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009d46:	4910      	ldr	r1, [pc, #64]	; (8009d88 <mem_malloc+0x148>)
 8009d48:	480b      	ldr	r0, [pc, #44]	; (8009d78 <mem_malloc+0x138>)
 8009d4a:	f005 f8c3 	bl	800eed4 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009d4e:	f104 0008 	add.w	r0, r4, #8
}
 8009d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8009d56:	2301      	movs	r3, #1
 8009d58:	7123      	strb	r3, [r4, #4]
 8009d5a:	e7c6      	b.n	8009cea <mem_malloc+0xaa>
  return (struct mem *)(void *)&ram[ptr];
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	4403      	add	r3, r0
 8009d60:	e7c8      	b.n	8009cf4 <mem_malloc+0xb4>
 8009d62:	460e      	mov	r6, r1
 8009d64:	e78c      	b.n	8009c80 <mem_malloc+0x40>
 8009d66:	bf00      	nop
 8009d68:	20006a94 	.word	0x20006a94
 8009d6c:	20006aa0 	.word	0x20006aa0
 8009d70:	0801bc80 	.word	0x0801bc80
 8009d74:	0801be38 	.word	0x0801be38
 8009d78:	0801a5dc 	.word	0x0801a5dc
 8009d7c:	0801be49 	.word	0x0801be49
 8009d80:	0801be62 	.word	0x0801be62
 8009d84:	0801be92 	.word	0x0801be92
 8009d88:	0801bec1 	.word	0x0801bec1

08009d8c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009d90:	f004 fb98 	bl	800e4c4 <sys_arch_protect>
 8009d94:	4605      	mov	r5, r0

  memp = *desc->tab;
 8009d96:	68a3      	ldr	r3, [r4, #8]
 8009d98:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d9a:	b15c      	cbz	r4, 8009db4 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d9c:	6822      	ldr	r2, [r4, #0]
 8009d9e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009da0:	07a3      	lsls	r3, r4, #30
 8009da2:	d006      	beq.n	8009db2 <do_memp_malloc_pool+0x26>
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <do_memp_malloc_pool+0x30>)
 8009da6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009daa:	4905      	ldr	r1, [pc, #20]	; (8009dc0 <do_memp_malloc_pool+0x34>)
 8009dac:	4805      	ldr	r0, [pc, #20]	; (8009dc4 <do_memp_malloc_pool+0x38>)
 8009dae:	f005 f891 	bl	800eed4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009db2:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009db4:	f004 fb92 	bl	800e4dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8009db8:	4620      	mov	r0, r4
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	0801bee4 	.word	0x0801bee4
 8009dc0:	0801bf43 	.word	0x0801bf43
 8009dc4:	0801a5dc 	.word	0x0801a5dc

08009dc8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009dc8:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009dca:	078b      	lsls	r3, r1, #30
{
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009dd0:	d006      	beq.n	8009de0 <do_memp_free_pool+0x18>
 8009dd2:	4b08      	ldr	r3, [pc, #32]	; (8009df4 <do_memp_free_pool+0x2c>)
 8009dd4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009dd8:	4907      	ldr	r1, [pc, #28]	; (8009df8 <do_memp_free_pool+0x30>)
 8009dda:	4808      	ldr	r0, [pc, #32]	; (8009dfc <do_memp_free_pool+0x34>)
 8009ddc:	f005 f87a 	bl	800eed4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8009de0:	f004 fb70 	bl	800e4c4 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009de4:	68ab      	ldr	r3, [r5, #8]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009dea:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009df0:	f004 bb74 	b.w	800e4dc <sys_arch_unprotect>
 8009df4:	0801bee4 	.word	0x0801bee4
 8009df8:	0801bf66 	.word	0x0801bf66
 8009dfc:	0801a5dc 	.word	0x0801a5dc

08009e00 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009e00:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8009e02:	2200      	movs	r2, #0
 8009e04:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009e06:	3303      	adds	r3, #3
{
 8009e08:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009e0a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8009e0e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8009e10:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8009e12:	4294      	cmp	r4, r2
 8009e14:	dc00      	bgt.n	8009e18 <memp_init_pool+0x18>
}
 8009e16:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8009e18:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8009e1a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009e1c:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009e1e:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8009e20:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009e22:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8009e24:	e7f5      	b.n	8009e12 <memp_init_pool+0x12>
	...

08009e28 <memp_init>:
{
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d05      	ldr	r5, [pc, #20]	; (8009e40 <memp_init+0x18>)
 8009e2c:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e2e:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 8009e30:	f855 0b04 	ldr.w	r0, [r5], #4
 8009e34:	f7ff ffe4 	bl	8009e00 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e38:	b2a4      	uxth	r4, r4
 8009e3a:	2c00      	cmp	r4, #0
 8009e3c:	d1f7      	bne.n	8009e2e <memp_init+0x6>
}
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	0801176c 	.word	0x0801176c

08009e44 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e44:	280c      	cmp	r0, #12
{
 8009e46:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e48:	d806      	bhi.n	8009e58 <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e4a:	4b08      	ldr	r3, [pc, #32]	; (8009e6c <memp_malloc+0x28>)
 8009e4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8009e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e54:	f7ff bf9a 	b.w	8009d8c <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <memp_malloc+0x2c>)
 8009e5a:	f240 1257 	movw	r2, #343	; 0x157
 8009e5e:	4905      	ldr	r1, [pc, #20]	; (8009e74 <memp_malloc+0x30>)
 8009e60:	4805      	ldr	r0, [pc, #20]	; (8009e78 <memp_malloc+0x34>)
 8009e62:	f005 f837 	bl	800eed4 <iprintf>
}
 8009e66:	2000      	movs	r0, #0
 8009e68:	bd08      	pop	{r3, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0801176c 	.word	0x0801176c
 8009e70:	0801bee4 	.word	0x0801bee4
 8009e74:	0801bf98 	.word	0x0801bf98
 8009e78:	0801a5dc 	.word	0x0801a5dc

08009e7c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009e7c:	280c      	cmp	r0, #12
 8009e7e:	d906      	bls.n	8009e8e <memp_free+0x12>
 8009e80:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <memp_free+0x20>)
 8009e82:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009e86:	4906      	ldr	r1, [pc, #24]	; (8009ea0 <memp_free+0x24>)
 8009e88:	4806      	ldr	r0, [pc, #24]	; (8009ea4 <memp_free+0x28>)
 8009e8a:	f005 b823 	b.w	800eed4 <iprintf>

  if (mem == NULL) {
 8009e8e:	b121      	cbz	r1, 8009e9a <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <memp_free+0x2c>)
 8009e92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e96:	f7ff bf97 	b.w	8009dc8 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009e9a:	4770      	bx	lr
 8009e9c:	0801bee4 	.word	0x0801bee4
 8009ea0:	0801bfb5 	.word	0x0801bfb5
 8009ea4:	0801a5dc 	.word	0x0801a5dc
 8009ea8:	0801176c 	.word	0x0801176c

08009eac <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009eac:	f06f 000b 	mvn.w	r0, #11
 8009eb0:	4770      	bx	lr
	...

08009eb4 <netif_issue_reports>:
{
 8009eb4:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	b930      	cbnz	r0, 8009ec8 <netif_issue_reports+0x14>
 8009eba:	4b0c      	ldr	r3, [pc, #48]	; (8009eec <netif_issue_reports+0x38>)
 8009ebc:	f240 326d 	movw	r2, #877	; 0x36d
 8009ec0:	490b      	ldr	r1, [pc, #44]	; (8009ef0 <netif_issue_reports+0x3c>)
 8009ec2:	480c      	ldr	r0, [pc, #48]	; (8009ef4 <netif_issue_reports+0x40>)
 8009ec4:	f005 f806 	bl	800eed4 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009ec8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009ecc:	f003 0205 	and.w	r2, r3, #5
 8009ed0:	2a05      	cmp	r2, #5
 8009ed2:	d109      	bne.n	8009ee8 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ed4:	6862      	ldr	r2, [r4, #4]
 8009ed6:	b13a      	cbz	r2, 8009ee8 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009ed8:	071b      	lsls	r3, r3, #28
 8009eda:	d505      	bpl.n	8009ee8 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 8009edc:	1d21      	adds	r1, r4, #4
 8009ede:	4620      	mov	r0, r4
}
 8009ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8009ee4:	f7fe bc4a 	b.w	800877c <etharp_request>
}
 8009ee8:	bd10      	pop	{r4, pc}
 8009eea:	bf00      	nop
 8009eec:	0801bfd0 	.word	0x0801bfd0
 8009ef0:	0801c030 	.word	0x0801c030
 8009ef4:	0801a5dc 	.word	0x0801a5dc

08009ef8 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009ef8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009efa:	4605      	mov	r5, r0
 8009efc:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009efe:	460c      	mov	r4, r1
 8009f00:	b931      	cbnz	r1, 8009f10 <netif_do_set_ipaddr.isra.0+0x18>
 8009f02:	4b0e      	ldr	r3, [pc, #56]	; (8009f3c <netif_do_set_ipaddr.isra.0+0x44>)
 8009f04:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009f08:	490d      	ldr	r1, [pc, #52]	; (8009f40 <netif_do_set_ipaddr.isra.0+0x48>)
 8009f0a:	480e      	ldr	r0, [pc, #56]	; (8009f44 <netif_do_set_ipaddr.isra.0+0x4c>)
 8009f0c:	f004 ffe2 	bl	800eed4 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009f10:	686b      	ldr	r3, [r5, #4]
 8009f12:	6822      	ldr	r2, [r4, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d00f      	beq.n	8009f38 <netif_do_set_ipaddr.isra.0+0x40>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009f18:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009f1a:	a901      	add	r1, sp, #4
 8009f1c:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009f1e:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009f20:	f001 fc54 	bl	800b7cc <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009f24:	a901      	add	r1, sp, #4
 8009f26:	4630      	mov	r0, r6
 8009f28:	f004 f95c 	bl	800e1e4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009f2c:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009f2e:	2101      	movs	r1, #1
 8009f30:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009f32:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009f34:	f7ff ffbe 	bl	8009eb4 <netif_issue_reports>
}
 8009f38:	b002      	add	sp, #8
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	0801bfd0 	.word	0x0801bfd0
 8009f40:	0801ac1e 	.word	0x0801ac1e
 8009f44:	0801a5dc 	.word	0x0801a5dc

08009f48 <netif_init>:
}
 8009f48:	4770      	bx	lr
	...

08009f4c <netif_set_addr>:
{
 8009f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8009f4e:	4d14      	ldr	r5, [pc, #80]	; (8009fa0 <netif_set_addr+0x54>)
{
 8009f50:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8009f52:	2900      	cmp	r1, #0
 8009f54:	bf14      	ite	ne
 8009f56:	460e      	movne	r6, r1
 8009f58:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	bf14      	ite	ne
 8009f5e:	4617      	movne	r7, r2
 8009f60:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf18      	it	ne
 8009f66:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8009f68:	6833      	ldr	r3, [r6, #0]
 8009f6a:	b9b3      	cbnz	r3, 8009f9a <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009f6c:	aa01      	add	r2, sp, #4
 8009f6e:	4631      	mov	r1, r6
 8009f70:	f7ff ffc2 	bl	8009ef8 <netif_do_set_ipaddr.isra.0>
 8009f74:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	68a1      	ldr	r1, [r4, #8]
 8009f7a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009f7c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009f7e:	bf18      	it	ne
 8009f80:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009f82:	682a      	ldr	r2, [r5, #0]
 8009f84:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009f86:	bf18      	it	ne
 8009f88:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8009f8a:	b923      	cbnz	r3, 8009f96 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009f8c:	aa01      	add	r2, sp, #4
 8009f8e:	4631      	mov	r1, r6
 8009f90:	4620      	mov	r0, r4
 8009f92:	f7ff ffb1 	bl	8009ef8 <netif_do_set_ipaddr.isra.0>
}
 8009f96:	b003      	add	sp, #12
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e7eb      	b.n	8009f76 <netif_set_addr+0x2a>
 8009f9e:	bf00      	nop
 8009fa0:	08011768 	.word	0x08011768

08009fa4 <netif_add>:
{
 8009fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009fac:	4604      	mov	r4, r0
 8009fae:	b948      	cbnz	r0, 8009fc4 <netif_add+0x20>
 8009fb0:	4b3b      	ldr	r3, [pc, #236]	; (800a0a0 <netif_add+0xfc>)
 8009fb2:	f240 1227 	movw	r2, #295	; 0x127
 8009fb6:	493b      	ldr	r1, [pc, #236]	; (800a0a4 <netif_add+0x100>)
 8009fb8:	483b      	ldr	r0, [pc, #236]	; (800a0a8 <netif_add+0x104>)
 8009fba:	f004 ff8b 	bl	800eed4 <iprintf>
}
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009fc4:	f1b8 0f00 	cmp.w	r8, #0
 8009fc8:	d108      	bne.n	8009fdc <netif_add+0x38>
 8009fca:	4b35      	ldr	r3, [pc, #212]	; (800a0a0 <netif_add+0xfc>)
 8009fcc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009fd0:	4936      	ldr	r1, [pc, #216]	; (800a0ac <netif_add+0x108>)
 8009fd2:	4644      	mov	r4, r8
 8009fd4:	4834      	ldr	r0, [pc, #208]	; (800a0a8 <netif_add+0x104>)
 8009fd6:	f004 ff7d 	bl	800eed4 <iprintf>
 8009fda:	e7f0      	b.n	8009fbe <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 8009fdc:	4e34      	ldr	r6, [pc, #208]	; (800a0b0 <netif_add+0x10c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009fde:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009fe0:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800a0bc <netif_add+0x118>
  netif->output = netif_null_output_ip4;
 8009fe4:	6146      	str	r6, [r0, #20]
  netif->state = state;
 8009fe6:	9e08      	ldr	r6, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009fe8:	42ab      	cmp	r3, r5
 8009fea:	bf08      	it	eq
 8009fec:	4663      	moveq	r3, ip
  ip_addr_set_zero_ip4(&netif->gw);
 8009fee:	60c5      	str	r5, [r0, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009ff0:	42aa      	cmp	r2, r5
 8009ff2:	bf08      	it	eq
 8009ff4:	4662      	moveq	r2, ip
  netif->state = state;
 8009ff6:	6206      	str	r6, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009ff8:	42a9      	cmp	r1, r5
 8009ffa:	bf08      	it	eq
 8009ffc:	4661      	moveq	r1, ip
  netif->num = netif_num;
 8009ffe:	4e2d      	ldr	r6, [pc, #180]	; (800a0b4 <netif_add+0x110>)
  netif->mtu = 0;
 800a000:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->num = netif_num;
 800a002:	7837      	ldrb	r7, [r6, #0]
  netif->flags = 0;
 800a004:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  netif->num = netif_num;
 800a008:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
  netif->input = input;
 800a00c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a00e:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 800a010:	61c5      	str	r5, [r0, #28]
  netif->input = input;
 800a012:	6107      	str	r7, [r0, #16]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a014:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a018:	f7ff ff98 	bl	8009f4c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800a01c:	4620      	mov	r0, r4
 800a01e:	47c0      	blx	r8
 800a020:	2800      	cmp	r0, #0
 800a022:	d13b      	bne.n	800a09c <netif_add+0xf8>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a024:	f8df a078 	ldr.w	sl, [pc, #120]	; 800a0a0 <netif_add+0xfc>
 800a028:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a0c0 <netif_add+0x11c>
 800a02c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a0a8 <netif_add+0x104>
      if (netif->num == 255) {
 800a030:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 800a034:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a036:	6875      	ldr	r5, [r6, #4]
      if (netif->num == 255) {
 800a038:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 800a03a:	bf04      	itt	eq
 800a03c:	2300      	moveq	r3, #0
 800a03e:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a042:	b92d      	cbnz	r5, 800a050 <netif_add+0xac>
  if (netif->num == 254) {
 800a044:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a048:	2bfe      	cmp	r3, #254	; 0xfe
 800a04a:	d120      	bne.n	800a08e <netif_add+0xea>
    netif_num = 0;
 800a04c:	462b      	mov	r3, r5
 800a04e:	e020      	b.n	800a092 <netif_add+0xee>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a050:	42a5      	cmp	r5, r4
 800a052:	d106      	bne.n	800a062 <netif_add+0xbe>
 800a054:	4653      	mov	r3, sl
 800a056:	f240 128b 	movw	r2, #395	; 0x18b
 800a05a:	4649      	mov	r1, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	f004 ff39 	bl	800eed4 <iprintf>
        num_netifs++;
 800a062:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a064:	2fff      	cmp	r7, #255	; 0xff
 800a066:	dd06      	ble.n	800a076 <netif_add+0xd2>
 800a068:	4653      	mov	r3, sl
 800a06a:	f240 128d 	movw	r2, #397	; 0x18d
 800a06e:	4912      	ldr	r1, [pc, #72]	; (800a0b8 <netif_add+0x114>)
 800a070:	4640      	mov	r0, r8
 800a072:	f004 ff2f 	bl	800eed4 <iprintf>
        if (netif2->num == netif->num) {
 800a076:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a07a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 800a07e:	429a      	cmp	r2, r3
 800a080:	d103      	bne.n	800a08a <netif_add+0xe6>
          netif->num++;
 800a082:	3201      	adds	r2, #1
 800a084:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 800a088:	e7d2      	b.n	800a030 <netif_add+0x8c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a08a:	682d      	ldr	r5, [r5, #0]
 800a08c:	e7d9      	b.n	800a042 <netif_add+0x9e>
    netif_num = (u8_t)(netif->num + 1);
 800a08e:	3301      	adds	r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 800a094:	6873      	ldr	r3, [r6, #4]
 800a096:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800a098:	6074      	str	r4, [r6, #4]
  return netif;
 800a09a:	e790      	b.n	8009fbe <netif_add+0x1a>
    return NULL;
 800a09c:	462c      	mov	r4, r5
 800a09e:	e78e      	b.n	8009fbe <netif_add+0x1a>
 800a0a0:	0801bfd0 	.word	0x0801bfd0
 800a0a4:	0801c0e5 	.word	0x0801c0e5
 800a0a8:	0801a5dc 	.word	0x0801a5dc
 800a0ac:	0801c0fe 	.word	0x0801c0fe
 800a0b0:	08009ead 	.word	0x08009ead
 800a0b4:	2000cff4 	.word	0x2000cff4
 800a0b8:	0801c134 	.word	0x0801c134
 800a0bc:	08011768 	.word	0x08011768
 800a0c0:	0801c120 	.word	0x0801c120

0800a0c4 <netif_set_default>:
  netif_default = netif;
 800a0c4:	4b01      	ldr	r3, [pc, #4]	; (800a0cc <netif_set_default+0x8>)
 800a0c6:	6098      	str	r0, [r3, #8]
}
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	2000cff4 	.word	0x2000cff4

0800a0d0 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a0d0:	b930      	cbnz	r0, 800a0e0 <netif_set_up+0x10>
 800a0d2:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <netif_set_up+0x28>)
 800a0d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a0d8:	4908      	ldr	r1, [pc, #32]	; (800a0fc <netif_set_up+0x2c>)
 800a0da:	4809      	ldr	r0, [pc, #36]	; (800a100 <netif_set_up+0x30>)
 800a0dc:	f004 befa 	b.w	800eed4 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a0e0:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800a0e4:	07d1      	lsls	r1, r2, #31
 800a0e6:	d406      	bmi.n	800a0f6 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a0e8:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a0ec:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a0ee:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a0f2:	f7ff bedf 	b.w	8009eb4 <netif_issue_reports>
}
 800a0f6:	4770      	bx	lr
 800a0f8:	0801bfd0 	.word	0x0801bfd0
 800a0fc:	0801c162 	.word	0x0801c162
 800a100:	0801a5dc 	.word	0x0801a5dc

0800a104 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a104:	b930      	cbnz	r0, 800a114 <netif_set_down+0x10>
 800a106:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <netif_set_down+0x2c>)
 800a108:	f240 329b 	movw	r2, #923	; 0x39b
 800a10c:	4909      	ldr	r1, [pc, #36]	; (800a134 <netif_set_down+0x30>)
 800a10e:	480a      	ldr	r0, [pc, #40]	; (800a138 <netif_set_down+0x34>)
 800a110:	f004 bee0 	b.w	800eed4 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800a114:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800a118:	07d1      	lsls	r1, r2, #31
 800a11a:	d507      	bpl.n	800a12c <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a11c:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a120:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a122:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a126:	d501      	bpl.n	800a12c <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 800a128:	f7fe ba64 	b.w	80085f4 <etharp_cleanup_netif>
}
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	0801bfd0 	.word	0x0801bfd0
 800a134:	0801c17e 	.word	0x0801c17e
 800a138:	0801a5dc 	.word	0x0801a5dc

0800a13c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a13c:	4603      	mov	r3, r0
 800a13e:	b158      	cbz	r0, 800a158 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800a140:	4a06      	ldr	r2, [pc, #24]	; (800a15c <netif_get_by_index+0x20>)
 800a142:	6850      	ldr	r0, [r2, #4]
 800a144:	b900      	cbnz	r0, 800a148 <netif_get_by_index+0xc>
 800a146:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800a148:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800a14c:	3201      	adds	r2, #1
 800a14e:	b2d2      	uxtb	r2, r2
 800a150:	429a      	cmp	r2, r3
 800a152:	d001      	beq.n	800a158 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800a154:	6800      	ldr	r0, [r0, #0]
 800a156:	e7f5      	b.n	800a144 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	2000cff4 	.word	0x2000cff4

0800a160 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a160:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a162:	b968      	cbnz	r0, 800a180 <pbuf_add_header_impl+0x20>
 800a164:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <pbuf_add_header_impl+0x58>)
 800a166:	f240 12df 	movw	r2, #479	; 0x1df
 800a16a:	4914      	ldr	r1, [pc, #80]	; (800a1bc <pbuf_add_header_impl+0x5c>)
 800a16c:	4814      	ldr	r0, [pc, #80]	; (800a1c0 <pbuf_add_header_impl+0x60>)
 800a16e:	f004 feb1 	bl	800eed4 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 800a172:	2001      	movs	r0, #1
 800a174:	e01f      	b.n	800a1b6 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a176:	2a00      	cmp	r2, #0
 800a178:	d0fb      	beq.n	800a172 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800a17a:	6842      	ldr	r2, [r0, #4]
 800a17c:	1a51      	subs	r1, r2, r1
 800a17e:	e014      	b.n	800a1aa <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a180:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a184:	d2f5      	bcs.n	800a172 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800a186:	b1a9      	cbz	r1, 800a1b4 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a188:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 800a18a:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a18c:	fa13 f381 	uxtah	r3, r3, r1
 800a190:	b29b      	uxth	r3, r3
 800a192:	429c      	cmp	r4, r3
 800a194:	d8ed      	bhi.n	800a172 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a196:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	daeb      	bge.n	800a176 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800a19e:	6842      	ldr	r2, [r0, #4]
 800a1a0:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a1a2:	f100 0210 	add.w	r2, r0, #16
 800a1a6:	4291      	cmp	r1, r2
 800a1a8:	d3e3      	bcc.n	800a172 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800a1aa:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800a1ac:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a1ae:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a1b0:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a1b2:	8144      	strh	r4, [r0, #10]


  return 0;
 800a1b4:	2000      	movs	r0, #0
}
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	0801c1e0 	.word	0x0801c1e0
 800a1bc:	0801c2e1 	.word	0x0801c2e1
 800a1c0:	0801a5dc 	.word	0x0801a5dc

0800a1c4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a1c4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a1c8:	2b01      	cmp	r3, #1
{
 800a1ca:	b570      	push	{r4, r5, r6, lr}
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a1d2:	d006      	beq.n	800a1e2 <pbuf_alloc_reference+0x1e>
 800a1d4:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <pbuf_alloc_reference+0x3c>)
 800a1d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a1da:	490a      	ldr	r1, [pc, #40]	; (800a204 <pbuf_alloc_reference+0x40>)
 800a1dc:	480a      	ldr	r0, [pc, #40]	; (800a208 <pbuf_alloc_reference+0x44>)
 800a1de:	f004 fe79 	bl	800eed4 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a1e2:	200b      	movs	r0, #11
 800a1e4:	f7ff fe2e 	bl	8009e44 <memp_malloc>
  if (p == NULL) {
 800a1e8:	b140      	cbz	r0, 800a1fc <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800a1ea:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800a1ec:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800a1ee:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 800a1f0:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 800a1f2:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 800a1f4:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	81c3      	strh	r3, [r0, #14]
}
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
 800a1fe:	bf00      	nop
 800a200:	0801c1e0 	.word	0x0801c1e0
 800a204:	0801c23f 	.word	0x0801c23f
 800a208:	0801a5dc 	.word	0x0801a5dc

0800a20c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a20c:	3003      	adds	r0, #3
 800a20e:	f020 0003 	bic.w	r0, r0, #3
{
 800a212:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a214:	180e      	adds	r6, r1, r0
 800a216:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800a21a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a21c:	42ae      	cmp	r6, r5
 800a21e:	d80d      	bhi.n	800a23c <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 800a220:	b104      	cbz	r4, 800a224 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a222:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a224:	4618      	mov	r0, r3
  p->next = NULL;
 800a226:	2300      	movs	r3, #0
  p->payload = payload;
 800a228:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 800a22c:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 800a22e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800a230:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 800a232:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800a234:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 800a236:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 800a238:	81c3      	strh	r3, [r0, #14]
}
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800a23c:	2000      	movs	r0, #0
 800a23e:	e7fc      	b.n	800a23a <pbuf_alloced_custom+0x2e>

0800a240 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a240:	2200      	movs	r2, #0
 800a242:	f7ff bf8d 	b.w	800a160 <pbuf_add_header_impl>
	...

0800a248 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a248:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a24a:	b990      	cbnz	r0, 800a272 <pbuf_remove_header+0x2a>
 800a24c:	4b10      	ldr	r3, [pc, #64]	; (800a290 <pbuf_remove_header+0x48>)
 800a24e:	f240 224b 	movw	r2, #587	; 0x24b
 800a252:	4910      	ldr	r1, [pc, #64]	; (800a294 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a254:	4810      	ldr	r0, [pc, #64]	; (800a298 <pbuf_remove_header+0x50>)
 800a256:	f004 fe3d 	bl	800eed4 <iprintf>
    return 1;
 800a25a:	2001      	movs	r0, #1
 800a25c:	e008      	b.n	800a270 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a25e:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a260:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a262:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a264:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a266:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a268:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a26a:	1a9b      	subs	r3, r3, r2
 800a26c:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a26e:	2000      	movs	r0, #0
}
 800a270:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a272:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a276:	d2f0      	bcs.n	800a25a <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 800a278:	2900      	cmp	r1, #0
 800a27a:	d0f8      	beq.n	800a26e <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 800a27c:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a27e:	8943      	ldrh	r3, [r0, #10]
 800a280:	429a      	cmp	r2, r3
 800a282:	d9ec      	bls.n	800a25e <pbuf_remove_header+0x16>
 800a284:	4b02      	ldr	r3, [pc, #8]	; (800a290 <pbuf_remove_header+0x48>)
 800a286:	f240 2255 	movw	r2, #597	; 0x255
 800a28a:	4904      	ldr	r1, [pc, #16]	; (800a29c <pbuf_remove_header+0x54>)
 800a28c:	e7e2      	b.n	800a254 <pbuf_remove_header+0xc>
 800a28e:	bf00      	nop
 800a290:	0801c1e0 	.word	0x0801c1e0
 800a294:	0801c2e1 	.word	0x0801c2e1
 800a298:	0801a5dc 	.word	0x0801a5dc
 800a29c:	0801c251 	.word	0x0801c251

0800a2a0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800a2a0:	1e0b      	subs	r3, r1, #0
 800a2a2:	da02      	bge.n	800a2aa <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a2a4:	4259      	negs	r1, r3
 800a2a6:	f7ff bfcf 	b.w	800a248 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f7ff bf58 	b.w	800a160 <pbuf_add_header_impl>

0800a2b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	b950      	cbnz	r0, 800a2ce <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a2b8:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800a2ba:	4b2b      	ldr	r3, [pc, #172]	; (800a368 <pbuf_free+0xb8>)
 800a2bc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a2c0:	492a      	ldr	r1, [pc, #168]	; (800a36c <pbuf_free+0xbc>)
 800a2c2:	482b      	ldr	r0, [pc, #172]	; (800a370 <pbuf_free+0xc0>)
 800a2c4:	f004 fe06 	bl	800eed4 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800a2ce:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2d0:	4f25      	ldr	r7, [pc, #148]	; (800a368 <pbuf_free+0xb8>)
 800a2d2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a37c <pbuf_free+0xcc>
 800a2d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a370 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800a2da:	f004 f8f3 	bl	800e4c4 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2de:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800a2e0:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2e2:	b933      	cbnz	r3, 800a2f2 <pbuf_free+0x42>
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a2ea:	4651      	mov	r1, sl
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	f004 fdf1 	bl	800eed4 <iprintf>
    ref = --(p->ref);
 800a2f2:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a2f4:	4648      	mov	r0, r9
    ref = --(p->ref);
 800a2f6:	3e01      	subs	r6, #1
 800a2f8:	b2f6      	uxtb	r6, r6
 800a2fa:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a2fc:	f004 f8ee 	bl	800e4dc <sys_arch_unprotect>
    if (ref == 0) {
 800a300:	2e00      	cmp	r6, #0
 800a302:	d1e1      	bne.n	800a2c8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a304:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800a306:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a308:	079b      	lsls	r3, r3, #30
 800a30a:	d511      	bpl.n	800a330 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a30c:	6923      	ldr	r3, [r4, #16]
 800a30e:	b933      	cbnz	r3, 800a31e <pbuf_free+0x6e>
 800a310:	463b      	mov	r3, r7
 800a312:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a316:	4917      	ldr	r1, [pc, #92]	; (800a374 <pbuf_free+0xc4>)
 800a318:	4640      	mov	r0, r8
 800a31a:	f004 fddb 	bl	800eed4 <iprintf>
        pc->custom_free_function(p);
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	4620      	mov	r0, r4
 800a322:	4798      	blx	r3
      count++;
 800a324:	3501      	adds	r5, #1
 800a326:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800a328:	2e00      	cmp	r6, #0
 800a32a:	d0cd      	beq.n	800a2c8 <pbuf_free+0x18>
 800a32c:	4634      	mov	r4, r6
 800a32e:	e7d4      	b.n	800a2da <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 800a330:	7b23      	ldrb	r3, [r4, #12]
 800a332:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a336:	2b02      	cmp	r3, #2
 800a338:	d104      	bne.n	800a344 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800a33a:	4621      	mov	r1, r4
 800a33c:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800a33e:	f7ff fd9d 	bl	8009e7c <memp_free>
 800a342:	e7ef      	b.n	800a324 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a344:	2b01      	cmp	r3, #1
 800a346:	d102      	bne.n	800a34e <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 800a348:	4621      	mov	r1, r4
 800a34a:	200b      	movs	r0, #11
 800a34c:	e7f7      	b.n	800a33e <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a34e:	b91b      	cbnz	r3, 800a358 <pbuf_free+0xa8>
          mem_free(p);
 800a350:	4620      	mov	r0, r4
 800a352:	f7ff faf1 	bl	8009938 <mem_free>
 800a356:	e7e5      	b.n	800a324 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a358:	463b      	mov	r3, r7
 800a35a:	f240 320f 	movw	r2, #783	; 0x30f
 800a35e:	4906      	ldr	r1, [pc, #24]	; (800a378 <pbuf_free+0xc8>)
 800a360:	4640      	mov	r0, r8
 800a362:	f004 fdb7 	bl	800eed4 <iprintf>
 800a366:	e7dd      	b.n	800a324 <pbuf_free+0x74>
 800a368:	0801c1e0 	.word	0x0801c1e0
 800a36c:	0801c2e1 	.word	0x0801c2e1
 800a370:	0801a5dc 	.word	0x0801a5dc
 800a374:	0801c285 	.word	0x0801c285
 800a378:	0801c2a6 	.word	0x0801c2a6
 800a37c:	0801c26f 	.word	0x0801c26f

0800a380 <pbuf_alloc>:
  switch (type) {
 800a380:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800a384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a388:	4606      	mov	r6, r0
 800a38a:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 800a38c:	b284      	uxth	r4, r0
  switch (type) {
 800a38e:	d014      	beq.n	800a3ba <pbuf_alloc+0x3a>
 800a390:	d808      	bhi.n	800a3a4 <pbuf_alloc+0x24>
 800a392:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a396:	2b01      	cmp	r3, #1
 800a398:	d107      	bne.n	800a3aa <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 800a39a:	2000      	movs	r0, #0
}
 800a39c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a3a0:	f7ff bf10 	b.w	800a1c4 <pbuf_alloc_reference>
  switch (type) {
 800a3a4:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800a3a8:	d03b      	beq.n	800a422 <pbuf_alloc+0xa2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a3aa:	4b2e      	ldr	r3, [pc, #184]	; (800a464 <pbuf_alloc+0xe4>)
 800a3ac:	f240 1227 	movw	r2, #295	; 0x127
 800a3b0:	492d      	ldr	r1, [pc, #180]	; (800a468 <pbuf_alloc+0xe8>)
 800a3b2:	482e      	ldr	r0, [pc, #184]	; (800a46c <pbuf_alloc+0xec>)
 800a3b4:	f004 fd8e 	bl	800eed4 <iprintf>
 800a3b8:	e00c      	b.n	800a3d4 <pbuf_alloc+0x54>
  switch (type) {
 800a3ba:	2600      	movs	r6, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a3bc:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 800a3c0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a474 <pbuf_alloc+0xf4>
  switch (type) {
 800a3c4:	4635      	mov	r5, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a3c6:	200c      	movs	r0, #12
 800a3c8:	46b2      	mov	sl, r6
 800a3ca:	f7ff fd3b 	bl	8009e44 <memp_malloc>
        if (q == NULL) {
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	b930      	cbnz	r0, 800a3e0 <pbuf_alloc+0x60>
          if (p) {
 800a3d2:	b90d      	cbnz	r5, 800a3d8 <pbuf_alloc+0x58>
      return NULL;
 800a3d4:	2500      	movs	r5, #0
 800a3d6:	e01f      	b.n	800a418 <pbuf_alloc+0x98>
            pbuf_free(p);
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff ff69 	bl	800a2b0 <pbuf_free>
 800a3de:	e7f9      	b.n	800a3d4 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a3e0:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a3e2:	4404      	add	r4, r0
  p->next = NULL;
 800a3e4:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800a3e6:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a3e8:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a3ec:	3413      	adds	r4, #19
  p->next = NULL;
 800a3ee:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a3f0:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a3f4:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 800a3f8:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a3fc:	b29b      	uxth	r3, r3
  p->payload = payload;
 800a3fe:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a400:	42bb      	cmp	r3, r7
 800a402:	bf28      	it	cs
 800a404:	463b      	movcs	r3, r7
  p->len = len;
 800a406:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a408:	b14d      	cbz	r5, 800a41e <pbuf_alloc+0x9e>
          last->next = q;
 800a40a:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800a40e:	1afb      	subs	r3, r7, r3
        offset = 0;
 800a410:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a412:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 800a414:	2f00      	cmp	r7, #0
 800a416:	d1d6      	bne.n	800a3c6 <pbuf_alloc+0x46>
}
 800a418:	4628      	mov	r0, r5
 800a41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41e:	4605      	mov	r5, r0
 800a420:	e7f5      	b.n	800a40e <pbuf_alloc+0x8e>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a422:	3403      	adds	r4, #3
 800a424:	1ccb      	adds	r3, r1, #3
 800a426:	f024 0403 	bic.w	r4, r4, #3
 800a42a:	f023 0303 	bic.w	r3, r3, #3
 800a42e:	441c      	add	r4, r3
 800a430:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a432:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a436:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a438:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a43a:	d3cb      	bcc.n	800a3d4 <pbuf_alloc+0x54>
 800a43c:	4283      	cmp	r3, r0
 800a43e:	d8c9      	bhi.n	800a3d4 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a440:	f7ff fbfe 	bl	8009c40 <mem_malloc>
      if (p == NULL) {
 800a444:	4605      	mov	r5, r0
 800a446:	2800      	cmp	r0, #0
 800a448:	d0e6      	beq.n	800a418 <pbuf_alloc+0x98>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a44a:	4406      	add	r6, r0
  p->next = NULL;
 800a44c:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800a44e:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a450:	3613      	adds	r6, #19
  p->next = NULL;
 800a452:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800a454:	4b06      	ldr	r3, [pc, #24]	; (800a470 <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a456:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 800a45a:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 800a45c:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800a45e:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a460:	e7da      	b.n	800a418 <pbuf_alloc+0x98>
 800a462:	bf00      	nop
 800a464:	0801c1e0 	.word	0x0801c1e0
 800a468:	0801c2b8 	.word	0x0801c2b8
 800a46c:	0801a5dc 	.word	0x0801a5dc
 800a470:	00010080 	.word	0x00010080
 800a474:	00010082 	.word	0x00010082

0800a478 <pbuf_realloc>:
{
 800a478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a47c:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a47e:	4604      	mov	r4, r0
 800a480:	b930      	cbnz	r0, 800a490 <pbuf_realloc+0x18>
 800a482:	4b24      	ldr	r3, [pc, #144]	; (800a514 <pbuf_realloc+0x9c>)
 800a484:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a488:	4923      	ldr	r1, [pc, #140]	; (800a518 <pbuf_realloc+0xa0>)
 800a48a:	4824      	ldr	r0, [pc, #144]	; (800a51c <pbuf_realloc+0xa4>)
 800a48c:	f004 fd22 	bl	800eed4 <iprintf>
  if (new_len >= p->tot_len) {
 800a490:	8927      	ldrh	r7, [r4, #8]
 800a492:	42b7      	cmp	r7, r6
 800a494:	d93c      	bls.n	800a510 <pbuf_realloc+0x98>
 800a496:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a498:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a514 <pbuf_realloc+0x9c>
 800a49c:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a524 <pbuf_realloc+0xac>
 800a4a0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800a51c <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800a4a4:	8962      	ldrh	r2, [r4, #10]
 800a4a6:	42aa      	cmp	r2, r5
 800a4a8:	d319      	bcc.n	800a4de <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a4aa:	7b23      	ldrb	r3, [r4, #12]
 800a4ac:	0719      	lsls	r1, r3, #28
 800a4ae:	d127      	bne.n	800a500 <pbuf_realloc+0x88>
 800a4b0:	42aa      	cmp	r2, r5
 800a4b2:	d025      	beq.n	800a500 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a4b4:	7b63      	ldrb	r3, [r4, #13]
 800a4b6:	079b      	lsls	r3, r3, #30
 800a4b8:	d422      	bmi.n	800a500 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a4ba:	6861      	ldr	r1, [r4, #4]
 800a4bc:	4620      	mov	r0, r4
 800a4be:	1b09      	subs	r1, r1, r4
 800a4c0:	4429      	add	r1, r5
 800a4c2:	b289      	uxth	r1, r1
 800a4c4:	f7ff fb0e 	bl	8009ae4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	b9c8      	cbnz	r0, 800a500 <pbuf_realloc+0x88>
 800a4cc:	4b11      	ldr	r3, [pc, #68]	; (800a514 <pbuf_realloc+0x9c>)
 800a4ce:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a4d2:	4913      	ldr	r1, [pc, #76]	; (800a520 <pbuf_realloc+0xa8>)
 800a4d4:	4811      	ldr	r0, [pc, #68]	; (800a51c <pbuf_realloc+0xa4>)
 800a4d6:	f004 fcfd 	bl	800eed4 <iprintf>
  q->len = rem_len;
 800a4da:	8164      	strh	r4, [r4, #10]
 800a4dc:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800a4de:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a4e0:	1bf3      	subs	r3, r6, r7
 800a4e2:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a4e4:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a4e6:	4413      	add	r3, r2
 800a4e8:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800a4ea:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a4ec:	2c00      	cmp	r4, #0
 800a4ee:	d1d9      	bne.n	800a4a4 <pbuf_realloc+0x2c>
 800a4f0:	4643      	mov	r3, r8
 800a4f2:	f240 12af 	movw	r2, #431	; 0x1af
 800a4f6:	4651      	mov	r1, sl
 800a4f8:	4648      	mov	r0, r9
 800a4fa:	f004 fceb 	bl	800eed4 <iprintf>
 800a4fe:	e7d1      	b.n	800a4a4 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800a500:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800a502:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800a504:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800a506:	b108      	cbz	r0, 800a50c <pbuf_realloc+0x94>
    pbuf_free(q->next);
 800a508:	f7ff fed2 	bl	800a2b0 <pbuf_free>
  q->next = NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	6023      	str	r3, [r4, #0]
}
 800a510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a514:	0801c1e0 	.word	0x0801c1e0
 800a518:	0801c2d3 	.word	0x0801c2d3
 800a51c:	0801a5dc 	.word	0x0801a5dc
 800a520:	0801c303 	.word	0x0801c303
 800a524:	0801c2eb 	.word	0x0801c2eb

0800a528 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a528:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800a52a:	2200      	movs	r2, #0
 800a52c:	b290      	uxth	r0, r2
 800a52e:	3201      	adds	r2, #1
 800a530:	b903      	cbnz	r3, 800a534 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800a532:	4770      	bx	lr
    p = p->next;
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	e7f9      	b.n	800a52c <pbuf_clen+0x4>

0800a538 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a538:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800a53a:	4604      	mov	r4, r0
 800a53c:	b188      	cbz	r0, 800a562 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a53e:	f003 ffc1 	bl	800e4c4 <sys_arch_protect>
 800a542:	7ba3      	ldrb	r3, [r4, #14]
 800a544:	3301      	adds	r3, #1
 800a546:	73a3      	strb	r3, [r4, #14]
 800a548:	f003 ffc8 	bl	800e4dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a54c:	7ba3      	ldrb	r3, [r4, #14]
 800a54e:	b943      	cbnz	r3, 800a562 <pbuf_ref+0x2a>
 800a550:	4b04      	ldr	r3, [pc, #16]	; (800a564 <pbuf_ref+0x2c>)
 800a552:	f240 3242 	movw	r2, #834	; 0x342
 800a556:	4904      	ldr	r1, [pc, #16]	; (800a568 <pbuf_ref+0x30>)
 800a558:	4804      	ldr	r0, [pc, #16]	; (800a56c <pbuf_ref+0x34>)
  }
}
 800a55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a55e:	f004 bcb9 	b.w	800eed4 <iprintf>
}
 800a562:	bd10      	pop	{r4, pc}
 800a564:	0801c1e0 	.word	0x0801c1e0
 800a568:	0801c31f 	.word	0x0801c31f
 800a56c:	0801a5dc 	.word	0x0801a5dc

0800a570 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a574:	4604      	mov	r4, r0
 800a576:	b100      	cbz	r0, 800a57a <pbuf_cat+0xa>
 800a578:	b961      	cbnz	r1, 800a594 <pbuf_cat+0x24>
 800a57a:	4b15      	ldr	r3, [pc, #84]	; (800a5d0 <pbuf_cat+0x60>)
 800a57c:	f240 3259 	movw	r2, #857	; 0x359
 800a580:	4914      	ldr	r1, [pc, #80]	; (800a5d4 <pbuf_cat+0x64>)
 800a582:	4815      	ldr	r0, [pc, #84]	; (800a5d8 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a588:	f004 bca4 	b.w	800eed4 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a58c:	8929      	ldrh	r1, [r5, #8]
 800a58e:	440b      	add	r3, r1
 800a590:	8123      	strh	r3, [r4, #8]
 800a592:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800a594:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a596:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a598:	2a00      	cmp	r2, #0
 800a59a:	d1f7      	bne.n	800a58c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a59c:	8962      	ldrh	r2, [r4, #10]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d00f      	beq.n	800a5c2 <pbuf_cat+0x52>
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <pbuf_cat+0x60>)
 800a5a4:	f240 3262 	movw	r2, #866	; 0x362
 800a5a8:	490c      	ldr	r1, [pc, #48]	; (800a5dc <pbuf_cat+0x6c>)
 800a5aa:	480b      	ldr	r0, [pc, #44]	; (800a5d8 <pbuf_cat+0x68>)
 800a5ac:	f004 fc92 	bl	800eed4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	b133      	cbz	r3, 800a5c2 <pbuf_cat+0x52>
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <pbuf_cat+0x60>)
 800a5b6:	f240 3263 	movw	r2, #867	; 0x363
 800a5ba:	4909      	ldr	r1, [pc, #36]	; (800a5e0 <pbuf_cat+0x70>)
 800a5bc:	4806      	ldr	r0, [pc, #24]	; (800a5d8 <pbuf_cat+0x68>)
 800a5be:	f004 fc89 	bl	800eed4 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a5c2:	892a      	ldrh	r2, [r5, #8]
 800a5c4:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800a5c6:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a5c8:	4413      	add	r3, r2
 800a5ca:	8123      	strh	r3, [r4, #8]
}
 800a5cc:	bd70      	pop	{r4, r5, r6, pc}
 800a5ce:	bf00      	nop
 800a5d0:	0801c1e0 	.word	0x0801c1e0
 800a5d4:	0801c331 	.word	0x0801c331
 800a5d8:	0801a5dc 	.word	0x0801a5dc
 800a5dc:	0801c366 	.word	0x0801c366
 800a5e0:	0801c393 	.word	0x0801c393

0800a5e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800a5e8:	f7ff ffc2 	bl	800a570 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a5ec:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a5ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800a5f2:	f7ff bfa1 	b.w	800a538 <pbuf_ref>
	...

0800a5f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a5f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a5fe:	4605      	mov	r5, r0
 800a600:	b120      	cbz	r0, 800a60c <pbuf_copy+0x14>
 800a602:	b119      	cbz	r1, 800a60c <pbuf_copy+0x14>
 800a604:	8902      	ldrh	r2, [r0, #8]
 800a606:	890b      	ldrh	r3, [r1, #8]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d20a      	bcs.n	800a622 <pbuf_copy+0x2a>
 800a60c:	4b34      	ldr	r3, [pc, #208]	; (800a6e0 <pbuf_copy+0xe8>)
 800a60e:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a612:	4934      	ldr	r1, [pc, #208]	; (800a6e4 <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a614:	4834      	ldr	r0, [pc, #208]	; (800a6e8 <pbuf_copy+0xf0>)
 800a616:	f004 fc5d 	bl	800eed4 <iprintf>
 800a61a:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800a61e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800a622:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a624:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800a6e0 <pbuf_copy+0xe8>
 800a628:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800a6f8 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 800a62c:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a62e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800a6e8 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a632:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800a636:	8962      	ldrh	r2, [r4, #10]
 800a638:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a63c:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a63e:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a640:	6861      	ldr	r1, [r4, #4]
 800a642:	4438      	add	r0, r7
 800a644:	4590      	cmp	r8, r2
 800a646:	4431      	add	r1, r6
 800a648:	bf28      	it	cs
 800a64a:	4690      	movcs	r8, r2
 800a64c:	4642      	mov	r2, r8
    offset_to += len;
 800a64e:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a650:	f003 ffa6 	bl	800e5a0 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a654:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800a656:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a658:	429f      	cmp	r7, r3
 800a65a:	d906      	bls.n	800a66a <pbuf_copy+0x72>
 800a65c:	465b      	mov	r3, fp
 800a65e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a662:	4651      	mov	r1, sl
 800a664:	4648      	mov	r0, r9
 800a666:	f004 fc35 	bl	800eed4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a66a:	8963      	ldrh	r3, [r4, #10]
 800a66c:	429e      	cmp	r6, r3
 800a66e:	d906      	bls.n	800a67e <pbuf_copy+0x86>
 800a670:	465b      	mov	r3, fp
 800a672:	f240 32da 	movw	r2, #986	; 0x3da
 800a676:	491d      	ldr	r1, [pc, #116]	; (800a6ec <pbuf_copy+0xf4>)
 800a678:	4648      	mov	r0, r9
 800a67a:	f004 fc2b 	bl	800eed4 <iprintf>
    if (offset_from >= p_from->len) {
 800a67e:	8963      	ldrh	r3, [r4, #10]
 800a680:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800a682:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800a684:	bf24      	itt	cs
 800a686:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800a688:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800a68a:	429f      	cmp	r7, r3
 800a68c:	d108      	bne.n	800a6a0 <pbuf_copy+0xa8>
      p_to = p_to->next;
 800a68e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a690:	b92d      	cbnz	r5, 800a69e <pbuf_copy+0xa6>
 800a692:	b314      	cbz	r4, 800a6da <pbuf_copy+0xe2>
 800a694:	4b12      	ldr	r3, [pc, #72]	; (800a6e0 <pbuf_copy+0xe8>)
 800a696:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a69a:	4915      	ldr	r1, [pc, #84]	; (800a6f0 <pbuf_copy+0xf8>)
 800a69c:	e7ba      	b.n	800a614 <pbuf_copy+0x1c>
      offset_to = 0;
 800a69e:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a6a0:	b17c      	cbz	r4, 800a6c2 <pbuf_copy+0xca>
 800a6a2:	8962      	ldrh	r2, [r4, #10]
 800a6a4:	8923      	ldrh	r3, [r4, #8]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d10b      	bne.n	800a6c2 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	b14b      	cbz	r3, 800a6c2 <pbuf_copy+0xca>
 800a6ae:	4b0c      	ldr	r3, [pc, #48]	; (800a6e0 <pbuf_copy+0xe8>)
 800a6b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a6b4:	490f      	ldr	r1, [pc, #60]	; (800a6f4 <pbuf_copy+0xfc>)
 800a6b6:	480c      	ldr	r0, [pc, #48]	; (800a6e8 <pbuf_copy+0xf0>)
 800a6b8:	f004 fc0c 	bl	800eed4 <iprintf>
 800a6bc:	f06f 0005 	mvn.w	r0, #5
 800a6c0:	e7ad      	b.n	800a61e <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a6c2:	896a      	ldrh	r2, [r5, #10]
 800a6c4:	892b      	ldrh	r3, [r5, #8]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d105      	bne.n	800a6d6 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a6ca:	682b      	ldr	r3, [r5, #0]
 800a6cc:	b11b      	cbz	r3, 800a6d6 <pbuf_copy+0xde>
 800a6ce:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <pbuf_copy+0xe8>)
 800a6d0:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a6d4:	e7ee      	b.n	800a6b4 <pbuf_copy+0xbc>
  } while (p_from);
 800a6d6:	2c00      	cmp	r4, #0
 800a6d8:	d1ab      	bne.n	800a632 <pbuf_copy+0x3a>
  return ERR_OK;
 800a6da:	4620      	mov	r0, r4
 800a6dc:	e79f      	b.n	800a61e <pbuf_copy+0x26>
 800a6de:	bf00      	nop
 800a6e0:	0801c1e0 	.word	0x0801c1e0
 800a6e4:	0801c3da 	.word	0x0801c3da
 800a6e8:	0801a5dc 	.word	0x0801a5dc
 800a6ec:	0801c421 	.word	0x0801c421
 800a6f0:	0801c43c 	.word	0x0801c43c
 800a6f4:	0801c449 	.word	0x0801c449
 800a6f8:	0801c40a 	.word	0x0801c40a

0800a6fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a700:	460f      	mov	r7, r1
 800a702:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a704:	4605      	mov	r5, r0
 800a706:	b950      	cbnz	r0, 800a71e <pbuf_copy_partial+0x22>
 800a708:	462e      	mov	r6, r5
 800a70a:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <pbuf_copy_partial+0x7c>)
 800a70c:	f240 420a 	movw	r2, #1034	; 0x40a
 800a710:	491a      	ldr	r1, [pc, #104]	; (800a77c <pbuf_copy_partial+0x80>)
 800a712:	481b      	ldr	r0, [pc, #108]	; (800a780 <pbuf_copy_partial+0x84>)
 800a714:	f004 fbde 	bl	800eed4 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 800a718:	4630      	mov	r0, r6
 800a71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a71e:	bb41      	cbnz	r1, 800a772 <pbuf_copy_partial+0x76>
 800a720:	4b15      	ldr	r3, [pc, #84]	; (800a778 <pbuf_copy_partial+0x7c>)
 800a722:	f240 420b 	movw	r2, #1035	; 0x40b
 800a726:	4917      	ldr	r1, [pc, #92]	; (800a784 <pbuf_copy_partial+0x88>)
 800a728:	463e      	mov	r6, r7
 800a72a:	4815      	ldr	r0, [pc, #84]	; (800a780 <pbuf_copy_partial+0x84>)
 800a72c:	f004 fbd2 	bl	800eed4 <iprintf>
 800a730:	e7f2      	b.n	800a718 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800a732:	896c      	ldrh	r4, [r5, #10]
 800a734:	b153      	cbz	r3, 800a74c <pbuf_copy_partial+0x50>
 800a736:	42a3      	cmp	r3, r4
 800a738:	d308      	bcc.n	800a74c <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 800a73a:	1b1b      	subs	r3, r3, r4
 800a73c:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a73e:	682d      	ldr	r5, [r5, #0]
 800a740:	f1b8 0f00 	cmp.w	r8, #0
 800a744:	d0e8      	beq.n	800a718 <pbuf_copy_partial+0x1c>
 800a746:	2d00      	cmp	r5, #0
 800a748:	d1f3      	bne.n	800a732 <pbuf_copy_partial+0x36>
 800a74a:	e7e5      	b.n	800a718 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 800a74c:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a74e:	6869      	ldr	r1, [r5, #4]
 800a750:	19b8      	adds	r0, r7, r6
      buf_copy_len = (u16_t)(p->len - offset);
 800a752:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a754:	4419      	add	r1, r3
 800a756:	4544      	cmp	r4, r8
 800a758:	bf28      	it	cs
 800a75a:	4644      	movcs	r4, r8
 800a75c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a75e:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 800a760:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a764:	f003 ff1c 	bl	800e5a0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a768:	b2b6      	uxth	r6, r6
      offset = 0;
 800a76a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 800a76c:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800a770:	e7e5      	b.n	800a73e <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800a772:	2600      	movs	r6, #0
 800a774:	e7e4      	b.n	800a740 <pbuf_copy_partial+0x44>
 800a776:	bf00      	nop
 800a778:	0801c1e0 	.word	0x0801c1e0
 800a77c:	0801c473 	.word	0x0801c473
 800a780:	0801a5dc 	.word	0x0801a5dc
 800a784:	0801c492 	.word	0x0801c492

0800a788 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a78c:	460a      	mov	r2, r1
 800a78e:	8929      	ldrh	r1, [r5, #8]
 800a790:	f7ff fdf6 	bl	800a380 <pbuf_alloc>
  if (q == NULL) {
 800a794:	4604      	mov	r4, r0
 800a796:	b150      	cbz	r0, 800a7ae <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800a798:	4629      	mov	r1, r5
 800a79a:	f7ff ff2d 	bl	800a5f8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a79e:	b130      	cbz	r0, 800a7ae <pbuf_clone+0x26>
 800a7a0:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <pbuf_clone+0x2c>)
 800a7a2:	f240 5224 	movw	r2, #1316	; 0x524
 800a7a6:	4904      	ldr	r1, [pc, #16]	; (800a7b8 <pbuf_clone+0x30>)
 800a7a8:	4804      	ldr	r0, [pc, #16]	; (800a7bc <pbuf_clone+0x34>)
 800a7aa:	f004 fb93 	bl	800eed4 <iprintf>
  return q;
}
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0801c1e0 	.word	0x0801c1e0
 800a7b8:	0801c592 	.word	0x0801c592
 800a7bc:	0801a5dc 	.word	0x0801a5dc

0800a7c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c2:	4c12      	ldr	r4, [pc, #72]	; (800a80c <tcp_new_port+0x4c>)
 800a7c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a7c8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800a7cc:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	4d0f      	ldr	r5, [pc, #60]	; (800a810 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a7d2:	2204      	movs	r2, #4
  tcp_port++;
 800a7d4:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a7d6:	42b3      	cmp	r3, r6
 800a7d8:	bf08      	it	eq
 800a7da:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a7de:	f855 1b04 	ldr.w	r1, [r5], #4
 800a7e2:	6809      	ldr	r1, [r1, #0]
 800a7e4:	b931      	cbnz	r1, 800a7f4 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a7e6:	3a01      	subs	r2, #1
 800a7e8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800a7ec:	d1f7      	bne.n	800a7de <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	8023      	strh	r3, [r4, #0]
 800a7f2:	e007      	b.n	800a804 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800a7f4:	8acf      	ldrh	r7, [r1, #22]
 800a7f6:	429f      	cmp	r7, r3
 800a7f8:	d105      	bne.n	800a806 <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a7fa:	3801      	subs	r0, #1
 800a7fc:	b280      	uxth	r0, r0
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d1e5      	bne.n	800a7ce <tcp_new_port+0xe>
 800a802:	8023      	strh	r3, [r4, #0]
}
 800a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a806:	68c9      	ldr	r1, [r1, #12]
 800a808:	e7ec      	b.n	800a7e4 <tcp_new_port+0x24>
 800a80a:	bf00      	nop
 800a80c:	20000020 	.word	0x20000020
 800a810:	0801183c 	.word	0x0801183c

0800a814 <tcp_close_shutdown_fin>:
{
 800a814:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a816:	4604      	mov	r4, r0
 800a818:	b930      	cbnz	r0, 800a828 <tcp_close_shutdown_fin+0x14>
 800a81a:	4b13      	ldr	r3, [pc, #76]	; (800a868 <tcp_close_shutdown_fin+0x54>)
 800a81c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a820:	4912      	ldr	r1, [pc, #72]	; (800a86c <tcp_close_shutdown_fin+0x58>)
 800a822:	4813      	ldr	r0, [pc, #76]	; (800a870 <tcp_close_shutdown_fin+0x5c>)
 800a824:	f004 fb56 	bl	800eed4 <iprintf>
  switch (pcb->state) {
 800a828:	7d23      	ldrb	r3, [r4, #20]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d003      	beq.n	800a836 <tcp_close_shutdown_fin+0x22>
 800a82e:	2b07      	cmp	r3, #7
 800a830:	d00c      	beq.n	800a84c <tcp_close_shutdown_fin+0x38>
 800a832:	2b03      	cmp	r3, #3
 800a834:	d108      	bne.n	800a848 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800a836:	4620      	mov	r0, r4
 800a838:	f002 fd82 	bl	800d340 <tcp_send_fin>
      if (err == ERR_OK) {
 800a83c:	b960      	cbnz	r0, 800a858 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 800a83e:	2305      	movs	r3, #5
    tcp_output(pcb);
 800a840:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800a842:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800a844:	f002 fedc 	bl	800d600 <tcp_output>
  switch (pcb->state) {
 800a848:	2000      	movs	r0, #0
}
 800a84a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a84c:	4620      	mov	r0, r4
 800a84e:	f002 fd77 	bl	800d340 <tcp_send_fin>
      if (err == ERR_OK) {
 800a852:	b908      	cbnz	r0, 800a858 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 800a854:	2309      	movs	r3, #9
 800a856:	e7f3      	b.n	800a840 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d1f6      	bne.n	800a84a <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a85c:	8b63      	ldrh	r3, [r4, #26]
 800a85e:	f043 0308 	orr.w	r3, r3, #8
 800a862:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800a864:	e7f0      	b.n	800a848 <tcp_close_shutdown_fin+0x34>
 800a866:	bf00      	nop
 800a868:	0801c5a3 	.word	0x0801c5a3
 800a86c:	0801c601 	.word	0x0801c601
 800a870:	0801a5dc 	.word	0x0801a5dc

0800a874 <tcp_init>:
{
 800a874:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a876:	f004 fb45 	bl	800ef04 <rand>
 800a87a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800a87e:	4b02      	ldr	r3, [pc, #8]	; (800a888 <tcp_init+0x14>)
 800a880:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800a884:	8018      	strh	r0, [r3, #0]
}
 800a886:	bd08      	pop	{r3, pc}
 800a888:	20000020 	.word	0x20000020

0800a88c <tcp_free>:
{
 800a88c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a88e:	7d03      	ldrb	r3, [r0, #20]
{
 800a890:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a892:	2b01      	cmp	r3, #1
 800a894:	d105      	bne.n	800a8a2 <tcp_free+0x16>
 800a896:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <tcp_free+0x24>)
 800a898:	22d4      	movs	r2, #212	; 0xd4
 800a89a:	4906      	ldr	r1, [pc, #24]	; (800a8b4 <tcp_free+0x28>)
 800a89c:	4806      	ldr	r0, [pc, #24]	; (800a8b8 <tcp_free+0x2c>)
 800a89e:	f004 fb19 	bl	800eed4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	2001      	movs	r0, #1
}
 800a8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a8aa:	f7ff bae7 	b.w	8009e7c <memp_free>
 800a8ae:	bf00      	nop
 800a8b0:	0801c5a3 	.word	0x0801c5a3
 800a8b4:	0801c60d 	.word	0x0801c60d
 800a8b8:	0801a5dc 	.word	0x0801a5dc

0800a8bc <tcp_bind>:
{
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800a8be:	4d23      	ldr	r5, [pc, #140]	; (800a94c <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8c0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800a8c2:	2900      	cmp	r1, #0
 800a8c4:	bf18      	it	ne
 800a8c6:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8c8:	b948      	cbnz	r0, 800a8de <tcp_bind+0x22>
 800a8ca:	4b21      	ldr	r3, [pc, #132]	; (800a950 <tcp_bind+0x94>)
 800a8cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a8d0:	4920      	ldr	r1, [pc, #128]	; (800a954 <tcp_bind+0x98>)
 800a8d2:	4821      	ldr	r0, [pc, #132]	; (800a958 <tcp_bind+0x9c>)
 800a8d4:	f004 fafe 	bl	800eed4 <iprintf>
 800a8d8:	f06f 000f 	mvn.w	r0, #15
}
 800a8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a8de:	7d03      	ldrb	r3, [r0, #20]
 800a8e0:	b14b      	cbz	r3, 800a8f6 <tcp_bind+0x3a>
 800a8e2:	4b1b      	ldr	r3, [pc, #108]	; (800a950 <tcp_bind+0x94>)
 800a8e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a8e8:	491c      	ldr	r1, [pc, #112]	; (800a95c <tcp_bind+0xa0>)
 800a8ea:	481b      	ldr	r0, [pc, #108]	; (800a958 <tcp_bind+0x9c>)
 800a8ec:	f004 faf2 	bl	800eed4 <iprintf>
 800a8f0:	f06f 0005 	mvn.w	r0, #5
 800a8f4:	e7f2      	b.n	800a8dc <tcp_bind+0x20>
  if (port == 0) {
 800a8f6:	b932      	cbnz	r2, 800a906 <tcp_bind+0x4a>
    port = tcp_new_port();
 800a8f8:	f7ff ff62 	bl	800a7c0 <tcp_new_port>
    if (port == 0) {
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	b950      	cbnz	r0, 800a916 <tcp_bind+0x5a>
      return ERR_BUF;
 800a900:	f06f 0001 	mvn.w	r0, #1
 800a904:	e7ea      	b.n	800a8dc <tcp_bind+0x20>
 800a906:	4816      	ldr	r0, [pc, #88]	; (800a960 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a908:	f850 1b04 	ldr.w	r1, [r0], #4
 800a90c:	6809      	ldr	r1, [r1, #0]
 800a90e:	b971      	cbnz	r1, 800a92e <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800a910:	3301      	adds	r3, #1
 800a912:	2b04      	cmp	r3, #4
 800a914:	d1f8      	bne.n	800a908 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800a916:	682b      	ldr	r3, [r5, #0]
 800a918:	b103      	cbz	r3, 800a91c <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a91a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a91c:	4b11      	ldr	r3, [pc, #68]	; (800a964 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800a91e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	601c      	str	r4, [r3, #0]
 800a924:	60e2      	str	r2, [r4, #12]
 800a926:	f003 f941 	bl	800dbac <tcp_timer_needed>
  return ERR_OK;
 800a92a:	2000      	movs	r0, #0
 800a92c:	e7d6      	b.n	800a8dc <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800a92e:	8ace      	ldrh	r6, [r1, #22]
 800a930:	4296      	cmp	r6, r2
 800a932:	d105      	bne.n	800a940 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a934:	680f      	ldr	r7, [r1, #0]
 800a936:	b12f      	cbz	r7, 800a944 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 800a938:	682e      	ldr	r6, [r5, #0]
 800a93a:	b11e      	cbz	r6, 800a944 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a93c:	42b7      	cmp	r7, r6
 800a93e:	d001      	beq.n	800a944 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a940:	68c9      	ldr	r1, [r1, #12]
 800a942:	e7e4      	b.n	800a90e <tcp_bind+0x52>
              return ERR_USE;
 800a944:	f06f 0007 	mvn.w	r0, #7
 800a948:	e7c8      	b.n	800a8dc <tcp_bind+0x20>
 800a94a:	bf00      	nop
 800a94c:	08011768 	.word	0x08011768
 800a950:	0801c5a3 	.word	0x0801c5a3
 800a954:	0801c61e 	.word	0x0801c61e
 800a958:	0801a5dc 	.word	0x0801a5dc
 800a95c:	0801c634 	.word	0x0801c634
 800a960:	0801183c 	.word	0x0801183c
 800a964:	2000d000 	.word	0x2000d000

0800a968 <tcp_listen_with_backlog_and_err>:
{
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a96c:	4605      	mov	r5, r0
 800a96e:	b968      	cbnz	r0, 800a98c <tcp_listen_with_backlog_and_err+0x24>
 800a970:	4b29      	ldr	r3, [pc, #164]	; (800aa18 <tcp_listen_with_backlog_and_err+0xb0>)
 800a972:	f240 3259 	movw	r2, #857	; 0x359
 800a976:	4929      	ldr	r1, [pc, #164]	; (800aa1c <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a978:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a97a:	4829      	ldr	r0, [pc, #164]	; (800aa20 <tcp_listen_with_backlog_and_err+0xb8>)
 800a97c:	f004 faaa 	bl	800eed4 <iprintf>
 800a980:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800a984:	b106      	cbz	r6, 800a988 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800a986:	7033      	strb	r3, [r6, #0]
}
 800a988:	4620      	mov	r0, r4
 800a98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a98c:	7d07      	ldrb	r7, [r0, #20]
 800a98e:	b157      	cbz	r7, 800a9a6 <tcp_listen_with_backlog_and_err+0x3e>
 800a990:	4b21      	ldr	r3, [pc, #132]	; (800aa18 <tcp_listen_with_backlog_and_err+0xb0>)
 800a992:	f240 325a 	movw	r2, #858	; 0x35a
 800a996:	4923      	ldr	r1, [pc, #140]	; (800aa24 <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a998:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a99a:	4821      	ldr	r0, [pc, #132]	; (800aa20 <tcp_listen_with_backlog_and_err+0xb8>)
 800a99c:	f004 fa9a 	bl	800eed4 <iprintf>
 800a9a0:	f06f 030e 	mvn.w	r3, #14
 800a9a4:	e7ee      	b.n	800a984 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a9a6:	2002      	movs	r0, #2
 800a9a8:	f7ff fa4c 	bl	8009e44 <memp_malloc>
  if (lpcb == NULL) {
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d02e      	beq.n	800aa10 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800a9b2:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800a9b4:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800a9b6:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800a9b8:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800a9ba:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800a9bc:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800a9be:	7d6a      	ldrb	r2, [r5, #21]
 800a9c0:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800a9c2:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a9c4:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800a9c6:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800a9c8:	7aea      	ldrb	r2, [r5, #11]
 800a9ca:	4f17      	ldr	r7, [pc, #92]	; (800aa28 <tcp_listen_with_backlog_and_err+0xc0>)
 800a9cc:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800a9ce:	7aaa      	ldrb	r2, [r5, #10]
 800a9d0:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a9d2:	682a      	ldr	r2, [r5, #0]
 800a9d4:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800a9d6:	b133      	cbz	r3, 800a9e6 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	42ab      	cmp	r3, r5
 800a9dc:	d110      	bne.n	800aa00 <tcp_listen_with_backlog_and_err+0x98>
 800a9de:	68eb      	ldr	r3, [r5, #12]
 800a9e0:	603b      	str	r3, [r7, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f7ff ff50 	bl	800a88c <tcp_free>
  lpcb->accept = tcp_accept_null;
 800a9ec:	4b0f      	ldr	r3, [pc, #60]	; (800aa2c <tcp_listen_with_backlog_and_err+0xc4>)
 800a9ee:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	607c      	str	r4, [r7, #4]
 800a9f4:	60e3      	str	r3, [r4, #12]
 800a9f6:	f003 f8d9 	bl	800dbac <tcp_timer_needed>
  res = ERR_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	e7c2      	b.n	800a984 <tcp_listen_with_backlog_and_err+0x1c>
 800a9fe:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0ee      	beq.n	800a9e2 <tcp_listen_with_backlog_and_err+0x7a>
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	42aa      	cmp	r2, r5
 800aa08:	d1f9      	bne.n	800a9fe <tcp_listen_with_backlog_and_err+0x96>
 800aa0a:	68ea      	ldr	r2, [r5, #12]
 800aa0c:	60da      	str	r2, [r3, #12]
 800aa0e:	e7e8      	b.n	800a9e2 <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
 800aa14:	e7b6      	b.n	800a984 <tcp_listen_with_backlog_and_err+0x1c>
 800aa16:	bf00      	nop
 800aa18:	0801c5a3 	.word	0x0801c5a3
 800aa1c:	0801c65c 	.word	0x0801c65c
 800aa20:	0801a5dc 	.word	0x0801a5dc
 800aa24:	0801c689 	.word	0x0801c689
 800aa28:	2000d000 	.word	0x2000d000
 800aa2c:	0800b595 	.word	0x0800b595

0800aa30 <tcp_update_rcv_ann_wnd>:
{
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aa32:	4604      	mov	r4, r0
 800aa34:	b930      	cbnz	r0, 800aa44 <tcp_update_rcv_ann_wnd+0x14>
 800aa36:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <tcp_update_rcv_ann_wnd+0x5c>)
 800aa38:	f240 32a6 	movw	r2, #934	; 0x3a6
 800aa3c:	4914      	ldr	r1, [pc, #80]	; (800aa90 <tcp_update_rcv_ann_wnd+0x60>)
 800aa3e:	4815      	ldr	r0, [pc, #84]	; (800aa94 <tcp_update_rcv_ann_wnd+0x64>)
 800aa40:	f004 fa48 	bl	800eed4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aa44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aa46:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800aa4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa4c:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aa4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aa50:	1ad0      	subs	r0, r2, r3
 800aa52:	42b7      	cmp	r7, r6
 800aa54:	4428      	add	r0, r5
 800aa56:	bf94      	ite	ls
 800aa58:	1bc1      	subls	r1, r0, r7
 800aa5a:	1b81      	subhi	r1, r0, r6
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	db01      	blt.n	800aa64 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aa60:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 800aa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aa64:	1aea      	subs	r2, r5, r3
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	dd02      	ble.n	800aa70 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	8560      	strh	r0, [r4, #42]	; 0x2a
 800aa6e:	e7f8      	b.n	800aa62 <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aa70:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aa72:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800aa76:	d306      	bcc.n	800aa86 <tcp_update_rcv_ann_wnd+0x56>
 800aa78:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <tcp_update_rcv_ann_wnd+0x5c>)
 800aa7a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800aa7e:	4906      	ldr	r1, [pc, #24]	; (800aa98 <tcp_update_rcv_ann_wnd+0x68>)
 800aa80:	4804      	ldr	r0, [pc, #16]	; (800aa94 <tcp_update_rcv_ann_wnd+0x64>)
 800aa82:	f004 fa27 	bl	800eed4 <iprintf>
    return 0;
 800aa86:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aa88:	8565      	strh	r5, [r4, #42]	; 0x2a
 800aa8a:	e7ea      	b.n	800aa62 <tcp_update_rcv_ann_wnd+0x32>
 800aa8c:	0801c5a3 	.word	0x0801c5a3
 800aa90:	0801c6c0 	.word	0x0801c6c0
 800aa94:	0801a5dc 	.word	0x0801a5dc
 800aa98:	0801c6e4 	.word	0x0801c6e4

0800aa9c <tcp_recved>:
{
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	b940      	cbnz	r0, 800aab6 <tcp_recved+0x1a>
 800aaa4:	4b18      	ldr	r3, [pc, #96]	; (800ab08 <tcp_recved+0x6c>)
 800aaa6:	f240 32cf 	movw	r2, #975	; 0x3cf
 800aaaa:	4918      	ldr	r1, [pc, #96]	; (800ab0c <tcp_recved+0x70>)
 800aaac:	4818      	ldr	r0, [pc, #96]	; (800ab10 <tcp_recved+0x74>)
}
 800aaae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aab2:	f004 ba0f 	b.w	800eed4 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aab6:	7d03      	ldrb	r3, [r0, #20]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d106      	bne.n	800aaca <tcp_recved+0x2e>
 800aabc:	4b12      	ldr	r3, [pc, #72]	; (800ab08 <tcp_recved+0x6c>)
 800aabe:	f240 32d2 	movw	r2, #978	; 0x3d2
 800aac2:	4914      	ldr	r1, [pc, #80]	; (800ab14 <tcp_recved+0x78>)
 800aac4:	4812      	ldr	r0, [pc, #72]	; (800ab10 <tcp_recved+0x74>)
 800aac6:	f004 fa05 	bl	800eed4 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800aaca:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800aacc:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800aad0:	1911      	adds	r1, r2, r4
 800aad2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800aad4:	4299      	cmp	r1, r3
 800aad6:	d813      	bhi.n	800ab00 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aad8:	428a      	cmp	r2, r1
 800aada:	bf88      	it	hi
 800aadc:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800aade:	4628      	mov	r0, r5
 800aae0:	8529      	strh	r1, [r5, #40]	; 0x28
 800aae2:	f7ff ffa5 	bl	800aa30 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800aae6:	f240 23d9 	movw	r3, #729	; 0x2d9
 800aaea:	4298      	cmp	r0, r3
 800aaec:	d90a      	bls.n	800ab04 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 800aaee:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800aaf0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800aaf2:	f043 0302 	orr.w	r3, r3, #2
 800aaf6:	836b      	strh	r3, [r5, #26]
}
 800aaf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800aafc:	f002 bd80 	b.w	800d600 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ab00:	4619      	mov	r1, r3
 800ab02:	e7ec      	b.n	800aade <tcp_recved+0x42>
}
 800ab04:	bd70      	pop	{r4, r5, r6, pc}
 800ab06:	bf00      	nop
 800ab08:	0801c5a3 	.word	0x0801c5a3
 800ab0c:	0801c6fe 	.word	0x0801c6fe
 800ab10:	0801a5dc 	.word	0x0801a5dc
 800ab14:	0801c716 	.word	0x0801c716

0800ab18 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ab18:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	b148      	cbz	r0, 800ab32 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800ab1e:	6840      	ldr	r0, [r0, #4]
 800ab20:	b108      	cbz	r0, 800ab26 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800ab22:	f7ff fbc5 	bl	800a2b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ab26:	4621      	mov	r1, r4
 800ab28:	2003      	movs	r0, #3
  }
}
 800ab2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800ab2e:	f7ff b9a5 	b.w	8009e7c <memp_free>
}
 800ab32:	bd10      	pop	{r4, pc}

0800ab34 <tcp_segs_free>:
{
 800ab34:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800ab36:	b900      	cbnz	r0, 800ab3a <tcp_segs_free+0x6>
}
 800ab38:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800ab3a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800ab3c:	f7ff ffec 	bl	800ab18 <tcp_seg_free>
    seg = next;
 800ab40:	4620      	mov	r0, r4
 800ab42:	e7f8      	b.n	800ab36 <tcp_segs_free+0x2>

0800ab44 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ab44:	b100      	cbz	r0, 800ab48 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800ab46:	6101      	str	r1, [r0, #16]
  }
}
 800ab48:	4770      	bx	lr
	...

0800ab4c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ab50:	4604      	mov	r4, r0
 800ab52:	b158      	cbz	r0, 800ab6c <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ab54:	7d03      	ldrb	r3, [r0, #20]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d106      	bne.n	800ab68 <tcp_recv+0x1c>
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <tcp_recv+0x24>)
 800ab5c:	f240 72df 	movw	r2, #2015	; 0x7df
 800ab60:	4904      	ldr	r1, [pc, #16]	; (800ab74 <tcp_recv+0x28>)
 800ab62:	4805      	ldr	r0, [pc, #20]	; (800ab78 <tcp_recv+0x2c>)
 800ab64:	f004 f9b6 	bl	800eed4 <iprintf>
    pcb->recv = recv;
 800ab68:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	bf00      	nop
 800ab70:	0801c5a3 	.word	0x0801c5a3
 800ab74:	0801c755 	.word	0x0801c755
 800ab78:	0801a5dc 	.word	0x0801a5dc

0800ab7c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ab80:	4604      	mov	r4, r0
 800ab82:	b150      	cbz	r0, 800ab9a <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ab84:	7d03      	ldrb	r3, [r0, #20]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d106      	bne.n	800ab98 <tcp_sent+0x1c>
 800ab8a:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <tcp_sent+0x20>)
 800ab8c:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ab90:	4903      	ldr	r1, [pc, #12]	; (800aba0 <tcp_sent+0x24>)
 800ab92:	4804      	ldr	r0, [pc, #16]	; (800aba4 <tcp_sent+0x28>)
 800ab94:	f004 f99e 	bl	800eed4 <iprintf>
    pcb->sent = sent;
 800ab98:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	0801c5a3 	.word	0x0801c5a3
 800aba0:	0801c77c 	.word	0x0801c77c
 800aba4:	0801a5dc 	.word	0x0801a5dc

0800aba8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800abac:	4604      	mov	r4, r0
 800abae:	b158      	cbz	r0, 800abc8 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800abb0:	7d03      	ldrb	r3, [r0, #20]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d106      	bne.n	800abc4 <tcp_err+0x1c>
 800abb6:	4b05      	ldr	r3, [pc, #20]	; (800abcc <tcp_err+0x24>)
 800abb8:	f640 020d 	movw	r2, #2061	; 0x80d
 800abbc:	4904      	ldr	r1, [pc, #16]	; (800abd0 <tcp_err+0x28>)
 800abbe:	4805      	ldr	r0, [pc, #20]	; (800abd4 <tcp_err+0x2c>)
 800abc0:	f004 f988 	bl	800eed4 <iprintf>
    pcb->errf = err;
 800abc4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800abc8:	bd38      	pop	{r3, r4, r5, pc}
 800abca:	bf00      	nop
 800abcc:	0801c5a3 	.word	0x0801c5a3
 800abd0:	0801c7a3 	.word	0x0801c7a3
 800abd4:	0801a5dc 	.word	0x0801a5dc

0800abd8 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800abd8:	b118      	cbz	r0, 800abe2 <tcp_accept+0xa>
 800abda:	7d03      	ldrb	r3, [r0, #20]
 800abdc:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800abde:	bf08      	it	eq
 800abe0:	6181      	streq	r1, [r0, #24]
  }
}
 800abe2:	4770      	bx	lr

0800abe4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	460e      	mov	r6, r1
 800abe8:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800abea:	4604      	mov	r4, r0
 800abec:	b940      	cbnz	r0, 800ac00 <tcp_poll+0x1c>
 800abee:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <tcp_poll+0x38>)
 800abf0:	f640 023d 	movw	r2, #2109	; 0x83d
 800abf4:	490a      	ldr	r1, [pc, #40]	; (800ac20 <tcp_poll+0x3c>)
 800abf6:	480b      	ldr	r0, [pc, #44]	; (800ac24 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800abf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800abfc:	f004 b96a 	b.w	800eed4 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ac00:	7d03      	ldrb	r3, [r0, #20]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d106      	bne.n	800ac14 <tcp_poll+0x30>
 800ac06:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <tcp_poll+0x38>)
 800ac08:	f640 023e 	movw	r2, #2110	; 0x83e
 800ac0c:	4906      	ldr	r1, [pc, #24]	; (800ac28 <tcp_poll+0x44>)
 800ac0e:	4805      	ldr	r0, [pc, #20]	; (800ac24 <tcp_poll+0x40>)
 800ac10:	f004 f960 	bl	800eed4 <iprintf>
  pcb->poll = poll;
 800ac14:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800ac18:	7765      	strb	r5, [r4, #29]
}
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	0801c5a3 	.word	0x0801c5a3
 800ac20:	0801c7c9 	.word	0x0801c7c9
 800ac24:	0801a5dc 	.word	0x0801a5dc
 800ac28:	0801c7df 	.word	0x0801c7df

0800ac2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ac2c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac2e:	4604      	mov	r4, r0
 800ac30:	b940      	cbnz	r0, 800ac44 <tcp_pcb_purge+0x18>
 800ac32:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <tcp_pcb_purge+0x4c>)
 800ac34:	f640 0251 	movw	r2, #2129	; 0x851
 800ac38:	4910      	ldr	r1, [pc, #64]	; (800ac7c <tcp_pcb_purge+0x50>)
 800ac3a:	4811      	ldr	r0, [pc, #68]	; (800ac80 <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800ac3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac40:	f004 b948 	b.w	800eed4 <iprintf>
  if (pcb->state != CLOSED &&
 800ac44:	7d03      	ldrb	r3, [r0, #20]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d915      	bls.n	800ac76 <tcp_pcb_purge+0x4a>
 800ac4a:	2b0a      	cmp	r3, #10
 800ac4c:	d013      	beq.n	800ac76 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800ac4e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800ac50:	b118      	cbz	r0, 800ac5a <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800ac52:	f7ff fb2d 	bl	800a2b0 <pbuf_free>
      pcb->refused_data = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800ac5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800ac5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800ac60:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800ac62:	f7ff ff67 	bl	800ab34 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ac66:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ac68:	f7ff ff64 	bl	800ab34 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800ac72:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800ac76:	bd10      	pop	{r4, pc}
 800ac78:	0801c5a3 	.word	0x0801c5a3
 800ac7c:	0801c7fd 	.word	0x0801c7fd
 800ac80:	0801a5dc 	.word	0x0801a5dc

0800ac84 <tcp_slowtmr>:
{
 800ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800ac88:	4dab      	ldr	r5, [pc, #684]	; (800af38 <tcp_slowtmr+0x2b4>)
{
 800ac8a:	b087      	sub	sp, #28
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ac8c:	4fab      	ldr	r7, [pc, #684]	; (800af3c <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 800ac8e:	68eb      	ldr	r3, [r5, #12]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ac90:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 800af58 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800ac94:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ac96:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800af5c <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800ac9a:	60eb      	str	r3, [r5, #12]
  ++tcp_timer_ctr;
 800ac9c:	7c2b      	ldrb	r3, [r5, #16]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800aca2:	68ac      	ldr	r4, [r5, #8]
  prev = NULL;
 800aca4:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 800aca8:	b95c      	cbnz	r4, 800acc2 <tcp_slowtmr+0x3e>
  pcb = tcp_tw_pcbs;
 800acaa:	696e      	ldr	r6, [r5, #20]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800acac:	4fa3      	ldr	r7, [pc, #652]	; (800af3c <tcp_slowtmr+0x2b8>)
 800acae:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800af60 <tcp_slowtmr+0x2dc>
 800acb2:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800af5c <tcp_slowtmr+0x2d8>
  while (pcb != NULL) {
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	f040 819b 	bne.w	800aff2 <tcp_slowtmr+0x36e>
}
 800acbc:	b007      	add	sp, #28
 800acbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800acc2:	7d23      	ldrb	r3, [r4, #20]
 800acc4:	b933      	cbnz	r3, 800acd4 <tcp_slowtmr+0x50>
 800acc6:	463b      	mov	r3, r7
 800acc8:	f240 42be 	movw	r2, #1214	; 0x4be
 800accc:	4659      	mov	r1, fp
 800acce:	4640      	mov	r0, r8
 800acd0:	f004 f900 	bl	800eed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800acd4:	7d23      	ldrb	r3, [r4, #20]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d106      	bne.n	800ace8 <tcp_slowtmr+0x64>
 800acda:	463b      	mov	r3, r7
 800acdc:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ace0:	4997      	ldr	r1, [pc, #604]	; (800af40 <tcp_slowtmr+0x2bc>)
 800ace2:	4640      	mov	r0, r8
 800ace4:	f004 f8f6 	bl	800eed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ace8:	7d23      	ldrb	r3, [r4, #20]
 800acea:	2b0a      	cmp	r3, #10
 800acec:	d106      	bne.n	800acfc <tcp_slowtmr+0x78>
 800acee:	463b      	mov	r3, r7
 800acf0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800acf4:	4993      	ldr	r1, [pc, #588]	; (800af44 <tcp_slowtmr+0x2c0>)
 800acf6:	4640      	mov	r0, r8
 800acf8:	f004 f8ec 	bl	800eed4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800acfc:	7c2b      	ldrb	r3, [r5, #16]
 800acfe:	7fa2      	ldrb	r2, [r4, #30]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d103      	bne.n	800ad0c <tcp_slowtmr+0x88>
      pcb = pcb->next;
 800ad04:	68e6      	ldr	r6, [r4, #12]
      continue;
 800ad06:	46a1      	mov	r9, r4
 800ad08:	4634      	mov	r4, r6
 800ad0a:	e7cd      	b.n	800aca8 <tcp_slowtmr+0x24>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ad0c:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800ad0e:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ad10:	2a02      	cmp	r2, #2
 800ad12:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ad16:	d176      	bne.n	800ae06 <tcp_slowtmr+0x182>
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	d976      	bls.n	800ae0a <tcp_slowtmr+0x186>
      ++pcb_remove;
 800ad1c:	f04f 0a01 	mov.w	sl, #1
    if (pcb->state == FIN_WAIT_2) {
 800ad20:	7d23      	ldrb	r3, [r4, #20]
 800ad22:	2b06      	cmp	r3, #6
 800ad24:	d10b      	bne.n	800ad3e <tcp_slowtmr+0xba>
      if (pcb->flags & TF_RXCLOSED) {
 800ad26:	8b62      	ldrh	r2, [r4, #26]
 800ad28:	06d2      	lsls	r2, r2, #27
 800ad2a:	d508      	bpl.n	800ad3e <tcp_slowtmr+0xba>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad2c:	68ea      	ldr	r2, [r5, #12]
 800ad2e:	6a21      	ldr	r1, [r4, #32]
 800ad30:	1a52      	subs	r2, r2, r1
 800ad32:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800ad34:	bf84      	itt	hi
 800ad36:	f10a 0a01 	addhi.w	sl, sl, #1
 800ad3a:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ad3e:	7a66      	ldrb	r6, [r4, #9]
 800ad40:	f016 0608 	ands.w	r6, r6, #8
 800ad44:	d019      	beq.n	800ad7a <tcp_slowtmr+0xf6>
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d002      	beq.n	800ad50 <tcp_slowtmr+0xcc>
        ((pcb->state == ESTABLISHED) ||
 800ad4a:	2b07      	cmp	r3, #7
 800ad4c:	f040 811c 	bne.w	800af88 <tcp_slowtmr+0x304>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad50:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ad52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad56:	68e9      	ldr	r1, [r5, #12]
 800ad58:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ad5a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ad5e:	f503 2224 	add.w	r2, r3, #671744	; 0xa4000
 800ad62:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 800ad66:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad6a:	4291      	cmp	r1, r2
 800ad6c:	f240 80fa 	bls.w	800af64 <tcp_slowtmr+0x2e0>
        ++pcb_remove;
 800ad70:	f10a 0a01 	add.w	sl, sl, #1
        ++pcb_reset;
 800ad74:	2601      	movs	r6, #1
        ++pcb_remove;
 800ad76:	fa5f fa8a 	uxtb.w	sl, sl
    if (pcb->state == SYN_RCVD) {
 800ad7a:	7d23      	ldrb	r3, [r4, #20]
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	f040 8105 	bne.w	800af8c <tcp_slowtmr+0x308>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad82:	68eb      	ldr	r3, [r5, #12]
 800ad84:	6a22      	ldr	r2, [r4, #32]
 800ad86:	1a9b      	subs	r3, r3, r2
 800ad88:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad8a:	d803      	bhi.n	800ad94 <tcp_slowtmr+0x110>
    if (pcb_remove) {
 800ad8c:	f1ba 0f00 	cmp.w	sl, #0
 800ad90:	f000 8110 	beq.w	800afb4 <tcp_slowtmr+0x330>
      tcp_pcb_purge(pcb);
 800ad94:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800ad96:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800ad9a:	f7ff ff47 	bl	800ac2c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad9e:	68ab      	ldr	r3, [r5, #8]
      if (prev != NULL) {
 800ada0:	f1b9 0f00 	cmp.w	r9, #0
 800ada4:	f000 80fa 	beq.w	800af9c <tcp_slowtmr+0x318>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	d106      	bne.n	800adba <tcp_slowtmr+0x136>
 800adac:	463b      	mov	r3, r7
 800adae:	f240 526d 	movw	r2, #1389	; 0x56d
 800adb2:	4965      	ldr	r1, [pc, #404]	; (800af48 <tcp_slowtmr+0x2c4>)
 800adb4:	4640      	mov	r0, r8
 800adb6:	f004 f88d 	bl	800eed4 <iprintf>
        prev->next = pcb->next;
 800adba:	68e3      	ldr	r3, [r4, #12]
 800adbc:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800adc0:	b15e      	cbz	r6, 800adda <tcp_slowtmr+0x156>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800adc2:	8b23      	ldrh	r3, [r4, #24]
 800adc4:	4620      	mov	r0, r4
 800adc6:	9302      	str	r3, [sp, #8]
 800adc8:	8ae3      	ldrh	r3, [r4, #22]
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	1d23      	adds	r3, r4, #4
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	4623      	mov	r3, r4
 800add2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800add4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800add6:	f002 fb9b 	bl	800d510 <tcp_rst>
      err_arg = pcb->callback_arg;
 800adda:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800addc:	4620      	mov	r0, r4
      pcb = pcb->next;
 800adde:	68e6      	ldr	r6, [r4, #12]
      err_arg = pcb->callback_arg;
 800ade0:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800ade2:	f7ff fd53 	bl	800a88c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ade6:	2200      	movs	r2, #0
 800ade8:	746a      	strb	r2, [r5, #17]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800adea:	f1ba 0f00 	cmp.w	sl, #0
 800adee:	d008      	beq.n	800ae02 <tcp_slowtmr+0x17e>
 800adf0:	9b05      	ldr	r3, [sp, #20]
 800adf2:	f06f 010c 	mvn.w	r1, #12
 800adf6:	4618      	mov	r0, r3
 800adf8:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 800adfa:	7c6b      	ldrb	r3, [r5, #17]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f47f af50 	bne.w	800aca2 <tcp_slowtmr+0x1e>
 800ae02:	464c      	mov	r4, r9
 800ae04:	e77f      	b.n	800ad06 <tcp_slowtmr+0x82>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ae06:	2b0b      	cmp	r3, #11
 800ae08:	e787      	b.n	800ad1a <tcp_slowtmr+0x96>
      if (pcb->persist_backoff > 0) {
 800ae0a:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 800ae0e:	f1ba 0f00 	cmp.w	sl, #0
 800ae12:	d045      	beq.n	800aea0 <tcp_slowtmr+0x21c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ae14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae16:	b133      	cbz	r3, 800ae26 <tcp_slowtmr+0x1a2>
 800ae18:	463b      	mov	r3, r7
 800ae1a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ae1e:	494b      	ldr	r1, [pc, #300]	; (800af4c <tcp_slowtmr+0x2c8>)
 800ae20:	4640      	mov	r0, r8
 800ae22:	f004 f857 	bl	800eed4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ae26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae28:	b933      	cbnz	r3, 800ae38 <tcp_slowtmr+0x1b4>
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ae30:	4947      	ldr	r1, [pc, #284]	; (800af50 <tcp_slowtmr+0x2cc>)
 800ae32:	4640      	mov	r0, r8
 800ae34:	f004 f84e 	bl	800eed4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ae38:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800ae3c:	2b0b      	cmp	r3, #11
 800ae3e:	f63f af6d 	bhi.w	800ad1c <tcp_slowtmr+0x98>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ae42:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800ae46:	4b43      	ldr	r3, [pc, #268]	; (800af54 <tcp_slowtmr+0x2d0>)
 800ae48:	4413      	add	r3, r2
 800ae4a:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800ae4c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d30b      	bcc.n	800ae6c <tcp_slowtmr+0x1e8>
            if (pcb->snd_wnd == 0) {
 800ae54:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800ae58:	b189      	cbz	r1, 800ae7e <tcp_slowtmr+0x1fa>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f002 f910 	bl	800d080 <tcp_split_unsent_seg>
 800ae60:	b990      	cbnz	r0, 800ae88 <tcp_slowtmr+0x204>
                if (tcp_output(pcb) == ERR_OK) {
 800ae62:	4620      	mov	r0, r4
 800ae64:	f002 fbcc 	bl	800d600 <tcp_output>
 800ae68:	b130      	cbz	r0, 800ae78 <tcp_slowtmr+0x1f4>
 800ae6a:	e00d      	b.n	800ae88 <tcp_slowtmr+0x204>
            pcb->persist_cnt++;
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800ae70:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800ae72:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800ae76:	d2ed      	bcs.n	800ae54 <tcp_slowtmr+0x1d0>
    pcb_remove = 0;
 800ae78:	f04f 0a00 	mov.w	sl, #0
 800ae7c:	e750      	b.n	800ad20 <tcp_slowtmr+0x9c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f002 fdc6 	bl	800da10 <tcp_zero_window_probe>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d1f7      	bne.n	800ae78 <tcp_slowtmr+0x1f4>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ae88:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800ae8c:	f04f 0a00 	mov.w	sl, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ae90:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800ae92:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ae96:	d8ef      	bhi.n	800ae78 <tcp_slowtmr+0x1f4>
                pcb->persist_backoff++;
 800ae98:	3301      	adds	r3, #1
 800ae9a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800ae9e:	e73f      	b.n	800ad20 <tcp_slowtmr+0x9c>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800aea0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800aea2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800aea6:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800aea8:	bf9c      	itt	ls
 800aeaa:	3301      	addls	r3, #1
 800aeac:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800aeae:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800aeb2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	dbde      	blt.n	800ae78 <tcp_slowtmr+0x1f4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aeba:	4620      	mov	r0, r4
 800aebc:	f002 fa70 	bl	800d3a0 <tcp_rexmit_rto_prepare>
 800aec0:	b128      	cbz	r0, 800aece <tcp_slowtmr+0x24a>
 800aec2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1d7      	bne.n	800ae78 <tcp_slowtmr+0x1f4>
 800aec8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0d4      	beq.n	800ae78 <tcp_slowtmr+0x1f4>
            if (pcb->state != SYN_SENT) {
 800aece:	7d23      	ldrb	r3, [r4, #20]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d015      	beq.n	800af00 <tcp_slowtmr+0x27c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800aed4:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800aed8:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800aedc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800aee0:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800aee4:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <tcp_slowtmr+0x2d0>)
 800aee6:	290c      	cmp	r1, #12
 800aee8:	bf94      	ite	ls
 800aeea:	1852      	addls	r2, r2, r1
 800aeec:	320c      	addhi	r2, #12
 800aeee:	7dd2      	ldrb	r2, [r2, #23]
 800aef0:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800aef2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aef6:	4293      	cmp	r3, r2
 800aef8:	bfa8      	it	ge
 800aefa:	4613      	movge	r3, r2
 800aefc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800af00:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 800af04:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800af06:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800af0a:	8e66      	ldrh	r6, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800af0c:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 800af0e:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800af10:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800af14:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800af16:	bf28      	it	cs
 800af18:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800af1a:	0073      	lsls	r3, r6, #1
            pcb->cwnd = pcb->mss;
 800af1c:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800af20:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800af22:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800af24:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800af28:	bf98      	it	ls
 800af2a:	460b      	movls	r3, r1
 800af2c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800af30:	f002 fd10 	bl	800d954 <tcp_rexmit_rto_commit>
 800af34:	e6f4      	b.n	800ad20 <tcp_slowtmr+0x9c>
 800af36:	bf00      	nop
 800af38:	2000d000 	.word	0x2000d000
 800af3c:	0801c5a3 	.word	0x0801c5a3
 800af40:	0801c842 	.word	0x0801c842
 800af44:	0801c86c 	.word	0x0801c86c
 800af48:	0801c900 	.word	0x0801c900
 800af4c:	0801c899 	.word	0x0801c899
 800af50:	0801c8cb 	.word	0x0801c8cb
 800af54:	0801183c 	.word	0x0801183c
 800af58:	0801c818 	.word	0x0801c818
 800af5c:	0801a5dc 	.word	0x0801a5dc
 800af60:	0801c955 	.word	0x0801c955
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800af64:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 800af68:	4e3d      	ldr	r6, [pc, #244]	; (800b060 <tcp_slowtmr+0x3dc>)
 800af6a:	fb06 3302 	mla	r3, r6, r2, r3
                 / TCP_SLOW_INTERVAL) {
 800af6e:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af72:	4299      	cmp	r1, r3
 800af74:	d908      	bls.n	800af88 <tcp_slowtmr+0x304>
        err = tcp_keepalive(pcb);
 800af76:	4620      	mov	r0, r4
 800af78:	f002 fd22 	bl	800d9c0 <tcp_keepalive>
        if (err == ERR_OK) {
 800af7c:	b920      	cbnz	r0, 800af88 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 800af7e:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800af82:	3301      	adds	r3, #1
 800af84:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800af88:	2600      	movs	r6, #0
 800af8a:	e6f6      	b.n	800ad7a <tcp_slowtmr+0xf6>
    if (pcb->state == LAST_ACK) {
 800af8c:	2b09      	cmp	r3, #9
 800af8e:	f47f aefd 	bne.w	800ad8c <tcp_slowtmr+0x108>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800af92:	68eb      	ldr	r3, [r5, #12]
 800af94:	6a22      	ldr	r2, [r4, #32]
 800af96:	1a9b      	subs	r3, r3, r2
 800af98:	2bf0      	cmp	r3, #240	; 0xf0
 800af9a:	e6f6      	b.n	800ad8a <tcp_slowtmr+0x106>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	d006      	beq.n	800afae <tcp_slowtmr+0x32a>
 800afa0:	463b      	mov	r3, r7
 800afa2:	f240 5271 	movw	r2, #1393	; 0x571
 800afa6:	492f      	ldr	r1, [pc, #188]	; (800b064 <tcp_slowtmr+0x3e0>)
 800afa8:	4640      	mov	r0, r8
 800afaa:	f003 ff93 	bl	800eed4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800afae:	68e3      	ldr	r3, [r4, #12]
 800afb0:	60ab      	str	r3, [r5, #8]
 800afb2:	e705      	b.n	800adc0 <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 800afb4:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800afb6:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800afb8:	3301      	adds	r3, #1
      pcb = pcb->next;
 800afba:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800afbc:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800afbe:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800afc0:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800afc2:	f63f aea0 	bhi.w	800ad06 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800afc6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800afca:	f884 a01c 	strb.w	sl, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800afce:	f885 a011 	strb.w	sl, [r5, #17]
        TCP_EVENT_POLL(prev, err);
 800afd2:	b91b      	cbnz	r3, 800afdc <tcp_slowtmr+0x358>
          tcp_output(prev);
 800afd4:	4620      	mov	r0, r4
 800afd6:	f002 fb13 	bl	800d600 <tcp_output>
 800afda:	e694      	b.n	800ad06 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800afdc:	4621      	mov	r1, r4
 800afde:	6920      	ldr	r0, [r4, #16]
 800afe0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800afe2:	7c6b      	ldrb	r3, [r5, #17]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f47f ae5c 	bne.w	800aca2 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800afea:	2800      	cmp	r0, #0
 800afec:	f47f ae8b 	bne.w	800ad06 <tcp_slowtmr+0x82>
 800aff0:	e7f0      	b.n	800afd4 <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aff2:	7d33      	ldrb	r3, [r6, #20]
 800aff4:	2b0a      	cmp	r3, #10
 800aff6:	d006      	beq.n	800b006 <tcp_slowtmr+0x382>
 800aff8:	463b      	mov	r3, r7
 800affa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800affe:	4649      	mov	r1, r9
 800b000:	4640      	mov	r0, r8
 800b002:	f003 ff67 	bl	800eed4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b006:	68eb      	ldr	r3, [r5, #12]
 800b008:	6a32      	ldr	r2, [r6, #32]
 800b00a:	1a9b      	subs	r3, r3, r2
 800b00c:	2bf0      	cmp	r3, #240	; 0xf0
 800b00e:	d910      	bls.n	800b032 <tcp_slowtmr+0x3ae>
      tcp_pcb_purge(pcb);
 800b010:	4630      	mov	r0, r6
 800b012:	f7ff fe0b 	bl	800ac2c <tcp_pcb_purge>
      if (prev != NULL) {
 800b016:	b97c      	cbnz	r4, 800b038 <tcp_slowtmr+0x3b4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b018:	696b      	ldr	r3, [r5, #20]
 800b01a:	42b3      	cmp	r3, r6
 800b01c:	d006      	beq.n	800b02c <tcp_slowtmr+0x3a8>
 800b01e:	463b      	mov	r3, r7
 800b020:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b024:	4910      	ldr	r1, [pc, #64]	; (800b068 <tcp_slowtmr+0x3e4>)
 800b026:	4640      	mov	r0, r8
 800b028:	f003 ff54 	bl	800eed4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b02c:	68f3      	ldr	r3, [r6, #12]
 800b02e:	616b      	str	r3, [r5, #20]
 800b030:	e00e      	b.n	800b050 <tcp_slowtmr+0x3cc>
      pcb = pcb->next;
 800b032:	4634      	mov	r4, r6
 800b034:	68f6      	ldr	r6, [r6, #12]
 800b036:	e63e      	b.n	800acb6 <tcp_slowtmr+0x32>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b038:	696b      	ldr	r3, [r5, #20]
 800b03a:	42b3      	cmp	r3, r6
 800b03c:	d106      	bne.n	800b04c <tcp_slowtmr+0x3c8>
 800b03e:	463b      	mov	r3, r7
 800b040:	f240 52af 	movw	r2, #1455	; 0x5af
 800b044:	4909      	ldr	r1, [pc, #36]	; (800b06c <tcp_slowtmr+0x3e8>)
 800b046:	4640      	mov	r0, r8
 800b048:	f003 ff44 	bl	800eed4 <iprintf>
        prev->next = pcb->next;
 800b04c:	68f3      	ldr	r3, [r6, #12]
 800b04e:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800b050:	f8d6 a00c 	ldr.w	sl, [r6, #12]
      tcp_free(pcb2);
 800b054:	4630      	mov	r0, r6
 800b056:	f7ff fc19 	bl	800a88c <tcp_free>
      pcb = pcb->next;
 800b05a:	4656      	mov	r6, sl
 800b05c:	e62b      	b.n	800acb6 <tcp_slowtmr+0x32>
 800b05e:	bf00      	nop
 800b060:	000124f8 	.word	0x000124f8
 800b064:	0801c92b 	.word	0x0801c92b
 800b068:	0801c9ab 	.word	0x0801c9ab
 800b06c:	0801c984 	.word	0x0801c984

0800b070 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b074:	460c      	mov	r4, r1
 800b076:	b931      	cbnz	r1, 800b086 <tcp_pcb_remove+0x16>
 800b078:	4b25      	ldr	r3, [pc, #148]	; (800b110 <tcp_pcb_remove+0xa0>)
 800b07a:	f640 0283 	movw	r2, #2179	; 0x883
 800b07e:	4925      	ldr	r1, [pc, #148]	; (800b114 <tcp_pcb_remove+0xa4>)
 800b080:	4825      	ldr	r0, [pc, #148]	; (800b118 <tcp_pcb_remove+0xa8>)
 800b082:	f003 ff27 	bl	800eed4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b086:	b935      	cbnz	r5, 800b096 <tcp_pcb_remove+0x26>
 800b088:	4b21      	ldr	r3, [pc, #132]	; (800b110 <tcp_pcb_remove+0xa0>)
 800b08a:	f640 0284 	movw	r2, #2180	; 0x884
 800b08e:	4923      	ldr	r1, [pc, #140]	; (800b11c <tcp_pcb_remove+0xac>)
 800b090:	4821      	ldr	r0, [pc, #132]	; (800b118 <tcp_pcb_remove+0xa8>)
 800b092:	f003 ff1f 	bl	800eed4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	42a3      	cmp	r3, r4
 800b09a:	d116      	bne.n	800b0ca <tcp_pcb_remove+0x5a>
 800b09c:	68e3      	ldr	r3, [r4, #12]
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800b0a2:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b0a4:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b0a6:	f7ff fdc1 	bl	800ac2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b0aa:	7d23      	ldrb	r3, [r4, #20]
 800b0ac:	2b0a      	cmp	r3, #10
 800b0ae:	d114      	bne.n	800b0da <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b0b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b0b2:	bb23      	cbnz	r3, 800b0fe <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b0b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b0b6:	b1f3      	cbz	r3, 800b0f6 <tcp_pcb_remove+0x86>
 800b0b8:	4b15      	ldr	r3, [pc, #84]	; (800b110 <tcp_pcb_remove+0xa0>)
 800b0ba:	f640 0294 	movw	r2, #2196	; 0x894
 800b0be:	4918      	ldr	r1, [pc, #96]	; (800b120 <tcp_pcb_remove+0xb0>)
 800b0c0:	4815      	ldr	r0, [pc, #84]	; (800b118 <tcp_pcb_remove+0xa8>)
 800b0c2:	f003 ff07 	bl	800eed4 <iprintf>
 800b0c6:	e016      	b.n	800b0f6 <tcp_pcb_remove+0x86>
 800b0c8:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0e8      	beq.n	800b0a0 <tcp_pcb_remove+0x30>
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	42a2      	cmp	r2, r4
 800b0d2:	d1f9      	bne.n	800b0c8 <tcp_pcb_remove+0x58>
 800b0d4:	68e2      	ldr	r2, [r4, #12]
 800b0d6:	60da      	str	r2, [r3, #12]
 800b0d8:	e7e2      	b.n	800b0a0 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d00b      	beq.n	800b0f6 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800b0de:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b0e0:	07da      	lsls	r2, r3, #31
 800b0e2:	d5e5      	bpl.n	800b0b0 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800b0e4:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b0e8:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b0ea:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b0ec:	f002 fa88 	bl	800d600 <tcp_output>
  if (pcb->state != LISTEN) {
 800b0f0:	7d23      	ldrb	r3, [r4, #20]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d1dc      	bne.n	800b0b0 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b0fa:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b0fe:	4b04      	ldr	r3, [pc, #16]	; (800b110 <tcp_pcb_remove+0xa0>)
 800b100:	f640 0293 	movw	r2, #2195	; 0x893
 800b104:	4907      	ldr	r1, [pc, #28]	; (800b124 <tcp_pcb_remove+0xb4>)
 800b106:	4804      	ldr	r0, [pc, #16]	; (800b118 <tcp_pcb_remove+0xa8>)
 800b108:	f003 fee4 	bl	800eed4 <iprintf>
 800b10c:	e7d2      	b.n	800b0b4 <tcp_pcb_remove+0x44>
 800b10e:	bf00      	nop
 800b110:	0801c5a3 	.word	0x0801c5a3
 800b114:	0801c9d1 	.word	0x0801c9d1
 800b118:	0801a5dc 	.word	0x0801a5dc
 800b11c:	0801c9ed 	.word	0x0801c9ed
 800b120:	0801ca25 	.word	0x0801ca25
 800b124:	0801ca0d 	.word	0x0801ca0d

0800b128 <tcp_close_shutdown>:
{
 800b128:	b530      	push	{r4, r5, lr}
 800b12a:	460d      	mov	r5, r1
 800b12c:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b12e:	4604      	mov	r4, r0
 800b130:	b930      	cbnz	r0, 800b140 <tcp_close_shutdown+0x18>
 800b132:	4b4b      	ldr	r3, [pc, #300]	; (800b260 <tcp_close_shutdown+0x138>)
 800b134:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b138:	494a      	ldr	r1, [pc, #296]	; (800b264 <tcp_close_shutdown+0x13c>)
 800b13a:	484b      	ldr	r0, [pc, #300]	; (800b268 <tcp_close_shutdown+0x140>)
 800b13c:	f003 feca 	bl	800eed4 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b140:	7d23      	ldrb	r3, [r4, #20]
 800b142:	2d00      	cmp	r5, #0
 800b144:	d03f      	beq.n	800b1c6 <tcp_close_shutdown+0x9e>
 800b146:	2b04      	cmp	r3, #4
 800b148:	d001      	beq.n	800b14e <tcp_close_shutdown+0x26>
 800b14a:	2b07      	cmp	r3, #7
 800b14c:	d13b      	bne.n	800b1c6 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b14e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b150:	b922      	cbnz	r2, 800b15c <tcp_close_shutdown+0x34>
 800b152:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b154:	f640 3268 	movw	r2, #2920	; 0xb68
 800b158:	4291      	cmp	r1, r2
 800b15a:	d034      	beq.n	800b1c6 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b15c:	8b63      	ldrh	r3, [r4, #26]
 800b15e:	06db      	lsls	r3, r3, #27
 800b160:	d406      	bmi.n	800b170 <tcp_close_shutdown+0x48>
 800b162:	4b3f      	ldr	r3, [pc, #252]	; (800b260 <tcp_close_shutdown+0x138>)
 800b164:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b168:	4940      	ldr	r1, [pc, #256]	; (800b26c <tcp_close_shutdown+0x144>)
 800b16a:	483f      	ldr	r0, [pc, #252]	; (800b268 <tcp_close_shutdown+0x140>)
 800b16c:	f003 feb2 	bl	800eed4 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b170:	8b23      	ldrh	r3, [r4, #24]
 800b172:	4620      	mov	r0, r4
 800b174:	9302      	str	r3, [sp, #8]
 800b176:	8ae3      	ldrh	r3, [r4, #22]
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	1d23      	adds	r3, r4, #4
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	4623      	mov	r3, r4
 800b180:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b182:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b184:	f002 f9c4 	bl	800d510 <tcp_rst>
      tcp_pcb_purge(pcb);
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff fd4f 	bl	800ac2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b18e:	4a38      	ldr	r2, [pc, #224]	; (800b270 <tcp_close_shutdown+0x148>)
 800b190:	6893      	ldr	r3, [r2, #8]
 800b192:	42a3      	cmp	r3, r4
 800b194:	d10f      	bne.n	800b1b6 <tcp_close_shutdown+0x8e>
 800b196:	68e3      	ldr	r3, [r4, #12]
 800b198:	6093      	str	r3, [r2, #8]
 800b19a:	2300      	movs	r3, #0
 800b19c:	60e3      	str	r3, [r4, #12]
 800b19e:	2301      	movs	r3, #1
 800b1a0:	7453      	strb	r3, [r2, #17]
      if (tcp_input_pcb == pcb) {
 800b1a2:	4b34      	ldr	r3, [pc, #208]	; (800b274 <tcp_close_shutdown+0x14c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	42a3      	cmp	r3, r4
 800b1a8:	d11d      	bne.n	800b1e6 <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
 800b1aa:	f001 fb3f 	bl	800c82c <tcp_trigger_input_pcb_close>
}
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	b005      	add	sp, #20
 800b1b2:	bd30      	pop	{r4, r5, pc}
 800b1b4:	460b      	mov	r3, r1
      TCP_RMV_ACTIVE(pcb);
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0ef      	beq.n	800b19a <tcp_close_shutdown+0x72>
 800b1ba:	68d9      	ldr	r1, [r3, #12]
 800b1bc:	42a1      	cmp	r1, r4
 800b1be:	d1f9      	bne.n	800b1b4 <tcp_close_shutdown+0x8c>
 800b1c0:	68e1      	ldr	r1, [r4, #12]
 800b1c2:	60d9      	str	r1, [r3, #12]
 800b1c4:	e7e9      	b.n	800b19a <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d01a      	beq.n	800b200 <tcp_close_shutdown+0xd8>
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d039      	beq.n	800b242 <tcp_close_shutdown+0x11a>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d140      	bne.n	800b254 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800b1d2:	8ae3      	ldrh	r3, [r4, #22]
 800b1d4:	b13b      	cbz	r3, 800b1e6 <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b1d6:	4a26      	ldr	r2, [pc, #152]	; (800b270 <tcp_close_shutdown+0x148>)
 800b1d8:	6813      	ldr	r3, [r2, #0]
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	d108      	bne.n	800b1f0 <tcp_close_shutdown+0xc8>
 800b1de:	68e3      	ldr	r3, [r4, #12]
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f7ff fb50 	bl	800a88c <tcp_free>
      break;
 800b1ec:	e7df      	b.n	800b1ae <tcp_close_shutdown+0x86>
 800b1ee:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d0f6      	beq.n	800b1e2 <tcp_close_shutdown+0xba>
 800b1f4:	68da      	ldr	r2, [r3, #12]
 800b1f6:	42a2      	cmp	r2, r4
 800b1f8:	d1f9      	bne.n	800b1ee <tcp_close_shutdown+0xc6>
 800b1fa:	68e2      	ldr	r2, [r4, #12]
 800b1fc:	60da      	str	r2, [r3, #12]
 800b1fe:	e7f0      	b.n	800b1e2 <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b200:	491d      	ldr	r1, [pc, #116]	; (800b278 <tcp_close_shutdown+0x150>)
      pcb->listener = NULL;
 800b202:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b204:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800b208:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b20a:	b9a2      	cbnz	r2, 800b236 <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b20c:	3301      	adds	r3, #1
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d1f8      	bne.n	800b204 <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b212:	4621      	mov	r1, r4
 800b214:	4819      	ldr	r0, [pc, #100]	; (800b27c <tcp_close_shutdown+0x154>)
 800b216:	f7ff ff2b 	bl	800b070 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b21a:	7d23      	ldrb	r3, [r4, #20]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d105      	bne.n	800b22c <tcp_close_shutdown+0x104>
 800b220:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <tcp_close_shutdown+0x138>)
 800b222:	22df      	movs	r2, #223	; 0xdf
 800b224:	4916      	ldr	r1, [pc, #88]	; (800b280 <tcp_close_shutdown+0x158>)
 800b226:	4810      	ldr	r0, [pc, #64]	; (800b268 <tcp_close_shutdown+0x140>)
 800b228:	f003 fe54 	bl	800eed4 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b22c:	4621      	mov	r1, r4
 800b22e:	2002      	movs	r0, #2
 800b230:	f7fe fe24 	bl	8009e7c <memp_free>
}
 800b234:	e7bb      	b.n	800b1ae <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 800b236:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800b238:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800b23a:	bf08      	it	eq
 800b23c:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b23e:	68d2      	ldr	r2, [r2, #12]
 800b240:	e7e3      	b.n	800b20a <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b242:	4d0b      	ldr	r5, [pc, #44]	; (800b270 <tcp_close_shutdown+0x148>)
 800b244:	4621      	mov	r1, r4
 800b246:	f105 0008 	add.w	r0, r5, #8
 800b24a:	f7ff ff11 	bl	800b070 <tcp_pcb_remove>
 800b24e:	2301      	movs	r3, #1
 800b250:	746b      	strb	r3, [r5, #17]
 800b252:	e7c8      	b.n	800b1e6 <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
 800b254:	4620      	mov	r0, r4
}
 800b256:	b005      	add	sp, #20
 800b258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800b25c:	f7ff bada 	b.w	800a814 <tcp_close_shutdown_fin>
 800b260:	0801c5a3 	.word	0x0801c5a3
 800b264:	0801ca3e 	.word	0x0801ca3e
 800b268:	0801a5dc 	.word	0x0801a5dc
 800b26c:	0801ca5e 	.word	0x0801ca5e
 800b270:	2000d000 	.word	0x2000d000
 800b274:	2000d058 	.word	0x2000d058
 800b278:	0801183c 	.word	0x0801183c
 800b27c:	2000d004 	.word	0x2000d004
 800b280:	0801ca77 	.word	0x0801ca77

0800b284 <tcp_close>:
{
 800b284:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b286:	b158      	cbz	r0, 800b2a0 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800b288:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800b28a:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800b28c:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b28e:	bf1e      	ittt	ne
 800b290:	8b43      	ldrhne	r3, [r0, #26]
 800b292:	f043 0310 	orrne.w	r3, r3, #16
 800b296:	8343      	strhne	r3, [r0, #26]
}
 800b298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800b29c:	f7ff bf44 	b.w	800b128 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b2a0:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <tcp_close+0x30>)
 800b2a2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b2a6:	4904      	ldr	r1, [pc, #16]	; (800b2b8 <tcp_close+0x34>)
 800b2a8:	4804      	ldr	r0, [pc, #16]	; (800b2bc <tcp_close+0x38>)
 800b2aa:	f003 fe13 	bl	800eed4 <iprintf>
}
 800b2ae:	f06f 000f 	mvn.w	r0, #15
 800b2b2:	bd08      	pop	{r3, pc}
 800b2b4:	0801c5a3 	.word	0x0801c5a3
 800b2b8:	0801ca90 	.word	0x0801ca90
 800b2bc:	0801a5dc 	.word	0x0801a5dc

0800b2c0 <tcp_recv_null>:
{
 800b2c0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b2c2:	4608      	mov	r0, r1
{
 800b2c4:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b2c6:	b949      	cbnz	r1, 800b2dc <tcp_recv_null+0x1c>
 800b2c8:	4b0c      	ldr	r3, [pc, #48]	; (800b2fc <tcp_recv_null+0x3c>)
 800b2ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b2ce:	490c      	ldr	r1, [pc, #48]	; (800b300 <tcp_recv_null+0x40>)
 800b2d0:	480c      	ldr	r0, [pc, #48]	; (800b304 <tcp_recv_null+0x44>)
 800b2d2:	f003 fdff 	bl	800eed4 <iprintf>
 800b2d6:	f06f 000f 	mvn.w	r0, #15
}
 800b2da:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800b2dc:	b13a      	cbz	r2, 800b2ee <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800b2de:	8911      	ldrh	r1, [r2, #8]
 800b2e0:	f7ff fbdc 	bl	800aa9c <tcp_recved>
    pbuf_free(p);
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7fe ffe3 	bl	800a2b0 <pbuf_free>
  return ERR_OK;
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	e7f5      	b.n	800b2da <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800b2ee:	b91b      	cbnz	r3, 800b2f8 <tcp_recv_null+0x38>
}
 800b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800b2f4:	f7ff bfc6 	b.w	800b284 <tcp_close>
  return ERR_OK;
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	e7ee      	b.n	800b2da <tcp_recv_null+0x1a>
 800b2fc:	0801c5a3 	.word	0x0801c5a3
 800b300:	0801caa7 	.word	0x0801caa7
 800b304:	0801a5dc 	.word	0x0801a5dc

0800b308 <tcp_process_refused_data>:
{
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b30a:	4604      	mov	r4, r0
 800b30c:	b950      	cbnz	r0, 800b324 <tcp_process_refused_data+0x1c>
 800b30e:	f06f 050f 	mvn.w	r5, #15
 800b312:	4b1d      	ldr	r3, [pc, #116]	; (800b388 <tcp_process_refused_data+0x80>)
 800b314:	f240 6209 	movw	r2, #1545	; 0x609
 800b318:	491c      	ldr	r1, [pc, #112]	; (800b38c <tcp_process_refused_data+0x84>)
 800b31a:	481d      	ldr	r0, [pc, #116]	; (800b390 <tcp_process_refused_data+0x88>)
 800b31c:	f003 fdda 	bl	800eed4 <iprintf>
}
 800b320:	4628      	mov	r0, r5
 800b322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800b324:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800b326:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b328:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800b32c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800b32e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b330:	b1e5      	cbz	r5, 800b36c <tcp_process_refused_data+0x64>
 800b332:	4601      	mov	r1, r0
 800b334:	4632      	mov	r2, r6
 800b336:	6900      	ldr	r0, [r0, #16]
 800b338:	47a8      	blx	r5
 800b33a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800b33c:	b9e8      	cbnz	r0, 800b37a <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b33e:	06bb      	lsls	r3, r7, #26
 800b340:	d5ee      	bpl.n	800b320 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b342:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b344:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800b348:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b34c:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800b34e:	bf1c      	itt	ne
 800b350:	3301      	addne	r3, #1
 800b352:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800b354:	2e00      	cmp	r6, #0
 800b356:	d0e3      	beq.n	800b320 <tcp_process_refused_data+0x18>
 800b358:	2300      	movs	r3, #0
 800b35a:	4621      	mov	r1, r4
 800b35c:	6920      	ldr	r0, [r4, #16]
 800b35e:	461a      	mov	r2, r3
 800b360:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800b362:	300d      	adds	r0, #13
 800b364:	d1dc      	bne.n	800b320 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800b366:	f06f 050c 	mvn.w	r5, #12
 800b36a:	e7d9      	b.n	800b320 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b36c:	4601      	mov	r1, r0
 800b36e:	462b      	mov	r3, r5
 800b370:	4632      	mov	r2, r6
 800b372:	4628      	mov	r0, r5
 800b374:	f7ff ffa4 	bl	800b2c0 <tcp_recv_null>
 800b378:	e7df      	b.n	800b33a <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800b37a:	350d      	adds	r5, #13
 800b37c:	d0f3      	beq.n	800b366 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800b37e:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800b382:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800b384:	e7cc      	b.n	800b320 <tcp_process_refused_data+0x18>
 800b386:	bf00      	nop
 800b388:	0801c5a3 	.word	0x0801c5a3
 800b38c:	0801cac2 	.word	0x0801cac2
 800b390:	0801a5dc 	.word	0x0801a5dc

0800b394 <tcp_fasttmr>:
{
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ++tcp_timer_ctr;
 800b396:	4d18      	ldr	r5, [pc, #96]	; (800b3f8 <tcp_fasttmr+0x64>)
        tcp_active_pcbs_changed = 0;
 800b398:	2600      	movs	r6, #0
  ++tcp_timer_ctr;
 800b39a:	7c2b      	ldrb	r3, [r5, #16]
 800b39c:	3301      	adds	r3, #1
 800b39e:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800b3a0:	68ac      	ldr	r4, [r5, #8]
  while (pcb != NULL) {
 800b3a2:	b904      	cbnz	r4, 800b3a6 <tcp_fasttmr+0x12>
}
 800b3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800b3a6:	7c2b      	ldrb	r3, [r5, #16]
 800b3a8:	7fa2      	ldrb	r2, [r4, #30]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d022      	beq.n	800b3f4 <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
 800b3ae:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800b3b0:	8b63      	ldrh	r3, [r4, #26]
 800b3b2:	07d9      	lsls	r1, r3, #31
 800b3b4:	d509      	bpl.n	800b3ca <tcp_fasttmr+0x36>
        tcp_ack_now(pcb);
 800b3b6:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800b3ba:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800b3bc:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800b3be:	f002 f91f 	bl	800d600 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b3c2:	8b63      	ldrh	r3, [r4, #26]
 800b3c4:	f023 0303 	bic.w	r3, r3, #3
 800b3c8:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800b3ca:	8b63      	ldrh	r3, [r4, #26]
 800b3cc:	071a      	lsls	r2, r3, #28
 800b3ce:	d505      	bpl.n	800b3dc <tcp_fasttmr+0x48>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b3d0:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800b3d4:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b3d6:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800b3d8:	f7ff fa1c 	bl	800a814 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800b3dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800b3de:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 800b3e0:	b133      	cbz	r3, 800b3f0 <tcp_fasttmr+0x5c>
        tcp_process_refused_data(pcb);
 800b3e2:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800b3e4:	746e      	strb	r6, [r5, #17]
        tcp_process_refused_data(pcb);
 800b3e6:	f7ff ff8f 	bl	800b308 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b3ea:	7c6b      	ldrb	r3, [r5, #17]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1d7      	bne.n	800b3a0 <tcp_fasttmr+0xc>
{
 800b3f0:	463c      	mov	r4, r7
 800b3f2:	e7d6      	b.n	800b3a2 <tcp_fasttmr+0xe>
      pcb = pcb->next;
 800b3f4:	68e7      	ldr	r7, [r4, #12]
 800b3f6:	e7fb      	b.n	800b3f0 <tcp_fasttmr+0x5c>
 800b3f8:	2000d000 	.word	0x2000d000

0800b3fc <tcp_tmr>:
{
 800b3fc:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800b3fe:	f7ff ffc9 	bl	800b394 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800b402:	4a06      	ldr	r2, [pc, #24]	; (800b41c <tcp_tmr+0x20>)
 800b404:	7e13      	ldrb	r3, [r2, #24]
 800b406:	3301      	adds	r3, #1
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	7613      	strb	r3, [r2, #24]
 800b40c:	07db      	lsls	r3, r3, #31
 800b40e:	d503      	bpl.n	800b418 <tcp_tmr+0x1c>
}
 800b410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800b414:	f7ff bc36 	b.w	800ac84 <tcp_slowtmr>
}
 800b418:	bd08      	pop	{r3, pc}
 800b41a:	bf00      	nop
 800b41c:	2000d000 	.word	0x2000d000

0800b420 <tcp_shutdown>:
{
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b424:	4605      	mov	r5, r0
 800b426:	b948      	cbnz	r0, 800b43c <tcp_shutdown+0x1c>
 800b428:	4b16      	ldr	r3, [pc, #88]	; (800b484 <tcp_shutdown+0x64>)
 800b42a:	f240 2207 	movw	r2, #519	; 0x207
 800b42e:	4916      	ldr	r1, [pc, #88]	; (800b488 <tcp_shutdown+0x68>)
 800b430:	4816      	ldr	r0, [pc, #88]	; (800b48c <tcp_shutdown+0x6c>)
 800b432:	f003 fd4f 	bl	800eed4 <iprintf>
 800b436:	f06f 000f 	mvn.w	r0, #15
}
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800b43c:	7d03      	ldrb	r3, [r0, #20]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d018      	beq.n	800b474 <tcp_shutdown+0x54>
  if (shut_rx) {
 800b442:	b189      	cbz	r1, 800b468 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b444:	8b43      	ldrh	r3, [r0, #26]
 800b446:	f043 0310 	orr.w	r3, r3, #16
 800b44a:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800b44c:	b122      	cbz	r2, 800b458 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800b44e:	2101      	movs	r1, #1
}
 800b450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b454:	f7ff be68 	b.w	800b128 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800b458:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b45a:	b908      	cbnz	r0, 800b460 <tcp_shutdown+0x40>
  return ERR_OK;
 800b45c:	2000      	movs	r0, #0
 800b45e:	e7ec      	b.n	800b43a <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800b460:	f7fe ff26 	bl	800a2b0 <pbuf_free>
      pcb->refused_data = NULL;
 800b464:	676c      	str	r4, [r5, #116]	; 0x74
 800b466:	e7f9      	b.n	800b45c <tcp_shutdown+0x3c>
  if (shut_tx) {
 800b468:	2a00      	cmp	r2, #0
 800b46a:	d0f7      	beq.n	800b45c <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d804      	bhi.n	800b47a <tcp_shutdown+0x5a>
 800b470:	2b02      	cmp	r3, #2
 800b472:	d804      	bhi.n	800b47e <tcp_shutdown+0x5e>
 800b474:	f06f 000a 	mvn.w	r0, #10
 800b478:	e7df      	b.n	800b43a <tcp_shutdown+0x1a>
 800b47a:	2b07      	cmp	r3, #7
 800b47c:	d1fa      	bne.n	800b474 <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b47e:	2100      	movs	r1, #0
 800b480:	4628      	mov	r0, r5
 800b482:	e7e5      	b.n	800b450 <tcp_shutdown+0x30>
 800b484:	0801c5a3 	.word	0x0801c5a3
 800b488:	0801cae8 	.word	0x0801cae8
 800b48c:	0801a5dc 	.word	0x0801a5dc

0800b490 <tcp_abandon>:
{
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	460e      	mov	r6, r1
 800b496:	b085      	sub	sp, #20
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b498:	4604      	mov	r4, r0
 800b49a:	b948      	cbnz	r0, 800b4b0 <tcp_abandon+0x20>
 800b49c:	4b35      	ldr	r3, [pc, #212]	; (800b574 <tcp_abandon+0xe4>)
 800b49e:	f240 223d 	movw	r2, #573	; 0x23d
 800b4a2:	4935      	ldr	r1, [pc, #212]	; (800b578 <tcp_abandon+0xe8>)
 800b4a4:	4835      	ldr	r0, [pc, #212]	; (800b57c <tcp_abandon+0xec>)
}
 800b4a6:	b005      	add	sp, #20
 800b4a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b4ac:	f003 bd12 	b.w	800eed4 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b4b0:	7d03      	ldrb	r3, [r0, #20]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d106      	bne.n	800b4c4 <tcp_abandon+0x34>
 800b4b6:	4b2f      	ldr	r3, [pc, #188]	; (800b574 <tcp_abandon+0xe4>)
 800b4b8:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b4bc:	4930      	ldr	r1, [pc, #192]	; (800b580 <tcp_abandon+0xf0>)
 800b4be:	482f      	ldr	r0, [pc, #188]	; (800b57c <tcp_abandon+0xec>)
 800b4c0:	f003 fd08 	bl	800eed4 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800b4c4:	7d23      	ldrb	r3, [r4, #20]
 800b4c6:	2b0a      	cmp	r3, #10
 800b4c8:	d109      	bne.n	800b4de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	482d      	ldr	r0, [pc, #180]	; (800b584 <tcp_abandon+0xf4>)
 800b4ce:	f7ff fdcf 	bl	800b070 <tcp_pcb_remove>
    tcp_free(pcb);
 800b4d2:	4620      	mov	r0, r4
}
 800b4d4:	b005      	add	sp, #20
 800b4d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 800b4da:	f7ff b9d7 	b.w	800a88c <tcp_free>
    seqno = pcb->snd_nxt;
 800b4de:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800b4e2:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800b4e6:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800b4ea:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800b4ee:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800b4f0:	b99b      	cbnz	r3, 800b51a <tcp_abandon+0x8a>
      if (pcb->local_port != 0) {
 800b4f2:	b13d      	cbz	r5, 800b504 <tcp_abandon+0x74>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b4f4:	4a24      	ldr	r2, [pc, #144]	; (800b588 <tcp_abandon+0xf8>)
 800b4f6:	6813      	ldr	r3, [r2, #0]
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d106      	bne.n	800b50a <tcp_abandon+0x7a>
 800b4fc:	68e3      	ldr	r3, [r4, #12]
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	2500      	movs	r5, #0
 800b502:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800b504:	462e      	mov	r6, r5
 800b506:	e012      	b.n	800b52e <tcp_abandon+0x9e>
 800b508:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f8      	beq.n	800b500 <tcp_abandon+0x70>
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	42a2      	cmp	r2, r4
 800b512:	d1f9      	bne.n	800b508 <tcp_abandon+0x78>
 800b514:	68e2      	ldr	r2, [r4, #12]
 800b516:	60da      	str	r2, [r3, #12]
 800b518:	e7f2      	b.n	800b500 <tcp_abandon+0x70>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b51a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800b588 <tcp_abandon+0xf8>
 800b51e:	4621      	mov	r1, r4
 800b520:	f10b 0008 	add.w	r0, fp, #8
 800b524:	f7ff fda4 	bl	800b070 <tcp_pcb_remove>
 800b528:	2301      	movs	r3, #1
 800b52a:	f88b 3011 	strb.w	r3, [fp, #17]
    if (pcb->unacked != NULL) {
 800b52e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b530:	b108      	cbz	r0, 800b536 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unacked);
 800b532:	f7ff faff 	bl	800ab34 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800b536:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800b538:	b108      	cbz	r0, 800b53e <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 800b53a:	f7ff fafb 	bl	800ab34 <tcp_segs_free>
    if (send_rst) {
 800b53e:	b156      	cbz	r6, 800b556 <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b540:	8b23      	ldrh	r3, [r4, #24]
 800b542:	4652      	mov	r2, sl
 800b544:	4649      	mov	r1, r9
 800b546:	4620      	mov	r0, r4
 800b548:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800b54c:	1d23      	adds	r3, r4, #4
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	4623      	mov	r3, r4
 800b552:	f001 ffdd 	bl	800d510 <tcp_rst>
    tcp_free(pcb);
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff f998 	bl	800a88c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b55c:	b13f      	cbz	r7, 800b56e <tcp_abandon+0xde>
 800b55e:	f06f 010c 	mvn.w	r1, #12
 800b562:	4640      	mov	r0, r8
 800b564:	463b      	mov	r3, r7
}
 800b566:	b005      	add	sp, #20
 800b568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b56c:	4718      	bx	r3
}
 800b56e:	b005      	add	sp, #20
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	0801c5a3 	.word	0x0801c5a3
 800b578:	0801cb02 	.word	0x0801cb02
 800b57c:	0801a5dc 	.word	0x0801a5dc
 800b580:	0801cb1b 	.word	0x0801cb1b
 800b584:	2000d014 	.word	0x2000d014
 800b588:	2000d000 	.word	0x2000d000

0800b58c <tcp_abort>:
  tcp_abandon(pcb, 1);
 800b58c:	2101      	movs	r1, #1
 800b58e:	f7ff bf7f 	b.w	800b490 <tcp_abandon>
	...

0800b594 <tcp_accept_null>:
{
 800b594:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b596:	460c      	mov	r4, r1
 800b598:	b931      	cbnz	r1, 800b5a8 <tcp_accept_null+0x14>
 800b59a:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <tcp_accept_null+0x20>)
 800b59c:	f240 320f 	movw	r2, #783	; 0x30f
 800b5a0:	4905      	ldr	r1, [pc, #20]	; (800b5b8 <tcp_accept_null+0x24>)
 800b5a2:	4806      	ldr	r0, [pc, #24]	; (800b5bc <tcp_accept_null+0x28>)
 800b5a4:	f003 fc96 	bl	800eed4 <iprintf>
  tcp_abort(pcb);
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7ff ffef 	bl	800b58c <tcp_abort>
}
 800b5ae:	f06f 000c 	mvn.w	r0, #12
 800b5b2:	bd10      	pop	{r4, pc}
 800b5b4:	0801c5a3 	.word	0x0801c5a3
 800b5b8:	0801cb4c 	.word	0x0801cb4c
 800b5bc:	0801a5dc 	.word	0x0801a5dc

0800b5c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	b930      	cbnz	r0, 800b5d6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b5c8:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800b5ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b5ce:	4909      	ldr	r1, [pc, #36]	; (800b5f4 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800b5d0:	4809      	ldr	r0, [pc, #36]	; (800b5f8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800b5d2:	f003 fc7f 	bl	800eed4 <iprintf>

  while (pcb != NULL) {
 800b5d6:	b904      	cbnz	r4, 800b5da <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b5da:	6822      	ldr	r2, [r4, #0]
 800b5dc:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800b5de:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d102      	bne.n	800b5ea <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f7ff ffd1 	bl	800b58c <tcp_abort>
{
 800b5ea:	4634      	mov	r4, r6
 800b5ec:	e7f3      	b.n	800b5d6 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b5ee:	bf00      	nop
 800b5f0:	0801c5a3 	.word	0x0801c5a3
 800b5f4:	0801cb69 	.word	0x0801cb69
 800b5f8:	0801a5dc 	.word	0x0801a5dc

0800b5fc <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5fc:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <tcp_kill_state+0x34>)
  inactivity = 0;
 800b5fe:	2200      	movs	r2, #0
{
 800b600:	b430      	push	{r4, r5}
 800b602:	4604      	mov	r4, r0
  inactive = NULL;
 800b604:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b606:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b60a:	b919      	cbnz	r1, 800b614 <tcp_kill_state+0x18>
  if (inactive != NULL) {
 800b60c:	b168      	cbz	r0, 800b62a <tcp_kill_state+0x2e>
}
 800b60e:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800b610:	f7ff bf3e 	b.w	800b490 <tcp_abandon>
    if (pcb->state == state) {
 800b614:	7d0b      	ldrb	r3, [r1, #20]
 800b616:	42a3      	cmp	r3, r4
 800b618:	d105      	bne.n	800b626 <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b61a:	6a0b      	ldr	r3, [r1, #32]
 800b61c:	1aeb      	subs	r3, r5, r3
 800b61e:	4293      	cmp	r3, r2
 800b620:	bf24      	itt	cs
 800b622:	461a      	movcs	r2, r3
 800b624:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b626:	68c9      	ldr	r1, [r1, #12]
 800b628:	e7ef      	b.n	800b60a <tcp_kill_state+0xe>
}
 800b62a:	bc30      	pop	{r4, r5}
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	2000d000 	.word	0x2000d000

0800b634 <tcp_alloc>:
{
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b638:	2001      	movs	r0, #1
 800b63a:	f7fe fc03 	bl	8009e44 <memp_malloc>
  if (pcb == NULL) {
 800b63e:	4c3f      	ldr	r4, [pc, #252]	; (800b73c <tcp_alloc+0x108>)
 800b640:	4603      	mov	r3, r0
 800b642:	bb98      	cbnz	r0, 800b6ac <tcp_alloc+0x78>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b644:	68a0      	ldr	r0, [r4, #8]
  while (pcb != NULL) {
 800b646:	2800      	cmp	r0, #0
 800b648:	d153      	bne.n	800b6f2 <tcp_alloc+0xbe>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b64a:	6963      	ldr	r3, [r4, #20]
  inactivity = 0;
 800b64c:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b64e:	68e6      	ldr	r6, [r4, #12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b650:	2b00      	cmp	r3, #0
 800b652:	d159      	bne.n	800b708 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 800b654:	b108      	cbz	r0, 800b65a <tcp_alloc+0x26>
    tcp_abort(inactive);
 800b656:	f7ff ff99 	bl	800b58c <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b65a:	2001      	movs	r0, #1
 800b65c:	f7fe fbf2 	bl	8009e44 <memp_malloc>
    if (pcb == NULL) {
 800b660:	4603      	mov	r3, r0
 800b662:	bb18      	cbnz	r0, 800b6ac <tcp_alloc+0x78>
      tcp_kill_state(LAST_ACK);
 800b664:	2009      	movs	r0, #9
 800b666:	f7ff ffc9 	bl	800b5fc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b66a:	2001      	movs	r0, #1
 800b66c:	f7fe fbea 	bl	8009e44 <memp_malloc>
      if (pcb == NULL) {
 800b670:	4603      	mov	r3, r0
 800b672:	b9d8      	cbnz	r0, 800b6ac <tcp_alloc+0x78>
        tcp_kill_state(CLOSING);
 800b674:	2008      	movs	r0, #8
 800b676:	f7ff ffc1 	bl	800b5fc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b67a:	2001      	movs	r0, #1
 800b67c:	f7fe fbe2 	bl	8009e44 <memp_malloc>
        if (pcb == NULL) {
 800b680:	4603      	mov	r3, r0
 800b682:	b998      	cbnz	r0, 800b6ac <tcp_alloc+0x78>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b684:	062a      	lsls	r2, r5, #24
 800b686:	d447      	bmi.n	800b718 <tcp_alloc+0xe4>
  if (mprio == 0) {
 800b688:	b15d      	cbz	r5, 800b6a2 <tcp_alloc+0x6e>
 800b68a:	4629      	mov	r1, r5
  mprio--;
 800b68c:	3901      	subs	r1, #1
  inactivity = 0;
 800b68e:	2000      	movs	r0, #0
  mprio--;
 800b690:	b2c9      	uxtb	r1, r1
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b692:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b696:	2a00      	cmp	r2, #0
 800b698:	d140      	bne.n	800b71c <tcp_alloc+0xe8>
  if (inactive != NULL) {
 800b69a:	b113      	cbz	r3, 800b6a2 <tcp_alloc+0x6e>
    tcp_abort(inactive);
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7ff ff75 	bl	800b58c <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b6a2:	2001      	movs	r0, #1
 800b6a4:	f7fe fbce 	bl	8009e44 <memp_malloc>
  if (pcb != NULL) {
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	b300      	cbz	r0, 800b6ee <tcp_alloc+0xba>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b6ac:	2298      	movs	r2, #152	; 0x98
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	f002 ff9d 	bl	800e5f0 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800b6b6:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b6ba:	4603      	mov	r3, r0
    pcb->prio = prio;
 800b6bc:	7545      	strb	r5, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b6be:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b6c2:	4a1f      	ldr	r2, [pc, #124]	; (800b740 <tcp_alloc+0x10c>)
 800b6c4:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b6c6:	22ff      	movs	r2, #255	; 0xff
 800b6c8:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b6d0:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800b6d2:	4a1c      	ldr	r2, [pc, #112]	; (800b744 <tcp_alloc+0x110>)
 800b6d4:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800b6d6:	68e2      	ldr	r2, [r4, #12]
 800b6d8:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b6da:	7c22      	ldrb	r2, [r4, #16]
 800b6dc:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800b6de:	4a1a      	ldr	r2, [pc, #104]	; (800b748 <tcp_alloc+0x114>)
 800b6e0:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800b6e2:	4a1a      	ldr	r2, [pc, #104]	; (800b74c <tcp_alloc+0x118>)
 800b6e4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b6e8:	4a19      	ldr	r2, [pc, #100]	; (800b750 <tcp_alloc+0x11c>)
 800b6ea:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800b6f2:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800b6f4:	68c6      	ldr	r6, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800b6f6:	0719      	lsls	r1, r3, #28
 800b6f8:	d504      	bpl.n	800b704 <tcp_alloc+0xd0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b6fa:	f023 0308 	bic.w	r3, r3, #8
 800b6fe:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800b700:	f7ff f888 	bl	800a814 <tcp_close_shutdown_fin>
{
 800b704:	4630      	mov	r0, r6
 800b706:	e79e      	b.n	800b646 <tcp_alloc+0x12>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b708:	6a1a      	ldr	r2, [r3, #32]
 800b70a:	1ab2      	subs	r2, r6, r2
 800b70c:	428a      	cmp	r2, r1
 800b70e:	bf24      	itt	cs
 800b710:	4618      	movcs	r0, r3
 800b712:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	e79b      	b.n	800b650 <tcp_alloc+0x1c>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b718:	217f      	movs	r1, #127	; 0x7f
 800b71a:	e7b7      	b.n	800b68c <tcp_alloc+0x58>
    if ((pcb->prio < mprio) ||
 800b71c:	f892 c015 	ldrb.w	ip, [r2, #21]
 800b720:	458c      	cmp	ip, r1
 800b722:	d304      	bcc.n	800b72e <tcp_alloc+0xfa>
 800b724:	d107      	bne.n	800b736 <tcp_alloc+0x102>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b726:	6a16      	ldr	r6, [r2, #32]
 800b728:	1bbe      	subs	r6, r7, r6
 800b72a:	4286      	cmp	r6, r0
 800b72c:	d303      	bcc.n	800b736 <tcp_alloc+0x102>
      inactivity = tcp_ticks - pcb->tmr;
 800b72e:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800b730:	4661      	mov	r1, ip
      inactivity = tcp_ticks - pcb->tmr;
 800b732:	4613      	mov	r3, r2
 800b734:	1a38      	subs	r0, r7, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b736:	68d2      	ldr	r2, [r2, #12]
 800b738:	e7ad      	b.n	800b696 <tcp_alloc+0x62>
 800b73a:	bf00      	nop
 800b73c:	2000d000 	.word	0x2000d000
 800b740:	0b680b68 	.word	0x0b680b68
 800b744:	0218ffff 	.word	0x0218ffff
 800b748:	16d00001 	.word	0x16d00001
 800b74c:	0800b2c1 	.word	0x0800b2c1
 800b750:	006ddd00 	.word	0x006ddd00

0800b754 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b754:	2040      	movs	r0, #64	; 0x40
 800b756:	f7ff bf6d 	b.w	800b634 <tcp_alloc>
	...

0800b75c <tcp_next_iss>:
{
 800b75c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b75e:	b930      	cbnz	r0, 800b76e <tcp_next_iss+0x12>
 800b760:	4b06      	ldr	r3, [pc, #24]	; (800b77c <tcp_next_iss+0x20>)
 800b762:	f640 02af 	movw	r2, #2223	; 0x8af
 800b766:	4906      	ldr	r1, [pc, #24]	; (800b780 <tcp_next_iss+0x24>)
 800b768:	4806      	ldr	r0, [pc, #24]	; (800b784 <tcp_next_iss+0x28>)
 800b76a:	f003 fbb3 	bl	800eed4 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800b76e:	4b06      	ldr	r3, [pc, #24]	; (800b788 <tcp_next_iss+0x2c>)
 800b770:	4a06      	ldr	r2, [pc, #24]	; (800b78c <tcp_next_iss+0x30>)
 800b772:	6858      	ldr	r0, [r3, #4]
 800b774:	68d2      	ldr	r2, [r2, #12]
 800b776:	4410      	add	r0, r2
 800b778:	6058      	str	r0, [r3, #4]
}
 800b77a:	bd08      	pop	{r3, pc}
 800b77c:	0801c5a3 	.word	0x0801c5a3
 800b780:	0801cb9d 	.word	0x0801cb9d
 800b784:	0801a5dc 	.word	0x0801a5dc
 800b788:	20000020 	.word	0x20000020
 800b78c:	2000d000 	.word	0x2000d000

0800b790 <tcp_eff_send_mss_netif>:
{
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4604      	mov	r4, r0
 800b794:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b796:	b932      	cbnz	r2, 800b7a6 <tcp_eff_send_mss_netif+0x16>
 800b798:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <tcp_eff_send_mss_netif+0x30>)
 800b79a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b79e:	4909      	ldr	r1, [pc, #36]	; (800b7c4 <tcp_eff_send_mss_netif+0x34>)
 800b7a0:	4809      	ldr	r0, [pc, #36]	; (800b7c8 <tcp_eff_send_mss_netif+0x38>)
 800b7a2:	f003 fb97 	bl	800eed4 <iprintf>
    if (outif == NULL) {
 800b7a6:	b14d      	cbz	r5, 800b7bc <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800b7a8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800b7aa:	b13b      	cbz	r3, 800b7bc <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b7ac:	2b28      	cmp	r3, #40	; 0x28
 800b7ae:	bf8a      	itet	hi
 800b7b0:	3b28      	subhi	r3, #40	; 0x28
 800b7b2:	2300      	movls	r3, #0
 800b7b4:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b7b6:	429c      	cmp	r4, r3
 800b7b8:	bf28      	it	cs
 800b7ba:	461c      	movcs	r4, r3
}
 800b7bc:	4620      	mov	r0, r4
 800b7be:	bd38      	pop	{r3, r4, r5, pc}
 800b7c0:	0801c5a3 	.word	0x0801c5a3
 800b7c4:	0801cbb7 	.word	0x0801cbb7
 800b7c8:	0801a5dc 	.word	0x0801a5dc

0800b7cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	b170      	cbz	r0, 800b7f2 <tcp_netif_ip_addr_changed+0x26>
 800b7d4:	6803      	ldr	r3, [r0, #0]
 800b7d6:	b163      	cbz	r3, 800b7f2 <tcp_netif_ip_addr_changed+0x26>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b7d8:	4e0a      	ldr	r6, [pc, #40]	; (800b804 <tcp_netif_ip_addr_changed+0x38>)
 800b7da:	68b1      	ldr	r1, [r6, #8]
 800b7dc:	f7ff fef0 	bl	800b5c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b7e0:	6831      	ldr	r1, [r6, #0]
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f7ff feec 	bl	800b5c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b7e8:	b11d      	cbz	r5, 800b7f2 <tcp_netif_ip_addr_changed+0x26>
 800b7ea:	682b      	ldr	r3, [r5, #0]
 800b7ec:	b10b      	cbz	r3, 800b7f2 <tcp_netif_ip_addr_changed+0x26>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7ee:	6873      	ldr	r3, [r6, #4]
 800b7f0:	b903      	cbnz	r3, 800b7f4 <tcp_netif_ip_addr_changed+0x28>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b7f4:	6819      	ldr	r1, [r3, #0]
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b7fa:	bf04      	itt	eq
 800b7fc:	682a      	ldreq	r2, [r5, #0]
 800b7fe:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	e7f5      	b.n	800b7f0 <tcp_netif_ip_addr_changed+0x24>
 800b804:	2000d000 	.word	0x2000d000

0800b808 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800b808:	4a08      	ldr	r2, [pc, #32]	; (800b82c <tcp_get_next_optbyte+0x24>)
 800b80a:	8813      	ldrh	r3, [r2, #0]
 800b80c:	1c59      	adds	r1, r3, #1
 800b80e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b810:	6851      	ldr	r1, [r2, #4]
 800b812:	b111      	cbz	r1, 800b81a <tcp_get_next_optbyte+0x12>
 800b814:	8910      	ldrh	r0, [r2, #8]
 800b816:	4283      	cmp	r3, r0
 800b818:	d203      	bcs.n	800b822 <tcp_get_next_optbyte+0x1a>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800b81a:	68d2      	ldr	r2, [r2, #12]
 800b81c:	4413      	add	r3, r2
 800b81e:	7d18      	ldrb	r0, [r3, #20]
 800b820:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b822:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800b824:	b2db      	uxtb	r3, r3
 800b826:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	2000d01c 	.word	0x2000d01c

0800b830 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b834:	4606      	mov	r6, r0
 800b836:	b930      	cbnz	r0, 800b846 <tcp_parseopt+0x16>
 800b838:	4b1e      	ldr	r3, [pc, #120]	; (800b8b4 <tcp_parseopt+0x84>)
 800b83a:	f240 727d 	movw	r2, #1917	; 0x77d
 800b83e:	491e      	ldr	r1, [pc, #120]	; (800b8b8 <tcp_parseopt+0x88>)
 800b840:	481e      	ldr	r0, [pc, #120]	; (800b8bc <tcp_parseopt+0x8c>)
 800b842:	f003 fb47 	bl	800eed4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b846:	4d1e      	ldr	r5, [pc, #120]	; (800b8c0 <tcp_parseopt+0x90>)
 800b848:	8a2f      	ldrh	r7, [r5, #16]
 800b84a:	b17f      	cbz	r7, 800b86c <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b84c:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b84e:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800b852:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b856:	802b      	strh	r3, [r5, #0]
 800b858:	882b      	ldrh	r3, [r5, #0]
 800b85a:	42bb      	cmp	r3, r7
 800b85c:	d206      	bcs.n	800b86c <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800b85e:	f7ff ffd3 	bl	800b808 <tcp_get_next_optbyte>
      switch (opt) {
 800b862:	2801      	cmp	r0, #1
 800b864:	d0f8      	beq.n	800b858 <tcp_parseopt+0x28>
 800b866:	2802      	cmp	r0, #2
 800b868:	d002      	beq.n	800b870 <tcp_parseopt+0x40>
 800b86a:	b9c8      	cbnz	r0, 800b8a0 <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800b86c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b870:	f7ff ffca 	bl	800b808 <tcp_get_next_optbyte>
 800b874:	2804      	cmp	r0, #4
 800b876:	d1f9      	bne.n	800b86c <tcp_parseopt+0x3c>
 800b878:	882b      	ldrh	r3, [r5, #0]
 800b87a:	3301      	adds	r3, #1
 800b87c:	42bb      	cmp	r3, r7
 800b87e:	daf5      	bge.n	800b86c <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b880:	f7ff ffc2 	bl	800b808 <tcp_get_next_optbyte>
 800b884:	0200      	lsls	r0, r0, #8
 800b886:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800b888:	f7ff ffbe 	bl	800b808 <tcp_get_next_optbyte>
 800b88c:	ea44 0300 	orr.w	r3, r4, r0
 800b890:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b892:	1e5a      	subs	r2, r3, #1
 800b894:	b292      	uxth	r2, r2
 800b896:	4542      	cmp	r2, r8
 800b898:	bf88      	it	hi
 800b89a:	464b      	movhi	r3, r9
 800b89c:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800b89e:	e7db      	b.n	800b858 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800b8a0:	f7ff ffb2 	bl	800b808 <tcp_get_next_optbyte>
          if (data < 2) {
 800b8a4:	2801      	cmp	r0, #1
 800b8a6:	d9e1      	bls.n	800b86c <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800b8a8:	882b      	ldrh	r3, [r5, #0]
 800b8aa:	3b02      	subs	r3, #2
 800b8ac:	4418      	add	r0, r3
 800b8ae:	8028      	strh	r0, [r5, #0]
 800b8b0:	e7d2      	b.n	800b858 <tcp_parseopt+0x28>
 800b8b2:	bf00      	nop
 800b8b4:	0801cc9d 	.word	0x0801cc9d
 800b8b8:	0801ccfe 	.word	0x0801ccfe
 800b8bc:	0801a5dc 	.word	0x0801a5dc
 800b8c0:	2000d01c 	.word	0x2000d01c

0800b8c4 <tcp_input_delayed_close>:
{
 800b8c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	b930      	cbnz	r0, 800b8d8 <tcp_input_delayed_close+0x14>
 800b8ca:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <tcp_input_delayed_close+0x44>)
 800b8cc:	f240 225a 	movw	r2, #602	; 0x25a
 800b8d0:	490e      	ldr	r1, [pc, #56]	; (800b90c <tcp_input_delayed_close+0x48>)
 800b8d2:	480f      	ldr	r0, [pc, #60]	; (800b910 <tcp_input_delayed_close+0x4c>)
 800b8d4:	f003 fafe 	bl	800eed4 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800b8d8:	4b0e      	ldr	r3, [pc, #56]	; (800b914 <tcp_input_delayed_close+0x50>)
 800b8da:	7c98      	ldrb	r0, [r3, #18]
 800b8dc:	f010 0010 	ands.w	r0, r0, #16
 800b8e0:	d011      	beq.n	800b906 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b8e2:	8b63      	ldrh	r3, [r4, #26]
 800b8e4:	06db      	lsls	r3, r3, #27
 800b8e6:	d406      	bmi.n	800b8f6 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b8e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b8ec:	b11b      	cbz	r3, 800b8f6 <tcp_input_delayed_close+0x32>
 800b8ee:	f06f 010e 	mvn.w	r1, #14
 800b8f2:	6920      	ldr	r0, [r4, #16]
 800b8f4:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4807      	ldr	r0, [pc, #28]	; (800b918 <tcp_input_delayed_close+0x54>)
 800b8fa:	f7ff fbb9 	bl	800b070 <tcp_pcb_remove>
    tcp_free(pcb);
 800b8fe:	4620      	mov	r0, r4
 800b900:	f7fe ffc4 	bl	800a88c <tcp_free>
 800b904:	2001      	movs	r0, #1
}
 800b906:	bd10      	pop	{r4, pc}
 800b908:	0801cc9d 	.word	0x0801cc9d
 800b90c:	0801cd18 	.word	0x0801cd18
 800b910:	0801a5dc 	.word	0x0801a5dc
 800b914:	2000d01c 	.word	0x2000d01c
 800b918:	2000d008 	.word	0x2000d008

0800b91c <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b920:	4606      	mov	r6, r0
 800b922:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800b924:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b926:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800b9d8 <tcp_free_acked_segments.constprop.0+0xbc>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b92a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800b9d0 <tcp_free_acked_segments.constprop.0+0xb4>
  while (seg_list != NULL &&
 800b92e:	2c00      	cmp	r4, #0
 800b930:	d03b      	beq.n	800b9aa <tcp_free_acked_segments.constprop.0+0x8e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b932:	68e3      	ldr	r3, [r4, #12]
 800b934:	6858      	ldr	r0, [r3, #4]
 800b936:	f7fd ff68 	bl	800980a <lwip_htonl>
 800b93a:	68e3      	ldr	r3, [r4, #12]
 800b93c:	4682      	mov	sl, r0
 800b93e:	8925      	ldrh	r5, [r4, #8]
 800b940:	8998      	ldrh	r0, [r3, #12]
 800b942:	f7fd ff5f 	bl	8009804 <lwip_htons>
 800b946:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b94a:	f010 0003 	ands.w	r0, r0, #3
 800b94e:	eba5 0303 	sub.w	r3, r5, r3
 800b952:	bf18      	it	ne
 800b954:	2001      	movne	r0, #1
 800b956:	eb03 050a 	add.w	r5, r3, sl
 800b95a:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800b95c:	2d00      	cmp	r5, #0
 800b95e:	dc25      	bgt.n	800b9ac <tcp_free_acked_segments.constprop.0+0x90>
    clen = pbuf_clen(next->p);
 800b960:	e9d4 a000 	ldrd	sl, r0, [r4]
 800b964:	f7fe fde0 	bl	800a528 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b968:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800b96c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b96e:	4283      	cmp	r3, r0
 800b970:	d206      	bcs.n	800b980 <tcp_free_acked_segments.constprop.0+0x64>
 800b972:	464b      	mov	r3, r9
 800b974:	f240 4257 	movw	r2, #1111	; 0x457
 800b978:	4913      	ldr	r1, [pc, #76]	; (800b9c8 <tcp_free_acked_segments.constprop.0+0xac>)
 800b97a:	4814      	ldr	r0, [pc, #80]	; (800b9cc <tcp_free_acked_segments.constprop.0+0xb0>)
 800b97c:	f003 faaa 	bl	800eed4 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b980:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b984:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800b988:	8923      	ldrh	r3, [r4, #8]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b98a:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800b98c:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b98e:	4413      	add	r3, r2
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b990:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b994:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800b998:	f7ff f8be 	bl	800ab18 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800b99c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800b9a0:	b17b      	cbz	r3, 800b9c2 <tcp_free_acked_segments.constprop.0+0xa6>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b9a2:	f1ba 0f00 	cmp.w	sl, #0
 800b9a6:	d10c      	bne.n	800b9c2 <tcp_free_acked_segments.constprop.0+0xa6>
 800b9a8:	b11f      	cbz	r7, 800b9b2 <tcp_free_acked_segments.constprop.0+0x96>
    seg_list = seg_list->next;
 800b9aa:	2400      	movs	r4, #0
}
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b9b2:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <tcp_free_acked_segments.constprop.0+0xb4>)
 800b9b4:	f240 4261 	movw	r2, #1121	; 0x461
 800b9b8:	4906      	ldr	r1, [pc, #24]	; (800b9d4 <tcp_free_acked_segments.constprop.0+0xb8>)
 800b9ba:	4804      	ldr	r0, [pc, #16]	; (800b9cc <tcp_free_acked_segments.constprop.0+0xb0>)
 800b9bc:	f003 fa8a 	bl	800eed4 <iprintf>
  while (seg_list != NULL &&
 800b9c0:	e7f3      	b.n	800b9aa <tcp_free_acked_segments.constprop.0+0x8e>
    seg_list = seg_list->next;
 800b9c2:	4654      	mov	r4, sl
 800b9c4:	e7b3      	b.n	800b92e <tcp_free_acked_segments.constprop.0+0x12>
 800b9c6:	bf00      	nop
 800b9c8:	0801cd3d 	.word	0x0801cd3d
 800b9cc:	0801a5dc 	.word	0x0801a5dc
 800b9d0:	0801cc9d 	.word	0x0801cc9d
 800b9d4:	0801cd65 	.word	0x0801cd65
 800b9d8:	2000d01c 	.word	0x2000d01c

0800b9dc <tcp_receive>:
{
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b9de:	4604      	mov	r4, r0
 800b9e0:	b930      	cbnz	r0, 800b9f0 <tcp_receive+0x14>
 800b9e2:	4b35      	ldr	r3, [pc, #212]	; (800bab8 <tcp_receive+0xdc>)
 800b9e4:	f240 427b 	movw	r2, #1147	; 0x47b
 800b9e8:	4934      	ldr	r1, [pc, #208]	; (800babc <tcp_receive+0xe0>)
 800b9ea:	4835      	ldr	r0, [pc, #212]	; (800bac0 <tcp_receive+0xe4>)
 800b9ec:	f003 fa72 	bl	800eed4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b9f0:	7d23      	ldrb	r3, [r4, #20]
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d806      	bhi.n	800ba04 <tcp_receive+0x28>
 800b9f6:	4b30      	ldr	r3, [pc, #192]	; (800bab8 <tcp_receive+0xdc>)
 800b9f8:	f240 427c 	movw	r2, #1148	; 0x47c
 800b9fc:	4931      	ldr	r1, [pc, #196]	; (800bac4 <tcp_receive+0xe8>)
 800b9fe:	4830      	ldr	r0, [pc, #192]	; (800bac0 <tcp_receive+0xe4>)
 800ba00:	f003 fa68 	bl	800eed4 <iprintf>
  if (flags & TCP_ACK) {
 800ba04:	4d30      	ldr	r5, [pc, #192]	; (800bac8 <tcp_receive+0xec>)
 800ba06:	7f2b      	ldrb	r3, [r5, #28]
 800ba08:	06de      	lsls	r6, r3, #27
 800ba0a:	f140 8088 	bpl.w	800bb1e <tcp_receive+0x142>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ba0e:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ba10:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ba14:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ba16:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800ba1a:	1af7      	subs	r7, r6, r3
 800ba1c:	2f00      	cmp	r7, #0
 800ba1e:	db0a      	blt.n	800ba36 <tcp_receive+0x5a>
 800ba20:	429e      	cmp	r6, r3
 800ba22:	d102      	bne.n	800ba2a <tcp_receive+0x4e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ba24:	1a86      	subs	r6, r0, r2
 800ba26:	2e00      	cmp	r6, #0
 800ba28:	db05      	blt.n	800ba36 <tcp_receive+0x5a>
 800ba2a:	4290      	cmp	r0, r2
 800ba2c:	d110      	bne.n	800ba50 <tcp_receive+0x74>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ba2e:	68ee      	ldr	r6, [r5, #12]
 800ba30:	89f6      	ldrh	r6, [r6, #14]
 800ba32:	428e      	cmp	r6, r1
 800ba34:	d90c      	bls.n	800ba50 <tcp_receive+0x74>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ba36:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ba38:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ba3c:	89f6      	ldrh	r6, [r6, #14]
 800ba3e:	b2b7      	uxth	r7, r6
 800ba40:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ba44:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800ba46:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ba4a:	bf38      	it	cc
 800ba4c:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ba50:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800ba52:	1b93      	subs	r3, r2, r6
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f300 813a 	bgt.w	800bcce <tcp_receive+0x2f2>
      if (tcplen == 0) {
 800ba5a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 8132 	bne.w	800bcc6 <tcp_receive+0x2ea>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ba62:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ba66:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ba68:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800ba6a:	443b      	add	r3, r7
 800ba6c:	428b      	cmp	r3, r1
 800ba6e:	f040 812a 	bne.w	800bcc6 <tcp_receive+0x2ea>
          if (pcb->rtime >= 0) {
 800ba72:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f2c0 8125 	blt.w	800bcc6 <tcp_receive+0x2ea>
            if (pcb->lastack == ackno) {
 800ba7c:	4296      	cmp	r6, r2
 800ba7e:	f040 8122 	bne.w	800bcc6 <tcp_receive+0x2ea>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ba82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ba86:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800ba88:	bf1c      	itt	ne
 800ba8a:	3301      	addne	r3, #1
 800ba8c:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800ba90:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d919      	bls.n	800bacc <tcp_receive+0xf0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ba98:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800ba9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800baa0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800baa2:	4413      	add	r3, r2
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	429a      	cmp	r2, r3
 800baa8:	bf88      	it	hi
 800baaa:	460b      	movhi	r3, r1
 800baac:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800bab0:	4620      	mov	r0, r4
 800bab2:	f001 fcf9 	bl	800d4a8 <tcp_rexmit_fast>
      if (!found_dupack) {
 800bab6:	e00a      	b.n	800bace <tcp_receive+0xf2>
 800bab8:	0801cc9d 	.word	0x0801cc9d
 800babc:	0801cd85 	.word	0x0801cd85
 800bac0:	0801a5dc 	.word	0x0801a5dc
 800bac4:	0801cd9e 	.word	0x0801cd9e
 800bac8:	2000d01c 	.word	0x2000d01c
              if (pcb->dupacks >= 3) {
 800bacc:	d0f0      	beq.n	800bab0 <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bad0:	b329      	cbz	r1, 800bb1e <tcp_receive+0x142>
 800bad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bad4:	69aa      	ldr	r2, [r5, #24]
 800bad6:	1a9b      	subs	r3, r3, r2
 800bad8:	2b00      	cmp	r3, #0
 800bada:	da20      	bge.n	800bb1e <tcp_receive+0x142>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800badc:	4b9b      	ldr	r3, [pc, #620]	; (800bd4c <tcp_receive+0x370>)
 800bade:	b289      	uxth	r1, r1
 800bae0:	881f      	ldrh	r7, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800bae2:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bae6:	1a7a      	subs	r2, r7, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800bae8:	f3c3 00cf 	ubfx	r0, r3, #3, #16
 800baec:	1a12      	subs	r2, r2, r0
 800baee:	b216      	sxth	r6, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800baf0:	fa13 f282 	uxtah	r2, r3, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800baf4:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      if (m < 0) {
 800baf8:	2e00      	cmp	r6, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800bafa:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
 800bafc:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
        m = (s16_t) - m;
 800bb00:	bfb8      	it	lt
 800bb02:	1bc9      	sublt	r1, r1, r7
      pcb->sa = (s16_t)(pcb->sa + m);
 800bb04:	87a2      	strh	r2, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800bb06:	bfbc      	itt	lt
 800bb08:	1809      	addlt	r1, r1, r0
 800bb0a:	b20e      	sxthlt	r6, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800bb0c:	4433      	add	r3, r6
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bb12:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800bb16:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bb1e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bb20:	6a2b      	ldr	r3, [r5, #32]
 800bb22:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bb24:	2800      	cmp	r0, #0
 800bb26:	f000 8184 	beq.w	800be32 <tcp_receive+0x456>
 800bb2a:	7d21      	ldrb	r1, [r4, #20]
 800bb2c:	2906      	cmp	r1, #6
 800bb2e:	f200 8180 	bhi.w	800be32 <tcp_receive+0x456>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bb32:	1ad7      	subs	r7, r2, r3
 800bb34:	2f01      	cmp	r7, #1
 800bb36:	f100 816b 	bmi.w	800be10 <tcp_receive+0x434>
 800bb3a:	f1c3 0101 	rsb	r1, r3, #1
 800bb3e:	1a09      	subs	r1, r1, r0
 800bb40:	4411      	add	r1, r2
 800bb42:	2900      	cmp	r1, #0
 800bb44:	f300 8164 	bgt.w	800be10 <tcp_receive+0x434>
      struct pbuf *p = inseg.p;
 800bb48:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bb4a:	b936      	cbnz	r6, 800bb5a <tcp_receive+0x17e>
 800bb4c:	4b80      	ldr	r3, [pc, #512]	; (800bd50 <tcp_receive+0x374>)
 800bb4e:	f240 5294 	movw	r2, #1428	; 0x594
 800bb52:	4980      	ldr	r1, [pc, #512]	; (800bd54 <tcp_receive+0x378>)
 800bb54:	4880      	ldr	r0, [pc, #512]	; (800bd58 <tcp_receive+0x37c>)
 800bb56:	f003 f9bd 	bl	800eed4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bb5a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800bb5e:	429f      	cmp	r7, r3
 800bb60:	d906      	bls.n	800bb70 <tcp_receive+0x194>
 800bb62:	4b7b      	ldr	r3, [pc, #492]	; (800bd50 <tcp_receive+0x374>)
 800bb64:	f240 5295 	movw	r2, #1429	; 0x595
 800bb68:	497c      	ldr	r1, [pc, #496]	; (800bd5c <tcp_receive+0x380>)
 800bb6a:	487b      	ldr	r0, [pc, #492]	; (800bd58 <tcp_receive+0x37c>)
 800bb6c:	f003 f9b2 	bl	800eed4 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bb70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800bb72:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	42bb      	cmp	r3, r7
 800bb78:	d206      	bcs.n	800bb88 <tcp_receive+0x1ac>
 800bb7a:	4b75      	ldr	r3, [pc, #468]	; (800bd50 <tcp_receive+0x374>)
 800bb7c:	f240 5297 	movw	r2, #1431	; 0x597
 800bb80:	4977      	ldr	r1, [pc, #476]	; (800bd60 <tcp_receive+0x384>)
 800bb82:	4875      	ldr	r0, [pc, #468]	; (800bd58 <tcp_receive+0x37c>)
 800bb84:	f003 f9a6 	bl	800eed4 <iprintf>
      inseg.len -= off;
 800bb88:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800bb8a:	2100      	movs	r1, #0
      inseg.len -= off;
 800bb8c:	1bdb      	subs	r3, r3, r7
 800bb8e:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bb90:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb92:	891b      	ldrh	r3, [r3, #8]
 800bb94:	1bdb      	subs	r3, r3, r7
 800bb96:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800bb98:	8972      	ldrh	r2, [r6, #10]
 800bb9a:	42ba      	cmp	r2, r7
 800bb9c:	f0c0 8132 	bcc.w	800be04 <tcp_receive+0x428>
      pbuf_remove_header(p, off);
 800bba0:	4639      	mov	r1, r7
 800bba2:	4630      	mov	r0, r6
 800bba4:	f7fe fb50 	bl	800a248 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbaa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800bbac:	622b      	str	r3, [r5, #32]
 800bbae:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bbb0:	6a29      	ldr	r1, [r5, #32]
 800bbb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bbb4:	1a8b      	subs	r3, r1, r2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f2c0 8136 	blt.w	800be28 <tcp_receive+0x44c>
 800bbbc:	1c4b      	adds	r3, r1, #1
 800bbbe:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800bbc0:	1a9b      	subs	r3, r3, r2
 800bbc2:	1a1b      	subs	r3, r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f300 812f 	bgt.w	800be28 <tcp_receive+0x44c>
      if (pcb->rcv_nxt == seqno) {
 800bbca:	4291      	cmp	r1, r2
 800bbcc:	f040 812c 	bne.w	800be28 <tcp_receive+0x44c>
        tcplen = TCP_TCPLEN(&inseg);
 800bbd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bbd2:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800bbd4:	8998      	ldrh	r0, [r3, #12]
 800bbd6:	f7fd fe15 	bl	8009804 <lwip_htons>
 800bbda:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800bbde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800bbe0:	bf18      	it	ne
 800bbe2:	2001      	movne	r0, #1
 800bbe4:	4430      	add	r0, r6
 800bbe6:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800bbe8:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800bbea:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800bbec:	d23d      	bcs.n	800bc6a <tcp_receive+0x28e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bbee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bbf0:	8998      	ldrh	r0, [r3, #12]
 800bbf2:	f7fd fe07 	bl	8009804 <lwip_htons>
 800bbf6:	07c6      	lsls	r6, r0, #31
 800bbf8:	d50d      	bpl.n	800bc16 <tcp_receive+0x23a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bbfa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bbfc:	899e      	ldrh	r6, [r3, #12]
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800bc04:	f7fd fdfe 	bl	8009804 <lwip_htons>
 800bc08:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800bc0c:	f7fd fdfa 	bl	8009804 <lwip_htons>
 800bc10:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bc12:	4306      	orrs	r6, r0
 800bc14:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bc16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bc18:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bc1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bc1c:	8998      	ldrh	r0, [r3, #12]
 800bc1e:	f7fd fdf1 	bl	8009804 <lwip_htons>
 800bc22:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800bc24:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800bc26:	bf42      	ittt	mi
 800bc28:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800bc2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800bc2e:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800bc30:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800bc32:	f7fe fc21 	bl	800a478 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bc36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bc38:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800bc3a:	8998      	ldrh	r0, [r3, #12]
 800bc3c:	f7fd fde2 	bl	8009804 <lwip_htons>
 800bc40:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bc44:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800bc46:	bf18      	it	ne
 800bc48:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bc4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800bc4c:	4430      	add	r0, r6
 800bc4e:	b280      	uxth	r0, r0
 800bc50:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bc52:	4418      	add	r0, r3
 800bc54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bc56:	4413      	add	r3, r2
 800bc58:	4298      	cmp	r0, r3
 800bc5a:	d006      	beq.n	800bc6a <tcp_receive+0x28e>
 800bc5c:	4b3c      	ldr	r3, [pc, #240]	; (800bd50 <tcp_receive+0x374>)
 800bc5e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bc62:	4940      	ldr	r1, [pc, #256]	; (800bd64 <tcp_receive+0x388>)
 800bc64:	483c      	ldr	r0, [pc, #240]	; (800bd58 <tcp_receive+0x37c>)
 800bc66:	f003 f935 	bl	800eed4 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800bc6a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800bc6c:	6a2b      	ldr	r3, [r5, #32]
 800bc6e:	4413      	add	r3, r2
 800bc70:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bc72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d206      	bcs.n	800bc86 <tcp_receive+0x2aa>
 800bc78:	4b35      	ldr	r3, [pc, #212]	; (800bd50 <tcp_receive+0x374>)
 800bc7a:	f240 6207 	movw	r2, #1543	; 0x607
 800bc7e:	493a      	ldr	r1, [pc, #232]	; (800bd68 <tcp_receive+0x38c>)
 800bc80:	4835      	ldr	r0, [pc, #212]	; (800bd58 <tcp_receive+0x37c>)
 800bc82:	f003 f927 	bl	800eed4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bc86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800bc88:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800bc8a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800bc8c:	1a9b      	subs	r3, r3, r2
 800bc8e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800bc90:	f7fe fece 	bl	800aa30 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800bc94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bc96:	891a      	ldrh	r2, [r3, #8]
 800bc98:	b112      	cbz	r2, 800bca0 <tcp_receive+0x2c4>
          recv_data = inseg.p;
 800bc9a:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bca0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bca2:	8998      	ldrh	r0, [r3, #12]
 800bca4:	f7fd fdae 	bl	8009804 <lwip_htons>
 800bca8:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800bcaa:	bf42      	ittt	mi
 800bcac:	7cab      	ldrbmi	r3, [r5, #18]
 800bcae:	f043 0320 	orrmi.w	r3, r3, #32
 800bcb2:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800bcb4:	8b63      	ldrh	r3, [r4, #26]
 800bcb6:	07da      	lsls	r2, r3, #31
 800bcb8:	f140 80b2 	bpl.w	800be20 <tcp_receive+0x444>
 800bcbc:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800bcc0:	f043 0302 	orr.w	r3, r3, #2
 800bcc4:	e0ae      	b.n	800be24 <tcp_receive+0x448>
        pcb->dupacks = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bccc:	e6ff      	b.n	800bace <tcp_receive+0xf2>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bcce:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bcd0:	1a51      	subs	r1, r2, r1
 800bcd2:	2900      	cmp	r1, #0
 800bcd4:	f300 8092 	bgt.w	800bdfc <tcp_receive+0x420>
      if (pcb->flags & TF_INFR) {
 800bcd8:	8b61      	ldrh	r1, [r4, #26]
 800bcda:	0748      	lsls	r0, r1, #29
 800bcdc:	d509      	bpl.n	800bcf2 <tcp_receive+0x316>
        tcp_clear_flags(pcb, TF_INFR);
 800bcde:	f021 0104 	bic.w	r1, r1, #4
 800bce2:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800bce4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800bce8:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bcec:	2100      	movs	r1, #0
 800bcee:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bcf2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800bcf6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800bcf8:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bcfa:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800bcfe:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bd00:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800bd04:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800bd06:	f04f 0100 	mov.w	r1, #0
 800bd0a:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800bd0e:	d937      	bls.n	800bd80 <tcp_receive+0x3a4>
        if (pcb->cwnd < pcb->ssthresh) {
 800bd10:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bd14:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800bd16:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800bd1a:	4291      	cmp	r1, r2
 800bd1c:	d926      	bls.n	800bd6c <tcp_receive+0x390>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bd1e:	8b61      	ldrh	r1, [r4, #26]
 800bd20:	f411 6f00 	tst.w	r1, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bd24:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bd26:	bf14      	ite	ne
 800bd28:	2001      	movne	r0, #1
 800bd2a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bd2c:	fb11 f100 	smulbb	r1, r1, r0
 800bd30:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800bd32:	4299      	cmp	r1, r3
 800bd34:	bf94      	ite	ls
 800bd36:	1850      	addls	r0, r2, r1
 800bd38:	18d0      	addhi	r0, r2, r3
 800bd3a:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d901      	bls.n	800bd44 <tcp_receive+0x368>
          TCP_WND_INC(pcb->cwnd, increase);
 800bd40:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bd44:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800bd48:	e01a      	b.n	800bd80 <tcp_receive+0x3a4>
 800bd4a:	bf00      	nop
 800bd4c:	2000d00c 	.word	0x2000d00c
 800bd50:	0801cc9d 	.word	0x0801cc9d
 800bd54:	0801cdb7 	.word	0x0801cdb7
 800bd58:	0801a5dc 	.word	0x0801a5dc
 800bd5c:	0801cdc7 	.word	0x0801cdc7
 800bd60:	0801cdd6 	.word	0x0801cdd6
 800bd64:	0801cde6 	.word	0x0801cde6
 800bd68:	0801ce1d 	.word	0x0801ce1d
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bd6c:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800bd70:	440b      	add	r3, r1
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	4299      	cmp	r1, r3
 800bd76:	d82b      	bhi.n	800bdd0 <tcp_receive+0x3f4>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d92b      	bls.n	800bdd4 <tcp_receive+0x3f8>
 800bd7c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bd80:	4620      	mov	r0, r4
 800bd82:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800bd86:	f7ff fdc9 	bl	800b91c <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bd8a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7ff fdc3 	bl	800b91c <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800bd96:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bd98:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800bd9a:	fab2 f382 	clz	r3, r2
 800bd9e:	095b      	lsrs	r3, r3, #5
 800bda0:	425b      	negs	r3, r3
 800bda2:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800bda8:	b908      	cbnz	r0, 800bdae <tcp_receive+0x3d2>
        pcb->unsent_oversize = 0;
 800bdaa:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bdae:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800bdb2:	8aa9      	ldrh	r1, [r5, #20]
 800bdb4:	440b      	add	r3, r1
 800bdb6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800bdba:	8b63      	ldrh	r3, [r4, #26]
 800bdbc:	051f      	lsls	r7, r3, #20
 800bdbe:	f57f ae86 	bpl.w	800bace <tcp_receive+0xf2>
        if (pcb->unacked == NULL) {
 800bdc2:	b9c2      	cbnz	r2, 800bdf6 <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 800bdc4:	b968      	cbnz	r0, 800bde2 <tcp_receive+0x406>
          tcp_clear_flags(pcb, TF_RTO);
 800bdc6:	8b63      	ldrh	r3, [r4, #26]
 800bdc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdcc:	8363      	strh	r3, [r4, #26]
 800bdce:	e67e      	b.n	800bace <tcp_receive+0xf2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bdd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bdd4:	1a9b      	subs	r3, r3, r2
 800bdd6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bdda:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bddc:	4413      	add	r3, r2
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	e7ac      	b.n	800bd3c <tcp_receive+0x360>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bde2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800bde4:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bde6:	6858      	ldr	r0, [r3, #4]
 800bde8:	f7fd fd0f 	bl	800980a <lwip_htonl>
 800bdec:	1a30      	subs	r0, r6, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f73f ae6d 	bgt.w	800bace <tcp_receive+0xf2>
 800bdf4:	e7e7      	b.n	800bdc6 <tcp_receive+0x3ea>
 800bdf6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800bdf8:	68d3      	ldr	r3, [r2, #12]
 800bdfa:	e7f4      	b.n	800bde6 <tcp_receive+0x40a>
      tcp_send_empty_ack(pcb);
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f001 fbcd 	bl	800d59c <tcp_send_empty_ack>
 800be02:	e664      	b.n	800bace <tcp_receive+0xf2>
        off -= p->len;
 800be04:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800be06:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800be08:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800be0a:	b2bf      	uxth	r7, r7
        p = p->next;
 800be0c:	6836      	ldr	r6, [r6, #0]
 800be0e:	e6c3      	b.n	800bb98 <tcp_receive+0x1bc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800be10:	1a9b      	subs	r3, r3, r2
 800be12:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800be14:	bfbe      	ittt	lt
 800be16:	8b63      	ldrhlt	r3, [r4, #26]
 800be18:	f043 0302 	orrlt.w	r3, r3, #2
 800be1c:	8363      	strhlt	r3, [r4, #26]
 800be1e:	e6c7      	b.n	800bbb0 <tcp_receive+0x1d4>
        tcp_ack(pcb);
 800be20:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800be24:	8363      	strh	r3, [r4, #26]
}
 800be26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800be28:	4620      	mov	r0, r4
}
 800be2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800be2e:	f001 bbb5 	b.w	800d59c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800be32:	1a99      	subs	r1, r3, r2
 800be34:	2900      	cmp	r1, #0
 800be36:	db05      	blt.n	800be44 <tcp_receive+0x468>
 800be38:	3301      	adds	r3, #1
 800be3a:	1a9b      	subs	r3, r3, r2
 800be3c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800be3e:	1a9b      	subs	r3, r3, r2
 800be40:	2b00      	cmp	r3, #0
 800be42:	ddf0      	ble.n	800be26 <tcp_receive+0x44a>
      tcp_ack_now(pcb);
 800be44:	8b63      	ldrh	r3, [r4, #26]
 800be46:	e73b      	b.n	800bcc0 <tcp_receive+0x2e4>

0800be48 <tcp_input>:
{
 800be48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800be4c:	4606      	mov	r6, r0
{
 800be4e:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800be50:	b928      	cbnz	r0, 800be5e <tcp_input+0x16>
 800be52:	4ba1      	ldr	r3, [pc, #644]	; (800c0d8 <tcp_input+0x290>)
 800be54:	2283      	movs	r2, #131	; 0x83
 800be56:	49a1      	ldr	r1, [pc, #644]	; (800c0dc <tcp_input+0x294>)
 800be58:	48a1      	ldr	r0, [pc, #644]	; (800c0e0 <tcp_input+0x298>)
 800be5a:	f003 f83b 	bl	800eed4 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800be5e:	6873      	ldr	r3, [r6, #4]
 800be60:	4da0      	ldr	r5, [pc, #640]	; (800c0e4 <tcp_input+0x29c>)
 800be62:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800be64:	8973      	ldrh	r3, [r6, #10]
 800be66:	2b13      	cmp	r3, #19
 800be68:	f240 80a6 	bls.w	800bfb8 <tcp_input+0x170>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800be6c:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800c108 <tcp_input+0x2c0>
 800be70:	f8d8 1000 	ldr.w	r1, [r8]
 800be74:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800be78:	f7fd f8cf 	bl	800901a <ip4_addr_isbroadcast_u32>
 800be7c:	4604      	mov	r4, r0
 800be7e:	2800      	cmp	r0, #0
 800be80:	f040 809a 	bne.w	800bfb8 <tcp_input+0x170>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800be84:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800be88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800be8c:	2be0      	cmp	r3, #224	; 0xe0
 800be8e:	f000 8093 	beq.w	800bfb8 <tcp_input+0x170>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800be92:	68eb      	ldr	r3, [r5, #12]
 800be94:	8998      	ldrh	r0, [r3, #12]
 800be96:	f7fd fcb5 	bl	8009804 <lwip_htons>
 800be9a:	0a81      	lsrs	r1, r0, #10
 800be9c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bea0:	2913      	cmp	r1, #19
 800bea2:	f240 8089 	bls.w	800bfb8 <tcp_input+0x170>
 800bea6:	8933      	ldrh	r3, [r6, #8]
 800bea8:	b28a      	uxth	r2, r1
 800beaa:	428b      	cmp	r3, r1
 800beac:	f0c0 8084 	bcc.w	800bfb8 <tcp_input+0x170>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800beb0:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800beb4:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800beb6:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800beb8:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800beba:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bebc:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800bebe:	d33d      	bcc.n	800bf3c <tcp_input+0xf4>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bec0:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800bec2:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bec4:	f7fe f9c0 	bl	800a248 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bec8:	68ec      	ldr	r4, [r5, #12]
 800beca:	8820      	ldrh	r0, [r4, #0]
 800becc:	f7fd fc9a 	bl	8009804 <lwip_htons>
 800bed0:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bed2:	68ec      	ldr	r4, [r5, #12]
 800bed4:	8860      	ldrh	r0, [r4, #2]
 800bed6:	f7fd fc95 	bl	8009804 <lwip_htons>
 800beda:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bedc:	68ec      	ldr	r4, [r5, #12]
 800bede:	6860      	ldr	r0, [r4, #4]
 800bee0:	f7fd fc93 	bl	800980a <lwip_htonl>
 800bee4:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bee6:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bee8:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800beea:	68a0      	ldr	r0, [r4, #8]
 800beec:	f7fd fc8d 	bl	800980a <lwip_htonl>
 800bef0:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bef2:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bef4:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bef6:	89e0      	ldrh	r0, [r4, #14]
 800bef8:	f7fd fc84 	bl	8009804 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800befc:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800befe:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800bf00:	8998      	ldrh	r0, [r3, #12]
 800bf02:	f7fd fc7f 	bl	8009804 <lwip_htons>
 800bf06:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800bf0a:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800bf0c:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bf0e:	0783      	lsls	r3, r0, #30
 800bf10:	d14d      	bne.n	800bfae <tcp_input+0x166>
  tcplen = p->tot_len;
 800bf12:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf14:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800c10c <tcp_input+0x2c4>
  prev = NULL;
 800bf18:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bf1a:	4b6f      	ldr	r3, [pc, #444]	; (800c0d8 <tcp_input+0x290>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf1c:	f8d9 4000 	ldr.w	r4, [r9]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bf20:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800c110 <tcp_input+0x2c8>
 800bf24:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800c0e0 <tcp_input+0x298>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf28:	2c00      	cmp	r4, #0
 800bf2a:	d14b      	bne.n	800bfc4 <tcp_input+0x17c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf2c:	4b6e      	ldr	r3, [pc, #440]	; (800c0e8 <tcp_input+0x2a0>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bf2e:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 800c0d8 <tcp_input+0x290>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf32:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bf34:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800c114 <tcp_input+0x2cc>
 800bf38:	4f69      	ldr	r7, [pc, #420]	; (800c0e0 <tcp_input+0x298>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf3a:	e141      	b.n	800c1c0 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bf3c:	6833      	ldr	r3, [r6, #0]
 800bf3e:	b92b      	cbnz	r3, 800bf4c <tcp_input+0x104>
 800bf40:	4b65      	ldr	r3, [pc, #404]	; (800c0d8 <tcp_input+0x290>)
 800bf42:	22c2      	movs	r2, #194	; 0xc2
 800bf44:	4969      	ldr	r1, [pc, #420]	; (800c0ec <tcp_input+0x2a4>)
 800bf46:	4866      	ldr	r0, [pc, #408]	; (800c0e0 <tcp_input+0x298>)
 800bf48:	f002 ffc4 	bl	800eed4 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800bf4c:	2114      	movs	r1, #20
 800bf4e:	4630      	mov	r0, r6
 800bf50:	f7fe f97a 	bl	800a248 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800bf54:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bf56:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800bf5e:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bf60:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800bf64:	f7fe f970 	bl	800a248 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800bf68:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bf6a:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800bf6c:	8943      	ldrh	r3, [r0, #10]
 800bf6e:	42bb      	cmp	r3, r7
 800bf70:	d322      	bcc.n	800bfb8 <tcp_input+0x170>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bf72:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800bf74:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bf76:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800bf78:	f7fe f966 	bl	800a248 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bf7c:	8933      	ldrh	r3, [r6, #8]
 800bf7e:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bf80:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bf82:	eba4 0409 	sub.w	r4, r4, r9
 800bf86:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bf88:	b12b      	cbz	r3, 800bf96 <tcp_input+0x14e>
 800bf8a:	4b53      	ldr	r3, [pc, #332]	; (800c0d8 <tcp_input+0x290>)
 800bf8c:	22df      	movs	r2, #223	; 0xdf
 800bf8e:	4958      	ldr	r1, [pc, #352]	; (800c0f0 <tcp_input+0x2a8>)
 800bf90:	4853      	ldr	r0, [pc, #332]	; (800c0e0 <tcp_input+0x298>)
 800bf92:	f002 ff9f 	bl	800eed4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bf96:	6833      	ldr	r3, [r6, #0]
 800bf98:	8932      	ldrh	r2, [r6, #8]
 800bf9a:	891b      	ldrh	r3, [r3, #8]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d093      	beq.n	800bec8 <tcp_input+0x80>
 800bfa0:	4b4d      	ldr	r3, [pc, #308]	; (800c0d8 <tcp_input+0x290>)
 800bfa2:	22e0      	movs	r2, #224	; 0xe0
 800bfa4:	4953      	ldr	r1, [pc, #332]	; (800c0f4 <tcp_input+0x2ac>)
 800bfa6:	484e      	ldr	r0, [pc, #312]	; (800c0e0 <tcp_input+0x298>)
 800bfa8:	f002 ff94 	bl	800eed4 <iprintf>
 800bfac:	e78c      	b.n	800bec8 <tcp_input+0x80>
    tcplen++;
 800bfae:	1c53      	adds	r3, r2, #1
 800bfb0:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800bfb2:	429a      	cmp	r2, r3
    tcplen++;
 800bfb4:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800bfb6:	d9ad      	bls.n	800bf14 <tcp_input+0xcc>
  pbuf_free(p);
 800bfb8:	4630      	mov	r0, r6
}
 800bfba:	b007      	add	sp, #28
 800bfbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800bfc0:	f7fe b976 	b.w	800a2b0 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bfc4:	7d22      	ldrb	r2, [r4, #20]
 800bfc6:	b92a      	cbnz	r2, 800bfd4 <tcp_input+0x18c>
 800bfc8:	22fb      	movs	r2, #251	; 0xfb
 800bfca:	4659      	mov	r1, fp
 800bfcc:	4650      	mov	r0, sl
 800bfce:	f002 ff81 	bl	800eed4 <iprintf>
 800bfd2:	4b41      	ldr	r3, [pc, #260]	; (800c0d8 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bfd4:	7d22      	ldrb	r2, [r4, #20]
 800bfd6:	2a0a      	cmp	r2, #10
 800bfd8:	d105      	bne.n	800bfe6 <tcp_input+0x19e>
 800bfda:	22fc      	movs	r2, #252	; 0xfc
 800bfdc:	4946      	ldr	r1, [pc, #280]	; (800c0f8 <tcp_input+0x2b0>)
 800bfde:	4650      	mov	r0, sl
 800bfe0:	f002 ff78 	bl	800eed4 <iprintf>
 800bfe4:	4b3c      	ldr	r3, [pc, #240]	; (800c0d8 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bfe6:	7d22      	ldrb	r2, [r4, #20]
 800bfe8:	2a01      	cmp	r2, #1
 800bfea:	d105      	bne.n	800bff8 <tcp_input+0x1b0>
 800bfec:	22fd      	movs	r2, #253	; 0xfd
 800bfee:	4943      	ldr	r1, [pc, #268]	; (800c0fc <tcp_input+0x2b4>)
 800bff0:	4650      	mov	r0, sl
 800bff2:	f002 ff6f 	bl	800eed4 <iprintf>
 800bff6:	4b38      	ldr	r3, [pc, #224]	; (800c0d8 <tcp_input+0x290>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bff8:	7a20      	ldrb	r0, [r4, #8]
 800bffa:	68e1      	ldr	r1, [r4, #12]
 800bffc:	b138      	cbz	r0, 800c00e <tcp_input+0x1c6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bffe:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c002:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c006:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c008:	b2d2      	uxtb	r2, r2
 800c00a:	4290      	cmp	r0, r2
 800c00c:	d161      	bne.n	800c0d2 <tcp_input+0x28a>
    if (pcb->remote_port == tcphdr->src &&
 800c00e:	68ea      	ldr	r2, [r5, #12]
 800c010:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800c014:	8810      	ldrh	r0, [r2, #0]
 800c016:	4584      	cmp	ip, r0
 800c018:	d15b      	bne.n	800c0d2 <tcp_input+0x28a>
 800c01a:	8ae0      	ldrh	r0, [r4, #22]
 800c01c:	8852      	ldrh	r2, [r2, #2]
 800c01e:	4290      	cmp	r0, r2
 800c020:	d157      	bne.n	800c0d2 <tcp_input+0x28a>
        pcb->local_port == tcphdr->dest &&
 800c022:	6860      	ldr	r0, [r4, #4]
 800c024:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c028:	4290      	cmp	r0, r2
 800c02a:	d152      	bne.n	800c0d2 <tcp_input+0x28a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c02c:	6820      	ldr	r0, [r4, #0]
 800c02e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c032:	4290      	cmp	r0, r2
 800c034:	d14d      	bne.n	800c0d2 <tcp_input+0x28a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c036:	42a1      	cmp	r1, r4
 800c038:	f040 83eb 	bne.w	800c812 <tcp_input+0x9ca>
 800c03c:	4b26      	ldr	r3, [pc, #152]	; (800c0d8 <tcp_input+0x290>)
 800c03e:	f240 120d 	movw	r2, #269	; 0x10d
 800c042:	492f      	ldr	r1, [pc, #188]	; (800c100 <tcp_input+0x2b8>)
 800c044:	4826      	ldr	r0, [pc, #152]	; (800c0e0 <tcp_input+0x298>)
 800c046:	f002 ff45 	bl	800eed4 <iprintf>
      if (prev != NULL) {
 800c04a:	b137      	cbz	r7, 800c05a <tcp_input+0x212>
        prev->next = pcb->next;
 800c04c:	68e3      	ldr	r3, [r4, #12]
 800c04e:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800c050:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800c054:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800c058:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c05a:	68e3      	ldr	r3, [r4, #12]
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	d106      	bne.n	800c06e <tcp_input+0x226>
 800c060:	4b1d      	ldr	r3, [pc, #116]	; (800c0d8 <tcp_input+0x290>)
 800c062:	f240 1215 	movw	r2, #277	; 0x115
 800c066:	4927      	ldr	r1, [pc, #156]	; (800c104 <tcp_input+0x2bc>)
 800c068:	481d      	ldr	r0, [pc, #116]	; (800c0e0 <tcp_input+0x298>)
 800c06a:	f002 ff33 	bl	800eed4 <iprintf>
    inseg.len = p->tot_len;
 800c06e:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800c070:	2300      	movs	r3, #0
    inseg.p = p;
 800c072:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800c074:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800c076:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800c078:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800c07a:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800c07c:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800c07e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800c082:	7f2b      	ldrb	r3, [r5, #28]
 800c084:	071b      	lsls	r3, r3, #28
 800c086:	d503      	bpl.n	800c090 <tcp_input+0x248>
      p->flags |= PBUF_FLAG_PUSH;
 800c088:	7b73      	ldrb	r3, [r6, #13]
 800c08a:	f043 0301 	orr.w	r3, r3, #1
 800c08e:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800c090:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 812e 	beq.w	800c2f4 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff f935 	bl	800b308 <tcp_process_refused_data>
 800c09e:	300d      	adds	r0, #13
 800c0a0:	d007      	beq.n	800c0b2 <tcp_input+0x26a>
 800c0a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 8125 	beq.w	800c2f4 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c0aa:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 8121 	beq.w	800c2f4 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800c0b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c0b4:	b913      	cbnz	r3, 800c0bc <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f001 fa70 	bl	800d59c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800c0bc:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800c0be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    recv_data = NULL;
 800c0c0:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800c0c4:	b110      	cbz	r0, 800c0cc <tcp_input+0x284>
      pbuf_free(inseg.p);
 800c0c6:	f7fe f8f3 	bl	800a2b0 <pbuf_free>
      inseg.p = NULL;
 800c0ca:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800c0cc:	b007      	add	sp, #28
 800c0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0d2:	4627      	mov	r7, r4
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	e727      	b.n	800bf28 <tcp_input+0xe0>
 800c0d8:	0801cc9d 	.word	0x0801cc9d
 800c0dc:	0801ce3c 	.word	0x0801ce3c
 800c0e0:	0801a5dc 	.word	0x0801a5dc
 800c0e4:	2000d01c 	.word	0x2000d01c
 800c0e8:	2000d014 	.word	0x2000d014
 800c0ec:	0801ce54 	.word	0x0801ce54
 800c0f0:	0801ce64 	.word	0x0801ce64
 800c0f4:	0801ce70 	.word	0x0801ce70
 800c0f8:	0801ceb6 	.word	0x0801ceb6
 800c0fc:	0801cee0 	.word	0x0801cee0
 800c100:	0801cf07 	.word	0x0801cf07
 800c104:	0801cf32 	.word	0x0801cf32
 800c108:	20006a7c 	.word	0x20006a7c
 800c10c:	2000d008 	.word	0x2000d008
 800c110:	0801ce8f 	.word	0x0801ce8f
 800c114:	0801cf5c 	.word	0x0801cf5c
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c118:	7d23      	ldrb	r3, [r4, #20]
 800c11a:	2b0a      	cmp	r3, #10
 800c11c:	d006      	beq.n	800c12c <tcp_input+0x2e4>
 800c11e:	465b      	mov	r3, fp
 800c120:	f240 121f 	movw	r2, #287	; 0x11f
 800c124:	4651      	mov	r1, sl
 800c126:	4638      	mov	r0, r7
 800c128:	f002 fed4 	bl	800eed4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c12c:	7a22      	ldrb	r2, [r4, #8]
 800c12e:	b13a      	cbz	r2, 800c140 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c130:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c134:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c138:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d13e      	bne.n	800c1be <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800c140:	68eb      	ldr	r3, [r5, #12]
 800c142:	8b20      	ldrh	r0, [r4, #24]
 800c144:	881a      	ldrh	r2, [r3, #0]
 800c146:	4290      	cmp	r0, r2
 800c148:	d139      	bne.n	800c1be <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800c14a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800c14c:	8ae1      	ldrh	r1, [r4, #22]
 800c14e:	4299      	cmp	r1, r3
 800c150:	d135      	bne.n	800c1be <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800c152:	6862      	ldr	r2, [r4, #4]
 800c154:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d130      	bne.n	800c1be <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c15c:	6822      	ldr	r2, [r4, #0]
 800c15e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c162:	429a      	cmp	r2, r3
 800c164:	d12b      	bne.n	800c1be <tcp_input+0x376>
  if (flags & TCP_RST) {
 800c166:	7f2b      	ldrb	r3, [r5, #28]
 800c168:	075f      	lsls	r7, r3, #29
 800c16a:	f53f af25 	bmi.w	800bfb8 <tcp_input+0x170>
  if (flags & TCP_SYN) {
 800c16e:	079a      	lsls	r2, r3, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c170:	8caf      	ldrh	r7, [r5, #36]	; 0x24
  if (flags & TCP_SYN) {
 800c172:	d514      	bpl.n	800c19e <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c174:	6a2a      	ldr	r2, [r5, #32]
 800c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	d415      	bmi.n	800c1a8 <tcp_input+0x360>
 800c17c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800c180:	eba3 030c 	sub.w	r3, r3, ip
 800c184:	2b00      	cmp	r3, #0
 800c186:	dc0f      	bgt.n	800c1a8 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c188:	4b8a      	ldr	r3, [pc, #552]	; (800c3b4 <tcp_input+0x56c>)
 800c18a:	443a      	add	r2, r7
 800c18c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4620      	mov	r0, r4
 800c194:	3304      	adds	r3, #4
 800c196:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c198:	f001 f9ba 	bl	800d510 <tcp_rst>
 800c19c:	e70c      	b.n	800bfb8 <tcp_input+0x170>
  } else if (flags & TCP_FIN) {
 800c19e:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800c1a0:	bf42      	ittt	mi
 800c1a2:	4b85      	ldrmi	r3, [pc, #532]	; (800c3b8 <tcp_input+0x570>)
 800c1a4:	681b      	ldrmi	r3, [r3, #0]
 800c1a6:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800c1a8:	2f00      	cmp	r7, #0
 800c1aa:	f43f af05 	beq.w	800bfb8 <tcp_input+0x170>
    tcp_ack_now(pcb);
 800c1ae:	8b63      	ldrh	r3, [r4, #26]
 800c1b0:	f043 0302 	orr.w	r3, r3, #2
 800c1b4:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f001 fa22 	bl	800d600 <tcp_output>
        pbuf_free(p);
 800c1bc:	e6fc      	b.n	800bfb8 <tcp_input+0x170>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1be:	68e4      	ldr	r4, [r4, #12]
 800c1c0:	2c00      	cmp	r4, #0
 800c1c2:	d1a9      	bne.n	800c118 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1c4:	487d      	ldr	r0, [pc, #500]	; (800c3bc <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c1c6:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1ca:	6802      	ldr	r2, [r0, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800c1cc:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c1ce:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1d2:	4617      	mov	r7, r2
 800c1d4:	b98f      	cbnz	r7, 800c1fa <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c1d6:	8988      	ldrh	r0, [r1, #12]
 800c1d8:	f7fd fb14 	bl	8009804 <lwip_htons>
 800c1dc:	0742      	lsls	r2, r0, #29
 800c1de:	f53f aeeb 	bmi.w	800bfb8 <tcp_input+0x170>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1e2:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1e4:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800c1e6:	8818      	ldrh	r0, [r3, #0]
 800c1e8:	6a2a      	ldr	r2, [r5, #32]
 800c1ea:	9002      	str	r0, [sp, #8]
 800c1ec:	885b      	ldrh	r3, [r3, #2]
 800c1ee:	440a      	add	r2, r1
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	4b70      	ldr	r3, [pc, #448]	; (800c3b4 <tcp_input+0x56c>)
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	e308      	b.n	800c80c <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c1fa:	f897 c008 	ldrb.w	ip, [r7, #8]
 800c1fe:	f1bc 0f00 	cmp.w	ip, #0
 800c202:	d005      	beq.n	800c210 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c204:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800c208:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	459c      	cmp	ip, r3
 800c20e:	d10b      	bne.n	800c228 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800c210:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800c214:	8afb      	ldrh	r3, [r7, #22]
 800c216:	4563      	cmp	r3, ip
 800c218:	d106      	bne.n	800c228 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	4553      	cmp	r3, sl
 800c21e:	f000 82df 	beq.w	800c7e0 <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c222:	2b00      	cmp	r3, #0
 800c224:	f000 82dc 	beq.w	800c7e0 <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c228:	463c      	mov	r4, r7
 800c22a:	68ff      	ldr	r7, [r7, #12]
 800c22c:	e7d2      	b.n	800c1d4 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800c22e:	0798      	lsls	r0, r3, #30
 800c230:	f57f aec2 	bpl.w	800bfb8 <tcp_input+0x170>
    npcb = tcp_alloc(pcb->prio);
 800c234:	7d78      	ldrb	r0, [r7, #21]
 800c236:	f7ff f9fd 	bl	800b634 <tcp_alloc>
    if (npcb == NULL) {
 800c23a:	4604      	mov	r4, r0
 800c23c:	b948      	cbnz	r0, 800c252 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	f43f aeb9 	beq.w	800bfb8 <tcp_input+0x170>
 800c246:	4601      	mov	r1, r0
 800c248:	f04f 32ff 	mov.w	r2, #4294967295
 800c24c:	6938      	ldr	r0, [r7, #16]
 800c24e:	4798      	blx	r3
 800c250:	e6b2      	b.n	800bfb8 <tcp_input+0x170>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c252:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800c256:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c258:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c25a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c25e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800c260:	8afb      	ldrh	r3, [r7, #22]
 800c262:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800c264:	7813      	ldrb	r3, [r2, #0]
 800c266:	7852      	ldrb	r2, [r2, #1]
 800c268:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c26c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800c26e:	2303      	movs	r3, #3
 800c270:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800c272:	6a2b      	ldr	r3, [r5, #32]
 800c274:	3301      	adds	r3, #1
 800c276:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c278:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c27a:	f7ff fa6f 	bl	800b75c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c27e:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800c280:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c282:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800c284:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800c286:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c288:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c28a:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800c28c:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800c28e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800c290:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c292:	7a7b      	ldrb	r3, [r7, #9]
 800c294:	f003 030c 	and.w	r3, r3, #12
 800c298:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c29a:	7a3b      	ldrb	r3, [r7, #8]
 800c29c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800c29e:	f8d9 3000 	ldr.w	r3, [r9]
 800c2a2:	f8c9 4000 	str.w	r4, [r9]
 800c2a6:	60e3      	str	r3, [r4, #12]
 800c2a8:	f001 fc80 	bl	800dbac <tcp_timer_needed>
 800c2ac:	4b44      	ldr	r3, [pc, #272]	; (800c3c0 <tcp_input+0x578>)
 800c2ae:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800c2b0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800c2b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c2b4:	f7ff fabc 	bl	800b830 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c2b8:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c2ba:	1d22      	adds	r2, r4, #4
 800c2bc:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800c2be:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800c2c4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c2c8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c2cc:	f7fc fd26 	bl	8008d1c <ip4_route>
 800c2d0:	9a05      	ldr	r2, [sp, #20]
 800c2d2:	4601      	mov	r1, r0
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7ff fa5b 	bl	800b790 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c2da:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c2dc:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f000 ff9a 	bl	800d218 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f43f af66 	beq.w	800c1b6 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800c2ea:	4651      	mov	r1, sl
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f7ff f8cf 	bl	800b490 <tcp_abandon>
      return;
 800c2f2:	e661      	b.n	800bfb8 <tcp_input+0x170>
  if (flags & TCP_RST) {
 800c2f4:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800c2f6:	63ec      	str	r4, [r5, #60]	; 0x3c
  if (flags & TCP_RST) {
 800c2f8:	0751      	lsls	r1, r2, #29
 800c2fa:	d537      	bpl.n	800c36c <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800c2fc:	7d21      	ldrb	r1, [r4, #20]
 800c2fe:	2902      	cmp	r1, #2
 800c300:	d11e      	bne.n	800c340 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800c302:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c304:	69ab      	ldr	r3, [r5, #24]
 800c306:	429a      	cmp	r2, r3
 800c308:	d107      	bne.n	800c31a <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800c30a:	7cab      	ldrb	r3, [r5, #18]
 800c30c:	f043 0308 	orr.w	r3, r3, #8
 800c310:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c312:	8b63      	ldrh	r3, [r4, #26]
 800c314:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800c318:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800c31a:	7cab      	ldrb	r3, [r5, #18]
 800c31c:	0718      	lsls	r0, r3, #28
 800c31e:	f140 81fe 	bpl.w	800c71e <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c322:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c326:	b11b      	cbz	r3, 800c330 <tcp_input+0x4e8>
 800c328:	f06f 010d 	mvn.w	r1, #13
 800c32c:	6920      	ldr	r0, [r4, #16]
 800c32e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c330:	4621      	mov	r1, r4
 800c332:	4824      	ldr	r0, [pc, #144]	; (800c3c4 <tcp_input+0x57c>)
 800c334:	f7fe fe9c 	bl	800b070 <tcp_pcb_remove>
        tcp_free(pcb);
 800c338:	4620      	mov	r0, r4
 800c33a:	f7fe faa7 	bl	800a88c <tcp_free>
 800c33e:	e6bd      	b.n	800c0bc <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 800c340:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c342:	6a2b      	ldr	r3, [r5, #32]
 800c344:	429a      	cmp	r2, r3
 800c346:	d007      	beq.n	800c358 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	d4e6      	bmi.n	800c31a <tcp_input+0x4d2>
 800c34c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c34e:	1a9b      	subs	r3, r3, r2
 800c350:	2b00      	cmp	r3, #0
 800c352:	dce2      	bgt.n	800c31a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c354:	8b63      	ldrh	r3, [r4, #26]
 800c356:	e010      	b.n	800c37a <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c358:	2900      	cmp	r1, #0
 800c35a:	d1d6      	bne.n	800c30a <tcp_input+0x4c2>
 800c35c:	4b1a      	ldr	r3, [pc, #104]	; (800c3c8 <tcp_input+0x580>)
 800c35e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c362:	491a      	ldr	r1, [pc, #104]	; (800c3cc <tcp_input+0x584>)
 800c364:	481a      	ldr	r0, [pc, #104]	; (800c3d0 <tcp_input+0x588>)
 800c366:	f002 fdb5 	bl	800eed4 <iprintf>
 800c36a:	e7ce      	b.n	800c30a <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c36c:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800c36e:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c370:	d506      	bpl.n	800c380 <tcp_input+0x538>
 800c372:	7d22      	ldrb	r2, [r4, #20]
 800c374:	3a02      	subs	r2, #2
 800c376:	2a01      	cmp	r2, #1
 800c378:	d902      	bls.n	800c380 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800c37a:	f043 0302 	orr.w	r3, r3, #2
 800c37e:	e7cb      	b.n	800c318 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c380:	06db      	lsls	r3, r3, #27
  tcp_parseopt(pcb);
 800c382:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800c384:	bf5e      	ittt	pl
 800c386:	4b0c      	ldrpl	r3, [pc, #48]	; (800c3b8 <tcp_input+0x570>)
 800c388:	681b      	ldrpl	r3, [r3, #0]
 800c38a:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800c392:	f7ff fa4d 	bl	800b830 <tcp_parseopt>
  switch (pcb->state) {
 800c396:	7d23      	ldrb	r3, [r4, #20]
 800c398:	3b02      	subs	r3, #2
 800c39a:	2b07      	cmp	r3, #7
 800c39c:	d8bd      	bhi.n	800c31a <tcp_input+0x4d2>
 800c39e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c3a2:	0019      	.short	0x0019
 800c3a4:	011200a6 	.word	0x011200a6
 800c3a8:	015f0117 	.word	0x015f0117
 800c3ac:	018b0112 	.word	0x018b0112
 800c3b0:	01a9      	.short	0x01a9
 800c3b2:	bf00      	nop
 800c3b4:	20006a8c 	.word	0x20006a8c
 800c3b8:	2000d00c 	.word	0x2000d00c
 800c3bc:	2000d004 	.word	0x2000d004
 800c3c0:	2000d011 	.word	0x2000d011
 800c3c4:	2000d008 	.word	0x2000d008
 800c3c8:	0801cc9d 	.word	0x0801cc9d
 800c3cc:	0801cf89 	.word	0x0801cf89
 800c3d0:	0801a5dc 	.word	0x0801a5dc
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c3d4:	7f2b      	ldrb	r3, [r5, #28]
 800c3d6:	f003 0212 	and.w	r2, r3, #18
 800c3da:	2a12      	cmp	r2, #18
 800c3dc:	d16a      	bne.n	800c4b4 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800c3de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c3e0:	69a9      	ldr	r1, [r5, #24]
 800c3e2:	3201      	adds	r2, #1
 800c3e4:	428a      	cmp	r2, r1
 800c3e6:	d165      	bne.n	800c4b4 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800c3e8:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800c3ea:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800c3ec:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800c3ee:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c3f0:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c3f2:	8e66      	ldrh	r6, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800c3f4:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c3f6:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800c3f8:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c3fa:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c3fc:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800c3fe:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c402:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c406:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800c408:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c40a:	4610      	mov	r0, r2
 800c40c:	9205      	str	r2, [sp, #20]
 800c40e:	f7fc fc85 	bl	8008d1c <ip4_route>
 800c412:	9a05      	ldr	r2, [sp, #20]
 800c414:	4601      	mov	r1, r0
 800c416:	4630      	mov	r0, r6
 800c418:	f7ff f9ba 	bl	800b790 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c41c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c420:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c422:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c424:	0081      	lsls	r1, r0, #2
 800c426:	429a      	cmp	r2, r3
 800c428:	4616      	mov	r6, r2
 800c42a:	bf38      	it	cc
 800c42c:	461e      	movcc	r6, r3
 800c42e:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800c432:	d933      	bls.n	800c49c <tcp_input+0x654>
 800c434:	b28b      	uxth	r3, r1
 800c436:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c43a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c43e:	b933      	cbnz	r3, 800c44e <tcp_input+0x606>
 800c440:	4b94      	ldr	r3, [pc, #592]	; (800c694 <tcp_input+0x84c>)
 800c442:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c446:	4994      	ldr	r1, [pc, #592]	; (800c698 <tcp_input+0x850>)
 800c448:	4894      	ldr	r0, [pc, #592]	; (800c69c <tcp_input+0x854>)
 800c44a:	f002 fd43 	bl	800eed4 <iprintf>
        --pcb->snd_queuelen;
 800c44e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800c452:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800c454:	3b01      	subs	r3, #1
 800c456:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800c45a:	bb1e      	cbnz	r6, 800c4a4 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800c45c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c45e:	b936      	cbnz	r6, 800c46e <tcp_input+0x626>
 800c460:	4b8c      	ldr	r3, [pc, #560]	; (800c694 <tcp_input+0x84c>)
 800c462:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c466:	498e      	ldr	r1, [pc, #568]	; (800c6a0 <tcp_input+0x858>)
 800c468:	488c      	ldr	r0, [pc, #560]	; (800c69c <tcp_input+0x854>)
 800c46a:	f002 fd33 	bl	800eed4 <iprintf>
          pcb->unsent = rseg->next;
 800c46e:	6833      	ldr	r3, [r6, #0]
 800c470:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800c472:	4630      	mov	r0, r6
 800c474:	f7fe fb50 	bl	800ab18 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800c478:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c47a:	b9b3      	cbnz	r3, 800c4aa <tcp_input+0x662>
          pcb->rtime = -1;
 800c47c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c480:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c482:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c486:	2b00      	cmp	r3, #0
 800c488:	f43f af64 	beq.w	800c354 <tcp_input+0x50c>
 800c48c:	2200      	movs	r2, #0
 800c48e:	4621      	mov	r1, r4
 800c490:	6920      	ldr	r0, [r4, #16]
 800c492:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800c494:	300d      	adds	r0, #13
 800c496:	f47f af5d 	bne.w	800c354 <tcp_input+0x50c>
 800c49a:	e60f      	b.n	800c0bc <tcp_input+0x274>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c49c:	429a      	cmp	r2, r3
 800c49e:	bf88      	it	hi
 800c4a0:	b293      	uxthhi	r3, r2
 800c4a2:	e7c8      	b.n	800c436 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800c4a4:	6833      	ldr	r3, [r6, #0]
 800c4a6:	6723      	str	r3, [r4, #112]	; 0x70
 800c4a8:	e7e3      	b.n	800c472 <tcp_input+0x62a>
          pcb->rtime = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800c4ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4b2:	e7e6      	b.n	800c482 <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800c4b4:	06df      	lsls	r7, r3, #27
 800c4b6:	f57f af30 	bpl.w	800c31a <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c4ba:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4bc:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800c4be:	8818      	ldrh	r0, [r3, #0]
 800c4c0:	6a2a      	ldr	r2, [r5, #32]
 800c4c2:	9002      	str	r0, [sp, #8]
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	885b      	ldrh	r3, [r3, #2]
 800c4c8:	440a      	add	r2, r1
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	4b75      	ldr	r3, [pc, #468]	; (800c6a4 <tcp_input+0x85c>)
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	69a9      	ldr	r1, [r5, #24]
 800c4d4:	f001 f81c 	bl	800d510 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c4d8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c4dc:	2b05      	cmp	r3, #5
 800c4de:	f63f af1c 	bhi.w	800c31a <tcp_input+0x4d2>
          pcb->rtime = 0;
 800c4e2:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800c4e4:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800c4e6:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c4e8:	f001 fa50 	bl	800d98c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800c4ec:	e715      	b.n	800c31a <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800c4ee:	7f2b      	ldrb	r3, [r5, #28]
 800c4f0:	06de      	lsls	r6, r3, #27
 800c4f2:	d55b      	bpl.n	800c5ac <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c4f6:	69a9      	ldr	r1, [r5, #24]
 800c4f8:	43db      	mvns	r3, r3
 800c4fa:	42cb      	cmn	r3, r1
 800c4fc:	d447      	bmi.n	800c58e <tcp_input+0x746>
 800c4fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c500:	1acb      	subs	r3, r1, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	dc43      	bgt.n	800c58e <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800c506:	2304      	movs	r3, #4
 800c508:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800c50a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c50c:	b91b      	cbnz	r3, 800c516 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800c50e:	4620      	mov	r0, r4
 800c510:	f7ff f83c 	bl	800b58c <tcp_abort>
            goto aborted;
 800c514:	e5d2      	b.n	800c0bc <tcp_input+0x274>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	b933      	cbnz	r3, 800c528 <tcp_input+0x6e0>
 800c51a:	4b5e      	ldr	r3, [pc, #376]	; (800c694 <tcp_input+0x84c>)
 800c51c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c520:	4961      	ldr	r1, [pc, #388]	; (800c6a8 <tcp_input+0x860>)
 800c522:	485e      	ldr	r0, [pc, #376]	; (800c69c <tcp_input+0x854>)
 800c524:	f002 fcd6 	bl	800eed4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c528:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0ee      	beq.n	800c50e <tcp_input+0x6c6>
 800c530:	2200      	movs	r2, #0
 800c532:	4621      	mov	r1, r4
 800c534:	6920      	ldr	r0, [r4, #16]
 800c536:	4798      	blx	r3
          if (err != ERR_OK) {
 800c538:	b118      	cbz	r0, 800c542 <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800c53a:	300d      	adds	r0, #13
 800c53c:	f43f adbe 	beq.w	800c0bc <tcp_input+0x274>
 800c540:	e7e5      	b.n	800c50e <tcp_input+0x6c6>
          tcp_receive(pcb);
 800c542:	4620      	mov	r0, r4
 800c544:	f7ff fa4a 	bl	800b9dc <tcp_receive>
          if (recv_acked != 0) {
 800c548:	4a58      	ldr	r2, [pc, #352]	; (800c6ac <tcp_input+0x864>)
 800c54a:	8a93      	ldrh	r3, [r2, #20]
 800c54c:	b10b      	cbz	r3, 800c552 <tcp_input+0x70a>
            recv_acked--;
 800c54e:	3b01      	subs	r3, #1
 800c550:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c552:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800c554:	f241 131c 	movw	r3, #4380	; 0x111c
 800c558:	0041      	lsls	r1, r0, #1
 800c55a:	0086      	lsls	r6, r0, #2
 800c55c:	4299      	cmp	r1, r3
 800c55e:	460f      	mov	r7, r1
 800c560:	bf38      	it	cc
 800c562:	461f      	movcc	r7, r3
 800c564:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800c568:	d90d      	bls.n	800c586 <tcp_input+0x73e>
 800c56a:	b2b3      	uxth	r3, r6
 800c56c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800c570:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c572:	0699      	lsls	r1, r3, #26
 800c574:	f57f aed1 	bpl.w	800c31a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c578:	8b63      	ldrh	r3, [r4, #26]
 800c57a:	f043 0302 	orr.w	r3, r3, #2
 800c57e:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800c580:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800c582:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800c584:	e6c9      	b.n	800c31a <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c586:	4299      	cmp	r1, r3
 800c588:	bf88      	it	hi
 800c58a:	b28b      	uxthhi	r3, r1
 800c58c:	e7ee      	b.n	800c56c <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c58e:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c590:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c592:	881e      	ldrh	r6, [r3, #0]
 800c594:	6a2a      	ldr	r2, [r5, #32]
 800c596:	9602      	str	r6, [sp, #8]
 800c598:	885b      	ldrh	r3, [r3, #2]
 800c59a:	4402      	add	r2, r0
 800c59c:	4620      	mov	r0, r4
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	4b40      	ldr	r3, [pc, #256]	; (800c6a4 <tcp_input+0x85c>)
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	f000 ffb3 	bl	800d510 <tcp_rst>
    if (err != ERR_ABRT) {
 800c5aa:	e6b6      	b.n	800c31a <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c5ac:	0798      	lsls	r0, r3, #30
 800c5ae:	f57f aeb4 	bpl.w	800c31a <tcp_input+0x4d2>
 800c5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5b4:	6a2a      	ldr	r2, [r5, #32]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	f47f aeae 	bne.w	800c31a <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 ff32 	bl	800d428 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800c5c4:	e6a9      	b.n	800c31a <tcp_input+0x4d2>
      tcp_receive(pcb);
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f7ff fa08 	bl	800b9dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c5cc:	7cab      	ldrb	r3, [r5, #18]
 800c5ce:	e7d0      	b.n	800c572 <tcp_input+0x72a>
      tcp_receive(pcb);
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7ff fa03 	bl	800b9dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c5d6:	7cab      	ldrb	r3, [r5, #18]
 800c5d8:	f013 0f20 	tst.w	r3, #32
 800c5dc:	7f2b      	ldrb	r3, [r5, #28]
 800c5de:	d031      	beq.n	800c644 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c5e0:	f013 0f10 	tst.w	r3, #16
 800c5e4:	8b63      	ldrh	r3, [r4, #26]
 800c5e6:	d028      	beq.n	800c63a <tcp_input+0x7f2>
 800c5e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c5ea:	69aa      	ldr	r2, [r5, #24]
 800c5ec:	4291      	cmp	r1, r2
 800c5ee:	d124      	bne.n	800c63a <tcp_input+0x7f2>
 800c5f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c5f2:	bb12      	cbnz	r2, 800c63a <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800c5f4:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800c5f8:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800c5fa:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800c5fc:	f7fe fb16 	bl	800ac2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c600:	f8d9 3000 	ldr.w	r3, [r9]
 800c604:	429c      	cmp	r4, r3
 800c606:	d10a      	bne.n	800c61e <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800c608:	68e3      	ldr	r3, [r4, #12]
 800c60a:	f8c9 3000 	str.w	r3, [r9]
 800c60e:	e008      	b.n	800c622 <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800c610:	68da      	ldr	r2, [r3, #12]
 800c612:	4294      	cmp	r4, r2
 800c614:	d102      	bne.n	800c61c <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800c616:	68e2      	ldr	r2, [r4, #12]
 800c618:	60da      	str	r2, [r3, #12]
 800c61a:	e002      	b.n	800c622 <tcp_input+0x7da>
 800c61c:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1f6      	bne.n	800c610 <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800c622:	4b23      	ldr	r3, [pc, #140]	; (800c6b0 <tcp_input+0x868>)
 800c624:	2201      	movs	r2, #1
 800c626:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c628:	230a      	movs	r3, #10
 800c62a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c62c:	4b21      	ldr	r3, [pc, #132]	; (800c6b4 <tcp_input+0x86c>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	601c      	str	r4, [r3, #0]
 800c632:	60e2      	str	r2, [r4, #12]
 800c634:	f001 faba 	bl	800dbac <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800c638:	e66f      	b.n	800c31a <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800c63a:	f043 0302 	orr.w	r3, r3, #2
 800c63e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800c640:	2308      	movs	r3, #8
 800c642:	e79e      	b.n	800c582 <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c644:	06da      	lsls	r2, r3, #27
 800c646:	f57f ae68 	bpl.w	800c31a <tcp_input+0x4d2>
 800c64a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c64c:	69ab      	ldr	r3, [r5, #24]
 800c64e:	429a      	cmp	r2, r3
 800c650:	f47f ae63 	bne.w	800c31a <tcp_input+0x4d2>
 800c654:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c656:	2b00      	cmp	r3, #0
 800c658:	f47f ae5f 	bne.w	800c31a <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800c65c:	2306      	movs	r3, #6
 800c65e:	e790      	b.n	800c582 <tcp_input+0x73a>
      tcp_receive(pcb);
 800c660:	4620      	mov	r0, r4
 800c662:	f7ff f9bb 	bl	800b9dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c666:	7cab      	ldrb	r3, [r5, #18]
 800c668:	069b      	lsls	r3, r3, #26
 800c66a:	f57f ae56 	bpl.w	800c31a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c66e:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c670:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c672:	f043 0302 	orr.w	r3, r3, #2
 800c676:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c678:	f7fe fad8 	bl	800ac2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c67c:	f8d9 3000 	ldr.w	r3, [r9]
 800c680:	429c      	cmp	r4, r3
 800c682:	d0c1      	beq.n	800c608 <tcp_input+0x7c0>
 800c684:	2b00      	cmp	r3, #0
 800c686:	d0cc      	beq.n	800c622 <tcp_input+0x7da>
 800c688:	68da      	ldr	r2, [r3, #12]
 800c68a:	4294      	cmp	r4, r2
 800c68c:	d0c3      	beq.n	800c616 <tcp_input+0x7ce>
 800c68e:	4613      	mov	r3, r2
 800c690:	e7f8      	b.n	800c684 <tcp_input+0x83c>
 800c692:	bf00      	nop
 800c694:	0801cc9d 	.word	0x0801cc9d
 800c698:	0801cfa9 	.word	0x0801cfa9
 800c69c:	0801a5dc 	.word	0x0801a5dc
 800c6a0:	0801cfbf 	.word	0x0801cfbf
 800c6a4:	20006a8c 	.word	0x20006a8c
 800c6a8:	0801cfd2 	.word	0x0801cfd2
 800c6ac:	2000d01c 	.word	0x2000d01c
 800c6b0:	2000d011 	.word	0x2000d011
 800c6b4:	2000d014 	.word	0x2000d014
      tcp_receive(pcb);
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f7ff f98f 	bl	800b9dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c6be:	7f2b      	ldrb	r3, [r5, #28]
 800c6c0:	06df      	lsls	r7, r3, #27
 800c6c2:	f57f ae2a 	bpl.w	800c31a <tcp_input+0x4d2>
 800c6c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c6c8:	69ab      	ldr	r3, [r5, #24]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	f47f ae25 	bne.w	800c31a <tcp_input+0x4d2>
 800c6d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f47f ae21 	bne.w	800c31a <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f7fe faa7 	bl	800ac2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c6de:	f8d9 3000 	ldr.w	r3, [r9]
 800c6e2:	429c      	cmp	r4, r3
 800c6e4:	d090      	beq.n	800c608 <tcp_input+0x7c0>
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d09b      	beq.n	800c622 <tcp_input+0x7da>
 800c6ea:	68da      	ldr	r2, [r3, #12]
 800c6ec:	4294      	cmp	r4, r2
 800c6ee:	d092      	beq.n	800c616 <tcp_input+0x7ce>
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	e7f8      	b.n	800c6e6 <tcp_input+0x89e>
      tcp_receive(pcb);
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f7ff f971 	bl	800b9dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c6fa:	7f2b      	ldrb	r3, [r5, #28]
 800c6fc:	06de      	lsls	r6, r3, #27
 800c6fe:	f57f ae0c 	bpl.w	800c31a <tcp_input+0x4d2>
 800c702:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c704:	69ab      	ldr	r3, [r5, #24]
 800c706:	429a      	cmp	r2, r3
 800c708:	f47f ae07 	bne.w	800c31a <tcp_input+0x4d2>
 800c70c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f47f ae03 	bne.w	800c31a <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800c714:	7cab      	ldrb	r3, [r5, #18]
 800c716:	f043 0310 	orr.w	r3, r3, #16
 800c71a:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800c71c:	e5fd      	b.n	800c31a <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800c71e:	8aaa      	ldrh	r2, [r5, #20]
 800c720:	b11a      	cbz	r2, 800c72a <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c722:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c724:	b9db      	cbnz	r3, 800c75e <tcp_input+0x916>
          recv_acked = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7ff f8ca 	bl	800b8c4 <tcp_input_delayed_close>
 800c730:	2800      	cmp	r0, #0
 800c732:	f47f acc3 	bne.w	800c0bc <tcp_input+0x274>
        if (recv_data != NULL) {
 800c736:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c738:	b323      	cbz	r3, 800c784 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c73a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c73c:	b133      	cbz	r3, 800c74c <tcp_input+0x904>
 800c73e:	4b37      	ldr	r3, [pc, #220]	; (800c81c <tcp_input+0x9d4>)
 800c740:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c744:	4936      	ldr	r1, [pc, #216]	; (800c820 <tcp_input+0x9d8>)
 800c746:	4837      	ldr	r0, [pc, #220]	; (800c824 <tcp_input+0x9dc>)
 800c748:	f002 fbc4 	bl	800eed4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c74c:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800c74e:	6baa      	ldr	r2, [r5, #56]	; 0x38
          if (pcb->flags & TF_RXCLOSED) {
 800c750:	f013 0310 	ands.w	r3, r3, #16
 800c754:	d009      	beq.n	800c76a <tcp_input+0x922>
            pbuf_free(recv_data);
 800c756:	4610      	mov	r0, r2
 800c758:	f7fd fdaa 	bl	800a2b0 <pbuf_free>
 800c75c:	e6d7      	b.n	800c50e <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c75e:	4621      	mov	r1, r4
 800c760:	6920      	ldr	r0, [r4, #16]
 800c762:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c764:	300d      	adds	r0, #13
 800c766:	d1de      	bne.n	800c726 <tcp_input+0x8de>
 800c768:	e4a8      	b.n	800c0bc <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c76a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800c76e:	b1f6      	cbz	r6, 800c7ae <tcp_input+0x966>
 800c770:	4621      	mov	r1, r4
 800c772:	6920      	ldr	r0, [r4, #16]
 800c774:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800c776:	f110 0f0d 	cmn.w	r0, #13
 800c77a:	f43f ac9f 	beq.w	800c0bc <tcp_input+0x274>
          if (err != ERR_OK) {
 800c77e:	b108      	cbz	r0, 800c784 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800c780:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c782:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800c784:	7cab      	ldrb	r3, [r5, #18]
 800c786:	0699      	lsls	r1, r3, #26
 800c788:	d505      	bpl.n	800c796 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800c78a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c78c:	b1ab      	cbz	r3, 800c7ba <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c78e:	7b5a      	ldrb	r2, [r3, #13]
 800c790:	f042 0220 	orr.w	r2, r2, #32
 800c794:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c796:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800c798:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800c79a:	63eb      	str	r3, [r5, #60]	; 0x3c
        if (tcp_input_delayed_close(pcb)) {
 800c79c:	f7ff f892 	bl	800b8c4 <tcp_input_delayed_close>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	f47f ac8b 	bne.w	800c0bc <tcp_input+0x274>
        tcp_output(pcb);
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 ff2a 	bl	800d600 <tcp_output>
 800c7ac:	e486      	b.n	800c0bc <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c7ae:	4633      	mov	r3, r6
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7fe fd84 	bl	800b2c0 <tcp_recv_null>
 800c7b8:	e7dd      	b.n	800c776 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c7ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c7bc:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800c7c0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c7c4:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800c7c6:	bf1c      	itt	ne
 800c7c8:	3301      	addne	r3, #1
 800c7ca:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c7cc:	2e00      	cmp	r6, #0
 800c7ce:	d0e2      	beq.n	800c796 <tcp_input+0x94e>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4621      	mov	r1, r4
 800c7d4:	6920      	ldr	r0, [r4, #16]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800c7da:	300d      	adds	r0, #13
 800c7dc:	d1db      	bne.n	800c796 <tcp_input+0x94e>
 800c7de:	e46d      	b.n	800c0bc <tcp_input+0x274>
      if (prev != NULL) {
 800c7e0:	b11c      	cbz	r4, 800c7ea <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c7e4:	6007      	str	r7, [r0, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c7e6:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c7e8:	60fa      	str	r2, [r7, #12]
  if (flags & TCP_RST) {
 800c7ea:	7f2b      	ldrb	r3, [r5, #28]
 800c7ec:	075c      	lsls	r4, r3, #29
 800c7ee:	f53f abe3 	bmi.w	800bfb8 <tcp_input+0x170>
  if (flags & TCP_ACK) {
 800c7f2:	f013 0a10 	ands.w	sl, r3, #16
 800c7f6:	f43f ad1a 	beq.w	800c22e <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7fa:	880b      	ldrh	r3, [r1, #0]
 800c7fc:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c7fe:	6a2a      	ldr	r2, [r5, #32]
 800c800:	e9cd c301 	strd	ip, r3, [sp, #4]
 800c804:	4b08      	ldr	r3, [pc, #32]	; (800c828 <tcp_input+0x9e0>)
 800c806:	4402      	add	r2, r0
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	3304      	adds	r3, #4
 800c80c:	69a9      	ldr	r1, [r5, #24]
 800c80e:	4638      	mov	r0, r7
 800c810:	e4c2      	b.n	800c198 <tcp_input+0x350>
      if (prev != NULL) {
 800c812:	2f00      	cmp	r7, #0
 800c814:	f47f ac1a 	bne.w	800c04c <tcp_input+0x204>
 800c818:	e429      	b.n	800c06e <tcp_input+0x226>
 800c81a:	bf00      	nop
 800c81c:	0801cc9d 	.word	0x0801cc9d
 800c820:	0801cff0 	.word	0x0801cff0
 800c824:	0801a5dc 	.word	0x0801a5dc
 800c828:	20006a8c 	.word	0x20006a8c

0800c82c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c82c:	4a02      	ldr	r2, [pc, #8]	; (800c838 <tcp_trigger_input_pcb_close+0xc>)
 800c82e:	7c93      	ldrb	r3, [r2, #18]
 800c830:	f043 0310 	orr.w	r3, r3, #16
 800c834:	7493      	strb	r3, [r2, #18]
}
 800c836:	4770      	bx	lr
 800c838:	2000d01c 	.word	0x2000d01c

0800c83c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c83c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c83e:	4604      	mov	r4, r0
 800c840:	b930      	cbnz	r0, 800c850 <tcp_output_segment_busy+0x14>
 800c842:	4b06      	ldr	r3, [pc, #24]	; (800c85c <tcp_output_segment_busy+0x20>)
 800c844:	f240 529a 	movw	r2, #1434	; 0x59a
 800c848:	4905      	ldr	r1, [pc, #20]	; (800c860 <tcp_output_segment_busy+0x24>)
 800c84a:	4806      	ldr	r0, [pc, #24]	; (800c864 <tcp_output_segment_busy+0x28>)
 800c84c:	f002 fb42 	bl	800eed4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c850:	6863      	ldr	r3, [r4, #4]
 800c852:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800c854:	3801      	subs	r0, #1
 800c856:	bf18      	it	ne
 800c858:	2001      	movne	r0, #1
 800c85a:	bd10      	pop	{r4, pc}
 800c85c:	0801d00a 	.word	0x0801d00a
 800c860:	0801d06c 	.word	0x0801d06c
 800c864:	0801a5dc 	.word	0x0801a5dc

0800c868 <tcp_pbuf_prealloc>:
{
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	9d08      	ldr	r5, [sp, #32]
 800c86e:	4680      	mov	r8, r0
 800c870:	460c      	mov	r4, r1
 800c872:	4617      	mov	r7, r2
 800c874:	461e      	mov	r6, r3
 800c876:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c87a:	b92d      	cbnz	r5, 800c888 <tcp_pbuf_prealloc+0x20>
 800c87c:	4b1c      	ldr	r3, [pc, #112]	; (800c8f0 <tcp_pbuf_prealloc+0x88>)
 800c87e:	22e9      	movs	r2, #233	; 0xe9
 800c880:	491c      	ldr	r1, [pc, #112]	; (800c8f4 <tcp_pbuf_prealloc+0x8c>)
 800c882:	481d      	ldr	r0, [pc, #116]	; (800c8f8 <tcp_pbuf_prealloc+0x90>)
 800c884:	f002 fb26 	bl	800eed4 <iprintf>
  if (length < max_length) {
 800c888:	42bc      	cmp	r4, r7
 800c88a:	d22e      	bcs.n	800c8ea <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c88c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c890:	079a      	lsls	r2, r3, #30
 800c892:	d409      	bmi.n	800c8a8 <tcp_pbuf_prealloc+0x40>
 800c894:	8b6b      	ldrh	r3, [r5, #26]
 800c896:	065b      	lsls	r3, r3, #25
 800c898:	d427      	bmi.n	800c8ea <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800c89a:	f1b9 0f00 	cmp.w	r9, #0
 800c89e:	d003      	beq.n	800c8a8 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800c8a0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c8a2:	b90b      	cbnz	r3, 800c8a8 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800c8a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c8a6:	b303      	cbz	r3, 800c8ea <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c8a8:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800c8ac:	f025 0103 	bic.w	r1, r5, #3
 800c8b0:	42b9      	cmp	r1, r7
 800c8b2:	460a      	mov	r2, r1
 800c8b4:	bf28      	it	cs
 800c8b6:	463a      	movcs	r2, r7
 800c8b8:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c8ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8be:	4640      	mov	r0, r8
 800c8c0:	f7fd fd5e 	bl	800a380 <pbuf_alloc>
  if (p == NULL) {
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	b168      	cbz	r0, 800c8e4 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c8c8:	6803      	ldr	r3, [r0, #0]
 800c8ca:	b133      	cbz	r3, 800c8da <tcp_pbuf_prealloc+0x72>
 800c8cc:	4b08      	ldr	r3, [pc, #32]	; (800c8f0 <tcp_pbuf_prealloc+0x88>)
 800c8ce:	f240 120b 	movw	r2, #267	; 0x10b
 800c8d2:	490a      	ldr	r1, [pc, #40]	; (800c8fc <tcp_pbuf_prealloc+0x94>)
 800c8d4:	4808      	ldr	r0, [pc, #32]	; (800c8f8 <tcp_pbuf_prealloc+0x90>)
 800c8d6:	f002 fafd 	bl	800eed4 <iprintf>
  *oversize = p->len - length;
 800c8da:	896b      	ldrh	r3, [r5, #10]
 800c8dc:	1b1b      	subs	r3, r3, r4
 800c8de:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800c8e0:	812c      	strh	r4, [r5, #8]
 800c8e2:	816c      	strh	r4, [r5, #10]
}
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	e7e5      	b.n	800c8ba <tcp_pbuf_prealloc+0x52>
 800c8ee:	bf00      	nop
 800c8f0:	0801d00a 	.word	0x0801d00a
 800c8f4:	0801d091 	.word	0x0801d091
 800c8f8:	0801a5dc 	.word	0x0801a5dc
 800c8fc:	0801d0b0 	.word	0x0801d0b0

0800c900 <tcp_create_segment>:
{
 800c900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c904:	460e      	mov	r6, r1
 800c906:	4690      	mov	r8, r2
 800c908:	4699      	mov	r9, r3
 800c90a:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c90e:	4607      	mov	r7, r0
 800c910:	b928      	cbnz	r0, 800c91e <tcp_create_segment+0x1e>
 800c912:	4b2f      	ldr	r3, [pc, #188]	; (800c9d0 <tcp_create_segment+0xd0>)
 800c914:	22a3      	movs	r2, #163	; 0xa3
 800c916:	492f      	ldr	r1, [pc, #188]	; (800c9d4 <tcp_create_segment+0xd4>)
 800c918:	482f      	ldr	r0, [pc, #188]	; (800c9d8 <tcp_create_segment+0xd8>)
 800c91a:	f002 fadb 	bl	800eed4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c91e:	b92e      	cbnz	r6, 800c92c <tcp_create_segment+0x2c>
 800c920:	4b2b      	ldr	r3, [pc, #172]	; (800c9d0 <tcp_create_segment+0xd0>)
 800c922:	22a4      	movs	r2, #164	; 0xa4
 800c924:	492d      	ldr	r1, [pc, #180]	; (800c9dc <tcp_create_segment+0xdc>)
 800c926:	482c      	ldr	r0, [pc, #176]	; (800c9d8 <tcp_create_segment+0xd8>)
 800c928:	f002 fad4 	bl	800eed4 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c92c:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c930:	2003      	movs	r0, #3
 800c932:	f7fd fa87 	bl	8009e44 <memp_malloc>
 800c936:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c938:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c93c:	b928      	cbnz	r0, 800c94a <tcp_create_segment+0x4a>
    pbuf_free(p);
 800c93e:	4630      	mov	r0, r6
 800c940:	f7fd fcb6 	bl	800a2b0 <pbuf_free>
}
 800c944:	4620      	mov	r0, r4
 800c946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800c94a:	2300      	movs	r3, #0
  seg->flags = optflags;
 800c94c:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c950:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800c954:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c958:	8933      	ldrh	r3, [r6, #8]
 800c95a:	42ab      	cmp	r3, r5
 800c95c:	d205      	bcs.n	800c96a <tcp_create_segment+0x6a>
 800c95e:	4b1c      	ldr	r3, [pc, #112]	; (800c9d0 <tcp_create_segment+0xd0>)
 800c960:	22b0      	movs	r2, #176	; 0xb0
 800c962:	491f      	ldr	r1, [pc, #124]	; (800c9e0 <tcp_create_segment+0xe0>)
 800c964:	481c      	ldr	r0, [pc, #112]	; (800c9d8 <tcp_create_segment+0xd8>)
 800c966:	f002 fab5 	bl	800eed4 <iprintf>
  seg->len = p->tot_len - optlen;
 800c96a:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c96c:	4630      	mov	r0, r6
 800c96e:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800c970:	eba3 030a 	sub.w	r3, r3, sl
 800c974:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c976:	f7fd fc63 	bl	800a240 <pbuf_add_header>
 800c97a:	4606      	mov	r6, r0
 800c97c:	b120      	cbz	r0, 800c988 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800c97e:	4620      	mov	r0, r4
    return NULL;
 800c980:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800c982:	f7fe f8c9 	bl	800ab18 <tcp_seg_free>
    return NULL;
 800c986:	e7dd      	b.n	800c944 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c988:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c98a:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c98c:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c98e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c992:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c996:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c99a:	f7fc ff33 	bl	8009804 <lwip_htons>
 800c99e:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c9a2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c9a6:	8b38      	ldrh	r0, [r7, #24]
 800c9a8:	f7fc ff2c 	bl	8009804 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c9ac:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c9ae:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c9b2:	4648      	mov	r0, r9
 800c9b4:	f7fc ff29 	bl	800980a <lwip_htonl>
 800c9b8:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c9ba:	ea45 0008 	orr.w	r0, r5, r8
 800c9be:	68e7      	ldr	r7, [r4, #12]
 800c9c0:	f7fc ff20 	bl	8009804 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800c9c4:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c9c6:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800c9c8:	749e      	strb	r6, [r3, #18]
 800c9ca:	74de      	strb	r6, [r3, #19]
  return seg;
 800c9cc:	e7ba      	b.n	800c944 <tcp_create_segment+0x44>
 800c9ce:	bf00      	nop
 800c9d0:	0801d00a 	.word	0x0801d00a
 800c9d4:	0801d0c4 	.word	0x0801d0c4
 800c9d8:	0801a5dc 	.word	0x0801a5dc
 800c9dc:	0801d0e4 	.word	0x0801d0e4
 800c9e0:	0801d105 	.word	0x0801d105

0800c9e4 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c9e4:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c9ea:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c9f0:	2022      	movs	r0, #34	; 0x22
 800c9f2:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c9f6:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c9f8:	f7fd fcc2 	bl	800a380 <pbuf_alloc>
  if (p != NULL) {
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	b348      	cbz	r0, 800ca54 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ca00:	8943      	ldrh	r3, [r0, #10]
 800ca02:	2b13      	cmp	r3, #19
 800ca04:	d806      	bhi.n	800ca14 <tcp_output_alloc_header_common.constprop.0+0x30>
 800ca06:	4b15      	ldr	r3, [pc, #84]	; (800ca5c <tcp_output_alloc_header_common.constprop.0+0x78>)
 800ca08:	f240 7223 	movw	r2, #1827	; 0x723
 800ca0c:	4914      	ldr	r1, [pc, #80]	; (800ca60 <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800ca0e:	4815      	ldr	r0, [pc, #84]	; (800ca64 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800ca10:	f002 fa60 	bl	800eed4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ca14:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800ca16:	4640      	mov	r0, r8
 800ca18:	f7fc fef4 	bl	8009804 <lwip_htons>
 800ca1c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ca1e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ca22:	f7fc feef 	bl	8009804 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800ca26:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800ca28:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7fc feed 	bl	800980a <lwip_htonl>
 800ca30:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ca32:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ca36:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800ca3a:	f7fc fee3 	bl	8009804 <lwip_htons>
 800ca3e:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ca40:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800ca44:	f7fc fede 	bl	8009804 <lwip_htons>
    tcphdr->chksum = 0;
 800ca48:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800ca4a:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800ca4c:	7423      	strb	r3, [r4, #16]
 800ca4e:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800ca50:	74a3      	strb	r3, [r4, #18]
 800ca52:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800ca54:	4628      	mov	r0, r5
 800ca56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5a:	bf00      	nop
 800ca5c:	0801d00a 	.word	0x0801d00a
 800ca60:	0801d11a 	.word	0x0801d11a
 800ca64:	0801a5dc 	.word	0x0801a5dc

0800ca68 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ca68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ca6e:	4604      	mov	r4, r0
 800ca70:	b930      	cbnz	r0, 800ca80 <tcp_output_alloc_header.constprop.0+0x18>
 800ca72:	4b0d      	ldr	r3, [pc, #52]	; (800caa8 <tcp_output_alloc_header.constprop.0+0x40>)
 800ca74:	f240 7242 	movw	r2, #1858	; 0x742
 800ca78:	490c      	ldr	r1, [pc, #48]	; (800caac <tcp_output_alloc_header.constprop.0+0x44>)
 800ca7a:	480d      	ldr	r0, [pc, #52]	; (800cab0 <tcp_output_alloc_header.constprop.0+0x48>)
 800ca7c:	f002 fa2a 	bl	800eed4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ca80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ca82:	4632      	mov	r2, r6
 800ca84:	4629      	mov	r1, r5
 800ca86:	9302      	str	r3, [sp, #8]
 800ca88:	2310      	movs	r3, #16
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	8b23      	ldrh	r3, [r4, #24]
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	8ae3      	ldrh	r3, [r4, #22]
 800ca92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca94:	f7ff ffa6 	bl	800c9e4 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ca98:	b118      	cbz	r0, 800caa2 <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ca9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800ca9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca9e:	4413      	add	r3, r2
 800caa0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800caa2:	b004      	add	sp, #16
 800caa4:	bd70      	pop	{r4, r5, r6, pc}
 800caa6:	bf00      	nop
 800caa8:	0801d00a 	.word	0x0801d00a
 800caac:	0801d148 	.word	0x0801d148
 800cab0:	0801a5dc 	.word	0x0801a5dc

0800cab4 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cab4:	b930      	cbnz	r0, 800cac4 <tcp_output_fill_options.constprop.0+0x10>
 800cab6:	4b04      	ldr	r3, [pc, #16]	; (800cac8 <tcp_output_fill_options.constprop.0+0x14>)
 800cab8:	f240 7256 	movw	r2, #1878	; 0x756
 800cabc:	4903      	ldr	r1, [pc, #12]	; (800cacc <tcp_output_fill_options.constprop.0+0x18>)
 800cabe:	4804      	ldr	r0, [pc, #16]	; (800cad0 <tcp_output_fill_options.constprop.0+0x1c>)
 800cac0:	f002 ba08 	b.w	800eed4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	0801d00a 	.word	0x0801d00a
 800cacc:	0801d16d 	.word	0x0801d16d
 800cad0:	0801a5dc 	.word	0x0801a5dc

0800cad4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	4604      	mov	r4, r0
 800cad8:	b085      	sub	sp, #20
 800cada:	4617      	mov	r7, r2
 800cadc:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cade:	460d      	mov	r5, r1
 800cae0:	b931      	cbnz	r1, 800caf0 <tcp_output_control_segment+0x1c>
 800cae2:	4b15      	ldr	r3, [pc, #84]	; (800cb38 <tcp_output_control_segment+0x64>)
 800cae4:	f240 7287 	movw	r2, #1927	; 0x787
 800cae8:	4914      	ldr	r1, [pc, #80]	; (800cb3c <tcp_output_control_segment+0x68>)
 800caea:	4815      	ldr	r0, [pc, #84]	; (800cb40 <tcp_output_control_segment+0x6c>)
 800caec:	f002 f9f2 	bl	800eed4 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800caf0:	b164      	cbz	r4, 800cb0c <tcp_output_control_segment+0x38>
 800caf2:	7a20      	ldrb	r0, [r4, #8]
 800caf4:	b150      	cbz	r0, 800cb0c <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800caf6:	f7fd fb21 	bl	800a13c <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800cafa:	b968      	cbnz	r0, 800cb18 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800cafc:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cb00:	4628      	mov	r0, r5
 800cb02:	f7fd fbd5 	bl	800a2b0 <pbuf_free>
  return err;
}
 800cb06:	4620      	mov	r0, r4
 800cb08:	b005      	add	sp, #20
 800cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f7fc f905 	bl	8008d1c <ip4_route>
  if (netif == NULL) {
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d0f2      	beq.n	800cafc <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800cb16:	b164      	cbz	r4, 800cb32 <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800cb18:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800cb1a:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cb1c:	2206      	movs	r2, #6
 800cb1e:	9002      	str	r0, [sp, #8]
 800cb20:	4639      	mov	r1, r7
 800cb22:	4628      	mov	r0, r5
 800cb24:	e9cd 4200 	strd	r4, r2, [sp]
 800cb28:	4632      	mov	r2, r6
 800cb2a:	f7fc fa65 	bl	8008ff8 <ip4_output_if>
 800cb2e:	4604      	mov	r4, r0
 800cb30:	e7e6      	b.n	800cb00 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800cb32:	23ff      	movs	r3, #255	; 0xff
 800cb34:	e7f2      	b.n	800cb1c <tcp_output_control_segment+0x48>
 800cb36:	bf00      	nop
 800cb38:	0801d00a 	.word	0x0801d00a
 800cb3c:	0801d193 	.word	0x0801d193
 800cb40:	0801a5dc 	.word	0x0801a5dc

0800cb44 <tcp_write>:
{
 800cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb48:	ed2d 8b02 	vpush	{d8}
 800cb4c:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb4e:	4604      	mov	r4, r0
{
 800cb50:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800cb52:	2300      	movs	r3, #0
{
 800cb54:	9107      	str	r1, [sp, #28]
 800cb56:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800cb58:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb5c:	b968      	cbnz	r0, 800cb7a <tcp_write+0x36>
 800cb5e:	4baa      	ldr	r3, [pc, #680]	; (800ce08 <tcp_write+0x2c4>)
 800cb60:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800cb64:	49a9      	ldr	r1, [pc, #676]	; (800ce0c <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cb66:	48aa      	ldr	r0, [pc, #680]	; (800ce10 <tcp_write+0x2cc>)
 800cb68:	f002 f9b4 	bl	800eed4 <iprintf>
 800cb6c:	f06f 000f 	mvn.w	r0, #15
}
 800cb70:	b00f      	add	sp, #60	; 0x3c
 800cb72:	ecbd 8b02 	vpop	{d8}
 800cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cb7a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800cb7e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800cb80:	085b      	lsrs	r3, r3, #1
 800cb82:	4293      	cmp	r3, r2
 800cb84:	bf28      	it	cs
 800cb86:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	bf08      	it	eq
 800cb8c:	4613      	moveq	r3, r2
 800cb8e:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cb90:	9b07      	ldr	r3, [sp, #28]
 800cb92:	b923      	cbnz	r3, 800cb9e <tcp_write+0x5a>
 800cb94:	4b9c      	ldr	r3, [pc, #624]	; (800ce08 <tcp_write+0x2c4>)
 800cb96:	f240 12ad 	movw	r2, #429	; 0x1ad
 800cb9a:	499e      	ldr	r1, [pc, #632]	; (800ce14 <tcp_write+0x2d0>)
 800cb9c:	e7e3      	b.n	800cb66 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800cb9e:	7d03      	ldrb	r3, [r0, #20]
 800cba0:	2b07      	cmp	r3, #7
 800cba2:	d003      	beq.n	800cbac <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800cba4:	3b02      	subs	r3, #2
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	f200 8259 	bhi.w	800d05e <tcp_write+0x51a>
  } else if (len == 0) {
 800cbac:	9b04      	ldr	r3, [sp, #16]
 800cbae:	b1db      	cbz	r3, 800cbe8 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800cbb0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800cbb4:	9a04      	ldr	r2, [sp, #16]
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d206      	bcs.n	800cbc8 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cbba:	8b63      	ldrh	r3, [r4, #26]
 800cbbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc0:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800cbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc6:	e7d3      	b.n	800cb70 <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cbc8:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800cbcc:	2a07      	cmp	r2, #7
 800cbce:	d8f4      	bhi.n	800cbba <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cbd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800cbd2:	b302      	cbz	r2, 800cc16 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cbd4:	b943      	cbnz	r3, 800cbe8 <tcp_write+0xa4>
 800cbd6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cbd8:	b933      	cbnz	r3, 800cbe8 <tcp_write+0xa4>
 800cbda:	4b8b      	ldr	r3, [pc, #556]	; (800ce08 <tcp_write+0x2c4>)
 800cbdc:	f240 1255 	movw	r2, #341	; 0x155
 800cbe0:	498d      	ldr	r1, [pc, #564]	; (800ce18 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cbe2:	488b      	ldr	r0, [pc, #556]	; (800ce10 <tcp_write+0x2cc>)
 800cbe4:	f002 f976 	bl	800eed4 <iprintf>
  queuelen = pcb->snd_queuelen;
 800cbe8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800cbec:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800cbee:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800cbf0:	b9de      	cbnz	r6, 800cc2a <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cbf2:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800cbf6:	2f00      	cmp	r7, #0
 800cbf8:	f000 81ba 	beq.w	800cf70 <tcp_write+0x42c>
 800cbfc:	4b82      	ldr	r3, [pc, #520]	; (800ce08 <tcp_write+0x2c4>)
 800cbfe:	f240 224a 	movw	r2, #586	; 0x24a
 800cc02:	4986      	ldr	r1, [pc, #536]	; (800ce1c <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cc04:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cc06:	4882      	ldr	r0, [pc, #520]	; (800ce10 <tcp_write+0x2cc>)
  struct pbuf *concat_p = NULL;
 800cc08:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800cc0a:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800cc0c:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800cc0e:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cc10:	f002 f960 	bl	800eed4 <iprintf>
 800cc14:	e088      	b.n	800cd28 <tcp_write+0x1e4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cc16:	b913      	cbnz	r3, 800cc1e <tcp_write+0xda>
 800cc18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0e4      	beq.n	800cbe8 <tcp_write+0xa4>
 800cc1e:	4b7a      	ldr	r3, [pc, #488]	; (800ce08 <tcp_write+0x2c4>)
 800cc20:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800cc24:	497e      	ldr	r1, [pc, #504]	; (800ce20 <tcp_write+0x2dc>)
 800cc26:	e7dc      	b.n	800cbe2 <tcp_write+0x9e>
 800cc28:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cc2a:	f8d6 a000 	ldr.w	sl, [r6]
 800cc2e:	46b0      	mov	r8, r6
 800cc30:	f1ba 0f00 	cmp.w	sl, #0
 800cc34:	d1f8      	bne.n	800cc28 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cc36:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cc38:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cc3a:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cc3c:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cc3e:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cc42:	442b      	add	r3, r5
 800cc44:	429a      	cmp	r2, r3
 800cc46:	da06      	bge.n	800cc56 <tcp_write+0x112>
 800cc48:	4b6f      	ldr	r3, [pc, #444]	; (800ce08 <tcp_write+0x2c4>)
 800cc4a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cc4e:	4975      	ldr	r1, [pc, #468]	; (800ce24 <tcp_write+0x2e0>)
 800cc50:	486f      	ldr	r0, [pc, #444]	; (800ce10 <tcp_write+0x2cc>)
 800cc52:	f002 f93f 	bl	800eed4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cc56:	8937      	ldrh	r7, [r6, #8]
 800cc58:	9b06      	ldr	r3, [sp, #24]
 800cc5a:	1bdf      	subs	r7, r3, r7
 800cc5c:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800cc5e:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cc62:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800cc64:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800cc68:	2d00      	cmp	r5, #0
 800cc6a:	d066      	beq.n	800cd3a <tcp_write+0x1f6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cc6c:	42bd      	cmp	r5, r7
 800cc6e:	d906      	bls.n	800cc7e <tcp_write+0x13a>
 800cc70:	4b65      	ldr	r3, [pc, #404]	; (800ce08 <tcp_write+0x2c4>)
 800cc72:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800cc76:	496c      	ldr	r1, [pc, #432]	; (800ce28 <tcp_write+0x2e4>)
 800cc78:	4865      	ldr	r0, [pc, #404]	; (800ce10 <tcp_write+0x2cc>)
 800cc7a:	f002 f92b 	bl	800eed4 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cc7e:	9d04      	ldr	r5, [sp, #16]
 800cc80:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800cc84:	429d      	cmp	r5, r3
 800cc86:	bf28      	it	cs
 800cc88:	461d      	movcs	r5, r3
 800cc8a:	42bd      	cmp	r5, r7
 800cc8c:	bf28      	it	cs
 800cc8e:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800cc90:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800cc92:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800cc94:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800cc96:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800cc98:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cc9c:	b153      	cbz	r3, 800ccb4 <tcp_write+0x170>
 800cc9e:	9b04      	ldr	r3, [sp, #16]
 800cca0:	42ab      	cmp	r3, r5
 800cca2:	f000 816a 	beq.w	800cf7a <tcp_write+0x436>
 800cca6:	4b58      	ldr	r3, [pc, #352]	; (800ce08 <tcp_write+0x2c4>)
 800cca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccac:	495f      	ldr	r1, [pc, #380]	; (800ce2c <tcp_write+0x2e8>)
 800ccae:	4858      	ldr	r0, [pc, #352]	; (800ce10 <tcp_write+0x2cc>)
 800ccb0:	f002 f910 	bl	800eed4 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ccb4:	9b04      	ldr	r3, [sp, #16]
 800ccb6:	429d      	cmp	r5, r3
 800ccb8:	f080 815f 	bcs.w	800cf7a <tcp_write+0x436>
 800ccbc:	2f00      	cmp	r7, #0
 800ccbe:	f000 8154 	beq.w	800cf6a <tcp_write+0x426>
 800ccc2:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800ccc6:	f1b9 0f00 	cmp.w	r9, #0
 800ccca:	f000 814f 	beq.w	800cf6c <tcp_write+0x428>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ccce:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ccd2:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ccd4:	45b9      	cmp	r9, r7
 800ccd6:	bfa8      	it	ge
 800ccd8:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ccda:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ccdc:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cce0:	d52d      	bpl.n	800cd3e <tcp_write+0x1fa>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cce2:	2301      	movs	r3, #1
 800cce4:	463a      	mov	r2, r7
 800cce6:	4631      	mov	r1, r6
 800cce8:	2000      	movs	r0, #0
 800ccea:	9302      	str	r3, [sp, #8]
 800ccec:	9b08      	ldr	r3, [sp, #32]
 800ccee:	e9cd 4300 	strd	r4, r3, [sp]
 800ccf2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800ccf6:	f7ff fdb7 	bl	800c868 <tcp_pbuf_prealloc>
 800ccfa:	4683      	mov	fp, r0
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	f000 81ab 	beq.w	800d058 <tcp_write+0x514>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cd02:	9b07      	ldr	r3, [sp, #28]
 800cd04:	4632      	mov	r2, r6
 800cd06:	6840      	ldr	r0, [r0, #4]
 800cd08:	1959      	adds	r1, r3, r5
 800cd0a:	f001 fc49 	bl	800e5a0 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800cd0e:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800cd10:	f7fd fc0a 	bl	800a528 <pbuf_clen>
 800cd14:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800cd16:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800cd1a:	4403      	add	r3, r0
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800cd20:	19af      	adds	r7, r5, r6
 800cd22:	46da      	mov	sl, fp
 800cd24:	4646      	mov	r6, r8
 800cd26:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cd28:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800cd2a:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cd2e:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800cd32:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cd36:	930a      	str	r3, [sp, #40]	; 0x28
 800cd38:	e0e6      	b.n	800cf08 <tcp_write+0x3c4>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cd3a:	462e      	mov	r6, r5
 800cd3c:	e7ba      	b.n	800ccb4 <tcp_write+0x170>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800cd3e:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cd42:	465a      	mov	r2, fp
 800cd44:	f8db b000 	ldr.w	fp, [fp]
 800cd48:	f1bb 0f00 	cmp.w	fp, #0
 800cd4c:	d1f9      	bne.n	800cd42 <tcp_write+0x1fe>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cd4e:	7b13      	ldrb	r3, [r2, #12]
 800cd50:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800cd54:	d10f      	bne.n	800cd76 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800cd56:	8951      	ldrh	r1, [r2, #10]
 800cd58:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cd5a:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800cd5c:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d109      	bne.n	800cd76 <tcp_write+0x232>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cd62:	b135      	cbz	r5, 800cd72 <tcp_write+0x22e>
 800cd64:	4b28      	ldr	r3, [pc, #160]	; (800ce08 <tcp_write+0x2c4>)
 800cd66:	f240 2231 	movw	r2, #561	; 0x231
 800cd6a:	4931      	ldr	r1, [pc, #196]	; (800ce30 <tcp_write+0x2ec>)
 800cd6c:	4828      	ldr	r0, [pc, #160]	; (800ce10 <tcp_write+0x2cc>)
 800cd6e:	f002 f8b1 	bl	800eed4 <iprintf>
          extendlen = seglen;
 800cd72:	46b1      	mov	r9, r6
 800cd74:	e7d4      	b.n	800cd20 <tcp_write+0x1dc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cd76:	2201      	movs	r2, #1
 800cd78:	4631      	mov	r1, r6
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	f7fd fb00 	bl	800a380 <pbuf_alloc>
 800cd80:	4683      	mov	fp, r0
 800cd82:	2800      	cmp	r0, #0
 800cd84:	f000 8168 	beq.w	800d058 <tcp_write+0x514>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800cd88:	9b07      	ldr	r3, [sp, #28]
 800cd8a:	442b      	add	r3, r5
 800cd8c:	6043      	str	r3, [r0, #4]
 800cd8e:	e7bf      	b.n	800cd10 <tcp_write+0x1cc>
    u16_t left = len - pos;
 800cd90:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cd92:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800cd94:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	bf28      	it	cs
 800cd9c:	4613      	movcs	r3, r2
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d046      	beq.n	800ce38 <tcp_write+0x2f4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cdaa:	fabb f38b 	clz	r3, fp
 800cdae:	ee18 1a10 	vmov	r1, s16
 800cdb2:	2036      	movs	r0, #54	; 0x36
 800cdb4:	095b      	lsrs	r3, r3, #5
 800cdb6:	9302      	str	r3, [sp, #8]
 800cdb8:	9b08      	ldr	r3, [sp, #32]
 800cdba:	e9cd 4300 	strd	r4, r3, [sp]
 800cdbe:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cdc2:	f7ff fd51 	bl	800c868 <tcp_pbuf_prealloc>
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d056      	beq.n	800ce7a <tcp_write+0x336>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cdcc:	8943      	ldrh	r3, [r0, #10]
 800cdce:	ee18 2a10 	vmov	r2, s16
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d206      	bcs.n	800cde4 <tcp_write+0x2a0>
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <tcp_write+0x2c4>)
 800cdd8:	f240 2266 	movw	r2, #614	; 0x266
 800cddc:	4915      	ldr	r1, [pc, #84]	; (800ce34 <tcp_write+0x2f0>)
 800cdde:	480c      	ldr	r0, [pc, #48]	; (800ce10 <tcp_write+0x2cc>)
 800cde0:	f002 f878 	bl	800eed4 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	ee18 2a10 	vmov	r2, s16
 800cdea:	6870      	ldr	r0, [r6, #4]
 800cdec:	19d9      	adds	r1, r3, r7
 800cdee:	f001 fbd7 	bl	800e5a0 <memcpy>
    queuelen += pbuf_clen(p);
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7fd fb98 	bl	800a528 <pbuf_clen>
 800cdf8:	9b05      	ldr	r3, [sp, #20]
 800cdfa:	4403      	add	r3, r0
 800cdfc:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cdfe:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800ce00:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ce02:	d963      	bls.n	800cecc <tcp_write+0x388>
      pbuf_free(p);
 800ce04:	4630      	mov	r0, r6
 800ce06:	e036      	b.n	800ce76 <tcp_write+0x332>
 800ce08:	0801d00a 	.word	0x0801d00a
 800ce0c:	0801d1bc 	.word	0x0801d1bc
 800ce10:	0801a5dc 	.word	0x0801a5dc
 800ce14:	0801d1d3 	.word	0x0801d1d3
 800ce18:	0801d204 	.word	0x0801d204
 800ce1c:	0801d2ee 	.word	0x0801d2ee
 800ce20:	0801d23e 	.word	0x0801d23e
 800ce24:	0801d270 	.word	0x0801d270
 800ce28:	0801d287 	.word	0x0801d287
 800ce2c:	0801d2a7 	.word	0x0801d2a7
 800ce30:	0801d2c5 	.word	0x0801d2c5
 800ce34:	0801d31d 	.word	0x0801d31d
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ce38:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800ce3c:	b133      	cbz	r3, 800ce4c <tcp_write+0x308>
 800ce3e:	4b89      	ldr	r3, [pc, #548]	; (800d064 <tcp_write+0x520>)
 800ce40:	f240 2271 	movw	r2, #625	; 0x271
 800ce44:	4988      	ldr	r1, [pc, #544]	; (800d068 <tcp_write+0x524>)
 800ce46:	4889      	ldr	r0, [pc, #548]	; (800d06c <tcp_write+0x528>)
 800ce48:	f002 f844 	bl	800eed4 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	ee18 1a10 	vmov	r1, s16
 800ce52:	2036      	movs	r0, #54	; 0x36
 800ce54:	f7fd fa94 	bl	800a380 <pbuf_alloc>
 800ce58:	b178      	cbz	r0, 800ce7a <tcp_write+0x336>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ce5a:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ce5c:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ce5e:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce60:	443a      	add	r2, r7
 800ce62:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ce64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce68:	2036      	movs	r0, #54	; 0x36
 800ce6a:	f7fd fa89 	bl	800a380 <pbuf_alloc>
 800ce6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce70:	4606      	mov	r6, r0
 800ce72:	bb38      	cbnz	r0, 800cec4 <tcp_write+0x380>
        pbuf_free(p2);
 800ce74:	4618      	mov	r0, r3
      pbuf_free(p);
 800ce76:	f7fd fa1b 	bl	800a2b0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ce7a:	8b63      	ldrh	r3, [r4, #26]
 800ce7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce80:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800ce82:	f1ba 0f00 	cmp.w	sl, #0
 800ce86:	d002      	beq.n	800ce8e <tcp_write+0x34a>
    pbuf_free(concat_p);
 800ce88:	4650      	mov	r0, sl
 800ce8a:	f7fd fa11 	bl	800a2b0 <pbuf_free>
  if (queue != NULL) {
 800ce8e:	f1bb 0f00 	cmp.w	fp, #0
 800ce92:	d002      	beq.n	800ce9a <tcp_write+0x356>
    tcp_segs_free(queue);
 800ce94:	4658      	mov	r0, fp
 800ce96:	f7fd fe4d 	bl	800ab34 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800ce9a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f43f ae8f 	beq.w	800cbc2 <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cea4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f47f ae8b 	bne.w	800cbc2 <tcp_write+0x7e>
 800ceac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f47f ae87 	bne.w	800cbc2 <tcp_write+0x7e>
 800ceb4:	4b6b      	ldr	r3, [pc, #428]	; (800d064 <tcp_write+0x520>)
 800ceb6:	f240 3227 	movw	r2, #807	; 0x327
 800ceba:	496d      	ldr	r1, [pc, #436]	; (800d070 <tcp_write+0x52c>)
 800cebc:	486b      	ldr	r0, [pc, #428]	; (800d06c <tcp_write+0x528>)
 800cebe:	f002 f809 	bl	800eed4 <iprintf>
 800cec2:	e67e      	b.n	800cbc2 <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800cec4:	4619      	mov	r1, r3
 800cec6:	f7fd fb53 	bl	800a570 <pbuf_cat>
 800ceca:	e792      	b.n	800cdf2 <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cecc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cece:	2200      	movs	r2, #0
 800ced0:	4631      	mov	r1, r6
 800ced2:	4620      	mov	r0, r4
 800ced4:	443b      	add	r3, r7
 800ced6:	9200      	str	r2, [sp, #0]
 800ced8:	f7ff fd12 	bl	800c900 <tcp_create_segment>
 800cedc:	4606      	mov	r6, r0
 800cede:	2800      	cmp	r0, #0
 800cee0:	d0cb      	beq.n	800ce7a <tcp_write+0x336>
    if (queue == NULL) {
 800cee2:	f1bb 0f00 	cmp.w	fp, #0
 800cee6:	d03e      	beq.n	800cf66 <tcp_write+0x422>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceea:	b933      	cbnz	r3, 800cefa <tcp_write+0x3b6>
 800ceec:	4b5d      	ldr	r3, [pc, #372]	; (800d064 <tcp_write+0x520>)
 800ceee:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cef2:	4960      	ldr	r1, [pc, #384]	; (800d074 <tcp_write+0x530>)
 800cef4:	485d      	ldr	r0, [pc, #372]	; (800d06c <tcp_write+0x528>)
 800cef6:	f001 ffed 	bl	800eed4 <iprintf>
      prev_seg->next = seg;
 800cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cefc:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800cefe:	ee18 3a10 	vmov	r3, s16
 800cf02:	9609      	str	r6, [sp, #36]	; 0x24
 800cf04:	441f      	add	r7, r3
 800cf06:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800cf08:	9b04      	ldr	r3, [sp, #16]
 800cf0a:	429f      	cmp	r7, r3
 800cf0c:	f4ff af40 	bcc.w	800cd90 <tcp_write+0x24c>
 800cf10:	4657      	mov	r7, sl
 800cf12:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800cf14:	b14d      	cbz	r5, 800cf2a <tcp_write+0x3e6>
    for (p = last_unsent->p; p; p = p->next) {
 800cf16:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cf1a:	f1bb 0f00 	cmp.w	fp, #0
 800cf1e:	d12f      	bne.n	800cf80 <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800cf20:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cf24:	441d      	add	r5, r3
 800cf26:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800cf2a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800cf2e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800cf32:	2f00      	cmp	r7, #0
 800cf34:	d03d      	beq.n	800cfb2 <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cf36:	f1b8 0f00 	cmp.w	r8, #0
 800cf3a:	d106      	bne.n	800cf4a <tcp_write+0x406>
 800cf3c:	4b49      	ldr	r3, [pc, #292]	; (800d064 <tcp_write+0x520>)
 800cf3e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cf42:	494d      	ldr	r1, [pc, #308]	; (800d078 <tcp_write+0x534>)
 800cf44:	4849      	ldr	r0, [pc, #292]	; (800d06c <tcp_write+0x528>)
 800cf46:	f001 ffc5 	bl	800eed4 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cf50:	f7fd fb0e 	bl	800a570 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cf54:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cf58:	893a      	ldrh	r2, [r7, #8]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800cf60:	f8c8 a000 	str.w	sl, [r8]
 800cf64:	e04d      	b.n	800d002 <tcp_write+0x4be>
 800cf66:	4683      	mov	fp, r0
 800cf68:	e7c9      	b.n	800cefe <tcp_write+0x3ba>
  u16_t extendlen = 0;
 800cf6a:	46b9      	mov	r9, r7
 800cf6c:	462f      	mov	r7, r5
 800cf6e:	e6db      	b.n	800cd28 <tcp_write+0x1e4>
 800cf70:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800cf72:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cf74:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800cf76:	46ba      	mov	sl, r7
 800cf78:	e6d6      	b.n	800cd28 <tcp_write+0x1e4>
 800cf7a:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800cf7c:	46b9      	mov	r9, r7
 800cf7e:	e7c9      	b.n	800cf14 <tcp_write+0x3d0>
      p->tot_len += oversize_used;
 800cf80:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800cf84:	442b      	add	r3, r5
 800cf86:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800cf8a:	f8db 3000 	ldr.w	r3, [fp]
 800cf8e:	b96b      	cbnz	r3, 800cfac <tcp_write+0x468>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cf90:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cf94:	462a      	mov	r2, r5
 800cf96:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800cf9a:	9907      	ldr	r1, [sp, #28]
 800cf9c:	4418      	add	r0, r3
 800cf9e:	f001 faff 	bl	800e5a0 <memcpy>
        p->len += oversize_used;
 800cfa2:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800cfa6:	442b      	add	r3, r5
 800cfa8:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cfac:	f8db b000 	ldr.w	fp, [fp]
 800cfb0:	e7b3      	b.n	800cf1a <tcp_write+0x3d6>
  } else if (extendlen > 0) {
 800cfb2:	f1b9 0f00 	cmp.w	r9, #0
 800cfb6:	d01f      	beq.n	800cff8 <tcp_write+0x4b4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cfb8:	f1b8 0f00 	cmp.w	r8, #0
 800cfbc:	d002      	beq.n	800cfc4 <tcp_write+0x480>
 800cfbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cfc2:	b933      	cbnz	r3, 800cfd2 <tcp_write+0x48e>
 800cfc4:	4b27      	ldr	r3, [pc, #156]	; (800d064 <tcp_write+0x520>)
 800cfc6:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cfca:	492c      	ldr	r1, [pc, #176]	; (800d07c <tcp_write+0x538>)
 800cfcc:	4827      	ldr	r0, [pc, #156]	; (800d06c <tcp_write+0x528>)
 800cfce:	f001 ff81 	bl	800eed4 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cfd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800cfd6:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cfd8:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800cfda:	444a      	add	r2, r9
 800cfdc:	b292      	uxth	r2, r2
 800cfde:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cfe0:	b941      	cbnz	r1, 800cff4 <tcp_write+0x4b0>
    p->len += extendlen;
 800cfe2:	895a      	ldrh	r2, [r3, #10]
 800cfe4:	444a      	add	r2, r9
 800cfe6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cfe8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cfec:	4499      	add	r9, r3
 800cfee:	f8a8 9008 	strh.w	r9, [r8, #8]
 800cff2:	e7b5      	b.n	800cf60 <tcp_write+0x41c>
      p->tot_len += extendlen;
 800cff4:	460b      	mov	r3, r1
 800cff6:	e7ee      	b.n	800cfd6 <tcp_write+0x492>
  if (last_unsent == NULL) {
 800cff8:	f1b8 0f00 	cmp.w	r8, #0
 800cffc:	d1b0      	bne.n	800cf60 <tcp_write+0x41c>
    pcb->unsent = queue;
 800cffe:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800d002:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d004:	9a04      	ldr	r2, [sp, #16]
 800d006:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800d008:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800d00c:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d00e:	9b04      	ldr	r3, [sp, #16]
 800d010:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800d012:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800d014:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d018:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800d01c:	b153      	cbz	r3, 800d034 <tcp_write+0x4f0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d01e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d020:	b943      	cbnz	r3, 800d034 <tcp_write+0x4f0>
 800d022:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d024:	b933      	cbnz	r3, 800d034 <tcp_write+0x4f0>
 800d026:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <tcp_write+0x520>)
 800d028:	f240 3212 	movw	r2, #786	; 0x312
 800d02c:	4910      	ldr	r1, [pc, #64]	; (800d070 <tcp_write+0x52c>)
 800d02e:	480f      	ldr	r0, [pc, #60]	; (800d06c <tcp_write+0x528>)
 800d030:	f001 ff50 	bl	800eed4 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d034:	b176      	cbz	r6, 800d054 <tcp_write+0x510>
 800d036:	68f0      	ldr	r0, [r6, #12]
 800d038:	2800      	cmp	r0, #0
 800d03a:	f43f ad99 	beq.w	800cb70 <tcp_write+0x2c>
 800d03e:	9b08      	ldr	r3, [sp, #32]
 800d040:	f013 0402 	ands.w	r4, r3, #2
 800d044:	d106      	bne.n	800d054 <tcp_write+0x510>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d046:	8985      	ldrh	r5, [r0, #12]
 800d048:	2008      	movs	r0, #8
 800d04a:	f7fc fbdb 	bl	8009804 <lwip_htons>
 800d04e:	68f3      	ldr	r3, [r6, #12]
 800d050:	4328      	orrs	r0, r5
 800d052:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800d054:	2000      	movs	r0, #0
 800d056:	e58b      	b.n	800cb70 <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d058:	f04f 0b00 	mov.w	fp, #0
 800d05c:	e70d      	b.n	800ce7a <tcp_write+0x336>
    return ERR_CONN;
 800d05e:	f06f 000a 	mvn.w	r0, #10
 800d062:	e585      	b.n	800cb70 <tcp_write+0x2c>
 800d064:	0801d00a 	.word	0x0801d00a
 800d068:	0801d35b 	.word	0x0801d35b
 800d06c:	0801a5dc 	.word	0x0801a5dc
 800d070:	0801d3e7 	.word	0x0801d3e7
 800d074:	0801d369 	.word	0x0801d369
 800d078:	0801d37a 	.word	0x0801d37a
 800d07c:	0801d3b2 	.word	0x0801d3b2

0800d080 <tcp_split_unsent_seg>:
{
 800d080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d086:	4606      	mov	r6, r0
 800d088:	b930      	cbnz	r0, 800d098 <tcp_split_unsent_seg+0x18>
 800d08a:	4b5d      	ldr	r3, [pc, #372]	; (800d200 <tcp_split_unsent_seg+0x180>)
 800d08c:	f240 324b 	movw	r2, #843	; 0x34b
 800d090:	495c      	ldr	r1, [pc, #368]	; (800d204 <tcp_split_unsent_seg+0x184>)
 800d092:	485d      	ldr	r0, [pc, #372]	; (800d208 <tcp_split_unsent_seg+0x188>)
 800d094:	f001 ff1e 	bl	800eed4 <iprintf>
  useg = pcb->unsent;
 800d098:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800d09a:	b914      	cbnz	r4, 800d0a2 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800d09c:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a0:	e009      	b.n	800d0b6 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800d0a2:	b95d      	cbnz	r5, 800d0bc <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d0a4:	4b56      	ldr	r3, [pc, #344]	; (800d200 <tcp_split_unsent_seg+0x180>)
 800d0a6:	f240 3253 	movw	r2, #851	; 0x353
 800d0aa:	4958      	ldr	r1, [pc, #352]	; (800d20c <tcp_split_unsent_seg+0x18c>)
 800d0ac:	4856      	ldr	r0, [pc, #344]	; (800d208 <tcp_split_unsent_seg+0x188>)
 800d0ae:	f001 ff11 	bl	800eed4 <iprintf>
    return ERR_VAL;
 800d0b2:	f06f 0005 	mvn.w	r0, #5
}
 800d0b6:	b003      	add	sp, #12
 800d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800d0bc:	8923      	ldrh	r3, [r4, #8]
 800d0be:	42ab      	cmp	r3, r5
 800d0c0:	d801      	bhi.n	800d0c6 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	e7f7      	b.n	800d0b6 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d0c6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800d0c8:	42ab      	cmp	r3, r5
 800d0ca:	d20f      	bcs.n	800d0ec <tcp_split_unsent_seg+0x6c>
 800d0cc:	4b4c      	ldr	r3, [pc, #304]	; (800d200 <tcp_split_unsent_seg+0x180>)
 800d0ce:	f240 325b 	movw	r2, #859	; 0x35b
 800d0d2:	494f      	ldr	r1, [pc, #316]	; (800d210 <tcp_split_unsent_seg+0x190>)
 800d0d4:	484c      	ldr	r0, [pc, #304]	; (800d208 <tcp_split_unsent_seg+0x188>)
 800d0d6:	f001 fefd 	bl	800eed4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d0da:	8923      	ldrh	r3, [r4, #8]
 800d0dc:	b933      	cbnz	r3, 800d0ec <tcp_split_unsent_seg+0x6c>
 800d0de:	4b48      	ldr	r3, [pc, #288]	; (800d200 <tcp_split_unsent_seg+0x180>)
 800d0e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d0e4:	494b      	ldr	r1, [pc, #300]	; (800d214 <tcp_split_unsent_seg+0x194>)
 800d0e6:	4848      	ldr	r0, [pc, #288]	; (800d208 <tcp_split_unsent_seg+0x188>)
 800d0e8:	f001 fef4 	bl	800eed4 <iprintf>
  optflags = useg->flags;
 800d0ec:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d0f0:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800d0f4:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d0f8:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d0fa:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800d0fe:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d102:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800d106:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d10a:	fa17 f181 	uxtah	r1, r7, r1
 800d10e:	b289      	uxth	r1, r1
 800d110:	f7fd f936 	bl	800a380 <pbuf_alloc>
  if (p == NULL) {
 800d114:	4681      	mov	r9, r0
 800d116:	2800      	cmp	r0, #0
 800d118:	d0c0      	beq.n	800d09c <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800d11a:	6860      	ldr	r0, [r4, #4]
 800d11c:	8922      	ldrh	r2, [r4, #8]
 800d11e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d120:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800d124:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d126:	4642      	mov	r2, r8
 800d128:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800d12a:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	f7fd fae5 	bl	800a6fc <pbuf_copy_partial>
 800d132:	4540      	cmp	r0, r8
 800d134:	d160      	bne.n	800d1f8 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d136:	68e3      	ldr	r3, [r4, #12]
 800d138:	8998      	ldrh	r0, [r3, #12]
 800d13a:	f7fc fb63 	bl	8009804 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800d13e:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d142:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800d144:	bf16      	itet	ne
 800d146:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d14a:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800d14e:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800d152:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d154:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800d156:	bf48      	it	mi
 800d158:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d15c:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800d15e:	bf48      	it	mi
 800d160:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d164:	f7fc fb51 	bl	800980a <lwip_htonl>
 800d168:	4642      	mov	r2, r8
 800d16a:	182b      	adds	r3, r5, r0
 800d16c:	4649      	mov	r1, r9
 800d16e:	4630      	mov	r0, r6
 800d170:	f8cd b000 	str.w	fp, [sp]
 800d174:	f7ff fbc4 	bl	800c900 <tcp_create_segment>
  if (seg == NULL) {
 800d178:	4680      	mov	r8, r0
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d03c      	beq.n	800d1f8 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d17e:	6860      	ldr	r0, [r4, #4]
 800d180:	eba5 050a 	sub.w	r5, r5, sl
 800d184:	f7fd f9d0 	bl	800a528 <pbuf_clen>
 800d188:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d18c:	fa1f f985 	uxth.w	r9, r5
 800d190:	1a18      	subs	r0, r3, r0
 800d192:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d196:	6860      	ldr	r0, [r4, #4]
 800d198:	8901      	ldrh	r1, [r0, #8]
 800d19a:	fa11 f185 	uxtah	r1, r1, r5
 800d19e:	b289      	uxth	r1, r1
 800d1a0:	f7fd f96a 	bl	800a478 <pbuf_realloc>
  useg->len -= remainder;
 800d1a4:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d1a6:	4638      	mov	r0, r7
  useg->len -= remainder;
 800d1a8:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d1aa:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800d1ac:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d1b0:	899d      	ldrh	r5, [r3, #12]
 800d1b2:	f7fc fb27 	bl	8009804 <lwip_htons>
 800d1b6:	68e3      	ldr	r3, [r4, #12]
 800d1b8:	4328      	orrs	r0, r5
 800d1ba:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d1bc:	6860      	ldr	r0, [r4, #4]
 800d1be:	f7fd f9b3 	bl	800a528 <pbuf_clen>
 800d1c2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d1c6:	4418      	add	r0, r3
 800d1c8:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d1cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d1d0:	f7fd f9aa 	bl	800a528 <pbuf_clen>
 800d1d4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d1d8:	4418      	add	r0, r3
  seg->next = useg->next;
 800d1da:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d1dc:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800d1e0:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800d1e4:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800d1e8:	f8d8 0000 	ldr.w	r0, [r8]
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	f47f af68 	bne.w	800d0c2 <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800d1f2:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800d1f6:	e75e      	b.n	800d0b6 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800d1f8:	4648      	mov	r0, r9
 800d1fa:	f7fd f859 	bl	800a2b0 <pbuf_free>
 800d1fe:	e74d      	b.n	800d09c <tcp_split_unsent_seg+0x1c>
 800d200:	0801d00a 	.word	0x0801d00a
 800d204:	0801d405 	.word	0x0801d405
 800d208:	0801a5dc 	.word	0x0801a5dc
 800d20c:	0801d427 	.word	0x0801d427
 800d210:	0801d449 	.word	0x0801d449
 800d214:	0801d456 	.word	0x0801d456

0800d218 <tcp_enqueue_flags>:
{
 800d218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d21c:	f011 0803 	ands.w	r8, r1, #3
{
 800d220:	4604      	mov	r4, r0
 800d222:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d224:	d106      	bne.n	800d234 <tcp_enqueue_flags+0x1c>
 800d226:	4b3e      	ldr	r3, [pc, #248]	; (800d320 <tcp_enqueue_flags+0x108>)
 800d228:	f240 4211 	movw	r2, #1041	; 0x411
 800d22c:	493d      	ldr	r1, [pc, #244]	; (800d324 <tcp_enqueue_flags+0x10c>)
 800d22e:	483e      	ldr	r0, [pc, #248]	; (800d328 <tcp_enqueue_flags+0x110>)
 800d230:	f001 fe50 	bl	800eed4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d234:	b934      	cbnz	r4, 800d244 <tcp_enqueue_flags+0x2c>
 800d236:	4b3a      	ldr	r3, [pc, #232]	; (800d320 <tcp_enqueue_flags+0x108>)
 800d238:	f240 4213 	movw	r2, #1043	; 0x413
 800d23c:	493b      	ldr	r1, [pc, #236]	; (800d32c <tcp_enqueue_flags+0x114>)
 800d23e:	483a      	ldr	r0, [pc, #232]	; (800d328 <tcp_enqueue_flags+0x110>)
 800d240:	f001 fe48 	bl	800eed4 <iprintf>
  if (flags & TCP_SYN) {
 800d244:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d248:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d24c:	2036      	movs	r0, #54	; 0x36
 800d24e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800d252:	4649      	mov	r1, r9
 800d254:	f7fd f894 	bl	800a380 <pbuf_alloc>
 800d258:	4605      	mov	r5, r0
 800d25a:	b940      	cbnz	r0, 800d26e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d25c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800d25e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d266:	8363      	strh	r3, [r4, #26]
}
 800d268:	b003      	add	sp, #12
 800d26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d26e:	8943      	ldrh	r3, [r0, #10]
 800d270:	454b      	cmp	r3, r9
 800d272:	d206      	bcs.n	800d282 <tcp_enqueue_flags+0x6a>
 800d274:	4b2a      	ldr	r3, [pc, #168]	; (800d320 <tcp_enqueue_flags+0x108>)
 800d276:	f240 4239 	movw	r2, #1081	; 0x439
 800d27a:	492d      	ldr	r1, [pc, #180]	; (800d330 <tcp_enqueue_flags+0x118>)
 800d27c:	482a      	ldr	r0, [pc, #168]	; (800d328 <tcp_enqueue_flags+0x110>)
 800d27e:	f001 fe29 	bl	800eed4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d282:	4629      	mov	r1, r5
 800d284:	9700      	str	r7, [sp, #0]
 800d286:	4632      	mov	r2, r6
 800d288:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d28a:	4620      	mov	r0, r4
 800d28c:	f7ff fb38 	bl	800c900 <tcp_create_segment>
 800d290:	4605      	mov	r5, r0
 800d292:	2800      	cmp	r0, #0
 800d294:	d0e2      	beq.n	800d25c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d296:	68c3      	ldr	r3, [r0, #12]
 800d298:	079a      	lsls	r2, r3, #30
 800d29a:	d006      	beq.n	800d2aa <tcp_enqueue_flags+0x92>
 800d29c:	4b20      	ldr	r3, [pc, #128]	; (800d320 <tcp_enqueue_flags+0x108>)
 800d29e:	f240 4242 	movw	r2, #1090	; 0x442
 800d2a2:	4924      	ldr	r1, [pc, #144]	; (800d334 <tcp_enqueue_flags+0x11c>)
 800d2a4:	4820      	ldr	r0, [pc, #128]	; (800d328 <tcp_enqueue_flags+0x110>)
 800d2a6:	f001 fe15 	bl	800eed4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d2aa:	892b      	ldrh	r3, [r5, #8]
 800d2ac:	b133      	cbz	r3, 800d2bc <tcp_enqueue_flags+0xa4>
 800d2ae:	4b1c      	ldr	r3, [pc, #112]	; (800d320 <tcp_enqueue_flags+0x108>)
 800d2b0:	f240 4243 	movw	r2, #1091	; 0x443
 800d2b4:	4920      	ldr	r1, [pc, #128]	; (800d338 <tcp_enqueue_flags+0x120>)
 800d2b6:	481c      	ldr	r0, [pc, #112]	; (800d328 <tcp_enqueue_flags+0x110>)
 800d2b8:	f001 fe0c 	bl	800eed4 <iprintf>
  if (pcb->unsent == NULL) {
 800d2bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d2be:	bb43      	cbnz	r3, 800d312 <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800d2c0:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d2c8:	f1b8 0f00 	cmp.w	r8, #0
 800d2cc:	d002      	beq.n	800d2d4 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800d2ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800d2d4:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d2d6:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800d2d8:	bf42      	ittt	mi
 800d2da:	8b63      	ldrhmi	r3, [r4, #26]
 800d2dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d2e0:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d2e2:	f7fd f921 	bl	800a528 <pbuf_clen>
 800d2e6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d2ea:	4418      	add	r0, r3
 800d2ec:	b280      	uxth	r0, r0
 800d2ee:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d0b8      	beq.n	800d268 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d2f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800d2f8:	b948      	cbnz	r0, 800d30e <tcp_enqueue_flags+0xf6>
 800d2fa:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800d2fc:	2c00      	cmp	r4, #0
 800d2fe:	d1b3      	bne.n	800d268 <tcp_enqueue_flags+0x50>
 800d300:	4b07      	ldr	r3, [pc, #28]	; (800d320 <tcp_enqueue_flags+0x108>)
 800d302:	f240 4265 	movw	r2, #1125	; 0x465
 800d306:	490d      	ldr	r1, [pc, #52]	; (800d33c <tcp_enqueue_flags+0x124>)
 800d308:	4807      	ldr	r0, [pc, #28]	; (800d328 <tcp_enqueue_flags+0x110>)
 800d30a:	f001 fde3 	bl	800eed4 <iprintf>
  return ERR_OK;
 800d30e:	2000      	movs	r0, #0
 800d310:	e7aa      	b.n	800d268 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d312:	461a      	mov	r2, r3
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1fb      	bne.n	800d312 <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800d31a:	6015      	str	r5, [r2, #0]
 800d31c:	e7d1      	b.n	800d2c2 <tcp_enqueue_flags+0xaa>
 800d31e:	bf00      	nop
 800d320:	0801d00a 	.word	0x0801d00a
 800d324:	0801d464 	.word	0x0801d464
 800d328:	0801a5dc 	.word	0x0801a5dc
 800d32c:	0801d4b9 	.word	0x0801d4b9
 800d330:	0801d4d8 	.word	0x0801d4d8
 800d334:	0801d511 	.word	0x0801d511
 800d338:	0801d529 	.word	0x0801d529
 800d33c:	0801d553 	.word	0x0801d553

0800d340 <tcp_send_fin>:
{
 800d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d342:	4604      	mov	r4, r0
 800d344:	b930      	cbnz	r0, 800d354 <tcp_send_fin+0x14>
 800d346:	4b13      	ldr	r3, [pc, #76]	; (800d394 <tcp_send_fin+0x54>)
 800d348:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d34c:	4912      	ldr	r1, [pc, #72]	; (800d398 <tcp_send_fin+0x58>)
 800d34e:	4813      	ldr	r0, [pc, #76]	; (800d39c <tcp_send_fin+0x5c>)
 800d350:	f001 fdc0 	bl	800eed4 <iprintf>
  if (pcb->unsent != NULL) {
 800d354:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800d356:	b14d      	cbz	r5, 800d36c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d358:	462f      	mov	r7, r5
 800d35a:	682d      	ldr	r5, [r5, #0]
 800d35c:	2d00      	cmp	r5, #0
 800d35e:	d1fb      	bne.n	800d358 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	8998      	ldrh	r0, [r3, #12]
 800d364:	f7fc fa4e 	bl	8009804 <lwip_htons>
 800d368:	0743      	lsls	r3, r0, #29
 800d36a:	d005      	beq.n	800d378 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d36c:	4620      	mov	r0, r4
 800d36e:	2101      	movs	r1, #1
}
 800d370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d374:	f7ff bf50 	b.w	800d218 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2001      	movs	r0, #1
 800d37c:	899e      	ldrh	r6, [r3, #12]
 800d37e:	f7fc fa41 	bl	8009804 <lwip_htons>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4330      	orrs	r0, r6
 800d386:	8198      	strh	r0, [r3, #12]
}
 800d388:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800d38a:	8b63      	ldrh	r3, [r4, #26]
 800d38c:	f043 0320 	orr.w	r3, r3, #32
 800d390:	8363      	strh	r3, [r4, #26]
}
 800d392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d394:	0801d00a 	.word	0x0801d00a
 800d398:	0801d57b 	.word	0x0801d57b
 800d39c:	0801a5dc 	.word	0x0801a5dc

0800d3a0 <tcp_rexmit_rto_prepare>:
{
 800d3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	b930      	cbnz	r0, 800d3b6 <tcp_rexmit_rto_prepare+0x16>
 800d3a8:	4b1c      	ldr	r3, [pc, #112]	; (800d41c <tcp_rexmit_rto_prepare+0x7c>)
 800d3aa:	f240 6263 	movw	r2, #1635	; 0x663
 800d3ae:	491c      	ldr	r1, [pc, #112]	; (800d420 <tcp_rexmit_rto_prepare+0x80>)
 800d3b0:	481c      	ldr	r0, [pc, #112]	; (800d424 <tcp_rexmit_rto_prepare+0x84>)
 800d3b2:	f001 fd8f 	bl	800eed4 <iprintf>
  if (pcb->unacked == NULL) {
 800d3b6:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d3b8:	b945      	cbnz	r5, 800d3cc <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800d3ba:	f06f 0005 	mvn.w	r0, #5
}
 800d3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800d3c2:	f7ff fa3b 	bl	800c83c <tcp_output_segment_busy>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d1f7      	bne.n	800d3ba <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3ca:	682d      	ldr	r5, [r5, #0]
 800d3cc:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800d3ce:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1f6      	bne.n	800d3c2 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800d3d4:	f7ff fa32 	bl	800c83c <tcp_output_segment_busy>
 800d3d8:	4606      	mov	r6, r0
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d1ed      	bne.n	800d3ba <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800d3de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d3e0:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800d3e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800d3e4:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800d3e8:	8b63      	ldrh	r3, [r4, #26]
 800d3ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d3ee:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3f0:	68eb      	ldr	r3, [r5, #12]
 800d3f2:	6858      	ldr	r0, [r3, #4]
 800d3f4:	f7fc fa09 	bl	800980a <lwip_htonl>
 800d3f8:	68eb      	ldr	r3, [r5, #12]
 800d3fa:	4607      	mov	r7, r0
 800d3fc:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d400:	8998      	ldrh	r0, [r3, #12]
 800d402:	f7fc f9ff 	bl	8009804 <lwip_htons>
 800d406:	f010 0303 	ands.w	r3, r0, #3
 800d40a:	4447      	add	r7, r8
  return ERR_OK;
 800d40c:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d40e:	bf18      	it	ne
 800d410:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800d412:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d414:	443b      	add	r3, r7
 800d416:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800d418:	e7d1      	b.n	800d3be <tcp_rexmit_rto_prepare+0x1e>
 800d41a:	bf00      	nop
 800d41c:	0801d00a 	.word	0x0801d00a
 800d420:	0801d595 	.word	0x0801d595
 800d424:	0801a5dc 	.word	0x0801a5dc

0800d428 <tcp_rexmit>:
{
 800d428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d42a:	4604      	mov	r4, r0
 800d42c:	b930      	cbnz	r0, 800d43c <tcp_rexmit+0x14>
 800d42e:	4b1b      	ldr	r3, [pc, #108]	; (800d49c <tcp_rexmit+0x74>)
 800d430:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d434:	491a      	ldr	r1, [pc, #104]	; (800d4a0 <tcp_rexmit+0x78>)
 800d436:	481b      	ldr	r0, [pc, #108]	; (800d4a4 <tcp_rexmit+0x7c>)
 800d438:	f001 fd4c 	bl	800eed4 <iprintf>
  if (pcb->unacked == NULL) {
 800d43c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d43e:	b915      	cbnz	r5, 800d446 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800d440:	f06f 0005 	mvn.w	r0, #5
}
 800d444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800d446:	4628      	mov	r0, r5
 800d448:	f7ff f9f8 	bl	800c83c <tcp_output_segment_busy>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d1f7      	bne.n	800d440 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800d450:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800d452:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800d456:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800d458:	6833      	ldr	r3, [r6, #0]
 800d45a:	b983      	cbnz	r3, 800d47e <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800d45c:	6833      	ldr	r3, [r6, #0]
 800d45e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800d460:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	b90b      	cbnz	r3, 800d46a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800d466:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800d46a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800d46e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800d470:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800d472:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800d474:	bf1c      	itt	ne
 800d476:	3301      	addne	r3, #1
 800d478:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800d47c:	e7e2      	b.n	800d444 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	6858      	ldr	r0, [r3, #4]
 800d482:	f7fc f9c2 	bl	800980a <lwip_htonl>
 800d486:	68eb      	ldr	r3, [r5, #12]
 800d488:	4607      	mov	r7, r0
 800d48a:	6858      	ldr	r0, [r3, #4]
 800d48c:	f7fc f9bd 	bl	800980a <lwip_htonl>
 800d490:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800d492:	2800      	cmp	r0, #0
 800d494:	dae2      	bge.n	800d45c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800d496:	6836      	ldr	r6, [r6, #0]
 800d498:	e7de      	b.n	800d458 <tcp_rexmit+0x30>
 800d49a:	bf00      	nop
 800d49c:	0801d00a 	.word	0x0801d00a
 800d4a0:	0801d5b9 	.word	0x0801d5b9
 800d4a4:	0801a5dc 	.word	0x0801a5dc

0800d4a8 <tcp_rexmit_fast>:
{
 800d4a8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	b930      	cbnz	r0, 800d4bc <tcp_rexmit_fast+0x14>
 800d4ae:	4b15      	ldr	r3, [pc, #84]	; (800d504 <tcp_rexmit_fast+0x5c>)
 800d4b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d4b4:	4914      	ldr	r1, [pc, #80]	; (800d508 <tcp_rexmit_fast+0x60>)
 800d4b6:	4815      	ldr	r0, [pc, #84]	; (800d50c <tcp_rexmit_fast+0x64>)
 800d4b8:	f001 fd0c 	bl	800eed4 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d4bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d4be:	b1fb      	cbz	r3, 800d500 <tcp_rexmit_fast+0x58>
 800d4c0:	8b63      	ldrh	r3, [r4, #26]
 800d4c2:	075b      	lsls	r3, r3, #29
 800d4c4:	d41c      	bmi.n	800d500 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f7ff ffae 	bl	800d428 <tcp_rexmit>
 800d4cc:	b9c0      	cbnz	r0, 800d500 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d4ce:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800d4d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800d4d6:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d4d8:	4299      	cmp	r1, r3
 800d4da:	bf28      	it	cs
 800d4dc:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d4de:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d4e0:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d4e2:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800d4e4:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d4e8:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800d4ea:	bf88      	it	hi
 800d4ec:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d4ee:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800d4f0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d4f4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d4f8:	8b63      	ldrh	r3, [r4, #26]
 800d4fa:	f043 0304 	orr.w	r3, r3, #4
 800d4fe:	8363      	strh	r3, [r4, #26]
}
 800d500:	bd38      	pop	{r3, r4, r5, pc}
 800d502:	bf00      	nop
 800d504:	0801d00a 	.word	0x0801d00a
 800d508:	0801d5d1 	.word	0x0801d5d1
 800d50c:	0801a5dc 	.word	0x0801a5dc

0800d510 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d514:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d518:	4606      	mov	r6, r0
 800d51a:	460f      	mov	r7, r1
 800d51c:	4614      	mov	r4, r2
 800d51e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d522:	461d      	mov	r5, r3
{
 800d524:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d528:	b933      	cbnz	r3, 800d538 <tcp_rst+0x28>
 800d52a:	4b18      	ldr	r3, [pc, #96]	; (800d58c <tcp_rst+0x7c>)
 800d52c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d530:	4917      	ldr	r1, [pc, #92]	; (800d590 <tcp_rst+0x80>)
 800d532:	4818      	ldr	r0, [pc, #96]	; (800d594 <tcp_rst+0x84>)
 800d534:	f001 fcce 	bl	800eed4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d538:	f1b8 0f00 	cmp.w	r8, #0
 800d53c:	d106      	bne.n	800d54c <tcp_rst+0x3c>
 800d53e:	4b13      	ldr	r3, [pc, #76]	; (800d58c <tcp_rst+0x7c>)
 800d540:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d544:	4914      	ldr	r1, [pc, #80]	; (800d598 <tcp_rst+0x88>)
 800d546:	4813      	ldr	r0, [pc, #76]	; (800d594 <tcp_rst+0x84>)
 800d548:	f001 fcc4 	bl	800eed4 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d54c:	4638      	mov	r0, r7
 800d54e:	f7fc f95c 	bl	800980a <lwip_htonl>
 800d552:	2314      	movs	r3, #20
 800d554:	f646 010b 	movw	r1, #26635	; 0x680b
 800d558:	4602      	mov	r2, r0
 800d55a:	f8cd a000 	str.w	sl, [sp]
 800d55e:	4620      	mov	r0, r4
 800d560:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d564:	464b      	mov	r3, r9
 800d566:	2100      	movs	r1, #0
 800d568:	f7ff fa3c 	bl	800c9e4 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d56c:	4604      	mov	r4, r0
 800d56e:	b150      	cbz	r0, 800d586 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d570:	f7ff faa0 	bl	800cab4 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d574:	4643      	mov	r3, r8
 800d576:	462a      	mov	r2, r5
 800d578:	4621      	mov	r1, r4
 800d57a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d57c:	b004      	add	sp, #16
 800d57e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d582:	f7ff baa7 	b.w	800cad4 <tcp_output_control_segment>
}
 800d586:	b004      	add	sp, #16
 800d588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58c:	0801d00a 	.word	0x0801d00a
 800d590:	0801d5ee 	.word	0x0801d5ee
 800d594:	0801a5dc 	.word	0x0801a5dc
 800d598:	0801d608 	.word	0x0801d608

0800d59c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d59c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d59e:	4604      	mov	r4, r0
 800d5a0:	b930      	cbnz	r0, 800d5b0 <tcp_send_empty_ack+0x14>
 800d5a2:	4b14      	ldr	r3, [pc, #80]	; (800d5f4 <tcp_send_empty_ack+0x58>)
 800d5a4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d5a8:	4913      	ldr	r1, [pc, #76]	; (800d5f8 <tcp_send_empty_ack+0x5c>)
 800d5aa:	4814      	ldr	r0, [pc, #80]	; (800d5fc <tcp_send_empty_ack+0x60>)
 800d5ac:	f001 fc92 	bl	800eed4 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d5b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d5b2:	f7fc f92a 	bl	800980a <lwip_htonl>
 800d5b6:	2100      	movs	r1, #0
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff fa54 	bl	800ca68 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	b930      	cbnz	r0, 800d5d2 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5c4:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d5c6:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5ca:	f043 0303 	orr.w	r3, r3, #3
 800d5ce:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800d5d0:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d5d2:	f7ff fa6f 	bl	800cab4 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5d6:	1d23      	adds	r3, r4, #4
 800d5d8:	4622      	mov	r2, r4
 800d5da:	4629      	mov	r1, r5
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f7ff fa79 	bl	800cad4 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800d5e2:	8b63      	ldrh	r3, [r4, #26]
 800d5e4:	b118      	cbz	r0, 800d5ee <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5e6:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5ea:	8363      	strh	r3, [r4, #26]
 800d5ec:	e7f0      	b.n	800d5d0 <tcp_send_empty_ack+0x34>
 800d5ee:	f023 0303 	bic.w	r3, r3, #3
 800d5f2:	e7fa      	b.n	800d5ea <tcp_send_empty_ack+0x4e>
 800d5f4:	0801d00a 	.word	0x0801d00a
 800d5f8:	0801d623 	.word	0x0801d623
 800d5fc:	0801a5dc 	.word	0x0801a5dc

0800d600 <tcp_output>:
{
 800d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d604:	4604      	mov	r4, r0
{
 800d606:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d608:	b930      	cbnz	r0, 800d618 <tcp_output+0x18>
 800d60a:	4b8f      	ldr	r3, [pc, #572]	; (800d848 <tcp_output+0x248>)
 800d60c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d610:	498e      	ldr	r1, [pc, #568]	; (800d84c <tcp_output+0x24c>)
 800d612:	488f      	ldr	r0, [pc, #572]	; (800d850 <tcp_output+0x250>)
 800d614:	f001 fc5e 	bl	800eed4 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d618:	7d23      	ldrb	r3, [r4, #20]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d106      	bne.n	800d62c <tcp_output+0x2c>
 800d61e:	4b8a      	ldr	r3, [pc, #552]	; (800d848 <tcp_output+0x248>)
 800d620:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d624:	498b      	ldr	r1, [pc, #556]	; (800d854 <tcp_output+0x254>)
 800d626:	488a      	ldr	r0, [pc, #552]	; (800d850 <tcp_output+0x250>)
 800d628:	f001 fc54 	bl	800eed4 <iprintf>
  if (tcp_input_pcb == pcb) {
 800d62c:	4b8a      	ldr	r3, [pc, #552]	; (800d858 <tcp_output+0x258>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	42a3      	cmp	r3, r4
 800d632:	f000 8171 	beq.w	800d918 <tcp_output+0x318>
  seg = pcb->unsent;
 800d636:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800d638:	b94d      	cbnz	r5, 800d64e <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800d63a:	8b63      	ldrh	r3, [r4, #26]
 800d63c:	0798      	lsls	r0, r3, #30
 800d63e:	f140 8167 	bpl.w	800d910 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800d642:	4620      	mov	r0, r4
}
 800d644:	b007      	add	sp, #28
 800d646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800d64a:	f7ff bfa7 	b.w	800d59c <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d64e:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d650:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d654:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800d658:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d65c:	b340      	cbz	r0, 800d6b0 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800d65e:	f7fc fd6d 	bl	800a13c <netif_get_by_index>
    return ip_route(src, dst);
 800d662:	4607      	mov	r7, r0
  if (netif == NULL) {
 800d664:	2800      	cmp	r0, #0
 800d666:	f000 8170 	beq.w	800d94a <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	b90b      	cbnz	r3, 800d672 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d66e:	6843      	ldr	r3, [r0, #4]
 800d670:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d672:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d674:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d676:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d678:	bf28      	it	cs
 800d67a:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d67c:	f7fc f8c5 	bl	800980a <lwip_htonl>
 800d680:	892b      	ldrh	r3, [r5, #8]
 800d682:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	4418      	add	r0, r3
 800d688:	4540      	cmp	r0, r8
 800d68a:	d915      	bls.n	800d6b8 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d68c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800d690:	4543      	cmp	r3, r8
 800d692:	d1d2      	bne.n	800d63a <tcp_output+0x3a>
 800d694:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1cf      	bne.n	800d63a <tcp_output+0x3a>
 800d69a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1cb      	bne.n	800d63a <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800d6a2:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800d6a6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800d6aa:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800d6ae:	e7c4      	b.n	800d63a <tcp_output+0x3a>
    return ip_route(src, dst);
 800d6b0:	4648      	mov	r0, r9
 800d6b2:	f7fb fb33 	bl	8008d1c <ip4_route>
 800d6b6:	e7d4      	b.n	800d662 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800d6b8:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800d6ba:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800d6bc:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800d6c0:	b126      	cbz	r6, 800d6cc <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800d6c2:	4633      	mov	r3, r6
 800d6c4:	6836      	ldr	r6, [r6, #0]
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	d1fb      	bne.n	800d6c2 <tcp_output+0xc2>
 800d6ca:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800d6cc:	f8df a178 	ldr.w	sl, [pc, #376]	; 800d848 <tcp_output+0x248>
 800d6d0:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800d850 <tcp_output+0x250>
 800d6d4:	e0de      	b.n	800d894 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800d6d6:	7d23      	ldrb	r3, [r4, #20]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d009      	beq.n	800d6f0 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d6dc:	68eb      	ldr	r3, [r5, #12]
 800d6de:	2010      	movs	r0, #16
 800d6e0:	899b      	ldrh	r3, [r3, #12]
 800d6e2:	9304      	str	r3, [sp, #16]
 800d6e4:	f7fc f88e 	bl	8009804 <lwip_htons>
 800d6e8:	9b04      	ldr	r3, [sp, #16]
 800d6ea:	68ea      	ldr	r2, [r5, #12]
 800d6ec:	4318      	orrs	r0, r3
 800d6ee:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	f7ff f8a3 	bl	800c83c <tcp_output_segment_busy>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d16f      	bne.n	800d7da <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d6fa:	68eb      	ldr	r3, [r5, #12]
 800d6fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6fe:	9304      	str	r3, [sp, #16]
 800d700:	f7fc f883 	bl	800980a <lwip_htonl>
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d708:	68eb      	ldr	r3, [r5, #12]
 800d70a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800d70c:	9304      	str	r3, [sp, #16]
 800d70e:	f7fc f879 	bl	8009804 <lwip_htons>
 800d712:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d714:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d716:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d71a:	4413      	add	r3, r2
 800d71c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d71e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d720:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d722:	07d2      	lsls	r2, r2, #31
 800d724:	d449      	bmi.n	800d7ba <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d726:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800d72a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800d72e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800d730:	bfbc      	itt	lt
 800d732:	2300      	movlt	r3, #0
 800d734:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800d736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d738:	b94b      	cbnz	r3, 800d74e <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800d73a:	4948      	ldr	r1, [pc, #288]	; (800d85c <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d73c:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800d73e:	6809      	ldr	r1, [r1, #0]
 800d740:	9204      	str	r2, [sp, #16]
 800d742:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d744:	6858      	ldr	r0, [r3, #4]
 800d746:	f7fc f860 	bl	800980a <lwip_htonl>
 800d74a:	9a04      	ldr	r2, [sp, #16]
 800d74c:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d74e:	6869      	ldr	r1, [r5, #4]
 800d750:	68eb      	ldr	r3, [r5, #12]
 800d752:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800d754:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d758:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800d75a:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d75c:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800d75e:	ebac 0c00 	sub.w	ip, ip, r0
 800d762:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800d766:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800d76a:	ebac 0000 	sub.w	r0, ip, r0
 800d76e:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800d770:	2100      	movs	r1, #0
 800d772:	7419      	strb	r1, [r3, #16]
 800d774:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d776:	7aa9      	ldrb	r1, [r5, #10]
 800d778:	0089      	lsls	r1, r1, #2
 800d77a:	f001 0104 	and.w	r1, r1, #4
 800d77e:	3114      	adds	r1, #20
 800d780:	440b      	add	r3, r1
 800d782:	429a      	cmp	r2, r3
 800d784:	d006      	beq.n	800d794 <tcp_output+0x194>
 800d786:	4653      	mov	r3, sl
 800d788:	f240 621c 	movw	r2, #1564	; 0x61c
 800d78c:	4934      	ldr	r1, [pc, #208]	; (800d860 <tcp_output+0x260>)
 800d78e:	4658      	mov	r0, fp
 800d790:	f001 fba0 	bl	800eed4 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d794:	2306      	movs	r3, #6
 800d796:	9702      	str	r7, [sp, #8]
 800d798:	464a      	mov	r2, r9
 800d79a:	4621      	mov	r1, r4
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	7aa3      	ldrb	r3, [r4, #10]
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	7ae3      	ldrb	r3, [r4, #11]
 800d7a4:	6868      	ldr	r0, [r5, #4]
 800d7a6:	f7fb fc27 	bl	8008ff8 <ip4_output_if>
    if (err != ERR_OK) {
 800d7aa:	b1b0      	cbz	r0, 800d7da <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d7ac:	8b63      	ldrh	r3, [r4, #26]
 800d7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7b2:	8363      	strh	r3, [r4, #26]
}
 800d7b4:	b007      	add	sp, #28
 800d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d7ba:	464a      	mov	r2, r9
 800d7bc:	4639      	mov	r1, r7
 800d7be:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800d7c2:	9304      	str	r3, [sp, #16]
 800d7c4:	f7fd ffe4 	bl	800b790 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d7c8:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800d7cc:	f7fc f81d 	bl	800980a <lwip_htonl>
 800d7d0:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800d7d2:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d7d6:	6158      	str	r0, [r3, #20]
    opts += 1;
 800d7d8:	e7a7      	b.n	800d72a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800d7da:	682b      	ldr	r3, [r5, #0]
 800d7dc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d7de:	7d23      	ldrb	r3, [r4, #20]
 800d7e0:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7e2:	bf1e      	ittt	ne
 800d7e4:	8b63      	ldrhne	r3, [r4, #26]
 800d7e6:	f023 0303 	bicne.w	r3, r3, #3
 800d7ea:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7ec:	68eb      	ldr	r3, [r5, #12]
 800d7ee:	6858      	ldr	r0, [r3, #4]
 800d7f0:	f7fc f80b 	bl	800980a <lwip_htonl>
 800d7f4:	8929      	ldrh	r1, [r5, #8]
 800d7f6:	68eb      	ldr	r3, [r5, #12]
 800d7f8:	9104      	str	r1, [sp, #16]
 800d7fa:	9005      	str	r0, [sp, #20]
 800d7fc:	8998      	ldrh	r0, [r3, #12]
 800d7fe:	f7fc f801 	bl	8009804 <lwip_htons>
 800d802:	f010 0303 	ands.w	r3, r0, #3
 800d806:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800d80a:	bf18      	it	ne
 800d80c:	2301      	movne	r3, #1
 800d80e:	440a      	add	r2, r1
 800d810:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d812:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d814:	1ad2      	subs	r2, r2, r3
 800d816:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800d818:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800d81a:	bfb8      	it	lt
 800d81c:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800d81e:	892b      	ldrh	r3, [r5, #8]
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	8990      	ldrh	r0, [r2, #12]
 800d824:	f7fb ffee 	bl	8009804 <lwip_htons>
 800d828:	f010 0003 	ands.w	r0, r0, #3
 800d82c:	9b04      	ldr	r3, [sp, #16]
 800d82e:	bf18      	it	ne
 800d830:	2001      	movne	r0, #1
 800d832:	42d8      	cmn	r0, r3
 800d834:	f000 8085 	beq.w	800d942 <tcp_output+0x342>
      seg->next = NULL;
 800d838:	2300      	movs	r3, #0
 800d83a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800d83c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d83e:	b98b      	cbnz	r3, 800d864 <tcp_output+0x264>
        pcb->unacked = seg;
 800d840:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800d842:	462e      	mov	r6, r5
 800d844:	e023      	b.n	800d88e <tcp_output+0x28e>
 800d846:	bf00      	nop
 800d848:	0801d00a 	.word	0x0801d00a
 800d84c:	0801d643 	.word	0x0801d643
 800d850:	0801a5dc 	.word	0x0801a5dc
 800d854:	0801d65b 	.word	0x0801d65b
 800d858:	2000d058 	.word	0x2000d058
 800d85c:	2000d00c 	.word	0x2000d00c
 800d860:	0801d698 	.word	0x0801d698
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d864:	68eb      	ldr	r3, [r5, #12]
 800d866:	6858      	ldr	r0, [r3, #4]
 800d868:	f7fb ffcf 	bl	800980a <lwip_htonl>
 800d86c:	68f2      	ldr	r2, [r6, #12]
 800d86e:	9004      	str	r0, [sp, #16]
 800d870:	6850      	ldr	r0, [r2, #4]
 800d872:	f7fb ffca 	bl	800980a <lwip_htonl>
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	1a18      	subs	r0, r3, r0
 800d87a:	2800      	cmp	r0, #0
 800d87c:	da5f      	bge.n	800d93e <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d87e:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	2a00      	cmp	r2, #0
 800d886:	d149      	bne.n	800d91c <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800d88c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800d88e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800d890:	2d00      	cmp	r5, #0
 800d892:	d03a      	beq.n	800d90a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d894:	68eb      	ldr	r3, [r5, #12]
 800d896:	6858      	ldr	r0, [r3, #4]
 800d898:	f7fb ffb7 	bl	800980a <lwip_htonl>
 800d89c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d89e:	1ac0      	subs	r0, r0, r3
 800d8a0:	892b      	ldrh	r3, [r5, #8]
 800d8a2:	4418      	add	r0, r3
  while (seg != NULL &&
 800d8a4:	4540      	cmp	r0, r8
 800d8a6:	d82e      	bhi.n	800d906 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800d8a8:	68eb      	ldr	r3, [r5, #12]
 800d8aa:	8998      	ldrh	r0, [r3, #12]
 800d8ac:	f7fb ffaa 	bl	8009804 <lwip_htons>
 800d8b0:	0741      	lsls	r1, r0, #29
 800d8b2:	d506      	bpl.n	800d8c2 <tcp_output+0x2c2>
 800d8b4:	4653      	mov	r3, sl
 800d8b6:	f240 5236 	movw	r2, #1334	; 0x536
 800d8ba:	4925      	ldr	r1, [pc, #148]	; (800d950 <tcp_output+0x350>)
 800d8bc:	4658      	mov	r0, fp
 800d8be:	f001 fb09 	bl	800eed4 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d8c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f43f af06 	beq.w	800d6d6 <tcp_output+0xd6>
 800d8ca:	8b62      	ldrh	r2, [r4, #26]
 800d8cc:	f012 0f44 	tst.w	r2, #68	; 0x44
 800d8d0:	f47f af01 	bne.w	800d6d6 <tcp_output+0xd6>
 800d8d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d8d6:	b143      	cbz	r3, 800d8ea <tcp_output+0x2ea>
 800d8d8:	6819      	ldr	r1, [r3, #0]
 800d8da:	2900      	cmp	r1, #0
 800d8dc:	f47f aefb 	bne.w	800d6d6 <tcp_output+0xd6>
 800d8e0:	8919      	ldrh	r1, [r3, #8]
 800d8e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d8e4:	4299      	cmp	r1, r3
 800d8e6:	f4bf aef6 	bcs.w	800d6d6 <tcp_output+0xd6>
 800d8ea:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f43f aef1 	beq.w	800d6d6 <tcp_output+0xd6>
 800d8f4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d8f8:	2b07      	cmp	r3, #7
 800d8fa:	f63f aeec 	bhi.w	800d6d6 <tcp_output+0xd6>
 800d8fe:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800d902:	f47f aee8 	bne.w	800d6d6 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800d906:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d908:	b913      	cbnz	r3, 800d910 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d910:	8b63      	ldrh	r3, [r4, #26]
 800d912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d916:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800d918:	2000      	movs	r0, #0
 800d91a:	e74b      	b.n	800d7b4 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d91c:	68d2      	ldr	r2, [r2, #12]
 800d91e:	9305      	str	r3, [sp, #20]
 800d920:	6850      	ldr	r0, [r2, #4]
 800d922:	f7fb ff72 	bl	800980a <lwip_htonl>
 800d926:	68e9      	ldr	r1, [r5, #12]
 800d928:	9004      	str	r0, [sp, #16]
 800d92a:	6848      	ldr	r0, [r1, #4]
 800d92c:	f7fb ff6d 	bl	800980a <lwip_htonl>
 800d930:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800d932:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d934:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800d936:	2800      	cmp	r0, #0
 800d938:	daa6      	bge.n	800d888 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	e7a1      	b.n	800d882 <tcp_output+0x282>
          useg->next = seg;
 800d93e:	6035      	str	r5, [r6, #0]
 800d940:	e77f      	b.n	800d842 <tcp_output+0x242>
      tcp_seg_free(seg);
 800d942:	4628      	mov	r0, r5
 800d944:	f7fd f8e8 	bl	800ab18 <tcp_seg_free>
 800d948:	e7a1      	b.n	800d88e <tcp_output+0x28e>
    return ERR_RTE;
 800d94a:	f06f 0003 	mvn.w	r0, #3
 800d94e:	e731      	b.n	800d7b4 <tcp_output+0x1b4>
 800d950:	0801d681 	.word	0x0801d681

0800d954 <tcp_rexmit_rto_commit>:
{
 800d954:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d956:	4604      	mov	r4, r0
 800d958:	b930      	cbnz	r0, 800d968 <tcp_rexmit_rto_commit+0x14>
 800d95a:	4b09      	ldr	r3, [pc, #36]	; (800d980 <tcp_rexmit_rto_commit+0x2c>)
 800d95c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d960:	4908      	ldr	r1, [pc, #32]	; (800d984 <tcp_rexmit_rto_commit+0x30>)
 800d962:	4809      	ldr	r0, [pc, #36]	; (800d988 <tcp_rexmit_rto_commit+0x34>)
 800d964:	f001 fab6 	bl	800eed4 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800d968:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800d96c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800d96e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800d970:	bf1c      	itt	ne
 800d972:	3301      	addne	r3, #1
 800d974:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800d978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800d97c:	f7ff be40 	b.w	800d600 <tcp_output>
 800d980:	0801d00a 	.word	0x0801d00a
 800d984:	0801d6ab 	.word	0x0801d6ab
 800d988:	0801a5dc 	.word	0x0801a5dc

0800d98c <tcp_rexmit_rto>:
{
 800d98c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d98e:	4604      	mov	r4, r0
 800d990:	b930      	cbnz	r0, 800d9a0 <tcp_rexmit_rto+0x14>
 800d992:	4b08      	ldr	r3, [pc, #32]	; (800d9b4 <tcp_rexmit_rto+0x28>)
 800d994:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d998:	4907      	ldr	r1, [pc, #28]	; (800d9b8 <tcp_rexmit_rto+0x2c>)
 800d99a:	4808      	ldr	r0, [pc, #32]	; (800d9bc <tcp_rexmit_rto+0x30>)
 800d99c:	f001 fa9a 	bl	800eed4 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f7ff fcfd 	bl	800d3a0 <tcp_rexmit_rto_prepare>
 800d9a6:	b920      	cbnz	r0, 800d9b2 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800d9a8:	4620      	mov	r0, r4
}
 800d9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800d9ae:	f7ff bfd1 	b.w	800d954 <tcp_rexmit_rto_commit>
}
 800d9b2:	bd10      	pop	{r4, pc}
 800d9b4:	0801d00a 	.word	0x0801d00a
 800d9b8:	0801d6ce 	.word	0x0801d6ce
 800d9bc:	0801a5dc 	.word	0x0801a5dc

0800d9c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d9c0:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	b930      	cbnz	r0, 800d9d4 <tcp_keepalive+0x14>
 800d9c6:	4b0f      	ldr	r3, [pc, #60]	; (800da04 <tcp_keepalive+0x44>)
 800d9c8:	f640 0224 	movw	r2, #2084	; 0x824
 800d9cc:	490e      	ldr	r1, [pc, #56]	; (800da08 <tcp_keepalive+0x48>)
 800d9ce:	480f      	ldr	r0, [pc, #60]	; (800da0c <tcp_keepalive+0x4c>)
 800d9d0:	f001 fa80 	bl	800eed4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d9d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d9d6:	3801      	subs	r0, #1
 800d9d8:	f7fb ff17 	bl	800980a <lwip_htonl>
 800d9dc:	2100      	movs	r1, #0
 800d9de:	4602      	mov	r2, r0
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f7ff f841 	bl	800ca68 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	b148      	cbz	r0, 800d9fe <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d9ea:	f7ff f863 	bl	800cab4 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d9ee:	1d23      	adds	r3, r4, #4
 800d9f0:	4622      	mov	r2, r4
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d9f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d9fa:	f7ff b86b 	b.w	800cad4 <tcp_output_control_segment>
}
 800d9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	0801d00a 	.word	0x0801d00a
 800da08:	0801d6ea 	.word	0x0801d6ea
 800da0c:	0801a5dc 	.word	0x0801a5dc

0800da10 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800da10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800da14:	4606      	mov	r6, r0
 800da16:	b930      	cbnz	r0, 800da26 <tcp_zero_window_probe+0x16>
 800da18:	4b2c      	ldr	r3, [pc, #176]	; (800dacc <tcp_zero_window_probe+0xbc>)
 800da1a:	f640 024f 	movw	r2, #2127	; 0x84f
 800da1e:	492c      	ldr	r1, [pc, #176]	; (800dad0 <tcp_zero_window_probe+0xc0>)
 800da20:	482c      	ldr	r0, [pc, #176]	; (800dad4 <tcp_zero_window_probe+0xc4>)
 800da22:	f001 fa57 	bl	800eed4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800da26:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800da28:	2d00      	cmp	r5, #0
 800da2a:	d048      	beq.n	800dabe <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800da2c:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800da30:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800da32:	bf1c      	itt	ne
 800da34:	3301      	addne	r3, #1
 800da36:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800da3a:	68eb      	ldr	r3, [r5, #12]
 800da3c:	8998      	ldrh	r0, [r3, #12]
 800da3e:	f7fb fee1 	bl	8009804 <lwip_htons>
 800da42:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800da46:	68eb      	ldr	r3, [r5, #12]
 800da48:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800da4a:	bf18      	it	ne
 800da4c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800da4e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800da50:	bf1c      	itt	ne
 800da52:	fab4 f484 	clzne	r4, r4
 800da56:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800da58:	f084 0101 	eor.w	r1, r4, #1
 800da5c:	f7ff f804 	bl	800ca68 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800da60:	4607      	mov	r7, r0
 800da62:	b378      	cbz	r0, 800dac4 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800da64:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800da68:	b1f4      	cbz	r4, 800daa8 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800da6a:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800da6e:	2011      	movs	r0, #17
 800da70:	f7fb fec8 	bl	8009804 <lwip_htons>
 800da74:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800da78:	4320      	orrs	r0, r4
 800da7a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800da7e:	68eb      	ldr	r3, [r5, #12]
 800da80:	6858      	ldr	r0, [r3, #4]
 800da82:	f7fb fec2 	bl	800980a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800da86:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800da88:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800da8a:	1a1b      	subs	r3, r3, r0
 800da8c:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800da8e:	bfb8      	it	lt
 800da90:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800da92:	4638      	mov	r0, r7
 800da94:	f7ff f80e 	bl	800cab4 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da98:	1d33      	adds	r3, r6, #4
 800da9a:	4632      	mov	r2, r6
 800da9c:	4639      	mov	r1, r7
 800da9e:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800daa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800daa4:	f7ff b816 	b.w	800cad4 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800daa8:	6868      	ldr	r0, [r5, #4]
 800daaa:	f108 0114 	add.w	r1, r8, #20
 800daae:	892a      	ldrh	r2, [r5, #8]
 800dab0:	8903      	ldrh	r3, [r0, #8]
 800dab2:	1a9b      	subs	r3, r3, r2
 800dab4:	2201      	movs	r2, #1
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	f7fc fe20 	bl	800a6fc <pbuf_copy_partial>
 800dabc:	e7df      	b.n	800da7e <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800dabe:	4628      	mov	r0, r5
}
 800dac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	e7fa      	b.n	800dac0 <tcp_zero_window_probe+0xb0>
 800daca:	bf00      	nop
 800dacc:	0801d00a 	.word	0x0801d00a
 800dad0:	0801d705 	.word	0x0801d705
 800dad4:	0801a5dc 	.word	0x0801a5dc

0800dad8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dadc:	200a      	movs	r0, #10
{
 800dade:	460e      	mov	r6, r1
 800dae0:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dae2:	f7fc f9af 	bl	8009e44 <memp_malloc>
  if (timeout == NULL) {
 800dae6:	b938      	cbnz	r0, 800daf8 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dae8:	4b10      	ldr	r3, [pc, #64]	; (800db2c <sys_timeout_abs+0x54>)
 800daea:	22be      	movs	r2, #190	; 0xbe
 800daec:	4910      	ldr	r1, [pc, #64]	; (800db30 <sys_timeout_abs+0x58>)
 800daee:	4811      	ldr	r0, [pc, #68]	; (800db34 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800daf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800daf4:	f001 b9ee 	b.w	800eed4 <iprintf>
  timeout->next = NULL;
 800daf8:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800dafa:	4a0f      	ldr	r2, [pc, #60]	; (800db38 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800dafc:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800dafe:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800db00:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800db02:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800db06:	b90b      	cbnz	r3, 800db0c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800db08:	6010      	str	r0, [r2, #0]
}
 800db0a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800db0c:	6859      	ldr	r1, [r3, #4]
 800db0e:	1a61      	subs	r1, r4, r1
 800db10:	2900      	cmp	r1, #0
 800db12:	da01      	bge.n	800db18 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800db14:	6003      	str	r3, [r0, #0]
 800db16:	e7f7      	b.n	800db08 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800db18:	4619      	mov	r1, r3
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	b11b      	cbz	r3, 800db26 <sys_timeout_abs+0x4e>
 800db1e:	685a      	ldr	r2, [r3, #4]
 800db20:	1aa2      	subs	r2, r4, r2
 800db22:	2a00      	cmp	r2, #0
 800db24:	daf8      	bge.n	800db18 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800db26:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800db28:	6008      	str	r0, [r1, #0]
        break;
 800db2a:	e7ee      	b.n	800db0a <sys_timeout_abs+0x32>
 800db2c:	0801d728 	.word	0x0801d728
 800db30:	0801d78b 	.word	0x0801d78b
 800db34:	0801a5dc 	.word	0x0801a5dc
 800db38:	2000d05c 	.word	0x2000d05c

0800db3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800db3c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800db3e:	6843      	ldr	r3, [r0, #4]
{
 800db40:	4604      	mov	r4, r0
  cyclic->handler();
 800db42:	4798      	blx	r3

  now = sys_now();
 800db44:	f7f3 fce4 	bl	8001510 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800db48:	4b07      	ldr	r3, [pc, #28]	; (800db68 <lwip_cyclic_timer+0x2c>)
 800db4a:	6825      	ldr	r5, [r4, #0]
 800db4c:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800db4e:	4907      	ldr	r1, [pc, #28]	; (800db6c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800db50:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800db52:	1a1a      	subs	r2, r3, r0
 800db54:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800db56:	4622      	mov	r2, r4
 800db58:	bfb4      	ite	lt
 800db5a:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800db5c:	4618      	movge	r0, r3
#endif
  }
}
 800db5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800db62:	f7ff bfb9 	b.w	800dad8 <sys_timeout_abs>
 800db66:	bf00      	nop
 800db68:	2000d05c 	.word	0x2000d05c
 800db6c:	0800db3d 	.word	0x0800db3d

0800db70 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800db70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800db74:	b570      	push	{r4, r5, r6, lr}
 800db76:	4604      	mov	r4, r0
 800db78:	460d      	mov	r5, r1
 800db7a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800db7c:	d306      	bcc.n	800db8c <sys_timeout+0x1c>
 800db7e:	4b08      	ldr	r3, [pc, #32]	; (800dba0 <sys_timeout+0x30>)
 800db80:	f240 1229 	movw	r2, #297	; 0x129
 800db84:	4907      	ldr	r1, [pc, #28]	; (800dba4 <sys_timeout+0x34>)
 800db86:	4808      	ldr	r0, [pc, #32]	; (800dba8 <sys_timeout+0x38>)
 800db88:	f001 f9a4 	bl	800eed4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800db8c:	f7f3 fcc0 	bl	8001510 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800db90:	4632      	mov	r2, r6
 800db92:	4629      	mov	r1, r5
 800db94:	4420      	add	r0, r4
#endif
}
 800db96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800db9a:	f7ff bf9d 	b.w	800dad8 <sys_timeout_abs>
 800db9e:	bf00      	nop
 800dba0:	0801d728 	.word	0x0801d728
 800dba4:	0801d7c8 	.word	0x0801d7c8
 800dba8:	0801a5dc 	.word	0x0801a5dc

0800dbac <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dbac:	4b08      	ldr	r3, [pc, #32]	; (800dbd0 <tcp_timer_needed+0x24>)
 800dbae:	689a      	ldr	r2, [r3, #8]
 800dbb0:	b962      	cbnz	r2, 800dbcc <tcp_timer_needed+0x20>
 800dbb2:	4a08      	ldr	r2, [pc, #32]	; (800dbd4 <tcp_timer_needed+0x28>)
 800dbb4:	6812      	ldr	r2, [r2, #0]
 800dbb6:	b912      	cbnz	r2, 800dbbe <tcp_timer_needed+0x12>
 800dbb8:	4a07      	ldr	r2, [pc, #28]	; (800dbd8 <tcp_timer_needed+0x2c>)
 800dbba:	6812      	ldr	r2, [r2, #0]
 800dbbc:	b132      	cbz	r2, 800dbcc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800dbbe:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dbc0:	4906      	ldr	r1, [pc, #24]	; (800dbdc <tcp_timer_needed+0x30>)
 800dbc2:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800dbc4:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f7ff bfd2 	b.w	800db70 <sys_timeout>
}
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	2000d05c 	.word	0x2000d05c
 800dbd4:	2000d008 	.word	0x2000d008
 800dbd8:	2000d014 	.word	0x2000d014
 800dbdc:	0800dbe1 	.word	0x0800dbe1

0800dbe0 <tcpip_tcp_timer>:
{
 800dbe0:	b508      	push	{r3, lr}
  tcp_tmr();
 800dbe2:	f7fd fc0b 	bl	800b3fc <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dbe6:	4b08      	ldr	r3, [pc, #32]	; (800dc08 <tcpip_tcp_timer+0x28>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	b913      	cbnz	r3, 800dbf2 <tcpip_tcp_timer+0x12>
 800dbec:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <tcpip_tcp_timer+0x2c>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	b133      	cbz	r3, 800dc00 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	4906      	ldr	r1, [pc, #24]	; (800dc10 <tcpip_tcp_timer+0x30>)
 800dbf6:	20fa      	movs	r0, #250	; 0xfa
}
 800dbf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dbfc:	f7ff bfb8 	b.w	800db70 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800dc00:	4a04      	ldr	r2, [pc, #16]	; (800dc14 <tcpip_tcp_timer+0x34>)
 800dc02:	6093      	str	r3, [r2, #8]
}
 800dc04:	bd08      	pop	{r3, pc}
 800dc06:	bf00      	nop
 800dc08:	2000d008 	.word	0x2000d008
 800dc0c:	2000d014 	.word	0x2000d014
 800dc10:	0800dbe1 	.word	0x0800dbe1
 800dc14:	2000d05c 	.word	0x2000d05c

0800dc18 <sys_timeouts_init>:
{
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	4d06      	ldr	r5, [pc, #24]	; (800dc34 <sys_timeouts_init+0x1c>)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dc1c:	2401      	movs	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dc1e:	4e06      	ldr	r6, [pc, #24]	; (800dc38 <sys_timeouts_init+0x20>)
 800dc20:	f855 0f08 	ldr.w	r0, [r5, #8]!
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dc24:	3401      	adds	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dc26:	4631      	mov	r1, r6
 800dc28:	462a      	mov	r2, r5
 800dc2a:	f7ff ffa1 	bl	800db70 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dc2e:	2c05      	cmp	r4, #5
 800dc30:	d1f6      	bne.n	800dc20 <sys_timeouts_init+0x8>
}
 800dc32:	bd70      	pop	{r4, r5, r6, pc}
 800dc34:	0801188c 	.word	0x0801188c
 800dc38:	0800db3d 	.word	0x0800db3d

0800dc3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800dc3e:	f7f3 fc67 	bl	8001510 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800dc42:	4d0b      	ldr	r5, [pc, #44]	; (800dc70 <sys_check_timeouts+0x34>)
  now = sys_now();
 800dc44:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800dc46:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800dc48:	b181      	cbz	r1, 800dc6c <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dc4a:	684b      	ldr	r3, [r1, #4]
 800dc4c:	1ae2      	subs	r2, r4, r3
 800dc4e:	2a00      	cmp	r2, #0
 800dc50:	db0c      	blt.n	800dc6c <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dc52:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dc54:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800dc56:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800dc58:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800dc5a:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dc5e:	f7fc f90d 	bl	8009e7c <memp_free>
    if (handler != NULL) {
 800dc62:	2e00      	cmp	r6, #0
 800dc64:	d0ef      	beq.n	800dc46 <sys_check_timeouts+0xa>
      handler(arg);
 800dc66:	4638      	mov	r0, r7
 800dc68:	47b0      	blx	r6
 800dc6a:	e7ec      	b.n	800dc46 <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	2000d05c 	.word	0x2000d05c

0800dc74 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800dc74:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800dc76:	4c07      	ldr	r4, [pc, #28]	; (800dc94 <sys_timeouts_sleeptime+0x20>)
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	b13b      	cbz	r3, 800dc8c <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800dc7c:	f7f3 fc48 	bl	8001510 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
    return 0;
 800dc84:	1a18      	subs	r0, r3, r0
 800dc86:	bf48      	it	mi
 800dc88:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800dc8a:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc90:	e7fb      	b.n	800dc8a <sys_timeouts_sleeptime+0x16>
 800dc92:	bf00      	nop
 800dc94:	2000d05c 	.word	0x2000d05c

0800dc98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dc98:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dc9a:	f001 f933 	bl	800ef04 <rand>
 800dc9e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800dca2:	4b02      	ldr	r3, [pc, #8]	; (800dcac <udp_init+0x14>)
 800dca4:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800dca8:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800dcaa:	bd08      	pop	{r3, pc}
 800dcac:	20000028 	.word	0x20000028

0800dcb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	4688      	mov	r8, r1
 800dcb6:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dcb8:	4606      	mov	r6, r0
 800dcba:	b928      	cbnz	r0, 800dcc8 <udp_input+0x18>
 800dcbc:	4b5f      	ldr	r3, [pc, #380]	; (800de3c <udp_input+0x18c>)
 800dcbe:	22cf      	movs	r2, #207	; 0xcf
 800dcc0:	495f      	ldr	r1, [pc, #380]	; (800de40 <udp_input+0x190>)
 800dcc2:	4860      	ldr	r0, [pc, #384]	; (800de44 <udp_input+0x194>)
 800dcc4:	f001 f906 	bl	800eed4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dcc8:	f1b8 0f00 	cmp.w	r8, #0
 800dccc:	d105      	bne.n	800dcda <udp_input+0x2a>
 800dcce:	4b5b      	ldr	r3, [pc, #364]	; (800de3c <udp_input+0x18c>)
 800dcd0:	22d0      	movs	r2, #208	; 0xd0
 800dcd2:	495d      	ldr	r1, [pc, #372]	; (800de48 <udp_input+0x198>)
 800dcd4:	485b      	ldr	r0, [pc, #364]	; (800de44 <udp_input+0x194>)
 800dcd6:	f001 f8fd 	bl	800eed4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dcda:	8973      	ldrh	r3, [r6, #10]
 800dcdc:	2b07      	cmp	r3, #7
 800dcde:	d805      	bhi.n	800dcec <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dce0:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dce2:	b005      	add	sp, #20
 800dce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800dce8:	f7fc bae2 	b.w	800a2b0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dcec:	4f57      	ldr	r7, [pc, #348]	; (800de4c <udp_input+0x19c>)
  uncon_pcb = NULL;
 800dcee:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800dcf0:	6874      	ldr	r4, [r6, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dcf2:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 800dcf4:	46aa      	mov	sl, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dcf6:	6978      	ldr	r0, [r7, #20]
 800dcf8:	f7fb f98f 	bl	800901a <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcfc:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800de5c <udp_input+0x1ac>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dd00:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800dd02:	8820      	ldrh	r0, [r4, #0]
 800dd04:	f7fb fd7e 	bl	8009804 <lwip_htons>
 800dd08:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800dd0a:	8860      	ldrh	r0, [r4, #2]
 800dd0c:	f7fb fd7a 	bl	8009804 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd10:	f8db 4000 	ldr.w	r4, [fp]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dd14:	f8df c124 	ldr.w	ip, [pc, #292]	; 800de3c <udp_input+0x18c>
 800dd18:	494d      	ldr	r1, [pc, #308]	; (800de50 <udp_input+0x1a0>)
  dest = lwip_ntohs(udphdr->dest);
 800dd1a:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd1c:	b99c      	cbnz	r4, 800dd46 <udp_input+0x96>
  if (pcb != NULL) {
 800dd1e:	b925      	cbnz	r5, 800dd2a <udp_input+0x7a>
  if (for_us) {
 800dd20:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d1da      	bne.n	800dce0 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dd2a:	2108      	movs	r1, #8
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	f7fc fa8b 	bl	800a248 <pbuf_remove_header>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d05e      	beq.n	800ddf4 <udp_input+0x144>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dd36:	4b41      	ldr	r3, [pc, #260]	; (800de3c <udp_input+0x18c>)
 800dd38:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dd3c:	4945      	ldr	r1, [pc, #276]	; (800de54 <udp_input+0x1a4>)
 800dd3e:	4841      	ldr	r0, [pc, #260]	; (800de44 <udp_input+0x194>)
 800dd40:	f001 f8c8 	bl	800eed4 <iprintf>
 800dd44:	e7cc      	b.n	800dce0 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800dd46:	8a62      	ldrh	r2, [r4, #18]
 800dd48:	9803      	ldr	r0, [sp, #12]
 800dd4a:	4282      	cmp	r2, r0
 800dd4c:	d14d      	bne.n	800ddea <udp_input+0x13a>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dd4e:	f1b8 0f00 	cmp.w	r8, #0
 800dd52:	d107      	bne.n	800dd64 <udp_input+0xb4>
 800dd54:	4663      	mov	r3, ip
 800dd56:	2288      	movs	r2, #136	; 0x88
 800dd58:	483a      	ldr	r0, [pc, #232]	; (800de44 <udp_input+0x194>)
 800dd5a:	f001 f8bb 	bl	800eed4 <iprintf>
 800dd5e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800de3c <udp_input+0x18c>
 800dd62:	493b      	ldr	r1, [pc, #236]	; (800de50 <udp_input+0x1a0>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd64:	7a20      	ldrb	r0, [r4, #8]
 800dd66:	b130      	cbz	r0, 800dd76 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800dd6e:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd70:	b2d2      	uxtb	r2, r2
 800dd72:	4290      	cmp	r0, r2
 800dd74:	d139      	bne.n	800ddea <udp_input+0x13a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd76:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800dd78:	f1b9 0f00 	cmp.w	r9, #0
 800dd7c:	d030      	beq.n	800dde0 <udp_input+0x130>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd7e:	b13a      	cbz	r2, 800dd90 <udp_input+0xe0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dd80:	6978      	ldr	r0, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd82:	1c43      	adds	r3, r0, #1
 800dd84:	d004      	beq.n	800dd90 <udp_input+0xe0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dd86:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dd88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd8c:	4218      	tst	r0, r3
 800dd8e:	d12c      	bne.n	800ddea <udp_input+0x13a>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800dd90:	7c20      	ldrb	r0, [r4, #16]
 800dd92:	0743      	lsls	r3, r0, #29
 800dd94:	d40e      	bmi.n	800ddb4 <udp_input+0x104>
        if (uncon_pcb == NULL) {
 800dd96:	b35d      	cbz	r5, 800ddf0 <udp_input+0x140>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800dd98:	f1b9 0f00 	cmp.w	r9, #0
 800dd9c:	d00a      	beq.n	800ddb4 <udp_input+0x104>
 800dd9e:	6978      	ldr	r0, [r7, #20]
 800dda0:	3001      	adds	r0, #1
 800dda2:	d107      	bne.n	800ddb4 <udp_input+0x104>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dda4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	4283      	cmp	r3, r0
 800ddac:	d002      	beq.n	800ddb4 <udp_input+0x104>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ddae:	4290      	cmp	r0, r2
 800ddb0:	bf08      	it	eq
 800ddb2:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800ddb4:	8aa2      	ldrh	r2, [r4, #20]
 800ddb6:	9b02      	ldr	r3, [sp, #8]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d116      	bne.n	800ddea <udp_input+0x13a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ddbc:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800ddbe:	b112      	cbz	r2, 800ddc6 <udp_input+0x116>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ddc0:	6938      	ldr	r0, [r7, #16]
 800ddc2:	4282      	cmp	r2, r0
 800ddc4:	d111      	bne.n	800ddea <udp_input+0x13a>
        if (prev != NULL) {
 800ddc6:	f1ba 0f00 	cmp.w	sl, #0
 800ddca:	d007      	beq.n	800dddc <udp_input+0x12c>
          prev->next = pcb->next;
 800ddcc:	68e3      	ldr	r3, [r4, #12]
 800ddce:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800ddd2:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 800ddd6:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 800ddda:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800dddc:	4625      	mov	r5, r4
 800ddde:	e7a4      	b.n	800dd2a <udp_input+0x7a>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dde0:	2a00      	cmp	r2, #0
 800dde2:	d0d5      	beq.n	800dd90 <udp_input+0xe0>
 800dde4:	6978      	ldr	r0, [r7, #20]
 800dde6:	4290      	cmp	r0, r2
 800dde8:	d0d2      	beq.n	800dd90 <udp_input+0xe0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddea:	46a2      	mov	sl, r4
 800ddec:	68e4      	ldr	r4, [r4, #12]
 800ddee:	e795      	b.n	800dd1c <udp_input+0x6c>
 800ddf0:	4625      	mov	r5, r4
 800ddf2:	e7df      	b.n	800ddb4 <udp_input+0x104>
    if (pcb != NULL) {
 800ddf4:	b16d      	cbz	r5, 800de12 <udp_input+0x162>
      if (pcb->recv != NULL) {
 800ddf6:	69ac      	ldr	r4, [r5, #24]
 800ddf8:	2c00      	cmp	r4, #0
 800ddfa:	f43f af71 	beq.w	800dce0 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ddfe:	9b02      	ldr	r3, [sp, #8]
 800de00:	4632      	mov	r2, r6
 800de02:	4629      	mov	r1, r5
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	4b14      	ldr	r3, [pc, #80]	; (800de58 <udp_input+0x1a8>)
 800de08:	69e8      	ldr	r0, [r5, #28]
 800de0a:	47a0      	blx	r4
}
 800de0c:	b005      	add	sp, #20
 800de0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800de12:	f1b9 0f00 	cmp.w	r9, #0
 800de16:	f47f af63 	bne.w	800dce0 <udp_input+0x30>
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de20:	2be0      	cmp	r3, #224	; 0xe0
 800de22:	f43f af5d 	beq.w	800dce0 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800de26:	89b9      	ldrh	r1, [r7, #12]
 800de28:	4630      	mov	r0, r6
 800de2a:	3108      	adds	r1, #8
 800de2c:	b209      	sxth	r1, r1
 800de2e:	f7fc fa37 	bl	800a2a0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800de32:	2103      	movs	r1, #3
 800de34:	4630      	mov	r0, r6
 800de36:	f7fa ff4f 	bl	8008cd8 <icmp_dest_unreach>
 800de3a:	e751      	b.n	800dce0 <udp_input+0x30>
 800de3c:	0801d7fe 	.word	0x0801d7fe
 800de40:	0801d85c 	.word	0x0801d85c
 800de44:	0801a5dc 	.word	0x0801a5dc
 800de48:	0801d874 	.word	0x0801d874
 800de4c:	20006a7c 	.word	0x20006a7c
 800de50:	0801d88d 	.word	0x0801d88d
 800de54:	0801d8b2 	.word	0x0801d8b2
 800de58:	20006a8c 	.word	0x20006a8c
 800de5c:	2000d068 	.word	0x2000d068

0800de60 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800de64:	4c2b      	ldr	r4, [pc, #172]	; (800df14 <udp_bind+0xb4>)
 800de66:	2900      	cmp	r1, #0
 800de68:	bf18      	it	ne
 800de6a:	460c      	movne	r4, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de6c:	b950      	cbnz	r0, 800de84 <udp_bind+0x24>
 800de6e:	4b2a      	ldr	r3, [pc, #168]	; (800df18 <udp_bind+0xb8>)
 800de70:	f240 32b7 	movw	r2, #951	; 0x3b7
 800de74:	4929      	ldr	r1, [pc, #164]	; (800df1c <udp_bind+0xbc>)
 800de76:	482a      	ldr	r0, [pc, #168]	; (800df20 <udp_bind+0xc0>)
 800de78:	f001 f82c 	bl	800eed4 <iprintf>
 800de7c:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800de80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800de84:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800df28 <udp_bind+0xc8>
 800de88:	f8dc 5000 	ldr.w	r5, [ip]
 800de8c:	4629      	mov	r1, r5
 800de8e:	b9c9      	cbnz	r1, 800dec4 <udp_bind+0x64>
  if (port == 0) {
 800de90:	2a00      	cmp	r2, #0
 800de92:	d13c      	bne.n	800df0e <udp_bind+0xae>
 800de94:	4f23      	ldr	r7, [pc, #140]	; (800df24 <udp_bind+0xc4>)
 800de96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800de9a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800de9e:	883a      	ldrh	r2, [r7, #0]
 800dea0:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dea2:	462e      	mov	r6, r5
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dea4:	bf16      	itet	ne
 800dea6:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800dea8:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800deac:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800deae:	b97e      	cbnz	r6, 800ded0 <udp_bind+0x70>
 800deb0:	803a      	strh	r2, [r7, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800deb2:	6823      	ldr	r3, [r4, #0]
  pcb->local_port = port;
 800deb4:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800deb6:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800deb8:	b911      	cbnz	r1, 800dec0 <udp_bind+0x60>
    pcb->next = udp_pcbs;
 800deba:	60c5      	str	r5, [r0, #12]
    udp_pcbs = pcb;
 800debc:	f8cc 0000 	str.w	r0, [ip]
  return ERR_OK;
 800dec0:	2000      	movs	r0, #0
 800dec2:	e7dd      	b.n	800de80 <udp_bind+0x20>
    if (pcb == ipcb) {
 800dec4:	4281      	cmp	r1, r0
 800dec6:	d001      	beq.n	800decc <udp_bind+0x6c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dec8:	68c9      	ldr	r1, [r1, #12]
 800deca:	e7e0      	b.n	800de8e <udp_bind+0x2e>
      rebind = 1;
 800decc:	2101      	movs	r1, #1
 800dece:	e7df      	b.n	800de90 <udp_bind+0x30>
    if (pcb->local_port == udp_port) {
 800ded0:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 800ded4:	4590      	cmp	r8, r2
 800ded6:	d107      	bne.n	800dee8 <udp_bind+0x88>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ded8:	3b01      	subs	r3, #1
 800deda:	b29b      	uxth	r3, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1df      	bne.n	800dea0 <udp_bind+0x40>
 800dee0:	803a      	strh	r2, [r7, #0]
      return ERR_USE;
 800dee2:	f06f 0007 	mvn.w	r0, #7
 800dee6:	e7cb      	b.n	800de80 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dee8:	68f6      	ldr	r6, [r6, #12]
 800deea:	e7e0      	b.n	800deae <udp_bind+0x4e>
      if (pcb != ipcb) {
 800deec:	4283      	cmp	r3, r0
 800deee:	d00a      	beq.n	800df06 <udp_bind+0xa6>
          if ((ipcb->local_port == port) &&
 800def0:	8a5e      	ldrh	r6, [r3, #18]
 800def2:	4296      	cmp	r6, r2
 800def4:	d107      	bne.n	800df06 <udp_bind+0xa6>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800def6:	6827      	ldr	r7, [r4, #0]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800def8:	681e      	ldr	r6, [r3, #0]
          if ((ipcb->local_port == port) &&
 800defa:	42be      	cmp	r6, r7
 800defc:	d0f1      	beq.n	800dee2 <udp_bind+0x82>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800defe:	2f00      	cmp	r7, #0
 800df00:	d0ef      	beq.n	800dee2 <udp_bind+0x82>
              ip_addr_isany(&ipcb->local_ip))) {
 800df02:	2e00      	cmp	r6, #0
 800df04:	d0ed      	beq.n	800dee2 <udp_bind+0x82>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1ef      	bne.n	800deec <udp_bind+0x8c>
 800df0c:	e7d1      	b.n	800deb2 <udp_bind+0x52>
 800df0e:	462b      	mov	r3, r5
 800df10:	e7fa      	b.n	800df08 <udp_bind+0xa8>
 800df12:	bf00      	nop
 800df14:	08011768 	.word	0x08011768
 800df18:	0801d7fe 	.word	0x0801d7fe
 800df1c:	0801d8cd 	.word	0x0801d8cd
 800df20:	0801a5dc 	.word	0x0801a5dc
 800df24:	20000028 	.word	0x20000028
 800df28:	2000d068 	.word	0x2000d068

0800df2c <udp_sendto_if_src>:
{
 800df2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df30:	b085      	sub	sp, #20
 800df32:	460e      	mov	r6, r1
 800df34:	4690      	mov	r8, r2
 800df36:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800df38:	4607      	mov	r7, r0
{
 800df3a:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800df3e:	b960      	cbnz	r0, 800df5a <udp_sendto_if_src+0x2e>
 800df40:	4b3e      	ldr	r3, [pc, #248]	; (800e03c <udp_sendto_if_src+0x110>)
 800df42:	f240 22d1 	movw	r2, #721	; 0x2d1
 800df46:	493e      	ldr	r1, [pc, #248]	; (800e040 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800df48:	f06f 040f 	mvn.w	r4, #15
 800df4c:	483d      	ldr	r0, [pc, #244]	; (800e044 <udp_sendto_if_src+0x118>)
 800df4e:	f000 ffc1 	bl	800eed4 <iprintf>
}
 800df52:	4620      	mov	r0, r4
 800df54:	b005      	add	sp, #20
 800df56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800df5a:	b921      	cbnz	r1, 800df66 <udp_sendto_if_src+0x3a>
 800df5c:	4b37      	ldr	r3, [pc, #220]	; (800e03c <udp_sendto_if_src+0x110>)
 800df5e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800df62:	4939      	ldr	r1, [pc, #228]	; (800e048 <udp_sendto_if_src+0x11c>)
 800df64:	e7f0      	b.n	800df48 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800df66:	b922      	cbnz	r2, 800df72 <udp_sendto_if_src+0x46>
 800df68:	4b34      	ldr	r3, [pc, #208]	; (800e03c <udp_sendto_if_src+0x110>)
 800df6a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800df6e:	4937      	ldr	r1, [pc, #220]	; (800e04c <udp_sendto_if_src+0x120>)
 800df70:	e7ea      	b.n	800df48 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800df72:	f1ba 0f00 	cmp.w	sl, #0
 800df76:	d104      	bne.n	800df82 <udp_sendto_if_src+0x56>
 800df78:	4b30      	ldr	r3, [pc, #192]	; (800e03c <udp_sendto_if_src+0x110>)
 800df7a:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800df7e:	4934      	ldr	r1, [pc, #208]	; (800e050 <udp_sendto_if_src+0x124>)
 800df80:	e7e2      	b.n	800df48 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800df82:	f1bb 0f00 	cmp.w	fp, #0
 800df86:	d104      	bne.n	800df92 <udp_sendto_if_src+0x66>
 800df88:	4b2c      	ldr	r3, [pc, #176]	; (800e03c <udp_sendto_if_src+0x110>)
 800df8a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800df8e:	4931      	ldr	r1, [pc, #196]	; (800e054 <udp_sendto_if_src+0x128>)
 800df90:	e7da      	b.n	800df48 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800df92:	8a42      	ldrh	r2, [r0, #18]
 800df94:	b13a      	cbz	r2, 800dfa6 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800df96:	8932      	ldrh	r2, [r6, #8]
 800df98:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d909      	bls.n	800dfb4 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800dfa0:	f04f 34ff 	mov.w	r4, #4294967295
 800dfa4:	e7d5      	b.n	800df52 <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dfa6:	4601      	mov	r1, r0
 800dfa8:	f7ff ff5a 	bl	800de60 <udp_bind>
    if (err != ERR_OK) {
 800dfac:	4604      	mov	r4, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d0f1      	beq.n	800df96 <udp_sendto_if_src+0x6a>
 800dfb2:	e7ce      	b.n	800df52 <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800dfb4:	2108      	movs	r1, #8
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f7fc f942 	bl	800a240 <pbuf_add_header>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d03a      	beq.n	800e036 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800dfc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfc4:	2108      	movs	r1, #8
 800dfc6:	2022      	movs	r0, #34	; 0x22
 800dfc8:	f7fc f9da 	bl	800a380 <pbuf_alloc>
    if (q == NULL) {
 800dfcc:	4605      	mov	r5, r0
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d0e6      	beq.n	800dfa0 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800dfd2:	8933      	ldrh	r3, [r6, #8]
 800dfd4:	b113      	cbz	r3, 800dfdc <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800dfd6:	4631      	mov	r1, r6
 800dfd8:	f7fc fb04 	bl	800a5e4 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dfdc:	896b      	ldrh	r3, [r5, #10]
 800dfde:	2b07      	cmp	r3, #7
 800dfe0:	d806      	bhi.n	800dff0 <udp_sendto_if_src+0xc4>
 800dfe2:	4b16      	ldr	r3, [pc, #88]	; (800e03c <udp_sendto_if_src+0x110>)
 800dfe4:	f240 320d 	movw	r2, #781	; 0x30d
 800dfe8:	491b      	ldr	r1, [pc, #108]	; (800e058 <udp_sendto_if_src+0x12c>)
 800dfea:	4816      	ldr	r0, [pc, #88]	; (800e044 <udp_sendto_if_src+0x118>)
 800dfec:	f000 ff72 	bl	800eed4 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800dff0:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800dff2:	8a78      	ldrh	r0, [r7, #18]
 800dff4:	f7fb fc06 	bl	8009804 <lwip_htons>
 800dff8:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800dffa:	4648      	mov	r0, r9
 800dffc:	f7fb fc02 	bl	8009804 <lwip_htons>
  udphdr->chksum = 0x0000;
 800e000:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800e002:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800e004:	71a3      	strb	r3, [r4, #6]
 800e006:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800e008:	8928      	ldrh	r0, [r5, #8]
 800e00a:	f7fb fbfb 	bl	8009804 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e00e:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800e010:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e012:	4642      	mov	r2, r8
 800e014:	f8cd b008 	str.w	fp, [sp, #8]
 800e018:	4651      	mov	r1, sl
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	4628      	mov	r0, r5
 800e01e:	7abb      	ldrb	r3, [r7, #10]
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	7afb      	ldrb	r3, [r7, #11]
 800e024:	f7fa ff6c 	bl	8008f00 <ip4_output_if_src>
  if (q != p) {
 800e028:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e02a:	4604      	mov	r4, r0
  if (q != p) {
 800e02c:	d091      	beq.n	800df52 <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800e02e:	4628      	mov	r0, r5
 800e030:	f7fc f93e 	bl	800a2b0 <pbuf_free>
    q = NULL;
 800e034:	e78d      	b.n	800df52 <udp_sendto_if_src+0x26>
 800e036:	4635      	mov	r5, r6
 800e038:	e7d0      	b.n	800dfdc <udp_sendto_if_src+0xb0>
 800e03a:	bf00      	nop
 800e03c:	0801d7fe 	.word	0x0801d7fe
 800e040:	0801d8e3 	.word	0x0801d8e3
 800e044:	0801a5dc 	.word	0x0801a5dc
 800e048:	0801d902 	.word	0x0801d902
 800e04c:	0801d922 	.word	0x0801d922
 800e050:	0801d944 	.word	0x0801d944
 800e054:	0801d966 	.word	0x0801d966
 800e058:	0801d987 	.word	0x0801d987

0800e05c <udp_sendto_if>:
{
 800e05c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e05e:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e060:	b950      	cbnz	r0, 800e078 <udp_sendto_if+0x1c>
 800e062:	4b18      	ldr	r3, [pc, #96]	; (800e0c4 <udp_sendto_if+0x68>)
 800e064:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e068:	4917      	ldr	r1, [pc, #92]	; (800e0c8 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e06a:	4818      	ldr	r0, [pc, #96]	; (800e0cc <udp_sendto_if+0x70>)
 800e06c:	f000 ff32 	bl	800eed4 <iprintf>
 800e070:	f06f 000f 	mvn.w	r0, #15
}
 800e074:	b002      	add	sp, #8
 800e076:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e078:	b921      	cbnz	r1, 800e084 <udp_sendto_if+0x28>
 800e07a:	4b12      	ldr	r3, [pc, #72]	; (800e0c4 <udp_sendto_if+0x68>)
 800e07c:	f240 2281 	movw	r2, #641	; 0x281
 800e080:	4913      	ldr	r1, [pc, #76]	; (800e0d0 <udp_sendto_if+0x74>)
 800e082:	e7f2      	b.n	800e06a <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e084:	b922      	cbnz	r2, 800e090 <udp_sendto_if+0x34>
 800e086:	4b0f      	ldr	r3, [pc, #60]	; (800e0c4 <udp_sendto_if+0x68>)
 800e088:	f240 2282 	movw	r2, #642	; 0x282
 800e08c:	4911      	ldr	r1, [pc, #68]	; (800e0d4 <udp_sendto_if+0x78>)
 800e08e:	e7ec      	b.n	800e06a <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e090:	b924      	cbnz	r4, 800e09c <udp_sendto_if+0x40>
 800e092:	4b0c      	ldr	r3, [pc, #48]	; (800e0c4 <udp_sendto_if+0x68>)
 800e094:	f240 2283 	movw	r2, #643	; 0x283
 800e098:	490f      	ldr	r1, [pc, #60]	; (800e0d8 <udp_sendto_if+0x7c>)
 800e09a:	e7e6      	b.n	800e06a <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e09c:	6805      	ldr	r5, [r0, #0]
 800e09e:	b11d      	cbz	r5, 800e0a8 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e0a0:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0a4:	2ee0      	cmp	r6, #224	; 0xe0
 800e0a6:	d105      	bne.n	800e0b4 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800e0a8:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e0aa:	e9cd 4500 	strd	r4, r5, [sp]
 800e0ae:	f7ff ff3d 	bl	800df2c <udp_sendto_if_src>
 800e0b2:	e7df      	b.n	800e074 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e0b4:	6866      	ldr	r6, [r4, #4]
 800e0b6:	42b5      	cmp	r5, r6
 800e0b8:	d101      	bne.n	800e0be <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	e7f5      	b.n	800e0aa <udp_sendto_if+0x4e>
        return ERR_RTE;
 800e0be:	f06f 0003 	mvn.w	r0, #3
 800e0c2:	e7d7      	b.n	800e074 <udp_sendto_if+0x18>
 800e0c4:	0801d7fe 	.word	0x0801d7fe
 800e0c8:	0801d9b5 	.word	0x0801d9b5
 800e0cc:	0801a5dc 	.word	0x0801a5dc
 800e0d0:	0801d9d0 	.word	0x0801d9d0
 800e0d4:	0801d9ec 	.word	0x0801d9ec
 800e0d8:	0801da0a 	.word	0x0801da0a

0800e0dc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e0dc:	b570      	push	{r4, r5, r6, lr}
 800e0de:	460d      	mov	r5, r1
 800e0e0:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	b948      	cbnz	r0, 800e0fa <udp_connect+0x1e>
 800e0e6:	4b16      	ldr	r3, [pc, #88]	; (800e140 <udp_connect+0x64>)
 800e0e8:	f240 4235 	movw	r2, #1077	; 0x435
 800e0ec:	4915      	ldr	r1, [pc, #84]	; (800e144 <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e0ee:	4816      	ldr	r0, [pc, #88]	; (800e148 <udp_connect+0x6c>)
 800e0f0:	f000 fef0 	bl	800eed4 <iprintf>
 800e0f4:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800e0f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e0fa:	b921      	cbnz	r1, 800e106 <udp_connect+0x2a>
 800e0fc:	4b10      	ldr	r3, [pc, #64]	; (800e140 <udp_connect+0x64>)
 800e0fe:	f240 4236 	movw	r2, #1078	; 0x436
 800e102:	4912      	ldr	r1, [pc, #72]	; (800e14c <udp_connect+0x70>)
 800e104:	e7f3      	b.n	800e0ee <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800e106:	8a42      	ldrh	r2, [r0, #18]
 800e108:	b16a      	cbz	r2, 800e126 <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e10a:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800e10c:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e10e:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e110:	7c23      	ldrb	r3, [r4, #16]
 800e112:	f043 0304 	orr.w	r3, r3, #4
 800e116:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e118:	4b0d      	ldr	r3, [pc, #52]	; (800e150 <udp_connect+0x74>)
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	4610      	mov	r0, r2
 800e11e:	b940      	cbnz	r0, 800e132 <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800e120:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800e122:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800e124:	e7e8      	b.n	800e0f8 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e126:	4601      	mov	r1, r0
 800e128:	f7ff fe9a 	bl	800de60 <udp_bind>
    if (err != ERR_OK) {
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d0ec      	beq.n	800e10a <udp_connect+0x2e>
 800e130:	e7e2      	b.n	800e0f8 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800e132:	42a0      	cmp	r0, r4
 800e134:	d001      	beq.n	800e13a <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e136:	68c0      	ldr	r0, [r0, #12]
 800e138:	e7f1      	b.n	800e11e <udp_connect+0x42>
      return ERR_OK;
 800e13a:	2000      	movs	r0, #0
 800e13c:	e7dc      	b.n	800e0f8 <udp_connect+0x1c>
 800e13e:	bf00      	nop
 800e140:	0801d7fe 	.word	0x0801d7fe
 800e144:	0801daa0 	.word	0x0801daa0
 800e148:	0801a5dc 	.word	0x0801a5dc
 800e14c:	0801dab9 	.word	0x0801dab9
 800e150:	2000d068 	.word	0x2000d068

0800e154 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e154:	b930      	cbnz	r0, 800e164 <udp_recv+0x10>
 800e156:	4b05      	ldr	r3, [pc, #20]	; (800e16c <udp_recv+0x18>)
 800e158:	f240 428a 	movw	r2, #1162	; 0x48a
 800e15c:	4904      	ldr	r1, [pc, #16]	; (800e170 <udp_recv+0x1c>)
 800e15e:	4805      	ldr	r0, [pc, #20]	; (800e174 <udp_recv+0x20>)
 800e160:	f000 beb8 	b.w	800eed4 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800e164:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	0801d7fe 	.word	0x0801d7fe
 800e170:	0801daf1 	.word	0x0801daf1
 800e174:	0801a5dc 	.word	0x0801a5dc

0800e178 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e178:	4601      	mov	r1, r0
 800e17a:	b930      	cbnz	r0, 800e18a <udp_remove+0x12>
 800e17c:	4b0d      	ldr	r3, [pc, #52]	; (800e1b4 <udp_remove+0x3c>)
 800e17e:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e182:	490d      	ldr	r1, [pc, #52]	; (800e1b8 <udp_remove+0x40>)
 800e184:	480d      	ldr	r0, [pc, #52]	; (800e1bc <udp_remove+0x44>)
 800e186:	f000 bea5 	b.w	800eed4 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e18a:	4a0d      	ldr	r2, [pc, #52]	; (800e1c0 <udp_remove+0x48>)
 800e18c:	6813      	ldr	r3, [r2, #0]
 800e18e:	4283      	cmp	r3, r0
 800e190:	d105      	bne.n	800e19e <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e192:	68c3      	ldr	r3, [r0, #12]
 800e194:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e196:	2000      	movs	r0, #0
 800e198:	f7fb be70 	b.w	8009e7c <memp_free>
 800e19c:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d0f9      	beq.n	800e196 <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e1a2:	68da      	ldr	r2, [r3, #12]
 800e1a4:	2a00      	cmp	r2, #0
 800e1a6:	d0f6      	beq.n	800e196 <udp_remove+0x1e>
 800e1a8:	428a      	cmp	r2, r1
 800e1aa:	d1f7      	bne.n	800e19c <udp_remove+0x24>
        pcb2->next = pcb->next;
 800e1ac:	68ca      	ldr	r2, [r1, #12]
 800e1ae:	60da      	str	r2, [r3, #12]
        break;
 800e1b0:	e7f1      	b.n	800e196 <udp_remove+0x1e>
 800e1b2:	bf00      	nop
 800e1b4:	0801d7fe 	.word	0x0801d7fe
 800e1b8:	0801db07 	.word	0x0801db07
 800e1bc:	0801a5dc 	.word	0x0801a5dc
 800e1c0:	2000d068 	.word	0x2000d068

0800e1c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e1c4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	f7fb fe3c 	bl	8009e44 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	b128      	cbz	r0, 800e1dc <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e1d0:	2220      	movs	r2, #32
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	f000 fa0c 	bl	800e5f0 <memset>
    pcb->ttl = UDP_TTL;
 800e1d8:	23ff      	movs	r3, #255	; 0xff
 800e1da:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800e1dc:	4620      	mov	r0, r4
 800e1de:	bd10      	pop	{r4, pc}

0800e1e0 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800e1e0:	f7ff bff0 	b.w	800e1c4 <udp_new>

0800e1e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e1e4:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e1e6:	b138      	cbz	r0, 800e1f8 <udp_netif_ip_addr_changed+0x14>
 800e1e8:	6803      	ldr	r3, [r0, #0]
 800e1ea:	b12b      	cbz	r3, 800e1f8 <udp_netif_ip_addr_changed+0x14>
 800e1ec:	b121      	cbz	r1, 800e1f8 <udp_netif_ip_addr_changed+0x14>
 800e1ee:	680b      	ldr	r3, [r1, #0]
 800e1f0:	b113      	cbz	r3, 800e1f8 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e1f2:	4b06      	ldr	r3, [pc, #24]	; (800e20c <udp_netif_ip_addr_changed+0x28>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	b903      	cbnz	r3, 800e1fa <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800e1f8:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e1fa:	681c      	ldr	r4, [r3, #0]
 800e1fc:	6802      	ldr	r2, [r0, #0]
 800e1fe:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e200:	bf04      	itt	eq
 800e202:	680a      	ldreq	r2, [r1, #0]
 800e204:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	e7f5      	b.n	800e1f6 <udp_netif_ip_addr_changed+0x12>
 800e20a:	bf00      	nop
 800e20c:	2000d068 	.word	0x2000d068

0800e210 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e210:	8943      	ldrh	r3, [r0, #10]
 800e212:	2b0e      	cmp	r3, #14
{
 800e214:	b570      	push	{r4, r5, r6, lr}
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800e21a:	d91a      	bls.n	800e252 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e21c:	7bc3      	ldrb	r3, [r0, #15]
 800e21e:	b91b      	cbnz	r3, 800e228 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800e220:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800e224:	3301      	adds	r3, #1
 800e226:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e228:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e22a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800e22c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800e22e:	07d9      	lsls	r1, r3, #31
 800e230:	d50a      	bpl.n	800e248 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e232:	2b01      	cmp	r3, #1
 800e234:	d111      	bne.n	800e25a <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e236:	7843      	ldrb	r3, [r0, #1]
 800e238:	b933      	cbnz	r3, 800e248 <ethernet_input+0x38>
 800e23a:	7883      	ldrb	r3, [r0, #2]
 800e23c:	2b5e      	cmp	r3, #94	; 0x5e
 800e23e:	d103      	bne.n	800e248 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e240:	7b63      	ldrb	r3, [r4, #13]
 800e242:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e246:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800e248:	2e08      	cmp	r6, #8
 800e24a:	d010      	beq.n	800e26e <ethernet_input+0x5e>
 800e24c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800e250:	d01d      	beq.n	800e28e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e252:	4620      	mov	r0, r4
 800e254:	f7fc f82c 	bl	800a2b0 <pbuf_free>
  return ERR_OK;
 800e258:	e017      	b.n	800e28a <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e25a:	2206      	movs	r2, #6
 800e25c:	4913      	ldr	r1, [pc, #76]	; (800e2ac <ethernet_input+0x9c>)
 800e25e:	f000 f98f 	bl	800e580 <memcmp>
 800e262:	2800      	cmp	r0, #0
 800e264:	d1f0      	bne.n	800e248 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800e266:	7b63      	ldrb	r3, [r4, #13]
 800e268:	f043 0308 	orr.w	r3, r3, #8
 800e26c:	e7eb      	b.n	800e246 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e26e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800e272:	071a      	lsls	r2, r3, #28
 800e274:	d5ed      	bpl.n	800e252 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e276:	210e      	movs	r1, #14
 800e278:	4620      	mov	r0, r4
 800e27a:	f7fb ffe5 	bl	800a248 <pbuf_remove_header>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d1e7      	bne.n	800e252 <ethernet_input+0x42>
        ip4_input(p, netif);
 800e282:	4629      	mov	r1, r5
 800e284:	4620      	mov	r0, r4
 800e286:	f7fa fd77 	bl	8008d78 <ip4_input>
}
 800e28a:	2000      	movs	r0, #0
 800e28c:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e28e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800e292:	071b      	lsls	r3, r3, #28
 800e294:	d5dd      	bpl.n	800e252 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e296:	210e      	movs	r1, #14
 800e298:	4620      	mov	r0, r4
 800e29a:	f7fb ffd5 	bl	800a248 <pbuf_remove_header>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d1d7      	bne.n	800e252 <ethernet_input+0x42>
        etharp_input(p, netif);
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f7fa f9b9 	bl	800861c <etharp_input>
      break;
 800e2aa:	e7ee      	b.n	800e28a <ethernet_input+0x7a>
 800e2ac:	080118b8 	.word	0x080118b8

0800e2b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b4:	460d      	mov	r5, r1
 800e2b6:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e2b8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800e2bc:	4616      	mov	r6, r2
 800e2be:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800e2c0:	f7fb faa0 	bl	8009804 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e2c4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800e2c6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f7fb ffb9 	bl	800a240 <pbuf_add_header>
 800e2ce:	b9e0      	cbnz	r0, 800e30a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e2d0:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800e2d2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	600b      	str	r3, [r1, #0]
 800e2da:	88bb      	ldrh	r3, [r7, #4]
 800e2dc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e2de:	6833      	ldr	r3, [r6, #0]
 800e2e0:	f8c1 3006 	str.w	r3, [r1, #6]
 800e2e4:	88b3      	ldrh	r3, [r6, #4]
 800e2e6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e2e8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e2ec:	2b06      	cmp	r3, #6
 800e2ee:	d006      	beq.n	800e2fe <ethernet_output+0x4e>
 800e2f0:	4b08      	ldr	r3, [pc, #32]	; (800e314 <ethernet_output+0x64>)
 800e2f2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e2f6:	4908      	ldr	r1, [pc, #32]	; (800e318 <ethernet_output+0x68>)
 800e2f8:	4808      	ldr	r0, [pc, #32]	; (800e31c <ethernet_output+0x6c>)
 800e2fa:	f000 fdeb 	bl	800eed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e2fe:	69a3      	ldr	r3, [r4, #24]
 800e300:	4629      	mov	r1, r5
 800e302:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800e304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800e308:	4718      	bx	r3
}
 800e30a:	f06f 0001 	mvn.w	r0, #1
 800e30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e312:	bf00      	nop
 800e314:	0801db1f 	.word	0x0801db1f
 800e318:	0801db83 	.word	0x0801db83
 800e31c:	0801a5dc 	.word	0x0801a5dc

0800e320 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e320:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800e322:	2304      	movs	r3, #4
{
 800e324:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800e326:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e328:	4668      	mov	r0, sp
 800e32a:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800e32c:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e32e:	f7f7 f913 	bl	8005558 <osMessageCreate>
 800e332:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e334:	fab0 f080 	clz	r0, r0
 800e338:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800e33a:	4240      	negs	r0, r0
 800e33c:	b002      	add	sp, #8
 800e33e:	bd10      	pop	{r4, pc}

0800e340 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e340:	b510      	push	{r4, lr}
 800e342:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800e344:	6800      	ldr	r0, [r0, #0]
 800e346:	f7f7 f976 	bl	8005636 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800e34a:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800e350:	f7f7 b978 	b.w	8005644 <osMessageDelete>

0800e354 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e354:	2200      	movs	r2, #0
 800e356:	6800      	ldr	r0, [r0, #0]
{
 800e358:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e35a:	f7f7 f902 	bl	8005562 <osMessagePut>
 800e35e:	3800      	subs	r0, #0
 800e360:	bf18      	it	ne
 800e362:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800e364:	4240      	negs	r0, r0
 800e366:	bd08      	pop	{r3, pc}

0800e368 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e36a:	4617      	mov	r7, r2
 800e36c:	b085      	sub	sp, #20
 800e36e:	4606      	mov	r6, r0
 800e370:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800e372:	f7f7 f832 	bl	80053da <osKernelSysTick>
 800e376:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e378:	b177      	cbz	r7, 800e398 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800e37a:	463a      	mov	r2, r7
 800e37c:	6831      	ldr	r1, [r6, #0]
 800e37e:	a801      	add	r0, sp, #4
 800e380:	f7f7 f917 	bl	80055b2 <osMessageGet>

    if(event.status == osEventMessage)
 800e384:	9b01      	ldr	r3, [sp, #4]
 800e386:	2b10      	cmp	r3, #16
 800e388:	d10d      	bne.n	800e3a6 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800e38a:	9b02      	ldr	r3, [sp, #8]
 800e38c:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800e38e:	f7f7 f824 	bl	80053da <osKernelSysTick>
 800e392:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e394:	b005      	add	sp, #20
 800e396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800e398:	f04f 32ff 	mov.w	r2, #4294967295
 800e39c:	6831      	ldr	r1, [r6, #0]
 800e39e:	a801      	add	r0, sp, #4
 800e3a0:	f7f7 f907 	bl	80055b2 <osMessageGet>
 800e3a4:	e7f1      	b.n	800e38a <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800e3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3aa:	e7f3      	b.n	800e394 <sys_arch_mbox_fetch+0x2c>

0800e3ac <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800e3ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3ae:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	6801      	ldr	r1, [r0, #0]
 800e3b4:	a801      	add	r0, sp, #4
 800e3b6:	f7f7 f8fc 	bl	80055b2 <osMessageGet>

  if(event.status == osEventMessage)
 800e3ba:	9b01      	ldr	r3, [sp, #4]
 800e3bc:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800e3be:	bf05      	ittet	eq
 800e3c0:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800e3c2:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800e3c4:	f04f 30ff 	movne.w	r0, #4294967295
    *msg = (void *)event.value.v;
 800e3c8:	6023      	streq	r3, [r4, #0]
  }
}
 800e3ca:	b004      	add	sp, #16
 800e3cc:	bd10      	pop	{r4, pc}

0800e3ce <sys_mbox_valid>:
 800e3ce:	6800      	ldr	r0, [r0, #0]
 800e3d0:	3800      	subs	r0, #0
 800e3d2:	bf18      	it	ne
 800e3d4:	2001      	movne	r0, #1
 800e3d6:	4770      	bx	lr

0800e3d8 <sys_mbox_set_invalid>:
 800e3d8:	2300      	movs	r3, #0
 800e3da:	6003      	str	r3, [r0, #0]
 800e3dc:	4770      	bx	lr

0800e3de <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800e3de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3e0:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800e3e2:	2400      	movs	r4, #0
{
 800e3e4:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e3e6:	a801      	add	r0, sp, #4
 800e3e8:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800e3ea:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e3ec:	f7f7 f876 	bl	80054dc <osSemaphoreCreate>
 800e3f0:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800e3f2:	b130      	cbz	r0, 800e402 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800e3f4:	b945      	cbnz	r5, 800e408 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f7f7 f885 	bl	8005506 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800e3fc:	4628      	mov	r0, r5
}
 800e3fe:	b002      	add	sp, #8
 800e400:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800e402:	f04f 30ff 	mov.w	r0, #4294967295
 800e406:	e7fa      	b.n	800e3fe <sys_sem_new+0x20>
  return ERR_OK;
 800e408:	4620      	mov	r0, r4
 800e40a:	e7f8      	b.n	800e3fe <sys_sem_new+0x20>

0800e40c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800e40c:	b570      	push	{r4, r5, r6, lr}
 800e40e:	460e      	mov	r6, r1
 800e410:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800e412:	f7f6 ffe2 	bl	80053da <osKernelSysTick>
 800e416:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e418:	b146      	cbz	r6, 800e42c <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800e41a:	4631      	mov	r1, r6
 800e41c:	6828      	ldr	r0, [r5, #0]
 800e41e:	f7f7 f872 	bl	8005506 <osSemaphoreWait>
 800e422:	b958      	cbnz	r0, 800e43c <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800e424:	f7f6 ffd9 	bl	80053da <osKernelSysTick>
 800e428:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800e42c:	f04f 31ff 	mov.w	r1, #4294967295
 800e430:	6828      	ldr	r0, [r5, #0]
 800e432:	f7f7 f868 	bl	8005506 <osSemaphoreWait>
 800e436:	2800      	cmp	r0, #0
 800e438:	d1f8      	bne.n	800e42c <sys_arch_sem_wait+0x20>
 800e43a:	e7f3      	b.n	800e424 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800e43c:	f04f 30ff 	mov.w	r0, #4294967295
 800e440:	e7f3      	b.n	800e42a <sys_arch_sem_wait+0x1e>

0800e442 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800e442:	6800      	ldr	r0, [r0, #0]
 800e444:	f7f7 b884 	b.w	8005550 <osSemaphoreRelease>

0800e448 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800e448:	6800      	ldr	r0, [r0, #0]
 800e44a:	f7f7 b883 	b.w	8005554 <osSemaphoreDelete>

0800e44e <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800e44e:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800e450:	3800      	subs	r0, #0
 800e452:	bf18      	it	ne
 800e454:	2001      	movne	r0, #1
 800e456:	4770      	bx	lr

0800e458 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800e458:	2300      	movs	r3, #0
 800e45a:	6003      	str	r3, [r0, #0]
}
 800e45c:	4770      	bx	lr
	...

0800e460 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800e460:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800e462:	4803      	ldr	r0, [pc, #12]	; (800e470 <sys_init+0x10>)
 800e464:	f7f6 ffe5 	bl	8005432 <osMutexCreate>
 800e468:	4b02      	ldr	r3, [pc, #8]	; (800e474 <sys_init+0x14>)
 800e46a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800e46c:	bd08      	pop	{r3, pc}
 800e46e:	bf00      	nop
 800e470:	080118c4 	.word	0x080118c4
 800e474:	2000d06c 	.word	0x2000d06c

0800e478 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e478:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800e47a:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e47c:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e47e:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800e480:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e482:	f7f6 ffd6 	bl	8005432 <osMutexCreate>
 800e486:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800e488:	fab0 f080 	clz	r0, r0
 800e48c:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800e48e:	4240      	negs	r0, r0
 800e490:	b002      	add	sp, #8
 800e492:	bd10      	pop	{r4, pc}

0800e494 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800e494:	f04f 31ff 	mov.w	r1, #4294967295
 800e498:	6800      	ldr	r0, [r0, #0]
 800e49a:	f7f6 bfcd 	b.w	8005438 <osMutexWait>

0800e49e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800e49e:	6800      	ldr	r0, [r0, #0]
 800e4a0:	f7f6 bfef 	b.w	8005482 <osMutexRelease>

0800e4a4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e4a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e4a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e4aa:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800e4ac:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e4ae:	f8ad 100c 	strh.w	r1, [sp, #12]
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	f7f6 ff95 	bl	80053e8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800e4be:	b007      	add	sp, #28
 800e4c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800e4c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800e4c4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800e4c6:	4b04      	ldr	r3, [pc, #16]	; (800e4d8 <sys_arch_protect+0x14>)
 800e4c8:	f04f 31ff 	mov.w	r1, #4294967295
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	f7f6 ffb3 	bl	8005438 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	bd08      	pop	{r3, pc}
 800e4d6:	bf00      	nop
 800e4d8:	2000d06c 	.word	0x2000d06c

0800e4dc <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800e4dc:	4b01      	ldr	r3, [pc, #4]	; (800e4e4 <sys_arch_unprotect+0x8>)
 800e4de:	6818      	ldr	r0, [r3, #0]
 800e4e0:	f7f6 bfcf 	b.w	8005482 <osMutexRelease>
 800e4e4:	2000d06c 	.word	0x2000d06c

0800e4e8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800e4e8:	b570      	push	{r4, r5, r6, lr}
 800e4ea:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	b1a8      	cbz	r0, 800e51c <fs_open+0x34>
 800e4f0:	b1a1      	cbz	r1, 800e51c <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800e4f2:	4d0c      	ldr	r5, [pc, #48]	; (800e524 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800e4f4:	6869      	ldr	r1, [r5, #4]
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f7f1 fe8a 	bl	8000210 <strcmp>
 800e4fc:	b940      	cbnz	r0, 800e510 <fs_open+0x28>
      file->data = (const char *)f->data;
 800e4fe:	68ab      	ldr	r3, [r5, #8]
 800e500:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800e502:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800e504:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800e506:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800e50a:	7c2b      	ldrb	r3, [r5, #16]
 800e50c:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800e50e:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800e510:	682d      	ldr	r5, [r5, #0]
 800e512:	2d00      	cmp	r5, #0
 800e514:	d1ee      	bne.n	800e4f4 <fs_open+0xc>
  return ERR_VAL;
 800e516:	f06f 0005 	mvn.w	r0, #5
 800e51a:	e7f8      	b.n	800e50e <fs_open+0x26>
    return ERR_ARG;
 800e51c:	f06f 000f 	mvn.w	r0, #15
 800e520:	e7f5      	b.n	800e50e <fs_open+0x26>
 800e522:	bf00      	nop
 800e524:	080118c8 	.word	0x080118c8

0800e528 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800e528:	4770      	bx	lr
	...

0800e52c <__errno>:
 800e52c:	4b01      	ldr	r3, [pc, #4]	; (800e534 <__errno+0x8>)
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	2000002c 	.word	0x2000002c

0800e538 <__libc_init_array>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	4d0d      	ldr	r5, [pc, #52]	; (800e570 <__libc_init_array+0x38>)
 800e53c:	4c0d      	ldr	r4, [pc, #52]	; (800e574 <__libc_init_array+0x3c>)
 800e53e:	1b64      	subs	r4, r4, r5
 800e540:	10a4      	asrs	r4, r4, #2
 800e542:	2600      	movs	r6, #0
 800e544:	42a6      	cmp	r6, r4
 800e546:	d109      	bne.n	800e55c <__libc_init_array+0x24>
 800e548:	4d0b      	ldr	r5, [pc, #44]	; (800e578 <__libc_init_array+0x40>)
 800e54a:	4c0c      	ldr	r4, [pc, #48]	; (800e57c <__libc_init_array+0x44>)
 800e54c:	f002 ff92 	bl	8011474 <_init>
 800e550:	1b64      	subs	r4, r4, r5
 800e552:	10a4      	asrs	r4, r4, #2
 800e554:	2600      	movs	r6, #0
 800e556:	42a6      	cmp	r6, r4
 800e558:	d105      	bne.n	800e566 <__libc_init_array+0x2e>
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e560:	4798      	blx	r3
 800e562:	3601      	adds	r6, #1
 800e564:	e7ee      	b.n	800e544 <__libc_init_array+0xc>
 800e566:	f855 3b04 	ldr.w	r3, [r5], #4
 800e56a:	4798      	blx	r3
 800e56c:	3601      	adds	r6, #1
 800e56e:	e7f2      	b.n	800e556 <__libc_init_array+0x1e>
 800e570:	0801dff4 	.word	0x0801dff4
 800e574:	0801dff4 	.word	0x0801dff4
 800e578:	0801dff4 	.word	0x0801dff4
 800e57c:	0801dff8 	.word	0x0801dff8

0800e580 <memcmp>:
 800e580:	b510      	push	{r4, lr}
 800e582:	3901      	subs	r1, #1
 800e584:	4402      	add	r2, r0
 800e586:	4290      	cmp	r0, r2
 800e588:	d101      	bne.n	800e58e <memcmp+0xe>
 800e58a:	2000      	movs	r0, #0
 800e58c:	e005      	b.n	800e59a <memcmp+0x1a>
 800e58e:	7803      	ldrb	r3, [r0, #0]
 800e590:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e594:	42a3      	cmp	r3, r4
 800e596:	d001      	beq.n	800e59c <memcmp+0x1c>
 800e598:	1b18      	subs	r0, r3, r4
 800e59a:	bd10      	pop	{r4, pc}
 800e59c:	3001      	adds	r0, #1
 800e59e:	e7f2      	b.n	800e586 <memcmp+0x6>

0800e5a0 <memcpy>:
 800e5a0:	440a      	add	r2, r1
 800e5a2:	4291      	cmp	r1, r2
 800e5a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5a8:	d100      	bne.n	800e5ac <memcpy+0xc>
 800e5aa:	4770      	bx	lr
 800e5ac:	b510      	push	{r4, lr}
 800e5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5b6:	4291      	cmp	r1, r2
 800e5b8:	d1f9      	bne.n	800e5ae <memcpy+0xe>
 800e5ba:	bd10      	pop	{r4, pc}

0800e5bc <memmove>:
 800e5bc:	4288      	cmp	r0, r1
 800e5be:	b510      	push	{r4, lr}
 800e5c0:	eb01 0402 	add.w	r4, r1, r2
 800e5c4:	d902      	bls.n	800e5cc <memmove+0x10>
 800e5c6:	4284      	cmp	r4, r0
 800e5c8:	4623      	mov	r3, r4
 800e5ca:	d807      	bhi.n	800e5dc <memmove+0x20>
 800e5cc:	1e43      	subs	r3, r0, #1
 800e5ce:	42a1      	cmp	r1, r4
 800e5d0:	d008      	beq.n	800e5e4 <memmove+0x28>
 800e5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5da:	e7f8      	b.n	800e5ce <memmove+0x12>
 800e5dc:	4402      	add	r2, r0
 800e5de:	4601      	mov	r1, r0
 800e5e0:	428a      	cmp	r2, r1
 800e5e2:	d100      	bne.n	800e5e6 <memmove+0x2a>
 800e5e4:	bd10      	pop	{r4, pc}
 800e5e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5ee:	e7f7      	b.n	800e5e0 <memmove+0x24>

0800e5f0 <memset>:
 800e5f0:	4402      	add	r2, r0
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d100      	bne.n	800e5fa <memset+0xa>
 800e5f8:	4770      	bx	lr
 800e5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e5fe:	e7f9      	b.n	800e5f4 <memset+0x4>

0800e600 <__cvt>:
 800e600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e604:	ec55 4b10 	vmov	r4, r5, d0
 800e608:	2d00      	cmp	r5, #0
 800e60a:	460e      	mov	r6, r1
 800e60c:	4619      	mov	r1, r3
 800e60e:	462b      	mov	r3, r5
 800e610:	bfbb      	ittet	lt
 800e612:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e616:	461d      	movlt	r5, r3
 800e618:	2300      	movge	r3, #0
 800e61a:	232d      	movlt	r3, #45	; 0x2d
 800e61c:	700b      	strb	r3, [r1, #0]
 800e61e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e620:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e624:	4691      	mov	r9, r2
 800e626:	f023 0820 	bic.w	r8, r3, #32
 800e62a:	bfbc      	itt	lt
 800e62c:	4622      	movlt	r2, r4
 800e62e:	4614      	movlt	r4, r2
 800e630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e634:	d005      	beq.n	800e642 <__cvt+0x42>
 800e636:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e63a:	d100      	bne.n	800e63e <__cvt+0x3e>
 800e63c:	3601      	adds	r6, #1
 800e63e:	2102      	movs	r1, #2
 800e640:	e000      	b.n	800e644 <__cvt+0x44>
 800e642:	2103      	movs	r1, #3
 800e644:	ab03      	add	r3, sp, #12
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	ab02      	add	r3, sp, #8
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	ec45 4b10 	vmov	d0, r4, r5
 800e650:	4653      	mov	r3, sl
 800e652:	4632      	mov	r2, r6
 800e654:	f000 fd84 	bl	800f160 <_dtoa_r>
 800e658:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e65c:	4607      	mov	r7, r0
 800e65e:	d102      	bne.n	800e666 <__cvt+0x66>
 800e660:	f019 0f01 	tst.w	r9, #1
 800e664:	d022      	beq.n	800e6ac <__cvt+0xac>
 800e666:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e66a:	eb07 0906 	add.w	r9, r7, r6
 800e66e:	d110      	bne.n	800e692 <__cvt+0x92>
 800e670:	783b      	ldrb	r3, [r7, #0]
 800e672:	2b30      	cmp	r3, #48	; 0x30
 800e674:	d10a      	bne.n	800e68c <__cvt+0x8c>
 800e676:	2200      	movs	r2, #0
 800e678:	2300      	movs	r3, #0
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	f7f2 fa53 	bl	8000b28 <__aeabi_dcmpeq>
 800e682:	b918      	cbnz	r0, 800e68c <__cvt+0x8c>
 800e684:	f1c6 0601 	rsb	r6, r6, #1
 800e688:	f8ca 6000 	str.w	r6, [sl]
 800e68c:	f8da 3000 	ldr.w	r3, [sl]
 800e690:	4499      	add	r9, r3
 800e692:	2200      	movs	r2, #0
 800e694:	2300      	movs	r3, #0
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f2 fa45 	bl	8000b28 <__aeabi_dcmpeq>
 800e69e:	b108      	cbz	r0, 800e6a4 <__cvt+0xa4>
 800e6a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6a4:	2230      	movs	r2, #48	; 0x30
 800e6a6:	9b03      	ldr	r3, [sp, #12]
 800e6a8:	454b      	cmp	r3, r9
 800e6aa:	d307      	bcc.n	800e6bc <__cvt+0xbc>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6b0:	1bdb      	subs	r3, r3, r7
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	6013      	str	r3, [r2, #0]
 800e6b6:	b004      	add	sp, #16
 800e6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6bc:	1c59      	adds	r1, r3, #1
 800e6be:	9103      	str	r1, [sp, #12]
 800e6c0:	701a      	strb	r2, [r3, #0]
 800e6c2:	e7f0      	b.n	800e6a6 <__cvt+0xa6>

0800e6c4 <__exponent>:
 800e6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2900      	cmp	r1, #0
 800e6ca:	bfb8      	it	lt
 800e6cc:	4249      	neglt	r1, r1
 800e6ce:	f803 2b02 	strb.w	r2, [r3], #2
 800e6d2:	bfb4      	ite	lt
 800e6d4:	222d      	movlt	r2, #45	; 0x2d
 800e6d6:	222b      	movge	r2, #43	; 0x2b
 800e6d8:	2909      	cmp	r1, #9
 800e6da:	7042      	strb	r2, [r0, #1]
 800e6dc:	dd2a      	ble.n	800e734 <__exponent+0x70>
 800e6de:	f10d 0407 	add.w	r4, sp, #7
 800e6e2:	46a4      	mov	ip, r4
 800e6e4:	270a      	movs	r7, #10
 800e6e6:	46a6      	mov	lr, r4
 800e6e8:	460a      	mov	r2, r1
 800e6ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800e6ee:	fb07 1516 	mls	r5, r7, r6, r1
 800e6f2:	3530      	adds	r5, #48	; 0x30
 800e6f4:	2a63      	cmp	r2, #99	; 0x63
 800e6f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e6fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e6fe:	4631      	mov	r1, r6
 800e700:	dcf1      	bgt.n	800e6e6 <__exponent+0x22>
 800e702:	3130      	adds	r1, #48	; 0x30
 800e704:	f1ae 0502 	sub.w	r5, lr, #2
 800e708:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e70c:	1c44      	adds	r4, r0, #1
 800e70e:	4629      	mov	r1, r5
 800e710:	4561      	cmp	r1, ip
 800e712:	d30a      	bcc.n	800e72a <__exponent+0x66>
 800e714:	f10d 0209 	add.w	r2, sp, #9
 800e718:	eba2 020e 	sub.w	r2, r2, lr
 800e71c:	4565      	cmp	r5, ip
 800e71e:	bf88      	it	hi
 800e720:	2200      	movhi	r2, #0
 800e722:	4413      	add	r3, r2
 800e724:	1a18      	subs	r0, r3, r0
 800e726:	b003      	add	sp, #12
 800e728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e72e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e732:	e7ed      	b.n	800e710 <__exponent+0x4c>
 800e734:	2330      	movs	r3, #48	; 0x30
 800e736:	3130      	adds	r1, #48	; 0x30
 800e738:	7083      	strb	r3, [r0, #2]
 800e73a:	70c1      	strb	r1, [r0, #3]
 800e73c:	1d03      	adds	r3, r0, #4
 800e73e:	e7f1      	b.n	800e724 <__exponent+0x60>

0800e740 <_printf_float>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	ed2d 8b02 	vpush	{d8}
 800e748:	b08d      	sub	sp, #52	; 0x34
 800e74a:	460c      	mov	r4, r1
 800e74c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e750:	4616      	mov	r6, r2
 800e752:	461f      	mov	r7, r3
 800e754:	4605      	mov	r5, r0
 800e756:	f001 fbf9 	bl	800ff4c <_localeconv_r>
 800e75a:	f8d0 a000 	ldr.w	sl, [r0]
 800e75e:	4650      	mov	r0, sl
 800e760:	f7f1 fd60 	bl	8000224 <strlen>
 800e764:	2300      	movs	r3, #0
 800e766:	930a      	str	r3, [sp, #40]	; 0x28
 800e768:	6823      	ldr	r3, [r4, #0]
 800e76a:	9305      	str	r3, [sp, #20]
 800e76c:	f8d8 3000 	ldr.w	r3, [r8]
 800e770:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e774:	3307      	adds	r3, #7
 800e776:	f023 0307 	bic.w	r3, r3, #7
 800e77a:	f103 0208 	add.w	r2, r3, #8
 800e77e:	f8c8 2000 	str.w	r2, [r8]
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e78a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e78e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e792:	9307      	str	r3, [sp, #28]
 800e794:	f8cd 8018 	str.w	r8, [sp, #24]
 800e798:	ee08 0a10 	vmov	s16, r0
 800e79c:	4b9f      	ldr	r3, [pc, #636]	; (800ea1c <_printf_float+0x2dc>)
 800e79e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a6:	f7f2 f9f1 	bl	8000b8c <__aeabi_dcmpun>
 800e7aa:	bb88      	cbnz	r0, 800e810 <_printf_float+0xd0>
 800e7ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7b0:	4b9a      	ldr	r3, [pc, #616]	; (800ea1c <_printf_float+0x2dc>)
 800e7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b6:	f7f2 f9cb 	bl	8000b50 <__aeabi_dcmple>
 800e7ba:	bb48      	cbnz	r0, 800e810 <_printf_float+0xd0>
 800e7bc:	2200      	movs	r2, #0
 800e7be:	2300      	movs	r3, #0
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	f7f2 f9ba 	bl	8000b3c <__aeabi_dcmplt>
 800e7c8:	b110      	cbz	r0, 800e7d0 <_printf_float+0x90>
 800e7ca:	232d      	movs	r3, #45	; 0x2d
 800e7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7d0:	4b93      	ldr	r3, [pc, #588]	; (800ea20 <_printf_float+0x2e0>)
 800e7d2:	4894      	ldr	r0, [pc, #592]	; (800ea24 <_printf_float+0x2e4>)
 800e7d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e7d8:	bf94      	ite	ls
 800e7da:	4698      	movls	r8, r3
 800e7dc:	4680      	movhi	r8, r0
 800e7de:	2303      	movs	r3, #3
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	9b05      	ldr	r3, [sp, #20]
 800e7e4:	f023 0204 	bic.w	r2, r3, #4
 800e7e8:	6022      	str	r2, [r4, #0]
 800e7ea:	f04f 0900 	mov.w	r9, #0
 800e7ee:	9700      	str	r7, [sp, #0]
 800e7f0:	4633      	mov	r3, r6
 800e7f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	f000 f9d8 	bl	800ebac <_printf_common>
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	f040 8090 	bne.w	800e922 <_printf_float+0x1e2>
 800e802:	f04f 30ff 	mov.w	r0, #4294967295
 800e806:	b00d      	add	sp, #52	; 0x34
 800e808:	ecbd 8b02 	vpop	{d8}
 800e80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e810:	4642      	mov	r2, r8
 800e812:	464b      	mov	r3, r9
 800e814:	4640      	mov	r0, r8
 800e816:	4649      	mov	r1, r9
 800e818:	f7f2 f9b8 	bl	8000b8c <__aeabi_dcmpun>
 800e81c:	b140      	cbz	r0, 800e830 <_printf_float+0xf0>
 800e81e:	464b      	mov	r3, r9
 800e820:	2b00      	cmp	r3, #0
 800e822:	bfbc      	itt	lt
 800e824:	232d      	movlt	r3, #45	; 0x2d
 800e826:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e82a:	487f      	ldr	r0, [pc, #508]	; (800ea28 <_printf_float+0x2e8>)
 800e82c:	4b7f      	ldr	r3, [pc, #508]	; (800ea2c <_printf_float+0x2ec>)
 800e82e:	e7d1      	b.n	800e7d4 <_printf_float+0x94>
 800e830:	6863      	ldr	r3, [r4, #4]
 800e832:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e836:	9206      	str	r2, [sp, #24]
 800e838:	1c5a      	adds	r2, r3, #1
 800e83a:	d13f      	bne.n	800e8bc <_printf_float+0x17c>
 800e83c:	2306      	movs	r3, #6
 800e83e:	6063      	str	r3, [r4, #4]
 800e840:	9b05      	ldr	r3, [sp, #20]
 800e842:	6861      	ldr	r1, [r4, #4]
 800e844:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e848:	2300      	movs	r3, #0
 800e84a:	9303      	str	r3, [sp, #12]
 800e84c:	ab0a      	add	r3, sp, #40	; 0x28
 800e84e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e852:	ab09      	add	r3, sp, #36	; 0x24
 800e854:	ec49 8b10 	vmov	d0, r8, r9
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	6022      	str	r2, [r4, #0]
 800e85c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e860:	4628      	mov	r0, r5
 800e862:	f7ff fecd 	bl	800e600 <__cvt>
 800e866:	9b06      	ldr	r3, [sp, #24]
 800e868:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e86a:	2b47      	cmp	r3, #71	; 0x47
 800e86c:	4680      	mov	r8, r0
 800e86e:	d108      	bne.n	800e882 <_printf_float+0x142>
 800e870:	1cc8      	adds	r0, r1, #3
 800e872:	db02      	blt.n	800e87a <_printf_float+0x13a>
 800e874:	6863      	ldr	r3, [r4, #4]
 800e876:	4299      	cmp	r1, r3
 800e878:	dd41      	ble.n	800e8fe <_printf_float+0x1be>
 800e87a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e87e:	fa5f fb8b 	uxtb.w	fp, fp
 800e882:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e886:	d820      	bhi.n	800e8ca <_printf_float+0x18a>
 800e888:	3901      	subs	r1, #1
 800e88a:	465a      	mov	r2, fp
 800e88c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e890:	9109      	str	r1, [sp, #36]	; 0x24
 800e892:	f7ff ff17 	bl	800e6c4 <__exponent>
 800e896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e898:	1813      	adds	r3, r2, r0
 800e89a:	2a01      	cmp	r2, #1
 800e89c:	4681      	mov	r9, r0
 800e89e:	6123      	str	r3, [r4, #16]
 800e8a0:	dc02      	bgt.n	800e8a8 <_printf_float+0x168>
 800e8a2:	6822      	ldr	r2, [r4, #0]
 800e8a4:	07d2      	lsls	r2, r2, #31
 800e8a6:	d501      	bpl.n	800e8ac <_printf_float+0x16c>
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	6123      	str	r3, [r4, #16]
 800e8ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d09c      	beq.n	800e7ee <_printf_float+0xae>
 800e8b4:	232d      	movs	r3, #45	; 0x2d
 800e8b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8ba:	e798      	b.n	800e7ee <_printf_float+0xae>
 800e8bc:	9a06      	ldr	r2, [sp, #24]
 800e8be:	2a47      	cmp	r2, #71	; 0x47
 800e8c0:	d1be      	bne.n	800e840 <_printf_float+0x100>
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1bc      	bne.n	800e840 <_printf_float+0x100>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e7b9      	b.n	800e83e <_printf_float+0xfe>
 800e8ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e8ce:	d118      	bne.n	800e902 <_printf_float+0x1c2>
 800e8d0:	2900      	cmp	r1, #0
 800e8d2:	6863      	ldr	r3, [r4, #4]
 800e8d4:	dd0b      	ble.n	800e8ee <_printf_float+0x1ae>
 800e8d6:	6121      	str	r1, [r4, #16]
 800e8d8:	b913      	cbnz	r3, 800e8e0 <_printf_float+0x1a0>
 800e8da:	6822      	ldr	r2, [r4, #0]
 800e8dc:	07d0      	lsls	r0, r2, #31
 800e8de:	d502      	bpl.n	800e8e6 <_printf_float+0x1a6>
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	440b      	add	r3, r1
 800e8e4:	6123      	str	r3, [r4, #16]
 800e8e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8e8:	f04f 0900 	mov.w	r9, #0
 800e8ec:	e7de      	b.n	800e8ac <_printf_float+0x16c>
 800e8ee:	b913      	cbnz	r3, 800e8f6 <_printf_float+0x1b6>
 800e8f0:	6822      	ldr	r2, [r4, #0]
 800e8f2:	07d2      	lsls	r2, r2, #31
 800e8f4:	d501      	bpl.n	800e8fa <_printf_float+0x1ba>
 800e8f6:	3302      	adds	r3, #2
 800e8f8:	e7f4      	b.n	800e8e4 <_printf_float+0x1a4>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e7f2      	b.n	800e8e4 <_printf_float+0x1a4>
 800e8fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e904:	4299      	cmp	r1, r3
 800e906:	db05      	blt.n	800e914 <_printf_float+0x1d4>
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	6121      	str	r1, [r4, #16]
 800e90c:	07d8      	lsls	r0, r3, #31
 800e90e:	d5ea      	bpl.n	800e8e6 <_printf_float+0x1a6>
 800e910:	1c4b      	adds	r3, r1, #1
 800e912:	e7e7      	b.n	800e8e4 <_printf_float+0x1a4>
 800e914:	2900      	cmp	r1, #0
 800e916:	bfd4      	ite	le
 800e918:	f1c1 0202 	rsble	r2, r1, #2
 800e91c:	2201      	movgt	r2, #1
 800e91e:	4413      	add	r3, r2
 800e920:	e7e0      	b.n	800e8e4 <_printf_float+0x1a4>
 800e922:	6823      	ldr	r3, [r4, #0]
 800e924:	055a      	lsls	r2, r3, #21
 800e926:	d407      	bmi.n	800e938 <_printf_float+0x1f8>
 800e928:	6923      	ldr	r3, [r4, #16]
 800e92a:	4642      	mov	r2, r8
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	47b8      	blx	r7
 800e932:	3001      	adds	r0, #1
 800e934:	d12c      	bne.n	800e990 <_printf_float+0x250>
 800e936:	e764      	b.n	800e802 <_printf_float+0xc2>
 800e938:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e93c:	f240 80e0 	bls.w	800eb00 <_printf_float+0x3c0>
 800e940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e944:	2200      	movs	r2, #0
 800e946:	2300      	movs	r3, #0
 800e948:	f7f2 f8ee 	bl	8000b28 <__aeabi_dcmpeq>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d034      	beq.n	800e9ba <_printf_float+0x27a>
 800e950:	4a37      	ldr	r2, [pc, #220]	; (800ea30 <_printf_float+0x2f0>)
 800e952:	2301      	movs	r3, #1
 800e954:	4631      	mov	r1, r6
 800e956:	4628      	mov	r0, r5
 800e958:	47b8      	blx	r7
 800e95a:	3001      	adds	r0, #1
 800e95c:	f43f af51 	beq.w	800e802 <_printf_float+0xc2>
 800e960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e964:	429a      	cmp	r2, r3
 800e966:	db02      	blt.n	800e96e <_printf_float+0x22e>
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	07d8      	lsls	r0, r3, #31
 800e96c:	d510      	bpl.n	800e990 <_printf_float+0x250>
 800e96e:	ee18 3a10 	vmov	r3, s16
 800e972:	4652      	mov	r2, sl
 800e974:	4631      	mov	r1, r6
 800e976:	4628      	mov	r0, r5
 800e978:	47b8      	blx	r7
 800e97a:	3001      	adds	r0, #1
 800e97c:	f43f af41 	beq.w	800e802 <_printf_float+0xc2>
 800e980:	f04f 0800 	mov.w	r8, #0
 800e984:	f104 091a 	add.w	r9, r4, #26
 800e988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e98a:	3b01      	subs	r3, #1
 800e98c:	4543      	cmp	r3, r8
 800e98e:	dc09      	bgt.n	800e9a4 <_printf_float+0x264>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	079b      	lsls	r3, r3, #30
 800e994:	f100 8105 	bmi.w	800eba2 <_printf_float+0x462>
 800e998:	68e0      	ldr	r0, [r4, #12]
 800e99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e99c:	4298      	cmp	r0, r3
 800e99e:	bfb8      	it	lt
 800e9a0:	4618      	movlt	r0, r3
 800e9a2:	e730      	b.n	800e806 <_printf_float+0xc6>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	464a      	mov	r2, r9
 800e9a8:	4631      	mov	r1, r6
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	47b8      	blx	r7
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	f43f af27 	beq.w	800e802 <_printf_float+0xc2>
 800e9b4:	f108 0801 	add.w	r8, r8, #1
 800e9b8:	e7e6      	b.n	800e988 <_printf_float+0x248>
 800e9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	dc39      	bgt.n	800ea34 <_printf_float+0x2f4>
 800e9c0:	4a1b      	ldr	r2, [pc, #108]	; (800ea30 <_printf_float+0x2f0>)
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4631      	mov	r1, r6
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	47b8      	blx	r7
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	f43f af19 	beq.w	800e802 <_printf_float+0xc2>
 800e9d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	d102      	bne.n	800e9de <_printf_float+0x29e>
 800e9d8:	6823      	ldr	r3, [r4, #0]
 800e9da:	07d9      	lsls	r1, r3, #31
 800e9dc:	d5d8      	bpl.n	800e990 <_printf_float+0x250>
 800e9de:	ee18 3a10 	vmov	r3, s16
 800e9e2:	4652      	mov	r2, sl
 800e9e4:	4631      	mov	r1, r6
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	47b8      	blx	r7
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	f43f af09 	beq.w	800e802 <_printf_float+0xc2>
 800e9f0:	f04f 0900 	mov.w	r9, #0
 800e9f4:	f104 0a1a 	add.w	sl, r4, #26
 800e9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9fa:	425b      	negs	r3, r3
 800e9fc:	454b      	cmp	r3, r9
 800e9fe:	dc01      	bgt.n	800ea04 <_printf_float+0x2c4>
 800ea00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea02:	e792      	b.n	800e92a <_printf_float+0x1ea>
 800ea04:	2301      	movs	r3, #1
 800ea06:	4652      	mov	r2, sl
 800ea08:	4631      	mov	r1, r6
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	47b8      	blx	r7
 800ea0e:	3001      	adds	r0, #1
 800ea10:	f43f aef7 	beq.w	800e802 <_printf_float+0xc2>
 800ea14:	f109 0901 	add.w	r9, r9, #1
 800ea18:	e7ee      	b.n	800e9f8 <_printf_float+0x2b8>
 800ea1a:	bf00      	nop
 800ea1c:	7fefffff 	.word	0x7fefffff
 800ea20:	0801dcbc 	.word	0x0801dcbc
 800ea24:	0801dcc0 	.word	0x0801dcc0
 800ea28:	0801dcc8 	.word	0x0801dcc8
 800ea2c:	0801dcc4 	.word	0x0801dcc4
 800ea30:	0801b16b 	.word	0x0801b16b
 800ea34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	bfa8      	it	ge
 800ea3c:	461a      	movge	r2, r3
 800ea3e:	2a00      	cmp	r2, #0
 800ea40:	4691      	mov	r9, r2
 800ea42:	dc37      	bgt.n	800eab4 <_printf_float+0x374>
 800ea44:	f04f 0b00 	mov.w	fp, #0
 800ea48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea4c:	f104 021a 	add.w	r2, r4, #26
 800ea50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea52:	9305      	str	r3, [sp, #20]
 800ea54:	eba3 0309 	sub.w	r3, r3, r9
 800ea58:	455b      	cmp	r3, fp
 800ea5a:	dc33      	bgt.n	800eac4 <_printf_float+0x384>
 800ea5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea60:	429a      	cmp	r2, r3
 800ea62:	db3b      	blt.n	800eadc <_printf_float+0x39c>
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	07da      	lsls	r2, r3, #31
 800ea68:	d438      	bmi.n	800eadc <_printf_float+0x39c>
 800ea6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea6c:	9a05      	ldr	r2, [sp, #20]
 800ea6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea70:	1a9a      	subs	r2, r3, r2
 800ea72:	eba3 0901 	sub.w	r9, r3, r1
 800ea76:	4591      	cmp	r9, r2
 800ea78:	bfa8      	it	ge
 800ea7a:	4691      	movge	r9, r2
 800ea7c:	f1b9 0f00 	cmp.w	r9, #0
 800ea80:	dc35      	bgt.n	800eaee <_printf_float+0x3ae>
 800ea82:	f04f 0800 	mov.w	r8, #0
 800ea86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea8a:	f104 0a1a 	add.w	sl, r4, #26
 800ea8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea92:	1a9b      	subs	r3, r3, r2
 800ea94:	eba3 0309 	sub.w	r3, r3, r9
 800ea98:	4543      	cmp	r3, r8
 800ea9a:	f77f af79 	ble.w	800e990 <_printf_float+0x250>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	4652      	mov	r2, sl
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	47b8      	blx	r7
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	f43f aeaa 	beq.w	800e802 <_printf_float+0xc2>
 800eaae:	f108 0801 	add.w	r8, r8, #1
 800eab2:	e7ec      	b.n	800ea8e <_printf_float+0x34e>
 800eab4:	4613      	mov	r3, r2
 800eab6:	4631      	mov	r1, r6
 800eab8:	4642      	mov	r2, r8
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b8      	blx	r7
 800eabe:	3001      	adds	r0, #1
 800eac0:	d1c0      	bne.n	800ea44 <_printf_float+0x304>
 800eac2:	e69e      	b.n	800e802 <_printf_float+0xc2>
 800eac4:	2301      	movs	r3, #1
 800eac6:	4631      	mov	r1, r6
 800eac8:	4628      	mov	r0, r5
 800eaca:	9205      	str	r2, [sp, #20]
 800eacc:	47b8      	blx	r7
 800eace:	3001      	adds	r0, #1
 800ead0:	f43f ae97 	beq.w	800e802 <_printf_float+0xc2>
 800ead4:	9a05      	ldr	r2, [sp, #20]
 800ead6:	f10b 0b01 	add.w	fp, fp, #1
 800eada:	e7b9      	b.n	800ea50 <_printf_float+0x310>
 800eadc:	ee18 3a10 	vmov	r3, s16
 800eae0:	4652      	mov	r2, sl
 800eae2:	4631      	mov	r1, r6
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b8      	blx	r7
 800eae8:	3001      	adds	r0, #1
 800eaea:	d1be      	bne.n	800ea6a <_printf_float+0x32a>
 800eaec:	e689      	b.n	800e802 <_printf_float+0xc2>
 800eaee:	9a05      	ldr	r2, [sp, #20]
 800eaf0:	464b      	mov	r3, r9
 800eaf2:	4442      	add	r2, r8
 800eaf4:	4631      	mov	r1, r6
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	47b8      	blx	r7
 800eafa:	3001      	adds	r0, #1
 800eafc:	d1c1      	bne.n	800ea82 <_printf_float+0x342>
 800eafe:	e680      	b.n	800e802 <_printf_float+0xc2>
 800eb00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb02:	2a01      	cmp	r2, #1
 800eb04:	dc01      	bgt.n	800eb0a <_printf_float+0x3ca>
 800eb06:	07db      	lsls	r3, r3, #31
 800eb08:	d538      	bpl.n	800eb7c <_printf_float+0x43c>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	4642      	mov	r2, r8
 800eb0e:	4631      	mov	r1, r6
 800eb10:	4628      	mov	r0, r5
 800eb12:	47b8      	blx	r7
 800eb14:	3001      	adds	r0, #1
 800eb16:	f43f ae74 	beq.w	800e802 <_printf_float+0xc2>
 800eb1a:	ee18 3a10 	vmov	r3, s16
 800eb1e:	4652      	mov	r2, sl
 800eb20:	4631      	mov	r1, r6
 800eb22:	4628      	mov	r0, r5
 800eb24:	47b8      	blx	r7
 800eb26:	3001      	adds	r0, #1
 800eb28:	f43f ae6b 	beq.w	800e802 <_printf_float+0xc2>
 800eb2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	f7f1 fff8 	bl	8000b28 <__aeabi_dcmpeq>
 800eb38:	b9d8      	cbnz	r0, 800eb72 <_printf_float+0x432>
 800eb3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb3c:	f108 0201 	add.w	r2, r8, #1
 800eb40:	3b01      	subs	r3, #1
 800eb42:	4631      	mov	r1, r6
 800eb44:	4628      	mov	r0, r5
 800eb46:	47b8      	blx	r7
 800eb48:	3001      	adds	r0, #1
 800eb4a:	d10e      	bne.n	800eb6a <_printf_float+0x42a>
 800eb4c:	e659      	b.n	800e802 <_printf_float+0xc2>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	4652      	mov	r2, sl
 800eb52:	4631      	mov	r1, r6
 800eb54:	4628      	mov	r0, r5
 800eb56:	47b8      	blx	r7
 800eb58:	3001      	adds	r0, #1
 800eb5a:	f43f ae52 	beq.w	800e802 <_printf_float+0xc2>
 800eb5e:	f108 0801 	add.w	r8, r8, #1
 800eb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb64:	3b01      	subs	r3, #1
 800eb66:	4543      	cmp	r3, r8
 800eb68:	dcf1      	bgt.n	800eb4e <_printf_float+0x40e>
 800eb6a:	464b      	mov	r3, r9
 800eb6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb70:	e6dc      	b.n	800e92c <_printf_float+0x1ec>
 800eb72:	f04f 0800 	mov.w	r8, #0
 800eb76:	f104 0a1a 	add.w	sl, r4, #26
 800eb7a:	e7f2      	b.n	800eb62 <_printf_float+0x422>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	4642      	mov	r2, r8
 800eb80:	e7df      	b.n	800eb42 <_printf_float+0x402>
 800eb82:	2301      	movs	r3, #1
 800eb84:	464a      	mov	r2, r9
 800eb86:	4631      	mov	r1, r6
 800eb88:	4628      	mov	r0, r5
 800eb8a:	47b8      	blx	r7
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	f43f ae38 	beq.w	800e802 <_printf_float+0xc2>
 800eb92:	f108 0801 	add.w	r8, r8, #1
 800eb96:	68e3      	ldr	r3, [r4, #12]
 800eb98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb9a:	1a5b      	subs	r3, r3, r1
 800eb9c:	4543      	cmp	r3, r8
 800eb9e:	dcf0      	bgt.n	800eb82 <_printf_float+0x442>
 800eba0:	e6fa      	b.n	800e998 <_printf_float+0x258>
 800eba2:	f04f 0800 	mov.w	r8, #0
 800eba6:	f104 0919 	add.w	r9, r4, #25
 800ebaa:	e7f4      	b.n	800eb96 <_printf_float+0x456>

0800ebac <_printf_common>:
 800ebac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb0:	4616      	mov	r6, r2
 800ebb2:	4699      	mov	r9, r3
 800ebb4:	688a      	ldr	r2, [r1, #8]
 800ebb6:	690b      	ldr	r3, [r1, #16]
 800ebb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	bfb8      	it	lt
 800ebc0:	4613      	movlt	r3, r2
 800ebc2:	6033      	str	r3, [r6, #0]
 800ebc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebc8:	4607      	mov	r7, r0
 800ebca:	460c      	mov	r4, r1
 800ebcc:	b10a      	cbz	r2, 800ebd2 <_printf_common+0x26>
 800ebce:	3301      	adds	r3, #1
 800ebd0:	6033      	str	r3, [r6, #0]
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	0699      	lsls	r1, r3, #26
 800ebd6:	bf42      	ittt	mi
 800ebd8:	6833      	ldrmi	r3, [r6, #0]
 800ebda:	3302      	addmi	r3, #2
 800ebdc:	6033      	strmi	r3, [r6, #0]
 800ebde:	6825      	ldr	r5, [r4, #0]
 800ebe0:	f015 0506 	ands.w	r5, r5, #6
 800ebe4:	d106      	bne.n	800ebf4 <_printf_common+0x48>
 800ebe6:	f104 0a19 	add.w	sl, r4, #25
 800ebea:	68e3      	ldr	r3, [r4, #12]
 800ebec:	6832      	ldr	r2, [r6, #0]
 800ebee:	1a9b      	subs	r3, r3, r2
 800ebf0:	42ab      	cmp	r3, r5
 800ebf2:	dc26      	bgt.n	800ec42 <_printf_common+0x96>
 800ebf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebf8:	1e13      	subs	r3, r2, #0
 800ebfa:	6822      	ldr	r2, [r4, #0]
 800ebfc:	bf18      	it	ne
 800ebfe:	2301      	movne	r3, #1
 800ec00:	0692      	lsls	r2, r2, #26
 800ec02:	d42b      	bmi.n	800ec5c <_printf_common+0xb0>
 800ec04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec08:	4649      	mov	r1, r9
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	47c0      	blx	r8
 800ec0e:	3001      	adds	r0, #1
 800ec10:	d01e      	beq.n	800ec50 <_printf_common+0xa4>
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	68e5      	ldr	r5, [r4, #12]
 800ec16:	6832      	ldr	r2, [r6, #0]
 800ec18:	f003 0306 	and.w	r3, r3, #6
 800ec1c:	2b04      	cmp	r3, #4
 800ec1e:	bf08      	it	eq
 800ec20:	1aad      	subeq	r5, r5, r2
 800ec22:	68a3      	ldr	r3, [r4, #8]
 800ec24:	6922      	ldr	r2, [r4, #16]
 800ec26:	bf0c      	ite	eq
 800ec28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec2c:	2500      	movne	r5, #0
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	bfc4      	itt	gt
 800ec32:	1a9b      	subgt	r3, r3, r2
 800ec34:	18ed      	addgt	r5, r5, r3
 800ec36:	2600      	movs	r6, #0
 800ec38:	341a      	adds	r4, #26
 800ec3a:	42b5      	cmp	r5, r6
 800ec3c:	d11a      	bne.n	800ec74 <_printf_common+0xc8>
 800ec3e:	2000      	movs	r0, #0
 800ec40:	e008      	b.n	800ec54 <_printf_common+0xa8>
 800ec42:	2301      	movs	r3, #1
 800ec44:	4652      	mov	r2, sl
 800ec46:	4649      	mov	r1, r9
 800ec48:	4638      	mov	r0, r7
 800ec4a:	47c0      	blx	r8
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d103      	bne.n	800ec58 <_printf_common+0xac>
 800ec50:	f04f 30ff 	mov.w	r0, #4294967295
 800ec54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec58:	3501      	adds	r5, #1
 800ec5a:	e7c6      	b.n	800ebea <_printf_common+0x3e>
 800ec5c:	18e1      	adds	r1, r4, r3
 800ec5e:	1c5a      	adds	r2, r3, #1
 800ec60:	2030      	movs	r0, #48	; 0x30
 800ec62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec66:	4422      	add	r2, r4
 800ec68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec70:	3302      	adds	r3, #2
 800ec72:	e7c7      	b.n	800ec04 <_printf_common+0x58>
 800ec74:	2301      	movs	r3, #1
 800ec76:	4622      	mov	r2, r4
 800ec78:	4649      	mov	r1, r9
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	47c0      	blx	r8
 800ec7e:	3001      	adds	r0, #1
 800ec80:	d0e6      	beq.n	800ec50 <_printf_common+0xa4>
 800ec82:	3601      	adds	r6, #1
 800ec84:	e7d9      	b.n	800ec3a <_printf_common+0x8e>
	...

0800ec88 <_printf_i>:
 800ec88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec8c:	7e0f      	ldrb	r7, [r1, #24]
 800ec8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec90:	2f78      	cmp	r7, #120	; 0x78
 800ec92:	4691      	mov	r9, r2
 800ec94:	4680      	mov	r8, r0
 800ec96:	460c      	mov	r4, r1
 800ec98:	469a      	mov	sl, r3
 800ec9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec9e:	d807      	bhi.n	800ecb0 <_printf_i+0x28>
 800eca0:	2f62      	cmp	r7, #98	; 0x62
 800eca2:	d80a      	bhi.n	800ecba <_printf_i+0x32>
 800eca4:	2f00      	cmp	r7, #0
 800eca6:	f000 80d8 	beq.w	800ee5a <_printf_i+0x1d2>
 800ecaa:	2f58      	cmp	r7, #88	; 0x58
 800ecac:	f000 80a3 	beq.w	800edf6 <_printf_i+0x16e>
 800ecb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ecb8:	e03a      	b.n	800ed30 <_printf_i+0xa8>
 800ecba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecbe:	2b15      	cmp	r3, #21
 800ecc0:	d8f6      	bhi.n	800ecb0 <_printf_i+0x28>
 800ecc2:	a101      	add	r1, pc, #4	; (adr r1, 800ecc8 <_printf_i+0x40>)
 800ecc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecc8:	0800ed21 	.word	0x0800ed21
 800eccc:	0800ed35 	.word	0x0800ed35
 800ecd0:	0800ecb1 	.word	0x0800ecb1
 800ecd4:	0800ecb1 	.word	0x0800ecb1
 800ecd8:	0800ecb1 	.word	0x0800ecb1
 800ecdc:	0800ecb1 	.word	0x0800ecb1
 800ece0:	0800ed35 	.word	0x0800ed35
 800ece4:	0800ecb1 	.word	0x0800ecb1
 800ece8:	0800ecb1 	.word	0x0800ecb1
 800ecec:	0800ecb1 	.word	0x0800ecb1
 800ecf0:	0800ecb1 	.word	0x0800ecb1
 800ecf4:	0800ee41 	.word	0x0800ee41
 800ecf8:	0800ed65 	.word	0x0800ed65
 800ecfc:	0800ee23 	.word	0x0800ee23
 800ed00:	0800ecb1 	.word	0x0800ecb1
 800ed04:	0800ecb1 	.word	0x0800ecb1
 800ed08:	0800ee63 	.word	0x0800ee63
 800ed0c:	0800ecb1 	.word	0x0800ecb1
 800ed10:	0800ed65 	.word	0x0800ed65
 800ed14:	0800ecb1 	.word	0x0800ecb1
 800ed18:	0800ecb1 	.word	0x0800ecb1
 800ed1c:	0800ee2b 	.word	0x0800ee2b
 800ed20:	682b      	ldr	r3, [r5, #0]
 800ed22:	1d1a      	adds	r2, r3, #4
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	602a      	str	r2, [r5, #0]
 800ed28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed30:	2301      	movs	r3, #1
 800ed32:	e0a3      	b.n	800ee7c <_printf_i+0x1f4>
 800ed34:	6820      	ldr	r0, [r4, #0]
 800ed36:	6829      	ldr	r1, [r5, #0]
 800ed38:	0606      	lsls	r6, r0, #24
 800ed3a:	f101 0304 	add.w	r3, r1, #4
 800ed3e:	d50a      	bpl.n	800ed56 <_printf_i+0xce>
 800ed40:	680e      	ldr	r6, [r1, #0]
 800ed42:	602b      	str	r3, [r5, #0]
 800ed44:	2e00      	cmp	r6, #0
 800ed46:	da03      	bge.n	800ed50 <_printf_i+0xc8>
 800ed48:	232d      	movs	r3, #45	; 0x2d
 800ed4a:	4276      	negs	r6, r6
 800ed4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed50:	485e      	ldr	r0, [pc, #376]	; (800eecc <_printf_i+0x244>)
 800ed52:	230a      	movs	r3, #10
 800ed54:	e019      	b.n	800ed8a <_printf_i+0x102>
 800ed56:	680e      	ldr	r6, [r1, #0]
 800ed58:	602b      	str	r3, [r5, #0]
 800ed5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed5e:	bf18      	it	ne
 800ed60:	b236      	sxthne	r6, r6
 800ed62:	e7ef      	b.n	800ed44 <_printf_i+0xbc>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	6820      	ldr	r0, [r4, #0]
 800ed68:	1d19      	adds	r1, r3, #4
 800ed6a:	6029      	str	r1, [r5, #0]
 800ed6c:	0601      	lsls	r1, r0, #24
 800ed6e:	d501      	bpl.n	800ed74 <_printf_i+0xec>
 800ed70:	681e      	ldr	r6, [r3, #0]
 800ed72:	e002      	b.n	800ed7a <_printf_i+0xf2>
 800ed74:	0646      	lsls	r6, r0, #25
 800ed76:	d5fb      	bpl.n	800ed70 <_printf_i+0xe8>
 800ed78:	881e      	ldrh	r6, [r3, #0]
 800ed7a:	4854      	ldr	r0, [pc, #336]	; (800eecc <_printf_i+0x244>)
 800ed7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed7e:	bf0c      	ite	eq
 800ed80:	2308      	moveq	r3, #8
 800ed82:	230a      	movne	r3, #10
 800ed84:	2100      	movs	r1, #0
 800ed86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed8a:	6865      	ldr	r5, [r4, #4]
 800ed8c:	60a5      	str	r5, [r4, #8]
 800ed8e:	2d00      	cmp	r5, #0
 800ed90:	bfa2      	ittt	ge
 800ed92:	6821      	ldrge	r1, [r4, #0]
 800ed94:	f021 0104 	bicge.w	r1, r1, #4
 800ed98:	6021      	strge	r1, [r4, #0]
 800ed9a:	b90e      	cbnz	r6, 800eda0 <_printf_i+0x118>
 800ed9c:	2d00      	cmp	r5, #0
 800ed9e:	d04d      	beq.n	800ee3c <_printf_i+0x1b4>
 800eda0:	4615      	mov	r5, r2
 800eda2:	fbb6 f1f3 	udiv	r1, r6, r3
 800eda6:	fb03 6711 	mls	r7, r3, r1, r6
 800edaa:	5dc7      	ldrb	r7, [r0, r7]
 800edac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edb0:	4637      	mov	r7, r6
 800edb2:	42bb      	cmp	r3, r7
 800edb4:	460e      	mov	r6, r1
 800edb6:	d9f4      	bls.n	800eda2 <_printf_i+0x11a>
 800edb8:	2b08      	cmp	r3, #8
 800edba:	d10b      	bne.n	800edd4 <_printf_i+0x14c>
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	07de      	lsls	r6, r3, #31
 800edc0:	d508      	bpl.n	800edd4 <_printf_i+0x14c>
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	6861      	ldr	r1, [r4, #4]
 800edc6:	4299      	cmp	r1, r3
 800edc8:	bfde      	ittt	le
 800edca:	2330      	movle	r3, #48	; 0x30
 800edcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800edd4:	1b52      	subs	r2, r2, r5
 800edd6:	6122      	str	r2, [r4, #16]
 800edd8:	f8cd a000 	str.w	sl, [sp]
 800eddc:	464b      	mov	r3, r9
 800edde:	aa03      	add	r2, sp, #12
 800ede0:	4621      	mov	r1, r4
 800ede2:	4640      	mov	r0, r8
 800ede4:	f7ff fee2 	bl	800ebac <_printf_common>
 800ede8:	3001      	adds	r0, #1
 800edea:	d14c      	bne.n	800ee86 <_printf_i+0x1fe>
 800edec:	f04f 30ff 	mov.w	r0, #4294967295
 800edf0:	b004      	add	sp, #16
 800edf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf6:	4835      	ldr	r0, [pc, #212]	; (800eecc <_printf_i+0x244>)
 800edf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800edfc:	6829      	ldr	r1, [r5, #0]
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee04:	6029      	str	r1, [r5, #0]
 800ee06:	061d      	lsls	r5, r3, #24
 800ee08:	d514      	bpl.n	800ee34 <_printf_i+0x1ac>
 800ee0a:	07df      	lsls	r7, r3, #31
 800ee0c:	bf44      	itt	mi
 800ee0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ee12:	6023      	strmi	r3, [r4, #0]
 800ee14:	b91e      	cbnz	r6, 800ee1e <_printf_i+0x196>
 800ee16:	6823      	ldr	r3, [r4, #0]
 800ee18:	f023 0320 	bic.w	r3, r3, #32
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	2310      	movs	r3, #16
 800ee20:	e7b0      	b.n	800ed84 <_printf_i+0xfc>
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	f043 0320 	orr.w	r3, r3, #32
 800ee28:	6023      	str	r3, [r4, #0]
 800ee2a:	2378      	movs	r3, #120	; 0x78
 800ee2c:	4828      	ldr	r0, [pc, #160]	; (800eed0 <_printf_i+0x248>)
 800ee2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee32:	e7e3      	b.n	800edfc <_printf_i+0x174>
 800ee34:	0659      	lsls	r1, r3, #25
 800ee36:	bf48      	it	mi
 800ee38:	b2b6      	uxthmi	r6, r6
 800ee3a:	e7e6      	b.n	800ee0a <_printf_i+0x182>
 800ee3c:	4615      	mov	r5, r2
 800ee3e:	e7bb      	b.n	800edb8 <_printf_i+0x130>
 800ee40:	682b      	ldr	r3, [r5, #0]
 800ee42:	6826      	ldr	r6, [r4, #0]
 800ee44:	6961      	ldr	r1, [r4, #20]
 800ee46:	1d18      	adds	r0, r3, #4
 800ee48:	6028      	str	r0, [r5, #0]
 800ee4a:	0635      	lsls	r5, r6, #24
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	d501      	bpl.n	800ee54 <_printf_i+0x1cc>
 800ee50:	6019      	str	r1, [r3, #0]
 800ee52:	e002      	b.n	800ee5a <_printf_i+0x1d2>
 800ee54:	0670      	lsls	r0, r6, #25
 800ee56:	d5fb      	bpl.n	800ee50 <_printf_i+0x1c8>
 800ee58:	8019      	strh	r1, [r3, #0]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	6123      	str	r3, [r4, #16]
 800ee5e:	4615      	mov	r5, r2
 800ee60:	e7ba      	b.n	800edd8 <_printf_i+0x150>
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	1d1a      	adds	r2, r3, #4
 800ee66:	602a      	str	r2, [r5, #0]
 800ee68:	681d      	ldr	r5, [r3, #0]
 800ee6a:	6862      	ldr	r2, [r4, #4]
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f7f1 f9e6 	bl	8000240 <memchr>
 800ee74:	b108      	cbz	r0, 800ee7a <_printf_i+0x1f2>
 800ee76:	1b40      	subs	r0, r0, r5
 800ee78:	6060      	str	r0, [r4, #4]
 800ee7a:	6863      	ldr	r3, [r4, #4]
 800ee7c:	6123      	str	r3, [r4, #16]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee84:	e7a8      	b.n	800edd8 <_printf_i+0x150>
 800ee86:	6923      	ldr	r3, [r4, #16]
 800ee88:	462a      	mov	r2, r5
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	4640      	mov	r0, r8
 800ee8e:	47d0      	blx	sl
 800ee90:	3001      	adds	r0, #1
 800ee92:	d0ab      	beq.n	800edec <_printf_i+0x164>
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	079b      	lsls	r3, r3, #30
 800ee98:	d413      	bmi.n	800eec2 <_printf_i+0x23a>
 800ee9a:	68e0      	ldr	r0, [r4, #12]
 800ee9c:	9b03      	ldr	r3, [sp, #12]
 800ee9e:	4298      	cmp	r0, r3
 800eea0:	bfb8      	it	lt
 800eea2:	4618      	movlt	r0, r3
 800eea4:	e7a4      	b.n	800edf0 <_printf_i+0x168>
 800eea6:	2301      	movs	r3, #1
 800eea8:	4632      	mov	r2, r6
 800eeaa:	4649      	mov	r1, r9
 800eeac:	4640      	mov	r0, r8
 800eeae:	47d0      	blx	sl
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	d09b      	beq.n	800edec <_printf_i+0x164>
 800eeb4:	3501      	adds	r5, #1
 800eeb6:	68e3      	ldr	r3, [r4, #12]
 800eeb8:	9903      	ldr	r1, [sp, #12]
 800eeba:	1a5b      	subs	r3, r3, r1
 800eebc:	42ab      	cmp	r3, r5
 800eebe:	dcf2      	bgt.n	800eea6 <_printf_i+0x21e>
 800eec0:	e7eb      	b.n	800ee9a <_printf_i+0x212>
 800eec2:	2500      	movs	r5, #0
 800eec4:	f104 0619 	add.w	r6, r4, #25
 800eec8:	e7f5      	b.n	800eeb6 <_printf_i+0x22e>
 800eeca:	bf00      	nop
 800eecc:	0801dccc 	.word	0x0801dccc
 800eed0:	0801dcdd 	.word	0x0801dcdd

0800eed4 <iprintf>:
 800eed4:	b40f      	push	{r0, r1, r2, r3}
 800eed6:	4b0a      	ldr	r3, [pc, #40]	; (800ef00 <iprintf+0x2c>)
 800eed8:	b513      	push	{r0, r1, r4, lr}
 800eeda:	681c      	ldr	r4, [r3, #0]
 800eedc:	b124      	cbz	r4, 800eee8 <iprintf+0x14>
 800eede:	69a3      	ldr	r3, [r4, #24]
 800eee0:	b913      	cbnz	r3, 800eee8 <iprintf+0x14>
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 ff82 	bl	800fdec <__sinit>
 800eee8:	ab05      	add	r3, sp, #20
 800eeea:	9a04      	ldr	r2, [sp, #16]
 800eeec:	68a1      	ldr	r1, [r4, #8]
 800eeee:	9301      	str	r3, [sp, #4]
 800eef0:	4620      	mov	r0, r4
 800eef2:	f001 fe3b 	bl	8010b6c <_vfiprintf_r>
 800eef6:	b002      	add	sp, #8
 800eef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eefc:	b004      	add	sp, #16
 800eefe:	4770      	bx	lr
 800ef00:	2000002c 	.word	0x2000002c

0800ef04 <rand>:
 800ef04:	4b16      	ldr	r3, [pc, #88]	; (800ef60 <rand+0x5c>)
 800ef06:	b510      	push	{r4, lr}
 800ef08:	681c      	ldr	r4, [r3, #0]
 800ef0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef0c:	b9b3      	cbnz	r3, 800ef3c <rand+0x38>
 800ef0e:	2018      	movs	r0, #24
 800ef10:	f001 f824 	bl	800ff5c <malloc>
 800ef14:	63a0      	str	r0, [r4, #56]	; 0x38
 800ef16:	b928      	cbnz	r0, 800ef24 <rand+0x20>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	4b12      	ldr	r3, [pc, #72]	; (800ef64 <rand+0x60>)
 800ef1c:	4812      	ldr	r0, [pc, #72]	; (800ef68 <rand+0x64>)
 800ef1e:	214e      	movs	r1, #78	; 0x4e
 800ef20:	f000 f872 	bl	800f008 <__assert_func>
 800ef24:	4a11      	ldr	r2, [pc, #68]	; (800ef6c <rand+0x68>)
 800ef26:	4b12      	ldr	r3, [pc, #72]	; (800ef70 <rand+0x6c>)
 800ef28:	e9c0 2300 	strd	r2, r3, [r0]
 800ef2c:	4b11      	ldr	r3, [pc, #68]	; (800ef74 <rand+0x70>)
 800ef2e:	6083      	str	r3, [r0, #8]
 800ef30:	230b      	movs	r3, #11
 800ef32:	8183      	strh	r3, [r0, #12]
 800ef34:	2201      	movs	r2, #1
 800ef36:	2300      	movs	r3, #0
 800ef38:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ef3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ef3e:	4a0e      	ldr	r2, [pc, #56]	; (800ef78 <rand+0x74>)
 800ef40:	6920      	ldr	r0, [r4, #16]
 800ef42:	6963      	ldr	r3, [r4, #20]
 800ef44:	490d      	ldr	r1, [pc, #52]	; (800ef7c <rand+0x78>)
 800ef46:	4342      	muls	r2, r0
 800ef48:	fb01 2203 	mla	r2, r1, r3, r2
 800ef4c:	fba0 0101 	umull	r0, r1, r0, r1
 800ef50:	1c43      	adds	r3, r0, #1
 800ef52:	eb42 0001 	adc.w	r0, r2, r1
 800ef56:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ef5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef5e:	bd10      	pop	{r4, pc}
 800ef60:	2000002c 	.word	0x2000002c
 800ef64:	0801dcee 	.word	0x0801dcee
 800ef68:	0801dd05 	.word	0x0801dd05
 800ef6c:	abcd330e 	.word	0xabcd330e
 800ef70:	e66d1234 	.word	0xe66d1234
 800ef74:	0005deec 	.word	0x0005deec
 800ef78:	5851f42d 	.word	0x5851f42d
 800ef7c:	4c957f2d 	.word	0x4c957f2d

0800ef80 <siprintf>:
 800ef80:	b40e      	push	{r1, r2, r3}
 800ef82:	b500      	push	{lr}
 800ef84:	b09c      	sub	sp, #112	; 0x70
 800ef86:	ab1d      	add	r3, sp, #116	; 0x74
 800ef88:	9002      	str	r0, [sp, #8]
 800ef8a:	9006      	str	r0, [sp, #24]
 800ef8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef90:	4809      	ldr	r0, [pc, #36]	; (800efb8 <siprintf+0x38>)
 800ef92:	9107      	str	r1, [sp, #28]
 800ef94:	9104      	str	r1, [sp, #16]
 800ef96:	4909      	ldr	r1, [pc, #36]	; (800efbc <siprintf+0x3c>)
 800ef98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef9c:	9105      	str	r1, [sp, #20]
 800ef9e:	6800      	ldr	r0, [r0, #0]
 800efa0:	9301      	str	r3, [sp, #4]
 800efa2:	a902      	add	r1, sp, #8
 800efa4:	f001 fcb8 	bl	8010918 <_svfiprintf_r>
 800efa8:	9b02      	ldr	r3, [sp, #8]
 800efaa:	2200      	movs	r2, #0
 800efac:	701a      	strb	r2, [r3, #0]
 800efae:	b01c      	add	sp, #112	; 0x70
 800efb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efb4:	b003      	add	sp, #12
 800efb6:	4770      	bx	lr
 800efb8:	2000002c 	.word	0x2000002c
 800efbc:	ffff0208 	.word	0xffff0208

0800efc0 <strcat>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	4602      	mov	r2, r0
 800efc4:	7814      	ldrb	r4, [r2, #0]
 800efc6:	4613      	mov	r3, r2
 800efc8:	3201      	adds	r2, #1
 800efca:	2c00      	cmp	r4, #0
 800efcc:	d1fa      	bne.n	800efc4 <strcat+0x4>
 800efce:	3b01      	subs	r3, #1
 800efd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efd8:	2a00      	cmp	r2, #0
 800efda:	d1f9      	bne.n	800efd0 <strcat+0x10>
 800efdc:	bd10      	pop	{r4, pc}

0800efde <strncmp>:
 800efde:	b510      	push	{r4, lr}
 800efe0:	b17a      	cbz	r2, 800f002 <strncmp+0x24>
 800efe2:	4603      	mov	r3, r0
 800efe4:	3901      	subs	r1, #1
 800efe6:	1884      	adds	r4, r0, r2
 800efe8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800efec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eff0:	4290      	cmp	r0, r2
 800eff2:	d101      	bne.n	800eff8 <strncmp+0x1a>
 800eff4:	42a3      	cmp	r3, r4
 800eff6:	d101      	bne.n	800effc <strncmp+0x1e>
 800eff8:	1a80      	subs	r0, r0, r2
 800effa:	bd10      	pop	{r4, pc}
 800effc:	2800      	cmp	r0, #0
 800effe:	d1f3      	bne.n	800efe8 <strncmp+0xa>
 800f000:	e7fa      	b.n	800eff8 <strncmp+0x1a>
 800f002:	4610      	mov	r0, r2
 800f004:	e7f9      	b.n	800effa <strncmp+0x1c>
	...

0800f008 <__assert_func>:
 800f008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f00a:	4614      	mov	r4, r2
 800f00c:	461a      	mov	r2, r3
 800f00e:	4b09      	ldr	r3, [pc, #36]	; (800f034 <__assert_func+0x2c>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4605      	mov	r5, r0
 800f014:	68d8      	ldr	r0, [r3, #12]
 800f016:	b14c      	cbz	r4, 800f02c <__assert_func+0x24>
 800f018:	4b07      	ldr	r3, [pc, #28]	; (800f038 <__assert_func+0x30>)
 800f01a:	9100      	str	r1, [sp, #0]
 800f01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f020:	4906      	ldr	r1, [pc, #24]	; (800f03c <__assert_func+0x34>)
 800f022:	462b      	mov	r3, r5
 800f024:	f000 ff60 	bl	800fee8 <fiprintf>
 800f028:	f001 fff6 	bl	8011018 <abort>
 800f02c:	4b04      	ldr	r3, [pc, #16]	; (800f040 <__assert_func+0x38>)
 800f02e:	461c      	mov	r4, r3
 800f030:	e7f3      	b.n	800f01a <__assert_func+0x12>
 800f032:	bf00      	nop
 800f034:	2000002c 	.word	0x2000002c
 800f038:	0801dd60 	.word	0x0801dd60
 800f03c:	0801dd6d 	.word	0x0801dd6d
 800f040:	0801a991 	.word	0x0801a991

0800f044 <quorem>:
 800f044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f048:	6903      	ldr	r3, [r0, #16]
 800f04a:	690c      	ldr	r4, [r1, #16]
 800f04c:	42a3      	cmp	r3, r4
 800f04e:	4607      	mov	r7, r0
 800f050:	f2c0 8081 	blt.w	800f156 <quorem+0x112>
 800f054:	3c01      	subs	r4, #1
 800f056:	f101 0814 	add.w	r8, r1, #20
 800f05a:	f100 0514 	add.w	r5, r0, #20
 800f05e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f06c:	3301      	adds	r3, #1
 800f06e:	429a      	cmp	r2, r3
 800f070:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f078:	fbb2 f6f3 	udiv	r6, r2, r3
 800f07c:	d331      	bcc.n	800f0e2 <quorem+0x9e>
 800f07e:	f04f 0e00 	mov.w	lr, #0
 800f082:	4640      	mov	r0, r8
 800f084:	46ac      	mov	ip, r5
 800f086:	46f2      	mov	sl, lr
 800f088:	f850 2b04 	ldr.w	r2, [r0], #4
 800f08c:	b293      	uxth	r3, r2
 800f08e:	fb06 e303 	mla	r3, r6, r3, lr
 800f092:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f096:	b29b      	uxth	r3, r3
 800f098:	ebaa 0303 	sub.w	r3, sl, r3
 800f09c:	f8dc a000 	ldr.w	sl, [ip]
 800f0a0:	0c12      	lsrs	r2, r2, #16
 800f0a2:	fa13 f38a 	uxtah	r3, r3, sl
 800f0a6:	fb06 e202 	mla	r2, r6, r2, lr
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	9b00      	ldr	r3, [sp, #0]
 800f0ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f0b2:	b292      	uxth	r2, r2
 800f0b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f0b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800f0c0:	4581      	cmp	r9, r0
 800f0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0c6:	f84c 3b04 	str.w	r3, [ip], #4
 800f0ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f0ce:	d2db      	bcs.n	800f088 <quorem+0x44>
 800f0d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800f0d4:	b92b      	cbnz	r3, 800f0e2 <quorem+0x9e>
 800f0d6:	9b01      	ldr	r3, [sp, #4]
 800f0d8:	3b04      	subs	r3, #4
 800f0da:	429d      	cmp	r5, r3
 800f0dc:	461a      	mov	r2, r3
 800f0de:	d32e      	bcc.n	800f13e <quorem+0xfa>
 800f0e0:	613c      	str	r4, [r7, #16]
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	f001 f9c4 	bl	8010470 <__mcmp>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	db24      	blt.n	800f136 <quorem+0xf2>
 800f0ec:	3601      	adds	r6, #1
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f04f 0c00 	mov.w	ip, #0
 800f0f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0f8:	f8d0 e000 	ldr.w	lr, [r0]
 800f0fc:	b293      	uxth	r3, r2
 800f0fe:	ebac 0303 	sub.w	r3, ip, r3
 800f102:	0c12      	lsrs	r2, r2, #16
 800f104:	fa13 f38e 	uxtah	r3, r3, lr
 800f108:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f10c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f110:	b29b      	uxth	r3, r3
 800f112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f116:	45c1      	cmp	r9, r8
 800f118:	f840 3b04 	str.w	r3, [r0], #4
 800f11c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f120:	d2e8      	bcs.n	800f0f4 <quorem+0xb0>
 800f122:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f12a:	b922      	cbnz	r2, 800f136 <quorem+0xf2>
 800f12c:	3b04      	subs	r3, #4
 800f12e:	429d      	cmp	r5, r3
 800f130:	461a      	mov	r2, r3
 800f132:	d30a      	bcc.n	800f14a <quorem+0x106>
 800f134:	613c      	str	r4, [r7, #16]
 800f136:	4630      	mov	r0, r6
 800f138:	b003      	add	sp, #12
 800f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13e:	6812      	ldr	r2, [r2, #0]
 800f140:	3b04      	subs	r3, #4
 800f142:	2a00      	cmp	r2, #0
 800f144:	d1cc      	bne.n	800f0e0 <quorem+0x9c>
 800f146:	3c01      	subs	r4, #1
 800f148:	e7c7      	b.n	800f0da <quorem+0x96>
 800f14a:	6812      	ldr	r2, [r2, #0]
 800f14c:	3b04      	subs	r3, #4
 800f14e:	2a00      	cmp	r2, #0
 800f150:	d1f0      	bne.n	800f134 <quorem+0xf0>
 800f152:	3c01      	subs	r4, #1
 800f154:	e7eb      	b.n	800f12e <quorem+0xea>
 800f156:	2000      	movs	r0, #0
 800f158:	e7ee      	b.n	800f138 <quorem+0xf4>
 800f15a:	0000      	movs	r0, r0
 800f15c:	0000      	movs	r0, r0
	...

0800f160 <_dtoa_r>:
 800f160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f164:	ed2d 8b04 	vpush	{d8-d9}
 800f168:	ec57 6b10 	vmov	r6, r7, d0
 800f16c:	b093      	sub	sp, #76	; 0x4c
 800f16e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f170:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f174:	9106      	str	r1, [sp, #24]
 800f176:	ee10 aa10 	vmov	sl, s0
 800f17a:	4604      	mov	r4, r0
 800f17c:	9209      	str	r2, [sp, #36]	; 0x24
 800f17e:	930c      	str	r3, [sp, #48]	; 0x30
 800f180:	46bb      	mov	fp, r7
 800f182:	b975      	cbnz	r5, 800f1a2 <_dtoa_r+0x42>
 800f184:	2010      	movs	r0, #16
 800f186:	f000 fee9 	bl	800ff5c <malloc>
 800f18a:	4602      	mov	r2, r0
 800f18c:	6260      	str	r0, [r4, #36]	; 0x24
 800f18e:	b920      	cbnz	r0, 800f19a <_dtoa_r+0x3a>
 800f190:	4ba7      	ldr	r3, [pc, #668]	; (800f430 <_dtoa_r+0x2d0>)
 800f192:	21ea      	movs	r1, #234	; 0xea
 800f194:	48a7      	ldr	r0, [pc, #668]	; (800f434 <_dtoa_r+0x2d4>)
 800f196:	f7ff ff37 	bl	800f008 <__assert_func>
 800f19a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f19e:	6005      	str	r5, [r0, #0]
 800f1a0:	60c5      	str	r5, [r0, #12]
 800f1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1a4:	6819      	ldr	r1, [r3, #0]
 800f1a6:	b151      	cbz	r1, 800f1be <_dtoa_r+0x5e>
 800f1a8:	685a      	ldr	r2, [r3, #4]
 800f1aa:	604a      	str	r2, [r1, #4]
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	4093      	lsls	r3, r2
 800f1b0:	608b      	str	r3, [r1, #8]
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f000 ff1a 	bl	800ffec <_Bfree>
 800f1b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	1e3b      	subs	r3, r7, #0
 800f1c0:	bfaa      	itet	ge
 800f1c2:	2300      	movge	r3, #0
 800f1c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f1c8:	f8c8 3000 	strge.w	r3, [r8]
 800f1cc:	4b9a      	ldr	r3, [pc, #616]	; (800f438 <_dtoa_r+0x2d8>)
 800f1ce:	bfbc      	itt	lt
 800f1d0:	2201      	movlt	r2, #1
 800f1d2:	f8c8 2000 	strlt.w	r2, [r8]
 800f1d6:	ea33 030b 	bics.w	r3, r3, fp
 800f1da:	d11b      	bne.n	800f214 <_dtoa_r+0xb4>
 800f1dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1de:	f242 730f 	movw	r3, #9999	; 0x270f
 800f1e2:	6013      	str	r3, [r2, #0]
 800f1e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1e8:	4333      	orrs	r3, r6
 800f1ea:	f000 8592 	beq.w	800fd12 <_dtoa_r+0xbb2>
 800f1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1f0:	b963      	cbnz	r3, 800f20c <_dtoa_r+0xac>
 800f1f2:	4b92      	ldr	r3, [pc, #584]	; (800f43c <_dtoa_r+0x2dc>)
 800f1f4:	e022      	b.n	800f23c <_dtoa_r+0xdc>
 800f1f6:	4b92      	ldr	r3, [pc, #584]	; (800f440 <_dtoa_r+0x2e0>)
 800f1f8:	9301      	str	r3, [sp, #4]
 800f1fa:	3308      	adds	r3, #8
 800f1fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1fe:	6013      	str	r3, [r2, #0]
 800f200:	9801      	ldr	r0, [sp, #4]
 800f202:	b013      	add	sp, #76	; 0x4c
 800f204:	ecbd 8b04 	vpop	{d8-d9}
 800f208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f20c:	4b8b      	ldr	r3, [pc, #556]	; (800f43c <_dtoa_r+0x2dc>)
 800f20e:	9301      	str	r3, [sp, #4]
 800f210:	3303      	adds	r3, #3
 800f212:	e7f3      	b.n	800f1fc <_dtoa_r+0x9c>
 800f214:	2200      	movs	r2, #0
 800f216:	2300      	movs	r3, #0
 800f218:	4650      	mov	r0, sl
 800f21a:	4659      	mov	r1, fp
 800f21c:	f7f1 fc84 	bl	8000b28 <__aeabi_dcmpeq>
 800f220:	ec4b ab19 	vmov	d9, sl, fp
 800f224:	4680      	mov	r8, r0
 800f226:	b158      	cbz	r0, 800f240 <_dtoa_r+0xe0>
 800f228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f22a:	2301      	movs	r3, #1
 800f22c:	6013      	str	r3, [r2, #0]
 800f22e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f230:	2b00      	cmp	r3, #0
 800f232:	f000 856b 	beq.w	800fd0c <_dtoa_r+0xbac>
 800f236:	4883      	ldr	r0, [pc, #524]	; (800f444 <_dtoa_r+0x2e4>)
 800f238:	6018      	str	r0, [r3, #0]
 800f23a:	1e43      	subs	r3, r0, #1
 800f23c:	9301      	str	r3, [sp, #4]
 800f23e:	e7df      	b.n	800f200 <_dtoa_r+0xa0>
 800f240:	ec4b ab10 	vmov	d0, sl, fp
 800f244:	aa10      	add	r2, sp, #64	; 0x40
 800f246:	a911      	add	r1, sp, #68	; 0x44
 800f248:	4620      	mov	r0, r4
 800f24a:	f001 f9b7 	bl	80105bc <__d2b>
 800f24e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f252:	ee08 0a10 	vmov	s16, r0
 800f256:	2d00      	cmp	r5, #0
 800f258:	f000 8084 	beq.w	800f364 <_dtoa_r+0x204>
 800f25c:	ee19 3a90 	vmov	r3, s19
 800f260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f264:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f268:	4656      	mov	r6, sl
 800f26a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f26e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f272:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f276:	4b74      	ldr	r3, [pc, #464]	; (800f448 <_dtoa_r+0x2e8>)
 800f278:	2200      	movs	r2, #0
 800f27a:	4630      	mov	r0, r6
 800f27c:	4639      	mov	r1, r7
 800f27e:	f7f1 f833 	bl	80002e8 <__aeabi_dsub>
 800f282:	a365      	add	r3, pc, #404	; (adr r3, 800f418 <_dtoa_r+0x2b8>)
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	f7f1 f9e6 	bl	8000658 <__aeabi_dmul>
 800f28c:	a364      	add	r3, pc, #400	; (adr r3, 800f420 <_dtoa_r+0x2c0>)
 800f28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f292:	f7f1 f82b 	bl	80002ec <__adddf3>
 800f296:	4606      	mov	r6, r0
 800f298:	4628      	mov	r0, r5
 800f29a:	460f      	mov	r7, r1
 800f29c:	f7f1 f972 	bl	8000584 <__aeabi_i2d>
 800f2a0:	a361      	add	r3, pc, #388	; (adr r3, 800f428 <_dtoa_r+0x2c8>)
 800f2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a6:	f7f1 f9d7 	bl	8000658 <__aeabi_dmul>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	4639      	mov	r1, r7
 800f2b2:	f7f1 f81b 	bl	80002ec <__adddf3>
 800f2b6:	4606      	mov	r6, r0
 800f2b8:	460f      	mov	r7, r1
 800f2ba:	f7f1 fc7d 	bl	8000bb8 <__aeabi_d2iz>
 800f2be:	2200      	movs	r2, #0
 800f2c0:	9000      	str	r0, [sp, #0]
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	4639      	mov	r1, r7
 800f2c8:	f7f1 fc38 	bl	8000b3c <__aeabi_dcmplt>
 800f2cc:	b150      	cbz	r0, 800f2e4 <_dtoa_r+0x184>
 800f2ce:	9800      	ldr	r0, [sp, #0]
 800f2d0:	f7f1 f958 	bl	8000584 <__aeabi_i2d>
 800f2d4:	4632      	mov	r2, r6
 800f2d6:	463b      	mov	r3, r7
 800f2d8:	f7f1 fc26 	bl	8000b28 <__aeabi_dcmpeq>
 800f2dc:	b910      	cbnz	r0, 800f2e4 <_dtoa_r+0x184>
 800f2de:	9b00      	ldr	r3, [sp, #0]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	9b00      	ldr	r3, [sp, #0]
 800f2e6:	2b16      	cmp	r3, #22
 800f2e8:	d85a      	bhi.n	800f3a0 <_dtoa_r+0x240>
 800f2ea:	9a00      	ldr	r2, [sp, #0]
 800f2ec:	4b57      	ldr	r3, [pc, #348]	; (800f44c <_dtoa_r+0x2ec>)
 800f2ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f6:	ec51 0b19 	vmov	r0, r1, d9
 800f2fa:	f7f1 fc1f 	bl	8000b3c <__aeabi_dcmplt>
 800f2fe:	2800      	cmp	r0, #0
 800f300:	d050      	beq.n	800f3a4 <_dtoa_r+0x244>
 800f302:	9b00      	ldr	r3, [sp, #0]
 800f304:	3b01      	subs	r3, #1
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	2300      	movs	r3, #0
 800f30a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f30e:	1b5d      	subs	r5, r3, r5
 800f310:	1e6b      	subs	r3, r5, #1
 800f312:	9305      	str	r3, [sp, #20]
 800f314:	bf45      	ittet	mi
 800f316:	f1c5 0301 	rsbmi	r3, r5, #1
 800f31a:	9304      	strmi	r3, [sp, #16]
 800f31c:	2300      	movpl	r3, #0
 800f31e:	2300      	movmi	r3, #0
 800f320:	bf4c      	ite	mi
 800f322:	9305      	strmi	r3, [sp, #20]
 800f324:	9304      	strpl	r3, [sp, #16]
 800f326:	9b00      	ldr	r3, [sp, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	db3d      	blt.n	800f3a8 <_dtoa_r+0x248>
 800f32c:	9b05      	ldr	r3, [sp, #20]
 800f32e:	9a00      	ldr	r2, [sp, #0]
 800f330:	920a      	str	r2, [sp, #40]	; 0x28
 800f332:	4413      	add	r3, r2
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	2300      	movs	r3, #0
 800f338:	9307      	str	r3, [sp, #28]
 800f33a:	9b06      	ldr	r3, [sp, #24]
 800f33c:	2b09      	cmp	r3, #9
 800f33e:	f200 8089 	bhi.w	800f454 <_dtoa_r+0x2f4>
 800f342:	2b05      	cmp	r3, #5
 800f344:	bfc4      	itt	gt
 800f346:	3b04      	subgt	r3, #4
 800f348:	9306      	strgt	r3, [sp, #24]
 800f34a:	9b06      	ldr	r3, [sp, #24]
 800f34c:	f1a3 0302 	sub.w	r3, r3, #2
 800f350:	bfcc      	ite	gt
 800f352:	2500      	movgt	r5, #0
 800f354:	2501      	movle	r5, #1
 800f356:	2b03      	cmp	r3, #3
 800f358:	f200 8087 	bhi.w	800f46a <_dtoa_r+0x30a>
 800f35c:	e8df f003 	tbb	[pc, r3]
 800f360:	59383a2d 	.word	0x59383a2d
 800f364:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f368:	441d      	add	r5, r3
 800f36a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f36e:	2b20      	cmp	r3, #32
 800f370:	bfc1      	itttt	gt
 800f372:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f376:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f37a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f37e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f382:	bfda      	itte	le
 800f384:	f1c3 0320 	rsble	r3, r3, #32
 800f388:	fa06 f003 	lslle.w	r0, r6, r3
 800f38c:	4318      	orrgt	r0, r3
 800f38e:	f7f1 f8e9 	bl	8000564 <__aeabi_ui2d>
 800f392:	2301      	movs	r3, #1
 800f394:	4606      	mov	r6, r0
 800f396:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f39a:	3d01      	subs	r5, #1
 800f39c:	930e      	str	r3, [sp, #56]	; 0x38
 800f39e:	e76a      	b.n	800f276 <_dtoa_r+0x116>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e7b2      	b.n	800f30a <_dtoa_r+0x1aa>
 800f3a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3a6:	e7b1      	b.n	800f30c <_dtoa_r+0x1ac>
 800f3a8:	9b04      	ldr	r3, [sp, #16]
 800f3aa:	9a00      	ldr	r2, [sp, #0]
 800f3ac:	1a9b      	subs	r3, r3, r2
 800f3ae:	9304      	str	r3, [sp, #16]
 800f3b0:	4253      	negs	r3, r2
 800f3b2:	9307      	str	r3, [sp, #28]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f3b8:	e7bf      	b.n	800f33a <_dtoa_r+0x1da>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	9308      	str	r3, [sp, #32]
 800f3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	dc55      	bgt.n	800f470 <_dtoa_r+0x310>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f3ce:	e00c      	b.n	800f3ea <_dtoa_r+0x28a>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e7f3      	b.n	800f3bc <_dtoa_r+0x25c>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3d8:	9308      	str	r3, [sp, #32]
 800f3da:	9b00      	ldr	r3, [sp, #0]
 800f3dc:	4413      	add	r3, r2
 800f3de:	9302      	str	r3, [sp, #8]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	9303      	str	r3, [sp, #12]
 800f3e6:	bfb8      	it	lt
 800f3e8:	2301      	movlt	r3, #1
 800f3ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	6042      	str	r2, [r0, #4]
 800f3f0:	2204      	movs	r2, #4
 800f3f2:	f102 0614 	add.w	r6, r2, #20
 800f3f6:	429e      	cmp	r6, r3
 800f3f8:	6841      	ldr	r1, [r0, #4]
 800f3fa:	d93d      	bls.n	800f478 <_dtoa_r+0x318>
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f000 fdb5 	bl	800ff6c <_Balloc>
 800f402:	9001      	str	r0, [sp, #4]
 800f404:	2800      	cmp	r0, #0
 800f406:	d13b      	bne.n	800f480 <_dtoa_r+0x320>
 800f408:	4b11      	ldr	r3, [pc, #68]	; (800f450 <_dtoa_r+0x2f0>)
 800f40a:	4602      	mov	r2, r0
 800f40c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f410:	e6c0      	b.n	800f194 <_dtoa_r+0x34>
 800f412:	2301      	movs	r3, #1
 800f414:	e7df      	b.n	800f3d6 <_dtoa_r+0x276>
 800f416:	bf00      	nop
 800f418:	636f4361 	.word	0x636f4361
 800f41c:	3fd287a7 	.word	0x3fd287a7
 800f420:	8b60c8b3 	.word	0x8b60c8b3
 800f424:	3fc68a28 	.word	0x3fc68a28
 800f428:	509f79fb 	.word	0x509f79fb
 800f42c:	3fd34413 	.word	0x3fd34413
 800f430:	0801dcee 	.word	0x0801dcee
 800f434:	0801dda9 	.word	0x0801dda9
 800f438:	7ff00000 	.word	0x7ff00000
 800f43c:	0801dda5 	.word	0x0801dda5
 800f440:	0801dd9c 	.word	0x0801dd9c
 800f444:	0801b16c 	.word	0x0801b16c
 800f448:	3ff80000 	.word	0x3ff80000
 800f44c:	0801df00 	.word	0x0801df00
 800f450:	0801de04 	.word	0x0801de04
 800f454:	2501      	movs	r5, #1
 800f456:	2300      	movs	r3, #0
 800f458:	9306      	str	r3, [sp, #24]
 800f45a:	9508      	str	r5, [sp, #32]
 800f45c:	f04f 33ff 	mov.w	r3, #4294967295
 800f460:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f464:	2200      	movs	r2, #0
 800f466:	2312      	movs	r3, #18
 800f468:	e7b0      	b.n	800f3cc <_dtoa_r+0x26c>
 800f46a:	2301      	movs	r3, #1
 800f46c:	9308      	str	r3, [sp, #32]
 800f46e:	e7f5      	b.n	800f45c <_dtoa_r+0x2fc>
 800f470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f472:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f476:	e7b8      	b.n	800f3ea <_dtoa_r+0x28a>
 800f478:	3101      	adds	r1, #1
 800f47a:	6041      	str	r1, [r0, #4]
 800f47c:	0052      	lsls	r2, r2, #1
 800f47e:	e7b8      	b.n	800f3f2 <_dtoa_r+0x292>
 800f480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f482:	9a01      	ldr	r2, [sp, #4]
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	9b03      	ldr	r3, [sp, #12]
 800f488:	2b0e      	cmp	r3, #14
 800f48a:	f200 809d 	bhi.w	800f5c8 <_dtoa_r+0x468>
 800f48e:	2d00      	cmp	r5, #0
 800f490:	f000 809a 	beq.w	800f5c8 <_dtoa_r+0x468>
 800f494:	9b00      	ldr	r3, [sp, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	dd32      	ble.n	800f500 <_dtoa_r+0x3a0>
 800f49a:	4ab7      	ldr	r2, [pc, #732]	; (800f778 <_dtoa_r+0x618>)
 800f49c:	f003 030f 	and.w	r3, r3, #15
 800f4a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4a8:	9b00      	ldr	r3, [sp, #0]
 800f4aa:	05d8      	lsls	r0, r3, #23
 800f4ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f4b0:	d516      	bpl.n	800f4e0 <_dtoa_r+0x380>
 800f4b2:	4bb2      	ldr	r3, [pc, #712]	; (800f77c <_dtoa_r+0x61c>)
 800f4b4:	ec51 0b19 	vmov	r0, r1, d9
 800f4b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4bc:	f7f1 f9f6 	bl	80008ac <__aeabi_ddiv>
 800f4c0:	f007 070f 	and.w	r7, r7, #15
 800f4c4:	4682      	mov	sl, r0
 800f4c6:	468b      	mov	fp, r1
 800f4c8:	2503      	movs	r5, #3
 800f4ca:	4eac      	ldr	r6, [pc, #688]	; (800f77c <_dtoa_r+0x61c>)
 800f4cc:	b957      	cbnz	r7, 800f4e4 <_dtoa_r+0x384>
 800f4ce:	4642      	mov	r2, r8
 800f4d0:	464b      	mov	r3, r9
 800f4d2:	4650      	mov	r0, sl
 800f4d4:	4659      	mov	r1, fp
 800f4d6:	f7f1 f9e9 	bl	80008ac <__aeabi_ddiv>
 800f4da:	4682      	mov	sl, r0
 800f4dc:	468b      	mov	fp, r1
 800f4de:	e028      	b.n	800f532 <_dtoa_r+0x3d2>
 800f4e0:	2502      	movs	r5, #2
 800f4e2:	e7f2      	b.n	800f4ca <_dtoa_r+0x36a>
 800f4e4:	07f9      	lsls	r1, r7, #31
 800f4e6:	d508      	bpl.n	800f4fa <_dtoa_r+0x39a>
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f4f0:	f7f1 f8b2 	bl	8000658 <__aeabi_dmul>
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	4680      	mov	r8, r0
 800f4f8:	4689      	mov	r9, r1
 800f4fa:	107f      	asrs	r7, r7, #1
 800f4fc:	3608      	adds	r6, #8
 800f4fe:	e7e5      	b.n	800f4cc <_dtoa_r+0x36c>
 800f500:	f000 809b 	beq.w	800f63a <_dtoa_r+0x4da>
 800f504:	9b00      	ldr	r3, [sp, #0]
 800f506:	4f9d      	ldr	r7, [pc, #628]	; (800f77c <_dtoa_r+0x61c>)
 800f508:	425e      	negs	r6, r3
 800f50a:	4b9b      	ldr	r3, [pc, #620]	; (800f778 <_dtoa_r+0x618>)
 800f50c:	f006 020f 	and.w	r2, r6, #15
 800f510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f518:	ec51 0b19 	vmov	r0, r1, d9
 800f51c:	f7f1 f89c 	bl	8000658 <__aeabi_dmul>
 800f520:	1136      	asrs	r6, r6, #4
 800f522:	4682      	mov	sl, r0
 800f524:	468b      	mov	fp, r1
 800f526:	2300      	movs	r3, #0
 800f528:	2502      	movs	r5, #2
 800f52a:	2e00      	cmp	r6, #0
 800f52c:	d17a      	bne.n	800f624 <_dtoa_r+0x4c4>
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1d3      	bne.n	800f4da <_dtoa_r+0x37a>
 800f532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 8082 	beq.w	800f63e <_dtoa_r+0x4de>
 800f53a:	4b91      	ldr	r3, [pc, #580]	; (800f780 <_dtoa_r+0x620>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	4650      	mov	r0, sl
 800f540:	4659      	mov	r1, fp
 800f542:	f7f1 fafb 	bl	8000b3c <__aeabi_dcmplt>
 800f546:	2800      	cmp	r0, #0
 800f548:	d079      	beq.n	800f63e <_dtoa_r+0x4de>
 800f54a:	9b03      	ldr	r3, [sp, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d076      	beq.n	800f63e <_dtoa_r+0x4de>
 800f550:	9b02      	ldr	r3, [sp, #8]
 800f552:	2b00      	cmp	r3, #0
 800f554:	dd36      	ble.n	800f5c4 <_dtoa_r+0x464>
 800f556:	9b00      	ldr	r3, [sp, #0]
 800f558:	4650      	mov	r0, sl
 800f55a:	4659      	mov	r1, fp
 800f55c:	1e5f      	subs	r7, r3, #1
 800f55e:	2200      	movs	r2, #0
 800f560:	4b88      	ldr	r3, [pc, #544]	; (800f784 <_dtoa_r+0x624>)
 800f562:	f7f1 f879 	bl	8000658 <__aeabi_dmul>
 800f566:	9e02      	ldr	r6, [sp, #8]
 800f568:	4682      	mov	sl, r0
 800f56a:	468b      	mov	fp, r1
 800f56c:	3501      	adds	r5, #1
 800f56e:	4628      	mov	r0, r5
 800f570:	f7f1 f808 	bl	8000584 <__aeabi_i2d>
 800f574:	4652      	mov	r2, sl
 800f576:	465b      	mov	r3, fp
 800f578:	f7f1 f86e 	bl	8000658 <__aeabi_dmul>
 800f57c:	4b82      	ldr	r3, [pc, #520]	; (800f788 <_dtoa_r+0x628>)
 800f57e:	2200      	movs	r2, #0
 800f580:	f7f0 feb4 	bl	80002ec <__adddf3>
 800f584:	46d0      	mov	r8, sl
 800f586:	46d9      	mov	r9, fp
 800f588:	4682      	mov	sl, r0
 800f58a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f58e:	2e00      	cmp	r6, #0
 800f590:	d158      	bne.n	800f644 <_dtoa_r+0x4e4>
 800f592:	4b7e      	ldr	r3, [pc, #504]	; (800f78c <_dtoa_r+0x62c>)
 800f594:	2200      	movs	r2, #0
 800f596:	4640      	mov	r0, r8
 800f598:	4649      	mov	r1, r9
 800f59a:	f7f0 fea5 	bl	80002e8 <__aeabi_dsub>
 800f59e:	4652      	mov	r2, sl
 800f5a0:	465b      	mov	r3, fp
 800f5a2:	4680      	mov	r8, r0
 800f5a4:	4689      	mov	r9, r1
 800f5a6:	f7f1 fae7 	bl	8000b78 <__aeabi_dcmpgt>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	f040 8295 	bne.w	800fada <_dtoa_r+0x97a>
 800f5b0:	4652      	mov	r2, sl
 800f5b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f5b6:	4640      	mov	r0, r8
 800f5b8:	4649      	mov	r1, r9
 800f5ba:	f7f1 fabf 	bl	8000b3c <__aeabi_dcmplt>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f040 8289 	bne.w	800fad6 <_dtoa_r+0x976>
 800f5c4:	ec5b ab19 	vmov	sl, fp, d9
 800f5c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f2c0 8148 	blt.w	800f860 <_dtoa_r+0x700>
 800f5d0:	9a00      	ldr	r2, [sp, #0]
 800f5d2:	2a0e      	cmp	r2, #14
 800f5d4:	f300 8144 	bgt.w	800f860 <_dtoa_r+0x700>
 800f5d8:	4b67      	ldr	r3, [pc, #412]	; (800f778 <_dtoa_r+0x618>)
 800f5da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f280 80d5 	bge.w	800f794 <_dtoa_r+0x634>
 800f5ea:	9b03      	ldr	r3, [sp, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	f300 80d1 	bgt.w	800f794 <_dtoa_r+0x634>
 800f5f2:	f040 826f 	bne.w	800fad4 <_dtoa_r+0x974>
 800f5f6:	4b65      	ldr	r3, [pc, #404]	; (800f78c <_dtoa_r+0x62c>)
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	4640      	mov	r0, r8
 800f5fc:	4649      	mov	r1, r9
 800f5fe:	f7f1 f82b 	bl	8000658 <__aeabi_dmul>
 800f602:	4652      	mov	r2, sl
 800f604:	465b      	mov	r3, fp
 800f606:	f7f1 faad 	bl	8000b64 <__aeabi_dcmpge>
 800f60a:	9e03      	ldr	r6, [sp, #12]
 800f60c:	4637      	mov	r7, r6
 800f60e:	2800      	cmp	r0, #0
 800f610:	f040 8245 	bne.w	800fa9e <_dtoa_r+0x93e>
 800f614:	9d01      	ldr	r5, [sp, #4]
 800f616:	2331      	movs	r3, #49	; 0x31
 800f618:	f805 3b01 	strb.w	r3, [r5], #1
 800f61c:	9b00      	ldr	r3, [sp, #0]
 800f61e:	3301      	adds	r3, #1
 800f620:	9300      	str	r3, [sp, #0]
 800f622:	e240      	b.n	800faa6 <_dtoa_r+0x946>
 800f624:	07f2      	lsls	r2, r6, #31
 800f626:	d505      	bpl.n	800f634 <_dtoa_r+0x4d4>
 800f628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f62c:	f7f1 f814 	bl	8000658 <__aeabi_dmul>
 800f630:	3501      	adds	r5, #1
 800f632:	2301      	movs	r3, #1
 800f634:	1076      	asrs	r6, r6, #1
 800f636:	3708      	adds	r7, #8
 800f638:	e777      	b.n	800f52a <_dtoa_r+0x3ca>
 800f63a:	2502      	movs	r5, #2
 800f63c:	e779      	b.n	800f532 <_dtoa_r+0x3d2>
 800f63e:	9f00      	ldr	r7, [sp, #0]
 800f640:	9e03      	ldr	r6, [sp, #12]
 800f642:	e794      	b.n	800f56e <_dtoa_r+0x40e>
 800f644:	9901      	ldr	r1, [sp, #4]
 800f646:	4b4c      	ldr	r3, [pc, #304]	; (800f778 <_dtoa_r+0x618>)
 800f648:	4431      	add	r1, r6
 800f64a:	910d      	str	r1, [sp, #52]	; 0x34
 800f64c:	9908      	ldr	r1, [sp, #32]
 800f64e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f656:	2900      	cmp	r1, #0
 800f658:	d043      	beq.n	800f6e2 <_dtoa_r+0x582>
 800f65a:	494d      	ldr	r1, [pc, #308]	; (800f790 <_dtoa_r+0x630>)
 800f65c:	2000      	movs	r0, #0
 800f65e:	f7f1 f925 	bl	80008ac <__aeabi_ddiv>
 800f662:	4652      	mov	r2, sl
 800f664:	465b      	mov	r3, fp
 800f666:	f7f0 fe3f 	bl	80002e8 <__aeabi_dsub>
 800f66a:	9d01      	ldr	r5, [sp, #4]
 800f66c:	4682      	mov	sl, r0
 800f66e:	468b      	mov	fp, r1
 800f670:	4649      	mov	r1, r9
 800f672:	4640      	mov	r0, r8
 800f674:	f7f1 faa0 	bl	8000bb8 <__aeabi_d2iz>
 800f678:	4606      	mov	r6, r0
 800f67a:	f7f0 ff83 	bl	8000584 <__aeabi_i2d>
 800f67e:	4602      	mov	r2, r0
 800f680:	460b      	mov	r3, r1
 800f682:	4640      	mov	r0, r8
 800f684:	4649      	mov	r1, r9
 800f686:	f7f0 fe2f 	bl	80002e8 <__aeabi_dsub>
 800f68a:	3630      	adds	r6, #48	; 0x30
 800f68c:	f805 6b01 	strb.w	r6, [r5], #1
 800f690:	4652      	mov	r2, sl
 800f692:	465b      	mov	r3, fp
 800f694:	4680      	mov	r8, r0
 800f696:	4689      	mov	r9, r1
 800f698:	f7f1 fa50 	bl	8000b3c <__aeabi_dcmplt>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	d163      	bne.n	800f768 <_dtoa_r+0x608>
 800f6a0:	4642      	mov	r2, r8
 800f6a2:	464b      	mov	r3, r9
 800f6a4:	4936      	ldr	r1, [pc, #216]	; (800f780 <_dtoa_r+0x620>)
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	f7f0 fe1e 	bl	80002e8 <__aeabi_dsub>
 800f6ac:	4652      	mov	r2, sl
 800f6ae:	465b      	mov	r3, fp
 800f6b0:	f7f1 fa44 	bl	8000b3c <__aeabi_dcmplt>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	f040 80b5 	bne.w	800f824 <_dtoa_r+0x6c4>
 800f6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6bc:	429d      	cmp	r5, r3
 800f6be:	d081      	beq.n	800f5c4 <_dtoa_r+0x464>
 800f6c0:	4b30      	ldr	r3, [pc, #192]	; (800f784 <_dtoa_r+0x624>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	4650      	mov	r0, sl
 800f6c6:	4659      	mov	r1, fp
 800f6c8:	f7f0 ffc6 	bl	8000658 <__aeabi_dmul>
 800f6cc:	4b2d      	ldr	r3, [pc, #180]	; (800f784 <_dtoa_r+0x624>)
 800f6ce:	4682      	mov	sl, r0
 800f6d0:	468b      	mov	fp, r1
 800f6d2:	4640      	mov	r0, r8
 800f6d4:	4649      	mov	r1, r9
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f7f0 ffbe 	bl	8000658 <__aeabi_dmul>
 800f6dc:	4680      	mov	r8, r0
 800f6de:	4689      	mov	r9, r1
 800f6e0:	e7c6      	b.n	800f670 <_dtoa_r+0x510>
 800f6e2:	4650      	mov	r0, sl
 800f6e4:	4659      	mov	r1, fp
 800f6e6:	f7f0 ffb7 	bl	8000658 <__aeabi_dmul>
 800f6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6ec:	9d01      	ldr	r5, [sp, #4]
 800f6ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6f0:	4682      	mov	sl, r0
 800f6f2:	468b      	mov	fp, r1
 800f6f4:	4649      	mov	r1, r9
 800f6f6:	4640      	mov	r0, r8
 800f6f8:	f7f1 fa5e 	bl	8000bb8 <__aeabi_d2iz>
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	f7f0 ff41 	bl	8000584 <__aeabi_i2d>
 800f702:	3630      	adds	r6, #48	; 0x30
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4640      	mov	r0, r8
 800f70a:	4649      	mov	r1, r9
 800f70c:	f7f0 fdec 	bl	80002e8 <__aeabi_dsub>
 800f710:	f805 6b01 	strb.w	r6, [r5], #1
 800f714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f716:	429d      	cmp	r5, r3
 800f718:	4680      	mov	r8, r0
 800f71a:	4689      	mov	r9, r1
 800f71c:	f04f 0200 	mov.w	r2, #0
 800f720:	d124      	bne.n	800f76c <_dtoa_r+0x60c>
 800f722:	4b1b      	ldr	r3, [pc, #108]	; (800f790 <_dtoa_r+0x630>)
 800f724:	4650      	mov	r0, sl
 800f726:	4659      	mov	r1, fp
 800f728:	f7f0 fde0 	bl	80002ec <__adddf3>
 800f72c:	4602      	mov	r2, r0
 800f72e:	460b      	mov	r3, r1
 800f730:	4640      	mov	r0, r8
 800f732:	4649      	mov	r1, r9
 800f734:	f7f1 fa20 	bl	8000b78 <__aeabi_dcmpgt>
 800f738:	2800      	cmp	r0, #0
 800f73a:	d173      	bne.n	800f824 <_dtoa_r+0x6c4>
 800f73c:	4652      	mov	r2, sl
 800f73e:	465b      	mov	r3, fp
 800f740:	4913      	ldr	r1, [pc, #76]	; (800f790 <_dtoa_r+0x630>)
 800f742:	2000      	movs	r0, #0
 800f744:	f7f0 fdd0 	bl	80002e8 <__aeabi_dsub>
 800f748:	4602      	mov	r2, r0
 800f74a:	460b      	mov	r3, r1
 800f74c:	4640      	mov	r0, r8
 800f74e:	4649      	mov	r1, r9
 800f750:	f7f1 f9f4 	bl	8000b3c <__aeabi_dcmplt>
 800f754:	2800      	cmp	r0, #0
 800f756:	f43f af35 	beq.w	800f5c4 <_dtoa_r+0x464>
 800f75a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f75c:	1e6b      	subs	r3, r5, #1
 800f75e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f760:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f764:	2b30      	cmp	r3, #48	; 0x30
 800f766:	d0f8      	beq.n	800f75a <_dtoa_r+0x5fa>
 800f768:	9700      	str	r7, [sp, #0]
 800f76a:	e049      	b.n	800f800 <_dtoa_r+0x6a0>
 800f76c:	4b05      	ldr	r3, [pc, #20]	; (800f784 <_dtoa_r+0x624>)
 800f76e:	f7f0 ff73 	bl	8000658 <__aeabi_dmul>
 800f772:	4680      	mov	r8, r0
 800f774:	4689      	mov	r9, r1
 800f776:	e7bd      	b.n	800f6f4 <_dtoa_r+0x594>
 800f778:	0801df00 	.word	0x0801df00
 800f77c:	0801ded8 	.word	0x0801ded8
 800f780:	3ff00000 	.word	0x3ff00000
 800f784:	40240000 	.word	0x40240000
 800f788:	401c0000 	.word	0x401c0000
 800f78c:	40140000 	.word	0x40140000
 800f790:	3fe00000 	.word	0x3fe00000
 800f794:	9d01      	ldr	r5, [sp, #4]
 800f796:	4656      	mov	r6, sl
 800f798:	465f      	mov	r7, fp
 800f79a:	4642      	mov	r2, r8
 800f79c:	464b      	mov	r3, r9
 800f79e:	4630      	mov	r0, r6
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	f7f1 f883 	bl	80008ac <__aeabi_ddiv>
 800f7a6:	f7f1 fa07 	bl	8000bb8 <__aeabi_d2iz>
 800f7aa:	4682      	mov	sl, r0
 800f7ac:	f7f0 feea 	bl	8000584 <__aeabi_i2d>
 800f7b0:	4642      	mov	r2, r8
 800f7b2:	464b      	mov	r3, r9
 800f7b4:	f7f0 ff50 	bl	8000658 <__aeabi_dmul>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4630      	mov	r0, r6
 800f7be:	4639      	mov	r1, r7
 800f7c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f7c4:	f7f0 fd90 	bl	80002e8 <__aeabi_dsub>
 800f7c8:	f805 6b01 	strb.w	r6, [r5], #1
 800f7cc:	9e01      	ldr	r6, [sp, #4]
 800f7ce:	9f03      	ldr	r7, [sp, #12]
 800f7d0:	1bae      	subs	r6, r5, r6
 800f7d2:	42b7      	cmp	r7, r6
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	d135      	bne.n	800f846 <_dtoa_r+0x6e6>
 800f7da:	f7f0 fd87 	bl	80002ec <__adddf3>
 800f7de:	4642      	mov	r2, r8
 800f7e0:	464b      	mov	r3, r9
 800f7e2:	4606      	mov	r6, r0
 800f7e4:	460f      	mov	r7, r1
 800f7e6:	f7f1 f9c7 	bl	8000b78 <__aeabi_dcmpgt>
 800f7ea:	b9d0      	cbnz	r0, 800f822 <_dtoa_r+0x6c2>
 800f7ec:	4642      	mov	r2, r8
 800f7ee:	464b      	mov	r3, r9
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	f7f1 f998 	bl	8000b28 <__aeabi_dcmpeq>
 800f7f8:	b110      	cbz	r0, 800f800 <_dtoa_r+0x6a0>
 800f7fa:	f01a 0f01 	tst.w	sl, #1
 800f7fe:	d110      	bne.n	800f822 <_dtoa_r+0x6c2>
 800f800:	4620      	mov	r0, r4
 800f802:	ee18 1a10 	vmov	r1, s16
 800f806:	f000 fbf1 	bl	800ffec <_Bfree>
 800f80a:	2300      	movs	r3, #0
 800f80c:	9800      	ldr	r0, [sp, #0]
 800f80e:	702b      	strb	r3, [r5, #0]
 800f810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f812:	3001      	adds	r0, #1
 800f814:	6018      	str	r0, [r3, #0]
 800f816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f43f acf1 	beq.w	800f200 <_dtoa_r+0xa0>
 800f81e:	601d      	str	r5, [r3, #0]
 800f820:	e4ee      	b.n	800f200 <_dtoa_r+0xa0>
 800f822:	9f00      	ldr	r7, [sp, #0]
 800f824:	462b      	mov	r3, r5
 800f826:	461d      	mov	r5, r3
 800f828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f82c:	2a39      	cmp	r2, #57	; 0x39
 800f82e:	d106      	bne.n	800f83e <_dtoa_r+0x6de>
 800f830:	9a01      	ldr	r2, [sp, #4]
 800f832:	429a      	cmp	r2, r3
 800f834:	d1f7      	bne.n	800f826 <_dtoa_r+0x6c6>
 800f836:	9901      	ldr	r1, [sp, #4]
 800f838:	2230      	movs	r2, #48	; 0x30
 800f83a:	3701      	adds	r7, #1
 800f83c:	700a      	strb	r2, [r1, #0]
 800f83e:	781a      	ldrb	r2, [r3, #0]
 800f840:	3201      	adds	r2, #1
 800f842:	701a      	strb	r2, [r3, #0]
 800f844:	e790      	b.n	800f768 <_dtoa_r+0x608>
 800f846:	4ba6      	ldr	r3, [pc, #664]	; (800fae0 <_dtoa_r+0x980>)
 800f848:	2200      	movs	r2, #0
 800f84a:	f7f0 ff05 	bl	8000658 <__aeabi_dmul>
 800f84e:	2200      	movs	r2, #0
 800f850:	2300      	movs	r3, #0
 800f852:	4606      	mov	r6, r0
 800f854:	460f      	mov	r7, r1
 800f856:	f7f1 f967 	bl	8000b28 <__aeabi_dcmpeq>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d09d      	beq.n	800f79a <_dtoa_r+0x63a>
 800f85e:	e7cf      	b.n	800f800 <_dtoa_r+0x6a0>
 800f860:	9a08      	ldr	r2, [sp, #32]
 800f862:	2a00      	cmp	r2, #0
 800f864:	f000 80d7 	beq.w	800fa16 <_dtoa_r+0x8b6>
 800f868:	9a06      	ldr	r2, [sp, #24]
 800f86a:	2a01      	cmp	r2, #1
 800f86c:	f300 80ba 	bgt.w	800f9e4 <_dtoa_r+0x884>
 800f870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f872:	2a00      	cmp	r2, #0
 800f874:	f000 80b2 	beq.w	800f9dc <_dtoa_r+0x87c>
 800f878:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f87c:	9e07      	ldr	r6, [sp, #28]
 800f87e:	9d04      	ldr	r5, [sp, #16]
 800f880:	9a04      	ldr	r2, [sp, #16]
 800f882:	441a      	add	r2, r3
 800f884:	9204      	str	r2, [sp, #16]
 800f886:	9a05      	ldr	r2, [sp, #20]
 800f888:	2101      	movs	r1, #1
 800f88a:	441a      	add	r2, r3
 800f88c:	4620      	mov	r0, r4
 800f88e:	9205      	str	r2, [sp, #20]
 800f890:	f000 fc64 	bl	801015c <__i2b>
 800f894:	4607      	mov	r7, r0
 800f896:	2d00      	cmp	r5, #0
 800f898:	dd0c      	ble.n	800f8b4 <_dtoa_r+0x754>
 800f89a:	9b05      	ldr	r3, [sp, #20]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	dd09      	ble.n	800f8b4 <_dtoa_r+0x754>
 800f8a0:	42ab      	cmp	r3, r5
 800f8a2:	9a04      	ldr	r2, [sp, #16]
 800f8a4:	bfa8      	it	ge
 800f8a6:	462b      	movge	r3, r5
 800f8a8:	1ad2      	subs	r2, r2, r3
 800f8aa:	9204      	str	r2, [sp, #16]
 800f8ac:	9a05      	ldr	r2, [sp, #20]
 800f8ae:	1aed      	subs	r5, r5, r3
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	9305      	str	r3, [sp, #20]
 800f8b4:	9b07      	ldr	r3, [sp, #28]
 800f8b6:	b31b      	cbz	r3, 800f900 <_dtoa_r+0x7a0>
 800f8b8:	9b08      	ldr	r3, [sp, #32]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f000 80af 	beq.w	800fa1e <_dtoa_r+0x8be>
 800f8c0:	2e00      	cmp	r6, #0
 800f8c2:	dd13      	ble.n	800f8ec <_dtoa_r+0x78c>
 800f8c4:	4639      	mov	r1, r7
 800f8c6:	4632      	mov	r2, r6
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f000 fd07 	bl	80102dc <__pow5mult>
 800f8ce:	ee18 2a10 	vmov	r2, s16
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	4607      	mov	r7, r0
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f000 fc56 	bl	8010188 <__multiply>
 800f8dc:	ee18 1a10 	vmov	r1, s16
 800f8e0:	4680      	mov	r8, r0
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 fb82 	bl	800ffec <_Bfree>
 800f8e8:	ee08 8a10 	vmov	s16, r8
 800f8ec:	9b07      	ldr	r3, [sp, #28]
 800f8ee:	1b9a      	subs	r2, r3, r6
 800f8f0:	d006      	beq.n	800f900 <_dtoa_r+0x7a0>
 800f8f2:	ee18 1a10 	vmov	r1, s16
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f000 fcf0 	bl	80102dc <__pow5mult>
 800f8fc:	ee08 0a10 	vmov	s16, r0
 800f900:	2101      	movs	r1, #1
 800f902:	4620      	mov	r0, r4
 800f904:	f000 fc2a 	bl	801015c <__i2b>
 800f908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	4606      	mov	r6, r0
 800f90e:	f340 8088 	ble.w	800fa22 <_dtoa_r+0x8c2>
 800f912:	461a      	mov	r2, r3
 800f914:	4601      	mov	r1, r0
 800f916:	4620      	mov	r0, r4
 800f918:	f000 fce0 	bl	80102dc <__pow5mult>
 800f91c:	9b06      	ldr	r3, [sp, #24]
 800f91e:	2b01      	cmp	r3, #1
 800f920:	4606      	mov	r6, r0
 800f922:	f340 8081 	ble.w	800fa28 <_dtoa_r+0x8c8>
 800f926:	f04f 0800 	mov.w	r8, #0
 800f92a:	6933      	ldr	r3, [r6, #16]
 800f92c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f930:	6918      	ldr	r0, [r3, #16]
 800f932:	f000 fbc3 	bl	80100bc <__hi0bits>
 800f936:	f1c0 0020 	rsb	r0, r0, #32
 800f93a:	9b05      	ldr	r3, [sp, #20]
 800f93c:	4418      	add	r0, r3
 800f93e:	f010 001f 	ands.w	r0, r0, #31
 800f942:	f000 8092 	beq.w	800fa6a <_dtoa_r+0x90a>
 800f946:	f1c0 0320 	rsb	r3, r0, #32
 800f94a:	2b04      	cmp	r3, #4
 800f94c:	f340 808a 	ble.w	800fa64 <_dtoa_r+0x904>
 800f950:	f1c0 001c 	rsb	r0, r0, #28
 800f954:	9b04      	ldr	r3, [sp, #16]
 800f956:	4403      	add	r3, r0
 800f958:	9304      	str	r3, [sp, #16]
 800f95a:	9b05      	ldr	r3, [sp, #20]
 800f95c:	4403      	add	r3, r0
 800f95e:	4405      	add	r5, r0
 800f960:	9305      	str	r3, [sp, #20]
 800f962:	9b04      	ldr	r3, [sp, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	dd07      	ble.n	800f978 <_dtoa_r+0x818>
 800f968:	ee18 1a10 	vmov	r1, s16
 800f96c:	461a      	mov	r2, r3
 800f96e:	4620      	mov	r0, r4
 800f970:	f000 fd0e 	bl	8010390 <__lshift>
 800f974:	ee08 0a10 	vmov	s16, r0
 800f978:	9b05      	ldr	r3, [sp, #20]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	dd05      	ble.n	800f98a <_dtoa_r+0x82a>
 800f97e:	4631      	mov	r1, r6
 800f980:	461a      	mov	r2, r3
 800f982:	4620      	mov	r0, r4
 800f984:	f000 fd04 	bl	8010390 <__lshift>
 800f988:	4606      	mov	r6, r0
 800f98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d06e      	beq.n	800fa6e <_dtoa_r+0x90e>
 800f990:	ee18 0a10 	vmov	r0, s16
 800f994:	4631      	mov	r1, r6
 800f996:	f000 fd6b 	bl	8010470 <__mcmp>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	da67      	bge.n	800fa6e <_dtoa_r+0x90e>
 800f99e:	9b00      	ldr	r3, [sp, #0]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	ee18 1a10 	vmov	r1, s16
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	220a      	movs	r2, #10
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f000 fb3f 	bl	8010030 <__multadd>
 800f9b2:	9b08      	ldr	r3, [sp, #32]
 800f9b4:	ee08 0a10 	vmov	s16, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 81b1 	beq.w	800fd20 <_dtoa_r+0xbc0>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	220a      	movs	r2, #10
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f000 fb33 	bl	8010030 <__multadd>
 800f9ca:	9b02      	ldr	r3, [sp, #8]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	4607      	mov	r7, r0
 800f9d0:	f300 808e 	bgt.w	800faf0 <_dtoa_r+0x990>
 800f9d4:	9b06      	ldr	r3, [sp, #24]
 800f9d6:	2b02      	cmp	r3, #2
 800f9d8:	dc51      	bgt.n	800fa7e <_dtoa_r+0x91e>
 800f9da:	e089      	b.n	800faf0 <_dtoa_r+0x990>
 800f9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9e2:	e74b      	b.n	800f87c <_dtoa_r+0x71c>
 800f9e4:	9b03      	ldr	r3, [sp, #12]
 800f9e6:	1e5e      	subs	r6, r3, #1
 800f9e8:	9b07      	ldr	r3, [sp, #28]
 800f9ea:	42b3      	cmp	r3, r6
 800f9ec:	bfbf      	itttt	lt
 800f9ee:	9b07      	ldrlt	r3, [sp, #28]
 800f9f0:	9607      	strlt	r6, [sp, #28]
 800f9f2:	1af2      	sublt	r2, r6, r3
 800f9f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f9f6:	bfb6      	itet	lt
 800f9f8:	189b      	addlt	r3, r3, r2
 800f9fa:	1b9e      	subge	r6, r3, r6
 800f9fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f9fe:	9b03      	ldr	r3, [sp, #12]
 800fa00:	bfb8      	it	lt
 800fa02:	2600      	movlt	r6, #0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bfb7      	itett	lt
 800fa08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fa0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fa10:	1a9d      	sublt	r5, r3, r2
 800fa12:	2300      	movlt	r3, #0
 800fa14:	e734      	b.n	800f880 <_dtoa_r+0x720>
 800fa16:	9e07      	ldr	r6, [sp, #28]
 800fa18:	9d04      	ldr	r5, [sp, #16]
 800fa1a:	9f08      	ldr	r7, [sp, #32]
 800fa1c:	e73b      	b.n	800f896 <_dtoa_r+0x736>
 800fa1e:	9a07      	ldr	r2, [sp, #28]
 800fa20:	e767      	b.n	800f8f2 <_dtoa_r+0x792>
 800fa22:	9b06      	ldr	r3, [sp, #24]
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	dc18      	bgt.n	800fa5a <_dtoa_r+0x8fa>
 800fa28:	f1ba 0f00 	cmp.w	sl, #0
 800fa2c:	d115      	bne.n	800fa5a <_dtoa_r+0x8fa>
 800fa2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa32:	b993      	cbnz	r3, 800fa5a <_dtoa_r+0x8fa>
 800fa34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa38:	0d1b      	lsrs	r3, r3, #20
 800fa3a:	051b      	lsls	r3, r3, #20
 800fa3c:	b183      	cbz	r3, 800fa60 <_dtoa_r+0x900>
 800fa3e:	9b04      	ldr	r3, [sp, #16]
 800fa40:	3301      	adds	r3, #1
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	9b05      	ldr	r3, [sp, #20]
 800fa46:	3301      	adds	r3, #1
 800fa48:	9305      	str	r3, [sp, #20]
 800fa4a:	f04f 0801 	mov.w	r8, #1
 800fa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f47f af6a 	bne.w	800f92a <_dtoa_r+0x7ca>
 800fa56:	2001      	movs	r0, #1
 800fa58:	e76f      	b.n	800f93a <_dtoa_r+0x7da>
 800fa5a:	f04f 0800 	mov.w	r8, #0
 800fa5e:	e7f6      	b.n	800fa4e <_dtoa_r+0x8ee>
 800fa60:	4698      	mov	r8, r3
 800fa62:	e7f4      	b.n	800fa4e <_dtoa_r+0x8ee>
 800fa64:	f43f af7d 	beq.w	800f962 <_dtoa_r+0x802>
 800fa68:	4618      	mov	r0, r3
 800fa6a:	301c      	adds	r0, #28
 800fa6c:	e772      	b.n	800f954 <_dtoa_r+0x7f4>
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	dc37      	bgt.n	800fae4 <_dtoa_r+0x984>
 800fa74:	9b06      	ldr	r3, [sp, #24]
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	dd34      	ble.n	800fae4 <_dtoa_r+0x984>
 800fa7a:	9b03      	ldr	r3, [sp, #12]
 800fa7c:	9302      	str	r3, [sp, #8]
 800fa7e:	9b02      	ldr	r3, [sp, #8]
 800fa80:	b96b      	cbnz	r3, 800fa9e <_dtoa_r+0x93e>
 800fa82:	4631      	mov	r1, r6
 800fa84:	2205      	movs	r2, #5
 800fa86:	4620      	mov	r0, r4
 800fa88:	f000 fad2 	bl	8010030 <__multadd>
 800fa8c:	4601      	mov	r1, r0
 800fa8e:	4606      	mov	r6, r0
 800fa90:	ee18 0a10 	vmov	r0, s16
 800fa94:	f000 fcec 	bl	8010470 <__mcmp>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	f73f adbb 	bgt.w	800f614 <_dtoa_r+0x4b4>
 800fa9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa0:	9d01      	ldr	r5, [sp, #4]
 800faa2:	43db      	mvns	r3, r3
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	f04f 0800 	mov.w	r8, #0
 800faaa:	4631      	mov	r1, r6
 800faac:	4620      	mov	r0, r4
 800faae:	f000 fa9d 	bl	800ffec <_Bfree>
 800fab2:	2f00      	cmp	r7, #0
 800fab4:	f43f aea4 	beq.w	800f800 <_dtoa_r+0x6a0>
 800fab8:	f1b8 0f00 	cmp.w	r8, #0
 800fabc:	d005      	beq.n	800faca <_dtoa_r+0x96a>
 800fabe:	45b8      	cmp	r8, r7
 800fac0:	d003      	beq.n	800faca <_dtoa_r+0x96a>
 800fac2:	4641      	mov	r1, r8
 800fac4:	4620      	mov	r0, r4
 800fac6:	f000 fa91 	bl	800ffec <_Bfree>
 800faca:	4639      	mov	r1, r7
 800facc:	4620      	mov	r0, r4
 800face:	f000 fa8d 	bl	800ffec <_Bfree>
 800fad2:	e695      	b.n	800f800 <_dtoa_r+0x6a0>
 800fad4:	2600      	movs	r6, #0
 800fad6:	4637      	mov	r7, r6
 800fad8:	e7e1      	b.n	800fa9e <_dtoa_r+0x93e>
 800fada:	9700      	str	r7, [sp, #0]
 800fadc:	4637      	mov	r7, r6
 800fade:	e599      	b.n	800f614 <_dtoa_r+0x4b4>
 800fae0:	40240000 	.word	0x40240000
 800fae4:	9b08      	ldr	r3, [sp, #32]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f000 80ca 	beq.w	800fc80 <_dtoa_r+0xb20>
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	9302      	str	r3, [sp, #8]
 800faf0:	2d00      	cmp	r5, #0
 800faf2:	dd05      	ble.n	800fb00 <_dtoa_r+0x9a0>
 800faf4:	4639      	mov	r1, r7
 800faf6:	462a      	mov	r2, r5
 800faf8:	4620      	mov	r0, r4
 800fafa:	f000 fc49 	bl	8010390 <__lshift>
 800fafe:	4607      	mov	r7, r0
 800fb00:	f1b8 0f00 	cmp.w	r8, #0
 800fb04:	d05b      	beq.n	800fbbe <_dtoa_r+0xa5e>
 800fb06:	6879      	ldr	r1, [r7, #4]
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 fa2f 	bl	800ff6c <_Balloc>
 800fb0e:	4605      	mov	r5, r0
 800fb10:	b928      	cbnz	r0, 800fb1e <_dtoa_r+0x9be>
 800fb12:	4b87      	ldr	r3, [pc, #540]	; (800fd30 <_dtoa_r+0xbd0>)
 800fb14:	4602      	mov	r2, r0
 800fb16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fb1a:	f7ff bb3b 	b.w	800f194 <_dtoa_r+0x34>
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	3202      	adds	r2, #2
 800fb22:	0092      	lsls	r2, r2, #2
 800fb24:	f107 010c 	add.w	r1, r7, #12
 800fb28:	300c      	adds	r0, #12
 800fb2a:	f7fe fd39 	bl	800e5a0 <memcpy>
 800fb2e:	2201      	movs	r2, #1
 800fb30:	4629      	mov	r1, r5
 800fb32:	4620      	mov	r0, r4
 800fb34:	f000 fc2c 	bl	8010390 <__lshift>
 800fb38:	9b01      	ldr	r3, [sp, #4]
 800fb3a:	f103 0901 	add.w	r9, r3, #1
 800fb3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fb42:	4413      	add	r3, r2
 800fb44:	9305      	str	r3, [sp, #20]
 800fb46:	f00a 0301 	and.w	r3, sl, #1
 800fb4a:	46b8      	mov	r8, r7
 800fb4c:	9304      	str	r3, [sp, #16]
 800fb4e:	4607      	mov	r7, r0
 800fb50:	4631      	mov	r1, r6
 800fb52:	ee18 0a10 	vmov	r0, s16
 800fb56:	f7ff fa75 	bl	800f044 <quorem>
 800fb5a:	4641      	mov	r1, r8
 800fb5c:	9002      	str	r0, [sp, #8]
 800fb5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fb62:	ee18 0a10 	vmov	r0, s16
 800fb66:	f000 fc83 	bl	8010470 <__mcmp>
 800fb6a:	463a      	mov	r2, r7
 800fb6c:	9003      	str	r0, [sp, #12]
 800fb6e:	4631      	mov	r1, r6
 800fb70:	4620      	mov	r0, r4
 800fb72:	f000 fc99 	bl	80104a8 <__mdiff>
 800fb76:	68c2      	ldr	r2, [r0, #12]
 800fb78:	f109 3bff 	add.w	fp, r9, #4294967295
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	bb02      	cbnz	r2, 800fbc2 <_dtoa_r+0xa62>
 800fb80:	4601      	mov	r1, r0
 800fb82:	ee18 0a10 	vmov	r0, s16
 800fb86:	f000 fc73 	bl	8010470 <__mcmp>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	4620      	mov	r0, r4
 800fb90:	9207      	str	r2, [sp, #28]
 800fb92:	f000 fa2b 	bl	800ffec <_Bfree>
 800fb96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fb9a:	ea43 0102 	orr.w	r1, r3, r2
 800fb9e:	9b04      	ldr	r3, [sp, #16]
 800fba0:	430b      	orrs	r3, r1
 800fba2:	464d      	mov	r5, r9
 800fba4:	d10f      	bne.n	800fbc6 <_dtoa_r+0xa66>
 800fba6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbaa:	d02a      	beq.n	800fc02 <_dtoa_r+0xaa2>
 800fbac:	9b03      	ldr	r3, [sp, #12]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	dd02      	ble.n	800fbb8 <_dtoa_r+0xa58>
 800fbb2:	9b02      	ldr	r3, [sp, #8]
 800fbb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fbb8:	f88b a000 	strb.w	sl, [fp]
 800fbbc:	e775      	b.n	800faaa <_dtoa_r+0x94a>
 800fbbe:	4638      	mov	r0, r7
 800fbc0:	e7ba      	b.n	800fb38 <_dtoa_r+0x9d8>
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	e7e2      	b.n	800fb8c <_dtoa_r+0xa2c>
 800fbc6:	9b03      	ldr	r3, [sp, #12]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	db04      	blt.n	800fbd6 <_dtoa_r+0xa76>
 800fbcc:	9906      	ldr	r1, [sp, #24]
 800fbce:	430b      	orrs	r3, r1
 800fbd0:	9904      	ldr	r1, [sp, #16]
 800fbd2:	430b      	orrs	r3, r1
 800fbd4:	d122      	bne.n	800fc1c <_dtoa_r+0xabc>
 800fbd6:	2a00      	cmp	r2, #0
 800fbd8:	ddee      	ble.n	800fbb8 <_dtoa_r+0xa58>
 800fbda:	ee18 1a10 	vmov	r1, s16
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f000 fbd5 	bl	8010390 <__lshift>
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	ee08 0a10 	vmov	s16, r0
 800fbec:	f000 fc40 	bl	8010470 <__mcmp>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	dc03      	bgt.n	800fbfc <_dtoa_r+0xa9c>
 800fbf4:	d1e0      	bne.n	800fbb8 <_dtoa_r+0xa58>
 800fbf6:	f01a 0f01 	tst.w	sl, #1
 800fbfa:	d0dd      	beq.n	800fbb8 <_dtoa_r+0xa58>
 800fbfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fc00:	d1d7      	bne.n	800fbb2 <_dtoa_r+0xa52>
 800fc02:	2339      	movs	r3, #57	; 0x39
 800fc04:	f88b 3000 	strb.w	r3, [fp]
 800fc08:	462b      	mov	r3, r5
 800fc0a:	461d      	mov	r5, r3
 800fc0c:	3b01      	subs	r3, #1
 800fc0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fc12:	2a39      	cmp	r2, #57	; 0x39
 800fc14:	d071      	beq.n	800fcfa <_dtoa_r+0xb9a>
 800fc16:	3201      	adds	r2, #1
 800fc18:	701a      	strb	r2, [r3, #0]
 800fc1a:	e746      	b.n	800faaa <_dtoa_r+0x94a>
 800fc1c:	2a00      	cmp	r2, #0
 800fc1e:	dd07      	ble.n	800fc30 <_dtoa_r+0xad0>
 800fc20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fc24:	d0ed      	beq.n	800fc02 <_dtoa_r+0xaa2>
 800fc26:	f10a 0301 	add.w	r3, sl, #1
 800fc2a:	f88b 3000 	strb.w	r3, [fp]
 800fc2e:	e73c      	b.n	800faaa <_dtoa_r+0x94a>
 800fc30:	9b05      	ldr	r3, [sp, #20]
 800fc32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fc36:	4599      	cmp	r9, r3
 800fc38:	d047      	beq.n	800fcca <_dtoa_r+0xb6a>
 800fc3a:	ee18 1a10 	vmov	r1, s16
 800fc3e:	2300      	movs	r3, #0
 800fc40:	220a      	movs	r2, #10
 800fc42:	4620      	mov	r0, r4
 800fc44:	f000 f9f4 	bl	8010030 <__multadd>
 800fc48:	45b8      	cmp	r8, r7
 800fc4a:	ee08 0a10 	vmov	s16, r0
 800fc4e:	f04f 0300 	mov.w	r3, #0
 800fc52:	f04f 020a 	mov.w	r2, #10
 800fc56:	4641      	mov	r1, r8
 800fc58:	4620      	mov	r0, r4
 800fc5a:	d106      	bne.n	800fc6a <_dtoa_r+0xb0a>
 800fc5c:	f000 f9e8 	bl	8010030 <__multadd>
 800fc60:	4680      	mov	r8, r0
 800fc62:	4607      	mov	r7, r0
 800fc64:	f109 0901 	add.w	r9, r9, #1
 800fc68:	e772      	b.n	800fb50 <_dtoa_r+0x9f0>
 800fc6a:	f000 f9e1 	bl	8010030 <__multadd>
 800fc6e:	4639      	mov	r1, r7
 800fc70:	4680      	mov	r8, r0
 800fc72:	2300      	movs	r3, #0
 800fc74:	220a      	movs	r2, #10
 800fc76:	4620      	mov	r0, r4
 800fc78:	f000 f9da 	bl	8010030 <__multadd>
 800fc7c:	4607      	mov	r7, r0
 800fc7e:	e7f1      	b.n	800fc64 <_dtoa_r+0xb04>
 800fc80:	9b03      	ldr	r3, [sp, #12]
 800fc82:	9302      	str	r3, [sp, #8]
 800fc84:	9d01      	ldr	r5, [sp, #4]
 800fc86:	ee18 0a10 	vmov	r0, s16
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	f7ff f9da 	bl	800f044 <quorem>
 800fc90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc94:	9b01      	ldr	r3, [sp, #4]
 800fc96:	f805 ab01 	strb.w	sl, [r5], #1
 800fc9a:	1aea      	subs	r2, r5, r3
 800fc9c:	9b02      	ldr	r3, [sp, #8]
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	dd09      	ble.n	800fcb6 <_dtoa_r+0xb56>
 800fca2:	ee18 1a10 	vmov	r1, s16
 800fca6:	2300      	movs	r3, #0
 800fca8:	220a      	movs	r2, #10
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f000 f9c0 	bl	8010030 <__multadd>
 800fcb0:	ee08 0a10 	vmov	s16, r0
 800fcb4:	e7e7      	b.n	800fc86 <_dtoa_r+0xb26>
 800fcb6:	9b02      	ldr	r3, [sp, #8]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	bfc8      	it	gt
 800fcbc:	461d      	movgt	r5, r3
 800fcbe:	9b01      	ldr	r3, [sp, #4]
 800fcc0:	bfd8      	it	le
 800fcc2:	2501      	movle	r5, #1
 800fcc4:	441d      	add	r5, r3
 800fcc6:	f04f 0800 	mov.w	r8, #0
 800fcca:	ee18 1a10 	vmov	r1, s16
 800fcce:	2201      	movs	r2, #1
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f000 fb5d 	bl	8010390 <__lshift>
 800fcd6:	4631      	mov	r1, r6
 800fcd8:	ee08 0a10 	vmov	s16, r0
 800fcdc:	f000 fbc8 	bl	8010470 <__mcmp>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	dc91      	bgt.n	800fc08 <_dtoa_r+0xaa8>
 800fce4:	d102      	bne.n	800fcec <_dtoa_r+0xb8c>
 800fce6:	f01a 0f01 	tst.w	sl, #1
 800fcea:	d18d      	bne.n	800fc08 <_dtoa_r+0xaa8>
 800fcec:	462b      	mov	r3, r5
 800fcee:	461d      	mov	r5, r3
 800fcf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcf4:	2a30      	cmp	r2, #48	; 0x30
 800fcf6:	d0fa      	beq.n	800fcee <_dtoa_r+0xb8e>
 800fcf8:	e6d7      	b.n	800faaa <_dtoa_r+0x94a>
 800fcfa:	9a01      	ldr	r2, [sp, #4]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d184      	bne.n	800fc0a <_dtoa_r+0xaaa>
 800fd00:	9b00      	ldr	r3, [sp, #0]
 800fd02:	3301      	adds	r3, #1
 800fd04:	9300      	str	r3, [sp, #0]
 800fd06:	2331      	movs	r3, #49	; 0x31
 800fd08:	7013      	strb	r3, [r2, #0]
 800fd0a:	e6ce      	b.n	800faaa <_dtoa_r+0x94a>
 800fd0c:	4b09      	ldr	r3, [pc, #36]	; (800fd34 <_dtoa_r+0xbd4>)
 800fd0e:	f7ff ba95 	b.w	800f23c <_dtoa_r+0xdc>
 800fd12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f47f aa6e 	bne.w	800f1f6 <_dtoa_r+0x96>
 800fd1a:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <_dtoa_r+0xbd8>)
 800fd1c:	f7ff ba8e 	b.w	800f23c <_dtoa_r+0xdc>
 800fd20:	9b02      	ldr	r3, [sp, #8]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	dcae      	bgt.n	800fc84 <_dtoa_r+0xb24>
 800fd26:	9b06      	ldr	r3, [sp, #24]
 800fd28:	2b02      	cmp	r3, #2
 800fd2a:	f73f aea8 	bgt.w	800fa7e <_dtoa_r+0x91e>
 800fd2e:	e7a9      	b.n	800fc84 <_dtoa_r+0xb24>
 800fd30:	0801de04 	.word	0x0801de04
 800fd34:	0801b16b 	.word	0x0801b16b
 800fd38:	0801dd9c 	.word	0x0801dd9c

0800fd3c <std>:
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	b510      	push	{r4, lr}
 800fd40:	4604      	mov	r4, r0
 800fd42:	e9c0 3300 	strd	r3, r3, [r0]
 800fd46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd4a:	6083      	str	r3, [r0, #8]
 800fd4c:	8181      	strh	r1, [r0, #12]
 800fd4e:	6643      	str	r3, [r0, #100]	; 0x64
 800fd50:	81c2      	strh	r2, [r0, #14]
 800fd52:	6183      	str	r3, [r0, #24]
 800fd54:	4619      	mov	r1, r3
 800fd56:	2208      	movs	r2, #8
 800fd58:	305c      	adds	r0, #92	; 0x5c
 800fd5a:	f7fe fc49 	bl	800e5f0 <memset>
 800fd5e:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <std+0x38>)
 800fd60:	6263      	str	r3, [r4, #36]	; 0x24
 800fd62:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <std+0x3c>)
 800fd64:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd66:	4b05      	ldr	r3, [pc, #20]	; (800fd7c <std+0x40>)
 800fd68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd6a:	4b05      	ldr	r3, [pc, #20]	; (800fd80 <std+0x44>)
 800fd6c:	6224      	str	r4, [r4, #32]
 800fd6e:	6323      	str	r3, [r4, #48]	; 0x30
 800fd70:	bd10      	pop	{r4, pc}
 800fd72:	bf00      	nop
 800fd74:	08010ded 	.word	0x08010ded
 800fd78:	08010e0f 	.word	0x08010e0f
 800fd7c:	08010e47 	.word	0x08010e47
 800fd80:	08010e6b 	.word	0x08010e6b

0800fd84 <_cleanup_r>:
 800fd84:	4901      	ldr	r1, [pc, #4]	; (800fd8c <_cleanup_r+0x8>)
 800fd86:	f000 b8c1 	b.w	800ff0c <_fwalk_reent>
 800fd8a:	bf00      	nop
 800fd8c:	08011155 	.word	0x08011155

0800fd90 <__sfmoreglue>:
 800fd90:	b570      	push	{r4, r5, r6, lr}
 800fd92:	2268      	movs	r2, #104	; 0x68
 800fd94:	1e4d      	subs	r5, r1, #1
 800fd96:	4355      	muls	r5, r2
 800fd98:	460e      	mov	r6, r1
 800fd9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd9e:	f000 fceb 	bl	8010778 <_malloc_r>
 800fda2:	4604      	mov	r4, r0
 800fda4:	b140      	cbz	r0, 800fdb8 <__sfmoreglue+0x28>
 800fda6:	2100      	movs	r1, #0
 800fda8:	e9c0 1600 	strd	r1, r6, [r0]
 800fdac:	300c      	adds	r0, #12
 800fdae:	60a0      	str	r0, [r4, #8]
 800fdb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fdb4:	f7fe fc1c 	bl	800e5f0 <memset>
 800fdb8:	4620      	mov	r0, r4
 800fdba:	bd70      	pop	{r4, r5, r6, pc}

0800fdbc <__sfp_lock_acquire>:
 800fdbc:	4801      	ldr	r0, [pc, #4]	; (800fdc4 <__sfp_lock_acquire+0x8>)
 800fdbe:	f000 b8ca 	b.w	800ff56 <__retarget_lock_acquire_recursive>
 800fdc2:	bf00      	nop
 800fdc4:	2000d075 	.word	0x2000d075

0800fdc8 <__sfp_lock_release>:
 800fdc8:	4801      	ldr	r0, [pc, #4]	; (800fdd0 <__sfp_lock_release+0x8>)
 800fdca:	f000 b8c5 	b.w	800ff58 <__retarget_lock_release_recursive>
 800fdce:	bf00      	nop
 800fdd0:	2000d075 	.word	0x2000d075

0800fdd4 <__sinit_lock_acquire>:
 800fdd4:	4801      	ldr	r0, [pc, #4]	; (800fddc <__sinit_lock_acquire+0x8>)
 800fdd6:	f000 b8be 	b.w	800ff56 <__retarget_lock_acquire_recursive>
 800fdda:	bf00      	nop
 800fddc:	2000d076 	.word	0x2000d076

0800fde0 <__sinit_lock_release>:
 800fde0:	4801      	ldr	r0, [pc, #4]	; (800fde8 <__sinit_lock_release+0x8>)
 800fde2:	f000 b8b9 	b.w	800ff58 <__retarget_lock_release_recursive>
 800fde6:	bf00      	nop
 800fde8:	2000d076 	.word	0x2000d076

0800fdec <__sinit>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	4604      	mov	r4, r0
 800fdf0:	f7ff fff0 	bl	800fdd4 <__sinit_lock_acquire>
 800fdf4:	69a3      	ldr	r3, [r4, #24]
 800fdf6:	b11b      	cbz	r3, 800fe00 <__sinit+0x14>
 800fdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdfc:	f7ff bff0 	b.w	800fde0 <__sinit_lock_release>
 800fe00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe04:	6523      	str	r3, [r4, #80]	; 0x50
 800fe06:	4b13      	ldr	r3, [pc, #76]	; (800fe54 <__sinit+0x68>)
 800fe08:	4a13      	ldr	r2, [pc, #76]	; (800fe58 <__sinit+0x6c>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe0e:	42a3      	cmp	r3, r4
 800fe10:	bf04      	itt	eq
 800fe12:	2301      	moveq	r3, #1
 800fe14:	61a3      	streq	r3, [r4, #24]
 800fe16:	4620      	mov	r0, r4
 800fe18:	f000 f820 	bl	800fe5c <__sfp>
 800fe1c:	6060      	str	r0, [r4, #4]
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 f81c 	bl	800fe5c <__sfp>
 800fe24:	60a0      	str	r0, [r4, #8]
 800fe26:	4620      	mov	r0, r4
 800fe28:	f000 f818 	bl	800fe5c <__sfp>
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	60e0      	str	r0, [r4, #12]
 800fe30:	2104      	movs	r1, #4
 800fe32:	6860      	ldr	r0, [r4, #4]
 800fe34:	f7ff ff82 	bl	800fd3c <std>
 800fe38:	68a0      	ldr	r0, [r4, #8]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	2109      	movs	r1, #9
 800fe3e:	f7ff ff7d 	bl	800fd3c <std>
 800fe42:	68e0      	ldr	r0, [r4, #12]
 800fe44:	2202      	movs	r2, #2
 800fe46:	2112      	movs	r1, #18
 800fe48:	f7ff ff78 	bl	800fd3c <std>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	61a3      	str	r3, [r4, #24]
 800fe50:	e7d2      	b.n	800fdf8 <__sinit+0xc>
 800fe52:	bf00      	nop
 800fe54:	0801dcb8 	.word	0x0801dcb8
 800fe58:	0800fd85 	.word	0x0800fd85

0800fe5c <__sfp>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	4607      	mov	r7, r0
 800fe60:	f7ff ffac 	bl	800fdbc <__sfp_lock_acquire>
 800fe64:	4b1e      	ldr	r3, [pc, #120]	; (800fee0 <__sfp+0x84>)
 800fe66:	681e      	ldr	r6, [r3, #0]
 800fe68:	69b3      	ldr	r3, [r6, #24]
 800fe6a:	b913      	cbnz	r3, 800fe72 <__sfp+0x16>
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f7ff ffbd 	bl	800fdec <__sinit>
 800fe72:	3648      	adds	r6, #72	; 0x48
 800fe74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	d503      	bpl.n	800fe84 <__sfp+0x28>
 800fe7c:	6833      	ldr	r3, [r6, #0]
 800fe7e:	b30b      	cbz	r3, 800fec4 <__sfp+0x68>
 800fe80:	6836      	ldr	r6, [r6, #0]
 800fe82:	e7f7      	b.n	800fe74 <__sfp+0x18>
 800fe84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe88:	b9d5      	cbnz	r5, 800fec0 <__sfp+0x64>
 800fe8a:	4b16      	ldr	r3, [pc, #88]	; (800fee4 <__sfp+0x88>)
 800fe8c:	60e3      	str	r3, [r4, #12]
 800fe8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe92:	6665      	str	r5, [r4, #100]	; 0x64
 800fe94:	f000 f85e 	bl	800ff54 <__retarget_lock_init_recursive>
 800fe98:	f7ff ff96 	bl	800fdc8 <__sfp_lock_release>
 800fe9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fea4:	6025      	str	r5, [r4, #0]
 800fea6:	61a5      	str	r5, [r4, #24]
 800fea8:	2208      	movs	r2, #8
 800feaa:	4629      	mov	r1, r5
 800feac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800feb0:	f7fe fb9e 	bl	800e5f0 <memset>
 800feb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800feb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800febc:	4620      	mov	r0, r4
 800febe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fec0:	3468      	adds	r4, #104	; 0x68
 800fec2:	e7d9      	b.n	800fe78 <__sfp+0x1c>
 800fec4:	2104      	movs	r1, #4
 800fec6:	4638      	mov	r0, r7
 800fec8:	f7ff ff62 	bl	800fd90 <__sfmoreglue>
 800fecc:	4604      	mov	r4, r0
 800fece:	6030      	str	r0, [r6, #0]
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d1d5      	bne.n	800fe80 <__sfp+0x24>
 800fed4:	f7ff ff78 	bl	800fdc8 <__sfp_lock_release>
 800fed8:	230c      	movs	r3, #12
 800feda:	603b      	str	r3, [r7, #0]
 800fedc:	e7ee      	b.n	800febc <__sfp+0x60>
 800fede:	bf00      	nop
 800fee0:	0801dcb8 	.word	0x0801dcb8
 800fee4:	ffff0001 	.word	0xffff0001

0800fee8 <fiprintf>:
 800fee8:	b40e      	push	{r1, r2, r3}
 800feea:	b503      	push	{r0, r1, lr}
 800feec:	4601      	mov	r1, r0
 800feee:	ab03      	add	r3, sp, #12
 800fef0:	4805      	ldr	r0, [pc, #20]	; (800ff08 <fiprintf+0x20>)
 800fef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fef6:	6800      	ldr	r0, [r0, #0]
 800fef8:	9301      	str	r3, [sp, #4]
 800fefa:	f000 fe37 	bl	8010b6c <_vfiprintf_r>
 800fefe:	b002      	add	sp, #8
 800ff00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff04:	b003      	add	sp, #12
 800ff06:	4770      	bx	lr
 800ff08:	2000002c 	.word	0x2000002c

0800ff0c <_fwalk_reent>:
 800ff0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff10:	4606      	mov	r6, r0
 800ff12:	4688      	mov	r8, r1
 800ff14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff18:	2700      	movs	r7, #0
 800ff1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff1e:	f1b9 0901 	subs.w	r9, r9, #1
 800ff22:	d505      	bpl.n	800ff30 <_fwalk_reent+0x24>
 800ff24:	6824      	ldr	r4, [r4, #0]
 800ff26:	2c00      	cmp	r4, #0
 800ff28:	d1f7      	bne.n	800ff1a <_fwalk_reent+0xe>
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff30:	89ab      	ldrh	r3, [r5, #12]
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d907      	bls.n	800ff46 <_fwalk_reent+0x3a>
 800ff36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	d003      	beq.n	800ff46 <_fwalk_reent+0x3a>
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4630      	mov	r0, r6
 800ff42:	47c0      	blx	r8
 800ff44:	4307      	orrs	r7, r0
 800ff46:	3568      	adds	r5, #104	; 0x68
 800ff48:	e7e9      	b.n	800ff1e <_fwalk_reent+0x12>
	...

0800ff4c <_localeconv_r>:
 800ff4c:	4800      	ldr	r0, [pc, #0]	; (800ff50 <_localeconv_r+0x4>)
 800ff4e:	4770      	bx	lr
 800ff50:	20000180 	.word	0x20000180

0800ff54 <__retarget_lock_init_recursive>:
 800ff54:	4770      	bx	lr

0800ff56 <__retarget_lock_acquire_recursive>:
 800ff56:	4770      	bx	lr

0800ff58 <__retarget_lock_release_recursive>:
 800ff58:	4770      	bx	lr
	...

0800ff5c <malloc>:
 800ff5c:	4b02      	ldr	r3, [pc, #8]	; (800ff68 <malloc+0xc>)
 800ff5e:	4601      	mov	r1, r0
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	f000 bc09 	b.w	8010778 <_malloc_r>
 800ff66:	bf00      	nop
 800ff68:	2000002c 	.word	0x2000002c

0800ff6c <_Balloc>:
 800ff6c:	b570      	push	{r4, r5, r6, lr}
 800ff6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff70:	4604      	mov	r4, r0
 800ff72:	460d      	mov	r5, r1
 800ff74:	b976      	cbnz	r6, 800ff94 <_Balloc+0x28>
 800ff76:	2010      	movs	r0, #16
 800ff78:	f7ff fff0 	bl	800ff5c <malloc>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	6260      	str	r0, [r4, #36]	; 0x24
 800ff80:	b920      	cbnz	r0, 800ff8c <_Balloc+0x20>
 800ff82:	4b18      	ldr	r3, [pc, #96]	; (800ffe4 <_Balloc+0x78>)
 800ff84:	4818      	ldr	r0, [pc, #96]	; (800ffe8 <_Balloc+0x7c>)
 800ff86:	2166      	movs	r1, #102	; 0x66
 800ff88:	f7ff f83e 	bl	800f008 <__assert_func>
 800ff8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff90:	6006      	str	r6, [r0, #0]
 800ff92:	60c6      	str	r6, [r0, #12]
 800ff94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff96:	68f3      	ldr	r3, [r6, #12]
 800ff98:	b183      	cbz	r3, 800ffbc <_Balloc+0x50>
 800ff9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ffa2:	b9b8      	cbnz	r0, 800ffd4 <_Balloc+0x68>
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	fa01 f605 	lsl.w	r6, r1, r5
 800ffaa:	1d72      	adds	r2, r6, #5
 800ffac:	0092      	lsls	r2, r2, #2
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 fb60 	bl	8010674 <_calloc_r>
 800ffb4:	b160      	cbz	r0, 800ffd0 <_Balloc+0x64>
 800ffb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ffba:	e00e      	b.n	800ffda <_Balloc+0x6e>
 800ffbc:	2221      	movs	r2, #33	; 0x21
 800ffbe:	2104      	movs	r1, #4
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f000 fb57 	bl	8010674 <_calloc_r>
 800ffc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffc8:	60f0      	str	r0, [r6, #12]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e4      	bne.n	800ff9a <_Balloc+0x2e>
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	bd70      	pop	{r4, r5, r6, pc}
 800ffd4:	6802      	ldr	r2, [r0, #0]
 800ffd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffe0:	e7f7      	b.n	800ffd2 <_Balloc+0x66>
 800ffe2:	bf00      	nop
 800ffe4:	0801dcee 	.word	0x0801dcee
 800ffe8:	0801de78 	.word	0x0801de78

0800ffec <_Bfree>:
 800ffec:	b570      	push	{r4, r5, r6, lr}
 800ffee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fff0:	4605      	mov	r5, r0
 800fff2:	460c      	mov	r4, r1
 800fff4:	b976      	cbnz	r6, 8010014 <_Bfree+0x28>
 800fff6:	2010      	movs	r0, #16
 800fff8:	f7ff ffb0 	bl	800ff5c <malloc>
 800fffc:	4602      	mov	r2, r0
 800fffe:	6268      	str	r0, [r5, #36]	; 0x24
 8010000:	b920      	cbnz	r0, 801000c <_Bfree+0x20>
 8010002:	4b09      	ldr	r3, [pc, #36]	; (8010028 <_Bfree+0x3c>)
 8010004:	4809      	ldr	r0, [pc, #36]	; (801002c <_Bfree+0x40>)
 8010006:	218a      	movs	r1, #138	; 0x8a
 8010008:	f7fe fffe 	bl	800f008 <__assert_func>
 801000c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010010:	6006      	str	r6, [r0, #0]
 8010012:	60c6      	str	r6, [r0, #12]
 8010014:	b13c      	cbz	r4, 8010026 <_Bfree+0x3a>
 8010016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010018:	6862      	ldr	r2, [r4, #4]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010020:	6021      	str	r1, [r4, #0]
 8010022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010026:	bd70      	pop	{r4, r5, r6, pc}
 8010028:	0801dcee 	.word	0x0801dcee
 801002c:	0801de78 	.word	0x0801de78

08010030 <__multadd>:
 8010030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010034:	690d      	ldr	r5, [r1, #16]
 8010036:	4607      	mov	r7, r0
 8010038:	460c      	mov	r4, r1
 801003a:	461e      	mov	r6, r3
 801003c:	f101 0c14 	add.w	ip, r1, #20
 8010040:	2000      	movs	r0, #0
 8010042:	f8dc 3000 	ldr.w	r3, [ip]
 8010046:	b299      	uxth	r1, r3
 8010048:	fb02 6101 	mla	r1, r2, r1, r6
 801004c:	0c1e      	lsrs	r6, r3, #16
 801004e:	0c0b      	lsrs	r3, r1, #16
 8010050:	fb02 3306 	mla	r3, r2, r6, r3
 8010054:	b289      	uxth	r1, r1
 8010056:	3001      	adds	r0, #1
 8010058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801005c:	4285      	cmp	r5, r0
 801005e:	f84c 1b04 	str.w	r1, [ip], #4
 8010062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010066:	dcec      	bgt.n	8010042 <__multadd+0x12>
 8010068:	b30e      	cbz	r6, 80100ae <__multadd+0x7e>
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	42ab      	cmp	r3, r5
 801006e:	dc19      	bgt.n	80100a4 <__multadd+0x74>
 8010070:	6861      	ldr	r1, [r4, #4]
 8010072:	4638      	mov	r0, r7
 8010074:	3101      	adds	r1, #1
 8010076:	f7ff ff79 	bl	800ff6c <_Balloc>
 801007a:	4680      	mov	r8, r0
 801007c:	b928      	cbnz	r0, 801008a <__multadd+0x5a>
 801007e:	4602      	mov	r2, r0
 8010080:	4b0c      	ldr	r3, [pc, #48]	; (80100b4 <__multadd+0x84>)
 8010082:	480d      	ldr	r0, [pc, #52]	; (80100b8 <__multadd+0x88>)
 8010084:	21b5      	movs	r1, #181	; 0xb5
 8010086:	f7fe ffbf 	bl	800f008 <__assert_func>
 801008a:	6922      	ldr	r2, [r4, #16]
 801008c:	3202      	adds	r2, #2
 801008e:	f104 010c 	add.w	r1, r4, #12
 8010092:	0092      	lsls	r2, r2, #2
 8010094:	300c      	adds	r0, #12
 8010096:	f7fe fa83 	bl	800e5a0 <memcpy>
 801009a:	4621      	mov	r1, r4
 801009c:	4638      	mov	r0, r7
 801009e:	f7ff ffa5 	bl	800ffec <_Bfree>
 80100a2:	4644      	mov	r4, r8
 80100a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80100a8:	3501      	adds	r5, #1
 80100aa:	615e      	str	r6, [r3, #20]
 80100ac:	6125      	str	r5, [r4, #16]
 80100ae:	4620      	mov	r0, r4
 80100b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b4:	0801de04 	.word	0x0801de04
 80100b8:	0801de78 	.word	0x0801de78

080100bc <__hi0bits>:
 80100bc:	0c03      	lsrs	r3, r0, #16
 80100be:	041b      	lsls	r3, r3, #16
 80100c0:	b9d3      	cbnz	r3, 80100f8 <__hi0bits+0x3c>
 80100c2:	0400      	lsls	r0, r0, #16
 80100c4:	2310      	movs	r3, #16
 80100c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80100ca:	bf04      	itt	eq
 80100cc:	0200      	lsleq	r0, r0, #8
 80100ce:	3308      	addeq	r3, #8
 80100d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80100d4:	bf04      	itt	eq
 80100d6:	0100      	lsleq	r0, r0, #4
 80100d8:	3304      	addeq	r3, #4
 80100da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80100de:	bf04      	itt	eq
 80100e0:	0080      	lsleq	r0, r0, #2
 80100e2:	3302      	addeq	r3, #2
 80100e4:	2800      	cmp	r0, #0
 80100e6:	db05      	blt.n	80100f4 <__hi0bits+0x38>
 80100e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80100ec:	f103 0301 	add.w	r3, r3, #1
 80100f0:	bf08      	it	eq
 80100f2:	2320      	moveq	r3, #32
 80100f4:	4618      	mov	r0, r3
 80100f6:	4770      	bx	lr
 80100f8:	2300      	movs	r3, #0
 80100fa:	e7e4      	b.n	80100c6 <__hi0bits+0xa>

080100fc <__lo0bits>:
 80100fc:	6803      	ldr	r3, [r0, #0]
 80100fe:	f013 0207 	ands.w	r2, r3, #7
 8010102:	4601      	mov	r1, r0
 8010104:	d00b      	beq.n	801011e <__lo0bits+0x22>
 8010106:	07da      	lsls	r2, r3, #31
 8010108:	d423      	bmi.n	8010152 <__lo0bits+0x56>
 801010a:	0798      	lsls	r0, r3, #30
 801010c:	bf49      	itett	mi
 801010e:	085b      	lsrmi	r3, r3, #1
 8010110:	089b      	lsrpl	r3, r3, #2
 8010112:	2001      	movmi	r0, #1
 8010114:	600b      	strmi	r3, [r1, #0]
 8010116:	bf5c      	itt	pl
 8010118:	600b      	strpl	r3, [r1, #0]
 801011a:	2002      	movpl	r0, #2
 801011c:	4770      	bx	lr
 801011e:	b298      	uxth	r0, r3
 8010120:	b9a8      	cbnz	r0, 801014e <__lo0bits+0x52>
 8010122:	0c1b      	lsrs	r3, r3, #16
 8010124:	2010      	movs	r0, #16
 8010126:	b2da      	uxtb	r2, r3
 8010128:	b90a      	cbnz	r2, 801012e <__lo0bits+0x32>
 801012a:	3008      	adds	r0, #8
 801012c:	0a1b      	lsrs	r3, r3, #8
 801012e:	071a      	lsls	r2, r3, #28
 8010130:	bf04      	itt	eq
 8010132:	091b      	lsreq	r3, r3, #4
 8010134:	3004      	addeq	r0, #4
 8010136:	079a      	lsls	r2, r3, #30
 8010138:	bf04      	itt	eq
 801013a:	089b      	lsreq	r3, r3, #2
 801013c:	3002      	addeq	r0, #2
 801013e:	07da      	lsls	r2, r3, #31
 8010140:	d403      	bmi.n	801014a <__lo0bits+0x4e>
 8010142:	085b      	lsrs	r3, r3, #1
 8010144:	f100 0001 	add.w	r0, r0, #1
 8010148:	d005      	beq.n	8010156 <__lo0bits+0x5a>
 801014a:	600b      	str	r3, [r1, #0]
 801014c:	4770      	bx	lr
 801014e:	4610      	mov	r0, r2
 8010150:	e7e9      	b.n	8010126 <__lo0bits+0x2a>
 8010152:	2000      	movs	r0, #0
 8010154:	4770      	bx	lr
 8010156:	2020      	movs	r0, #32
 8010158:	4770      	bx	lr
	...

0801015c <__i2b>:
 801015c:	b510      	push	{r4, lr}
 801015e:	460c      	mov	r4, r1
 8010160:	2101      	movs	r1, #1
 8010162:	f7ff ff03 	bl	800ff6c <_Balloc>
 8010166:	4602      	mov	r2, r0
 8010168:	b928      	cbnz	r0, 8010176 <__i2b+0x1a>
 801016a:	4b05      	ldr	r3, [pc, #20]	; (8010180 <__i2b+0x24>)
 801016c:	4805      	ldr	r0, [pc, #20]	; (8010184 <__i2b+0x28>)
 801016e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010172:	f7fe ff49 	bl	800f008 <__assert_func>
 8010176:	2301      	movs	r3, #1
 8010178:	6144      	str	r4, [r0, #20]
 801017a:	6103      	str	r3, [r0, #16]
 801017c:	bd10      	pop	{r4, pc}
 801017e:	bf00      	nop
 8010180:	0801de04 	.word	0x0801de04
 8010184:	0801de78 	.word	0x0801de78

08010188 <__multiply>:
 8010188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018c:	4691      	mov	r9, r2
 801018e:	690a      	ldr	r2, [r1, #16]
 8010190:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010194:	429a      	cmp	r2, r3
 8010196:	bfb8      	it	lt
 8010198:	460b      	movlt	r3, r1
 801019a:	460c      	mov	r4, r1
 801019c:	bfbc      	itt	lt
 801019e:	464c      	movlt	r4, r9
 80101a0:	4699      	movlt	r9, r3
 80101a2:	6927      	ldr	r7, [r4, #16]
 80101a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80101a8:	68a3      	ldr	r3, [r4, #8]
 80101aa:	6861      	ldr	r1, [r4, #4]
 80101ac:	eb07 060a 	add.w	r6, r7, sl
 80101b0:	42b3      	cmp	r3, r6
 80101b2:	b085      	sub	sp, #20
 80101b4:	bfb8      	it	lt
 80101b6:	3101      	addlt	r1, #1
 80101b8:	f7ff fed8 	bl	800ff6c <_Balloc>
 80101bc:	b930      	cbnz	r0, 80101cc <__multiply+0x44>
 80101be:	4602      	mov	r2, r0
 80101c0:	4b44      	ldr	r3, [pc, #272]	; (80102d4 <__multiply+0x14c>)
 80101c2:	4845      	ldr	r0, [pc, #276]	; (80102d8 <__multiply+0x150>)
 80101c4:	f240 115d 	movw	r1, #349	; 0x15d
 80101c8:	f7fe ff1e 	bl	800f008 <__assert_func>
 80101cc:	f100 0514 	add.w	r5, r0, #20
 80101d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80101d4:	462b      	mov	r3, r5
 80101d6:	2200      	movs	r2, #0
 80101d8:	4543      	cmp	r3, r8
 80101da:	d321      	bcc.n	8010220 <__multiply+0x98>
 80101dc:	f104 0314 	add.w	r3, r4, #20
 80101e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80101e4:	f109 0314 	add.w	r3, r9, #20
 80101e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80101ec:	9202      	str	r2, [sp, #8]
 80101ee:	1b3a      	subs	r2, r7, r4
 80101f0:	3a15      	subs	r2, #21
 80101f2:	f022 0203 	bic.w	r2, r2, #3
 80101f6:	3204      	adds	r2, #4
 80101f8:	f104 0115 	add.w	r1, r4, #21
 80101fc:	428f      	cmp	r7, r1
 80101fe:	bf38      	it	cc
 8010200:	2204      	movcc	r2, #4
 8010202:	9201      	str	r2, [sp, #4]
 8010204:	9a02      	ldr	r2, [sp, #8]
 8010206:	9303      	str	r3, [sp, #12]
 8010208:	429a      	cmp	r2, r3
 801020a:	d80c      	bhi.n	8010226 <__multiply+0x9e>
 801020c:	2e00      	cmp	r6, #0
 801020e:	dd03      	ble.n	8010218 <__multiply+0x90>
 8010210:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010214:	2b00      	cmp	r3, #0
 8010216:	d05a      	beq.n	80102ce <__multiply+0x146>
 8010218:	6106      	str	r6, [r0, #16]
 801021a:	b005      	add	sp, #20
 801021c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010220:	f843 2b04 	str.w	r2, [r3], #4
 8010224:	e7d8      	b.n	80101d8 <__multiply+0x50>
 8010226:	f8b3 a000 	ldrh.w	sl, [r3]
 801022a:	f1ba 0f00 	cmp.w	sl, #0
 801022e:	d024      	beq.n	801027a <__multiply+0xf2>
 8010230:	f104 0e14 	add.w	lr, r4, #20
 8010234:	46a9      	mov	r9, r5
 8010236:	f04f 0c00 	mov.w	ip, #0
 801023a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801023e:	f8d9 1000 	ldr.w	r1, [r9]
 8010242:	fa1f fb82 	uxth.w	fp, r2
 8010246:	b289      	uxth	r1, r1
 8010248:	fb0a 110b 	mla	r1, sl, fp, r1
 801024c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010250:	f8d9 2000 	ldr.w	r2, [r9]
 8010254:	4461      	add	r1, ip
 8010256:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801025a:	fb0a c20b 	mla	r2, sl, fp, ip
 801025e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010262:	b289      	uxth	r1, r1
 8010264:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010268:	4577      	cmp	r7, lr
 801026a:	f849 1b04 	str.w	r1, [r9], #4
 801026e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010272:	d8e2      	bhi.n	801023a <__multiply+0xb2>
 8010274:	9a01      	ldr	r2, [sp, #4]
 8010276:	f845 c002 	str.w	ip, [r5, r2]
 801027a:	9a03      	ldr	r2, [sp, #12]
 801027c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010280:	3304      	adds	r3, #4
 8010282:	f1b9 0f00 	cmp.w	r9, #0
 8010286:	d020      	beq.n	80102ca <__multiply+0x142>
 8010288:	6829      	ldr	r1, [r5, #0]
 801028a:	f104 0c14 	add.w	ip, r4, #20
 801028e:	46ae      	mov	lr, r5
 8010290:	f04f 0a00 	mov.w	sl, #0
 8010294:	f8bc b000 	ldrh.w	fp, [ip]
 8010298:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801029c:	fb09 220b 	mla	r2, r9, fp, r2
 80102a0:	4492      	add	sl, r2
 80102a2:	b289      	uxth	r1, r1
 80102a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80102a8:	f84e 1b04 	str.w	r1, [lr], #4
 80102ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80102b0:	f8be 1000 	ldrh.w	r1, [lr]
 80102b4:	0c12      	lsrs	r2, r2, #16
 80102b6:	fb09 1102 	mla	r1, r9, r2, r1
 80102ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80102be:	4567      	cmp	r7, ip
 80102c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80102c4:	d8e6      	bhi.n	8010294 <__multiply+0x10c>
 80102c6:	9a01      	ldr	r2, [sp, #4]
 80102c8:	50a9      	str	r1, [r5, r2]
 80102ca:	3504      	adds	r5, #4
 80102cc:	e79a      	b.n	8010204 <__multiply+0x7c>
 80102ce:	3e01      	subs	r6, #1
 80102d0:	e79c      	b.n	801020c <__multiply+0x84>
 80102d2:	bf00      	nop
 80102d4:	0801de04 	.word	0x0801de04
 80102d8:	0801de78 	.word	0x0801de78

080102dc <__pow5mult>:
 80102dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e0:	4615      	mov	r5, r2
 80102e2:	f012 0203 	ands.w	r2, r2, #3
 80102e6:	4606      	mov	r6, r0
 80102e8:	460f      	mov	r7, r1
 80102ea:	d007      	beq.n	80102fc <__pow5mult+0x20>
 80102ec:	4c25      	ldr	r4, [pc, #148]	; (8010384 <__pow5mult+0xa8>)
 80102ee:	3a01      	subs	r2, #1
 80102f0:	2300      	movs	r3, #0
 80102f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80102f6:	f7ff fe9b 	bl	8010030 <__multadd>
 80102fa:	4607      	mov	r7, r0
 80102fc:	10ad      	asrs	r5, r5, #2
 80102fe:	d03d      	beq.n	801037c <__pow5mult+0xa0>
 8010300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010302:	b97c      	cbnz	r4, 8010324 <__pow5mult+0x48>
 8010304:	2010      	movs	r0, #16
 8010306:	f7ff fe29 	bl	800ff5c <malloc>
 801030a:	4602      	mov	r2, r0
 801030c:	6270      	str	r0, [r6, #36]	; 0x24
 801030e:	b928      	cbnz	r0, 801031c <__pow5mult+0x40>
 8010310:	4b1d      	ldr	r3, [pc, #116]	; (8010388 <__pow5mult+0xac>)
 8010312:	481e      	ldr	r0, [pc, #120]	; (801038c <__pow5mult+0xb0>)
 8010314:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010318:	f7fe fe76 	bl	800f008 <__assert_func>
 801031c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010320:	6004      	str	r4, [r0, #0]
 8010322:	60c4      	str	r4, [r0, #12]
 8010324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801032c:	b94c      	cbnz	r4, 8010342 <__pow5mult+0x66>
 801032e:	f240 2171 	movw	r1, #625	; 0x271
 8010332:	4630      	mov	r0, r6
 8010334:	f7ff ff12 	bl	801015c <__i2b>
 8010338:	2300      	movs	r3, #0
 801033a:	f8c8 0008 	str.w	r0, [r8, #8]
 801033e:	4604      	mov	r4, r0
 8010340:	6003      	str	r3, [r0, #0]
 8010342:	f04f 0900 	mov.w	r9, #0
 8010346:	07eb      	lsls	r3, r5, #31
 8010348:	d50a      	bpl.n	8010360 <__pow5mult+0x84>
 801034a:	4639      	mov	r1, r7
 801034c:	4622      	mov	r2, r4
 801034e:	4630      	mov	r0, r6
 8010350:	f7ff ff1a 	bl	8010188 <__multiply>
 8010354:	4639      	mov	r1, r7
 8010356:	4680      	mov	r8, r0
 8010358:	4630      	mov	r0, r6
 801035a:	f7ff fe47 	bl	800ffec <_Bfree>
 801035e:	4647      	mov	r7, r8
 8010360:	106d      	asrs	r5, r5, #1
 8010362:	d00b      	beq.n	801037c <__pow5mult+0xa0>
 8010364:	6820      	ldr	r0, [r4, #0]
 8010366:	b938      	cbnz	r0, 8010378 <__pow5mult+0x9c>
 8010368:	4622      	mov	r2, r4
 801036a:	4621      	mov	r1, r4
 801036c:	4630      	mov	r0, r6
 801036e:	f7ff ff0b 	bl	8010188 <__multiply>
 8010372:	6020      	str	r0, [r4, #0]
 8010374:	f8c0 9000 	str.w	r9, [r0]
 8010378:	4604      	mov	r4, r0
 801037a:	e7e4      	b.n	8010346 <__pow5mult+0x6a>
 801037c:	4638      	mov	r0, r7
 801037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010382:	bf00      	nop
 8010384:	0801dfc8 	.word	0x0801dfc8
 8010388:	0801dcee 	.word	0x0801dcee
 801038c:	0801de78 	.word	0x0801de78

08010390 <__lshift>:
 8010390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010394:	460c      	mov	r4, r1
 8010396:	6849      	ldr	r1, [r1, #4]
 8010398:	6923      	ldr	r3, [r4, #16]
 801039a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801039e:	68a3      	ldr	r3, [r4, #8]
 80103a0:	4607      	mov	r7, r0
 80103a2:	4691      	mov	r9, r2
 80103a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80103a8:	f108 0601 	add.w	r6, r8, #1
 80103ac:	42b3      	cmp	r3, r6
 80103ae:	db0b      	blt.n	80103c8 <__lshift+0x38>
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7ff fddb 	bl	800ff6c <_Balloc>
 80103b6:	4605      	mov	r5, r0
 80103b8:	b948      	cbnz	r0, 80103ce <__lshift+0x3e>
 80103ba:	4602      	mov	r2, r0
 80103bc:	4b2a      	ldr	r3, [pc, #168]	; (8010468 <__lshift+0xd8>)
 80103be:	482b      	ldr	r0, [pc, #172]	; (801046c <__lshift+0xdc>)
 80103c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80103c4:	f7fe fe20 	bl	800f008 <__assert_func>
 80103c8:	3101      	adds	r1, #1
 80103ca:	005b      	lsls	r3, r3, #1
 80103cc:	e7ee      	b.n	80103ac <__lshift+0x1c>
 80103ce:	2300      	movs	r3, #0
 80103d0:	f100 0114 	add.w	r1, r0, #20
 80103d4:	f100 0210 	add.w	r2, r0, #16
 80103d8:	4618      	mov	r0, r3
 80103da:	4553      	cmp	r3, sl
 80103dc:	db37      	blt.n	801044e <__lshift+0xbe>
 80103de:	6920      	ldr	r0, [r4, #16]
 80103e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80103e4:	f104 0314 	add.w	r3, r4, #20
 80103e8:	f019 091f 	ands.w	r9, r9, #31
 80103ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80103f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80103f4:	d02f      	beq.n	8010456 <__lshift+0xc6>
 80103f6:	f1c9 0e20 	rsb	lr, r9, #32
 80103fa:	468a      	mov	sl, r1
 80103fc:	f04f 0c00 	mov.w	ip, #0
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	fa02 f209 	lsl.w	r2, r2, r9
 8010406:	ea42 020c 	orr.w	r2, r2, ip
 801040a:	f84a 2b04 	str.w	r2, [sl], #4
 801040e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010412:	4298      	cmp	r0, r3
 8010414:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010418:	d8f2      	bhi.n	8010400 <__lshift+0x70>
 801041a:	1b03      	subs	r3, r0, r4
 801041c:	3b15      	subs	r3, #21
 801041e:	f023 0303 	bic.w	r3, r3, #3
 8010422:	3304      	adds	r3, #4
 8010424:	f104 0215 	add.w	r2, r4, #21
 8010428:	4290      	cmp	r0, r2
 801042a:	bf38      	it	cc
 801042c:	2304      	movcc	r3, #4
 801042e:	f841 c003 	str.w	ip, [r1, r3]
 8010432:	f1bc 0f00 	cmp.w	ip, #0
 8010436:	d001      	beq.n	801043c <__lshift+0xac>
 8010438:	f108 0602 	add.w	r6, r8, #2
 801043c:	3e01      	subs	r6, #1
 801043e:	4638      	mov	r0, r7
 8010440:	612e      	str	r6, [r5, #16]
 8010442:	4621      	mov	r1, r4
 8010444:	f7ff fdd2 	bl	800ffec <_Bfree>
 8010448:	4628      	mov	r0, r5
 801044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801044e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010452:	3301      	adds	r3, #1
 8010454:	e7c1      	b.n	80103da <__lshift+0x4a>
 8010456:	3904      	subs	r1, #4
 8010458:	f853 2b04 	ldr.w	r2, [r3], #4
 801045c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010460:	4298      	cmp	r0, r3
 8010462:	d8f9      	bhi.n	8010458 <__lshift+0xc8>
 8010464:	e7ea      	b.n	801043c <__lshift+0xac>
 8010466:	bf00      	nop
 8010468:	0801de04 	.word	0x0801de04
 801046c:	0801de78 	.word	0x0801de78

08010470 <__mcmp>:
 8010470:	b530      	push	{r4, r5, lr}
 8010472:	6902      	ldr	r2, [r0, #16]
 8010474:	690c      	ldr	r4, [r1, #16]
 8010476:	1b12      	subs	r2, r2, r4
 8010478:	d10e      	bne.n	8010498 <__mcmp+0x28>
 801047a:	f100 0314 	add.w	r3, r0, #20
 801047e:	3114      	adds	r1, #20
 8010480:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010484:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010488:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801048c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010490:	42a5      	cmp	r5, r4
 8010492:	d003      	beq.n	801049c <__mcmp+0x2c>
 8010494:	d305      	bcc.n	80104a2 <__mcmp+0x32>
 8010496:	2201      	movs	r2, #1
 8010498:	4610      	mov	r0, r2
 801049a:	bd30      	pop	{r4, r5, pc}
 801049c:	4283      	cmp	r3, r0
 801049e:	d3f3      	bcc.n	8010488 <__mcmp+0x18>
 80104a0:	e7fa      	b.n	8010498 <__mcmp+0x28>
 80104a2:	f04f 32ff 	mov.w	r2, #4294967295
 80104a6:	e7f7      	b.n	8010498 <__mcmp+0x28>

080104a8 <__mdiff>:
 80104a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ac:	460c      	mov	r4, r1
 80104ae:	4606      	mov	r6, r0
 80104b0:	4611      	mov	r1, r2
 80104b2:	4620      	mov	r0, r4
 80104b4:	4690      	mov	r8, r2
 80104b6:	f7ff ffdb 	bl	8010470 <__mcmp>
 80104ba:	1e05      	subs	r5, r0, #0
 80104bc:	d110      	bne.n	80104e0 <__mdiff+0x38>
 80104be:	4629      	mov	r1, r5
 80104c0:	4630      	mov	r0, r6
 80104c2:	f7ff fd53 	bl	800ff6c <_Balloc>
 80104c6:	b930      	cbnz	r0, 80104d6 <__mdiff+0x2e>
 80104c8:	4b3a      	ldr	r3, [pc, #232]	; (80105b4 <__mdiff+0x10c>)
 80104ca:	4602      	mov	r2, r0
 80104cc:	f240 2132 	movw	r1, #562	; 0x232
 80104d0:	4839      	ldr	r0, [pc, #228]	; (80105b8 <__mdiff+0x110>)
 80104d2:	f7fe fd99 	bl	800f008 <__assert_func>
 80104d6:	2301      	movs	r3, #1
 80104d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80104dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e0:	bfa4      	itt	ge
 80104e2:	4643      	movge	r3, r8
 80104e4:	46a0      	movge	r8, r4
 80104e6:	4630      	mov	r0, r6
 80104e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80104ec:	bfa6      	itte	ge
 80104ee:	461c      	movge	r4, r3
 80104f0:	2500      	movge	r5, #0
 80104f2:	2501      	movlt	r5, #1
 80104f4:	f7ff fd3a 	bl	800ff6c <_Balloc>
 80104f8:	b920      	cbnz	r0, 8010504 <__mdiff+0x5c>
 80104fa:	4b2e      	ldr	r3, [pc, #184]	; (80105b4 <__mdiff+0x10c>)
 80104fc:	4602      	mov	r2, r0
 80104fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010502:	e7e5      	b.n	80104d0 <__mdiff+0x28>
 8010504:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010508:	6926      	ldr	r6, [r4, #16]
 801050a:	60c5      	str	r5, [r0, #12]
 801050c:	f104 0914 	add.w	r9, r4, #20
 8010510:	f108 0514 	add.w	r5, r8, #20
 8010514:	f100 0e14 	add.w	lr, r0, #20
 8010518:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801051c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010520:	f108 0210 	add.w	r2, r8, #16
 8010524:	46f2      	mov	sl, lr
 8010526:	2100      	movs	r1, #0
 8010528:	f859 3b04 	ldr.w	r3, [r9], #4
 801052c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010530:	fa1f f883 	uxth.w	r8, r3
 8010534:	fa11 f18b 	uxtah	r1, r1, fp
 8010538:	0c1b      	lsrs	r3, r3, #16
 801053a:	eba1 0808 	sub.w	r8, r1, r8
 801053e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010542:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010546:	fa1f f888 	uxth.w	r8, r8
 801054a:	1419      	asrs	r1, r3, #16
 801054c:	454e      	cmp	r6, r9
 801054e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010552:	f84a 3b04 	str.w	r3, [sl], #4
 8010556:	d8e7      	bhi.n	8010528 <__mdiff+0x80>
 8010558:	1b33      	subs	r3, r6, r4
 801055a:	3b15      	subs	r3, #21
 801055c:	f023 0303 	bic.w	r3, r3, #3
 8010560:	3304      	adds	r3, #4
 8010562:	3415      	adds	r4, #21
 8010564:	42a6      	cmp	r6, r4
 8010566:	bf38      	it	cc
 8010568:	2304      	movcc	r3, #4
 801056a:	441d      	add	r5, r3
 801056c:	4473      	add	r3, lr
 801056e:	469e      	mov	lr, r3
 8010570:	462e      	mov	r6, r5
 8010572:	4566      	cmp	r6, ip
 8010574:	d30e      	bcc.n	8010594 <__mdiff+0xec>
 8010576:	f10c 0203 	add.w	r2, ip, #3
 801057a:	1b52      	subs	r2, r2, r5
 801057c:	f022 0203 	bic.w	r2, r2, #3
 8010580:	3d03      	subs	r5, #3
 8010582:	45ac      	cmp	ip, r5
 8010584:	bf38      	it	cc
 8010586:	2200      	movcc	r2, #0
 8010588:	441a      	add	r2, r3
 801058a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801058e:	b17b      	cbz	r3, 80105b0 <__mdiff+0x108>
 8010590:	6107      	str	r7, [r0, #16]
 8010592:	e7a3      	b.n	80104dc <__mdiff+0x34>
 8010594:	f856 8b04 	ldr.w	r8, [r6], #4
 8010598:	fa11 f288 	uxtah	r2, r1, r8
 801059c:	1414      	asrs	r4, r2, #16
 801059e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80105a2:	b292      	uxth	r2, r2
 80105a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80105a8:	f84e 2b04 	str.w	r2, [lr], #4
 80105ac:	1421      	asrs	r1, r4, #16
 80105ae:	e7e0      	b.n	8010572 <__mdiff+0xca>
 80105b0:	3f01      	subs	r7, #1
 80105b2:	e7ea      	b.n	801058a <__mdiff+0xe2>
 80105b4:	0801de04 	.word	0x0801de04
 80105b8:	0801de78 	.word	0x0801de78

080105bc <__d2b>:
 80105bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105c0:	4689      	mov	r9, r1
 80105c2:	2101      	movs	r1, #1
 80105c4:	ec57 6b10 	vmov	r6, r7, d0
 80105c8:	4690      	mov	r8, r2
 80105ca:	f7ff fccf 	bl	800ff6c <_Balloc>
 80105ce:	4604      	mov	r4, r0
 80105d0:	b930      	cbnz	r0, 80105e0 <__d2b+0x24>
 80105d2:	4602      	mov	r2, r0
 80105d4:	4b25      	ldr	r3, [pc, #148]	; (801066c <__d2b+0xb0>)
 80105d6:	4826      	ldr	r0, [pc, #152]	; (8010670 <__d2b+0xb4>)
 80105d8:	f240 310a 	movw	r1, #778	; 0x30a
 80105dc:	f7fe fd14 	bl	800f008 <__assert_func>
 80105e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80105e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80105e8:	bb35      	cbnz	r5, 8010638 <__d2b+0x7c>
 80105ea:	2e00      	cmp	r6, #0
 80105ec:	9301      	str	r3, [sp, #4]
 80105ee:	d028      	beq.n	8010642 <__d2b+0x86>
 80105f0:	4668      	mov	r0, sp
 80105f2:	9600      	str	r6, [sp, #0]
 80105f4:	f7ff fd82 	bl	80100fc <__lo0bits>
 80105f8:	9900      	ldr	r1, [sp, #0]
 80105fa:	b300      	cbz	r0, 801063e <__d2b+0x82>
 80105fc:	9a01      	ldr	r2, [sp, #4]
 80105fe:	f1c0 0320 	rsb	r3, r0, #32
 8010602:	fa02 f303 	lsl.w	r3, r2, r3
 8010606:	430b      	orrs	r3, r1
 8010608:	40c2      	lsrs	r2, r0
 801060a:	6163      	str	r3, [r4, #20]
 801060c:	9201      	str	r2, [sp, #4]
 801060e:	9b01      	ldr	r3, [sp, #4]
 8010610:	61a3      	str	r3, [r4, #24]
 8010612:	2b00      	cmp	r3, #0
 8010614:	bf14      	ite	ne
 8010616:	2202      	movne	r2, #2
 8010618:	2201      	moveq	r2, #1
 801061a:	6122      	str	r2, [r4, #16]
 801061c:	b1d5      	cbz	r5, 8010654 <__d2b+0x98>
 801061e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010622:	4405      	add	r5, r0
 8010624:	f8c9 5000 	str.w	r5, [r9]
 8010628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801062c:	f8c8 0000 	str.w	r0, [r8]
 8010630:	4620      	mov	r0, r4
 8010632:	b003      	add	sp, #12
 8010634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801063c:	e7d5      	b.n	80105ea <__d2b+0x2e>
 801063e:	6161      	str	r1, [r4, #20]
 8010640:	e7e5      	b.n	801060e <__d2b+0x52>
 8010642:	a801      	add	r0, sp, #4
 8010644:	f7ff fd5a 	bl	80100fc <__lo0bits>
 8010648:	9b01      	ldr	r3, [sp, #4]
 801064a:	6163      	str	r3, [r4, #20]
 801064c:	2201      	movs	r2, #1
 801064e:	6122      	str	r2, [r4, #16]
 8010650:	3020      	adds	r0, #32
 8010652:	e7e3      	b.n	801061c <__d2b+0x60>
 8010654:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801065c:	f8c9 0000 	str.w	r0, [r9]
 8010660:	6918      	ldr	r0, [r3, #16]
 8010662:	f7ff fd2b 	bl	80100bc <__hi0bits>
 8010666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801066a:	e7df      	b.n	801062c <__d2b+0x70>
 801066c:	0801de04 	.word	0x0801de04
 8010670:	0801de78 	.word	0x0801de78

08010674 <_calloc_r>:
 8010674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010676:	fba1 2402 	umull	r2, r4, r1, r2
 801067a:	b94c      	cbnz	r4, 8010690 <_calloc_r+0x1c>
 801067c:	4611      	mov	r1, r2
 801067e:	9201      	str	r2, [sp, #4]
 8010680:	f000 f87a 	bl	8010778 <_malloc_r>
 8010684:	9a01      	ldr	r2, [sp, #4]
 8010686:	4605      	mov	r5, r0
 8010688:	b930      	cbnz	r0, 8010698 <_calloc_r+0x24>
 801068a:	4628      	mov	r0, r5
 801068c:	b003      	add	sp, #12
 801068e:	bd30      	pop	{r4, r5, pc}
 8010690:	220c      	movs	r2, #12
 8010692:	6002      	str	r2, [r0, #0]
 8010694:	2500      	movs	r5, #0
 8010696:	e7f8      	b.n	801068a <_calloc_r+0x16>
 8010698:	4621      	mov	r1, r4
 801069a:	f7fd ffa9 	bl	800e5f0 <memset>
 801069e:	e7f4      	b.n	801068a <_calloc_r+0x16>

080106a0 <_free_r>:
 80106a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106a2:	2900      	cmp	r1, #0
 80106a4:	d044      	beq.n	8010730 <_free_r+0x90>
 80106a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106aa:	9001      	str	r0, [sp, #4]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f1a1 0404 	sub.w	r4, r1, #4
 80106b2:	bfb8      	it	lt
 80106b4:	18e4      	addlt	r4, r4, r3
 80106b6:	f000 fe13 	bl	80112e0 <__malloc_lock>
 80106ba:	4a1e      	ldr	r2, [pc, #120]	; (8010734 <_free_r+0x94>)
 80106bc:	9801      	ldr	r0, [sp, #4]
 80106be:	6813      	ldr	r3, [r2, #0]
 80106c0:	b933      	cbnz	r3, 80106d0 <_free_r+0x30>
 80106c2:	6063      	str	r3, [r4, #4]
 80106c4:	6014      	str	r4, [r2, #0]
 80106c6:	b003      	add	sp, #12
 80106c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106cc:	f000 be0e 	b.w	80112ec <__malloc_unlock>
 80106d0:	42a3      	cmp	r3, r4
 80106d2:	d908      	bls.n	80106e6 <_free_r+0x46>
 80106d4:	6825      	ldr	r5, [r4, #0]
 80106d6:	1961      	adds	r1, r4, r5
 80106d8:	428b      	cmp	r3, r1
 80106da:	bf01      	itttt	eq
 80106dc:	6819      	ldreq	r1, [r3, #0]
 80106de:	685b      	ldreq	r3, [r3, #4]
 80106e0:	1949      	addeq	r1, r1, r5
 80106e2:	6021      	streq	r1, [r4, #0]
 80106e4:	e7ed      	b.n	80106c2 <_free_r+0x22>
 80106e6:	461a      	mov	r2, r3
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	b10b      	cbz	r3, 80106f0 <_free_r+0x50>
 80106ec:	42a3      	cmp	r3, r4
 80106ee:	d9fa      	bls.n	80106e6 <_free_r+0x46>
 80106f0:	6811      	ldr	r1, [r2, #0]
 80106f2:	1855      	adds	r5, r2, r1
 80106f4:	42a5      	cmp	r5, r4
 80106f6:	d10b      	bne.n	8010710 <_free_r+0x70>
 80106f8:	6824      	ldr	r4, [r4, #0]
 80106fa:	4421      	add	r1, r4
 80106fc:	1854      	adds	r4, r2, r1
 80106fe:	42a3      	cmp	r3, r4
 8010700:	6011      	str	r1, [r2, #0]
 8010702:	d1e0      	bne.n	80106c6 <_free_r+0x26>
 8010704:	681c      	ldr	r4, [r3, #0]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	6053      	str	r3, [r2, #4]
 801070a:	4421      	add	r1, r4
 801070c:	6011      	str	r1, [r2, #0]
 801070e:	e7da      	b.n	80106c6 <_free_r+0x26>
 8010710:	d902      	bls.n	8010718 <_free_r+0x78>
 8010712:	230c      	movs	r3, #12
 8010714:	6003      	str	r3, [r0, #0]
 8010716:	e7d6      	b.n	80106c6 <_free_r+0x26>
 8010718:	6825      	ldr	r5, [r4, #0]
 801071a:	1961      	adds	r1, r4, r5
 801071c:	428b      	cmp	r3, r1
 801071e:	bf04      	itt	eq
 8010720:	6819      	ldreq	r1, [r3, #0]
 8010722:	685b      	ldreq	r3, [r3, #4]
 8010724:	6063      	str	r3, [r4, #4]
 8010726:	bf04      	itt	eq
 8010728:	1949      	addeq	r1, r1, r5
 801072a:	6021      	streq	r1, [r4, #0]
 801072c:	6054      	str	r4, [r2, #4]
 801072e:	e7ca      	b.n	80106c6 <_free_r+0x26>
 8010730:	b003      	add	sp, #12
 8010732:	bd30      	pop	{r4, r5, pc}
 8010734:	2000d078 	.word	0x2000d078

08010738 <sbrk_aligned>:
 8010738:	b570      	push	{r4, r5, r6, lr}
 801073a:	4e0e      	ldr	r6, [pc, #56]	; (8010774 <sbrk_aligned+0x3c>)
 801073c:	460c      	mov	r4, r1
 801073e:	6831      	ldr	r1, [r6, #0]
 8010740:	4605      	mov	r5, r0
 8010742:	b911      	cbnz	r1, 801074a <sbrk_aligned+0x12>
 8010744:	f000 fb42 	bl	8010dcc <_sbrk_r>
 8010748:	6030      	str	r0, [r6, #0]
 801074a:	4621      	mov	r1, r4
 801074c:	4628      	mov	r0, r5
 801074e:	f000 fb3d 	bl	8010dcc <_sbrk_r>
 8010752:	1c43      	adds	r3, r0, #1
 8010754:	d00a      	beq.n	801076c <sbrk_aligned+0x34>
 8010756:	1cc4      	adds	r4, r0, #3
 8010758:	f024 0403 	bic.w	r4, r4, #3
 801075c:	42a0      	cmp	r0, r4
 801075e:	d007      	beq.n	8010770 <sbrk_aligned+0x38>
 8010760:	1a21      	subs	r1, r4, r0
 8010762:	4628      	mov	r0, r5
 8010764:	f000 fb32 	bl	8010dcc <_sbrk_r>
 8010768:	3001      	adds	r0, #1
 801076a:	d101      	bne.n	8010770 <sbrk_aligned+0x38>
 801076c:	f04f 34ff 	mov.w	r4, #4294967295
 8010770:	4620      	mov	r0, r4
 8010772:	bd70      	pop	{r4, r5, r6, pc}
 8010774:	2000d07c 	.word	0x2000d07c

08010778 <_malloc_r>:
 8010778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077c:	1ccd      	adds	r5, r1, #3
 801077e:	f025 0503 	bic.w	r5, r5, #3
 8010782:	3508      	adds	r5, #8
 8010784:	2d0c      	cmp	r5, #12
 8010786:	bf38      	it	cc
 8010788:	250c      	movcc	r5, #12
 801078a:	2d00      	cmp	r5, #0
 801078c:	4607      	mov	r7, r0
 801078e:	db01      	blt.n	8010794 <_malloc_r+0x1c>
 8010790:	42a9      	cmp	r1, r5
 8010792:	d905      	bls.n	80107a0 <_malloc_r+0x28>
 8010794:	230c      	movs	r3, #12
 8010796:	603b      	str	r3, [r7, #0]
 8010798:	2600      	movs	r6, #0
 801079a:	4630      	mov	r0, r6
 801079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a0:	4e2e      	ldr	r6, [pc, #184]	; (801085c <_malloc_r+0xe4>)
 80107a2:	f000 fd9d 	bl	80112e0 <__malloc_lock>
 80107a6:	6833      	ldr	r3, [r6, #0]
 80107a8:	461c      	mov	r4, r3
 80107aa:	bb34      	cbnz	r4, 80107fa <_malloc_r+0x82>
 80107ac:	4629      	mov	r1, r5
 80107ae:	4638      	mov	r0, r7
 80107b0:	f7ff ffc2 	bl	8010738 <sbrk_aligned>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	4604      	mov	r4, r0
 80107b8:	d14d      	bne.n	8010856 <_malloc_r+0xde>
 80107ba:	6834      	ldr	r4, [r6, #0]
 80107bc:	4626      	mov	r6, r4
 80107be:	2e00      	cmp	r6, #0
 80107c0:	d140      	bne.n	8010844 <_malloc_r+0xcc>
 80107c2:	6823      	ldr	r3, [r4, #0]
 80107c4:	4631      	mov	r1, r6
 80107c6:	4638      	mov	r0, r7
 80107c8:	eb04 0803 	add.w	r8, r4, r3
 80107cc:	f000 fafe 	bl	8010dcc <_sbrk_r>
 80107d0:	4580      	cmp	r8, r0
 80107d2:	d13a      	bne.n	801084a <_malloc_r+0xd2>
 80107d4:	6821      	ldr	r1, [r4, #0]
 80107d6:	3503      	adds	r5, #3
 80107d8:	1a6d      	subs	r5, r5, r1
 80107da:	f025 0503 	bic.w	r5, r5, #3
 80107de:	3508      	adds	r5, #8
 80107e0:	2d0c      	cmp	r5, #12
 80107e2:	bf38      	it	cc
 80107e4:	250c      	movcc	r5, #12
 80107e6:	4629      	mov	r1, r5
 80107e8:	4638      	mov	r0, r7
 80107ea:	f7ff ffa5 	bl	8010738 <sbrk_aligned>
 80107ee:	3001      	adds	r0, #1
 80107f0:	d02b      	beq.n	801084a <_malloc_r+0xd2>
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	442b      	add	r3, r5
 80107f6:	6023      	str	r3, [r4, #0]
 80107f8:	e00e      	b.n	8010818 <_malloc_r+0xa0>
 80107fa:	6822      	ldr	r2, [r4, #0]
 80107fc:	1b52      	subs	r2, r2, r5
 80107fe:	d41e      	bmi.n	801083e <_malloc_r+0xc6>
 8010800:	2a0b      	cmp	r2, #11
 8010802:	d916      	bls.n	8010832 <_malloc_r+0xba>
 8010804:	1961      	adds	r1, r4, r5
 8010806:	42a3      	cmp	r3, r4
 8010808:	6025      	str	r5, [r4, #0]
 801080a:	bf18      	it	ne
 801080c:	6059      	strne	r1, [r3, #4]
 801080e:	6863      	ldr	r3, [r4, #4]
 8010810:	bf08      	it	eq
 8010812:	6031      	streq	r1, [r6, #0]
 8010814:	5162      	str	r2, [r4, r5]
 8010816:	604b      	str	r3, [r1, #4]
 8010818:	4638      	mov	r0, r7
 801081a:	f104 060b 	add.w	r6, r4, #11
 801081e:	f000 fd65 	bl	80112ec <__malloc_unlock>
 8010822:	f026 0607 	bic.w	r6, r6, #7
 8010826:	1d23      	adds	r3, r4, #4
 8010828:	1af2      	subs	r2, r6, r3
 801082a:	d0b6      	beq.n	801079a <_malloc_r+0x22>
 801082c:	1b9b      	subs	r3, r3, r6
 801082e:	50a3      	str	r3, [r4, r2]
 8010830:	e7b3      	b.n	801079a <_malloc_r+0x22>
 8010832:	6862      	ldr	r2, [r4, #4]
 8010834:	42a3      	cmp	r3, r4
 8010836:	bf0c      	ite	eq
 8010838:	6032      	streq	r2, [r6, #0]
 801083a:	605a      	strne	r2, [r3, #4]
 801083c:	e7ec      	b.n	8010818 <_malloc_r+0xa0>
 801083e:	4623      	mov	r3, r4
 8010840:	6864      	ldr	r4, [r4, #4]
 8010842:	e7b2      	b.n	80107aa <_malloc_r+0x32>
 8010844:	4634      	mov	r4, r6
 8010846:	6876      	ldr	r6, [r6, #4]
 8010848:	e7b9      	b.n	80107be <_malloc_r+0x46>
 801084a:	230c      	movs	r3, #12
 801084c:	603b      	str	r3, [r7, #0]
 801084e:	4638      	mov	r0, r7
 8010850:	f000 fd4c 	bl	80112ec <__malloc_unlock>
 8010854:	e7a1      	b.n	801079a <_malloc_r+0x22>
 8010856:	6025      	str	r5, [r4, #0]
 8010858:	e7de      	b.n	8010818 <_malloc_r+0xa0>
 801085a:	bf00      	nop
 801085c:	2000d078 	.word	0x2000d078

08010860 <__ssputs_r>:
 8010860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010864:	688e      	ldr	r6, [r1, #8]
 8010866:	429e      	cmp	r6, r3
 8010868:	4682      	mov	sl, r0
 801086a:	460c      	mov	r4, r1
 801086c:	4690      	mov	r8, r2
 801086e:	461f      	mov	r7, r3
 8010870:	d838      	bhi.n	80108e4 <__ssputs_r+0x84>
 8010872:	898a      	ldrh	r2, [r1, #12]
 8010874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010878:	d032      	beq.n	80108e0 <__ssputs_r+0x80>
 801087a:	6825      	ldr	r5, [r4, #0]
 801087c:	6909      	ldr	r1, [r1, #16]
 801087e:	eba5 0901 	sub.w	r9, r5, r1
 8010882:	6965      	ldr	r5, [r4, #20]
 8010884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801088c:	3301      	adds	r3, #1
 801088e:	444b      	add	r3, r9
 8010890:	106d      	asrs	r5, r5, #1
 8010892:	429d      	cmp	r5, r3
 8010894:	bf38      	it	cc
 8010896:	461d      	movcc	r5, r3
 8010898:	0553      	lsls	r3, r2, #21
 801089a:	d531      	bpl.n	8010900 <__ssputs_r+0xa0>
 801089c:	4629      	mov	r1, r5
 801089e:	f7ff ff6b 	bl	8010778 <_malloc_r>
 80108a2:	4606      	mov	r6, r0
 80108a4:	b950      	cbnz	r0, 80108bc <__ssputs_r+0x5c>
 80108a6:	230c      	movs	r3, #12
 80108a8:	f8ca 3000 	str.w	r3, [sl]
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108b2:	81a3      	strh	r3, [r4, #12]
 80108b4:	f04f 30ff 	mov.w	r0, #4294967295
 80108b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108bc:	6921      	ldr	r1, [r4, #16]
 80108be:	464a      	mov	r2, r9
 80108c0:	f7fd fe6e 	bl	800e5a0 <memcpy>
 80108c4:	89a3      	ldrh	r3, [r4, #12]
 80108c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108ce:	81a3      	strh	r3, [r4, #12]
 80108d0:	6126      	str	r6, [r4, #16]
 80108d2:	6165      	str	r5, [r4, #20]
 80108d4:	444e      	add	r6, r9
 80108d6:	eba5 0509 	sub.w	r5, r5, r9
 80108da:	6026      	str	r6, [r4, #0]
 80108dc:	60a5      	str	r5, [r4, #8]
 80108de:	463e      	mov	r6, r7
 80108e0:	42be      	cmp	r6, r7
 80108e2:	d900      	bls.n	80108e6 <__ssputs_r+0x86>
 80108e4:	463e      	mov	r6, r7
 80108e6:	6820      	ldr	r0, [r4, #0]
 80108e8:	4632      	mov	r2, r6
 80108ea:	4641      	mov	r1, r8
 80108ec:	f7fd fe66 	bl	800e5bc <memmove>
 80108f0:	68a3      	ldr	r3, [r4, #8]
 80108f2:	1b9b      	subs	r3, r3, r6
 80108f4:	60a3      	str	r3, [r4, #8]
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	4433      	add	r3, r6
 80108fa:	6023      	str	r3, [r4, #0]
 80108fc:	2000      	movs	r0, #0
 80108fe:	e7db      	b.n	80108b8 <__ssputs_r+0x58>
 8010900:	462a      	mov	r2, r5
 8010902:	f000 fcf9 	bl	80112f8 <_realloc_r>
 8010906:	4606      	mov	r6, r0
 8010908:	2800      	cmp	r0, #0
 801090a:	d1e1      	bne.n	80108d0 <__ssputs_r+0x70>
 801090c:	6921      	ldr	r1, [r4, #16]
 801090e:	4650      	mov	r0, sl
 8010910:	f7ff fec6 	bl	80106a0 <_free_r>
 8010914:	e7c7      	b.n	80108a6 <__ssputs_r+0x46>
	...

08010918 <_svfiprintf_r>:
 8010918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091c:	4698      	mov	r8, r3
 801091e:	898b      	ldrh	r3, [r1, #12]
 8010920:	061b      	lsls	r3, r3, #24
 8010922:	b09d      	sub	sp, #116	; 0x74
 8010924:	4607      	mov	r7, r0
 8010926:	460d      	mov	r5, r1
 8010928:	4614      	mov	r4, r2
 801092a:	d50e      	bpl.n	801094a <_svfiprintf_r+0x32>
 801092c:	690b      	ldr	r3, [r1, #16]
 801092e:	b963      	cbnz	r3, 801094a <_svfiprintf_r+0x32>
 8010930:	2140      	movs	r1, #64	; 0x40
 8010932:	f7ff ff21 	bl	8010778 <_malloc_r>
 8010936:	6028      	str	r0, [r5, #0]
 8010938:	6128      	str	r0, [r5, #16]
 801093a:	b920      	cbnz	r0, 8010946 <_svfiprintf_r+0x2e>
 801093c:	230c      	movs	r3, #12
 801093e:	603b      	str	r3, [r7, #0]
 8010940:	f04f 30ff 	mov.w	r0, #4294967295
 8010944:	e0d1      	b.n	8010aea <_svfiprintf_r+0x1d2>
 8010946:	2340      	movs	r3, #64	; 0x40
 8010948:	616b      	str	r3, [r5, #20]
 801094a:	2300      	movs	r3, #0
 801094c:	9309      	str	r3, [sp, #36]	; 0x24
 801094e:	2320      	movs	r3, #32
 8010950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010954:	f8cd 800c 	str.w	r8, [sp, #12]
 8010958:	2330      	movs	r3, #48	; 0x30
 801095a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010b04 <_svfiprintf_r+0x1ec>
 801095e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010962:	f04f 0901 	mov.w	r9, #1
 8010966:	4623      	mov	r3, r4
 8010968:	469a      	mov	sl, r3
 801096a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801096e:	b10a      	cbz	r2, 8010974 <_svfiprintf_r+0x5c>
 8010970:	2a25      	cmp	r2, #37	; 0x25
 8010972:	d1f9      	bne.n	8010968 <_svfiprintf_r+0x50>
 8010974:	ebba 0b04 	subs.w	fp, sl, r4
 8010978:	d00b      	beq.n	8010992 <_svfiprintf_r+0x7a>
 801097a:	465b      	mov	r3, fp
 801097c:	4622      	mov	r2, r4
 801097e:	4629      	mov	r1, r5
 8010980:	4638      	mov	r0, r7
 8010982:	f7ff ff6d 	bl	8010860 <__ssputs_r>
 8010986:	3001      	adds	r0, #1
 8010988:	f000 80aa 	beq.w	8010ae0 <_svfiprintf_r+0x1c8>
 801098c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801098e:	445a      	add	r2, fp
 8010990:	9209      	str	r2, [sp, #36]	; 0x24
 8010992:	f89a 3000 	ldrb.w	r3, [sl]
 8010996:	2b00      	cmp	r3, #0
 8010998:	f000 80a2 	beq.w	8010ae0 <_svfiprintf_r+0x1c8>
 801099c:	2300      	movs	r3, #0
 801099e:	f04f 32ff 	mov.w	r2, #4294967295
 80109a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109a6:	f10a 0a01 	add.w	sl, sl, #1
 80109aa:	9304      	str	r3, [sp, #16]
 80109ac:	9307      	str	r3, [sp, #28]
 80109ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109b2:	931a      	str	r3, [sp, #104]	; 0x68
 80109b4:	4654      	mov	r4, sl
 80109b6:	2205      	movs	r2, #5
 80109b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109bc:	4851      	ldr	r0, [pc, #324]	; (8010b04 <_svfiprintf_r+0x1ec>)
 80109be:	f7ef fc3f 	bl	8000240 <memchr>
 80109c2:	9a04      	ldr	r2, [sp, #16]
 80109c4:	b9d8      	cbnz	r0, 80109fe <_svfiprintf_r+0xe6>
 80109c6:	06d0      	lsls	r0, r2, #27
 80109c8:	bf44      	itt	mi
 80109ca:	2320      	movmi	r3, #32
 80109cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109d0:	0711      	lsls	r1, r2, #28
 80109d2:	bf44      	itt	mi
 80109d4:	232b      	movmi	r3, #43	; 0x2b
 80109d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109da:	f89a 3000 	ldrb.w	r3, [sl]
 80109de:	2b2a      	cmp	r3, #42	; 0x2a
 80109e0:	d015      	beq.n	8010a0e <_svfiprintf_r+0xf6>
 80109e2:	9a07      	ldr	r2, [sp, #28]
 80109e4:	4654      	mov	r4, sl
 80109e6:	2000      	movs	r0, #0
 80109e8:	f04f 0c0a 	mov.w	ip, #10
 80109ec:	4621      	mov	r1, r4
 80109ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109f2:	3b30      	subs	r3, #48	; 0x30
 80109f4:	2b09      	cmp	r3, #9
 80109f6:	d94e      	bls.n	8010a96 <_svfiprintf_r+0x17e>
 80109f8:	b1b0      	cbz	r0, 8010a28 <_svfiprintf_r+0x110>
 80109fa:	9207      	str	r2, [sp, #28]
 80109fc:	e014      	b.n	8010a28 <_svfiprintf_r+0x110>
 80109fe:	eba0 0308 	sub.w	r3, r0, r8
 8010a02:	fa09 f303 	lsl.w	r3, r9, r3
 8010a06:	4313      	orrs	r3, r2
 8010a08:	9304      	str	r3, [sp, #16]
 8010a0a:	46a2      	mov	sl, r4
 8010a0c:	e7d2      	b.n	80109b4 <_svfiprintf_r+0x9c>
 8010a0e:	9b03      	ldr	r3, [sp, #12]
 8010a10:	1d19      	adds	r1, r3, #4
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	9103      	str	r1, [sp, #12]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	bfbb      	ittet	lt
 8010a1a:	425b      	neglt	r3, r3
 8010a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a20:	9307      	strge	r3, [sp, #28]
 8010a22:	9307      	strlt	r3, [sp, #28]
 8010a24:	bfb8      	it	lt
 8010a26:	9204      	strlt	r2, [sp, #16]
 8010a28:	7823      	ldrb	r3, [r4, #0]
 8010a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a2c:	d10c      	bne.n	8010a48 <_svfiprintf_r+0x130>
 8010a2e:	7863      	ldrb	r3, [r4, #1]
 8010a30:	2b2a      	cmp	r3, #42	; 0x2a
 8010a32:	d135      	bne.n	8010aa0 <_svfiprintf_r+0x188>
 8010a34:	9b03      	ldr	r3, [sp, #12]
 8010a36:	1d1a      	adds	r2, r3, #4
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	9203      	str	r2, [sp, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	bfb8      	it	lt
 8010a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a44:	3402      	adds	r4, #2
 8010a46:	9305      	str	r3, [sp, #20]
 8010a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b14 <_svfiprintf_r+0x1fc>
 8010a4c:	7821      	ldrb	r1, [r4, #0]
 8010a4e:	2203      	movs	r2, #3
 8010a50:	4650      	mov	r0, sl
 8010a52:	f7ef fbf5 	bl	8000240 <memchr>
 8010a56:	b140      	cbz	r0, 8010a6a <_svfiprintf_r+0x152>
 8010a58:	2340      	movs	r3, #64	; 0x40
 8010a5a:	eba0 000a 	sub.w	r0, r0, sl
 8010a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8010a62:	9b04      	ldr	r3, [sp, #16]
 8010a64:	4303      	orrs	r3, r0
 8010a66:	3401      	adds	r4, #1
 8010a68:	9304      	str	r3, [sp, #16]
 8010a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a6e:	4826      	ldr	r0, [pc, #152]	; (8010b08 <_svfiprintf_r+0x1f0>)
 8010a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a74:	2206      	movs	r2, #6
 8010a76:	f7ef fbe3 	bl	8000240 <memchr>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d038      	beq.n	8010af0 <_svfiprintf_r+0x1d8>
 8010a7e:	4b23      	ldr	r3, [pc, #140]	; (8010b0c <_svfiprintf_r+0x1f4>)
 8010a80:	bb1b      	cbnz	r3, 8010aca <_svfiprintf_r+0x1b2>
 8010a82:	9b03      	ldr	r3, [sp, #12]
 8010a84:	3307      	adds	r3, #7
 8010a86:	f023 0307 	bic.w	r3, r3, #7
 8010a8a:	3308      	adds	r3, #8
 8010a8c:	9303      	str	r3, [sp, #12]
 8010a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a90:	4433      	add	r3, r6
 8010a92:	9309      	str	r3, [sp, #36]	; 0x24
 8010a94:	e767      	b.n	8010966 <_svfiprintf_r+0x4e>
 8010a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	e7a5      	b.n	80109ec <_svfiprintf_r+0xd4>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	3401      	adds	r4, #1
 8010aa4:	9305      	str	r3, [sp, #20]
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	f04f 0c0a 	mov.w	ip, #10
 8010aac:	4620      	mov	r0, r4
 8010aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ab2:	3a30      	subs	r2, #48	; 0x30
 8010ab4:	2a09      	cmp	r2, #9
 8010ab6:	d903      	bls.n	8010ac0 <_svfiprintf_r+0x1a8>
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d0c5      	beq.n	8010a48 <_svfiprintf_r+0x130>
 8010abc:	9105      	str	r1, [sp, #20]
 8010abe:	e7c3      	b.n	8010a48 <_svfiprintf_r+0x130>
 8010ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	e7f0      	b.n	8010aac <_svfiprintf_r+0x194>
 8010aca:	ab03      	add	r3, sp, #12
 8010acc:	9300      	str	r3, [sp, #0]
 8010ace:	462a      	mov	r2, r5
 8010ad0:	4b0f      	ldr	r3, [pc, #60]	; (8010b10 <_svfiprintf_r+0x1f8>)
 8010ad2:	a904      	add	r1, sp, #16
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	f7fd fe33 	bl	800e740 <_printf_float>
 8010ada:	1c42      	adds	r2, r0, #1
 8010adc:	4606      	mov	r6, r0
 8010ade:	d1d6      	bne.n	8010a8e <_svfiprintf_r+0x176>
 8010ae0:	89ab      	ldrh	r3, [r5, #12]
 8010ae2:	065b      	lsls	r3, r3, #25
 8010ae4:	f53f af2c 	bmi.w	8010940 <_svfiprintf_r+0x28>
 8010ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010aea:	b01d      	add	sp, #116	; 0x74
 8010aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af0:	ab03      	add	r3, sp, #12
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	462a      	mov	r2, r5
 8010af6:	4b06      	ldr	r3, [pc, #24]	; (8010b10 <_svfiprintf_r+0x1f8>)
 8010af8:	a904      	add	r1, sp, #16
 8010afa:	4638      	mov	r0, r7
 8010afc:	f7fe f8c4 	bl	800ec88 <_printf_i>
 8010b00:	e7eb      	b.n	8010ada <_svfiprintf_r+0x1c2>
 8010b02:	bf00      	nop
 8010b04:	0801dfd4 	.word	0x0801dfd4
 8010b08:	0801dfde 	.word	0x0801dfde
 8010b0c:	0800e741 	.word	0x0800e741
 8010b10:	08010861 	.word	0x08010861
 8010b14:	0801dfda 	.word	0x0801dfda

08010b18 <__sfputc_r>:
 8010b18:	6893      	ldr	r3, [r2, #8]
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	b410      	push	{r4}
 8010b20:	6093      	str	r3, [r2, #8]
 8010b22:	da08      	bge.n	8010b36 <__sfputc_r+0x1e>
 8010b24:	6994      	ldr	r4, [r2, #24]
 8010b26:	42a3      	cmp	r3, r4
 8010b28:	db01      	blt.n	8010b2e <__sfputc_r+0x16>
 8010b2a:	290a      	cmp	r1, #10
 8010b2c:	d103      	bne.n	8010b36 <__sfputc_r+0x1e>
 8010b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b32:	f000 b99f 	b.w	8010e74 <__swbuf_r>
 8010b36:	6813      	ldr	r3, [r2, #0]
 8010b38:	1c58      	adds	r0, r3, #1
 8010b3a:	6010      	str	r0, [r2, #0]
 8010b3c:	7019      	strb	r1, [r3, #0]
 8010b3e:	4608      	mov	r0, r1
 8010b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b44:	4770      	bx	lr

08010b46 <__sfputs_r>:
 8010b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b48:	4606      	mov	r6, r0
 8010b4a:	460f      	mov	r7, r1
 8010b4c:	4614      	mov	r4, r2
 8010b4e:	18d5      	adds	r5, r2, r3
 8010b50:	42ac      	cmp	r4, r5
 8010b52:	d101      	bne.n	8010b58 <__sfputs_r+0x12>
 8010b54:	2000      	movs	r0, #0
 8010b56:	e007      	b.n	8010b68 <__sfputs_r+0x22>
 8010b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b5c:	463a      	mov	r2, r7
 8010b5e:	4630      	mov	r0, r6
 8010b60:	f7ff ffda 	bl	8010b18 <__sfputc_r>
 8010b64:	1c43      	adds	r3, r0, #1
 8010b66:	d1f3      	bne.n	8010b50 <__sfputs_r+0xa>
 8010b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b6c <_vfiprintf_r>:
 8010b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b70:	460d      	mov	r5, r1
 8010b72:	b09d      	sub	sp, #116	; 0x74
 8010b74:	4614      	mov	r4, r2
 8010b76:	4698      	mov	r8, r3
 8010b78:	4606      	mov	r6, r0
 8010b7a:	b118      	cbz	r0, 8010b84 <_vfiprintf_r+0x18>
 8010b7c:	6983      	ldr	r3, [r0, #24]
 8010b7e:	b90b      	cbnz	r3, 8010b84 <_vfiprintf_r+0x18>
 8010b80:	f7ff f934 	bl	800fdec <__sinit>
 8010b84:	4b89      	ldr	r3, [pc, #548]	; (8010dac <_vfiprintf_r+0x240>)
 8010b86:	429d      	cmp	r5, r3
 8010b88:	d11b      	bne.n	8010bc2 <_vfiprintf_r+0x56>
 8010b8a:	6875      	ldr	r5, [r6, #4]
 8010b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b8e:	07d9      	lsls	r1, r3, #31
 8010b90:	d405      	bmi.n	8010b9e <_vfiprintf_r+0x32>
 8010b92:	89ab      	ldrh	r3, [r5, #12]
 8010b94:	059a      	lsls	r2, r3, #22
 8010b96:	d402      	bmi.n	8010b9e <_vfiprintf_r+0x32>
 8010b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b9a:	f7ff f9dc 	bl	800ff56 <__retarget_lock_acquire_recursive>
 8010b9e:	89ab      	ldrh	r3, [r5, #12]
 8010ba0:	071b      	lsls	r3, r3, #28
 8010ba2:	d501      	bpl.n	8010ba8 <_vfiprintf_r+0x3c>
 8010ba4:	692b      	ldr	r3, [r5, #16]
 8010ba6:	b9eb      	cbnz	r3, 8010be4 <_vfiprintf_r+0x78>
 8010ba8:	4629      	mov	r1, r5
 8010baa:	4630      	mov	r0, r6
 8010bac:	f000 f9c6 	bl	8010f3c <__swsetup_r>
 8010bb0:	b1c0      	cbz	r0, 8010be4 <_vfiprintf_r+0x78>
 8010bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bb4:	07dc      	lsls	r4, r3, #31
 8010bb6:	d50e      	bpl.n	8010bd6 <_vfiprintf_r+0x6a>
 8010bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bbc:	b01d      	add	sp, #116	; 0x74
 8010bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc2:	4b7b      	ldr	r3, [pc, #492]	; (8010db0 <_vfiprintf_r+0x244>)
 8010bc4:	429d      	cmp	r5, r3
 8010bc6:	d101      	bne.n	8010bcc <_vfiprintf_r+0x60>
 8010bc8:	68b5      	ldr	r5, [r6, #8]
 8010bca:	e7df      	b.n	8010b8c <_vfiprintf_r+0x20>
 8010bcc:	4b79      	ldr	r3, [pc, #484]	; (8010db4 <_vfiprintf_r+0x248>)
 8010bce:	429d      	cmp	r5, r3
 8010bd0:	bf08      	it	eq
 8010bd2:	68f5      	ldreq	r5, [r6, #12]
 8010bd4:	e7da      	b.n	8010b8c <_vfiprintf_r+0x20>
 8010bd6:	89ab      	ldrh	r3, [r5, #12]
 8010bd8:	0598      	lsls	r0, r3, #22
 8010bda:	d4ed      	bmi.n	8010bb8 <_vfiprintf_r+0x4c>
 8010bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bde:	f7ff f9bb 	bl	800ff58 <__retarget_lock_release_recursive>
 8010be2:	e7e9      	b.n	8010bb8 <_vfiprintf_r+0x4c>
 8010be4:	2300      	movs	r3, #0
 8010be6:	9309      	str	r3, [sp, #36]	; 0x24
 8010be8:	2320      	movs	r3, #32
 8010bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bf2:	2330      	movs	r3, #48	; 0x30
 8010bf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010db8 <_vfiprintf_r+0x24c>
 8010bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bfc:	f04f 0901 	mov.w	r9, #1
 8010c00:	4623      	mov	r3, r4
 8010c02:	469a      	mov	sl, r3
 8010c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c08:	b10a      	cbz	r2, 8010c0e <_vfiprintf_r+0xa2>
 8010c0a:	2a25      	cmp	r2, #37	; 0x25
 8010c0c:	d1f9      	bne.n	8010c02 <_vfiprintf_r+0x96>
 8010c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8010c12:	d00b      	beq.n	8010c2c <_vfiprintf_r+0xc0>
 8010c14:	465b      	mov	r3, fp
 8010c16:	4622      	mov	r2, r4
 8010c18:	4629      	mov	r1, r5
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	f7ff ff93 	bl	8010b46 <__sfputs_r>
 8010c20:	3001      	adds	r0, #1
 8010c22:	f000 80aa 	beq.w	8010d7a <_vfiprintf_r+0x20e>
 8010c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c28:	445a      	add	r2, fp
 8010c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8010c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f000 80a2 	beq.w	8010d7a <_vfiprintf_r+0x20e>
 8010c36:	2300      	movs	r3, #0
 8010c38:	f04f 32ff 	mov.w	r2, #4294967295
 8010c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c40:	f10a 0a01 	add.w	sl, sl, #1
 8010c44:	9304      	str	r3, [sp, #16]
 8010c46:	9307      	str	r3, [sp, #28]
 8010c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8010c4e:	4654      	mov	r4, sl
 8010c50:	2205      	movs	r2, #5
 8010c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c56:	4858      	ldr	r0, [pc, #352]	; (8010db8 <_vfiprintf_r+0x24c>)
 8010c58:	f7ef faf2 	bl	8000240 <memchr>
 8010c5c:	9a04      	ldr	r2, [sp, #16]
 8010c5e:	b9d8      	cbnz	r0, 8010c98 <_vfiprintf_r+0x12c>
 8010c60:	06d1      	lsls	r1, r2, #27
 8010c62:	bf44      	itt	mi
 8010c64:	2320      	movmi	r3, #32
 8010c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c6a:	0713      	lsls	r3, r2, #28
 8010c6c:	bf44      	itt	mi
 8010c6e:	232b      	movmi	r3, #43	; 0x2b
 8010c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c74:	f89a 3000 	ldrb.w	r3, [sl]
 8010c78:	2b2a      	cmp	r3, #42	; 0x2a
 8010c7a:	d015      	beq.n	8010ca8 <_vfiprintf_r+0x13c>
 8010c7c:	9a07      	ldr	r2, [sp, #28]
 8010c7e:	4654      	mov	r4, sl
 8010c80:	2000      	movs	r0, #0
 8010c82:	f04f 0c0a 	mov.w	ip, #10
 8010c86:	4621      	mov	r1, r4
 8010c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c8c:	3b30      	subs	r3, #48	; 0x30
 8010c8e:	2b09      	cmp	r3, #9
 8010c90:	d94e      	bls.n	8010d30 <_vfiprintf_r+0x1c4>
 8010c92:	b1b0      	cbz	r0, 8010cc2 <_vfiprintf_r+0x156>
 8010c94:	9207      	str	r2, [sp, #28]
 8010c96:	e014      	b.n	8010cc2 <_vfiprintf_r+0x156>
 8010c98:	eba0 0308 	sub.w	r3, r0, r8
 8010c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8010ca0:	4313      	orrs	r3, r2
 8010ca2:	9304      	str	r3, [sp, #16]
 8010ca4:	46a2      	mov	sl, r4
 8010ca6:	e7d2      	b.n	8010c4e <_vfiprintf_r+0xe2>
 8010ca8:	9b03      	ldr	r3, [sp, #12]
 8010caa:	1d19      	adds	r1, r3, #4
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	9103      	str	r1, [sp, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	bfbb      	ittet	lt
 8010cb4:	425b      	neglt	r3, r3
 8010cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8010cba:	9307      	strge	r3, [sp, #28]
 8010cbc:	9307      	strlt	r3, [sp, #28]
 8010cbe:	bfb8      	it	lt
 8010cc0:	9204      	strlt	r2, [sp, #16]
 8010cc2:	7823      	ldrb	r3, [r4, #0]
 8010cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8010cc6:	d10c      	bne.n	8010ce2 <_vfiprintf_r+0x176>
 8010cc8:	7863      	ldrb	r3, [r4, #1]
 8010cca:	2b2a      	cmp	r3, #42	; 0x2a
 8010ccc:	d135      	bne.n	8010d3a <_vfiprintf_r+0x1ce>
 8010cce:	9b03      	ldr	r3, [sp, #12]
 8010cd0:	1d1a      	adds	r2, r3, #4
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	9203      	str	r2, [sp, #12]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	bfb8      	it	lt
 8010cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8010cde:	3402      	adds	r4, #2
 8010ce0:	9305      	str	r3, [sp, #20]
 8010ce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010dc8 <_vfiprintf_r+0x25c>
 8010ce6:	7821      	ldrb	r1, [r4, #0]
 8010ce8:	2203      	movs	r2, #3
 8010cea:	4650      	mov	r0, sl
 8010cec:	f7ef faa8 	bl	8000240 <memchr>
 8010cf0:	b140      	cbz	r0, 8010d04 <_vfiprintf_r+0x198>
 8010cf2:	2340      	movs	r3, #64	; 0x40
 8010cf4:	eba0 000a 	sub.w	r0, r0, sl
 8010cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8010cfc:	9b04      	ldr	r3, [sp, #16]
 8010cfe:	4303      	orrs	r3, r0
 8010d00:	3401      	adds	r4, #1
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d08:	482c      	ldr	r0, [pc, #176]	; (8010dbc <_vfiprintf_r+0x250>)
 8010d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d0e:	2206      	movs	r2, #6
 8010d10:	f7ef fa96 	bl	8000240 <memchr>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	d03f      	beq.n	8010d98 <_vfiprintf_r+0x22c>
 8010d18:	4b29      	ldr	r3, [pc, #164]	; (8010dc0 <_vfiprintf_r+0x254>)
 8010d1a:	bb1b      	cbnz	r3, 8010d64 <_vfiprintf_r+0x1f8>
 8010d1c:	9b03      	ldr	r3, [sp, #12]
 8010d1e:	3307      	adds	r3, #7
 8010d20:	f023 0307 	bic.w	r3, r3, #7
 8010d24:	3308      	adds	r3, #8
 8010d26:	9303      	str	r3, [sp, #12]
 8010d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d2a:	443b      	add	r3, r7
 8010d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d2e:	e767      	b.n	8010c00 <_vfiprintf_r+0x94>
 8010d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d34:	460c      	mov	r4, r1
 8010d36:	2001      	movs	r0, #1
 8010d38:	e7a5      	b.n	8010c86 <_vfiprintf_r+0x11a>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	3401      	adds	r4, #1
 8010d3e:	9305      	str	r3, [sp, #20]
 8010d40:	4619      	mov	r1, r3
 8010d42:	f04f 0c0a 	mov.w	ip, #10
 8010d46:	4620      	mov	r0, r4
 8010d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d4c:	3a30      	subs	r2, #48	; 0x30
 8010d4e:	2a09      	cmp	r2, #9
 8010d50:	d903      	bls.n	8010d5a <_vfiprintf_r+0x1ee>
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d0c5      	beq.n	8010ce2 <_vfiprintf_r+0x176>
 8010d56:	9105      	str	r1, [sp, #20]
 8010d58:	e7c3      	b.n	8010ce2 <_vfiprintf_r+0x176>
 8010d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d5e:	4604      	mov	r4, r0
 8010d60:	2301      	movs	r3, #1
 8010d62:	e7f0      	b.n	8010d46 <_vfiprintf_r+0x1da>
 8010d64:	ab03      	add	r3, sp, #12
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	462a      	mov	r2, r5
 8010d6a:	4b16      	ldr	r3, [pc, #88]	; (8010dc4 <_vfiprintf_r+0x258>)
 8010d6c:	a904      	add	r1, sp, #16
 8010d6e:	4630      	mov	r0, r6
 8010d70:	f7fd fce6 	bl	800e740 <_printf_float>
 8010d74:	4607      	mov	r7, r0
 8010d76:	1c78      	adds	r0, r7, #1
 8010d78:	d1d6      	bne.n	8010d28 <_vfiprintf_r+0x1bc>
 8010d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d7c:	07d9      	lsls	r1, r3, #31
 8010d7e:	d405      	bmi.n	8010d8c <_vfiprintf_r+0x220>
 8010d80:	89ab      	ldrh	r3, [r5, #12]
 8010d82:	059a      	lsls	r2, r3, #22
 8010d84:	d402      	bmi.n	8010d8c <_vfiprintf_r+0x220>
 8010d86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d88:	f7ff f8e6 	bl	800ff58 <__retarget_lock_release_recursive>
 8010d8c:	89ab      	ldrh	r3, [r5, #12]
 8010d8e:	065b      	lsls	r3, r3, #25
 8010d90:	f53f af12 	bmi.w	8010bb8 <_vfiprintf_r+0x4c>
 8010d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d96:	e711      	b.n	8010bbc <_vfiprintf_r+0x50>
 8010d98:	ab03      	add	r3, sp, #12
 8010d9a:	9300      	str	r3, [sp, #0]
 8010d9c:	462a      	mov	r2, r5
 8010d9e:	4b09      	ldr	r3, [pc, #36]	; (8010dc4 <_vfiprintf_r+0x258>)
 8010da0:	a904      	add	r1, sp, #16
 8010da2:	4630      	mov	r0, r6
 8010da4:	f7fd ff70 	bl	800ec88 <_printf_i>
 8010da8:	e7e4      	b.n	8010d74 <_vfiprintf_r+0x208>
 8010daa:	bf00      	nop
 8010dac:	0801de38 	.word	0x0801de38
 8010db0:	0801de58 	.word	0x0801de58
 8010db4:	0801de18 	.word	0x0801de18
 8010db8:	0801dfd4 	.word	0x0801dfd4
 8010dbc:	0801dfde 	.word	0x0801dfde
 8010dc0:	0800e741 	.word	0x0800e741
 8010dc4:	08010b47 	.word	0x08010b47
 8010dc8:	0801dfda 	.word	0x0801dfda

08010dcc <_sbrk_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4d06      	ldr	r5, [pc, #24]	; (8010de8 <_sbrk_r+0x1c>)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	602b      	str	r3, [r5, #0]
 8010dd8:	f7f0 f912 	bl	8001000 <_sbrk>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_sbrk_r+0x1a>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_sbrk_r+0x1a>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	2000d070 	.word	0x2000d070

08010dec <__sread>:
 8010dec:	b510      	push	{r4, lr}
 8010dee:	460c      	mov	r4, r1
 8010df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df4:	f000 fab0 	bl	8011358 <_read_r>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	bfab      	itete	ge
 8010dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8010e00:	181b      	addge	r3, r3, r0
 8010e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e06:	bfac      	ite	ge
 8010e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e0a:	81a3      	strhlt	r3, [r4, #12]
 8010e0c:	bd10      	pop	{r4, pc}

08010e0e <__swrite>:
 8010e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e12:	461f      	mov	r7, r3
 8010e14:	898b      	ldrh	r3, [r1, #12]
 8010e16:	05db      	lsls	r3, r3, #23
 8010e18:	4605      	mov	r5, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	4616      	mov	r6, r2
 8010e1e:	d505      	bpl.n	8010e2c <__swrite+0x1e>
 8010e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e24:	2302      	movs	r3, #2
 8010e26:	2200      	movs	r2, #0
 8010e28:	f000 f9d0 	bl	80111cc <_lseek_r>
 8010e2c:	89a3      	ldrh	r3, [r4, #12]
 8010e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e36:	81a3      	strh	r3, [r4, #12]
 8010e38:	4632      	mov	r2, r6
 8010e3a:	463b      	mov	r3, r7
 8010e3c:	4628      	mov	r0, r5
 8010e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e42:	f000 b869 	b.w	8010f18 <_write_r>

08010e46 <__sseek>:
 8010e46:	b510      	push	{r4, lr}
 8010e48:	460c      	mov	r4, r1
 8010e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e4e:	f000 f9bd 	bl	80111cc <_lseek_r>
 8010e52:	1c43      	adds	r3, r0, #1
 8010e54:	89a3      	ldrh	r3, [r4, #12]
 8010e56:	bf15      	itete	ne
 8010e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e62:	81a3      	strheq	r3, [r4, #12]
 8010e64:	bf18      	it	ne
 8010e66:	81a3      	strhne	r3, [r4, #12]
 8010e68:	bd10      	pop	{r4, pc}

08010e6a <__sclose>:
 8010e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e6e:	f000 b8db 	b.w	8011028 <_close_r>
	...

08010e74 <__swbuf_r>:
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e76:	460e      	mov	r6, r1
 8010e78:	4614      	mov	r4, r2
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	b118      	cbz	r0, 8010e86 <__swbuf_r+0x12>
 8010e7e:	6983      	ldr	r3, [r0, #24]
 8010e80:	b90b      	cbnz	r3, 8010e86 <__swbuf_r+0x12>
 8010e82:	f7fe ffb3 	bl	800fdec <__sinit>
 8010e86:	4b21      	ldr	r3, [pc, #132]	; (8010f0c <__swbuf_r+0x98>)
 8010e88:	429c      	cmp	r4, r3
 8010e8a:	d12b      	bne.n	8010ee4 <__swbuf_r+0x70>
 8010e8c:	686c      	ldr	r4, [r5, #4]
 8010e8e:	69a3      	ldr	r3, [r4, #24]
 8010e90:	60a3      	str	r3, [r4, #8]
 8010e92:	89a3      	ldrh	r3, [r4, #12]
 8010e94:	071a      	lsls	r2, r3, #28
 8010e96:	d52f      	bpl.n	8010ef8 <__swbuf_r+0x84>
 8010e98:	6923      	ldr	r3, [r4, #16]
 8010e9a:	b36b      	cbz	r3, 8010ef8 <__swbuf_r+0x84>
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	6820      	ldr	r0, [r4, #0]
 8010ea0:	1ac0      	subs	r0, r0, r3
 8010ea2:	6963      	ldr	r3, [r4, #20]
 8010ea4:	b2f6      	uxtb	r6, r6
 8010ea6:	4283      	cmp	r3, r0
 8010ea8:	4637      	mov	r7, r6
 8010eaa:	dc04      	bgt.n	8010eb6 <__swbuf_r+0x42>
 8010eac:	4621      	mov	r1, r4
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f000 f950 	bl	8011154 <_fflush_r>
 8010eb4:	bb30      	cbnz	r0, 8010f04 <__swbuf_r+0x90>
 8010eb6:	68a3      	ldr	r3, [r4, #8]
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	60a3      	str	r3, [r4, #8]
 8010ebc:	6823      	ldr	r3, [r4, #0]
 8010ebe:	1c5a      	adds	r2, r3, #1
 8010ec0:	6022      	str	r2, [r4, #0]
 8010ec2:	701e      	strb	r6, [r3, #0]
 8010ec4:	6963      	ldr	r3, [r4, #20]
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	4283      	cmp	r3, r0
 8010eca:	d004      	beq.n	8010ed6 <__swbuf_r+0x62>
 8010ecc:	89a3      	ldrh	r3, [r4, #12]
 8010ece:	07db      	lsls	r3, r3, #31
 8010ed0:	d506      	bpl.n	8010ee0 <__swbuf_r+0x6c>
 8010ed2:	2e0a      	cmp	r6, #10
 8010ed4:	d104      	bne.n	8010ee0 <__swbuf_r+0x6c>
 8010ed6:	4621      	mov	r1, r4
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f000 f93b 	bl	8011154 <_fflush_r>
 8010ede:	b988      	cbnz	r0, 8010f04 <__swbuf_r+0x90>
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ee4:	4b0a      	ldr	r3, [pc, #40]	; (8010f10 <__swbuf_r+0x9c>)
 8010ee6:	429c      	cmp	r4, r3
 8010ee8:	d101      	bne.n	8010eee <__swbuf_r+0x7a>
 8010eea:	68ac      	ldr	r4, [r5, #8]
 8010eec:	e7cf      	b.n	8010e8e <__swbuf_r+0x1a>
 8010eee:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <__swbuf_r+0xa0>)
 8010ef0:	429c      	cmp	r4, r3
 8010ef2:	bf08      	it	eq
 8010ef4:	68ec      	ldreq	r4, [r5, #12]
 8010ef6:	e7ca      	b.n	8010e8e <__swbuf_r+0x1a>
 8010ef8:	4621      	mov	r1, r4
 8010efa:	4628      	mov	r0, r5
 8010efc:	f000 f81e 	bl	8010f3c <__swsetup_r>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	d0cb      	beq.n	8010e9c <__swbuf_r+0x28>
 8010f04:	f04f 37ff 	mov.w	r7, #4294967295
 8010f08:	e7ea      	b.n	8010ee0 <__swbuf_r+0x6c>
 8010f0a:	bf00      	nop
 8010f0c:	0801de38 	.word	0x0801de38
 8010f10:	0801de58 	.word	0x0801de58
 8010f14:	0801de18 	.word	0x0801de18

08010f18 <_write_r>:
 8010f18:	b538      	push	{r3, r4, r5, lr}
 8010f1a:	4d07      	ldr	r5, [pc, #28]	; (8010f38 <_write_r+0x20>)
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	4608      	mov	r0, r1
 8010f20:	4611      	mov	r1, r2
 8010f22:	2200      	movs	r2, #0
 8010f24:	602a      	str	r2, [r5, #0]
 8010f26:	461a      	mov	r2, r3
 8010f28:	f7f0 f89a 	bl	8001060 <_write>
 8010f2c:	1c43      	adds	r3, r0, #1
 8010f2e:	d102      	bne.n	8010f36 <_write_r+0x1e>
 8010f30:	682b      	ldr	r3, [r5, #0]
 8010f32:	b103      	cbz	r3, 8010f36 <_write_r+0x1e>
 8010f34:	6023      	str	r3, [r4, #0]
 8010f36:	bd38      	pop	{r3, r4, r5, pc}
 8010f38:	2000d070 	.word	0x2000d070

08010f3c <__swsetup_r>:
 8010f3c:	4b32      	ldr	r3, [pc, #200]	; (8011008 <__swsetup_r+0xcc>)
 8010f3e:	b570      	push	{r4, r5, r6, lr}
 8010f40:	681d      	ldr	r5, [r3, #0]
 8010f42:	4606      	mov	r6, r0
 8010f44:	460c      	mov	r4, r1
 8010f46:	b125      	cbz	r5, 8010f52 <__swsetup_r+0x16>
 8010f48:	69ab      	ldr	r3, [r5, #24]
 8010f4a:	b913      	cbnz	r3, 8010f52 <__swsetup_r+0x16>
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f7fe ff4d 	bl	800fdec <__sinit>
 8010f52:	4b2e      	ldr	r3, [pc, #184]	; (801100c <__swsetup_r+0xd0>)
 8010f54:	429c      	cmp	r4, r3
 8010f56:	d10f      	bne.n	8010f78 <__swsetup_r+0x3c>
 8010f58:	686c      	ldr	r4, [r5, #4]
 8010f5a:	89a3      	ldrh	r3, [r4, #12]
 8010f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f60:	0719      	lsls	r1, r3, #28
 8010f62:	d42c      	bmi.n	8010fbe <__swsetup_r+0x82>
 8010f64:	06dd      	lsls	r5, r3, #27
 8010f66:	d411      	bmi.n	8010f8c <__swsetup_r+0x50>
 8010f68:	2309      	movs	r3, #9
 8010f6a:	6033      	str	r3, [r6, #0]
 8010f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f70:	81a3      	strh	r3, [r4, #12]
 8010f72:	f04f 30ff 	mov.w	r0, #4294967295
 8010f76:	e03e      	b.n	8010ff6 <__swsetup_r+0xba>
 8010f78:	4b25      	ldr	r3, [pc, #148]	; (8011010 <__swsetup_r+0xd4>)
 8010f7a:	429c      	cmp	r4, r3
 8010f7c:	d101      	bne.n	8010f82 <__swsetup_r+0x46>
 8010f7e:	68ac      	ldr	r4, [r5, #8]
 8010f80:	e7eb      	b.n	8010f5a <__swsetup_r+0x1e>
 8010f82:	4b24      	ldr	r3, [pc, #144]	; (8011014 <__swsetup_r+0xd8>)
 8010f84:	429c      	cmp	r4, r3
 8010f86:	bf08      	it	eq
 8010f88:	68ec      	ldreq	r4, [r5, #12]
 8010f8a:	e7e6      	b.n	8010f5a <__swsetup_r+0x1e>
 8010f8c:	0758      	lsls	r0, r3, #29
 8010f8e:	d512      	bpl.n	8010fb6 <__swsetup_r+0x7a>
 8010f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f92:	b141      	cbz	r1, 8010fa6 <__swsetup_r+0x6a>
 8010f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f98:	4299      	cmp	r1, r3
 8010f9a:	d002      	beq.n	8010fa2 <__swsetup_r+0x66>
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	f7ff fb7f 	bl	80106a0 <_free_r>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8010fa6:	89a3      	ldrh	r3, [r4, #12]
 8010fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fac:	81a3      	strh	r3, [r4, #12]
 8010fae:	2300      	movs	r3, #0
 8010fb0:	6063      	str	r3, [r4, #4]
 8010fb2:	6923      	ldr	r3, [r4, #16]
 8010fb4:	6023      	str	r3, [r4, #0]
 8010fb6:	89a3      	ldrh	r3, [r4, #12]
 8010fb8:	f043 0308 	orr.w	r3, r3, #8
 8010fbc:	81a3      	strh	r3, [r4, #12]
 8010fbe:	6923      	ldr	r3, [r4, #16]
 8010fc0:	b94b      	cbnz	r3, 8010fd6 <__swsetup_r+0x9a>
 8010fc2:	89a3      	ldrh	r3, [r4, #12]
 8010fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fcc:	d003      	beq.n	8010fd6 <__swsetup_r+0x9a>
 8010fce:	4621      	mov	r1, r4
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f000 f933 	bl	801123c <__smakebuf_r>
 8010fd6:	89a0      	ldrh	r0, [r4, #12]
 8010fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fdc:	f010 0301 	ands.w	r3, r0, #1
 8010fe0:	d00a      	beq.n	8010ff8 <__swsetup_r+0xbc>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	60a3      	str	r3, [r4, #8]
 8010fe6:	6963      	ldr	r3, [r4, #20]
 8010fe8:	425b      	negs	r3, r3
 8010fea:	61a3      	str	r3, [r4, #24]
 8010fec:	6923      	ldr	r3, [r4, #16]
 8010fee:	b943      	cbnz	r3, 8011002 <__swsetup_r+0xc6>
 8010ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ff4:	d1ba      	bne.n	8010f6c <__swsetup_r+0x30>
 8010ff6:	bd70      	pop	{r4, r5, r6, pc}
 8010ff8:	0781      	lsls	r1, r0, #30
 8010ffa:	bf58      	it	pl
 8010ffc:	6963      	ldrpl	r3, [r4, #20]
 8010ffe:	60a3      	str	r3, [r4, #8]
 8011000:	e7f4      	b.n	8010fec <__swsetup_r+0xb0>
 8011002:	2000      	movs	r0, #0
 8011004:	e7f7      	b.n	8010ff6 <__swsetup_r+0xba>
 8011006:	bf00      	nop
 8011008:	2000002c 	.word	0x2000002c
 801100c:	0801de38 	.word	0x0801de38
 8011010:	0801de58 	.word	0x0801de58
 8011014:	0801de18 	.word	0x0801de18

08011018 <abort>:
 8011018:	b508      	push	{r3, lr}
 801101a:	2006      	movs	r0, #6
 801101c:	f000 f9d6 	bl	80113cc <raise>
 8011020:	2001      	movs	r0, #1
 8011022:	f7f0 f817 	bl	8001054 <_exit>
	...

08011028 <_close_r>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	4d06      	ldr	r5, [pc, #24]	; (8011044 <_close_r+0x1c>)
 801102c:	2300      	movs	r3, #0
 801102e:	4604      	mov	r4, r0
 8011030:	4608      	mov	r0, r1
 8011032:	602b      	str	r3, [r5, #0]
 8011034:	f7f0 f822 	bl	800107c <_close>
 8011038:	1c43      	adds	r3, r0, #1
 801103a:	d102      	bne.n	8011042 <_close_r+0x1a>
 801103c:	682b      	ldr	r3, [r5, #0]
 801103e:	b103      	cbz	r3, 8011042 <_close_r+0x1a>
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	bd38      	pop	{r3, r4, r5, pc}
 8011044:	2000d070 	.word	0x2000d070

08011048 <__sflush_r>:
 8011048:	898a      	ldrh	r2, [r1, #12]
 801104a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801104e:	4605      	mov	r5, r0
 8011050:	0710      	lsls	r0, r2, #28
 8011052:	460c      	mov	r4, r1
 8011054:	d458      	bmi.n	8011108 <__sflush_r+0xc0>
 8011056:	684b      	ldr	r3, [r1, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	dc05      	bgt.n	8011068 <__sflush_r+0x20>
 801105c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801105e:	2b00      	cmp	r3, #0
 8011060:	dc02      	bgt.n	8011068 <__sflush_r+0x20>
 8011062:	2000      	movs	r0, #0
 8011064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801106a:	2e00      	cmp	r6, #0
 801106c:	d0f9      	beq.n	8011062 <__sflush_r+0x1a>
 801106e:	2300      	movs	r3, #0
 8011070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011074:	682f      	ldr	r7, [r5, #0]
 8011076:	602b      	str	r3, [r5, #0]
 8011078:	d032      	beq.n	80110e0 <__sflush_r+0x98>
 801107a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801107c:	89a3      	ldrh	r3, [r4, #12]
 801107e:	075a      	lsls	r2, r3, #29
 8011080:	d505      	bpl.n	801108e <__sflush_r+0x46>
 8011082:	6863      	ldr	r3, [r4, #4]
 8011084:	1ac0      	subs	r0, r0, r3
 8011086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011088:	b10b      	cbz	r3, 801108e <__sflush_r+0x46>
 801108a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801108c:	1ac0      	subs	r0, r0, r3
 801108e:	2300      	movs	r3, #0
 8011090:	4602      	mov	r2, r0
 8011092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011094:	6a21      	ldr	r1, [r4, #32]
 8011096:	4628      	mov	r0, r5
 8011098:	47b0      	blx	r6
 801109a:	1c43      	adds	r3, r0, #1
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	d106      	bne.n	80110ae <__sflush_r+0x66>
 80110a0:	6829      	ldr	r1, [r5, #0]
 80110a2:	291d      	cmp	r1, #29
 80110a4:	d82c      	bhi.n	8011100 <__sflush_r+0xb8>
 80110a6:	4a2a      	ldr	r2, [pc, #168]	; (8011150 <__sflush_r+0x108>)
 80110a8:	40ca      	lsrs	r2, r1
 80110aa:	07d6      	lsls	r6, r2, #31
 80110ac:	d528      	bpl.n	8011100 <__sflush_r+0xb8>
 80110ae:	2200      	movs	r2, #0
 80110b0:	6062      	str	r2, [r4, #4]
 80110b2:	04d9      	lsls	r1, r3, #19
 80110b4:	6922      	ldr	r2, [r4, #16]
 80110b6:	6022      	str	r2, [r4, #0]
 80110b8:	d504      	bpl.n	80110c4 <__sflush_r+0x7c>
 80110ba:	1c42      	adds	r2, r0, #1
 80110bc:	d101      	bne.n	80110c2 <__sflush_r+0x7a>
 80110be:	682b      	ldr	r3, [r5, #0]
 80110c0:	b903      	cbnz	r3, 80110c4 <__sflush_r+0x7c>
 80110c2:	6560      	str	r0, [r4, #84]	; 0x54
 80110c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110c6:	602f      	str	r7, [r5, #0]
 80110c8:	2900      	cmp	r1, #0
 80110ca:	d0ca      	beq.n	8011062 <__sflush_r+0x1a>
 80110cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110d0:	4299      	cmp	r1, r3
 80110d2:	d002      	beq.n	80110da <__sflush_r+0x92>
 80110d4:	4628      	mov	r0, r5
 80110d6:	f7ff fae3 	bl	80106a0 <_free_r>
 80110da:	2000      	movs	r0, #0
 80110dc:	6360      	str	r0, [r4, #52]	; 0x34
 80110de:	e7c1      	b.n	8011064 <__sflush_r+0x1c>
 80110e0:	6a21      	ldr	r1, [r4, #32]
 80110e2:	2301      	movs	r3, #1
 80110e4:	4628      	mov	r0, r5
 80110e6:	47b0      	blx	r6
 80110e8:	1c41      	adds	r1, r0, #1
 80110ea:	d1c7      	bne.n	801107c <__sflush_r+0x34>
 80110ec:	682b      	ldr	r3, [r5, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d0c4      	beq.n	801107c <__sflush_r+0x34>
 80110f2:	2b1d      	cmp	r3, #29
 80110f4:	d001      	beq.n	80110fa <__sflush_r+0xb2>
 80110f6:	2b16      	cmp	r3, #22
 80110f8:	d101      	bne.n	80110fe <__sflush_r+0xb6>
 80110fa:	602f      	str	r7, [r5, #0]
 80110fc:	e7b1      	b.n	8011062 <__sflush_r+0x1a>
 80110fe:	89a3      	ldrh	r3, [r4, #12]
 8011100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011104:	81a3      	strh	r3, [r4, #12]
 8011106:	e7ad      	b.n	8011064 <__sflush_r+0x1c>
 8011108:	690f      	ldr	r7, [r1, #16]
 801110a:	2f00      	cmp	r7, #0
 801110c:	d0a9      	beq.n	8011062 <__sflush_r+0x1a>
 801110e:	0793      	lsls	r3, r2, #30
 8011110:	680e      	ldr	r6, [r1, #0]
 8011112:	bf08      	it	eq
 8011114:	694b      	ldreq	r3, [r1, #20]
 8011116:	600f      	str	r7, [r1, #0]
 8011118:	bf18      	it	ne
 801111a:	2300      	movne	r3, #0
 801111c:	eba6 0807 	sub.w	r8, r6, r7
 8011120:	608b      	str	r3, [r1, #8]
 8011122:	f1b8 0f00 	cmp.w	r8, #0
 8011126:	dd9c      	ble.n	8011062 <__sflush_r+0x1a>
 8011128:	6a21      	ldr	r1, [r4, #32]
 801112a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801112c:	4643      	mov	r3, r8
 801112e:	463a      	mov	r2, r7
 8011130:	4628      	mov	r0, r5
 8011132:	47b0      	blx	r6
 8011134:	2800      	cmp	r0, #0
 8011136:	dc06      	bgt.n	8011146 <__sflush_r+0xfe>
 8011138:	89a3      	ldrh	r3, [r4, #12]
 801113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801113e:	81a3      	strh	r3, [r4, #12]
 8011140:	f04f 30ff 	mov.w	r0, #4294967295
 8011144:	e78e      	b.n	8011064 <__sflush_r+0x1c>
 8011146:	4407      	add	r7, r0
 8011148:	eba8 0800 	sub.w	r8, r8, r0
 801114c:	e7e9      	b.n	8011122 <__sflush_r+0xda>
 801114e:	bf00      	nop
 8011150:	20400001 	.word	0x20400001

08011154 <_fflush_r>:
 8011154:	b538      	push	{r3, r4, r5, lr}
 8011156:	690b      	ldr	r3, [r1, #16]
 8011158:	4605      	mov	r5, r0
 801115a:	460c      	mov	r4, r1
 801115c:	b913      	cbnz	r3, 8011164 <_fflush_r+0x10>
 801115e:	2500      	movs	r5, #0
 8011160:	4628      	mov	r0, r5
 8011162:	bd38      	pop	{r3, r4, r5, pc}
 8011164:	b118      	cbz	r0, 801116e <_fflush_r+0x1a>
 8011166:	6983      	ldr	r3, [r0, #24]
 8011168:	b90b      	cbnz	r3, 801116e <_fflush_r+0x1a>
 801116a:	f7fe fe3f 	bl	800fdec <__sinit>
 801116e:	4b14      	ldr	r3, [pc, #80]	; (80111c0 <_fflush_r+0x6c>)
 8011170:	429c      	cmp	r4, r3
 8011172:	d11b      	bne.n	80111ac <_fflush_r+0x58>
 8011174:	686c      	ldr	r4, [r5, #4]
 8011176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d0ef      	beq.n	801115e <_fflush_r+0xa>
 801117e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011180:	07d0      	lsls	r0, r2, #31
 8011182:	d404      	bmi.n	801118e <_fflush_r+0x3a>
 8011184:	0599      	lsls	r1, r3, #22
 8011186:	d402      	bmi.n	801118e <_fflush_r+0x3a>
 8011188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801118a:	f7fe fee4 	bl	800ff56 <__retarget_lock_acquire_recursive>
 801118e:	4628      	mov	r0, r5
 8011190:	4621      	mov	r1, r4
 8011192:	f7ff ff59 	bl	8011048 <__sflush_r>
 8011196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011198:	07da      	lsls	r2, r3, #31
 801119a:	4605      	mov	r5, r0
 801119c:	d4e0      	bmi.n	8011160 <_fflush_r+0xc>
 801119e:	89a3      	ldrh	r3, [r4, #12]
 80111a0:	059b      	lsls	r3, r3, #22
 80111a2:	d4dd      	bmi.n	8011160 <_fflush_r+0xc>
 80111a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111a6:	f7fe fed7 	bl	800ff58 <__retarget_lock_release_recursive>
 80111aa:	e7d9      	b.n	8011160 <_fflush_r+0xc>
 80111ac:	4b05      	ldr	r3, [pc, #20]	; (80111c4 <_fflush_r+0x70>)
 80111ae:	429c      	cmp	r4, r3
 80111b0:	d101      	bne.n	80111b6 <_fflush_r+0x62>
 80111b2:	68ac      	ldr	r4, [r5, #8]
 80111b4:	e7df      	b.n	8011176 <_fflush_r+0x22>
 80111b6:	4b04      	ldr	r3, [pc, #16]	; (80111c8 <_fflush_r+0x74>)
 80111b8:	429c      	cmp	r4, r3
 80111ba:	bf08      	it	eq
 80111bc:	68ec      	ldreq	r4, [r5, #12]
 80111be:	e7da      	b.n	8011176 <_fflush_r+0x22>
 80111c0:	0801de38 	.word	0x0801de38
 80111c4:	0801de58 	.word	0x0801de58
 80111c8:	0801de18 	.word	0x0801de18

080111cc <_lseek_r>:
 80111cc:	b538      	push	{r3, r4, r5, lr}
 80111ce:	4d07      	ldr	r5, [pc, #28]	; (80111ec <_lseek_r+0x20>)
 80111d0:	4604      	mov	r4, r0
 80111d2:	4608      	mov	r0, r1
 80111d4:	4611      	mov	r1, r2
 80111d6:	2200      	movs	r2, #0
 80111d8:	602a      	str	r2, [r5, #0]
 80111da:	461a      	mov	r2, r3
 80111dc:	f7ef ff58 	bl	8001090 <_lseek>
 80111e0:	1c43      	adds	r3, r0, #1
 80111e2:	d102      	bne.n	80111ea <_lseek_r+0x1e>
 80111e4:	682b      	ldr	r3, [r5, #0]
 80111e6:	b103      	cbz	r3, 80111ea <_lseek_r+0x1e>
 80111e8:	6023      	str	r3, [r4, #0]
 80111ea:	bd38      	pop	{r3, r4, r5, pc}
 80111ec:	2000d070 	.word	0x2000d070

080111f0 <__swhatbuf_r>:
 80111f0:	b570      	push	{r4, r5, r6, lr}
 80111f2:	460e      	mov	r6, r1
 80111f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111f8:	2900      	cmp	r1, #0
 80111fa:	b096      	sub	sp, #88	; 0x58
 80111fc:	4614      	mov	r4, r2
 80111fe:	461d      	mov	r5, r3
 8011200:	da08      	bge.n	8011214 <__swhatbuf_r+0x24>
 8011202:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	602a      	str	r2, [r5, #0]
 801120a:	061a      	lsls	r2, r3, #24
 801120c:	d410      	bmi.n	8011230 <__swhatbuf_r+0x40>
 801120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011212:	e00e      	b.n	8011232 <__swhatbuf_r+0x42>
 8011214:	466a      	mov	r2, sp
 8011216:	f000 f903 	bl	8011420 <_fstat_r>
 801121a:	2800      	cmp	r0, #0
 801121c:	dbf1      	blt.n	8011202 <__swhatbuf_r+0x12>
 801121e:	9a01      	ldr	r2, [sp, #4]
 8011220:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011224:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011228:	425a      	negs	r2, r3
 801122a:	415a      	adcs	r2, r3
 801122c:	602a      	str	r2, [r5, #0]
 801122e:	e7ee      	b.n	801120e <__swhatbuf_r+0x1e>
 8011230:	2340      	movs	r3, #64	; 0x40
 8011232:	2000      	movs	r0, #0
 8011234:	6023      	str	r3, [r4, #0]
 8011236:	b016      	add	sp, #88	; 0x58
 8011238:	bd70      	pop	{r4, r5, r6, pc}
	...

0801123c <__smakebuf_r>:
 801123c:	898b      	ldrh	r3, [r1, #12]
 801123e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011240:	079d      	lsls	r5, r3, #30
 8011242:	4606      	mov	r6, r0
 8011244:	460c      	mov	r4, r1
 8011246:	d507      	bpl.n	8011258 <__smakebuf_r+0x1c>
 8011248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801124c:	6023      	str	r3, [r4, #0]
 801124e:	6123      	str	r3, [r4, #16]
 8011250:	2301      	movs	r3, #1
 8011252:	6163      	str	r3, [r4, #20]
 8011254:	b002      	add	sp, #8
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	ab01      	add	r3, sp, #4
 801125a:	466a      	mov	r2, sp
 801125c:	f7ff ffc8 	bl	80111f0 <__swhatbuf_r>
 8011260:	9900      	ldr	r1, [sp, #0]
 8011262:	4605      	mov	r5, r0
 8011264:	4630      	mov	r0, r6
 8011266:	f7ff fa87 	bl	8010778 <_malloc_r>
 801126a:	b948      	cbnz	r0, 8011280 <__smakebuf_r+0x44>
 801126c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011270:	059a      	lsls	r2, r3, #22
 8011272:	d4ef      	bmi.n	8011254 <__smakebuf_r+0x18>
 8011274:	f023 0303 	bic.w	r3, r3, #3
 8011278:	f043 0302 	orr.w	r3, r3, #2
 801127c:	81a3      	strh	r3, [r4, #12]
 801127e:	e7e3      	b.n	8011248 <__smakebuf_r+0xc>
 8011280:	4b0d      	ldr	r3, [pc, #52]	; (80112b8 <__smakebuf_r+0x7c>)
 8011282:	62b3      	str	r3, [r6, #40]	; 0x28
 8011284:	89a3      	ldrh	r3, [r4, #12]
 8011286:	6020      	str	r0, [r4, #0]
 8011288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801128c:	81a3      	strh	r3, [r4, #12]
 801128e:	9b00      	ldr	r3, [sp, #0]
 8011290:	6163      	str	r3, [r4, #20]
 8011292:	9b01      	ldr	r3, [sp, #4]
 8011294:	6120      	str	r0, [r4, #16]
 8011296:	b15b      	cbz	r3, 80112b0 <__smakebuf_r+0x74>
 8011298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801129c:	4630      	mov	r0, r6
 801129e:	f000 f8d1 	bl	8011444 <_isatty_r>
 80112a2:	b128      	cbz	r0, 80112b0 <__smakebuf_r+0x74>
 80112a4:	89a3      	ldrh	r3, [r4, #12]
 80112a6:	f023 0303 	bic.w	r3, r3, #3
 80112aa:	f043 0301 	orr.w	r3, r3, #1
 80112ae:	81a3      	strh	r3, [r4, #12]
 80112b0:	89a0      	ldrh	r0, [r4, #12]
 80112b2:	4305      	orrs	r5, r0
 80112b4:	81a5      	strh	r5, [r4, #12]
 80112b6:	e7cd      	b.n	8011254 <__smakebuf_r+0x18>
 80112b8:	0800fd85 	.word	0x0800fd85

080112bc <__ascii_mbtowc>:
 80112bc:	b082      	sub	sp, #8
 80112be:	b901      	cbnz	r1, 80112c2 <__ascii_mbtowc+0x6>
 80112c0:	a901      	add	r1, sp, #4
 80112c2:	b142      	cbz	r2, 80112d6 <__ascii_mbtowc+0x1a>
 80112c4:	b14b      	cbz	r3, 80112da <__ascii_mbtowc+0x1e>
 80112c6:	7813      	ldrb	r3, [r2, #0]
 80112c8:	600b      	str	r3, [r1, #0]
 80112ca:	7812      	ldrb	r2, [r2, #0]
 80112cc:	1e10      	subs	r0, r2, #0
 80112ce:	bf18      	it	ne
 80112d0:	2001      	movne	r0, #1
 80112d2:	b002      	add	sp, #8
 80112d4:	4770      	bx	lr
 80112d6:	4610      	mov	r0, r2
 80112d8:	e7fb      	b.n	80112d2 <__ascii_mbtowc+0x16>
 80112da:	f06f 0001 	mvn.w	r0, #1
 80112de:	e7f8      	b.n	80112d2 <__ascii_mbtowc+0x16>

080112e0 <__malloc_lock>:
 80112e0:	4801      	ldr	r0, [pc, #4]	; (80112e8 <__malloc_lock+0x8>)
 80112e2:	f7fe be38 	b.w	800ff56 <__retarget_lock_acquire_recursive>
 80112e6:	bf00      	nop
 80112e8:	2000d074 	.word	0x2000d074

080112ec <__malloc_unlock>:
 80112ec:	4801      	ldr	r0, [pc, #4]	; (80112f4 <__malloc_unlock+0x8>)
 80112ee:	f7fe be33 	b.w	800ff58 <__retarget_lock_release_recursive>
 80112f2:	bf00      	nop
 80112f4:	2000d074 	.word	0x2000d074

080112f8 <_realloc_r>:
 80112f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112fc:	4680      	mov	r8, r0
 80112fe:	4614      	mov	r4, r2
 8011300:	460e      	mov	r6, r1
 8011302:	b921      	cbnz	r1, 801130e <_realloc_r+0x16>
 8011304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011308:	4611      	mov	r1, r2
 801130a:	f7ff ba35 	b.w	8010778 <_malloc_r>
 801130e:	b92a      	cbnz	r2, 801131c <_realloc_r+0x24>
 8011310:	f7ff f9c6 	bl	80106a0 <_free_r>
 8011314:	4625      	mov	r5, r4
 8011316:	4628      	mov	r0, r5
 8011318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801131c:	f000 f8a2 	bl	8011464 <_malloc_usable_size_r>
 8011320:	4284      	cmp	r4, r0
 8011322:	4607      	mov	r7, r0
 8011324:	d802      	bhi.n	801132c <_realloc_r+0x34>
 8011326:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801132a:	d812      	bhi.n	8011352 <_realloc_r+0x5a>
 801132c:	4621      	mov	r1, r4
 801132e:	4640      	mov	r0, r8
 8011330:	f7ff fa22 	bl	8010778 <_malloc_r>
 8011334:	4605      	mov	r5, r0
 8011336:	2800      	cmp	r0, #0
 8011338:	d0ed      	beq.n	8011316 <_realloc_r+0x1e>
 801133a:	42bc      	cmp	r4, r7
 801133c:	4622      	mov	r2, r4
 801133e:	4631      	mov	r1, r6
 8011340:	bf28      	it	cs
 8011342:	463a      	movcs	r2, r7
 8011344:	f7fd f92c 	bl	800e5a0 <memcpy>
 8011348:	4631      	mov	r1, r6
 801134a:	4640      	mov	r0, r8
 801134c:	f7ff f9a8 	bl	80106a0 <_free_r>
 8011350:	e7e1      	b.n	8011316 <_realloc_r+0x1e>
 8011352:	4635      	mov	r5, r6
 8011354:	e7df      	b.n	8011316 <_realloc_r+0x1e>
	...

08011358 <_read_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4d07      	ldr	r5, [pc, #28]	; (8011378 <_read_r+0x20>)
 801135c:	4604      	mov	r4, r0
 801135e:	4608      	mov	r0, r1
 8011360:	4611      	mov	r1, r2
 8011362:	2200      	movs	r2, #0
 8011364:	602a      	str	r2, [r5, #0]
 8011366:	461a      	mov	r2, r3
 8011368:	f7ef fe94 	bl	8001094 <_read>
 801136c:	1c43      	adds	r3, r0, #1
 801136e:	d102      	bne.n	8011376 <_read_r+0x1e>
 8011370:	682b      	ldr	r3, [r5, #0]
 8011372:	b103      	cbz	r3, 8011376 <_read_r+0x1e>
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	bd38      	pop	{r3, r4, r5, pc}
 8011378:	2000d070 	.word	0x2000d070

0801137c <_raise_r>:
 801137c:	291f      	cmp	r1, #31
 801137e:	b538      	push	{r3, r4, r5, lr}
 8011380:	4604      	mov	r4, r0
 8011382:	460d      	mov	r5, r1
 8011384:	d904      	bls.n	8011390 <_raise_r+0x14>
 8011386:	2316      	movs	r3, #22
 8011388:	6003      	str	r3, [r0, #0]
 801138a:	f04f 30ff 	mov.w	r0, #4294967295
 801138e:	bd38      	pop	{r3, r4, r5, pc}
 8011390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011392:	b112      	cbz	r2, 801139a <_raise_r+0x1e>
 8011394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011398:	b94b      	cbnz	r3, 80113ae <_raise_r+0x32>
 801139a:	4620      	mov	r0, r4
 801139c:	f000 f830 	bl	8011400 <_getpid_r>
 80113a0:	462a      	mov	r2, r5
 80113a2:	4601      	mov	r1, r0
 80113a4:	4620      	mov	r0, r4
 80113a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113aa:	f000 b817 	b.w	80113dc <_kill_r>
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d00a      	beq.n	80113c8 <_raise_r+0x4c>
 80113b2:	1c59      	adds	r1, r3, #1
 80113b4:	d103      	bne.n	80113be <_raise_r+0x42>
 80113b6:	2316      	movs	r3, #22
 80113b8:	6003      	str	r3, [r0, #0]
 80113ba:	2001      	movs	r0, #1
 80113bc:	e7e7      	b.n	801138e <_raise_r+0x12>
 80113be:	2400      	movs	r4, #0
 80113c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113c4:	4628      	mov	r0, r5
 80113c6:	4798      	blx	r3
 80113c8:	2000      	movs	r0, #0
 80113ca:	e7e0      	b.n	801138e <_raise_r+0x12>

080113cc <raise>:
 80113cc:	4b02      	ldr	r3, [pc, #8]	; (80113d8 <raise+0xc>)
 80113ce:	4601      	mov	r1, r0
 80113d0:	6818      	ldr	r0, [r3, #0]
 80113d2:	f7ff bfd3 	b.w	801137c <_raise_r>
 80113d6:	bf00      	nop
 80113d8:	2000002c 	.word	0x2000002c

080113dc <_kill_r>:
 80113dc:	b538      	push	{r3, r4, r5, lr}
 80113de:	4d07      	ldr	r5, [pc, #28]	; (80113fc <_kill_r+0x20>)
 80113e0:	2300      	movs	r3, #0
 80113e2:	4604      	mov	r4, r0
 80113e4:	4608      	mov	r0, r1
 80113e6:	4611      	mov	r1, r2
 80113e8:	602b      	str	r3, [r5, #0]
 80113ea:	f7ef fe2b 	bl	8001044 <_kill>
 80113ee:	1c43      	adds	r3, r0, #1
 80113f0:	d102      	bne.n	80113f8 <_kill_r+0x1c>
 80113f2:	682b      	ldr	r3, [r5, #0]
 80113f4:	b103      	cbz	r3, 80113f8 <_kill_r+0x1c>
 80113f6:	6023      	str	r3, [r4, #0]
 80113f8:	bd38      	pop	{r3, r4, r5, pc}
 80113fa:	bf00      	nop
 80113fc:	2000d070 	.word	0x2000d070

08011400 <_getpid_r>:
 8011400:	f7ef be1e 	b.w	8001040 <_getpid>

08011404 <__ascii_wctomb>:
 8011404:	b149      	cbz	r1, 801141a <__ascii_wctomb+0x16>
 8011406:	2aff      	cmp	r2, #255	; 0xff
 8011408:	bf85      	ittet	hi
 801140a:	238a      	movhi	r3, #138	; 0x8a
 801140c:	6003      	strhi	r3, [r0, #0]
 801140e:	700a      	strbls	r2, [r1, #0]
 8011410:	f04f 30ff 	movhi.w	r0, #4294967295
 8011414:	bf98      	it	ls
 8011416:	2001      	movls	r0, #1
 8011418:	4770      	bx	lr
 801141a:	4608      	mov	r0, r1
 801141c:	4770      	bx	lr
	...

08011420 <_fstat_r>:
 8011420:	b538      	push	{r3, r4, r5, lr}
 8011422:	4d07      	ldr	r5, [pc, #28]	; (8011440 <_fstat_r+0x20>)
 8011424:	2300      	movs	r3, #0
 8011426:	4604      	mov	r4, r0
 8011428:	4608      	mov	r0, r1
 801142a:	4611      	mov	r1, r2
 801142c:	602b      	str	r3, [r5, #0]
 801142e:	f7ef fe28 	bl	8001082 <_fstat>
 8011432:	1c43      	adds	r3, r0, #1
 8011434:	d102      	bne.n	801143c <_fstat_r+0x1c>
 8011436:	682b      	ldr	r3, [r5, #0]
 8011438:	b103      	cbz	r3, 801143c <_fstat_r+0x1c>
 801143a:	6023      	str	r3, [r4, #0]
 801143c:	bd38      	pop	{r3, r4, r5, pc}
 801143e:	bf00      	nop
 8011440:	2000d070 	.word	0x2000d070

08011444 <_isatty_r>:
 8011444:	b538      	push	{r3, r4, r5, lr}
 8011446:	4d06      	ldr	r5, [pc, #24]	; (8011460 <_isatty_r+0x1c>)
 8011448:	2300      	movs	r3, #0
 801144a:	4604      	mov	r4, r0
 801144c:	4608      	mov	r0, r1
 801144e:	602b      	str	r3, [r5, #0]
 8011450:	f7ef fe1c 	bl	800108c <_isatty>
 8011454:	1c43      	adds	r3, r0, #1
 8011456:	d102      	bne.n	801145e <_isatty_r+0x1a>
 8011458:	682b      	ldr	r3, [r5, #0]
 801145a:	b103      	cbz	r3, 801145e <_isatty_r+0x1a>
 801145c:	6023      	str	r3, [r4, #0]
 801145e:	bd38      	pop	{r3, r4, r5, pc}
 8011460:	2000d070 	.word	0x2000d070

08011464 <_malloc_usable_size_r>:
 8011464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011468:	1f18      	subs	r0, r3, #4
 801146a:	2b00      	cmp	r3, #0
 801146c:	bfbc      	itt	lt
 801146e:	580b      	ldrlt	r3, [r1, r0]
 8011470:	18c0      	addlt	r0, r0, r3
 8011472:	4770      	bx	lr

08011474 <_init>:
 8011474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011476:	bf00      	nop
 8011478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801147a:	bc08      	pop	{r3}
 801147c:	469e      	mov	lr, r3
 801147e:	4770      	bx	lr

08011480 <_fini>:
 8011480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011482:	bf00      	nop
 8011484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011486:	bc08      	pop	{r3}
 8011488:	469e      	mov	lr, r3
 801148a:	4770      	bx	lr
