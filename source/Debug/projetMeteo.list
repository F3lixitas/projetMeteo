
projetMeteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007480  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08007650  08007650  00017650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a44  08007a44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a4c  08007a4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200001dc  08007c30  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08007c30  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e90f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002072  00000000  00000000  0002eb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00030b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  000316c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265da  00000000  00000000  000320f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f599  00000000  00000000  000586d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8963  00000000  00000000  00067c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001505ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf0  00000000  00000000  00150620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007638 	.word	0x08007638

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007638 	.word	0x08007638

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b77      	ldr	r3, [pc, #476]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a76      	ldr	r2, [pc, #472]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b74      	ldr	r3, [pc, #464]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	4b71      	ldr	r3, [pc, #452]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a70      	ldr	r2, [pc, #448]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a6a      	ldr	r2, [pc, #424]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b68      	ldr	r3, [pc, #416]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a64      	ldr	r2, [pc, #400]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b62      	ldr	r3, [pc, #392]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800101a:	4b59      	ldr	r3, [pc, #356]	; (8001180 <MX_GPIO_Init+0x1f4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <MX_GPIO_Init+0x1f4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f244 0181 	movw	r1, #16513	; 0x4081
 8001038:	4852      	ldr	r0, [pc, #328]	; (8001184 <MX_GPIO_Init+0x1f8>)
 800103a:	f001 f9f5 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4851      	ldr	r0, [pc, #324]	; (8001188 <MX_GPIO_Init+0x1fc>)
 8001044:	f001 f9f0 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	484b      	ldr	r0, [pc, #300]	; (800118c <MX_GPIO_Init+0x200>)
 8001060:	f001 f836 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001064:	2332      	movs	r3, #50	; 0x32
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001074:	230b      	movs	r3, #11
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4843      	ldr	r0, [pc, #268]	; (800118c <MX_GPIO_Init+0x200>)
 8001080:	f001 f826 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001084:	2386      	movs	r3, #134	; 0x86
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001094:	230b      	movs	r3, #11
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	483c      	ldr	r0, [pc, #240]	; (8001190 <MX_GPIO_Init+0x204>)
 80010a0:	f001 f816 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4831      	ldr	r0, [pc, #196]	; (8001184 <MX_GPIO_Init+0x1f8>)
 80010be:	f001 f807 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d4:	230b      	movs	r3, #11
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4829      	ldr	r0, [pc, #164]	; (8001184 <MX_GPIO_Init+0x1f8>)
 80010e0:	f000 fff6 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4823      	ldr	r0, [pc, #140]	; (8001188 <MX_GPIO_Init+0x1fc>)
 80010fc:	f000 ffe8 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	481d      	ldr	r0, [pc, #116]	; (8001188 <MX_GPIO_Init+0x1fc>)
 8001114:	f000 ffdc 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001118:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800112a:	230a      	movs	r3, #10
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4816      	ldr	r0, [pc, #88]	; (8001190 <MX_GPIO_Init+0x204>)
 8001136:	f000 ffcb 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800113a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4810      	ldr	r0, [pc, #64]	; (8001190 <MX_GPIO_Init+0x204>)
 8001150:	f000 ffbe 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001154:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001166:	230b      	movs	r3, #11
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_GPIO_Init+0x1fc>)
 8001172:	f000 ffad 	bl	80020d0 <HAL_GPIO_Init>

}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400
 8001188:	40021800 	.word	0x40021800
 800118c:	40020800 	.word	0x40020800
 8001190:	40020000 	.word	0x40020000

08001194 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_I2C1_Init+0x74>)
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_I2C1_Init+0x78>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_I2C1_Init+0x74>)
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <MX_I2C1_Init+0x7c>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_I2C1_Init+0x74>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_I2C1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_I2C1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <MX_I2C1_Init+0x74>)
 80011d0:	f001 f944 	bl	800245c <HAL_I2C_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011da:	f000 fc2d 	bl	8001a38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <MX_I2C1_Init+0x74>)
 80011e2:	f001 fe9f 	bl	8002f24 <HAL_I2CEx_ConfigAnalogFilter>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011ec:	f000 fc24 	bl	8001a38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f0:	2100      	movs	r1, #0
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_I2C1_Init+0x74>)
 80011f4:	f001 fee1 	bl	8002fba <HAL_I2CEx_ConfigDigitalFilter>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f000 fc1b 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f8 	.word	0x200001f8
 800120c:	40005400 	.word	0x40005400
 8001210:	00808cd2 	.word	0x00808cd2

08001214 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0aa      	sub	sp, #168	; 0xa8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2284      	movs	r2, #132	; 0x84
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fce1 	bl	8004bfc <memset>
  if(i2cHandle->Instance==I2C1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_I2C_MspInit+0xb4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d13c      	bne.n	80012be <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001244:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001248:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800124a:	2300      	movs	r3, #0
 800124c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f002 fbd8 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800125e:	f000 fbeb 	bl	8001a38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_I2C_MspInit+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_I2C_MspInit+0xb8>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_I2C_MspInit+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800127a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001294:	2304      	movs	r3, #4
 8001296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_I2C_MspInit+0xbc>)
 80012a2:	f000 ff15 	bl	80020d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_I2C_MspInit+0xb8>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_I2C_MspInit+0xb8>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_I2C_MspInit+0xb8>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	37a8      	adds	r7, #168	; 0xa8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400

080012d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 80012dc:	1d39      	adds	r1, r7, #4
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	2201      	movs	r2, #1
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <__io_putchar+0x20>)
 80012e6:	f002 ffcd 	bl	8004284 <HAL_UART_Transmit>
	return ch;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000029c 	.word	0x2000029c

080012f8 <lerp>:

float lerp(float a, float b, float alpha){
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001302:	edc7 0a02 	vstr	s1, [r7, #8]
 8001306:	ed87 1a01 	vstr	s2, [r7, #4]
	return (b - a) * alpha + a;
 800130a:	ed97 7a02 	vldr	s14, [r7, #8]
 800130e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001312:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001322:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001326:	eeb0 0a67 	vmov.f32	s0, s15
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133a:	f000 fd62 	bl	8001e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133e:	f000 fb13 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001342:	f7ff fe23 	bl	8000f8c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001346:	f000 fca3 	bl	8001c90 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800134a:	f7ff ff23 	bl	8001194 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  data = (uint8_t)(PRESSURE_DATA_RATE_7Hz | POWER_DOWN);
 800134e:	4ba9      	ldr	r3, [pc, #676]	; (80015f4 <main+0x2c0>)
 8001350:	22a0      	movs	r2, #160	; 0xa0
 8001352:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2301      	movs	r3, #1
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	4ba5      	ldr	r3, [pc, #660]	; (80015f4 <main+0x2c0>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	2220      	movs	r2, #32
 8001364:	21ba      	movs	r1, #186	; 0xba
 8001366:	48a4      	ldr	r0, [pc, #656]	; (80015f8 <main+0x2c4>)
 8001368:	f001 f908 	bl	800257c <HAL_I2C_Mem_Write>
  data = 0;
 800136c:	4ba1      	ldr	r3, [pc, #644]	; (80015f4 <main+0x2c0>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, PRESSURE_SENSOR_ADDR, 0x10, 1, &data, 1, 50);
 8001372:	2332      	movs	r3, #50	; 0x32
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2301      	movs	r3, #1
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	4b9e      	ldr	r3, [pc, #632]	; (80015f4 <main+0x2c0>)
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	2210      	movs	r2, #16
 8001382:	21ba      	movs	r1, #186	; 0xba
 8001384:	489c      	ldr	r0, [pc, #624]	; (80015f8 <main+0x2c4>)
 8001386:	f001 f8f9 	bl	800257c <HAL_I2C_Mem_Write>

  data = POWER_DOWN | 0b00000010;
 800138a:	4b9a      	ldr	r3, [pc, #616]	; (80015f4 <main+0x2c0>)
 800138c:	2282      	movs	r2, #130	; 0x82
 800138e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 8001390:	2332      	movs	r3, #50	; 0x32
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2301      	movs	r3, #1
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	4b96      	ldr	r3, [pc, #600]	; (80015f4 <main+0x2c0>)
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2220      	movs	r2, #32
 80013a0:	21be      	movs	r1, #190	; 0xbe
 80013a2:	4895      	ldr	r0, [pc, #596]	; (80015f8 <main+0x2c4>)
 80013a4:	f001 f8ea 	bl	800257c <HAL_I2C_Mem_Write>

  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3C, 1, &rawT0[0], 1, 50);
 80013a8:	2332      	movs	r3, #50	; 0x32
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	2301      	movs	r3, #1
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	4b92      	ldr	r3, [pc, #584]	; (80015fc <main+0x2c8>)
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	223c      	movs	r2, #60	; 0x3c
 80013b8:	21be      	movs	r1, #190	; 0xbe
 80013ba:	488f      	ldr	r0, [pc, #572]	; (80015f8 <main+0x2c4>)
 80013bc:	f001 f9f2 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3D, 1, &rawT0[1], 1, 50);
 80013c0:	2332      	movs	r3, #50	; 0x32
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	4b8d      	ldr	r3, [pc, #564]	; (8001600 <main+0x2cc>)
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	223d      	movs	r2, #61	; 0x3d
 80013d0:	21be      	movs	r1, #190	; 0xbe
 80013d2:	4889      	ldr	r0, [pc, #548]	; (80015f8 <main+0x2c4>)
 80013d4:	f001 f9e6 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3E, 1, &rawT1[0], 1, 50);
 80013d8:	2332      	movs	r3, #50	; 0x32
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	4b88      	ldr	r3, [pc, #544]	; (8001604 <main+0x2d0>)
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	223e      	movs	r2, #62	; 0x3e
 80013e8:	21be      	movs	r1, #190	; 0xbe
 80013ea:	4883      	ldr	r0, [pc, #524]	; (80015f8 <main+0x2c4>)
 80013ec:	f001 f9da 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3F, 1, &rawT1[1], 1, 50);
 80013f0:	2332      	movs	r3, #50	; 0x32
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2301      	movs	r3, #1
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	4b83      	ldr	r3, [pc, #524]	; (8001608 <main+0x2d4>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	223f      	movs	r2, #63	; 0x3f
 8001400:	21be      	movs	r1, #190	; 0xbe
 8001402:	487d      	ldr	r0, [pc, #500]	; (80015f8 <main+0x2c4>)
 8001404:	f001 f9ce 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x32, 1, &Tdeg[0], 1, 50);
 8001408:	2332      	movs	r3, #50	; 0x32
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2301      	movs	r3, #1
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	4b7e      	ldr	r3, [pc, #504]	; (800160c <main+0x2d8>)
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	2232      	movs	r2, #50	; 0x32
 8001418:	21be      	movs	r1, #190	; 0xbe
 800141a:	4877      	ldr	r0, [pc, #476]	; (80015f8 <main+0x2c4>)
 800141c:	f001 f9c2 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x33, 1, &Tdeg[1], 1, 50);
 8001420:	2332      	movs	r3, #50	; 0x32
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	4b79      	ldr	r3, [pc, #484]	; (8001610 <main+0x2dc>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	2233      	movs	r2, #51	; 0x33
 8001430:	21be      	movs	r1, #190	; 0xbe
 8001432:	4871      	ldr	r0, [pc, #452]	; (80015f8 <main+0x2c4>)
 8001434:	f001 f9b6 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x35, 1, &t0t1MSB, 1, 50);
 8001438:	2332      	movs	r3, #50	; 0x32
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	4b74      	ldr	r3, [pc, #464]	; (8001614 <main+0x2e0>)
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	2235      	movs	r2, #53	; 0x35
 8001448:	21be      	movs	r1, #190	; 0xbe
 800144a:	486b      	ldr	r0, [pc, #428]	; (80015f8 <main+0x2c4>)
 800144c:	f001 f9aa 	bl	80027a4 <HAL_I2C_Mem_Read>

  T0 = rawT0[0] + (rawT0[1] << 8);
 8001450:	4b6a      	ldr	r3, [pc, #424]	; (80015fc <main+0x2c8>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b69      	ldr	r3, [pc, #420]	; (80015fc <main+0x2c8>)
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	b29b      	uxth	r3, r3
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <main+0x2e4>)
 8001468:	801a      	strh	r2, [r3, #0]
  T1 = rawT1[0] + (rawT1[1] << 8);
 800146a:	4b66      	ldr	r3, [pc, #408]	; (8001604 <main+0x2d0>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b64      	ldr	r3, [pc, #400]	; (8001604 <main+0x2d0>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	b29b      	uxth	r3, r3
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	4413      	add	r3, r2
 800147c:	b29b      	uxth	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b66      	ldr	r3, [pc, #408]	; (800161c <main+0x2e8>)
 8001482:	801a      	strh	r2, [r3, #0]

  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x36, 1, &rawH0[0], 1, 50);
 8001484:	2332      	movs	r3, #50	; 0x32
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	2301      	movs	r3, #1
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	4b64      	ldr	r3, [pc, #400]	; (8001620 <main+0x2ec>)
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	2236      	movs	r2, #54	; 0x36
 8001494:	21be      	movs	r1, #190	; 0xbe
 8001496:	4858      	ldr	r0, [pc, #352]	; (80015f8 <main+0x2c4>)
 8001498:	f001 f984 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x37, 1, &rawH0[1], 1, 50);
 800149c:	2332      	movs	r3, #50	; 0x32
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <main+0x2f0>)
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	2237      	movs	r2, #55	; 0x37
 80014ac:	21be      	movs	r1, #190	; 0xbe
 80014ae:	4852      	ldr	r0, [pc, #328]	; (80015f8 <main+0x2c4>)
 80014b0:	f001 f978 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3A, 1, &rawH1[0], 1, 50);
 80014b4:	2332      	movs	r3, #50	; 0x32
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2301      	movs	r3, #1
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <main+0x2f4>)
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	223a      	movs	r2, #58	; 0x3a
 80014c4:	21be      	movs	r1, #190	; 0xbe
 80014c6:	484c      	ldr	r0, [pc, #304]	; (80015f8 <main+0x2c4>)
 80014c8:	f001 f96c 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x3B, 1, &rawH1[1], 1, 50);
 80014cc:	2332      	movs	r3, #50	; 0x32
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2301      	movs	r3, #1
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	4b55      	ldr	r3, [pc, #340]	; (800162c <main+0x2f8>)
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	223b      	movs	r2, #59	; 0x3b
 80014dc:	21be      	movs	r1, #190	; 0xbe
 80014de:	4846      	ldr	r0, [pc, #280]	; (80015f8 <main+0x2c4>)
 80014e0:	f001 f960 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x30, 1, &Hdeg[0], 1, 50);
 80014e4:	2332      	movs	r3, #50	; 0x32
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <main+0x2fc>)
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	21be      	movs	r1, #190	; 0xbe
 80014f6:	4840      	ldr	r0, [pc, #256]	; (80015f8 <main+0x2c4>)
 80014f8:	f001 f954 	bl	80027a4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x31, 1, &Hdeg[1], 1, 50);
 80014fc:	2332      	movs	r3, #50	; 0x32
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <main+0x300>)
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	2231      	movs	r2, #49	; 0x31
 800150c:	21be      	movs	r1, #190	; 0xbe
 800150e:	483a      	ldr	r0, [pc, #232]	; (80015f8 <main+0x2c4>)
 8001510:	f001 f948 	bl	80027a4 <HAL_I2C_Mem_Read>

  H0 = rawH0[0] + (rawH0[1] << 8);
 8001514:	4b42      	ldr	r3, [pc, #264]	; (8001620 <main+0x2ec>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <main+0x2ec>)
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	b29b      	uxth	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b43      	ldr	r3, [pc, #268]	; (8001638 <main+0x304>)
 800152c:	801a      	strh	r2, [r3, #0]
  H1 = rawH1[0] + (rawH1[1] << 8);
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <main+0x2f4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <main+0x2f4>)
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	b29b      	uxth	r3, r3
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	4413      	add	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <main+0x308>)
 8001546:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8001548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154c:	f000 fcb6 	bl	8001ebc <HAL_Delay>

	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 8001550:	2332      	movs	r3, #50	; 0x32
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2301      	movs	r3, #1
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <main+0x30c>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	2228      	movs	r2, #40	; 0x28
 8001560:	21ba      	movs	r1, #186	; 0xba
 8001562:	4825      	ldr	r0, [pc, #148]	; (80015f8 <main+0x2c4>)
 8001564:	f001 f91e 	bl	80027a4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x29, 1, &rawPressureData[1], 1, 50);
 8001568:	2332      	movs	r3, #50	; 0x32
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <main+0x310>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	2229      	movs	r2, #41	; 0x29
 8001578:	21ba      	movs	r1, #186	; 0xba
 800157a:	481f      	ldr	r0, [pc, #124]	; (80015f8 <main+0x2c4>)
 800157c:	f001 f912 	bl	80027a4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x2A, 1, &rawPressureData[2], 1, 50);
 8001580:	2332      	movs	r3, #50	; 0x32
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2301      	movs	r3, #1
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <main+0x314>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	222a      	movs	r2, #42	; 0x2a
 8001590:	21ba      	movs	r1, #186	; 0xba
 8001592:	4819      	ldr	r0, [pc, #100]	; (80015f8 <main+0x2c4>)
 8001594:	f001 f906 	bl	80027a4 <HAL_I2C_Mem_Read>

	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x2B, 1, &rawTemperatureData[0], 1, 50);
 8001598:	2332      	movs	r3, #50	; 0x32
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2301      	movs	r3, #1
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <main+0x318>)
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	222b      	movs	r2, #43	; 0x2b
 80015a8:	21ba      	movs	r1, #186	; 0xba
 80015aa:	4813      	ldr	r0, [pc, #76]	; (80015f8 <main+0x2c4>)
 80015ac:	f001 f8fa 	bl	80027a4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x2C, 1, &rawTemperatureData[1], 1, 50);
 80015b0:	2332      	movs	r3, #50	; 0x32
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	2301      	movs	r3, #1
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <main+0x31c>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	222c      	movs	r2, #44	; 0x2c
 80015c0:	21ba      	movs	r1, #186	; 0xba
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <main+0x2c4>)
 80015c4:	f001 f8ee 	bl	80027a4 <HAL_I2C_Mem_Read>

	  pressureData = rawPressureData[0];
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <main+0x30c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <main+0x320>)
 80015d0:	601a      	str	r2, [r3, #0]
	  pressureData |= (rawPressureData[1] << 8);
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <main+0x30c>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	021a      	lsls	r2, r3, #8
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <main+0x320>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <main+0x320>)
 80015e0:	6013      	str	r3, [r2, #0]
	  if(rawPressureData[2] & 0x80){
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <main+0x30c>)
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da41      	bge.n	8001670 <main+0x33c>
		  pressureData |= (rawPressureData[2] << 16);
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <main+0x30c>)
 80015ee:	789b      	ldrb	r3, [r3, #2]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	e031      	b.n	8001658 <main+0x324>
 80015f4:	20000244 	.word	0x20000244
 80015f8:	200001f8 	.word	0x200001f8
 80015fc:	20000264 	.word	0x20000264
 8001600:	20000265 	.word	0x20000265
 8001604:	20000268 	.word	0x20000268
 8001608:	20000269 	.word	0x20000269
 800160c:	2000026c 	.word	0x2000026c
 8001610:	2000026d 	.word	0x2000026d
 8001614:	2000026e 	.word	0x2000026e
 8001618:	20000278 	.word	0x20000278
 800161c:	2000027a 	.word	0x2000027a
 8001620:	20000284 	.word	0x20000284
 8001624:	20000285 	.word	0x20000285
 8001628:	20000288 	.word	0x20000288
 800162c:	20000289 	.word	0x20000289
 8001630:	2000028c 	.word	0x2000028c
 8001634:	2000028d 	.word	0x2000028d
 8001638:	2000028e 	.word	0x2000028e
 800163c:	20000290 	.word	0x20000290
 8001640:	20000248 	.word	0x20000248
 8001644:	20000249 	.word	0x20000249
 8001648:	2000024a 	.word	0x2000024a
 800164c:	20000254 	.word	0x20000254
 8001650:	20000255 	.word	0x20000255
 8001654:	2000024c 	.word	0x2000024c
 8001658:	4ba6      	ldr	r3, [pc, #664]	; (80018f4 <main+0x5c0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4313      	orrs	r3, r2
 800165e:	4aa5      	ldr	r2, [pc, #660]	; (80018f4 <main+0x5c0>)
 8001660:	6013      	str	r3, [r2, #0]
		  pressureData |= (0xFF << 24);
 8001662:	4ba4      	ldr	r3, [pc, #656]	; (80018f4 <main+0x5c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800166a:	4aa2      	ldr	r2, [pc, #648]	; (80018f4 <main+0x5c0>)
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e007      	b.n	8001680 <main+0x34c>
	  }else{
		  pressureData |= (rawPressureData[2] << 16);
 8001670:	4ba1      	ldr	r3, [pc, #644]	; (80018f8 <main+0x5c4>)
 8001672:	789b      	ldrb	r3, [r3, #2]
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	4b9f      	ldr	r3, [pc, #636]	; (80018f4 <main+0x5c0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	4a9d      	ldr	r2, [pc, #628]	; (80018f4 <main+0x5c0>)
 800167e:	6013      	str	r3, [r2, #0]
	  }
	  pressure = pressureData/4096.0;
 8001680:	4b9c      	ldr	r3, [pc, #624]	; (80018f4 <main+0x5c0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff6d 	bl	8000564 <__aeabi_i2d>
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b9b      	ldr	r3, [pc, #620]	; (80018fc <main+0x5c8>)
 8001690:	f7ff f8fc 	bl	800088c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faa4 	bl	8000be8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a97      	ldr	r2, [pc, #604]	; (8001900 <main+0x5cc>)
 80016a4:	6013      	str	r3, [r2, #0]

	  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
 80016a6:	4b97      	ldr	r3, [pc, #604]	; (8001904 <main+0x5d0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b95      	ldr	r3, [pc, #596]	; (8001904 <main+0x5d0>)
 80016ae:	785b      	ldrb	r3, [r3, #1]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b92      	ldr	r3, [pc, #584]	; (8001908 <main+0x5d4>)
 80016be:	801a      	strh	r2, [r3, #0]
	  temperature = 42.5 + temperatureData/480.0;
 80016c0:	4b91      	ldr	r3, [pc, #580]	; (8001908 <main+0x5d4>)
 80016c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff4c 	bl	8000564 <__aeabi_i2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b8e      	ldr	r3, [pc, #568]	; (800190c <main+0x5d8>)
 80016d2:	f7ff f8db 	bl	800088c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <main+0x5dc>)
 80016e4:	f7fe fdf2 	bl	80002cc <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa7a 	bl	8000be8 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a87      	ldr	r2, [pc, #540]	; (8001914 <main+0x5e0>)
 80016f8:	6013      	str	r3, [r2, #0]


	  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2A, 1, &rawTemperatureData2[0], 1, 50);
 80016fa:	2332      	movs	r3, #50	; 0x32
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2301      	movs	r3, #1
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	4b85      	ldr	r3, [pc, #532]	; (8001918 <main+0x5e4>)
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	222a      	movs	r2, #42	; 0x2a
 800170a:	21be      	movs	r1, #190	; 0xbe
 800170c:	4883      	ldr	r0, [pc, #524]	; (800191c <main+0x5e8>)
 800170e:	f001 f849 	bl	80027a4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x2B, 1, &rawTemperatureData2[1], 1, 50);
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <main+0x5ec>)
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	222b      	movs	r2, #43	; 0x2b
 8001722:	21be      	movs	r1, #190	; 0xbe
 8001724:	487d      	ldr	r0, [pc, #500]	; (800191c <main+0x5e8>)
 8001726:	f001 f83d 	bl	80027a4 <HAL_I2C_Mem_Read>

	  temperatureData2 = rawTemperatureData2[0] + (rawTemperatureData2[1] << 8);
 800172a:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <main+0x5e4>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b79      	ldr	r3, [pc, #484]	; (8001918 <main+0x5e4>)
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	b29b      	uxth	r3, r3
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b29b      	uxth	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	b21a      	sxth	r2, r3
 8001740:	4b78      	ldr	r3, [pc, #480]	; (8001924 <main+0x5f0>)
 8001742:	801a      	strh	r2, [r3, #0]
	  RealTdeg0 = (((uint16_t)Tdeg[0] + (((uint16_t)t0t1MSB & 0b11) << 8)))/8.0;
 8001744:	4b78      	ldr	r3, [pc, #480]	; (8001928 <main+0x5f4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b78      	ldr	r3, [pc, #480]	; (800192c <main+0x5f8>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001754:	4413      	add	r3, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ff04 	bl	8000564 <__aeabi_i2d>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b73      	ldr	r3, [pc, #460]	; (8001930 <main+0x5fc>)
 8001762:	f7ff f893 	bl	800088c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa3b 	bl	8000be8 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <main+0x600>)
 8001776:	6013      	str	r3, [r2, #0]
	  RealTdeg1 = (((uint16_t)Tdeg[1] + (((uint16_t)t0t1MSB & 0b1100) << 6)))/8.0;
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <main+0x5f4>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	461a      	mov	r2, r3
 800177e:	4b6b      	ldr	r3, [pc, #428]	; (800192c <main+0x5f8>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	019b      	lsls	r3, r3, #6
 8001784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001788:	4413      	add	r3, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feea 	bl	8000564 <__aeabi_i2d>
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b66      	ldr	r3, [pc, #408]	; (8001930 <main+0x5fc>)
 8001796:	f7ff f879 	bl	800088c <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7ff fa21 	bl	8000be8 <__aeabi_d2f>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a63      	ldr	r2, [pc, #396]	; (8001938 <main+0x604>)
 80017aa:	6013      	str	r3, [r2, #0]
	  temperature2 = lerp(RealTdeg0, RealTdeg1, (float)(temperatureData2 - T0)/(T1-T0));
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <main+0x600>)
 80017ae:	edd3 6a00 	vldr	s13, [r3]
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <main+0x604>)
 80017b4:	ed93 6a00 	vldr	s12, [r3]
 80017b8:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <main+0x5f0>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <main+0x608>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d0:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <main+0x60c>)
 80017d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b58      	ldr	r3, [pc, #352]	; (800193c <main+0x608>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e8:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80017ec:	eeb0 1a65 	vmov.f32	s2, s11
 80017f0:	eef0 0a46 	vmov.f32	s1, s12
 80017f4:	eeb0 0a66 	vmov.f32	s0, s13
 80017f8:	f7ff fd7e 	bl	80012f8 <lerp>
 80017fc:	eef0 7a40 	vmov.f32	s15, s0
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <main+0x610>)
 8001802:	edc3 7a00 	vstr	s15, [r3]

	  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x28, 1, &rawHumidityData[0], 1, 50);
 8001806:	2332      	movs	r3, #50	; 0x32
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <main+0x614>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	2228      	movs	r2, #40	; 0x28
 8001816:	21be      	movs	r1, #190	; 0xbe
 8001818:	4840      	ldr	r0, [pc, #256]	; (800191c <main+0x5e8>)
 800181a:	f000 ffc3 	bl	80027a4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, HUMIDITY_TEMPERATURE_SENSOR_ADDR, 0x29, 1, &rawHumidityData[1], 1, 50);
 800181e:	2332      	movs	r3, #50	; 0x32
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2301      	movs	r3, #1
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <main+0x618>)
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2301      	movs	r3, #1
 800182c:	2229      	movs	r2, #41	; 0x29
 800182e:	21be      	movs	r1, #190	; 0xbe
 8001830:	483a      	ldr	r0, [pc, #232]	; (800191c <main+0x5e8>)
 8001832:	f000 ffb7 	bl	80027a4 <HAL_I2C_Mem_Read>

	  humidityData = rawHumidityData[0] + (rawHumidityData[1] << 8);
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <main+0x614>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <main+0x614>)
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	b29b      	uxth	r3, r3
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b29b      	uxth	r3, r3
 800184a:	b21a      	sxth	r2, r3
 800184c:	4b40      	ldr	r3, [pc, #256]	; (8001950 <main+0x61c>)
 800184e:	801a      	strh	r2, [r3, #0]
	  Halpha = (float)(humidityData - H0)/(H1-H0);
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <main+0x61c>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	461a      	mov	r2, r3
 8001858:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <main+0x620>)
 800185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <main+0x624>)
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	461a      	mov	r2, r3
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <main+0x620>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <main+0x628>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	  humidity = lerp(Hdeg[0]/2.0, Hdeg[1]/2.0, Halpha);
 800188a:	4b35      	ldr	r3, [pc, #212]	; (8001960 <main+0x62c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe68 	bl	8000564 <__aeabi_i2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800189c:	f7fe fff6 	bl	800088c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f99e 	bl	8000be8 <__aeabi_d2f>
 80018ac:	4604      	mov	r4, r0
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <main+0x62c>)
 80018b0:	785b      	ldrb	r3, [r3, #1]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe56 	bl	8000564 <__aeabi_i2d>
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018c0:	f7fe ffe4 	bl	800088c <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f98c 	bl	8000be8 <__aeabi_d2f>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <main+0x628>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	eeb0 1a67 	vmov.f32	s2, s15
 80018dc:	ee00 2a90 	vmov	s1, r2
 80018e0:	ee00 4a10 	vmov	s0, r4
 80018e4:	f7ff fd08 	bl	80012f8 <lerp>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <main+0x630>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(1000);
 80018f2:	e629      	b.n	8001548 <main+0x214>
 80018f4:	2000024c 	.word	0x2000024c
 80018f8:	20000248 	.word	0x20000248
 80018fc:	40b00000 	.word	0x40b00000
 8001900:	20000250 	.word	0x20000250
 8001904:	20000254 	.word	0x20000254
 8001908:	20000256 	.word	0x20000256
 800190c:	407e0000 	.word	0x407e0000
 8001910:	40454000 	.word	0x40454000
 8001914:	20000258 	.word	0x20000258
 8001918:	2000025c 	.word	0x2000025c
 800191c:	200001f8 	.word	0x200001f8
 8001920:	2000025d 	.word	0x2000025d
 8001924:	2000025e 	.word	0x2000025e
 8001928:	2000026c 	.word	0x2000026c
 800192c:	2000026e 	.word	0x2000026e
 8001930:	40200000 	.word	0x40200000
 8001934:	20000270 	.word	0x20000270
 8001938:	20000274 	.word	0x20000274
 800193c:	20000278 	.word	0x20000278
 8001940:	2000027a 	.word	0x2000027a
 8001944:	20000260 	.word	0x20000260
 8001948:	2000027c 	.word	0x2000027c
 800194c:	2000027d 	.word	0x2000027d
 8001950:	2000027e 	.word	0x2000027e
 8001954:	2000028e 	.word	0x2000028e
 8001958:	20000290 	.word	0x20000290
 800195c:	20000294 	.word	0x20000294
 8001960:	2000028c 	.word	0x2000028c
 8001964:	20000280 	.word	0x20000280

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f003 f940 	bl	8004bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800198c:	f001 fb62 	bl	8003054 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <SystemClock_Config+0xc8>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <SystemClock_Config+0xc8>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <SystemClock_Config+0xc8>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <SystemClock_Config+0xcc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <SystemClock_Config+0xcc>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <SystemClock_Config+0xcc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ce:	2302      	movs	r3, #2
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d8:	2304      	movs	r3, #4
 80019da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019dc:	2348      	movs	r3, #72	; 0x48
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019e4:	2303      	movs	r3, #3
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	4618      	mov	r0, r3
 80019ee:	f001 fb41 	bl	8003074 <HAL_RCC_OscConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f8:	f000 f81e 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fc:	230f      	movs	r3, #15
 80019fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a00:	2302      	movs	r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 fdcf 	bl	80035bc <HAL_RCC_ClockConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a24:	f000 f808 	bl	8001a38 <Error_Handler>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3750      	adds	r7, #80	; 0x50
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_MspInit+0x44>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <HAL_MspInit+0x44>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_MspInit+0x44>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_MspInit+0x44>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_MspInit+0x44>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_MspInit+0x44>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <NMI_Handler+0x4>

08001a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <MemManage_Handler+0x4>

08001a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad8:	f000 f9d0 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	return 1;
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_kill>:

int _kill(int pid, int sig)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001afa:	f003 f855 	bl	8004ba8 <__errno>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2216      	movs	r2, #22
 8001b02:	601a      	str	r2, [r3, #0]
	return -1;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_exit>:

void _exit (int status)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffe7 	bl	8001af0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b22:	e7fe      	b.n	8001b22 <_exit+0x12>

08001b24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e00a      	b.n	8001b4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b36:	f3af 8000 	nop.w
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	60ba      	str	r2, [r7, #8]
 8001b42:	b2ca      	uxtb	r2, r1
 8001b44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf0      	blt.n	8001b36 <_read+0x12>
	}

return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e009      	b.n	8001b84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fbab 	bl	80012d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf1      	blt.n	8001b70 <_write+0x12>
	}
	return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_close>:

int _close(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_isatty>:

int _isatty(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c30:	f002 ffba 	bl	8004ba8 <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	220c      	movs	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20050000 	.word	0x20050000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	20000298 	.word	0x20000298
 8001c68:	20000338 	.word	0x20000338

08001c6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <SystemInit+0x20>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <SystemInit+0x20>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <MX_USART3_UART_Init+0x5c>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART3_UART_Init+0x58>)
 8001cd4:	f002 fa88 	bl	80041e8 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cde:	f7ff feab 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000029c 	.word	0x2000029c
 8001cec:	40004800 	.word	0x40004800

08001cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0aa      	sub	sp, #168	; 0xa8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	2284      	movs	r2, #132	; 0x84
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 ff73 	bl	8004bfc <memset>
  if(uartHandle->Instance==USART3)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_UART_MspInit+0xb4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d13c      	bne.n	8001d9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fe6a 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d3a:	f7ff fe7d 	bl	8001a38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_UART_MspInit+0xbc>)
 8001d96:	f000 f99b 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	37a8      	adds	r7, #168	; 0xa8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40004800 	.word	0x40004800
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020c00 	.word	0x40020c00

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001db6:	490e      	ldr	r1, [pc, #56]	; (8001df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dcc:	4c0b      	ldr	r4, [pc, #44]	; (8001dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dda:	f7ff ff47 	bl	8001c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f002 fee9 	bl	8004bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7ff faa7 	bl	8001334 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001df4:	08007a54 	.word	0x08007a54
  ldr r2, =_sbss
 8001df8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001dfc:	20000334 	.word	0x20000334

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>

08001e02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e06:	2003      	movs	r0, #3
 8001e08:	f000 f92e 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f000 f805 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e12:	f7ff fe17 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f93b 	bl	80020b6 <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 f911 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000320 	.word	0x20000320

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000320 	.word	0x20000320

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	05fa0000 	.word	0x05fa0000

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff8e 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff47 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff5c 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff8e 	bl	8001fbc <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffb0 	bl	8002024 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e175      	b.n	80023dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 8164 	bne.w	80023d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_GPIO_Init+0x56>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d017      	beq.n	80021c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80be 	beq.w	80023d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_GPIO_Init+0x324>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <HAL_GPIO_Init+0x324>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_GPIO_Init+0x324>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002272:	4a61      	ldr	r2, [pc, #388]	; (80023f8 <HAL_GPIO_Init+0x328>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a58      	ldr	r2, [pc, #352]	; (80023fc <HAL_GPIO_Init+0x32c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d037      	beq.n	800230e <HAL_GPIO_Init+0x23e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_GPIO_Init+0x330>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_GPIO_Init+0x23a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_GPIO_Init+0x334>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x236>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a55      	ldr	r2, [pc, #340]	; (8002408 <HAL_GPIO_Init+0x338>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x232>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_GPIO_Init+0x33c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x22e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a53      	ldr	r2, [pc, #332]	; (8002410 <HAL_GPIO_Init+0x340>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x22a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_GPIO_Init+0x344>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x226>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a51      	ldr	r2, [pc, #324]	; (8002418 <HAL_GPIO_Init+0x348>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x222>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a50      	ldr	r2, [pc, #320]	; (800241c <HAL_GPIO_Init+0x34c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x21e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	; (8002420 <HAL_GPIO_Init+0x350>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x21a>
 80022e6:	2309      	movs	r3, #9
 80022e8:	e012      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022ea:	230a      	movs	r3, #10
 80022ec:	e010      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022ee:	2308      	movs	r3, #8
 80022f0:	e00e      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e00c      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022f6:	2306      	movs	r3, #6
 80022f8:	e00a      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022fa:	2305      	movs	r3, #5
 80022fc:	e008      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022fe:	2304      	movs	r3, #4
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x240>
 8002302:	2303      	movs	r3, #3
 8002304:	e004      	b.n	8002310 <HAL_GPIO_Init+0x240>
 8002306:	2302      	movs	r3, #2
 8002308:	e002      	b.n	8002310 <HAL_GPIO_Init+0x240>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x240>
 800230e:	2300      	movs	r3, #0
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	f002 0203 	and.w	r2, r2, #3
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	4093      	lsls	r3, r2
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002320:	4935      	ldr	r1, [pc, #212]	; (80023f8 <HAL_GPIO_Init+0x328>)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_GPIO_Init+0x354>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <HAL_GPIO_Init+0x354>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_GPIO_Init+0x354>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800237c:	4a29      	ldr	r2, [pc, #164]	; (8002424 <HAL_GPIO_Init+0x354>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <HAL_GPIO_Init+0x354>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a6:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <HAL_GPIO_Init+0x354>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_GPIO_Init+0x354>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d0:	4a14      	ldr	r2, [pc, #80]	; (8002424 <HAL_GPIO_Init+0x354>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3301      	adds	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	f67f ae86 	bls.w	80020f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40020000 	.word	0x40020000
 8002400:	40020400 	.word	0x40020400
 8002404:	40020800 	.word	0x40020800
 8002408:	40020c00 	.word	0x40020c00
 800240c:	40021000 	.word	0x40021000
 8002410:	40021400 	.word	0x40021400
 8002414:	40021800 	.word	0x40021800
 8002418:	40021c00 	.word	0x40021c00
 800241c:	40022000 	.word	0x40022000
 8002420:	40022400 	.word	0x40022400
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fec6 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e006      	b.n	80024e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d104      	bne.n	80024f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_I2C_Init+0x11c>)
 8002502:	430b      	orrs	r3, r1
 8002504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	02008000 	.word	0x02008000

0800257c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4603      	mov	r3, r0
 800258c:	817b      	strh	r3, [r7, #10]
 800258e:	460b      	mov	r3, r1
 8002590:	813b      	strh	r3, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80f9 	bne.w	8002796 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_I2C_Mem_Write+0x34>
 80025aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0ed      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Mem_Write+0x4e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0e6      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d2:	f7ff fc67 	bl	8001ea4 <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fac3 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d1      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2221      	movs	r2, #33	; 0x21
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800261c:	88f8      	ldrh	r0, [r7, #6]
 800261e:	893a      	ldrh	r2, [r7, #8]
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4603      	mov	r3, r0
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f9d3 	bl	80029d8 <I2C_RequestMemoryWrite>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0a9      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d90e      	bls.n	800266c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fc2b 	bl	8002ec0 <I2C_TransferConfig>
 800266a:	e00f      	b.n	800268c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	b2da      	uxtb	r2, r3
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fc1a 	bl	8002ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 faad 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e07b      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d034      	beq.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d130      	bne.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2200      	movs	r2, #0
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fa3f 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e04d      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d90e      	bls.n	8002724 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	b2da      	uxtb	r2, r3
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fbcf 	bl	8002ec0 <I2C_TransferConfig>
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	b2da      	uxtb	r2, r3
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fbbe 	bl	8002ec0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d19e      	bne.n	800268c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa8c 	bl	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e01a      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2220      	movs	r2, #32
 8002768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_I2C_Mem_Write+0x224>)
 8002776:	400b      	ands	r3, r1
 8002778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	fe00e800 	.word	0xfe00e800

080027a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	f040 80fd 	bne.w	80029c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x34>
 80027d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0f1      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x4e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0ea      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027fa:	f7ff fb53 	bl	8001ea4 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2319      	movs	r3, #25
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f9af 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d5      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2222      	movs	r2, #34	; 0x22
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002844:	88f8      	ldrh	r0, [r7, #6]
 8002846:	893a      	ldrh	r2, [r7, #8]
 8002848:	8979      	ldrh	r1, [r7, #10]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4603      	mov	r3, r0
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f913 	bl	8002a80 <I2C_RequestMemoryRead>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0ad      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2bff      	cmp	r3, #255	; 0xff
 8002874:	d90e      	bls.n	8002894 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	b2da      	uxtb	r2, r3
 8002882:	8979      	ldrh	r1, [r7, #10]
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_I2C_Mem_Read+0x22c>)
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fb17 	bl	8002ec0 <I2C_TransferConfig>
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_I2C_Mem_Read+0x22c>)
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fb06 	bl	8002ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2200      	movs	r2, #0
 80028bc:	2104      	movs	r1, #4
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f956 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07c      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d034      	beq.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d130      	bne.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f927 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e04d      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	d90e      	bls.n	8002954 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	22ff      	movs	r2, #255	; 0xff
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	b2da      	uxtb	r2, r3
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fab7 	bl	8002ec0 <I2C_TransferConfig>
 8002952:	e00f      	b.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	b2da      	uxtb	r2, r3
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 faa6 	bl	8002ec0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d19a      	bne.n	80028b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f974 	bl	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01a      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_I2C_Mem_Read+0x230>)
 80029a6:	400b      	ands	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	80002400 	.word	0x80002400
 80029d4:	fe00e800 	.word	0xfe00e800

080029d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <I2C_RequestMemoryWrite+0xa4>)
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fa5d 	bl	8002ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	69b9      	ldr	r1, [r7, #24]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f8f0 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e02c      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28
 8002a2a:	e015      	b.n	8002a58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f8d6 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e012      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f884 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	80002000 	.word	0x80002000

08002a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <I2C_RequestMemoryRead+0xa4>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa0a 	bl	8002ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f89d 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02c      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac6:	893b      	ldrh	r3, [r7, #8]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad0:	e015      	b.n	8002afe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f883 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e012      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f831 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	80002000 	.word	0x80002000

08002b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d103      	bne.n	8002b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d007      	beq.n	8002b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	619a      	str	r2, [r3, #24]
  }
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	e022      	b.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d01e      	beq.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff f98b 	bl	8001ea4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e00f      	b.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d0cd      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bfc:	e02c      	b.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f870 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e02a      	b.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d01e      	beq.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7ff f943 	bl	8001ea4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d113      	bne.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d1cb      	bne.n	8002bfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c7c:	e028      	b.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f830 	bl	8002ce8 <I2C_IsErrorOccurred>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e026      	b.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7ff f907 	bl	8001ea4 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d1cf      	bne.n	8002c7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d075      	beq.n	8002e00 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d1c:	e056      	b.n	8002dcc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d052      	beq.n	8002dcc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7ff f8bd 	bl	8001ea4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_IsErrorOccurred+0x54>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d147      	bne.n	8002dcc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5e:	d12e      	bne.n	8002dbe <I2C_IsErrorOccurred+0xd6>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d66:	d02a      	beq.n	8002dbe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d027      	beq.n	8002dbe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d7e:	f7ff f891 	bl	8001ea4 <HAL_GetTick>
 8002d82:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d84:	e01b      	b.n	8002dbe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d86:	f7ff f88d 	bl	8001ea4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b19      	cmp	r3, #25
 8002d92:	d914      	bls.n	8002dbe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d1dc      	bne.n	8002d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d003      	beq.n	8002de2 <I2C_IsErrorOccurred+0xfa>
 8002dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d09d      	beq.n	8002d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2220      	movs	r2, #32
 8002df0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01c      	beq.n	8002eb0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fe56 	bl	8002b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <I2C_IsErrorOccurred+0x1d4>)
 8002e88:	400b      	ands	r3, r1
 8002e8a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	fe00e800 	.word	0xfe00e800

08002ec0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ed8:	7a7b      	ldrb	r3, [r7, #9]
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	0d5b      	lsrs	r3, r3, #21
 8002efa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <I2C_TransferConfig+0x60>)
 8002f00:	430b      	orrs	r3, r1
 8002f02:	43db      	mvns	r3, r3
 8002f04:	ea02 0103 	and.w	r1, r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	03ff63ff 	.word	0x03ff63ff

08002f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d138      	bne.n	8002fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e032      	b.n	8002fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d139      	bne.n	8003044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e033      	b.n	8003046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2224      	movs	r2, #36	; 0x24
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800300c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800305e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40007000 	.word	0x40007000

08003074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e291      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8087 	beq.w	80031a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003098:	4b96      	ldr	r3, [pc, #600]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d00c      	beq.n	80030be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a4:	4b93      	ldr	r3, [pc, #588]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d112      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62>
 80030b0:	4b90      	ldr	r3, [pc, #576]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030bc:	d10b      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030be:	4b8d      	ldr	r3, [pc, #564]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d06c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x130>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d168      	bne.n	80031a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e26b      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x7a>
 80030e0:	4b84      	ldr	r3, [pc, #528]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	e02e      	b.n	800314c <HAL_RCC_OscConfig+0xd8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x9c>
 80030f6:	4b7f      	ldr	r3, [pc, #508]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a7e      	ldr	r2, [pc, #504]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80030fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b7c      	ldr	r3, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7b      	ldr	r2, [pc, #492]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xd8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0xc0>
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a72      	ldr	r2, [pc, #456]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xd8>
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a6e      	ldr	r2, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6b      	ldr	r2, [pc, #428]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fea6 	bl	8001ea4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe fea2 	bl	8001ea4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e21f      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b61      	ldr	r3, [pc, #388]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xe8>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe fe92 	bl	8001ea4 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe fe8e 	bl	8001ea4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e20b      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x110>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d069      	beq.n	8003286 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b2:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x190>
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x17a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1df      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	493d      	ldr	r1, [pc, #244]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e040      	b.n	8003286 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fe44 	bl	8001ea4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe fe40 	bl	8001ea4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1bd      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4929      	ldr	r1, [pc, #164]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
 8003252:	e018      	b.n	8003286 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fe20 	bl	8001ea4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe fe1c 	bl	8001ea4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e199      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d038      	beq.n	8003304 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fe fdfd 	bl	8001ea4 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fe fdf9 	bl	8001ea4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e176      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x23a>
 80032cc:	e01a      	b.n	8003304 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_RCC_OscConfig+0x280>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fe fde3 	bl	8001ea4 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fe fddf 	bl	8001ea4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d903      	bls.n	80032f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e15c      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
 80032f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b91      	ldr	r3, [pc, #580]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ee      	bne.n	80032e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a4 	beq.w	800345a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4b8b      	ldr	r3, [pc, #556]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a87      	ldr	r2, [pc, #540]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333a:	4b82      	ldr	r3, [pc, #520]	; (8003544 <HAL_RCC_OscConfig+0x4d0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x4d0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7e      	ldr	r2, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x4d0>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe fda7 	bl	8001ea4 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe fda3 	bl	8001ea4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e120      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336c:	4b75      	ldr	r3, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x4d0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x31a>
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e02d      	b.n	80033ea <HAL_RCC_OscConfig+0x376>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x33c>
 8003396:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a69      	ldr	r2, [pc, #420]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a66      	ldr	r2, [pc, #408]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e01c      	b.n	80033ea <HAL_RCC_OscConfig+0x376>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x35e>
 80033b8:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a60      	ldr	r2, [pc, #384]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	4b5e      	ldr	r3, [pc, #376]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
 80033d0:	e00b      	b.n	80033ea <HAL_RCC_OscConfig+0x376>
 80033d2:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	4b58      	ldr	r3, [pc, #352]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a57      	ldr	r2, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d015      	beq.n	800341e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fe fd57 	bl	8001ea4 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe fd53 	bl	8001ea4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0ce      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ee      	beq.n	80033fa <HAL_RCC_OscConfig+0x386>
 800341c:	e014      	b.n	8003448 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fe fd41 	bl	8001ea4 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fd3d 	bl	8001ea4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e0b8      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343c:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a3b      	ldr	r2, [pc, #236]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80a4 	beq.w	80035ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d06b      	beq.n	8003548 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d149      	bne.n	800350c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a30      	ldr	r2, [pc, #192]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe fd0e 	bl	8001ea4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fd0a 	bl	8001ea4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e087      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b28      	ldr	r3, [pc, #160]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	4313      	orrs	r3, r2
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fcde 	bl	8001ea4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fcda 	bl	8001ea4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e057      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x478>
 800350a:	e04f      	b.n	80035ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fcc4 	bl	8001ea4 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fcc0 	bl	8001ea4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e03d      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x4ac>
 800353e:	e035      	b.n	80035ac <HAL_RCC_OscConfig+0x538>
 8003540:	40023800 	.word	0x40023800
 8003544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x544>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d028      	beq.n	80035a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d121      	bne.n	80035a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d11a      	bne.n	80035a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800357e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003580:	4293      	cmp	r3, r2
 8003582:	d111      	bne.n	80035a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0d0      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d910      	bls.n	8003604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b67      	ldr	r3, [pc, #412]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 020f 	bic.w	r2, r3, #15
 80035ea:	4965      	ldr	r1, [pc, #404]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b63      	ldr	r3, [pc, #396]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b8      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800361c:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a52      	ldr	r2, [pc, #328]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800363e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	494d      	ldr	r1, [pc, #308]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d040      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d115      	bne.n	800369e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e073      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06b      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369e:	4b39      	ldr	r3, [pc, #228]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 0203 	bic.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4936      	ldr	r1, [pc, #216]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b0:	f7fe fbf8 	bl	8001ea4 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b8:	f7fe fbf4 	bl	8001ea4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e053      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 020c 	and.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	429a      	cmp	r2, r3
 80036de:	d1eb      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e0:	4b27      	ldr	r3, [pc, #156]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d210      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 020f 	bic.w	r2, r3, #15
 80036f6:	4922      	ldr	r1, [pc, #136]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e032      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4916      	ldr	r1, [pc, #88]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490e      	ldr	r1, [pc, #56]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f821 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490a      	ldr	r1, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x1cc>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <HAL_RCC_ClockConfig+0x1d0>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1d4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fb54 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00
 8003784:	40023800 	.word	0x40023800
 8003788:	08007650 	.word	0x08007650
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b094      	sub	sp, #80	; 0x50
 800379a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	647b      	str	r3, [r7, #68]	; 0x44
 80037a0:	2300      	movs	r3, #0
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	2300      	movs	r3, #0
 80037a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ac:	4b79      	ldr	r3, [pc, #484]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d00d      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x40>
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	f200 80e1 	bhi.w	8003980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x34>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x3a>
 80037c6:	e0db      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b73      	ldr	r3, [pc, #460]	; (8003998 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037cc:	e0db      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ce:	4b73      	ldr	r3, [pc, #460]	; (800399c <HAL_RCC_GetSysClockFreq+0x208>)
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d2:	e0d8      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d4:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037de:	4b6d      	ldr	r3, [pc, #436]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	2200      	movs	r2, #0
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
 8003802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003806:	4622      	mov	r2, r4
 8003808:	462b      	mov	r3, r5
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	0159      	lsls	r1, r3, #5
 8003814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003818:	0150      	lsls	r0, r2, #5
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4621      	mov	r1, r4
 8003820:	1a51      	subs	r1, r2, r1
 8003822:	6139      	str	r1, [r7, #16]
 8003824:	4629      	mov	r1, r5
 8003826:	eb63 0301 	sbc.w	r3, r3, r1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003838:	4659      	mov	r1, fp
 800383a:	018b      	lsls	r3, r1, #6
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003842:	4651      	mov	r1, sl
 8003844:	018a      	lsls	r2, r1, #6
 8003846:	4651      	mov	r1, sl
 8003848:	ebb2 0801 	subs.w	r8, r2, r1
 800384c:	4659      	mov	r1, fp
 800384e:	eb63 0901 	sbc.w	r9, r3, r1
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003866:	4690      	mov	r8, r2
 8003868:	4699      	mov	r9, r3
 800386a:	4623      	mov	r3, r4
 800386c:	eb18 0303 	adds.w	r3, r8, r3
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	462b      	mov	r3, r5
 8003874:	eb49 0303 	adc.w	r3, r9, r3
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003886:	4629      	mov	r1, r5
 8003888:	024b      	lsls	r3, r1, #9
 800388a:	4621      	mov	r1, r4
 800388c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003890:	4621      	mov	r1, r4
 8003892:	024a      	lsls	r2, r1, #9
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389a:	2200      	movs	r2, #0
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
 800389e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a4:	f7fd f9f0 	bl	8000c88 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b0:	e058      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	2200      	movs	r2, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	4611      	mov	r1, r2
 80038be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038cc:	4642      	mov	r2, r8
 80038ce:	464b      	mov	r3, r9
 80038d0:	f04f 0000 	mov.w	r0, #0
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	0159      	lsls	r1, r3, #5
 80038da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038de:	0150      	lsls	r0, r2, #5
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4641      	mov	r1, r8
 80038e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ea:	4649      	mov	r1, r9
 80038ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003904:	ebb2 040a 	subs.w	r4, r2, sl
 8003908:	eb63 050b 	sbc.w	r5, r3, fp
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	00eb      	lsls	r3, r5, #3
 8003916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391a:	00e2      	lsls	r2, r4, #3
 800391c:	4614      	mov	r4, r2
 800391e:	461d      	mov	r5, r3
 8003920:	4643      	mov	r3, r8
 8003922:	18e3      	adds	r3, r4, r3
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	464b      	mov	r3, r9
 8003928:	eb45 0303 	adc.w	r3, r5, r3
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393a:	4629      	mov	r1, r5
 800393c:	028b      	lsls	r3, r1, #10
 800393e:	4621      	mov	r1, r4
 8003940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003944:	4621      	mov	r1, r4
 8003946:	028a      	lsls	r2, r1, #10
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394e:	2200      	movs	r2, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	61fa      	str	r2, [r7, #28]
 8003954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003958:	f7fd f996 	bl	8000c88 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetSysClockFreq+0x204>)
 8003982:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003988:	4618      	mov	r0, r3
 800398a:	3750      	adds	r7, #80	; 0x50
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	00f42400 	.word	0x00f42400
 800399c:	007a1200 	.word	0x007a1200

080039a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000000 	.word	0x20000000

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039bc:	f7ff fff0 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0a9b      	lsrs	r3, r3, #10
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08007660 	.word	0x08007660

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039e4:	f7ff ffdc 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0b5b      	lsrs	r3, r3, #13
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800
 8003a04:	08007660 	.word	0x08007660

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d012      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a30:	4b69      	ldr	r3, [pc, #420]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a68      	ldr	r2, [pc, #416]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a3a:	6093      	str	r3, [r2, #8]
 8003a3c:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	4964      	ldr	r1, [pc, #400]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d017      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a62:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	4959      	ldr	r1, [pc, #356]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a80:	d101      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	494a      	ldr	r1, [pc, #296]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 808b 	beq.w	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	4a39      	ldr	r2, [pc, #228]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	; 0x40
 8003af8:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b04:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fe f9c8 	bl	8001ea4 <HAL_GetTick>
 8003b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fe f9c4 	bl	8001ea4 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	; 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e357      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d035      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d02e      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b54:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d114      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe f98c 	bl	8001ea4 <HAL_GetTick>
 8003b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fe f988 	bl	8001ea4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e319      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0ee      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bce:	400b      	ands	r3, r1
 8003bd0:	4901      	ldr	r1, [pc, #4]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	0ffffcff 	.word	0x0ffffcff
 8003be4:	4baa      	ldr	r3, [pc, #680]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4aa9      	ldr	r2, [pc, #676]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	4ba7      	ldr	r3, [pc, #668]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	49a4      	ldr	r1, [pc, #656]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c0e:	4ba0      	ldr	r3, [pc, #640]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	4a9e      	ldr	r2, [pc, #632]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c1e:	4b9c      	ldr	r3, [pc, #624]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	4999      	ldr	r1, [pc, #612]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3c:	4b94      	ldr	r3, [pc, #592]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4a:	4991      	ldr	r1, [pc, #580]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5e:	4b8c      	ldr	r3, [pc, #560]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6c:	4988      	ldr	r1, [pc, #544]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c80:	4b83      	ldr	r3, [pc, #524]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8e:	4980      	ldr	r1, [pc, #512]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4977      	ldr	r1, [pc, #476]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc4:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f023 0203 	bic.w	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	496f      	ldr	r1, [pc, #444]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f023 020c 	bic.w	r2, r3, #12
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	4966      	ldr	r1, [pc, #408]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d08:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	495e      	ldr	r1, [pc, #376]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d2a:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	4955      	ldr	r1, [pc, #340]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d4c:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	494d      	ldr	r1, [pc, #308]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d6e:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	4944      	ldr	r1, [pc, #272]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d90:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	493c      	ldr	r1, [pc, #240]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003db2:	4b37      	ldr	r3, [pc, #220]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	4933      	ldr	r1, [pc, #204]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de2:	492b      	ldr	r1, [pc, #172]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d011      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e04:	4922      	ldr	r1, [pc, #136]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e14:	d101      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	4912      	ldr	r1, [pc, #72]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e68:	4909      	ldr	r1, [pc, #36]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d006      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80d9 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e84:	4b02      	ldr	r3, [pc, #8]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a01      	ldr	r2, [pc, #4]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e8e:	e001      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e96:	f7fe f805 	bl	8001ea4 <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e9e:	f7fe f801 	bl	8001ea4 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e194      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb0:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d021      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11d      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ede:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee4:	0e1b      	lsrs	r3, r3, #24
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	019a      	lsls	r2, r3, #6
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	071b      	lsls	r3, r3, #28
 8003f04:	4957      	ldr	r1, [pc, #348]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02e      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f36:	d129      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f38:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	0f1b      	lsrs	r3, r3, #28
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	019a      	lsls	r2, r3, #6
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	071b      	lsls	r3, r3, #28
 8003f6c:	493d      	ldr	r1, [pc, #244]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	f023 021f 	bic.w	r2, r3, #31
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	3b01      	subs	r3, #1
 8003f84:	4937      	ldr	r1, [pc, #220]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01d      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9e:	0e1b      	lsrs	r3, r3, #24
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	0f1b      	lsrs	r3, r3, #28
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	019a      	lsls	r2, r3, #6
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	071b      	lsls	r3, r3, #28
 8003fcc:	4925      	ldr	r1, [pc, #148]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d011      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	019a      	lsls	r2, r3, #6
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	071b      	lsls	r3, r3, #28
 8003ffc:	4919      	ldr	r1, [pc, #100]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800400e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fd ff48 	bl	8001ea4 <HAL_GetTick>
 8004014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004018:	f7fd ff44 	bl	8001ea4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0d7      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	f040 80cd 	bne.w	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404a:	f7fd ff2b 	bl	8001ea4 <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004050:	e00a      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004052:	f7fd ff27 	bl	8001ea4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b64      	cmp	r3, #100	; 0x64
 800405e:	d903      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0ba      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004064:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004068:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004074:	d0ed      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004092:	2b00      	cmp	r3, #0
 8004094:	d02e      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d12a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800409e:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040ac:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	0f1b      	lsrs	r3, r3, #28
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	019a      	lsls	r2, r3, #6
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	071b      	lsls	r3, r3, #28
 80040d2:	4944      	ldr	r1, [pc, #272]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040da:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	493d      	ldr	r1, [pc, #244]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d022      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004108:	d11d      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800410a:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	0e1b      	lsrs	r3, r3, #24
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004118:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	0f1b      	lsrs	r3, r3, #28
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	019a      	lsls	r2, r3, #6
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	071b      	lsls	r3, r3, #28
 800413e:	4929      	ldr	r1, [pc, #164]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d028      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004160:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	019a      	lsls	r2, r3, #6
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	431a      	orrs	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	4917      	ldr	r1, [pc, #92]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4911      	ldr	r1, [pc, #68]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fd fe78 	bl	8001ea4 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b8:	f7fd fe74 	bl	8001ea4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e007      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d6:	d1ef      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800

080041e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e040      	b.n	800427c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd fd70 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8c0 	bl	80043ac <UART_SetConfig>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e022      	b.n	800427c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fb18 	bl	8004874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fb9f 	bl	80049b8 <UART_CheckIdleState>
 800427a:	4603      	mov	r3, r0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004298:	2b20      	cmp	r3, #32
 800429a:	f040 8081 	bne.w	80043a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_UART_Transmit+0x26>
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e079      	b.n	80043a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Transmit+0x38>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e072      	b.n	80043a2 <HAL_UART_Transmit+0x11e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2221      	movs	r2, #33	; 0x21
 80042d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042d2:	f7fd fde7 	bl	8001ea4 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f0:	d108      	bne.n	8004304 <HAL_UART_Transmit+0x80>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e003      	b.n	800430c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004314:	e02c      	b.n	8004370 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fb7c 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e038      	b.n	80043a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3302      	adds	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e007      	b.n	800435e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	3301      	adds	r3, #1
 800435c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1cc      	bne.n	8004316 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2200      	movs	r2, #0
 8004384:	2140      	movs	r1, #64	; 0x40
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fb49 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e005      	b.n	80043a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4ba6      	ldr	r3, [pc, #664]	; (8004670 <UART_SetConfig+0x2c4>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	430a      	orrs	r2, r1
 800441c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a94      	ldr	r2, [pc, #592]	; (8004674 <UART_SetConfig+0x2c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d120      	bne.n	800446a <UART_SetConfig+0xbe>
 8004428:	4b93      	ldr	r3, [pc, #588]	; (8004678 <UART_SetConfig+0x2cc>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b03      	cmp	r3, #3
 8004434:	d816      	bhi.n	8004464 <UART_SetConfig+0xb8>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x90>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	0800444d 	.word	0x0800444d
 8004440:	08004459 	.word	0x08004459
 8004444:	08004453 	.word	0x08004453
 8004448:	0800445f 	.word	0x0800445f
 800444c:	2301      	movs	r3, #1
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e150      	b.n	80046f4 <UART_SetConfig+0x348>
 8004452:	2302      	movs	r3, #2
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e14d      	b.n	80046f4 <UART_SetConfig+0x348>
 8004458:	2304      	movs	r3, #4
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e14a      	b.n	80046f4 <UART_SetConfig+0x348>
 800445e:	2308      	movs	r3, #8
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e147      	b.n	80046f4 <UART_SetConfig+0x348>
 8004464:	2310      	movs	r3, #16
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e144      	b.n	80046f4 <UART_SetConfig+0x348>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a83      	ldr	r2, [pc, #524]	; (800467c <UART_SetConfig+0x2d0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d132      	bne.n	80044da <UART_SetConfig+0x12e>
 8004474:	4b80      	ldr	r3, [pc, #512]	; (8004678 <UART_SetConfig+0x2cc>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d828      	bhi.n	80044d4 <UART_SetConfig+0x128>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0xdc>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044bd 	.word	0x080044bd
 800448c:	080044d5 	.word	0x080044d5
 8004490:	080044d5 	.word	0x080044d5
 8004494:	080044d5 	.word	0x080044d5
 8004498:	080044c9 	.word	0x080044c9
 800449c:	080044d5 	.word	0x080044d5
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044d5 	.word	0x080044d5
 80044a8:	080044c3 	.word	0x080044c3
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044d5 	.word	0x080044d5
 80044b8:	080044cf 	.word	0x080044cf
 80044bc:	2300      	movs	r3, #0
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e118      	b.n	80046f4 <UART_SetConfig+0x348>
 80044c2:	2302      	movs	r3, #2
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e115      	b.n	80046f4 <UART_SetConfig+0x348>
 80044c8:	2304      	movs	r3, #4
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e112      	b.n	80046f4 <UART_SetConfig+0x348>
 80044ce:	2308      	movs	r3, #8
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e10f      	b.n	80046f4 <UART_SetConfig+0x348>
 80044d4:	2310      	movs	r3, #16
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e10c      	b.n	80046f4 <UART_SetConfig+0x348>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a68      	ldr	r2, [pc, #416]	; (8004680 <UART_SetConfig+0x2d4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d120      	bne.n	8004526 <UART_SetConfig+0x17a>
 80044e4:	4b64      	ldr	r3, [pc, #400]	; (8004678 <UART_SetConfig+0x2cc>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044ee:	2b30      	cmp	r3, #48	; 0x30
 80044f0:	d013      	beq.n	800451a <UART_SetConfig+0x16e>
 80044f2:	2b30      	cmp	r3, #48	; 0x30
 80044f4:	d814      	bhi.n	8004520 <UART_SetConfig+0x174>
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d009      	beq.n	800450e <UART_SetConfig+0x162>
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d810      	bhi.n	8004520 <UART_SetConfig+0x174>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <UART_SetConfig+0x15c>
 8004502:	2b10      	cmp	r3, #16
 8004504:	d006      	beq.n	8004514 <UART_SetConfig+0x168>
 8004506:	e00b      	b.n	8004520 <UART_SetConfig+0x174>
 8004508:	2300      	movs	r3, #0
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e0f2      	b.n	80046f4 <UART_SetConfig+0x348>
 800450e:	2302      	movs	r3, #2
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e0ef      	b.n	80046f4 <UART_SetConfig+0x348>
 8004514:	2304      	movs	r3, #4
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e0ec      	b.n	80046f4 <UART_SetConfig+0x348>
 800451a:	2308      	movs	r3, #8
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e0e9      	b.n	80046f4 <UART_SetConfig+0x348>
 8004520:	2310      	movs	r3, #16
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e0e6      	b.n	80046f4 <UART_SetConfig+0x348>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a56      	ldr	r2, [pc, #344]	; (8004684 <UART_SetConfig+0x2d8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d120      	bne.n	8004572 <UART_SetConfig+0x1c6>
 8004530:	4b51      	ldr	r3, [pc, #324]	; (8004678 <UART_SetConfig+0x2cc>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800453a:	2bc0      	cmp	r3, #192	; 0xc0
 800453c:	d013      	beq.n	8004566 <UART_SetConfig+0x1ba>
 800453e:	2bc0      	cmp	r3, #192	; 0xc0
 8004540:	d814      	bhi.n	800456c <UART_SetConfig+0x1c0>
 8004542:	2b80      	cmp	r3, #128	; 0x80
 8004544:	d009      	beq.n	800455a <UART_SetConfig+0x1ae>
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d810      	bhi.n	800456c <UART_SetConfig+0x1c0>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <UART_SetConfig+0x1a8>
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d006      	beq.n	8004560 <UART_SetConfig+0x1b4>
 8004552:	e00b      	b.n	800456c <UART_SetConfig+0x1c0>
 8004554:	2300      	movs	r3, #0
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e0cc      	b.n	80046f4 <UART_SetConfig+0x348>
 800455a:	2302      	movs	r3, #2
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e0c9      	b.n	80046f4 <UART_SetConfig+0x348>
 8004560:	2304      	movs	r3, #4
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e0c6      	b.n	80046f4 <UART_SetConfig+0x348>
 8004566:	2308      	movs	r3, #8
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e0c3      	b.n	80046f4 <UART_SetConfig+0x348>
 800456c:	2310      	movs	r3, #16
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e0c0      	b.n	80046f4 <UART_SetConfig+0x348>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a44      	ldr	r2, [pc, #272]	; (8004688 <UART_SetConfig+0x2dc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d125      	bne.n	80045c8 <UART_SetConfig+0x21c>
 800457c:	4b3e      	ldr	r3, [pc, #248]	; (8004678 <UART_SetConfig+0x2cc>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458a:	d017      	beq.n	80045bc <UART_SetConfig+0x210>
 800458c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004590:	d817      	bhi.n	80045c2 <UART_SetConfig+0x216>
 8004592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004596:	d00b      	beq.n	80045b0 <UART_SetConfig+0x204>
 8004598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459c:	d811      	bhi.n	80045c2 <UART_SetConfig+0x216>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <UART_SetConfig+0x1fe>
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a6:	d006      	beq.n	80045b6 <UART_SetConfig+0x20a>
 80045a8:	e00b      	b.n	80045c2 <UART_SetConfig+0x216>
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e0a1      	b.n	80046f4 <UART_SetConfig+0x348>
 80045b0:	2302      	movs	r3, #2
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e09e      	b.n	80046f4 <UART_SetConfig+0x348>
 80045b6:	2304      	movs	r3, #4
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e09b      	b.n	80046f4 <UART_SetConfig+0x348>
 80045bc:	2308      	movs	r3, #8
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e098      	b.n	80046f4 <UART_SetConfig+0x348>
 80045c2:	2310      	movs	r3, #16
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	e095      	b.n	80046f4 <UART_SetConfig+0x348>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2f      	ldr	r2, [pc, #188]	; (800468c <UART_SetConfig+0x2e0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d125      	bne.n	800461e <UART_SetConfig+0x272>
 80045d2:	4b29      	ldr	r3, [pc, #164]	; (8004678 <UART_SetConfig+0x2cc>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e0:	d017      	beq.n	8004612 <UART_SetConfig+0x266>
 80045e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e6:	d817      	bhi.n	8004618 <UART_SetConfig+0x26c>
 80045e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ec:	d00b      	beq.n	8004606 <UART_SetConfig+0x25a>
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f2:	d811      	bhi.n	8004618 <UART_SetConfig+0x26c>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <UART_SetConfig+0x254>
 80045f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fc:	d006      	beq.n	800460c <UART_SetConfig+0x260>
 80045fe:	e00b      	b.n	8004618 <UART_SetConfig+0x26c>
 8004600:	2301      	movs	r3, #1
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e076      	b.n	80046f4 <UART_SetConfig+0x348>
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e073      	b.n	80046f4 <UART_SetConfig+0x348>
 800460c:	2304      	movs	r3, #4
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e070      	b.n	80046f4 <UART_SetConfig+0x348>
 8004612:	2308      	movs	r3, #8
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e06d      	b.n	80046f4 <UART_SetConfig+0x348>
 8004618:	2310      	movs	r3, #16
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e06a      	b.n	80046f4 <UART_SetConfig+0x348>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <UART_SetConfig+0x2e4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d138      	bne.n	800469a <UART_SetConfig+0x2ee>
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <UART_SetConfig+0x2cc>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004632:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004636:	d017      	beq.n	8004668 <UART_SetConfig+0x2bc>
 8004638:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800463c:	d82a      	bhi.n	8004694 <UART_SetConfig+0x2e8>
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004642:	d00b      	beq.n	800465c <UART_SetConfig+0x2b0>
 8004644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004648:	d824      	bhi.n	8004694 <UART_SetConfig+0x2e8>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <UART_SetConfig+0x2aa>
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d006      	beq.n	8004662 <UART_SetConfig+0x2b6>
 8004654:	e01e      	b.n	8004694 <UART_SetConfig+0x2e8>
 8004656:	2300      	movs	r3, #0
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e04b      	b.n	80046f4 <UART_SetConfig+0x348>
 800465c:	2302      	movs	r3, #2
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e048      	b.n	80046f4 <UART_SetConfig+0x348>
 8004662:	2304      	movs	r3, #4
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e045      	b.n	80046f4 <UART_SetConfig+0x348>
 8004668:	2308      	movs	r3, #8
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e042      	b.n	80046f4 <UART_SetConfig+0x348>
 800466e:	bf00      	nop
 8004670:	efff69f3 	.word	0xefff69f3
 8004674:	40011000 	.word	0x40011000
 8004678:	40023800 	.word	0x40023800
 800467c:	40004400 	.word	0x40004400
 8004680:	40004800 	.word	0x40004800
 8004684:	40004c00 	.word	0x40004c00
 8004688:	40005000 	.word	0x40005000
 800468c:	40011400 	.word	0x40011400
 8004690:	40007800 	.word	0x40007800
 8004694:	2310      	movs	r3, #16
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e02c      	b.n	80046f4 <UART_SetConfig+0x348>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a72      	ldr	r2, [pc, #456]	; (8004868 <UART_SetConfig+0x4bc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d125      	bne.n	80046f0 <UART_SetConfig+0x344>
 80046a4:	4b71      	ldr	r3, [pc, #452]	; (800486c <UART_SetConfig+0x4c0>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046b2:	d017      	beq.n	80046e4 <UART_SetConfig+0x338>
 80046b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046b8:	d817      	bhi.n	80046ea <UART_SetConfig+0x33e>
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046be:	d00b      	beq.n	80046d8 <UART_SetConfig+0x32c>
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c4:	d811      	bhi.n	80046ea <UART_SetConfig+0x33e>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <UART_SetConfig+0x326>
 80046ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ce:	d006      	beq.n	80046de <UART_SetConfig+0x332>
 80046d0:	e00b      	b.n	80046ea <UART_SetConfig+0x33e>
 80046d2:	2300      	movs	r3, #0
 80046d4:	77fb      	strb	r3, [r7, #31]
 80046d6:	e00d      	b.n	80046f4 <UART_SetConfig+0x348>
 80046d8:	2302      	movs	r3, #2
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e00a      	b.n	80046f4 <UART_SetConfig+0x348>
 80046de:	2304      	movs	r3, #4
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e007      	b.n	80046f4 <UART_SetConfig+0x348>
 80046e4:	2308      	movs	r3, #8
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e004      	b.n	80046f4 <UART_SetConfig+0x348>
 80046ea:	2310      	movs	r3, #16
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e001      	b.n	80046f4 <UART_SetConfig+0x348>
 80046f0:	2310      	movs	r3, #16
 80046f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fc:	d15b      	bne.n	80047b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d828      	bhi.n	8004756 <UART_SetConfig+0x3aa>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x360>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	08004757 	.word	0x08004757
 800471c:	08004747 	.word	0x08004747
 8004720:	08004757 	.word	0x08004757
 8004724:	08004757 	.word	0x08004757
 8004728:	08004757 	.word	0x08004757
 800472c:	0800474f 	.word	0x0800474f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7ff f942 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004734:	61b8      	str	r0, [r7, #24]
        break;
 8004736:	e013      	b.n	8004760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7ff f952 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 800473c:	61b8      	str	r0, [r7, #24]
        break;
 800473e:	e00f      	b.n	8004760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <UART_SetConfig+0x4c4>)
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e00c      	b.n	8004760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7ff f825 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 800474a:	61b8      	str	r0, [r7, #24]
        break;
 800474c:	e008      	b.n	8004760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	61bb      	str	r3, [r7, #24]
        break;
 8004754:	e004      	b.n	8004760 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	77bb      	strb	r3, [r7, #30]
        break;
 800475e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d074      	beq.n	8004850 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	005a      	lsls	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0f      	cmp	r3, #15
 8004780:	d916      	bls.n	80047b0 <UART_SetConfig+0x404>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d212      	bcs.n	80047b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f023 030f 	bic.w	r3, r3, #15
 8004792:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	b29a      	uxth	r2, r3
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	89fa      	ldrh	r2, [r7, #14]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	e04f      	b.n	8004850 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	77bb      	strb	r3, [r7, #30]
 80047b4:	e04c      	b.n	8004850 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d828      	bhi.n	800480e <UART_SetConfig+0x462>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x418>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	0800480f 	.word	0x0800480f
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	0800480f 	.word	0x0800480f
 80047dc:	0800480f 	.word	0x0800480f
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	08004807 	.word	0x08004807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7ff f8e6 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 80047ec:	61b8      	str	r0, [r7, #24]
        break;
 80047ee:	e013      	b.n	8004818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7ff f8f6 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 80047f4:	61b8      	str	r0, [r7, #24]
        break;
 80047f6:	e00f      	b.n	8004818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <UART_SetConfig+0x4c4>)
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e00c      	b.n	8004818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fe:	f7fe ffc9 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8004802:	61b8      	str	r0, [r7, #24]
        break;
 8004804:	e008      	b.n	8004818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e004      	b.n	8004818 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	77bb      	strb	r3, [r7, #30]
        break;
 8004816:	bf00      	nop
    }

    if (pclk != 0U)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	085a      	lsrs	r2, r3, #1
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	441a      	add	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d909      	bls.n	800484c <UART_SetConfig+0x4a0>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483e:	d205      	bcs.n	800484c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e001      	b.n	8004850 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800485c:	7fbb      	ldrb	r3, [r7, #30]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40007c00 	.word	0x40007c00
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400

08004874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d10a      	bne.n	800498a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c8:	f7fd fa6c 	bl	8001ea4 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d10e      	bne.n	80049fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f817 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e00d      	b.n	8004a16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b09c      	sub	sp, #112	; 0x70
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2e:	e0a5      	b.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	f000 80a1 	beq.w	8004b7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fd fa33 	bl	8001ea4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d13e      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a64:	667b      	str	r3, [r7, #100]	; 0x64
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e6      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e5      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e067      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d04f      	beq.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aea:	d147      	bne.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
 8004b16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e6      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	613b      	str	r3, [r7, #16]
   return(result);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f023 0301 	bic.w	r3, r3, #1
 8004b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b48:	623a      	str	r2, [r7, #32]
 8004b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	69f9      	ldr	r1, [r7, #28]
 8004b4e:	6a3a      	ldr	r2, [r7, #32]
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e5      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e010      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	f43f af4a 	beq.w	8004a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3770      	adds	r7, #112	; 0x70
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <__errno>:
 8004ba8:	4b01      	ldr	r3, [pc, #4]	; (8004bb0 <__errno+0x8>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	2000000c 	.word	0x2000000c

08004bb4 <__libc_init_array>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	4d0d      	ldr	r5, [pc, #52]	; (8004bec <__libc_init_array+0x38>)
 8004bb8:	4c0d      	ldr	r4, [pc, #52]	; (8004bf0 <__libc_init_array+0x3c>)
 8004bba:	1b64      	subs	r4, r4, r5
 8004bbc:	10a4      	asrs	r4, r4, #2
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	42a6      	cmp	r6, r4
 8004bc2:	d109      	bne.n	8004bd8 <__libc_init_array+0x24>
 8004bc4:	4d0b      	ldr	r5, [pc, #44]	; (8004bf4 <__libc_init_array+0x40>)
 8004bc6:	4c0c      	ldr	r4, [pc, #48]	; (8004bf8 <__libc_init_array+0x44>)
 8004bc8:	f002 fd36 	bl	8007638 <_init>
 8004bcc:	1b64      	subs	r4, r4, r5
 8004bce:	10a4      	asrs	r4, r4, #2
 8004bd0:	2600      	movs	r6, #0
 8004bd2:	42a6      	cmp	r6, r4
 8004bd4:	d105      	bne.n	8004be2 <__libc_init_array+0x2e>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bdc:	4798      	blx	r3
 8004bde:	3601      	adds	r6, #1
 8004be0:	e7ee      	b.n	8004bc0 <__libc_init_array+0xc>
 8004be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be6:	4798      	blx	r3
 8004be8:	3601      	adds	r6, #1
 8004bea:	e7f2      	b.n	8004bd2 <__libc_init_array+0x1e>
 8004bec:	08007a4c 	.word	0x08007a4c
 8004bf0:	08007a4c 	.word	0x08007a4c
 8004bf4:	08007a4c 	.word	0x08007a4c
 8004bf8:	08007a50 	.word	0x08007a50

08004bfc <memset>:
 8004bfc:	4402      	add	r2, r0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d100      	bne.n	8004c06 <memset+0xa>
 8004c04:	4770      	bx	lr
 8004c06:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0a:	e7f9      	b.n	8004c00 <memset+0x4>

08004c0c <__cvt>:
 8004c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	ec55 4b10 	vmov	r4, r5, d0
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	460e      	mov	r6, r1
 8004c18:	4619      	mov	r1, r3
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	bfbb      	ittet	lt
 8004c1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c22:	461d      	movlt	r5, r3
 8004c24:	2300      	movge	r3, #0
 8004c26:	232d      	movlt	r3, #45	; 0x2d
 8004c28:	700b      	strb	r3, [r1, #0]
 8004c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c30:	4691      	mov	r9, r2
 8004c32:	f023 0820 	bic.w	r8, r3, #32
 8004c36:	bfbc      	itt	lt
 8004c38:	4622      	movlt	r2, r4
 8004c3a:	4614      	movlt	r4, r2
 8004c3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c40:	d005      	beq.n	8004c4e <__cvt+0x42>
 8004c42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c46:	d100      	bne.n	8004c4a <__cvt+0x3e>
 8004c48:	3601      	adds	r6, #1
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	e000      	b.n	8004c50 <__cvt+0x44>
 8004c4e:	2103      	movs	r1, #3
 8004c50:	ab03      	add	r3, sp, #12
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	ab02      	add	r3, sp, #8
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	ec45 4b10 	vmov	d0, r4, r5
 8004c5c:	4653      	mov	r3, sl
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f000 fcca 	bl	80055f8 <_dtoa_r>
 8004c64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c68:	4607      	mov	r7, r0
 8004c6a:	d102      	bne.n	8004c72 <__cvt+0x66>
 8004c6c:	f019 0f01 	tst.w	r9, #1
 8004c70:	d022      	beq.n	8004cb8 <__cvt+0xac>
 8004c72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c76:	eb07 0906 	add.w	r9, r7, r6
 8004c7a:	d110      	bne.n	8004c9e <__cvt+0x92>
 8004c7c:	783b      	ldrb	r3, [r7, #0]
 8004c7e:	2b30      	cmp	r3, #48	; 0x30
 8004c80:	d10a      	bne.n	8004c98 <__cvt+0x8c>
 8004c82:	2200      	movs	r2, #0
 8004c84:	2300      	movs	r3, #0
 8004c86:	4620      	mov	r0, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	f7fb ff3d 	bl	8000b08 <__aeabi_dcmpeq>
 8004c8e:	b918      	cbnz	r0, 8004c98 <__cvt+0x8c>
 8004c90:	f1c6 0601 	rsb	r6, r6, #1
 8004c94:	f8ca 6000 	str.w	r6, [sl]
 8004c98:	f8da 3000 	ldr.w	r3, [sl]
 8004c9c:	4499      	add	r9, r3
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb ff2f 	bl	8000b08 <__aeabi_dcmpeq>
 8004caa:	b108      	cbz	r0, 8004cb0 <__cvt+0xa4>
 8004cac:	f8cd 900c 	str.w	r9, [sp, #12]
 8004cb0:	2230      	movs	r2, #48	; 0x30
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	454b      	cmp	r3, r9
 8004cb6:	d307      	bcc.n	8004cc8 <__cvt+0xbc>
 8004cb8:	9b03      	ldr	r3, [sp, #12]
 8004cba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cbc:	1bdb      	subs	r3, r3, r7
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	b004      	add	sp, #16
 8004cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc8:	1c59      	adds	r1, r3, #1
 8004cca:	9103      	str	r1, [sp, #12]
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e7f0      	b.n	8004cb2 <__cvt+0xa6>

08004cd0 <__exponent>:
 8004cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	bfb8      	it	lt
 8004cd8:	4249      	neglt	r1, r1
 8004cda:	f803 2b02 	strb.w	r2, [r3], #2
 8004cde:	bfb4      	ite	lt
 8004ce0:	222d      	movlt	r2, #45	; 0x2d
 8004ce2:	222b      	movge	r2, #43	; 0x2b
 8004ce4:	2909      	cmp	r1, #9
 8004ce6:	7042      	strb	r2, [r0, #1]
 8004ce8:	dd2a      	ble.n	8004d40 <__exponent+0x70>
 8004cea:	f10d 0407 	add.w	r4, sp, #7
 8004cee:	46a4      	mov	ip, r4
 8004cf0:	270a      	movs	r7, #10
 8004cf2:	46a6      	mov	lr, r4
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cfa:	fb07 1516 	mls	r5, r7, r6, r1
 8004cfe:	3530      	adds	r5, #48	; 0x30
 8004d00:	2a63      	cmp	r2, #99	; 0x63
 8004d02:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	dcf1      	bgt.n	8004cf2 <__exponent+0x22>
 8004d0e:	3130      	adds	r1, #48	; 0x30
 8004d10:	f1ae 0502 	sub.w	r5, lr, #2
 8004d14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d18:	1c44      	adds	r4, r0, #1
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4561      	cmp	r1, ip
 8004d1e:	d30a      	bcc.n	8004d36 <__exponent+0x66>
 8004d20:	f10d 0209 	add.w	r2, sp, #9
 8004d24:	eba2 020e 	sub.w	r2, r2, lr
 8004d28:	4565      	cmp	r5, ip
 8004d2a:	bf88      	it	hi
 8004d2c:	2200      	movhi	r2, #0
 8004d2e:	4413      	add	r3, r2
 8004d30:	1a18      	subs	r0, r3, r0
 8004d32:	b003      	add	sp, #12
 8004d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d3e:	e7ed      	b.n	8004d1c <__exponent+0x4c>
 8004d40:	2330      	movs	r3, #48	; 0x30
 8004d42:	3130      	adds	r1, #48	; 0x30
 8004d44:	7083      	strb	r3, [r0, #2]
 8004d46:	70c1      	strb	r1, [r0, #3]
 8004d48:	1d03      	adds	r3, r0, #4
 8004d4a:	e7f1      	b.n	8004d30 <__exponent+0x60>

08004d4c <_printf_float>:
 8004d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d50:	ed2d 8b02 	vpush	{d8}
 8004d54:	b08d      	sub	sp, #52	; 0x34
 8004d56:	460c      	mov	r4, r1
 8004d58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	461f      	mov	r7, r3
 8004d60:	4605      	mov	r5, r0
 8004d62:	f001 fa37 	bl	80061d4 <_localeconv_r>
 8004d66:	f8d0 a000 	ldr.w	sl, [r0]
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f7fb fa50 	bl	8000210 <strlen>
 8004d70:	2300      	movs	r3, #0
 8004d72:	930a      	str	r3, [sp, #40]	; 0x28
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	9305      	str	r3, [sp, #20]
 8004d78:	f8d8 3000 	ldr.w	r3, [r8]
 8004d7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d80:	3307      	adds	r3, #7
 8004d82:	f023 0307 	bic.w	r3, r3, #7
 8004d86:	f103 0208 	add.w	r2, r3, #8
 8004d8a:	f8c8 2000 	str.w	r2, [r8]
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d9e:	9307      	str	r3, [sp, #28]
 8004da0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004da4:	ee08 0a10 	vmov	s16, r0
 8004da8:	4b9f      	ldr	r3, [pc, #636]	; (8005028 <_printf_float+0x2dc>)
 8004daa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dae:	f04f 32ff 	mov.w	r2, #4294967295
 8004db2:	f7fb fedb 	bl	8000b6c <__aeabi_dcmpun>
 8004db6:	bb88      	cbnz	r0, 8004e1c <_printf_float+0xd0>
 8004db8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dbc:	4b9a      	ldr	r3, [pc, #616]	; (8005028 <_printf_float+0x2dc>)
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	f7fb feb5 	bl	8000b30 <__aeabi_dcmple>
 8004dc6:	bb48      	cbnz	r0, 8004e1c <_printf_float+0xd0>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4640      	mov	r0, r8
 8004dce:	4649      	mov	r1, r9
 8004dd0:	f7fb fea4 	bl	8000b1c <__aeabi_dcmplt>
 8004dd4:	b110      	cbz	r0, 8004ddc <_printf_float+0x90>
 8004dd6:	232d      	movs	r3, #45	; 0x2d
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	4b93      	ldr	r3, [pc, #588]	; (800502c <_printf_float+0x2e0>)
 8004dde:	4894      	ldr	r0, [pc, #592]	; (8005030 <_printf_float+0x2e4>)
 8004de0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004de4:	bf94      	ite	ls
 8004de6:	4698      	movls	r8, r3
 8004de8:	4680      	movhi	r8, r0
 8004dea:	2303      	movs	r3, #3
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	9b05      	ldr	r3, [sp, #20]
 8004df0:	f023 0204 	bic.w	r2, r3, #4
 8004df4:	6022      	str	r2, [r4, #0]
 8004df6:	f04f 0900 	mov.w	r9, #0
 8004dfa:	9700      	str	r7, [sp, #0]
 8004dfc:	4633      	mov	r3, r6
 8004dfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e00:	4621      	mov	r1, r4
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 f9d8 	bl	80051b8 <_printf_common>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f040 8090 	bne.w	8004f2e <_printf_float+0x1e2>
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	b00d      	add	sp, #52	; 0x34
 8004e14:	ecbd 8b02 	vpop	{d8}
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	4640      	mov	r0, r8
 8004e22:	4649      	mov	r1, r9
 8004e24:	f7fb fea2 	bl	8000b6c <__aeabi_dcmpun>
 8004e28:	b140      	cbz	r0, 8004e3c <_printf_float+0xf0>
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bfbc      	itt	lt
 8004e30:	232d      	movlt	r3, #45	; 0x2d
 8004e32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e36:	487f      	ldr	r0, [pc, #508]	; (8005034 <_printf_float+0x2e8>)
 8004e38:	4b7f      	ldr	r3, [pc, #508]	; (8005038 <_printf_float+0x2ec>)
 8004e3a:	e7d1      	b.n	8004de0 <_printf_float+0x94>
 8004e3c:	6863      	ldr	r3, [r4, #4]
 8004e3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e42:	9206      	str	r2, [sp, #24]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	d13f      	bne.n	8004ec8 <_printf_float+0x17c>
 8004e48:	2306      	movs	r3, #6
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	9b05      	ldr	r3, [sp, #20]
 8004e4e:	6861      	ldr	r1, [r4, #4]
 8004e50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e54:	2300      	movs	r3, #0
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	ab0a      	add	r3, sp, #40	; 0x28
 8004e5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e5e:	ab09      	add	r3, sp, #36	; 0x24
 8004e60:	ec49 8b10 	vmov	d0, r8, r9
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	6022      	str	r2, [r4, #0]
 8004e68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f7ff fecd 	bl	8004c0c <__cvt>
 8004e72:	9b06      	ldr	r3, [sp, #24]
 8004e74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e76:	2b47      	cmp	r3, #71	; 0x47
 8004e78:	4680      	mov	r8, r0
 8004e7a:	d108      	bne.n	8004e8e <_printf_float+0x142>
 8004e7c:	1cc8      	adds	r0, r1, #3
 8004e7e:	db02      	blt.n	8004e86 <_printf_float+0x13a>
 8004e80:	6863      	ldr	r3, [r4, #4]
 8004e82:	4299      	cmp	r1, r3
 8004e84:	dd41      	ble.n	8004f0a <_printf_float+0x1be>
 8004e86:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e8a:	fa5f fb8b 	uxtb.w	fp, fp
 8004e8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e92:	d820      	bhi.n	8004ed6 <_printf_float+0x18a>
 8004e94:	3901      	subs	r1, #1
 8004e96:	465a      	mov	r2, fp
 8004e98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e9c:	9109      	str	r1, [sp, #36]	; 0x24
 8004e9e:	f7ff ff17 	bl	8004cd0 <__exponent>
 8004ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ea4:	1813      	adds	r3, r2, r0
 8004ea6:	2a01      	cmp	r2, #1
 8004ea8:	4681      	mov	r9, r0
 8004eaa:	6123      	str	r3, [r4, #16]
 8004eac:	dc02      	bgt.n	8004eb4 <_printf_float+0x168>
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	07d2      	lsls	r2, r2, #31
 8004eb2:	d501      	bpl.n	8004eb8 <_printf_float+0x16c>
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d09c      	beq.n	8004dfa <_printf_float+0xae>
 8004ec0:	232d      	movs	r3, #45	; 0x2d
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec6:	e798      	b.n	8004dfa <_printf_float+0xae>
 8004ec8:	9a06      	ldr	r2, [sp, #24]
 8004eca:	2a47      	cmp	r2, #71	; 0x47
 8004ecc:	d1be      	bne.n	8004e4c <_printf_float+0x100>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1bc      	bne.n	8004e4c <_printf_float+0x100>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e7b9      	b.n	8004e4a <_printf_float+0xfe>
 8004ed6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004eda:	d118      	bne.n	8004f0e <_printf_float+0x1c2>
 8004edc:	2900      	cmp	r1, #0
 8004ede:	6863      	ldr	r3, [r4, #4]
 8004ee0:	dd0b      	ble.n	8004efa <_printf_float+0x1ae>
 8004ee2:	6121      	str	r1, [r4, #16]
 8004ee4:	b913      	cbnz	r3, 8004eec <_printf_float+0x1a0>
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	07d0      	lsls	r0, r2, #31
 8004eea:	d502      	bpl.n	8004ef2 <_printf_float+0x1a6>
 8004eec:	3301      	adds	r3, #1
 8004eee:	440b      	add	r3, r1
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ef4:	f04f 0900 	mov.w	r9, #0
 8004ef8:	e7de      	b.n	8004eb8 <_printf_float+0x16c>
 8004efa:	b913      	cbnz	r3, 8004f02 <_printf_float+0x1b6>
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	07d2      	lsls	r2, r2, #31
 8004f00:	d501      	bpl.n	8004f06 <_printf_float+0x1ba>
 8004f02:	3302      	adds	r3, #2
 8004f04:	e7f4      	b.n	8004ef0 <_printf_float+0x1a4>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e7f2      	b.n	8004ef0 <_printf_float+0x1a4>
 8004f0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f10:	4299      	cmp	r1, r3
 8004f12:	db05      	blt.n	8004f20 <_printf_float+0x1d4>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	6121      	str	r1, [r4, #16]
 8004f18:	07d8      	lsls	r0, r3, #31
 8004f1a:	d5ea      	bpl.n	8004ef2 <_printf_float+0x1a6>
 8004f1c:	1c4b      	adds	r3, r1, #1
 8004f1e:	e7e7      	b.n	8004ef0 <_printf_float+0x1a4>
 8004f20:	2900      	cmp	r1, #0
 8004f22:	bfd4      	ite	le
 8004f24:	f1c1 0202 	rsble	r2, r1, #2
 8004f28:	2201      	movgt	r2, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	e7e0      	b.n	8004ef0 <_printf_float+0x1a4>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	055a      	lsls	r2, r3, #21
 8004f32:	d407      	bmi.n	8004f44 <_printf_float+0x1f8>
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	4642      	mov	r2, r8
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d12c      	bne.n	8004f9c <_printf_float+0x250>
 8004f42:	e764      	b.n	8004e0e <_printf_float+0xc2>
 8004f44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f48:	f240 80e0 	bls.w	800510c <_printf_float+0x3c0>
 8004f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f50:	2200      	movs	r2, #0
 8004f52:	2300      	movs	r3, #0
 8004f54:	f7fb fdd8 	bl	8000b08 <__aeabi_dcmpeq>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d034      	beq.n	8004fc6 <_printf_float+0x27a>
 8004f5c:	4a37      	ldr	r2, [pc, #220]	; (800503c <_printf_float+0x2f0>)
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	f43f af51 	beq.w	8004e0e <_printf_float+0xc2>
 8004f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f70:	429a      	cmp	r2, r3
 8004f72:	db02      	blt.n	8004f7a <_printf_float+0x22e>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07d8      	lsls	r0, r3, #31
 8004f78:	d510      	bpl.n	8004f9c <_printf_float+0x250>
 8004f7a:	ee18 3a10 	vmov	r3, s16
 8004f7e:	4652      	mov	r2, sl
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f af41 	beq.w	8004e0e <_printf_float+0xc2>
 8004f8c:	f04f 0800 	mov.w	r8, #0
 8004f90:	f104 091a 	add.w	r9, r4, #26
 8004f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f96:	3b01      	subs	r3, #1
 8004f98:	4543      	cmp	r3, r8
 8004f9a:	dc09      	bgt.n	8004fb0 <_printf_float+0x264>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	079b      	lsls	r3, r3, #30
 8004fa0:	f100 8105 	bmi.w	80051ae <_printf_float+0x462>
 8004fa4:	68e0      	ldr	r0, [r4, #12]
 8004fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa8:	4298      	cmp	r0, r3
 8004faa:	bfb8      	it	lt
 8004fac:	4618      	movlt	r0, r3
 8004fae:	e730      	b.n	8004e12 <_printf_float+0xc6>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	464a      	mov	r2, r9
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b8      	blx	r7
 8004fba:	3001      	adds	r0, #1
 8004fbc:	f43f af27 	beq.w	8004e0e <_printf_float+0xc2>
 8004fc0:	f108 0801 	add.w	r8, r8, #1
 8004fc4:	e7e6      	b.n	8004f94 <_printf_float+0x248>
 8004fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dc39      	bgt.n	8005040 <_printf_float+0x2f4>
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <_printf_float+0x2f0>)
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f af19 	beq.w	8004e0e <_printf_float+0xc2>
 8004fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d102      	bne.n	8004fea <_printf_float+0x29e>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	07d9      	lsls	r1, r3, #31
 8004fe8:	d5d8      	bpl.n	8004f9c <_printf_float+0x250>
 8004fea:	ee18 3a10 	vmov	r3, s16
 8004fee:	4652      	mov	r2, sl
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f af09 	beq.w	8004e0e <_printf_float+0xc2>
 8004ffc:	f04f 0900 	mov.w	r9, #0
 8005000:	f104 0a1a 	add.w	sl, r4, #26
 8005004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005006:	425b      	negs	r3, r3
 8005008:	454b      	cmp	r3, r9
 800500a:	dc01      	bgt.n	8005010 <_printf_float+0x2c4>
 800500c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500e:	e792      	b.n	8004f36 <_printf_float+0x1ea>
 8005010:	2301      	movs	r3, #1
 8005012:	4652      	mov	r2, sl
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	47b8      	blx	r7
 800501a:	3001      	adds	r0, #1
 800501c:	f43f aef7 	beq.w	8004e0e <_printf_float+0xc2>
 8005020:	f109 0901 	add.w	r9, r9, #1
 8005024:	e7ee      	b.n	8005004 <_printf_float+0x2b8>
 8005026:	bf00      	nop
 8005028:	7fefffff 	.word	0x7fefffff
 800502c:	0800766c 	.word	0x0800766c
 8005030:	08007670 	.word	0x08007670
 8005034:	08007678 	.word	0x08007678
 8005038:	08007674 	.word	0x08007674
 800503c:	0800767c 	.word	0x0800767c
 8005040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005044:	429a      	cmp	r2, r3
 8005046:	bfa8      	it	ge
 8005048:	461a      	movge	r2, r3
 800504a:	2a00      	cmp	r2, #0
 800504c:	4691      	mov	r9, r2
 800504e:	dc37      	bgt.n	80050c0 <_printf_float+0x374>
 8005050:	f04f 0b00 	mov.w	fp, #0
 8005054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005058:	f104 021a 	add.w	r2, r4, #26
 800505c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800505e:	9305      	str	r3, [sp, #20]
 8005060:	eba3 0309 	sub.w	r3, r3, r9
 8005064:	455b      	cmp	r3, fp
 8005066:	dc33      	bgt.n	80050d0 <_printf_float+0x384>
 8005068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506c:	429a      	cmp	r2, r3
 800506e:	db3b      	blt.n	80050e8 <_printf_float+0x39c>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07da      	lsls	r2, r3, #31
 8005074:	d438      	bmi.n	80050e8 <_printf_float+0x39c>
 8005076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005078:	9a05      	ldr	r2, [sp, #20]
 800507a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800507c:	1a9a      	subs	r2, r3, r2
 800507e:	eba3 0901 	sub.w	r9, r3, r1
 8005082:	4591      	cmp	r9, r2
 8005084:	bfa8      	it	ge
 8005086:	4691      	movge	r9, r2
 8005088:	f1b9 0f00 	cmp.w	r9, #0
 800508c:	dc35      	bgt.n	80050fa <_printf_float+0x3ae>
 800508e:	f04f 0800 	mov.w	r8, #0
 8005092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005096:	f104 0a1a 	add.w	sl, r4, #26
 800509a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	eba3 0309 	sub.w	r3, r3, r9
 80050a4:	4543      	cmp	r3, r8
 80050a6:	f77f af79 	ble.w	8004f9c <_printf_float+0x250>
 80050aa:	2301      	movs	r3, #1
 80050ac:	4652      	mov	r2, sl
 80050ae:	4631      	mov	r1, r6
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b8      	blx	r7
 80050b4:	3001      	adds	r0, #1
 80050b6:	f43f aeaa 	beq.w	8004e0e <_printf_float+0xc2>
 80050ba:	f108 0801 	add.w	r8, r8, #1
 80050be:	e7ec      	b.n	800509a <_printf_float+0x34e>
 80050c0:	4613      	mov	r3, r2
 80050c2:	4631      	mov	r1, r6
 80050c4:	4642      	mov	r2, r8
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	d1c0      	bne.n	8005050 <_printf_float+0x304>
 80050ce:	e69e      	b.n	8004e0e <_printf_float+0xc2>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	9205      	str	r2, [sp, #20]
 80050d8:	47b8      	blx	r7
 80050da:	3001      	adds	r0, #1
 80050dc:	f43f ae97 	beq.w	8004e0e <_printf_float+0xc2>
 80050e0:	9a05      	ldr	r2, [sp, #20]
 80050e2:	f10b 0b01 	add.w	fp, fp, #1
 80050e6:	e7b9      	b.n	800505c <_printf_float+0x310>
 80050e8:	ee18 3a10 	vmov	r3, s16
 80050ec:	4652      	mov	r2, sl
 80050ee:	4631      	mov	r1, r6
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b8      	blx	r7
 80050f4:	3001      	adds	r0, #1
 80050f6:	d1be      	bne.n	8005076 <_printf_float+0x32a>
 80050f8:	e689      	b.n	8004e0e <_printf_float+0xc2>
 80050fa:	9a05      	ldr	r2, [sp, #20]
 80050fc:	464b      	mov	r3, r9
 80050fe:	4442      	add	r2, r8
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	d1c1      	bne.n	800508e <_printf_float+0x342>
 800510a:	e680      	b.n	8004e0e <_printf_float+0xc2>
 800510c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800510e:	2a01      	cmp	r2, #1
 8005110:	dc01      	bgt.n	8005116 <_printf_float+0x3ca>
 8005112:	07db      	lsls	r3, r3, #31
 8005114:	d538      	bpl.n	8005188 <_printf_float+0x43c>
 8005116:	2301      	movs	r3, #1
 8005118:	4642      	mov	r2, r8
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	f43f ae74 	beq.w	8004e0e <_printf_float+0xc2>
 8005126:	ee18 3a10 	vmov	r3, s16
 800512a:	4652      	mov	r2, sl
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f ae6b 	beq.w	8004e0e <_printf_float+0xc2>
 8005138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800513c:	2200      	movs	r2, #0
 800513e:	2300      	movs	r3, #0
 8005140:	f7fb fce2 	bl	8000b08 <__aeabi_dcmpeq>
 8005144:	b9d8      	cbnz	r0, 800517e <_printf_float+0x432>
 8005146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005148:	f108 0201 	add.w	r2, r8, #1
 800514c:	3b01      	subs	r3, #1
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	47b8      	blx	r7
 8005154:	3001      	adds	r0, #1
 8005156:	d10e      	bne.n	8005176 <_printf_float+0x42a>
 8005158:	e659      	b.n	8004e0e <_printf_float+0xc2>
 800515a:	2301      	movs	r3, #1
 800515c:	4652      	mov	r2, sl
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f ae52 	beq.w	8004e0e <_printf_float+0xc2>
 800516a:	f108 0801 	add.w	r8, r8, #1
 800516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005170:	3b01      	subs	r3, #1
 8005172:	4543      	cmp	r3, r8
 8005174:	dcf1      	bgt.n	800515a <_printf_float+0x40e>
 8005176:	464b      	mov	r3, r9
 8005178:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800517c:	e6dc      	b.n	8004f38 <_printf_float+0x1ec>
 800517e:	f04f 0800 	mov.w	r8, #0
 8005182:	f104 0a1a 	add.w	sl, r4, #26
 8005186:	e7f2      	b.n	800516e <_printf_float+0x422>
 8005188:	2301      	movs	r3, #1
 800518a:	4642      	mov	r2, r8
 800518c:	e7df      	b.n	800514e <_printf_float+0x402>
 800518e:	2301      	movs	r3, #1
 8005190:	464a      	mov	r2, r9
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	47b8      	blx	r7
 8005198:	3001      	adds	r0, #1
 800519a:	f43f ae38 	beq.w	8004e0e <_printf_float+0xc2>
 800519e:	f108 0801 	add.w	r8, r8, #1
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051a6:	1a5b      	subs	r3, r3, r1
 80051a8:	4543      	cmp	r3, r8
 80051aa:	dcf0      	bgt.n	800518e <_printf_float+0x442>
 80051ac:	e6fa      	b.n	8004fa4 <_printf_float+0x258>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	f104 0919 	add.w	r9, r4, #25
 80051b6:	e7f4      	b.n	80051a2 <_printf_float+0x456>

080051b8 <_printf_common>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	4616      	mov	r6, r2
 80051be:	4699      	mov	r9, r3
 80051c0:	688a      	ldr	r2, [r1, #8]
 80051c2:	690b      	ldr	r3, [r1, #16]
 80051c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bfb8      	it	lt
 80051cc:	4613      	movlt	r3, r2
 80051ce:	6033      	str	r3, [r6, #0]
 80051d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d4:	4607      	mov	r7, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	b10a      	cbz	r2, 80051de <_printf_common+0x26>
 80051da:	3301      	adds	r3, #1
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	0699      	lsls	r1, r3, #26
 80051e2:	bf42      	ittt	mi
 80051e4:	6833      	ldrmi	r3, [r6, #0]
 80051e6:	3302      	addmi	r3, #2
 80051e8:	6033      	strmi	r3, [r6, #0]
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	f015 0506 	ands.w	r5, r5, #6
 80051f0:	d106      	bne.n	8005200 <_printf_common+0x48>
 80051f2:	f104 0a19 	add.w	sl, r4, #25
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	6832      	ldr	r2, [r6, #0]
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	dc26      	bgt.n	800524e <_printf_common+0x96>
 8005200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005204:	1e13      	subs	r3, r2, #0
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	bf18      	it	ne
 800520a:	2301      	movne	r3, #1
 800520c:	0692      	lsls	r2, r2, #26
 800520e:	d42b      	bmi.n	8005268 <_printf_common+0xb0>
 8005210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005214:	4649      	mov	r1, r9
 8005216:	4638      	mov	r0, r7
 8005218:	47c0      	blx	r8
 800521a:	3001      	adds	r0, #1
 800521c:	d01e      	beq.n	800525c <_printf_common+0xa4>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	68e5      	ldr	r5, [r4, #12]
 8005222:	6832      	ldr	r2, [r6, #0]
 8005224:	f003 0306 	and.w	r3, r3, #6
 8005228:	2b04      	cmp	r3, #4
 800522a:	bf08      	it	eq
 800522c:	1aad      	subeq	r5, r5, r2
 800522e:	68a3      	ldr	r3, [r4, #8]
 8005230:	6922      	ldr	r2, [r4, #16]
 8005232:	bf0c      	ite	eq
 8005234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005238:	2500      	movne	r5, #0
 800523a:	4293      	cmp	r3, r2
 800523c:	bfc4      	itt	gt
 800523e:	1a9b      	subgt	r3, r3, r2
 8005240:	18ed      	addgt	r5, r5, r3
 8005242:	2600      	movs	r6, #0
 8005244:	341a      	adds	r4, #26
 8005246:	42b5      	cmp	r5, r6
 8005248:	d11a      	bne.n	8005280 <_printf_common+0xc8>
 800524a:	2000      	movs	r0, #0
 800524c:	e008      	b.n	8005260 <_printf_common+0xa8>
 800524e:	2301      	movs	r3, #1
 8005250:	4652      	mov	r2, sl
 8005252:	4649      	mov	r1, r9
 8005254:	4638      	mov	r0, r7
 8005256:	47c0      	blx	r8
 8005258:	3001      	adds	r0, #1
 800525a:	d103      	bne.n	8005264 <_printf_common+0xac>
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	3501      	adds	r5, #1
 8005266:	e7c6      	b.n	80051f6 <_printf_common+0x3e>
 8005268:	18e1      	adds	r1, r4, r3
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	2030      	movs	r0, #48	; 0x30
 800526e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005272:	4422      	add	r2, r4
 8005274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800527c:	3302      	adds	r3, #2
 800527e:	e7c7      	b.n	8005210 <_printf_common+0x58>
 8005280:	2301      	movs	r3, #1
 8005282:	4622      	mov	r2, r4
 8005284:	4649      	mov	r1, r9
 8005286:	4638      	mov	r0, r7
 8005288:	47c0      	blx	r8
 800528a:	3001      	adds	r0, #1
 800528c:	d0e6      	beq.n	800525c <_printf_common+0xa4>
 800528e:	3601      	adds	r6, #1
 8005290:	e7d9      	b.n	8005246 <_printf_common+0x8e>
	...

08005294 <_printf_i>:
 8005294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	7e0f      	ldrb	r7, [r1, #24]
 800529a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800529c:	2f78      	cmp	r7, #120	; 0x78
 800529e:	4691      	mov	r9, r2
 80052a0:	4680      	mov	r8, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	469a      	mov	sl, r3
 80052a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052aa:	d807      	bhi.n	80052bc <_printf_i+0x28>
 80052ac:	2f62      	cmp	r7, #98	; 0x62
 80052ae:	d80a      	bhi.n	80052c6 <_printf_i+0x32>
 80052b0:	2f00      	cmp	r7, #0
 80052b2:	f000 80d8 	beq.w	8005466 <_printf_i+0x1d2>
 80052b6:	2f58      	cmp	r7, #88	; 0x58
 80052b8:	f000 80a3 	beq.w	8005402 <_printf_i+0x16e>
 80052bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052c4:	e03a      	b.n	800533c <_printf_i+0xa8>
 80052c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052ca:	2b15      	cmp	r3, #21
 80052cc:	d8f6      	bhi.n	80052bc <_printf_i+0x28>
 80052ce:	a101      	add	r1, pc, #4	; (adr r1, 80052d4 <_printf_i+0x40>)
 80052d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d4:	0800532d 	.word	0x0800532d
 80052d8:	08005341 	.word	0x08005341
 80052dc:	080052bd 	.word	0x080052bd
 80052e0:	080052bd 	.word	0x080052bd
 80052e4:	080052bd 	.word	0x080052bd
 80052e8:	080052bd 	.word	0x080052bd
 80052ec:	08005341 	.word	0x08005341
 80052f0:	080052bd 	.word	0x080052bd
 80052f4:	080052bd 	.word	0x080052bd
 80052f8:	080052bd 	.word	0x080052bd
 80052fc:	080052bd 	.word	0x080052bd
 8005300:	0800544d 	.word	0x0800544d
 8005304:	08005371 	.word	0x08005371
 8005308:	0800542f 	.word	0x0800542f
 800530c:	080052bd 	.word	0x080052bd
 8005310:	080052bd 	.word	0x080052bd
 8005314:	0800546f 	.word	0x0800546f
 8005318:	080052bd 	.word	0x080052bd
 800531c:	08005371 	.word	0x08005371
 8005320:	080052bd 	.word	0x080052bd
 8005324:	080052bd 	.word	0x080052bd
 8005328:	08005437 	.word	0x08005437
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	1d1a      	adds	r2, r3, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	602a      	str	r2, [r5, #0]
 8005334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800533c:	2301      	movs	r3, #1
 800533e:	e0a3      	b.n	8005488 <_printf_i+0x1f4>
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	6829      	ldr	r1, [r5, #0]
 8005344:	0606      	lsls	r6, r0, #24
 8005346:	f101 0304 	add.w	r3, r1, #4
 800534a:	d50a      	bpl.n	8005362 <_printf_i+0xce>
 800534c:	680e      	ldr	r6, [r1, #0]
 800534e:	602b      	str	r3, [r5, #0]
 8005350:	2e00      	cmp	r6, #0
 8005352:	da03      	bge.n	800535c <_printf_i+0xc8>
 8005354:	232d      	movs	r3, #45	; 0x2d
 8005356:	4276      	negs	r6, r6
 8005358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800535c:	485e      	ldr	r0, [pc, #376]	; (80054d8 <_printf_i+0x244>)
 800535e:	230a      	movs	r3, #10
 8005360:	e019      	b.n	8005396 <_printf_i+0x102>
 8005362:	680e      	ldr	r6, [r1, #0]
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800536a:	bf18      	it	ne
 800536c:	b236      	sxthne	r6, r6
 800536e:	e7ef      	b.n	8005350 <_printf_i+0xbc>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	6820      	ldr	r0, [r4, #0]
 8005374:	1d19      	adds	r1, r3, #4
 8005376:	6029      	str	r1, [r5, #0]
 8005378:	0601      	lsls	r1, r0, #24
 800537a:	d501      	bpl.n	8005380 <_printf_i+0xec>
 800537c:	681e      	ldr	r6, [r3, #0]
 800537e:	e002      	b.n	8005386 <_printf_i+0xf2>
 8005380:	0646      	lsls	r6, r0, #25
 8005382:	d5fb      	bpl.n	800537c <_printf_i+0xe8>
 8005384:	881e      	ldrh	r6, [r3, #0]
 8005386:	4854      	ldr	r0, [pc, #336]	; (80054d8 <_printf_i+0x244>)
 8005388:	2f6f      	cmp	r7, #111	; 0x6f
 800538a:	bf0c      	ite	eq
 800538c:	2308      	moveq	r3, #8
 800538e:	230a      	movne	r3, #10
 8005390:	2100      	movs	r1, #0
 8005392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005396:	6865      	ldr	r5, [r4, #4]
 8005398:	60a5      	str	r5, [r4, #8]
 800539a:	2d00      	cmp	r5, #0
 800539c:	bfa2      	ittt	ge
 800539e:	6821      	ldrge	r1, [r4, #0]
 80053a0:	f021 0104 	bicge.w	r1, r1, #4
 80053a4:	6021      	strge	r1, [r4, #0]
 80053a6:	b90e      	cbnz	r6, 80053ac <_printf_i+0x118>
 80053a8:	2d00      	cmp	r5, #0
 80053aa:	d04d      	beq.n	8005448 <_printf_i+0x1b4>
 80053ac:	4615      	mov	r5, r2
 80053ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80053b2:	fb03 6711 	mls	r7, r3, r1, r6
 80053b6:	5dc7      	ldrb	r7, [r0, r7]
 80053b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053bc:	4637      	mov	r7, r6
 80053be:	42bb      	cmp	r3, r7
 80053c0:	460e      	mov	r6, r1
 80053c2:	d9f4      	bls.n	80053ae <_printf_i+0x11a>
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d10b      	bne.n	80053e0 <_printf_i+0x14c>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	07de      	lsls	r6, r3, #31
 80053cc:	d508      	bpl.n	80053e0 <_printf_i+0x14c>
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	6861      	ldr	r1, [r4, #4]
 80053d2:	4299      	cmp	r1, r3
 80053d4:	bfde      	ittt	le
 80053d6:	2330      	movle	r3, #48	; 0x30
 80053d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053e0:	1b52      	subs	r2, r2, r5
 80053e2:	6122      	str	r2, [r4, #16]
 80053e4:	f8cd a000 	str.w	sl, [sp]
 80053e8:	464b      	mov	r3, r9
 80053ea:	aa03      	add	r2, sp, #12
 80053ec:	4621      	mov	r1, r4
 80053ee:	4640      	mov	r0, r8
 80053f0:	f7ff fee2 	bl	80051b8 <_printf_common>
 80053f4:	3001      	adds	r0, #1
 80053f6:	d14c      	bne.n	8005492 <_printf_i+0x1fe>
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	b004      	add	sp, #16
 80053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005402:	4835      	ldr	r0, [pc, #212]	; (80054d8 <_printf_i+0x244>)
 8005404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005408:	6829      	ldr	r1, [r5, #0]
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005410:	6029      	str	r1, [r5, #0]
 8005412:	061d      	lsls	r5, r3, #24
 8005414:	d514      	bpl.n	8005440 <_printf_i+0x1ac>
 8005416:	07df      	lsls	r7, r3, #31
 8005418:	bf44      	itt	mi
 800541a:	f043 0320 	orrmi.w	r3, r3, #32
 800541e:	6023      	strmi	r3, [r4, #0]
 8005420:	b91e      	cbnz	r6, 800542a <_printf_i+0x196>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	f023 0320 	bic.w	r3, r3, #32
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	2310      	movs	r3, #16
 800542c:	e7b0      	b.n	8005390 <_printf_i+0xfc>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f043 0320 	orr.w	r3, r3, #32
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	2378      	movs	r3, #120	; 0x78
 8005438:	4828      	ldr	r0, [pc, #160]	; (80054dc <_printf_i+0x248>)
 800543a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800543e:	e7e3      	b.n	8005408 <_printf_i+0x174>
 8005440:	0659      	lsls	r1, r3, #25
 8005442:	bf48      	it	mi
 8005444:	b2b6      	uxthmi	r6, r6
 8005446:	e7e6      	b.n	8005416 <_printf_i+0x182>
 8005448:	4615      	mov	r5, r2
 800544a:	e7bb      	b.n	80053c4 <_printf_i+0x130>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	6826      	ldr	r6, [r4, #0]
 8005450:	6961      	ldr	r1, [r4, #20]
 8005452:	1d18      	adds	r0, r3, #4
 8005454:	6028      	str	r0, [r5, #0]
 8005456:	0635      	lsls	r5, r6, #24
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	d501      	bpl.n	8005460 <_printf_i+0x1cc>
 800545c:	6019      	str	r1, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0x1d2>
 8005460:	0670      	lsls	r0, r6, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0x1c8>
 8005464:	8019      	strh	r1, [r3, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	4615      	mov	r5, r2
 800546c:	e7ba      	b.n	80053e4 <_printf_i+0x150>
 800546e:	682b      	ldr	r3, [r5, #0]
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	602a      	str	r2, [r5, #0]
 8005474:	681d      	ldr	r5, [r3, #0]
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	2100      	movs	r1, #0
 800547a:	4628      	mov	r0, r5
 800547c:	f7fa fed0 	bl	8000220 <memchr>
 8005480:	b108      	cbz	r0, 8005486 <_printf_i+0x1f2>
 8005482:	1b40      	subs	r0, r0, r5
 8005484:	6060      	str	r0, [r4, #4]
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	2300      	movs	r3, #0
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005490:	e7a8      	b.n	80053e4 <_printf_i+0x150>
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	462a      	mov	r2, r5
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d0ab      	beq.n	80053f8 <_printf_i+0x164>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	079b      	lsls	r3, r3, #30
 80054a4:	d413      	bmi.n	80054ce <_printf_i+0x23a>
 80054a6:	68e0      	ldr	r0, [r4, #12]
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	4298      	cmp	r0, r3
 80054ac:	bfb8      	it	lt
 80054ae:	4618      	movlt	r0, r3
 80054b0:	e7a4      	b.n	80053fc <_printf_i+0x168>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4632      	mov	r2, r6
 80054b6:	4649      	mov	r1, r9
 80054b8:	4640      	mov	r0, r8
 80054ba:	47d0      	blx	sl
 80054bc:	3001      	adds	r0, #1
 80054be:	d09b      	beq.n	80053f8 <_printf_i+0x164>
 80054c0:	3501      	adds	r5, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	9903      	ldr	r1, [sp, #12]
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dcf2      	bgt.n	80054b2 <_printf_i+0x21e>
 80054cc:	e7eb      	b.n	80054a6 <_printf_i+0x212>
 80054ce:	2500      	movs	r5, #0
 80054d0:	f104 0619 	add.w	r6, r4, #25
 80054d4:	e7f5      	b.n	80054c2 <_printf_i+0x22e>
 80054d6:	bf00      	nop
 80054d8:	0800767e 	.word	0x0800767e
 80054dc:	0800768f 	.word	0x0800768f

080054e0 <quorem>:
 80054e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	6903      	ldr	r3, [r0, #16]
 80054e6:	690c      	ldr	r4, [r1, #16]
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	4607      	mov	r7, r0
 80054ec:	f2c0 8081 	blt.w	80055f2 <quorem+0x112>
 80054f0:	3c01      	subs	r4, #1
 80054f2:	f101 0814 	add.w	r8, r1, #20
 80054f6:	f100 0514 	add.w	r5, r0, #20
 80054fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005508:	3301      	adds	r3, #1
 800550a:	429a      	cmp	r2, r3
 800550c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005514:	fbb2 f6f3 	udiv	r6, r2, r3
 8005518:	d331      	bcc.n	800557e <quorem+0x9e>
 800551a:	f04f 0e00 	mov.w	lr, #0
 800551e:	4640      	mov	r0, r8
 8005520:	46ac      	mov	ip, r5
 8005522:	46f2      	mov	sl, lr
 8005524:	f850 2b04 	ldr.w	r2, [r0], #4
 8005528:	b293      	uxth	r3, r2
 800552a:	fb06 e303 	mla	r3, r6, r3, lr
 800552e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005532:	b29b      	uxth	r3, r3
 8005534:	ebaa 0303 	sub.w	r3, sl, r3
 8005538:	f8dc a000 	ldr.w	sl, [ip]
 800553c:	0c12      	lsrs	r2, r2, #16
 800553e:	fa13 f38a 	uxtah	r3, r3, sl
 8005542:	fb06 e202 	mla	r2, r6, r2, lr
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	9b00      	ldr	r3, [sp, #0]
 800554a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800554e:	b292      	uxth	r2, r2
 8005550:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005558:	f8bd 3000 	ldrh.w	r3, [sp]
 800555c:	4581      	cmp	r9, r0
 800555e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005562:	f84c 3b04 	str.w	r3, [ip], #4
 8005566:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800556a:	d2db      	bcs.n	8005524 <quorem+0x44>
 800556c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005570:	b92b      	cbnz	r3, 800557e <quorem+0x9e>
 8005572:	9b01      	ldr	r3, [sp, #4]
 8005574:	3b04      	subs	r3, #4
 8005576:	429d      	cmp	r5, r3
 8005578:	461a      	mov	r2, r3
 800557a:	d32e      	bcc.n	80055da <quorem+0xfa>
 800557c:	613c      	str	r4, [r7, #16]
 800557e:	4638      	mov	r0, r7
 8005580:	f001 f8c4 	bl	800670c <__mcmp>
 8005584:	2800      	cmp	r0, #0
 8005586:	db24      	blt.n	80055d2 <quorem+0xf2>
 8005588:	3601      	adds	r6, #1
 800558a:	4628      	mov	r0, r5
 800558c:	f04f 0c00 	mov.w	ip, #0
 8005590:	f858 2b04 	ldr.w	r2, [r8], #4
 8005594:	f8d0 e000 	ldr.w	lr, [r0]
 8005598:	b293      	uxth	r3, r2
 800559a:	ebac 0303 	sub.w	r3, ip, r3
 800559e:	0c12      	lsrs	r2, r2, #16
 80055a0:	fa13 f38e 	uxtah	r3, r3, lr
 80055a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b2:	45c1      	cmp	r9, r8
 80055b4:	f840 3b04 	str.w	r3, [r0], #4
 80055b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055bc:	d2e8      	bcs.n	8005590 <quorem+0xb0>
 80055be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055c6:	b922      	cbnz	r2, 80055d2 <quorem+0xf2>
 80055c8:	3b04      	subs	r3, #4
 80055ca:	429d      	cmp	r5, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	d30a      	bcc.n	80055e6 <quorem+0x106>
 80055d0:	613c      	str	r4, [r7, #16]
 80055d2:	4630      	mov	r0, r6
 80055d4:	b003      	add	sp, #12
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	3b04      	subs	r3, #4
 80055de:	2a00      	cmp	r2, #0
 80055e0:	d1cc      	bne.n	800557c <quorem+0x9c>
 80055e2:	3c01      	subs	r4, #1
 80055e4:	e7c7      	b.n	8005576 <quorem+0x96>
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	3b04      	subs	r3, #4
 80055ea:	2a00      	cmp	r2, #0
 80055ec:	d1f0      	bne.n	80055d0 <quorem+0xf0>
 80055ee:	3c01      	subs	r4, #1
 80055f0:	e7eb      	b.n	80055ca <quorem+0xea>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e7ee      	b.n	80055d4 <quorem+0xf4>
	...

080055f8 <_dtoa_r>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	ed2d 8b04 	vpush	{d8-d9}
 8005600:	ec57 6b10 	vmov	r6, r7, d0
 8005604:	b093      	sub	sp, #76	; 0x4c
 8005606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800560c:	9106      	str	r1, [sp, #24]
 800560e:	ee10 aa10 	vmov	sl, s0
 8005612:	4604      	mov	r4, r0
 8005614:	9209      	str	r2, [sp, #36]	; 0x24
 8005616:	930c      	str	r3, [sp, #48]	; 0x30
 8005618:	46bb      	mov	fp, r7
 800561a:	b975      	cbnz	r5, 800563a <_dtoa_r+0x42>
 800561c:	2010      	movs	r0, #16
 800561e:	f000 fddd 	bl	80061dc <malloc>
 8005622:	4602      	mov	r2, r0
 8005624:	6260      	str	r0, [r4, #36]	; 0x24
 8005626:	b920      	cbnz	r0, 8005632 <_dtoa_r+0x3a>
 8005628:	4ba7      	ldr	r3, [pc, #668]	; (80058c8 <_dtoa_r+0x2d0>)
 800562a:	21ea      	movs	r1, #234	; 0xea
 800562c:	48a7      	ldr	r0, [pc, #668]	; (80058cc <_dtoa_r+0x2d4>)
 800562e:	f001 fa75 	bl	8006b1c <__assert_func>
 8005632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005636:	6005      	str	r5, [r0, #0]
 8005638:	60c5      	str	r5, [r0, #12]
 800563a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	b151      	cbz	r1, 8005656 <_dtoa_r+0x5e>
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	604a      	str	r2, [r1, #4]
 8005644:	2301      	movs	r3, #1
 8005646:	4093      	lsls	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
 800564a:	4620      	mov	r0, r4
 800564c:	f000 fe1c 	bl	8006288 <_Bfree>
 8005650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	1e3b      	subs	r3, r7, #0
 8005658:	bfaa      	itet	ge
 800565a:	2300      	movge	r3, #0
 800565c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005660:	f8c8 3000 	strge.w	r3, [r8]
 8005664:	4b9a      	ldr	r3, [pc, #616]	; (80058d0 <_dtoa_r+0x2d8>)
 8005666:	bfbc      	itt	lt
 8005668:	2201      	movlt	r2, #1
 800566a:	f8c8 2000 	strlt.w	r2, [r8]
 800566e:	ea33 030b 	bics.w	r3, r3, fp
 8005672:	d11b      	bne.n	80056ac <_dtoa_r+0xb4>
 8005674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005676:	f242 730f 	movw	r3, #9999	; 0x270f
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005680:	4333      	orrs	r3, r6
 8005682:	f000 8592 	beq.w	80061aa <_dtoa_r+0xbb2>
 8005686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005688:	b963      	cbnz	r3, 80056a4 <_dtoa_r+0xac>
 800568a:	4b92      	ldr	r3, [pc, #584]	; (80058d4 <_dtoa_r+0x2dc>)
 800568c:	e022      	b.n	80056d4 <_dtoa_r+0xdc>
 800568e:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <_dtoa_r+0x2e0>)
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	3308      	adds	r3, #8
 8005694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	9801      	ldr	r0, [sp, #4]
 800569a:	b013      	add	sp, #76	; 0x4c
 800569c:	ecbd 8b04 	vpop	{d8-d9}
 80056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a4:	4b8b      	ldr	r3, [pc, #556]	; (80058d4 <_dtoa_r+0x2dc>)
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	3303      	adds	r3, #3
 80056aa:	e7f3      	b.n	8005694 <_dtoa_r+0x9c>
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	4650      	mov	r0, sl
 80056b2:	4659      	mov	r1, fp
 80056b4:	f7fb fa28 	bl	8000b08 <__aeabi_dcmpeq>
 80056b8:	ec4b ab19 	vmov	d9, sl, fp
 80056bc:	4680      	mov	r8, r0
 80056be:	b158      	cbz	r0, 80056d8 <_dtoa_r+0xe0>
 80056c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056c2:	2301      	movs	r3, #1
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 856b 	beq.w	80061a4 <_dtoa_r+0xbac>
 80056ce:	4883      	ldr	r0, [pc, #524]	; (80058dc <_dtoa_r+0x2e4>)
 80056d0:	6018      	str	r0, [r3, #0]
 80056d2:	1e43      	subs	r3, r0, #1
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	e7df      	b.n	8005698 <_dtoa_r+0xa0>
 80056d8:	ec4b ab10 	vmov	d0, sl, fp
 80056dc:	aa10      	add	r2, sp, #64	; 0x40
 80056de:	a911      	add	r1, sp, #68	; 0x44
 80056e0:	4620      	mov	r0, r4
 80056e2:	f001 f8b9 	bl	8006858 <__d2b>
 80056e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80056ea:	ee08 0a10 	vmov	s16, r0
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	f000 8084 	beq.w	80057fc <_dtoa_r+0x204>
 80056f4:	ee19 3a90 	vmov	r3, s19
 80056f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005700:	4656      	mov	r6, sl
 8005702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800570a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800570e:	4b74      	ldr	r3, [pc, #464]	; (80058e0 <_dtoa_r+0x2e8>)
 8005710:	2200      	movs	r2, #0
 8005712:	4630      	mov	r0, r6
 8005714:	4639      	mov	r1, r7
 8005716:	f7fa fdd7 	bl	80002c8 <__aeabi_dsub>
 800571a:	a365      	add	r3, pc, #404	; (adr r3, 80058b0 <_dtoa_r+0x2b8>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa ff8a 	bl	8000638 <__aeabi_dmul>
 8005724:	a364      	add	r3, pc, #400	; (adr r3, 80058b8 <_dtoa_r+0x2c0>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fa fdcf 	bl	80002cc <__adddf3>
 800572e:	4606      	mov	r6, r0
 8005730:	4628      	mov	r0, r5
 8005732:	460f      	mov	r7, r1
 8005734:	f7fa ff16 	bl	8000564 <__aeabi_i2d>
 8005738:	a361      	add	r3, pc, #388	; (adr r3, 80058c0 <_dtoa_r+0x2c8>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff7b 	bl	8000638 <__aeabi_dmul>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4630      	mov	r0, r6
 8005748:	4639      	mov	r1, r7
 800574a:	f7fa fdbf 	bl	80002cc <__adddf3>
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	f7fb fa21 	bl	8000b98 <__aeabi_d2iz>
 8005756:	2200      	movs	r2, #0
 8005758:	9000      	str	r0, [sp, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fb f9dc 	bl	8000b1c <__aeabi_dcmplt>
 8005764:	b150      	cbz	r0, 800577c <_dtoa_r+0x184>
 8005766:	9800      	ldr	r0, [sp, #0]
 8005768:	f7fa fefc 	bl	8000564 <__aeabi_i2d>
 800576c:	4632      	mov	r2, r6
 800576e:	463b      	mov	r3, r7
 8005770:	f7fb f9ca 	bl	8000b08 <__aeabi_dcmpeq>
 8005774:	b910      	cbnz	r0, 800577c <_dtoa_r+0x184>
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	2b16      	cmp	r3, #22
 8005780:	d85a      	bhi.n	8005838 <_dtoa_r+0x240>
 8005782:	9a00      	ldr	r2, [sp, #0]
 8005784:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <_dtoa_r+0x2ec>)
 8005786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	ec51 0b19 	vmov	r0, r1, d9
 8005792:	f7fb f9c3 	bl	8000b1c <__aeabi_dcmplt>
 8005796:	2800      	cmp	r0, #0
 8005798:	d050      	beq.n	800583c <_dtoa_r+0x244>
 800579a:	9b00      	ldr	r3, [sp, #0]
 800579c:	3b01      	subs	r3, #1
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2300      	movs	r3, #0
 80057a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057a6:	1b5d      	subs	r5, r3, r5
 80057a8:	1e6b      	subs	r3, r5, #1
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	bf45      	ittet	mi
 80057ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80057b2:	9304      	strmi	r3, [sp, #16]
 80057b4:	2300      	movpl	r3, #0
 80057b6:	2300      	movmi	r3, #0
 80057b8:	bf4c      	ite	mi
 80057ba:	9305      	strmi	r3, [sp, #20]
 80057bc:	9304      	strpl	r3, [sp, #16]
 80057be:	9b00      	ldr	r3, [sp, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	db3d      	blt.n	8005840 <_dtoa_r+0x248>
 80057c4:	9b05      	ldr	r3, [sp, #20]
 80057c6:	9a00      	ldr	r2, [sp, #0]
 80057c8:	920a      	str	r2, [sp, #40]	; 0x28
 80057ca:	4413      	add	r3, r2
 80057cc:	9305      	str	r3, [sp, #20]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9307      	str	r3, [sp, #28]
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	f200 8089 	bhi.w	80058ec <_dtoa_r+0x2f4>
 80057da:	2b05      	cmp	r3, #5
 80057dc:	bfc4      	itt	gt
 80057de:	3b04      	subgt	r3, #4
 80057e0:	9306      	strgt	r3, [sp, #24]
 80057e2:	9b06      	ldr	r3, [sp, #24]
 80057e4:	f1a3 0302 	sub.w	r3, r3, #2
 80057e8:	bfcc      	ite	gt
 80057ea:	2500      	movgt	r5, #0
 80057ec:	2501      	movle	r5, #1
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	f200 8087 	bhi.w	8005902 <_dtoa_r+0x30a>
 80057f4:	e8df f003 	tbb	[pc, r3]
 80057f8:	59383a2d 	.word	0x59383a2d
 80057fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005800:	441d      	add	r5, r3
 8005802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005806:	2b20      	cmp	r3, #32
 8005808:	bfc1      	itttt	gt
 800580a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800580e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005812:	fa0b f303 	lslgt.w	r3, fp, r3
 8005816:	fa26 f000 	lsrgt.w	r0, r6, r0
 800581a:	bfda      	itte	le
 800581c:	f1c3 0320 	rsble	r3, r3, #32
 8005820:	fa06 f003 	lslle.w	r0, r6, r3
 8005824:	4318      	orrgt	r0, r3
 8005826:	f7fa fe8d 	bl	8000544 <__aeabi_ui2d>
 800582a:	2301      	movs	r3, #1
 800582c:	4606      	mov	r6, r0
 800582e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005832:	3d01      	subs	r5, #1
 8005834:	930e      	str	r3, [sp, #56]	; 0x38
 8005836:	e76a      	b.n	800570e <_dtoa_r+0x116>
 8005838:	2301      	movs	r3, #1
 800583a:	e7b2      	b.n	80057a2 <_dtoa_r+0x1aa>
 800583c:	900b      	str	r0, [sp, #44]	; 0x2c
 800583e:	e7b1      	b.n	80057a4 <_dtoa_r+0x1ac>
 8005840:	9b04      	ldr	r3, [sp, #16]
 8005842:	9a00      	ldr	r2, [sp, #0]
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	9304      	str	r3, [sp, #16]
 8005848:	4253      	negs	r3, r2
 800584a:	9307      	str	r3, [sp, #28]
 800584c:	2300      	movs	r3, #0
 800584e:	930a      	str	r3, [sp, #40]	; 0x28
 8005850:	e7bf      	b.n	80057d2 <_dtoa_r+0x1da>
 8005852:	2300      	movs	r3, #0
 8005854:	9308      	str	r3, [sp, #32]
 8005856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc55      	bgt.n	8005908 <_dtoa_r+0x310>
 800585c:	2301      	movs	r3, #1
 800585e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005862:	461a      	mov	r2, r3
 8005864:	9209      	str	r2, [sp, #36]	; 0x24
 8005866:	e00c      	b.n	8005882 <_dtoa_r+0x28a>
 8005868:	2301      	movs	r3, #1
 800586a:	e7f3      	b.n	8005854 <_dtoa_r+0x25c>
 800586c:	2300      	movs	r3, #0
 800586e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005870:	9308      	str	r3, [sp, #32]
 8005872:	9b00      	ldr	r3, [sp, #0]
 8005874:	4413      	add	r3, r2
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	3301      	adds	r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	9303      	str	r3, [sp, #12]
 800587e:	bfb8      	it	lt
 8005880:	2301      	movlt	r3, #1
 8005882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005884:	2200      	movs	r2, #0
 8005886:	6042      	str	r2, [r0, #4]
 8005888:	2204      	movs	r2, #4
 800588a:	f102 0614 	add.w	r6, r2, #20
 800588e:	429e      	cmp	r6, r3
 8005890:	6841      	ldr	r1, [r0, #4]
 8005892:	d93d      	bls.n	8005910 <_dtoa_r+0x318>
 8005894:	4620      	mov	r0, r4
 8005896:	f000 fcb7 	bl	8006208 <_Balloc>
 800589a:	9001      	str	r0, [sp, #4]
 800589c:	2800      	cmp	r0, #0
 800589e:	d13b      	bne.n	8005918 <_dtoa_r+0x320>
 80058a0:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <_dtoa_r+0x2f0>)
 80058a2:	4602      	mov	r2, r0
 80058a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058a8:	e6c0      	b.n	800562c <_dtoa_r+0x34>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e7df      	b.n	800586e <_dtoa_r+0x276>
 80058ae:	bf00      	nop
 80058b0:	636f4361 	.word	0x636f4361
 80058b4:	3fd287a7 	.word	0x3fd287a7
 80058b8:	8b60c8b3 	.word	0x8b60c8b3
 80058bc:	3fc68a28 	.word	0x3fc68a28
 80058c0:	509f79fb 	.word	0x509f79fb
 80058c4:	3fd34413 	.word	0x3fd34413
 80058c8:	080076ad 	.word	0x080076ad
 80058cc:	080076c4 	.word	0x080076c4
 80058d0:	7ff00000 	.word	0x7ff00000
 80058d4:	080076a9 	.word	0x080076a9
 80058d8:	080076a0 	.word	0x080076a0
 80058dc:	0800767d 	.word	0x0800767d
 80058e0:	3ff80000 	.word	0x3ff80000
 80058e4:	080077b8 	.word	0x080077b8
 80058e8:	0800771f 	.word	0x0800771f
 80058ec:	2501      	movs	r5, #1
 80058ee:	2300      	movs	r3, #0
 80058f0:	9306      	str	r3, [sp, #24]
 80058f2:	9508      	str	r5, [sp, #32]
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2312      	movs	r3, #18
 8005900:	e7b0      	b.n	8005864 <_dtoa_r+0x26c>
 8005902:	2301      	movs	r3, #1
 8005904:	9308      	str	r3, [sp, #32]
 8005906:	e7f5      	b.n	80058f4 <_dtoa_r+0x2fc>
 8005908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800590e:	e7b8      	b.n	8005882 <_dtoa_r+0x28a>
 8005910:	3101      	adds	r1, #1
 8005912:	6041      	str	r1, [r0, #4]
 8005914:	0052      	lsls	r2, r2, #1
 8005916:	e7b8      	b.n	800588a <_dtoa_r+0x292>
 8005918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800591a:	9a01      	ldr	r2, [sp, #4]
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	2b0e      	cmp	r3, #14
 8005922:	f200 809d 	bhi.w	8005a60 <_dtoa_r+0x468>
 8005926:	2d00      	cmp	r5, #0
 8005928:	f000 809a 	beq.w	8005a60 <_dtoa_r+0x468>
 800592c:	9b00      	ldr	r3, [sp, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	dd32      	ble.n	8005998 <_dtoa_r+0x3a0>
 8005932:	4ab7      	ldr	r2, [pc, #732]	; (8005c10 <_dtoa_r+0x618>)
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800593c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005940:	9b00      	ldr	r3, [sp, #0]
 8005942:	05d8      	lsls	r0, r3, #23
 8005944:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005948:	d516      	bpl.n	8005978 <_dtoa_r+0x380>
 800594a:	4bb2      	ldr	r3, [pc, #712]	; (8005c14 <_dtoa_r+0x61c>)
 800594c:	ec51 0b19 	vmov	r0, r1, d9
 8005950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005954:	f7fa ff9a 	bl	800088c <__aeabi_ddiv>
 8005958:	f007 070f 	and.w	r7, r7, #15
 800595c:	4682      	mov	sl, r0
 800595e:	468b      	mov	fp, r1
 8005960:	2503      	movs	r5, #3
 8005962:	4eac      	ldr	r6, [pc, #688]	; (8005c14 <_dtoa_r+0x61c>)
 8005964:	b957      	cbnz	r7, 800597c <_dtoa_r+0x384>
 8005966:	4642      	mov	r2, r8
 8005968:	464b      	mov	r3, r9
 800596a:	4650      	mov	r0, sl
 800596c:	4659      	mov	r1, fp
 800596e:	f7fa ff8d 	bl	800088c <__aeabi_ddiv>
 8005972:	4682      	mov	sl, r0
 8005974:	468b      	mov	fp, r1
 8005976:	e028      	b.n	80059ca <_dtoa_r+0x3d2>
 8005978:	2502      	movs	r5, #2
 800597a:	e7f2      	b.n	8005962 <_dtoa_r+0x36a>
 800597c:	07f9      	lsls	r1, r7, #31
 800597e:	d508      	bpl.n	8005992 <_dtoa_r+0x39a>
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005988:	f7fa fe56 	bl	8000638 <__aeabi_dmul>
 800598c:	3501      	adds	r5, #1
 800598e:	4680      	mov	r8, r0
 8005990:	4689      	mov	r9, r1
 8005992:	107f      	asrs	r7, r7, #1
 8005994:	3608      	adds	r6, #8
 8005996:	e7e5      	b.n	8005964 <_dtoa_r+0x36c>
 8005998:	f000 809b 	beq.w	8005ad2 <_dtoa_r+0x4da>
 800599c:	9b00      	ldr	r3, [sp, #0]
 800599e:	4f9d      	ldr	r7, [pc, #628]	; (8005c14 <_dtoa_r+0x61c>)
 80059a0:	425e      	negs	r6, r3
 80059a2:	4b9b      	ldr	r3, [pc, #620]	; (8005c10 <_dtoa_r+0x618>)
 80059a4:	f006 020f 	and.w	r2, r6, #15
 80059a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	ec51 0b19 	vmov	r0, r1, d9
 80059b4:	f7fa fe40 	bl	8000638 <__aeabi_dmul>
 80059b8:	1136      	asrs	r6, r6, #4
 80059ba:	4682      	mov	sl, r0
 80059bc:	468b      	mov	fp, r1
 80059be:	2300      	movs	r3, #0
 80059c0:	2502      	movs	r5, #2
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	d17a      	bne.n	8005abc <_dtoa_r+0x4c4>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1d3      	bne.n	8005972 <_dtoa_r+0x37a>
 80059ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8082 	beq.w	8005ad6 <_dtoa_r+0x4de>
 80059d2:	4b91      	ldr	r3, [pc, #580]	; (8005c18 <_dtoa_r+0x620>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	4650      	mov	r0, sl
 80059d8:	4659      	mov	r1, fp
 80059da:	f7fb f89f 	bl	8000b1c <__aeabi_dcmplt>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d079      	beq.n	8005ad6 <_dtoa_r+0x4de>
 80059e2:	9b03      	ldr	r3, [sp, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d076      	beq.n	8005ad6 <_dtoa_r+0x4de>
 80059e8:	9b02      	ldr	r3, [sp, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dd36      	ble.n	8005a5c <_dtoa_r+0x464>
 80059ee:	9b00      	ldr	r3, [sp, #0]
 80059f0:	4650      	mov	r0, sl
 80059f2:	4659      	mov	r1, fp
 80059f4:	1e5f      	subs	r7, r3, #1
 80059f6:	2200      	movs	r2, #0
 80059f8:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <_dtoa_r+0x624>)
 80059fa:	f7fa fe1d 	bl	8000638 <__aeabi_dmul>
 80059fe:	9e02      	ldr	r6, [sp, #8]
 8005a00:	4682      	mov	sl, r0
 8005a02:	468b      	mov	fp, r1
 8005a04:	3501      	adds	r5, #1
 8005a06:	4628      	mov	r0, r5
 8005a08:	f7fa fdac 	bl	8000564 <__aeabi_i2d>
 8005a0c:	4652      	mov	r2, sl
 8005a0e:	465b      	mov	r3, fp
 8005a10:	f7fa fe12 	bl	8000638 <__aeabi_dmul>
 8005a14:	4b82      	ldr	r3, [pc, #520]	; (8005c20 <_dtoa_r+0x628>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	f7fa fc58 	bl	80002cc <__adddf3>
 8005a1c:	46d0      	mov	r8, sl
 8005a1e:	46d9      	mov	r9, fp
 8005a20:	4682      	mov	sl, r0
 8005a22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a26:	2e00      	cmp	r6, #0
 8005a28:	d158      	bne.n	8005adc <_dtoa_r+0x4e4>
 8005a2a:	4b7e      	ldr	r3, [pc, #504]	; (8005c24 <_dtoa_r+0x62c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fa fc49 	bl	80002c8 <__aeabi_dsub>
 8005a36:	4652      	mov	r2, sl
 8005a38:	465b      	mov	r3, fp
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	4689      	mov	r9, r1
 8005a3e:	f7fb f88b 	bl	8000b58 <__aeabi_dcmpgt>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f040 8295 	bne.w	8005f72 <_dtoa_r+0x97a>
 8005a48:	4652      	mov	r2, sl
 8005a4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a4e:	4640      	mov	r0, r8
 8005a50:	4649      	mov	r1, r9
 8005a52:	f7fb f863 	bl	8000b1c <__aeabi_dcmplt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f040 8289 	bne.w	8005f6e <_dtoa_r+0x976>
 8005a5c:	ec5b ab19 	vmov	sl, fp, d9
 8005a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f2c0 8148 	blt.w	8005cf8 <_dtoa_r+0x700>
 8005a68:	9a00      	ldr	r2, [sp, #0]
 8005a6a:	2a0e      	cmp	r2, #14
 8005a6c:	f300 8144 	bgt.w	8005cf8 <_dtoa_r+0x700>
 8005a70:	4b67      	ldr	r3, [pc, #412]	; (8005c10 <_dtoa_r+0x618>)
 8005a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f280 80d5 	bge.w	8005c2c <_dtoa_r+0x634>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f300 80d1 	bgt.w	8005c2c <_dtoa_r+0x634>
 8005a8a:	f040 826f 	bne.w	8005f6c <_dtoa_r+0x974>
 8005a8e:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <_dtoa_r+0x62c>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	4640      	mov	r0, r8
 8005a94:	4649      	mov	r1, r9
 8005a96:	f7fa fdcf 	bl	8000638 <__aeabi_dmul>
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	465b      	mov	r3, fp
 8005a9e:	f7fb f851 	bl	8000b44 <__aeabi_dcmpge>
 8005aa2:	9e03      	ldr	r6, [sp, #12]
 8005aa4:	4637      	mov	r7, r6
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f040 8245 	bne.w	8005f36 <_dtoa_r+0x93e>
 8005aac:	9d01      	ldr	r5, [sp, #4]
 8005aae:	2331      	movs	r3, #49	; 0x31
 8005ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	e240      	b.n	8005f3e <_dtoa_r+0x946>
 8005abc:	07f2      	lsls	r2, r6, #31
 8005abe:	d505      	bpl.n	8005acc <_dtoa_r+0x4d4>
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	f7fa fdb8 	bl	8000638 <__aeabi_dmul>
 8005ac8:	3501      	adds	r5, #1
 8005aca:	2301      	movs	r3, #1
 8005acc:	1076      	asrs	r6, r6, #1
 8005ace:	3708      	adds	r7, #8
 8005ad0:	e777      	b.n	80059c2 <_dtoa_r+0x3ca>
 8005ad2:	2502      	movs	r5, #2
 8005ad4:	e779      	b.n	80059ca <_dtoa_r+0x3d2>
 8005ad6:	9f00      	ldr	r7, [sp, #0]
 8005ad8:	9e03      	ldr	r6, [sp, #12]
 8005ada:	e794      	b.n	8005a06 <_dtoa_r+0x40e>
 8005adc:	9901      	ldr	r1, [sp, #4]
 8005ade:	4b4c      	ldr	r3, [pc, #304]	; (8005c10 <_dtoa_r+0x618>)
 8005ae0:	4431      	add	r1, r6
 8005ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8005ae4:	9908      	ldr	r1, [sp, #32]
 8005ae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005aea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d043      	beq.n	8005b7a <_dtoa_r+0x582>
 8005af2:	494d      	ldr	r1, [pc, #308]	; (8005c28 <_dtoa_r+0x630>)
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fa fec9 	bl	800088c <__aeabi_ddiv>
 8005afa:	4652      	mov	r2, sl
 8005afc:	465b      	mov	r3, fp
 8005afe:	f7fa fbe3 	bl	80002c8 <__aeabi_dsub>
 8005b02:	9d01      	ldr	r5, [sp, #4]
 8005b04:	4682      	mov	sl, r0
 8005b06:	468b      	mov	fp, r1
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7fb f844 	bl	8000b98 <__aeabi_d2iz>
 8005b10:	4606      	mov	r6, r0
 8005b12:	f7fa fd27 	bl	8000564 <__aeabi_i2d>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	f7fa fbd3 	bl	80002c8 <__aeabi_dsub>
 8005b22:	3630      	adds	r6, #48	; 0x30
 8005b24:	f805 6b01 	strb.w	r6, [r5], #1
 8005b28:	4652      	mov	r2, sl
 8005b2a:	465b      	mov	r3, fp
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	4689      	mov	r9, r1
 8005b30:	f7fa fff4 	bl	8000b1c <__aeabi_dcmplt>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d163      	bne.n	8005c00 <_dtoa_r+0x608>
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	4936      	ldr	r1, [pc, #216]	; (8005c18 <_dtoa_r+0x620>)
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f7fa fbc2 	bl	80002c8 <__aeabi_dsub>
 8005b44:	4652      	mov	r2, sl
 8005b46:	465b      	mov	r3, fp
 8005b48:	f7fa ffe8 	bl	8000b1c <__aeabi_dcmplt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f040 80b5 	bne.w	8005cbc <_dtoa_r+0x6c4>
 8005b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b54:	429d      	cmp	r5, r3
 8005b56:	d081      	beq.n	8005a5c <_dtoa_r+0x464>
 8005b58:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <_dtoa_r+0x624>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	4659      	mov	r1, fp
 8005b60:	f7fa fd6a 	bl	8000638 <__aeabi_dmul>
 8005b64:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <_dtoa_r+0x624>)
 8005b66:	4682      	mov	sl, r0
 8005b68:	468b      	mov	fp, r1
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f7fa fd62 	bl	8000638 <__aeabi_dmul>
 8005b74:	4680      	mov	r8, r0
 8005b76:	4689      	mov	r9, r1
 8005b78:	e7c6      	b.n	8005b08 <_dtoa_r+0x510>
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	f7fa fd5b 	bl	8000638 <__aeabi_dmul>
 8005b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b84:	9d01      	ldr	r5, [sp, #4]
 8005b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b88:	4682      	mov	sl, r0
 8005b8a:	468b      	mov	fp, r1
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4640      	mov	r0, r8
 8005b90:	f7fb f802 	bl	8000b98 <__aeabi_d2iz>
 8005b94:	4606      	mov	r6, r0
 8005b96:	f7fa fce5 	bl	8000564 <__aeabi_i2d>
 8005b9a:	3630      	adds	r6, #48	; 0x30
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	f7fa fb90 	bl	80002c8 <__aeabi_dsub>
 8005ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8005bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	4689      	mov	r9, r1
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	d124      	bne.n	8005c04 <_dtoa_r+0x60c>
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <_dtoa_r+0x630>)
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	4659      	mov	r1, fp
 8005bc0:	f7fa fb84 	bl	80002cc <__adddf3>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4640      	mov	r0, r8
 8005bca:	4649      	mov	r1, r9
 8005bcc:	f7fa ffc4 	bl	8000b58 <__aeabi_dcmpgt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d173      	bne.n	8005cbc <_dtoa_r+0x6c4>
 8005bd4:	4652      	mov	r2, sl
 8005bd6:	465b      	mov	r3, fp
 8005bd8:	4913      	ldr	r1, [pc, #76]	; (8005c28 <_dtoa_r+0x630>)
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f7fa fb74 	bl	80002c8 <__aeabi_dsub>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa ff98 	bl	8000b1c <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f43f af35 	beq.w	8005a5c <_dtoa_r+0x464>
 8005bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005bf4:	1e6b      	subs	r3, r5, #1
 8005bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	d0f8      	beq.n	8005bf2 <_dtoa_r+0x5fa>
 8005c00:	9700      	str	r7, [sp, #0]
 8005c02:	e049      	b.n	8005c98 <_dtoa_r+0x6a0>
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <_dtoa_r+0x624>)
 8005c06:	f7fa fd17 	bl	8000638 <__aeabi_dmul>
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	4689      	mov	r9, r1
 8005c0e:	e7bd      	b.n	8005b8c <_dtoa_r+0x594>
 8005c10:	080077b8 	.word	0x080077b8
 8005c14:	08007790 	.word	0x08007790
 8005c18:	3ff00000 	.word	0x3ff00000
 8005c1c:	40240000 	.word	0x40240000
 8005c20:	401c0000 	.word	0x401c0000
 8005c24:	40140000 	.word	0x40140000
 8005c28:	3fe00000 	.word	0x3fe00000
 8005c2c:	9d01      	ldr	r5, [sp, #4]
 8005c2e:	4656      	mov	r6, sl
 8005c30:	465f      	mov	r7, fp
 8005c32:	4642      	mov	r2, r8
 8005c34:	464b      	mov	r3, r9
 8005c36:	4630      	mov	r0, r6
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f7fa fe27 	bl	800088c <__aeabi_ddiv>
 8005c3e:	f7fa ffab 	bl	8000b98 <__aeabi_d2iz>
 8005c42:	4682      	mov	sl, r0
 8005c44:	f7fa fc8e 	bl	8000564 <__aeabi_i2d>
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	f7fa fcf4 	bl	8000638 <__aeabi_dmul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005c5c:	f7fa fb34 	bl	80002c8 <__aeabi_dsub>
 8005c60:	f805 6b01 	strb.w	r6, [r5], #1
 8005c64:	9e01      	ldr	r6, [sp, #4]
 8005c66:	9f03      	ldr	r7, [sp, #12]
 8005c68:	1bae      	subs	r6, r5, r6
 8005c6a:	42b7      	cmp	r7, r6
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	d135      	bne.n	8005cde <_dtoa_r+0x6e6>
 8005c72:	f7fa fb2b 	bl	80002cc <__adddf3>
 8005c76:	4642      	mov	r2, r8
 8005c78:	464b      	mov	r3, r9
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	f7fa ff6b 	bl	8000b58 <__aeabi_dcmpgt>
 8005c82:	b9d0      	cbnz	r0, 8005cba <_dtoa_r+0x6c2>
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	4630      	mov	r0, r6
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f7fa ff3c 	bl	8000b08 <__aeabi_dcmpeq>
 8005c90:	b110      	cbz	r0, 8005c98 <_dtoa_r+0x6a0>
 8005c92:	f01a 0f01 	tst.w	sl, #1
 8005c96:	d110      	bne.n	8005cba <_dtoa_r+0x6c2>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	ee18 1a10 	vmov	r1, s16
 8005c9e:	f000 faf3 	bl	8006288 <_Bfree>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9800      	ldr	r0, [sp, #0]
 8005ca6:	702b      	strb	r3, [r5, #0]
 8005ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005caa:	3001      	adds	r0, #1
 8005cac:	6018      	str	r0, [r3, #0]
 8005cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f43f acf1 	beq.w	8005698 <_dtoa_r+0xa0>
 8005cb6:	601d      	str	r5, [r3, #0]
 8005cb8:	e4ee      	b.n	8005698 <_dtoa_r+0xa0>
 8005cba:	9f00      	ldr	r7, [sp, #0]
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	461d      	mov	r5, r3
 8005cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc4:	2a39      	cmp	r2, #57	; 0x39
 8005cc6:	d106      	bne.n	8005cd6 <_dtoa_r+0x6de>
 8005cc8:	9a01      	ldr	r2, [sp, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1f7      	bne.n	8005cbe <_dtoa_r+0x6c6>
 8005cce:	9901      	ldr	r1, [sp, #4]
 8005cd0:	2230      	movs	r2, #48	; 0x30
 8005cd2:	3701      	adds	r7, #1
 8005cd4:	700a      	strb	r2, [r1, #0]
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	3201      	adds	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e790      	b.n	8005c00 <_dtoa_r+0x608>
 8005cde:	4ba6      	ldr	r3, [pc, #664]	; (8005f78 <_dtoa_r+0x980>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f7fa fca9 	bl	8000638 <__aeabi_dmul>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4606      	mov	r6, r0
 8005cec:	460f      	mov	r7, r1
 8005cee:	f7fa ff0b 	bl	8000b08 <__aeabi_dcmpeq>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d09d      	beq.n	8005c32 <_dtoa_r+0x63a>
 8005cf6:	e7cf      	b.n	8005c98 <_dtoa_r+0x6a0>
 8005cf8:	9a08      	ldr	r2, [sp, #32]
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	f000 80d7 	beq.w	8005eae <_dtoa_r+0x8b6>
 8005d00:	9a06      	ldr	r2, [sp, #24]
 8005d02:	2a01      	cmp	r2, #1
 8005d04:	f300 80ba 	bgt.w	8005e7c <_dtoa_r+0x884>
 8005d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	f000 80b2 	beq.w	8005e74 <_dtoa_r+0x87c>
 8005d10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d14:	9e07      	ldr	r6, [sp, #28]
 8005d16:	9d04      	ldr	r5, [sp, #16]
 8005d18:	9a04      	ldr	r2, [sp, #16]
 8005d1a:	441a      	add	r2, r3
 8005d1c:	9204      	str	r2, [sp, #16]
 8005d1e:	9a05      	ldr	r2, [sp, #20]
 8005d20:	2101      	movs	r1, #1
 8005d22:	441a      	add	r2, r3
 8005d24:	4620      	mov	r0, r4
 8005d26:	9205      	str	r2, [sp, #20]
 8005d28:	f000 fb66 	bl	80063f8 <__i2b>
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	dd0c      	ble.n	8005d4c <_dtoa_r+0x754>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dd09      	ble.n	8005d4c <_dtoa_r+0x754>
 8005d38:	42ab      	cmp	r3, r5
 8005d3a:	9a04      	ldr	r2, [sp, #16]
 8005d3c:	bfa8      	it	ge
 8005d3e:	462b      	movge	r3, r5
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	9204      	str	r2, [sp, #16]
 8005d44:	9a05      	ldr	r2, [sp, #20]
 8005d46:	1aed      	subs	r5, r5, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	b31b      	cbz	r3, 8005d98 <_dtoa_r+0x7a0>
 8005d50:	9b08      	ldr	r3, [sp, #32]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80af 	beq.w	8005eb6 <_dtoa_r+0x8be>
 8005d58:	2e00      	cmp	r6, #0
 8005d5a:	dd13      	ble.n	8005d84 <_dtoa_r+0x78c>
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	4632      	mov	r2, r6
 8005d60:	4620      	mov	r0, r4
 8005d62:	f000 fc09 	bl	8006578 <__pow5mult>
 8005d66:	ee18 2a10 	vmov	r2, s16
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fb58 	bl	8006424 <__multiply>
 8005d74:	ee18 1a10 	vmov	r1, s16
 8005d78:	4680      	mov	r8, r0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 fa84 	bl	8006288 <_Bfree>
 8005d80:	ee08 8a10 	vmov	s16, r8
 8005d84:	9b07      	ldr	r3, [sp, #28]
 8005d86:	1b9a      	subs	r2, r3, r6
 8005d88:	d006      	beq.n	8005d98 <_dtoa_r+0x7a0>
 8005d8a:	ee18 1a10 	vmov	r1, s16
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fbf2 	bl	8006578 <__pow5mult>
 8005d94:	ee08 0a10 	vmov	s16, r0
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fb2c 	bl	80063f8 <__i2b>
 8005da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	4606      	mov	r6, r0
 8005da6:	f340 8088 	ble.w	8005eba <_dtoa_r+0x8c2>
 8005daa:	461a      	mov	r2, r3
 8005dac:	4601      	mov	r1, r0
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 fbe2 	bl	8006578 <__pow5mult>
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	4606      	mov	r6, r0
 8005dba:	f340 8081 	ble.w	8005ec0 <_dtoa_r+0x8c8>
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	6933      	ldr	r3, [r6, #16]
 8005dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005dc8:	6918      	ldr	r0, [r3, #16]
 8005dca:	f000 fac5 	bl	8006358 <__hi0bits>
 8005dce:	f1c0 0020 	rsb	r0, r0, #32
 8005dd2:	9b05      	ldr	r3, [sp, #20]
 8005dd4:	4418      	add	r0, r3
 8005dd6:	f010 001f 	ands.w	r0, r0, #31
 8005dda:	f000 8092 	beq.w	8005f02 <_dtoa_r+0x90a>
 8005dde:	f1c0 0320 	rsb	r3, r0, #32
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	f340 808a 	ble.w	8005efc <_dtoa_r+0x904>
 8005de8:	f1c0 001c 	rsb	r0, r0, #28
 8005dec:	9b04      	ldr	r3, [sp, #16]
 8005dee:	4403      	add	r3, r0
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	9b05      	ldr	r3, [sp, #20]
 8005df4:	4403      	add	r3, r0
 8005df6:	4405      	add	r5, r0
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dd07      	ble.n	8005e10 <_dtoa_r+0x818>
 8005e00:	ee18 1a10 	vmov	r1, s16
 8005e04:	461a      	mov	r2, r3
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 fc10 	bl	800662c <__lshift>
 8005e0c:	ee08 0a10 	vmov	s16, r0
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x82a>
 8005e16:	4631      	mov	r1, r6
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fc06 	bl	800662c <__lshift>
 8005e20:	4606      	mov	r6, r0
 8005e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d06e      	beq.n	8005f06 <_dtoa_r+0x90e>
 8005e28:	ee18 0a10 	vmov	r0, s16
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	f000 fc6d 	bl	800670c <__mcmp>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	da67      	bge.n	8005f06 <_dtoa_r+0x90e>
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	ee18 1a10 	vmov	r1, s16
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	220a      	movs	r2, #10
 8005e42:	2300      	movs	r3, #0
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fa41 	bl	80062cc <__multadd>
 8005e4a:	9b08      	ldr	r3, [sp, #32]
 8005e4c:	ee08 0a10 	vmov	s16, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 81b1 	beq.w	80061b8 <_dtoa_r+0xbc0>
 8005e56:	2300      	movs	r3, #0
 8005e58:	4639      	mov	r1, r7
 8005e5a:	220a      	movs	r2, #10
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fa35 	bl	80062cc <__multadd>
 8005e62:	9b02      	ldr	r3, [sp, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	4607      	mov	r7, r0
 8005e68:	f300 808e 	bgt.w	8005f88 <_dtoa_r+0x990>
 8005e6c:	9b06      	ldr	r3, [sp, #24]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	dc51      	bgt.n	8005f16 <_dtoa_r+0x91e>
 8005e72:	e089      	b.n	8005f88 <_dtoa_r+0x990>
 8005e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e7a:	e74b      	b.n	8005d14 <_dtoa_r+0x71c>
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	1e5e      	subs	r6, r3, #1
 8005e80:	9b07      	ldr	r3, [sp, #28]
 8005e82:	42b3      	cmp	r3, r6
 8005e84:	bfbf      	itttt	lt
 8005e86:	9b07      	ldrlt	r3, [sp, #28]
 8005e88:	9607      	strlt	r6, [sp, #28]
 8005e8a:	1af2      	sublt	r2, r6, r3
 8005e8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e8e:	bfb6      	itet	lt
 8005e90:	189b      	addlt	r3, r3, r2
 8005e92:	1b9e      	subge	r6, r3, r6
 8005e94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	bfb8      	it	lt
 8005e9a:	2600      	movlt	r6, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfb7      	itett	lt
 8005ea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ea8:	1a9d      	sublt	r5, r3, r2
 8005eaa:	2300      	movlt	r3, #0
 8005eac:	e734      	b.n	8005d18 <_dtoa_r+0x720>
 8005eae:	9e07      	ldr	r6, [sp, #28]
 8005eb0:	9d04      	ldr	r5, [sp, #16]
 8005eb2:	9f08      	ldr	r7, [sp, #32]
 8005eb4:	e73b      	b.n	8005d2e <_dtoa_r+0x736>
 8005eb6:	9a07      	ldr	r2, [sp, #28]
 8005eb8:	e767      	b.n	8005d8a <_dtoa_r+0x792>
 8005eba:	9b06      	ldr	r3, [sp, #24]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	dc18      	bgt.n	8005ef2 <_dtoa_r+0x8fa>
 8005ec0:	f1ba 0f00 	cmp.w	sl, #0
 8005ec4:	d115      	bne.n	8005ef2 <_dtoa_r+0x8fa>
 8005ec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005eca:	b993      	cbnz	r3, 8005ef2 <_dtoa_r+0x8fa>
 8005ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ed0:	0d1b      	lsrs	r3, r3, #20
 8005ed2:	051b      	lsls	r3, r3, #20
 8005ed4:	b183      	cbz	r3, 8005ef8 <_dtoa_r+0x900>
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	9b05      	ldr	r3, [sp, #20]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	f04f 0801 	mov.w	r8, #1
 8005ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f47f af6a 	bne.w	8005dc2 <_dtoa_r+0x7ca>
 8005eee:	2001      	movs	r0, #1
 8005ef0:	e76f      	b.n	8005dd2 <_dtoa_r+0x7da>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	e7f6      	b.n	8005ee6 <_dtoa_r+0x8ee>
 8005ef8:	4698      	mov	r8, r3
 8005efa:	e7f4      	b.n	8005ee6 <_dtoa_r+0x8ee>
 8005efc:	f43f af7d 	beq.w	8005dfa <_dtoa_r+0x802>
 8005f00:	4618      	mov	r0, r3
 8005f02:	301c      	adds	r0, #28
 8005f04:	e772      	b.n	8005dec <_dtoa_r+0x7f4>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dc37      	bgt.n	8005f7c <_dtoa_r+0x984>
 8005f0c:	9b06      	ldr	r3, [sp, #24]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	dd34      	ble.n	8005f7c <_dtoa_r+0x984>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	9302      	str	r3, [sp, #8]
 8005f16:	9b02      	ldr	r3, [sp, #8]
 8005f18:	b96b      	cbnz	r3, 8005f36 <_dtoa_r+0x93e>
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	2205      	movs	r2, #5
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 f9d4 	bl	80062cc <__multadd>
 8005f24:	4601      	mov	r1, r0
 8005f26:	4606      	mov	r6, r0
 8005f28:	ee18 0a10 	vmov	r0, s16
 8005f2c:	f000 fbee 	bl	800670c <__mcmp>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f73f adbb 	bgt.w	8005aac <_dtoa_r+0x4b4>
 8005f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f38:	9d01      	ldr	r5, [sp, #4]
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	f04f 0800 	mov.w	r8, #0
 8005f42:	4631      	mov	r1, r6
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 f99f 	bl	8006288 <_Bfree>
 8005f4a:	2f00      	cmp	r7, #0
 8005f4c:	f43f aea4 	beq.w	8005c98 <_dtoa_r+0x6a0>
 8005f50:	f1b8 0f00 	cmp.w	r8, #0
 8005f54:	d005      	beq.n	8005f62 <_dtoa_r+0x96a>
 8005f56:	45b8      	cmp	r8, r7
 8005f58:	d003      	beq.n	8005f62 <_dtoa_r+0x96a>
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 f993 	bl	8006288 <_Bfree>
 8005f62:	4639      	mov	r1, r7
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 f98f 	bl	8006288 <_Bfree>
 8005f6a:	e695      	b.n	8005c98 <_dtoa_r+0x6a0>
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	4637      	mov	r7, r6
 8005f70:	e7e1      	b.n	8005f36 <_dtoa_r+0x93e>
 8005f72:	9700      	str	r7, [sp, #0]
 8005f74:	4637      	mov	r7, r6
 8005f76:	e599      	b.n	8005aac <_dtoa_r+0x4b4>
 8005f78:	40240000 	.word	0x40240000
 8005f7c:	9b08      	ldr	r3, [sp, #32]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80ca 	beq.w	8006118 <_dtoa_r+0xb20>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	9302      	str	r3, [sp, #8]
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	dd05      	ble.n	8005f98 <_dtoa_r+0x9a0>
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	462a      	mov	r2, r5
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fb4b 	bl	800662c <__lshift>
 8005f96:	4607      	mov	r7, r0
 8005f98:	f1b8 0f00 	cmp.w	r8, #0
 8005f9c:	d05b      	beq.n	8006056 <_dtoa_r+0xa5e>
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 f931 	bl	8006208 <_Balloc>
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	b928      	cbnz	r0, 8005fb6 <_dtoa_r+0x9be>
 8005faa:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <_dtoa_r+0xbd0>)
 8005fac:	4602      	mov	r2, r0
 8005fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fb2:	f7ff bb3b 	b.w	800562c <_dtoa_r+0x34>
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	3202      	adds	r2, #2
 8005fba:	0092      	lsls	r2, r2, #2
 8005fbc:	f107 010c 	add.w	r1, r7, #12
 8005fc0:	300c      	adds	r0, #12
 8005fc2:	f000 f913 	bl	80061ec <memcpy>
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fb2e 	bl	800662c <__lshift>
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	f103 0901 	add.w	r9, r3, #1
 8005fd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005fda:	4413      	add	r3, r2
 8005fdc:	9305      	str	r3, [sp, #20]
 8005fde:	f00a 0301 	and.w	r3, sl, #1
 8005fe2:	46b8      	mov	r8, r7
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	4631      	mov	r1, r6
 8005fea:	ee18 0a10 	vmov	r0, s16
 8005fee:	f7ff fa77 	bl	80054e0 <quorem>
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	9002      	str	r0, [sp, #8]
 8005ff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ffa:	ee18 0a10 	vmov	r0, s16
 8005ffe:	f000 fb85 	bl	800670c <__mcmp>
 8006002:	463a      	mov	r2, r7
 8006004:	9003      	str	r0, [sp, #12]
 8006006:	4631      	mov	r1, r6
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fb9b 	bl	8006744 <__mdiff>
 800600e:	68c2      	ldr	r2, [r0, #12]
 8006010:	f109 3bff 	add.w	fp, r9, #4294967295
 8006014:	4605      	mov	r5, r0
 8006016:	bb02      	cbnz	r2, 800605a <_dtoa_r+0xa62>
 8006018:	4601      	mov	r1, r0
 800601a:	ee18 0a10 	vmov	r0, s16
 800601e:	f000 fb75 	bl	800670c <__mcmp>
 8006022:	4602      	mov	r2, r0
 8006024:	4629      	mov	r1, r5
 8006026:	4620      	mov	r0, r4
 8006028:	9207      	str	r2, [sp, #28]
 800602a:	f000 f92d 	bl	8006288 <_Bfree>
 800602e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006032:	ea43 0102 	orr.w	r1, r3, r2
 8006036:	9b04      	ldr	r3, [sp, #16]
 8006038:	430b      	orrs	r3, r1
 800603a:	464d      	mov	r5, r9
 800603c:	d10f      	bne.n	800605e <_dtoa_r+0xa66>
 800603e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006042:	d02a      	beq.n	800609a <_dtoa_r+0xaa2>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	dd02      	ble.n	8006050 <_dtoa_r+0xa58>
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006050:	f88b a000 	strb.w	sl, [fp]
 8006054:	e775      	b.n	8005f42 <_dtoa_r+0x94a>
 8006056:	4638      	mov	r0, r7
 8006058:	e7ba      	b.n	8005fd0 <_dtoa_r+0x9d8>
 800605a:	2201      	movs	r2, #1
 800605c:	e7e2      	b.n	8006024 <_dtoa_r+0xa2c>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	db04      	blt.n	800606e <_dtoa_r+0xa76>
 8006064:	9906      	ldr	r1, [sp, #24]
 8006066:	430b      	orrs	r3, r1
 8006068:	9904      	ldr	r1, [sp, #16]
 800606a:	430b      	orrs	r3, r1
 800606c:	d122      	bne.n	80060b4 <_dtoa_r+0xabc>
 800606e:	2a00      	cmp	r2, #0
 8006070:	ddee      	ble.n	8006050 <_dtoa_r+0xa58>
 8006072:	ee18 1a10 	vmov	r1, s16
 8006076:	2201      	movs	r2, #1
 8006078:	4620      	mov	r0, r4
 800607a:	f000 fad7 	bl	800662c <__lshift>
 800607e:	4631      	mov	r1, r6
 8006080:	ee08 0a10 	vmov	s16, r0
 8006084:	f000 fb42 	bl	800670c <__mcmp>
 8006088:	2800      	cmp	r0, #0
 800608a:	dc03      	bgt.n	8006094 <_dtoa_r+0xa9c>
 800608c:	d1e0      	bne.n	8006050 <_dtoa_r+0xa58>
 800608e:	f01a 0f01 	tst.w	sl, #1
 8006092:	d0dd      	beq.n	8006050 <_dtoa_r+0xa58>
 8006094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006098:	d1d7      	bne.n	800604a <_dtoa_r+0xa52>
 800609a:	2339      	movs	r3, #57	; 0x39
 800609c:	f88b 3000 	strb.w	r3, [fp]
 80060a0:	462b      	mov	r3, r5
 80060a2:	461d      	mov	r5, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060aa:	2a39      	cmp	r2, #57	; 0x39
 80060ac:	d071      	beq.n	8006192 <_dtoa_r+0xb9a>
 80060ae:	3201      	adds	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e746      	b.n	8005f42 <_dtoa_r+0x94a>
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	dd07      	ble.n	80060c8 <_dtoa_r+0xad0>
 80060b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060bc:	d0ed      	beq.n	800609a <_dtoa_r+0xaa2>
 80060be:	f10a 0301 	add.w	r3, sl, #1
 80060c2:	f88b 3000 	strb.w	r3, [fp]
 80060c6:	e73c      	b.n	8005f42 <_dtoa_r+0x94a>
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80060ce:	4599      	cmp	r9, r3
 80060d0:	d047      	beq.n	8006162 <_dtoa_r+0xb6a>
 80060d2:	ee18 1a10 	vmov	r1, s16
 80060d6:	2300      	movs	r3, #0
 80060d8:	220a      	movs	r2, #10
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f8f6 	bl	80062cc <__multadd>
 80060e0:	45b8      	cmp	r8, r7
 80060e2:	ee08 0a10 	vmov	s16, r0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	f04f 020a 	mov.w	r2, #10
 80060ee:	4641      	mov	r1, r8
 80060f0:	4620      	mov	r0, r4
 80060f2:	d106      	bne.n	8006102 <_dtoa_r+0xb0a>
 80060f4:	f000 f8ea 	bl	80062cc <__multadd>
 80060f8:	4680      	mov	r8, r0
 80060fa:	4607      	mov	r7, r0
 80060fc:	f109 0901 	add.w	r9, r9, #1
 8006100:	e772      	b.n	8005fe8 <_dtoa_r+0x9f0>
 8006102:	f000 f8e3 	bl	80062cc <__multadd>
 8006106:	4639      	mov	r1, r7
 8006108:	4680      	mov	r8, r0
 800610a:	2300      	movs	r3, #0
 800610c:	220a      	movs	r2, #10
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f8dc 	bl	80062cc <__multadd>
 8006114:	4607      	mov	r7, r0
 8006116:	e7f1      	b.n	80060fc <_dtoa_r+0xb04>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	9302      	str	r3, [sp, #8]
 800611c:	9d01      	ldr	r5, [sp, #4]
 800611e:	ee18 0a10 	vmov	r0, s16
 8006122:	4631      	mov	r1, r6
 8006124:	f7ff f9dc 	bl	80054e0 <quorem>
 8006128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	f805 ab01 	strb.w	sl, [r5], #1
 8006132:	1aea      	subs	r2, r5, r3
 8006134:	9b02      	ldr	r3, [sp, #8]
 8006136:	4293      	cmp	r3, r2
 8006138:	dd09      	ble.n	800614e <_dtoa_r+0xb56>
 800613a:	ee18 1a10 	vmov	r1, s16
 800613e:	2300      	movs	r3, #0
 8006140:	220a      	movs	r2, #10
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f8c2 	bl	80062cc <__multadd>
 8006148:	ee08 0a10 	vmov	s16, r0
 800614c:	e7e7      	b.n	800611e <_dtoa_r+0xb26>
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfc8      	it	gt
 8006154:	461d      	movgt	r5, r3
 8006156:	9b01      	ldr	r3, [sp, #4]
 8006158:	bfd8      	it	le
 800615a:	2501      	movle	r5, #1
 800615c:	441d      	add	r5, r3
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	ee18 1a10 	vmov	r1, s16
 8006166:	2201      	movs	r2, #1
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fa5f 	bl	800662c <__lshift>
 800616e:	4631      	mov	r1, r6
 8006170:	ee08 0a10 	vmov	s16, r0
 8006174:	f000 faca 	bl	800670c <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	dc91      	bgt.n	80060a0 <_dtoa_r+0xaa8>
 800617c:	d102      	bne.n	8006184 <_dtoa_r+0xb8c>
 800617e:	f01a 0f01 	tst.w	sl, #1
 8006182:	d18d      	bne.n	80060a0 <_dtoa_r+0xaa8>
 8006184:	462b      	mov	r3, r5
 8006186:	461d      	mov	r5, r3
 8006188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800618c:	2a30      	cmp	r2, #48	; 0x30
 800618e:	d0fa      	beq.n	8006186 <_dtoa_r+0xb8e>
 8006190:	e6d7      	b.n	8005f42 <_dtoa_r+0x94a>
 8006192:	9a01      	ldr	r2, [sp, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d184      	bne.n	80060a2 <_dtoa_r+0xaaa>
 8006198:	9b00      	ldr	r3, [sp, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2331      	movs	r3, #49	; 0x31
 80061a0:	7013      	strb	r3, [r2, #0]
 80061a2:	e6ce      	b.n	8005f42 <_dtoa_r+0x94a>
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <_dtoa_r+0xbd4>)
 80061a6:	f7ff ba95 	b.w	80056d4 <_dtoa_r+0xdc>
 80061aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f aa6e 	bne.w	800568e <_dtoa_r+0x96>
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <_dtoa_r+0xbd8>)
 80061b4:	f7ff ba8e 	b.w	80056d4 <_dtoa_r+0xdc>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dcae      	bgt.n	800611c <_dtoa_r+0xb24>
 80061be:	9b06      	ldr	r3, [sp, #24]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	f73f aea8 	bgt.w	8005f16 <_dtoa_r+0x91e>
 80061c6:	e7a9      	b.n	800611c <_dtoa_r+0xb24>
 80061c8:	0800771f 	.word	0x0800771f
 80061cc:	0800767c 	.word	0x0800767c
 80061d0:	080076a0 	.word	0x080076a0

080061d4 <_localeconv_r>:
 80061d4:	4800      	ldr	r0, [pc, #0]	; (80061d8 <_localeconv_r+0x4>)
 80061d6:	4770      	bx	lr
 80061d8:	20000160 	.word	0x20000160

080061dc <malloc>:
 80061dc:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <malloc+0xc>)
 80061de:	4601      	mov	r1, r0
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	f000 bc17 	b.w	8006a14 <_malloc_r>
 80061e6:	bf00      	nop
 80061e8:	2000000c 	.word	0x2000000c

080061ec <memcpy>:
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f4:	d100      	bne.n	80061f8 <memcpy+0xc>
 80061f6:	4770      	bx	lr
 80061f8:	b510      	push	{r4, lr}
 80061fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006202:	4291      	cmp	r1, r2
 8006204:	d1f9      	bne.n	80061fa <memcpy+0xe>
 8006206:	bd10      	pop	{r4, pc}

08006208 <_Balloc>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	b976      	cbnz	r6, 8006230 <_Balloc+0x28>
 8006212:	2010      	movs	r0, #16
 8006214:	f7ff ffe2 	bl	80061dc <malloc>
 8006218:	4602      	mov	r2, r0
 800621a:	6260      	str	r0, [r4, #36]	; 0x24
 800621c:	b920      	cbnz	r0, 8006228 <_Balloc+0x20>
 800621e:	4b18      	ldr	r3, [pc, #96]	; (8006280 <_Balloc+0x78>)
 8006220:	4818      	ldr	r0, [pc, #96]	; (8006284 <_Balloc+0x7c>)
 8006222:	2166      	movs	r1, #102	; 0x66
 8006224:	f000 fc7a 	bl	8006b1c <__assert_func>
 8006228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800622c:	6006      	str	r6, [r0, #0]
 800622e:	60c6      	str	r6, [r0, #12]
 8006230:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006232:	68f3      	ldr	r3, [r6, #12]
 8006234:	b183      	cbz	r3, 8006258 <_Balloc+0x50>
 8006236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800623e:	b9b8      	cbnz	r0, 8006270 <_Balloc+0x68>
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f605 	lsl.w	r6, r1, r5
 8006246:	1d72      	adds	r2, r6, #5
 8006248:	0092      	lsls	r2, r2, #2
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fb60 	bl	8006910 <_calloc_r>
 8006250:	b160      	cbz	r0, 800626c <_Balloc+0x64>
 8006252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006256:	e00e      	b.n	8006276 <_Balloc+0x6e>
 8006258:	2221      	movs	r2, #33	; 0x21
 800625a:	2104      	movs	r1, #4
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fb57 	bl	8006910 <_calloc_r>
 8006262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006264:	60f0      	str	r0, [r6, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e4      	bne.n	8006236 <_Balloc+0x2e>
 800626c:	2000      	movs	r0, #0
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	6802      	ldr	r2, [r0, #0]
 8006272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006276:	2300      	movs	r3, #0
 8006278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800627c:	e7f7      	b.n	800626e <_Balloc+0x66>
 800627e:	bf00      	nop
 8006280:	080076ad 	.word	0x080076ad
 8006284:	08007730 	.word	0x08007730

08006288 <_Bfree>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800628c:	4605      	mov	r5, r0
 800628e:	460c      	mov	r4, r1
 8006290:	b976      	cbnz	r6, 80062b0 <_Bfree+0x28>
 8006292:	2010      	movs	r0, #16
 8006294:	f7ff ffa2 	bl	80061dc <malloc>
 8006298:	4602      	mov	r2, r0
 800629a:	6268      	str	r0, [r5, #36]	; 0x24
 800629c:	b920      	cbnz	r0, 80062a8 <_Bfree+0x20>
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <_Bfree+0x3c>)
 80062a0:	4809      	ldr	r0, [pc, #36]	; (80062c8 <_Bfree+0x40>)
 80062a2:	218a      	movs	r1, #138	; 0x8a
 80062a4:	f000 fc3a 	bl	8006b1c <__assert_func>
 80062a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062ac:	6006      	str	r6, [r0, #0]
 80062ae:	60c6      	str	r6, [r0, #12]
 80062b0:	b13c      	cbz	r4, 80062c2 <_Bfree+0x3a>
 80062b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062b4:	6862      	ldr	r2, [r4, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062bc:	6021      	str	r1, [r4, #0]
 80062be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	080076ad 	.word	0x080076ad
 80062c8:	08007730 	.word	0x08007730

080062cc <__multadd>:
 80062cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	690d      	ldr	r5, [r1, #16]
 80062d2:	4607      	mov	r7, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	461e      	mov	r6, r3
 80062d8:	f101 0c14 	add.w	ip, r1, #20
 80062dc:	2000      	movs	r0, #0
 80062de:	f8dc 3000 	ldr.w	r3, [ip]
 80062e2:	b299      	uxth	r1, r3
 80062e4:	fb02 6101 	mla	r1, r2, r1, r6
 80062e8:	0c1e      	lsrs	r6, r3, #16
 80062ea:	0c0b      	lsrs	r3, r1, #16
 80062ec:	fb02 3306 	mla	r3, r2, r6, r3
 80062f0:	b289      	uxth	r1, r1
 80062f2:	3001      	adds	r0, #1
 80062f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062f8:	4285      	cmp	r5, r0
 80062fa:	f84c 1b04 	str.w	r1, [ip], #4
 80062fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006302:	dcec      	bgt.n	80062de <__multadd+0x12>
 8006304:	b30e      	cbz	r6, 800634a <__multadd+0x7e>
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	42ab      	cmp	r3, r5
 800630a:	dc19      	bgt.n	8006340 <__multadd+0x74>
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	4638      	mov	r0, r7
 8006310:	3101      	adds	r1, #1
 8006312:	f7ff ff79 	bl	8006208 <_Balloc>
 8006316:	4680      	mov	r8, r0
 8006318:	b928      	cbnz	r0, 8006326 <__multadd+0x5a>
 800631a:	4602      	mov	r2, r0
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <__multadd+0x84>)
 800631e:	480d      	ldr	r0, [pc, #52]	; (8006354 <__multadd+0x88>)
 8006320:	21b5      	movs	r1, #181	; 0xb5
 8006322:	f000 fbfb 	bl	8006b1c <__assert_func>
 8006326:	6922      	ldr	r2, [r4, #16]
 8006328:	3202      	adds	r2, #2
 800632a:	f104 010c 	add.w	r1, r4, #12
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	300c      	adds	r0, #12
 8006332:	f7ff ff5b 	bl	80061ec <memcpy>
 8006336:	4621      	mov	r1, r4
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ffa5 	bl	8006288 <_Bfree>
 800633e:	4644      	mov	r4, r8
 8006340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006344:	3501      	adds	r5, #1
 8006346:	615e      	str	r6, [r3, #20]
 8006348:	6125      	str	r5, [r4, #16]
 800634a:	4620      	mov	r0, r4
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	0800771f 	.word	0x0800771f
 8006354:	08007730 	.word	0x08007730

08006358 <__hi0bits>:
 8006358:	0c03      	lsrs	r3, r0, #16
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	b9d3      	cbnz	r3, 8006394 <__hi0bits+0x3c>
 800635e:	0400      	lsls	r0, r0, #16
 8006360:	2310      	movs	r3, #16
 8006362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006366:	bf04      	itt	eq
 8006368:	0200      	lsleq	r0, r0, #8
 800636a:	3308      	addeq	r3, #8
 800636c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006370:	bf04      	itt	eq
 8006372:	0100      	lsleq	r0, r0, #4
 8006374:	3304      	addeq	r3, #4
 8006376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800637a:	bf04      	itt	eq
 800637c:	0080      	lsleq	r0, r0, #2
 800637e:	3302      	addeq	r3, #2
 8006380:	2800      	cmp	r0, #0
 8006382:	db05      	blt.n	8006390 <__hi0bits+0x38>
 8006384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006388:	f103 0301 	add.w	r3, r3, #1
 800638c:	bf08      	it	eq
 800638e:	2320      	moveq	r3, #32
 8006390:	4618      	mov	r0, r3
 8006392:	4770      	bx	lr
 8006394:	2300      	movs	r3, #0
 8006396:	e7e4      	b.n	8006362 <__hi0bits+0xa>

08006398 <__lo0bits>:
 8006398:	6803      	ldr	r3, [r0, #0]
 800639a:	f013 0207 	ands.w	r2, r3, #7
 800639e:	4601      	mov	r1, r0
 80063a0:	d00b      	beq.n	80063ba <__lo0bits+0x22>
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	d423      	bmi.n	80063ee <__lo0bits+0x56>
 80063a6:	0798      	lsls	r0, r3, #30
 80063a8:	bf49      	itett	mi
 80063aa:	085b      	lsrmi	r3, r3, #1
 80063ac:	089b      	lsrpl	r3, r3, #2
 80063ae:	2001      	movmi	r0, #1
 80063b0:	600b      	strmi	r3, [r1, #0]
 80063b2:	bf5c      	itt	pl
 80063b4:	600b      	strpl	r3, [r1, #0]
 80063b6:	2002      	movpl	r0, #2
 80063b8:	4770      	bx	lr
 80063ba:	b298      	uxth	r0, r3
 80063bc:	b9a8      	cbnz	r0, 80063ea <__lo0bits+0x52>
 80063be:	0c1b      	lsrs	r3, r3, #16
 80063c0:	2010      	movs	r0, #16
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	b90a      	cbnz	r2, 80063ca <__lo0bits+0x32>
 80063c6:	3008      	adds	r0, #8
 80063c8:	0a1b      	lsrs	r3, r3, #8
 80063ca:	071a      	lsls	r2, r3, #28
 80063cc:	bf04      	itt	eq
 80063ce:	091b      	lsreq	r3, r3, #4
 80063d0:	3004      	addeq	r0, #4
 80063d2:	079a      	lsls	r2, r3, #30
 80063d4:	bf04      	itt	eq
 80063d6:	089b      	lsreq	r3, r3, #2
 80063d8:	3002      	addeq	r0, #2
 80063da:	07da      	lsls	r2, r3, #31
 80063dc:	d403      	bmi.n	80063e6 <__lo0bits+0x4e>
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	f100 0001 	add.w	r0, r0, #1
 80063e4:	d005      	beq.n	80063f2 <__lo0bits+0x5a>
 80063e6:	600b      	str	r3, [r1, #0]
 80063e8:	4770      	bx	lr
 80063ea:	4610      	mov	r0, r2
 80063ec:	e7e9      	b.n	80063c2 <__lo0bits+0x2a>
 80063ee:	2000      	movs	r0, #0
 80063f0:	4770      	bx	lr
 80063f2:	2020      	movs	r0, #32
 80063f4:	4770      	bx	lr
	...

080063f8 <__i2b>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	460c      	mov	r4, r1
 80063fc:	2101      	movs	r1, #1
 80063fe:	f7ff ff03 	bl	8006208 <_Balloc>
 8006402:	4602      	mov	r2, r0
 8006404:	b928      	cbnz	r0, 8006412 <__i2b+0x1a>
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <__i2b+0x24>)
 8006408:	4805      	ldr	r0, [pc, #20]	; (8006420 <__i2b+0x28>)
 800640a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800640e:	f000 fb85 	bl	8006b1c <__assert_func>
 8006412:	2301      	movs	r3, #1
 8006414:	6144      	str	r4, [r0, #20]
 8006416:	6103      	str	r3, [r0, #16]
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	0800771f 	.word	0x0800771f
 8006420:	08007730 	.word	0x08007730

08006424 <__multiply>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4691      	mov	r9, r2
 800642a:	690a      	ldr	r2, [r1, #16]
 800642c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006430:	429a      	cmp	r2, r3
 8006432:	bfb8      	it	lt
 8006434:	460b      	movlt	r3, r1
 8006436:	460c      	mov	r4, r1
 8006438:	bfbc      	itt	lt
 800643a:	464c      	movlt	r4, r9
 800643c:	4699      	movlt	r9, r3
 800643e:	6927      	ldr	r7, [r4, #16]
 8006440:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006444:	68a3      	ldr	r3, [r4, #8]
 8006446:	6861      	ldr	r1, [r4, #4]
 8006448:	eb07 060a 	add.w	r6, r7, sl
 800644c:	42b3      	cmp	r3, r6
 800644e:	b085      	sub	sp, #20
 8006450:	bfb8      	it	lt
 8006452:	3101      	addlt	r1, #1
 8006454:	f7ff fed8 	bl	8006208 <_Balloc>
 8006458:	b930      	cbnz	r0, 8006468 <__multiply+0x44>
 800645a:	4602      	mov	r2, r0
 800645c:	4b44      	ldr	r3, [pc, #272]	; (8006570 <__multiply+0x14c>)
 800645e:	4845      	ldr	r0, [pc, #276]	; (8006574 <__multiply+0x150>)
 8006460:	f240 115d 	movw	r1, #349	; 0x15d
 8006464:	f000 fb5a 	bl	8006b1c <__assert_func>
 8006468:	f100 0514 	add.w	r5, r0, #20
 800646c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006470:	462b      	mov	r3, r5
 8006472:	2200      	movs	r2, #0
 8006474:	4543      	cmp	r3, r8
 8006476:	d321      	bcc.n	80064bc <__multiply+0x98>
 8006478:	f104 0314 	add.w	r3, r4, #20
 800647c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006480:	f109 0314 	add.w	r3, r9, #20
 8006484:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006488:	9202      	str	r2, [sp, #8]
 800648a:	1b3a      	subs	r2, r7, r4
 800648c:	3a15      	subs	r2, #21
 800648e:	f022 0203 	bic.w	r2, r2, #3
 8006492:	3204      	adds	r2, #4
 8006494:	f104 0115 	add.w	r1, r4, #21
 8006498:	428f      	cmp	r7, r1
 800649a:	bf38      	it	cc
 800649c:	2204      	movcc	r2, #4
 800649e:	9201      	str	r2, [sp, #4]
 80064a0:	9a02      	ldr	r2, [sp, #8]
 80064a2:	9303      	str	r3, [sp, #12]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d80c      	bhi.n	80064c2 <__multiply+0x9e>
 80064a8:	2e00      	cmp	r6, #0
 80064aa:	dd03      	ble.n	80064b4 <__multiply+0x90>
 80064ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d05a      	beq.n	800656a <__multiply+0x146>
 80064b4:	6106      	str	r6, [r0, #16]
 80064b6:	b005      	add	sp, #20
 80064b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064bc:	f843 2b04 	str.w	r2, [r3], #4
 80064c0:	e7d8      	b.n	8006474 <__multiply+0x50>
 80064c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80064c6:	f1ba 0f00 	cmp.w	sl, #0
 80064ca:	d024      	beq.n	8006516 <__multiply+0xf2>
 80064cc:	f104 0e14 	add.w	lr, r4, #20
 80064d0:	46a9      	mov	r9, r5
 80064d2:	f04f 0c00 	mov.w	ip, #0
 80064d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064da:	f8d9 1000 	ldr.w	r1, [r9]
 80064de:	fa1f fb82 	uxth.w	fp, r2
 80064e2:	b289      	uxth	r1, r1
 80064e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80064e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80064ec:	f8d9 2000 	ldr.w	r2, [r9]
 80064f0:	4461      	add	r1, ip
 80064f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80064fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064fe:	b289      	uxth	r1, r1
 8006500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006504:	4577      	cmp	r7, lr
 8006506:	f849 1b04 	str.w	r1, [r9], #4
 800650a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800650e:	d8e2      	bhi.n	80064d6 <__multiply+0xb2>
 8006510:	9a01      	ldr	r2, [sp, #4]
 8006512:	f845 c002 	str.w	ip, [r5, r2]
 8006516:	9a03      	ldr	r2, [sp, #12]
 8006518:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800651c:	3304      	adds	r3, #4
 800651e:	f1b9 0f00 	cmp.w	r9, #0
 8006522:	d020      	beq.n	8006566 <__multiply+0x142>
 8006524:	6829      	ldr	r1, [r5, #0]
 8006526:	f104 0c14 	add.w	ip, r4, #20
 800652a:	46ae      	mov	lr, r5
 800652c:	f04f 0a00 	mov.w	sl, #0
 8006530:	f8bc b000 	ldrh.w	fp, [ip]
 8006534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006538:	fb09 220b 	mla	r2, r9, fp, r2
 800653c:	4492      	add	sl, r2
 800653e:	b289      	uxth	r1, r1
 8006540:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006544:	f84e 1b04 	str.w	r1, [lr], #4
 8006548:	f85c 2b04 	ldr.w	r2, [ip], #4
 800654c:	f8be 1000 	ldrh.w	r1, [lr]
 8006550:	0c12      	lsrs	r2, r2, #16
 8006552:	fb09 1102 	mla	r1, r9, r2, r1
 8006556:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800655a:	4567      	cmp	r7, ip
 800655c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006560:	d8e6      	bhi.n	8006530 <__multiply+0x10c>
 8006562:	9a01      	ldr	r2, [sp, #4]
 8006564:	50a9      	str	r1, [r5, r2]
 8006566:	3504      	adds	r5, #4
 8006568:	e79a      	b.n	80064a0 <__multiply+0x7c>
 800656a:	3e01      	subs	r6, #1
 800656c:	e79c      	b.n	80064a8 <__multiply+0x84>
 800656e:	bf00      	nop
 8006570:	0800771f 	.word	0x0800771f
 8006574:	08007730 	.word	0x08007730

08006578 <__pow5mult>:
 8006578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800657c:	4615      	mov	r5, r2
 800657e:	f012 0203 	ands.w	r2, r2, #3
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	d007      	beq.n	8006598 <__pow5mult+0x20>
 8006588:	4c25      	ldr	r4, [pc, #148]	; (8006620 <__pow5mult+0xa8>)
 800658a:	3a01      	subs	r2, #1
 800658c:	2300      	movs	r3, #0
 800658e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006592:	f7ff fe9b 	bl	80062cc <__multadd>
 8006596:	4607      	mov	r7, r0
 8006598:	10ad      	asrs	r5, r5, #2
 800659a:	d03d      	beq.n	8006618 <__pow5mult+0xa0>
 800659c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800659e:	b97c      	cbnz	r4, 80065c0 <__pow5mult+0x48>
 80065a0:	2010      	movs	r0, #16
 80065a2:	f7ff fe1b 	bl	80061dc <malloc>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6270      	str	r0, [r6, #36]	; 0x24
 80065aa:	b928      	cbnz	r0, 80065b8 <__pow5mult+0x40>
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <__pow5mult+0xac>)
 80065ae:	481e      	ldr	r0, [pc, #120]	; (8006628 <__pow5mult+0xb0>)
 80065b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065b4:	f000 fab2 	bl	8006b1c <__assert_func>
 80065b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065bc:	6004      	str	r4, [r0, #0]
 80065be:	60c4      	str	r4, [r0, #12]
 80065c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065c8:	b94c      	cbnz	r4, 80065de <__pow5mult+0x66>
 80065ca:	f240 2171 	movw	r1, #625	; 0x271
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7ff ff12 	bl	80063f8 <__i2b>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80065da:	4604      	mov	r4, r0
 80065dc:	6003      	str	r3, [r0, #0]
 80065de:	f04f 0900 	mov.w	r9, #0
 80065e2:	07eb      	lsls	r3, r5, #31
 80065e4:	d50a      	bpl.n	80065fc <__pow5mult+0x84>
 80065e6:	4639      	mov	r1, r7
 80065e8:	4622      	mov	r2, r4
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff ff1a 	bl	8006424 <__multiply>
 80065f0:	4639      	mov	r1, r7
 80065f2:	4680      	mov	r8, r0
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff fe47 	bl	8006288 <_Bfree>
 80065fa:	4647      	mov	r7, r8
 80065fc:	106d      	asrs	r5, r5, #1
 80065fe:	d00b      	beq.n	8006618 <__pow5mult+0xa0>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	b938      	cbnz	r0, 8006614 <__pow5mult+0x9c>
 8006604:	4622      	mov	r2, r4
 8006606:	4621      	mov	r1, r4
 8006608:	4630      	mov	r0, r6
 800660a:	f7ff ff0b 	bl	8006424 <__multiply>
 800660e:	6020      	str	r0, [r4, #0]
 8006610:	f8c0 9000 	str.w	r9, [r0]
 8006614:	4604      	mov	r4, r0
 8006616:	e7e4      	b.n	80065e2 <__pow5mult+0x6a>
 8006618:	4638      	mov	r0, r7
 800661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661e:	bf00      	nop
 8006620:	08007880 	.word	0x08007880
 8006624:	080076ad 	.word	0x080076ad
 8006628:	08007730 	.word	0x08007730

0800662c <__lshift>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	6849      	ldr	r1, [r1, #4]
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	4607      	mov	r7, r0
 800663e:	4691      	mov	r9, r2
 8006640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006644:	f108 0601 	add.w	r6, r8, #1
 8006648:	42b3      	cmp	r3, r6
 800664a:	db0b      	blt.n	8006664 <__lshift+0x38>
 800664c:	4638      	mov	r0, r7
 800664e:	f7ff fddb 	bl	8006208 <_Balloc>
 8006652:	4605      	mov	r5, r0
 8006654:	b948      	cbnz	r0, 800666a <__lshift+0x3e>
 8006656:	4602      	mov	r2, r0
 8006658:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <__lshift+0xd8>)
 800665a:	482b      	ldr	r0, [pc, #172]	; (8006708 <__lshift+0xdc>)
 800665c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006660:	f000 fa5c 	bl	8006b1c <__assert_func>
 8006664:	3101      	adds	r1, #1
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	e7ee      	b.n	8006648 <__lshift+0x1c>
 800666a:	2300      	movs	r3, #0
 800666c:	f100 0114 	add.w	r1, r0, #20
 8006670:	f100 0210 	add.w	r2, r0, #16
 8006674:	4618      	mov	r0, r3
 8006676:	4553      	cmp	r3, sl
 8006678:	db37      	blt.n	80066ea <__lshift+0xbe>
 800667a:	6920      	ldr	r0, [r4, #16]
 800667c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006680:	f104 0314 	add.w	r3, r4, #20
 8006684:	f019 091f 	ands.w	r9, r9, #31
 8006688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800668c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006690:	d02f      	beq.n	80066f2 <__lshift+0xc6>
 8006692:	f1c9 0e20 	rsb	lr, r9, #32
 8006696:	468a      	mov	sl, r1
 8006698:	f04f 0c00 	mov.w	ip, #0
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	fa02 f209 	lsl.w	r2, r2, r9
 80066a2:	ea42 020c 	orr.w	r2, r2, ip
 80066a6:	f84a 2b04 	str.w	r2, [sl], #4
 80066aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ae:	4298      	cmp	r0, r3
 80066b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066b4:	d8f2      	bhi.n	800669c <__lshift+0x70>
 80066b6:	1b03      	subs	r3, r0, r4
 80066b8:	3b15      	subs	r3, #21
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	3304      	adds	r3, #4
 80066c0:	f104 0215 	add.w	r2, r4, #21
 80066c4:	4290      	cmp	r0, r2
 80066c6:	bf38      	it	cc
 80066c8:	2304      	movcc	r3, #4
 80066ca:	f841 c003 	str.w	ip, [r1, r3]
 80066ce:	f1bc 0f00 	cmp.w	ip, #0
 80066d2:	d001      	beq.n	80066d8 <__lshift+0xac>
 80066d4:	f108 0602 	add.w	r6, r8, #2
 80066d8:	3e01      	subs	r6, #1
 80066da:	4638      	mov	r0, r7
 80066dc:	612e      	str	r6, [r5, #16]
 80066de:	4621      	mov	r1, r4
 80066e0:	f7ff fdd2 	bl	8006288 <_Bfree>
 80066e4:	4628      	mov	r0, r5
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80066ee:	3301      	adds	r3, #1
 80066f0:	e7c1      	b.n	8006676 <__lshift+0x4a>
 80066f2:	3904      	subs	r1, #4
 80066f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80066fc:	4298      	cmp	r0, r3
 80066fe:	d8f9      	bhi.n	80066f4 <__lshift+0xc8>
 8006700:	e7ea      	b.n	80066d8 <__lshift+0xac>
 8006702:	bf00      	nop
 8006704:	0800771f 	.word	0x0800771f
 8006708:	08007730 	.word	0x08007730

0800670c <__mcmp>:
 800670c:	b530      	push	{r4, r5, lr}
 800670e:	6902      	ldr	r2, [r0, #16]
 8006710:	690c      	ldr	r4, [r1, #16]
 8006712:	1b12      	subs	r2, r2, r4
 8006714:	d10e      	bne.n	8006734 <__mcmp+0x28>
 8006716:	f100 0314 	add.w	r3, r0, #20
 800671a:	3114      	adds	r1, #20
 800671c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006720:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006724:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006728:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800672c:	42a5      	cmp	r5, r4
 800672e:	d003      	beq.n	8006738 <__mcmp+0x2c>
 8006730:	d305      	bcc.n	800673e <__mcmp+0x32>
 8006732:	2201      	movs	r2, #1
 8006734:	4610      	mov	r0, r2
 8006736:	bd30      	pop	{r4, r5, pc}
 8006738:	4283      	cmp	r3, r0
 800673a:	d3f3      	bcc.n	8006724 <__mcmp+0x18>
 800673c:	e7fa      	b.n	8006734 <__mcmp+0x28>
 800673e:	f04f 32ff 	mov.w	r2, #4294967295
 8006742:	e7f7      	b.n	8006734 <__mcmp+0x28>

08006744 <__mdiff>:
 8006744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	460c      	mov	r4, r1
 800674a:	4606      	mov	r6, r0
 800674c:	4611      	mov	r1, r2
 800674e:	4620      	mov	r0, r4
 8006750:	4690      	mov	r8, r2
 8006752:	f7ff ffdb 	bl	800670c <__mcmp>
 8006756:	1e05      	subs	r5, r0, #0
 8006758:	d110      	bne.n	800677c <__mdiff+0x38>
 800675a:	4629      	mov	r1, r5
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff fd53 	bl	8006208 <_Balloc>
 8006762:	b930      	cbnz	r0, 8006772 <__mdiff+0x2e>
 8006764:	4b3a      	ldr	r3, [pc, #232]	; (8006850 <__mdiff+0x10c>)
 8006766:	4602      	mov	r2, r0
 8006768:	f240 2132 	movw	r1, #562	; 0x232
 800676c:	4839      	ldr	r0, [pc, #228]	; (8006854 <__mdiff+0x110>)
 800676e:	f000 f9d5 	bl	8006b1c <__assert_func>
 8006772:	2301      	movs	r3, #1
 8006774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677c:	bfa4      	itt	ge
 800677e:	4643      	movge	r3, r8
 8006780:	46a0      	movge	r8, r4
 8006782:	4630      	mov	r0, r6
 8006784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006788:	bfa6      	itte	ge
 800678a:	461c      	movge	r4, r3
 800678c:	2500      	movge	r5, #0
 800678e:	2501      	movlt	r5, #1
 8006790:	f7ff fd3a 	bl	8006208 <_Balloc>
 8006794:	b920      	cbnz	r0, 80067a0 <__mdiff+0x5c>
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <__mdiff+0x10c>)
 8006798:	4602      	mov	r2, r0
 800679a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800679e:	e7e5      	b.n	800676c <__mdiff+0x28>
 80067a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067a4:	6926      	ldr	r6, [r4, #16]
 80067a6:	60c5      	str	r5, [r0, #12]
 80067a8:	f104 0914 	add.w	r9, r4, #20
 80067ac:	f108 0514 	add.w	r5, r8, #20
 80067b0:	f100 0e14 	add.w	lr, r0, #20
 80067b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80067b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067bc:	f108 0210 	add.w	r2, r8, #16
 80067c0:	46f2      	mov	sl, lr
 80067c2:	2100      	movs	r1, #0
 80067c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80067c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80067cc:	fa1f f883 	uxth.w	r8, r3
 80067d0:	fa11 f18b 	uxtah	r1, r1, fp
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	eba1 0808 	sub.w	r8, r1, r8
 80067da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80067e2:	fa1f f888 	uxth.w	r8, r8
 80067e6:	1419      	asrs	r1, r3, #16
 80067e8:	454e      	cmp	r6, r9
 80067ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80067ee:	f84a 3b04 	str.w	r3, [sl], #4
 80067f2:	d8e7      	bhi.n	80067c4 <__mdiff+0x80>
 80067f4:	1b33      	subs	r3, r6, r4
 80067f6:	3b15      	subs	r3, #21
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	3304      	adds	r3, #4
 80067fe:	3415      	adds	r4, #21
 8006800:	42a6      	cmp	r6, r4
 8006802:	bf38      	it	cc
 8006804:	2304      	movcc	r3, #4
 8006806:	441d      	add	r5, r3
 8006808:	4473      	add	r3, lr
 800680a:	469e      	mov	lr, r3
 800680c:	462e      	mov	r6, r5
 800680e:	4566      	cmp	r6, ip
 8006810:	d30e      	bcc.n	8006830 <__mdiff+0xec>
 8006812:	f10c 0203 	add.w	r2, ip, #3
 8006816:	1b52      	subs	r2, r2, r5
 8006818:	f022 0203 	bic.w	r2, r2, #3
 800681c:	3d03      	subs	r5, #3
 800681e:	45ac      	cmp	ip, r5
 8006820:	bf38      	it	cc
 8006822:	2200      	movcc	r2, #0
 8006824:	441a      	add	r2, r3
 8006826:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800682a:	b17b      	cbz	r3, 800684c <__mdiff+0x108>
 800682c:	6107      	str	r7, [r0, #16]
 800682e:	e7a3      	b.n	8006778 <__mdiff+0x34>
 8006830:	f856 8b04 	ldr.w	r8, [r6], #4
 8006834:	fa11 f288 	uxtah	r2, r1, r8
 8006838:	1414      	asrs	r4, r2, #16
 800683a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800683e:	b292      	uxth	r2, r2
 8006840:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006844:	f84e 2b04 	str.w	r2, [lr], #4
 8006848:	1421      	asrs	r1, r4, #16
 800684a:	e7e0      	b.n	800680e <__mdiff+0xca>
 800684c:	3f01      	subs	r7, #1
 800684e:	e7ea      	b.n	8006826 <__mdiff+0xe2>
 8006850:	0800771f 	.word	0x0800771f
 8006854:	08007730 	.word	0x08007730

08006858 <__d2b>:
 8006858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800685c:	4689      	mov	r9, r1
 800685e:	2101      	movs	r1, #1
 8006860:	ec57 6b10 	vmov	r6, r7, d0
 8006864:	4690      	mov	r8, r2
 8006866:	f7ff fccf 	bl	8006208 <_Balloc>
 800686a:	4604      	mov	r4, r0
 800686c:	b930      	cbnz	r0, 800687c <__d2b+0x24>
 800686e:	4602      	mov	r2, r0
 8006870:	4b25      	ldr	r3, [pc, #148]	; (8006908 <__d2b+0xb0>)
 8006872:	4826      	ldr	r0, [pc, #152]	; (800690c <__d2b+0xb4>)
 8006874:	f240 310a 	movw	r1, #778	; 0x30a
 8006878:	f000 f950 	bl	8006b1c <__assert_func>
 800687c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006884:	bb35      	cbnz	r5, 80068d4 <__d2b+0x7c>
 8006886:	2e00      	cmp	r6, #0
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	d028      	beq.n	80068de <__d2b+0x86>
 800688c:	4668      	mov	r0, sp
 800688e:	9600      	str	r6, [sp, #0]
 8006890:	f7ff fd82 	bl	8006398 <__lo0bits>
 8006894:	9900      	ldr	r1, [sp, #0]
 8006896:	b300      	cbz	r0, 80068da <__d2b+0x82>
 8006898:	9a01      	ldr	r2, [sp, #4]
 800689a:	f1c0 0320 	rsb	r3, r0, #32
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	430b      	orrs	r3, r1
 80068a4:	40c2      	lsrs	r2, r0
 80068a6:	6163      	str	r3, [r4, #20]
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	61a3      	str	r3, [r4, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bf14      	ite	ne
 80068b2:	2202      	movne	r2, #2
 80068b4:	2201      	moveq	r2, #1
 80068b6:	6122      	str	r2, [r4, #16]
 80068b8:	b1d5      	cbz	r5, 80068f0 <__d2b+0x98>
 80068ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068be:	4405      	add	r5, r0
 80068c0:	f8c9 5000 	str.w	r5, [r9]
 80068c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068c8:	f8c8 0000 	str.w	r0, [r8]
 80068cc:	4620      	mov	r0, r4
 80068ce:	b003      	add	sp, #12
 80068d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068d8:	e7d5      	b.n	8006886 <__d2b+0x2e>
 80068da:	6161      	str	r1, [r4, #20]
 80068dc:	e7e5      	b.n	80068aa <__d2b+0x52>
 80068de:	a801      	add	r0, sp, #4
 80068e0:	f7ff fd5a 	bl	8006398 <__lo0bits>
 80068e4:	9b01      	ldr	r3, [sp, #4]
 80068e6:	6163      	str	r3, [r4, #20]
 80068e8:	2201      	movs	r2, #1
 80068ea:	6122      	str	r2, [r4, #16]
 80068ec:	3020      	adds	r0, #32
 80068ee:	e7e3      	b.n	80068b8 <__d2b+0x60>
 80068f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068f8:	f8c9 0000 	str.w	r0, [r9]
 80068fc:	6918      	ldr	r0, [r3, #16]
 80068fe:	f7ff fd2b 	bl	8006358 <__hi0bits>
 8006902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006906:	e7df      	b.n	80068c8 <__d2b+0x70>
 8006908:	0800771f 	.word	0x0800771f
 800690c:	08007730 	.word	0x08007730

08006910 <_calloc_r>:
 8006910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006912:	fba1 2402 	umull	r2, r4, r1, r2
 8006916:	b94c      	cbnz	r4, 800692c <_calloc_r+0x1c>
 8006918:	4611      	mov	r1, r2
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	f000 f87a 	bl	8006a14 <_malloc_r>
 8006920:	9a01      	ldr	r2, [sp, #4]
 8006922:	4605      	mov	r5, r0
 8006924:	b930      	cbnz	r0, 8006934 <_calloc_r+0x24>
 8006926:	4628      	mov	r0, r5
 8006928:	b003      	add	sp, #12
 800692a:	bd30      	pop	{r4, r5, pc}
 800692c:	220c      	movs	r2, #12
 800692e:	6002      	str	r2, [r0, #0]
 8006930:	2500      	movs	r5, #0
 8006932:	e7f8      	b.n	8006926 <_calloc_r+0x16>
 8006934:	4621      	mov	r1, r4
 8006936:	f7fe f961 	bl	8004bfc <memset>
 800693a:	e7f4      	b.n	8006926 <_calloc_r+0x16>

0800693c <_free_r>:
 800693c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800693e:	2900      	cmp	r1, #0
 8006940:	d044      	beq.n	80069cc <_free_r+0x90>
 8006942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006946:	9001      	str	r0, [sp, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f1a1 0404 	sub.w	r4, r1, #4
 800694e:	bfb8      	it	lt
 8006950:	18e4      	addlt	r4, r4, r3
 8006952:	f000 f925 	bl	8006ba0 <__malloc_lock>
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <_free_r+0x94>)
 8006958:	9801      	ldr	r0, [sp, #4]
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	b933      	cbnz	r3, 800696c <_free_r+0x30>
 800695e:	6063      	str	r3, [r4, #4]
 8006960:	6014      	str	r4, [r2, #0]
 8006962:	b003      	add	sp, #12
 8006964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006968:	f000 b920 	b.w	8006bac <__malloc_unlock>
 800696c:	42a3      	cmp	r3, r4
 800696e:	d908      	bls.n	8006982 <_free_r+0x46>
 8006970:	6825      	ldr	r5, [r4, #0]
 8006972:	1961      	adds	r1, r4, r5
 8006974:	428b      	cmp	r3, r1
 8006976:	bf01      	itttt	eq
 8006978:	6819      	ldreq	r1, [r3, #0]
 800697a:	685b      	ldreq	r3, [r3, #4]
 800697c:	1949      	addeq	r1, r1, r5
 800697e:	6021      	streq	r1, [r4, #0]
 8006980:	e7ed      	b.n	800695e <_free_r+0x22>
 8006982:	461a      	mov	r2, r3
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b10b      	cbz	r3, 800698c <_free_r+0x50>
 8006988:	42a3      	cmp	r3, r4
 800698a:	d9fa      	bls.n	8006982 <_free_r+0x46>
 800698c:	6811      	ldr	r1, [r2, #0]
 800698e:	1855      	adds	r5, r2, r1
 8006990:	42a5      	cmp	r5, r4
 8006992:	d10b      	bne.n	80069ac <_free_r+0x70>
 8006994:	6824      	ldr	r4, [r4, #0]
 8006996:	4421      	add	r1, r4
 8006998:	1854      	adds	r4, r2, r1
 800699a:	42a3      	cmp	r3, r4
 800699c:	6011      	str	r1, [r2, #0]
 800699e:	d1e0      	bne.n	8006962 <_free_r+0x26>
 80069a0:	681c      	ldr	r4, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	6053      	str	r3, [r2, #4]
 80069a6:	4421      	add	r1, r4
 80069a8:	6011      	str	r1, [r2, #0]
 80069aa:	e7da      	b.n	8006962 <_free_r+0x26>
 80069ac:	d902      	bls.n	80069b4 <_free_r+0x78>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6003      	str	r3, [r0, #0]
 80069b2:	e7d6      	b.n	8006962 <_free_r+0x26>
 80069b4:	6825      	ldr	r5, [r4, #0]
 80069b6:	1961      	adds	r1, r4, r5
 80069b8:	428b      	cmp	r3, r1
 80069ba:	bf04      	itt	eq
 80069bc:	6819      	ldreq	r1, [r3, #0]
 80069be:	685b      	ldreq	r3, [r3, #4]
 80069c0:	6063      	str	r3, [r4, #4]
 80069c2:	bf04      	itt	eq
 80069c4:	1949      	addeq	r1, r1, r5
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	6054      	str	r4, [r2, #4]
 80069ca:	e7ca      	b.n	8006962 <_free_r+0x26>
 80069cc:	b003      	add	sp, #12
 80069ce:	bd30      	pop	{r4, r5, pc}
 80069d0:	20000324 	.word	0x20000324

080069d4 <sbrk_aligned>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	4e0e      	ldr	r6, [pc, #56]	; (8006a10 <sbrk_aligned+0x3c>)
 80069d8:	460c      	mov	r4, r1
 80069da:	6831      	ldr	r1, [r6, #0]
 80069dc:	4605      	mov	r5, r0
 80069de:	b911      	cbnz	r1, 80069e6 <sbrk_aligned+0x12>
 80069e0:	f000 f88c 	bl	8006afc <_sbrk_r>
 80069e4:	6030      	str	r0, [r6, #0]
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 f887 	bl	8006afc <_sbrk_r>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d00a      	beq.n	8006a08 <sbrk_aligned+0x34>
 80069f2:	1cc4      	adds	r4, r0, #3
 80069f4:	f024 0403 	bic.w	r4, r4, #3
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d007      	beq.n	8006a0c <sbrk_aligned+0x38>
 80069fc:	1a21      	subs	r1, r4, r0
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f87c 	bl	8006afc <_sbrk_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d101      	bne.n	8006a0c <sbrk_aligned+0x38>
 8006a08:	f04f 34ff 	mov.w	r4, #4294967295
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	20000328 	.word	0x20000328

08006a14 <_malloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	1ccd      	adds	r5, r1, #3
 8006a1a:	f025 0503 	bic.w	r5, r5, #3
 8006a1e:	3508      	adds	r5, #8
 8006a20:	2d0c      	cmp	r5, #12
 8006a22:	bf38      	it	cc
 8006a24:	250c      	movcc	r5, #12
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	4607      	mov	r7, r0
 8006a2a:	db01      	blt.n	8006a30 <_malloc_r+0x1c>
 8006a2c:	42a9      	cmp	r1, r5
 8006a2e:	d905      	bls.n	8006a3c <_malloc_r+0x28>
 8006a30:	230c      	movs	r3, #12
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	2600      	movs	r6, #0
 8006a36:	4630      	mov	r0, r6
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	4e2e      	ldr	r6, [pc, #184]	; (8006af8 <_malloc_r+0xe4>)
 8006a3e:	f000 f8af 	bl	8006ba0 <__malloc_lock>
 8006a42:	6833      	ldr	r3, [r6, #0]
 8006a44:	461c      	mov	r4, r3
 8006a46:	bb34      	cbnz	r4, 8006a96 <_malloc_r+0x82>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f7ff ffc2 	bl	80069d4 <sbrk_aligned>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	4604      	mov	r4, r0
 8006a54:	d14d      	bne.n	8006af2 <_malloc_r+0xde>
 8006a56:	6834      	ldr	r4, [r6, #0]
 8006a58:	4626      	mov	r6, r4
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	d140      	bne.n	8006ae0 <_malloc_r+0xcc>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	4631      	mov	r1, r6
 8006a62:	4638      	mov	r0, r7
 8006a64:	eb04 0803 	add.w	r8, r4, r3
 8006a68:	f000 f848 	bl	8006afc <_sbrk_r>
 8006a6c:	4580      	cmp	r8, r0
 8006a6e:	d13a      	bne.n	8006ae6 <_malloc_r+0xd2>
 8006a70:	6821      	ldr	r1, [r4, #0]
 8006a72:	3503      	adds	r5, #3
 8006a74:	1a6d      	subs	r5, r5, r1
 8006a76:	f025 0503 	bic.w	r5, r5, #3
 8006a7a:	3508      	adds	r5, #8
 8006a7c:	2d0c      	cmp	r5, #12
 8006a7e:	bf38      	it	cc
 8006a80:	250c      	movcc	r5, #12
 8006a82:	4629      	mov	r1, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ffa5 	bl	80069d4 <sbrk_aligned>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d02b      	beq.n	8006ae6 <_malloc_r+0xd2>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	442b      	add	r3, r5
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	e00e      	b.n	8006ab4 <_malloc_r+0xa0>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	1b52      	subs	r2, r2, r5
 8006a9a:	d41e      	bmi.n	8006ada <_malloc_r+0xc6>
 8006a9c:	2a0b      	cmp	r2, #11
 8006a9e:	d916      	bls.n	8006ace <_malloc_r+0xba>
 8006aa0:	1961      	adds	r1, r4, r5
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	6025      	str	r5, [r4, #0]
 8006aa6:	bf18      	it	ne
 8006aa8:	6059      	strne	r1, [r3, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	bf08      	it	eq
 8006aae:	6031      	streq	r1, [r6, #0]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f104 060b 	add.w	r6, r4, #11
 8006aba:	f000 f877 	bl	8006bac <__malloc_unlock>
 8006abe:	f026 0607 	bic.w	r6, r6, #7
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	1af2      	subs	r2, r6, r3
 8006ac6:	d0b6      	beq.n	8006a36 <_malloc_r+0x22>
 8006ac8:	1b9b      	subs	r3, r3, r6
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	e7b3      	b.n	8006a36 <_malloc_r+0x22>
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	bf0c      	ite	eq
 8006ad4:	6032      	streq	r2, [r6, #0]
 8006ad6:	605a      	strne	r2, [r3, #4]
 8006ad8:	e7ec      	b.n	8006ab4 <_malloc_r+0xa0>
 8006ada:	4623      	mov	r3, r4
 8006adc:	6864      	ldr	r4, [r4, #4]
 8006ade:	e7b2      	b.n	8006a46 <_malloc_r+0x32>
 8006ae0:	4634      	mov	r4, r6
 8006ae2:	6876      	ldr	r6, [r6, #4]
 8006ae4:	e7b9      	b.n	8006a5a <_malloc_r+0x46>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	4638      	mov	r0, r7
 8006aec:	f000 f85e 	bl	8006bac <__malloc_unlock>
 8006af0:	e7a1      	b.n	8006a36 <_malloc_r+0x22>
 8006af2:	6025      	str	r5, [r4, #0]
 8006af4:	e7de      	b.n	8006ab4 <_malloc_r+0xa0>
 8006af6:	bf00      	nop
 8006af8:	20000324 	.word	0x20000324

08006afc <_sbrk_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d06      	ldr	r5, [pc, #24]	; (8006b18 <_sbrk_r+0x1c>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	f7fb f87a 	bl	8001c00 <_sbrk>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_sbrk_r+0x1a>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_sbrk_r+0x1a>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	2000032c 	.word	0x2000032c

08006b1c <__assert_func>:
 8006b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b1e:	4614      	mov	r4, r2
 8006b20:	461a      	mov	r2, r3
 8006b22:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <__assert_func+0x2c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4605      	mov	r5, r0
 8006b28:	68d8      	ldr	r0, [r3, #12]
 8006b2a:	b14c      	cbz	r4, 8006b40 <__assert_func+0x24>
 8006b2c:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <__assert_func+0x30>)
 8006b2e:	9100      	str	r1, [sp, #0]
 8006b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b34:	4906      	ldr	r1, [pc, #24]	; (8006b50 <__assert_func+0x34>)
 8006b36:	462b      	mov	r3, r5
 8006b38:	f000 f80e 	bl	8006b58 <fiprintf>
 8006b3c:	f000 fa64 	bl	8007008 <abort>
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <__assert_func+0x38>)
 8006b42:	461c      	mov	r4, r3
 8006b44:	e7f3      	b.n	8006b2e <__assert_func+0x12>
 8006b46:	bf00      	nop
 8006b48:	2000000c 	.word	0x2000000c
 8006b4c:	0800788c 	.word	0x0800788c
 8006b50:	08007899 	.word	0x08007899
 8006b54:	080078c7 	.word	0x080078c7

08006b58 <fiprintf>:
 8006b58:	b40e      	push	{r1, r2, r3}
 8006b5a:	b503      	push	{r0, r1, lr}
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	ab03      	add	r3, sp, #12
 8006b60:	4805      	ldr	r0, [pc, #20]	; (8006b78 <fiprintf+0x20>)
 8006b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b66:	6800      	ldr	r0, [r0, #0]
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	f000 f84f 	bl	8006c0c <_vfiprintf_r>
 8006b6e:	b002      	add	sp, #8
 8006b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b74:	b003      	add	sp, #12
 8006b76:	4770      	bx	lr
 8006b78:	2000000c 	.word	0x2000000c

08006b7c <__ascii_mbtowc>:
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	b901      	cbnz	r1, 8006b82 <__ascii_mbtowc+0x6>
 8006b80:	a901      	add	r1, sp, #4
 8006b82:	b142      	cbz	r2, 8006b96 <__ascii_mbtowc+0x1a>
 8006b84:	b14b      	cbz	r3, 8006b9a <__ascii_mbtowc+0x1e>
 8006b86:	7813      	ldrb	r3, [r2, #0]
 8006b88:	600b      	str	r3, [r1, #0]
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	1e10      	subs	r0, r2, #0
 8006b8e:	bf18      	it	ne
 8006b90:	2001      	movne	r0, #1
 8006b92:	b002      	add	sp, #8
 8006b94:	4770      	bx	lr
 8006b96:	4610      	mov	r0, r2
 8006b98:	e7fb      	b.n	8006b92 <__ascii_mbtowc+0x16>
 8006b9a:	f06f 0001 	mvn.w	r0, #1
 8006b9e:	e7f8      	b.n	8006b92 <__ascii_mbtowc+0x16>

08006ba0 <__malloc_lock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__malloc_lock+0x8>)
 8006ba2:	f000 bbf1 	b.w	8007388 <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20000330 	.word	0x20000330

08006bac <__malloc_unlock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__malloc_unlock+0x8>)
 8006bae:	f000 bbec 	b.w	800738a <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000330 	.word	0x20000330

08006bb8 <__sfputc_r>:
 8006bb8:	6893      	ldr	r3, [r2, #8]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	b410      	push	{r4}
 8006bc0:	6093      	str	r3, [r2, #8]
 8006bc2:	da08      	bge.n	8006bd6 <__sfputc_r+0x1e>
 8006bc4:	6994      	ldr	r4, [r2, #24]
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	db01      	blt.n	8006bce <__sfputc_r+0x16>
 8006bca:	290a      	cmp	r1, #10
 8006bcc:	d103      	bne.n	8006bd6 <__sfputc_r+0x1e>
 8006bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd2:	f000 b94b 	b.w	8006e6c <__swbuf_r>
 8006bd6:	6813      	ldr	r3, [r2, #0]
 8006bd8:	1c58      	adds	r0, r3, #1
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	7019      	strb	r1, [r3, #0]
 8006bde:	4608      	mov	r0, r1
 8006be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <__sfputs_r>:
 8006be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be8:	4606      	mov	r6, r0
 8006bea:	460f      	mov	r7, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	18d5      	adds	r5, r2, r3
 8006bf0:	42ac      	cmp	r4, r5
 8006bf2:	d101      	bne.n	8006bf8 <__sfputs_r+0x12>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	e007      	b.n	8006c08 <__sfputs_r+0x22>
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	463a      	mov	r2, r7
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7ff ffda 	bl	8006bb8 <__sfputc_r>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d1f3      	bne.n	8006bf0 <__sfputs_r+0xa>
 8006c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c0c <_vfiprintf_r>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	460d      	mov	r5, r1
 8006c12:	b09d      	sub	sp, #116	; 0x74
 8006c14:	4614      	mov	r4, r2
 8006c16:	4698      	mov	r8, r3
 8006c18:	4606      	mov	r6, r0
 8006c1a:	b118      	cbz	r0, 8006c24 <_vfiprintf_r+0x18>
 8006c1c:	6983      	ldr	r3, [r0, #24]
 8006c1e:	b90b      	cbnz	r3, 8006c24 <_vfiprintf_r+0x18>
 8006c20:	f000 fb14 	bl	800724c <__sinit>
 8006c24:	4b89      	ldr	r3, [pc, #548]	; (8006e4c <_vfiprintf_r+0x240>)
 8006c26:	429d      	cmp	r5, r3
 8006c28:	d11b      	bne.n	8006c62 <_vfiprintf_r+0x56>
 8006c2a:	6875      	ldr	r5, [r6, #4]
 8006c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c2e:	07d9      	lsls	r1, r3, #31
 8006c30:	d405      	bmi.n	8006c3e <_vfiprintf_r+0x32>
 8006c32:	89ab      	ldrh	r3, [r5, #12]
 8006c34:	059a      	lsls	r2, r3, #22
 8006c36:	d402      	bmi.n	8006c3e <_vfiprintf_r+0x32>
 8006c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c3a:	f000 fba5 	bl	8007388 <__retarget_lock_acquire_recursive>
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	071b      	lsls	r3, r3, #28
 8006c42:	d501      	bpl.n	8006c48 <_vfiprintf_r+0x3c>
 8006c44:	692b      	ldr	r3, [r5, #16]
 8006c46:	b9eb      	cbnz	r3, 8006c84 <_vfiprintf_r+0x78>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f000 f96e 	bl	8006f2c <__swsetup_r>
 8006c50:	b1c0      	cbz	r0, 8006c84 <_vfiprintf_r+0x78>
 8006c52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c54:	07dc      	lsls	r4, r3, #31
 8006c56:	d50e      	bpl.n	8006c76 <_vfiprintf_r+0x6a>
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	b01d      	add	sp, #116	; 0x74
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	4b7b      	ldr	r3, [pc, #492]	; (8006e50 <_vfiprintf_r+0x244>)
 8006c64:	429d      	cmp	r5, r3
 8006c66:	d101      	bne.n	8006c6c <_vfiprintf_r+0x60>
 8006c68:	68b5      	ldr	r5, [r6, #8]
 8006c6a:	e7df      	b.n	8006c2c <_vfiprintf_r+0x20>
 8006c6c:	4b79      	ldr	r3, [pc, #484]	; (8006e54 <_vfiprintf_r+0x248>)
 8006c6e:	429d      	cmp	r5, r3
 8006c70:	bf08      	it	eq
 8006c72:	68f5      	ldreq	r5, [r6, #12]
 8006c74:	e7da      	b.n	8006c2c <_vfiprintf_r+0x20>
 8006c76:	89ab      	ldrh	r3, [r5, #12]
 8006c78:	0598      	lsls	r0, r3, #22
 8006c7a:	d4ed      	bmi.n	8006c58 <_vfiprintf_r+0x4c>
 8006c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c7e:	f000 fb84 	bl	800738a <__retarget_lock_release_recursive>
 8006c82:	e7e9      	b.n	8006c58 <_vfiprintf_r+0x4c>
 8006c84:	2300      	movs	r3, #0
 8006c86:	9309      	str	r3, [sp, #36]	; 0x24
 8006c88:	2320      	movs	r3, #32
 8006c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c92:	2330      	movs	r3, #48	; 0x30
 8006c94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e58 <_vfiprintf_r+0x24c>
 8006c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c9c:	f04f 0901 	mov.w	r9, #1
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	469a      	mov	sl, r3
 8006ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca8:	b10a      	cbz	r2, 8006cae <_vfiprintf_r+0xa2>
 8006caa:	2a25      	cmp	r2, #37	; 0x25
 8006cac:	d1f9      	bne.n	8006ca2 <_vfiprintf_r+0x96>
 8006cae:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb2:	d00b      	beq.n	8006ccc <_vfiprintf_r+0xc0>
 8006cb4:	465b      	mov	r3, fp
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7ff ff93 	bl	8006be6 <__sfputs_r>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	f000 80aa 	beq.w	8006e1a <_vfiprintf_r+0x20e>
 8006cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc8:	445a      	add	r2, fp
 8006cca:	9209      	str	r2, [sp, #36]	; 0x24
 8006ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80a2 	beq.w	8006e1a <_vfiprintf_r+0x20e>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ce0:	f10a 0a01 	add.w	sl, sl, #1
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cec:	931a      	str	r3, [sp, #104]	; 0x68
 8006cee:	4654      	mov	r4, sl
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf6:	4858      	ldr	r0, [pc, #352]	; (8006e58 <_vfiprintf_r+0x24c>)
 8006cf8:	f7f9 fa92 	bl	8000220 <memchr>
 8006cfc:	9a04      	ldr	r2, [sp, #16]
 8006cfe:	b9d8      	cbnz	r0, 8006d38 <_vfiprintf_r+0x12c>
 8006d00:	06d1      	lsls	r1, r2, #27
 8006d02:	bf44      	itt	mi
 8006d04:	2320      	movmi	r3, #32
 8006d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0a:	0713      	lsls	r3, r2, #28
 8006d0c:	bf44      	itt	mi
 8006d0e:	232b      	movmi	r3, #43	; 0x2b
 8006d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d14:	f89a 3000 	ldrb.w	r3, [sl]
 8006d18:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1a:	d015      	beq.n	8006d48 <_vfiprintf_r+0x13c>
 8006d1c:	9a07      	ldr	r2, [sp, #28]
 8006d1e:	4654      	mov	r4, sl
 8006d20:	2000      	movs	r0, #0
 8006d22:	f04f 0c0a 	mov.w	ip, #10
 8006d26:	4621      	mov	r1, r4
 8006d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2c:	3b30      	subs	r3, #48	; 0x30
 8006d2e:	2b09      	cmp	r3, #9
 8006d30:	d94e      	bls.n	8006dd0 <_vfiprintf_r+0x1c4>
 8006d32:	b1b0      	cbz	r0, 8006d62 <_vfiprintf_r+0x156>
 8006d34:	9207      	str	r2, [sp, #28]
 8006d36:	e014      	b.n	8006d62 <_vfiprintf_r+0x156>
 8006d38:	eba0 0308 	sub.w	r3, r0, r8
 8006d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8006d40:	4313      	orrs	r3, r2
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	46a2      	mov	sl, r4
 8006d46:	e7d2      	b.n	8006cee <_vfiprintf_r+0xe2>
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	1d19      	adds	r1, r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	9103      	str	r1, [sp, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bfbb      	ittet	lt
 8006d54:	425b      	neglt	r3, r3
 8006d56:	f042 0202 	orrlt.w	r2, r2, #2
 8006d5a:	9307      	strge	r3, [sp, #28]
 8006d5c:	9307      	strlt	r3, [sp, #28]
 8006d5e:	bfb8      	it	lt
 8006d60:	9204      	strlt	r2, [sp, #16]
 8006d62:	7823      	ldrb	r3, [r4, #0]
 8006d64:	2b2e      	cmp	r3, #46	; 0x2e
 8006d66:	d10c      	bne.n	8006d82 <_vfiprintf_r+0x176>
 8006d68:	7863      	ldrb	r3, [r4, #1]
 8006d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6c:	d135      	bne.n	8006dda <_vfiprintf_r+0x1ce>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	1d1a      	adds	r2, r3, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	9203      	str	r2, [sp, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfb8      	it	lt
 8006d7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d7e:	3402      	adds	r4, #2
 8006d80:	9305      	str	r3, [sp, #20]
 8006d82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e68 <_vfiprintf_r+0x25c>
 8006d86:	7821      	ldrb	r1, [r4, #0]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	f7f9 fa48 	bl	8000220 <memchr>
 8006d90:	b140      	cbz	r0, 8006da4 <_vfiprintf_r+0x198>
 8006d92:	2340      	movs	r3, #64	; 0x40
 8006d94:	eba0 000a 	sub.w	r0, r0, sl
 8006d98:	fa03 f000 	lsl.w	r0, r3, r0
 8006d9c:	9b04      	ldr	r3, [sp, #16]
 8006d9e:	4303      	orrs	r3, r0
 8006da0:	3401      	adds	r4, #1
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da8:	482c      	ldr	r0, [pc, #176]	; (8006e5c <_vfiprintf_r+0x250>)
 8006daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dae:	2206      	movs	r2, #6
 8006db0:	f7f9 fa36 	bl	8000220 <memchr>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d03f      	beq.n	8006e38 <_vfiprintf_r+0x22c>
 8006db8:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <_vfiprintf_r+0x254>)
 8006dba:	bb1b      	cbnz	r3, 8006e04 <_vfiprintf_r+0x1f8>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	3307      	adds	r3, #7
 8006dc0:	f023 0307 	bic.w	r3, r3, #7
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	9303      	str	r3, [sp, #12]
 8006dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dca:	443b      	add	r3, r7
 8006dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dce:	e767      	b.n	8006ca0 <_vfiprintf_r+0x94>
 8006dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	e7a5      	b.n	8006d26 <_vfiprintf_r+0x11a>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	3401      	adds	r4, #1
 8006dde:	9305      	str	r3, [sp, #20]
 8006de0:	4619      	mov	r1, r3
 8006de2:	f04f 0c0a 	mov.w	ip, #10
 8006de6:	4620      	mov	r0, r4
 8006de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dec:	3a30      	subs	r2, #48	; 0x30
 8006dee:	2a09      	cmp	r2, #9
 8006df0:	d903      	bls.n	8006dfa <_vfiprintf_r+0x1ee>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0c5      	beq.n	8006d82 <_vfiprintf_r+0x176>
 8006df6:	9105      	str	r1, [sp, #20]
 8006df8:	e7c3      	b.n	8006d82 <_vfiprintf_r+0x176>
 8006dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dfe:	4604      	mov	r4, r0
 8006e00:	2301      	movs	r3, #1
 8006e02:	e7f0      	b.n	8006de6 <_vfiprintf_r+0x1da>
 8006e04:	ab03      	add	r3, sp, #12
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <_vfiprintf_r+0x258>)
 8006e0c:	a904      	add	r1, sp, #16
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7fd ff9c 	bl	8004d4c <_printf_float>
 8006e14:	4607      	mov	r7, r0
 8006e16:	1c78      	adds	r0, r7, #1
 8006e18:	d1d6      	bne.n	8006dc8 <_vfiprintf_r+0x1bc>
 8006e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e1c:	07d9      	lsls	r1, r3, #31
 8006e1e:	d405      	bmi.n	8006e2c <_vfiprintf_r+0x220>
 8006e20:	89ab      	ldrh	r3, [r5, #12]
 8006e22:	059a      	lsls	r2, r3, #22
 8006e24:	d402      	bmi.n	8006e2c <_vfiprintf_r+0x220>
 8006e26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e28:	f000 faaf 	bl	800738a <__retarget_lock_release_recursive>
 8006e2c:	89ab      	ldrh	r3, [r5, #12]
 8006e2e:	065b      	lsls	r3, r3, #25
 8006e30:	f53f af12 	bmi.w	8006c58 <_vfiprintf_r+0x4c>
 8006e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e36:	e711      	b.n	8006c5c <_vfiprintf_r+0x50>
 8006e38:	ab03      	add	r3, sp, #12
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <_vfiprintf_r+0x258>)
 8006e40:	a904      	add	r1, sp, #16
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7fe fa26 	bl	8005294 <_printf_i>
 8006e48:	e7e4      	b.n	8006e14 <_vfiprintf_r+0x208>
 8006e4a:	bf00      	nop
 8006e4c:	08007a04 	.word	0x08007a04
 8006e50:	08007a24 	.word	0x08007a24
 8006e54:	080079e4 	.word	0x080079e4
 8006e58:	080078d2 	.word	0x080078d2
 8006e5c:	080078dc 	.word	0x080078dc
 8006e60:	08004d4d 	.word	0x08004d4d
 8006e64:	08006be7 	.word	0x08006be7
 8006e68:	080078d8 	.word	0x080078d8

08006e6c <__swbuf_r>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	460e      	mov	r6, r1
 8006e70:	4614      	mov	r4, r2
 8006e72:	4605      	mov	r5, r0
 8006e74:	b118      	cbz	r0, 8006e7e <__swbuf_r+0x12>
 8006e76:	6983      	ldr	r3, [r0, #24]
 8006e78:	b90b      	cbnz	r3, 8006e7e <__swbuf_r+0x12>
 8006e7a:	f000 f9e7 	bl	800724c <__sinit>
 8006e7e:	4b21      	ldr	r3, [pc, #132]	; (8006f04 <__swbuf_r+0x98>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	d12b      	bne.n	8006edc <__swbuf_r+0x70>
 8006e84:	686c      	ldr	r4, [r5, #4]
 8006e86:	69a3      	ldr	r3, [r4, #24]
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	071a      	lsls	r2, r3, #28
 8006e8e:	d52f      	bpl.n	8006ef0 <__swbuf_r+0x84>
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	b36b      	cbz	r3, 8006ef0 <__swbuf_r+0x84>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	6820      	ldr	r0, [r4, #0]
 8006e98:	1ac0      	subs	r0, r0, r3
 8006e9a:	6963      	ldr	r3, [r4, #20]
 8006e9c:	b2f6      	uxtb	r6, r6
 8006e9e:	4283      	cmp	r3, r0
 8006ea0:	4637      	mov	r7, r6
 8006ea2:	dc04      	bgt.n	8006eae <__swbuf_r+0x42>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 f93c 	bl	8007124 <_fflush_r>
 8006eac:	bb30      	cbnz	r0, 8006efc <__swbuf_r+0x90>
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	60a3      	str	r3, [r4, #8]
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	6022      	str	r2, [r4, #0]
 8006eba:	701e      	strb	r6, [r3, #0]
 8006ebc:	6963      	ldr	r3, [r4, #20]
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	4283      	cmp	r3, r0
 8006ec2:	d004      	beq.n	8006ece <__swbuf_r+0x62>
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	07db      	lsls	r3, r3, #31
 8006ec8:	d506      	bpl.n	8006ed8 <__swbuf_r+0x6c>
 8006eca:	2e0a      	cmp	r6, #10
 8006ecc:	d104      	bne.n	8006ed8 <__swbuf_r+0x6c>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 f927 	bl	8007124 <_fflush_r>
 8006ed6:	b988      	cbnz	r0, 8006efc <__swbuf_r+0x90>
 8006ed8:	4638      	mov	r0, r7
 8006eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <__swbuf_r+0x9c>)
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	d101      	bne.n	8006ee6 <__swbuf_r+0x7a>
 8006ee2:	68ac      	ldr	r4, [r5, #8]
 8006ee4:	e7cf      	b.n	8006e86 <__swbuf_r+0x1a>
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <__swbuf_r+0xa0>)
 8006ee8:	429c      	cmp	r4, r3
 8006eea:	bf08      	it	eq
 8006eec:	68ec      	ldreq	r4, [r5, #12]
 8006eee:	e7ca      	b.n	8006e86 <__swbuf_r+0x1a>
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f81a 	bl	8006f2c <__swsetup_r>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d0cb      	beq.n	8006e94 <__swbuf_r+0x28>
 8006efc:	f04f 37ff 	mov.w	r7, #4294967295
 8006f00:	e7ea      	b.n	8006ed8 <__swbuf_r+0x6c>
 8006f02:	bf00      	nop
 8006f04:	08007a04 	.word	0x08007a04
 8006f08:	08007a24 	.word	0x08007a24
 8006f0c:	080079e4 	.word	0x080079e4

08006f10 <__ascii_wctomb>:
 8006f10:	b149      	cbz	r1, 8006f26 <__ascii_wctomb+0x16>
 8006f12:	2aff      	cmp	r2, #255	; 0xff
 8006f14:	bf85      	ittet	hi
 8006f16:	238a      	movhi	r3, #138	; 0x8a
 8006f18:	6003      	strhi	r3, [r0, #0]
 8006f1a:	700a      	strbls	r2, [r1, #0]
 8006f1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f20:	bf98      	it	ls
 8006f22:	2001      	movls	r0, #1
 8006f24:	4770      	bx	lr
 8006f26:	4608      	mov	r0, r1
 8006f28:	4770      	bx	lr
	...

08006f2c <__swsetup_r>:
 8006f2c:	4b32      	ldr	r3, [pc, #200]	; (8006ff8 <__swsetup_r+0xcc>)
 8006f2e:	b570      	push	{r4, r5, r6, lr}
 8006f30:	681d      	ldr	r5, [r3, #0]
 8006f32:	4606      	mov	r6, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	b125      	cbz	r5, 8006f42 <__swsetup_r+0x16>
 8006f38:	69ab      	ldr	r3, [r5, #24]
 8006f3a:	b913      	cbnz	r3, 8006f42 <__swsetup_r+0x16>
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 f985 	bl	800724c <__sinit>
 8006f42:	4b2e      	ldr	r3, [pc, #184]	; (8006ffc <__swsetup_r+0xd0>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d10f      	bne.n	8006f68 <__swsetup_r+0x3c>
 8006f48:	686c      	ldr	r4, [r5, #4]
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f50:	0719      	lsls	r1, r3, #28
 8006f52:	d42c      	bmi.n	8006fae <__swsetup_r+0x82>
 8006f54:	06dd      	lsls	r5, r3, #27
 8006f56:	d411      	bmi.n	8006f7c <__swsetup_r+0x50>
 8006f58:	2309      	movs	r3, #9
 8006f5a:	6033      	str	r3, [r6, #0]
 8006f5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
 8006f66:	e03e      	b.n	8006fe6 <__swsetup_r+0xba>
 8006f68:	4b25      	ldr	r3, [pc, #148]	; (8007000 <__swsetup_r+0xd4>)
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	d101      	bne.n	8006f72 <__swsetup_r+0x46>
 8006f6e:	68ac      	ldr	r4, [r5, #8]
 8006f70:	e7eb      	b.n	8006f4a <__swsetup_r+0x1e>
 8006f72:	4b24      	ldr	r3, [pc, #144]	; (8007004 <__swsetup_r+0xd8>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	bf08      	it	eq
 8006f78:	68ec      	ldreq	r4, [r5, #12]
 8006f7a:	e7e6      	b.n	8006f4a <__swsetup_r+0x1e>
 8006f7c:	0758      	lsls	r0, r3, #29
 8006f7e:	d512      	bpl.n	8006fa6 <__swsetup_r+0x7a>
 8006f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f82:	b141      	cbz	r1, 8006f96 <__swsetup_r+0x6a>
 8006f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f88:	4299      	cmp	r1, r3
 8006f8a:	d002      	beq.n	8006f92 <__swsetup_r+0x66>
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f7ff fcd5 	bl	800693c <_free_r>
 8006f92:	2300      	movs	r3, #0
 8006f94:	6363      	str	r3, [r4, #52]	; 0x34
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f043 0308 	orr.w	r3, r3, #8
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	6923      	ldr	r3, [r4, #16]
 8006fb0:	b94b      	cbnz	r3, 8006fc6 <__swsetup_r+0x9a>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fbc:	d003      	beq.n	8006fc6 <__swsetup_r+0x9a>
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f000 fa09 	bl	80073d8 <__smakebuf_r>
 8006fc6:	89a0      	ldrh	r0, [r4, #12]
 8006fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fcc:	f010 0301 	ands.w	r3, r0, #1
 8006fd0:	d00a      	beq.n	8006fe8 <__swsetup_r+0xbc>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60a3      	str	r3, [r4, #8]
 8006fd6:	6963      	ldr	r3, [r4, #20]
 8006fd8:	425b      	negs	r3, r3
 8006fda:	61a3      	str	r3, [r4, #24]
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	b943      	cbnz	r3, 8006ff2 <__swsetup_r+0xc6>
 8006fe0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fe4:	d1ba      	bne.n	8006f5c <__swsetup_r+0x30>
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	0781      	lsls	r1, r0, #30
 8006fea:	bf58      	it	pl
 8006fec:	6963      	ldrpl	r3, [r4, #20]
 8006fee:	60a3      	str	r3, [r4, #8]
 8006ff0:	e7f4      	b.n	8006fdc <__swsetup_r+0xb0>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e7f7      	b.n	8006fe6 <__swsetup_r+0xba>
 8006ff6:	bf00      	nop
 8006ff8:	2000000c 	.word	0x2000000c
 8006ffc:	08007a04 	.word	0x08007a04
 8007000:	08007a24 	.word	0x08007a24
 8007004:	080079e4 	.word	0x080079e4

08007008 <abort>:
 8007008:	b508      	push	{r3, lr}
 800700a:	2006      	movs	r0, #6
 800700c:	f000 fa4c 	bl	80074a8 <raise>
 8007010:	2001      	movs	r0, #1
 8007012:	f7fa fd7d 	bl	8001b10 <_exit>
	...

08007018 <__sflush_r>:
 8007018:	898a      	ldrh	r2, [r1, #12]
 800701a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701e:	4605      	mov	r5, r0
 8007020:	0710      	lsls	r0, r2, #28
 8007022:	460c      	mov	r4, r1
 8007024:	d458      	bmi.n	80070d8 <__sflush_r+0xc0>
 8007026:	684b      	ldr	r3, [r1, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	dc05      	bgt.n	8007038 <__sflush_r+0x20>
 800702c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	dc02      	bgt.n	8007038 <__sflush_r+0x20>
 8007032:	2000      	movs	r0, #0
 8007034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703a:	2e00      	cmp	r6, #0
 800703c:	d0f9      	beq.n	8007032 <__sflush_r+0x1a>
 800703e:	2300      	movs	r3, #0
 8007040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007044:	682f      	ldr	r7, [r5, #0]
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	d032      	beq.n	80070b0 <__sflush_r+0x98>
 800704a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	075a      	lsls	r2, r3, #29
 8007050:	d505      	bpl.n	800705e <__sflush_r+0x46>
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	1ac0      	subs	r0, r0, r3
 8007056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007058:	b10b      	cbz	r3, 800705e <__sflush_r+0x46>
 800705a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800705c:	1ac0      	subs	r0, r0, r3
 800705e:	2300      	movs	r3, #0
 8007060:	4602      	mov	r2, r0
 8007062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007064:	6a21      	ldr	r1, [r4, #32]
 8007066:	4628      	mov	r0, r5
 8007068:	47b0      	blx	r6
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	d106      	bne.n	800707e <__sflush_r+0x66>
 8007070:	6829      	ldr	r1, [r5, #0]
 8007072:	291d      	cmp	r1, #29
 8007074:	d82c      	bhi.n	80070d0 <__sflush_r+0xb8>
 8007076:	4a2a      	ldr	r2, [pc, #168]	; (8007120 <__sflush_r+0x108>)
 8007078:	40ca      	lsrs	r2, r1
 800707a:	07d6      	lsls	r6, r2, #31
 800707c:	d528      	bpl.n	80070d0 <__sflush_r+0xb8>
 800707e:	2200      	movs	r2, #0
 8007080:	6062      	str	r2, [r4, #4]
 8007082:	04d9      	lsls	r1, r3, #19
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	6022      	str	r2, [r4, #0]
 8007088:	d504      	bpl.n	8007094 <__sflush_r+0x7c>
 800708a:	1c42      	adds	r2, r0, #1
 800708c:	d101      	bne.n	8007092 <__sflush_r+0x7a>
 800708e:	682b      	ldr	r3, [r5, #0]
 8007090:	b903      	cbnz	r3, 8007094 <__sflush_r+0x7c>
 8007092:	6560      	str	r0, [r4, #84]	; 0x54
 8007094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007096:	602f      	str	r7, [r5, #0]
 8007098:	2900      	cmp	r1, #0
 800709a:	d0ca      	beq.n	8007032 <__sflush_r+0x1a>
 800709c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070a0:	4299      	cmp	r1, r3
 80070a2:	d002      	beq.n	80070aa <__sflush_r+0x92>
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7ff fc49 	bl	800693c <_free_r>
 80070aa:	2000      	movs	r0, #0
 80070ac:	6360      	str	r0, [r4, #52]	; 0x34
 80070ae:	e7c1      	b.n	8007034 <__sflush_r+0x1c>
 80070b0:	6a21      	ldr	r1, [r4, #32]
 80070b2:	2301      	movs	r3, #1
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b0      	blx	r6
 80070b8:	1c41      	adds	r1, r0, #1
 80070ba:	d1c7      	bne.n	800704c <__sflush_r+0x34>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0c4      	beq.n	800704c <__sflush_r+0x34>
 80070c2:	2b1d      	cmp	r3, #29
 80070c4:	d001      	beq.n	80070ca <__sflush_r+0xb2>
 80070c6:	2b16      	cmp	r3, #22
 80070c8:	d101      	bne.n	80070ce <__sflush_r+0xb6>
 80070ca:	602f      	str	r7, [r5, #0]
 80070cc:	e7b1      	b.n	8007032 <__sflush_r+0x1a>
 80070ce:	89a3      	ldrh	r3, [r4, #12]
 80070d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d4:	81a3      	strh	r3, [r4, #12]
 80070d6:	e7ad      	b.n	8007034 <__sflush_r+0x1c>
 80070d8:	690f      	ldr	r7, [r1, #16]
 80070da:	2f00      	cmp	r7, #0
 80070dc:	d0a9      	beq.n	8007032 <__sflush_r+0x1a>
 80070de:	0793      	lsls	r3, r2, #30
 80070e0:	680e      	ldr	r6, [r1, #0]
 80070e2:	bf08      	it	eq
 80070e4:	694b      	ldreq	r3, [r1, #20]
 80070e6:	600f      	str	r7, [r1, #0]
 80070e8:	bf18      	it	ne
 80070ea:	2300      	movne	r3, #0
 80070ec:	eba6 0807 	sub.w	r8, r6, r7
 80070f0:	608b      	str	r3, [r1, #8]
 80070f2:	f1b8 0f00 	cmp.w	r8, #0
 80070f6:	dd9c      	ble.n	8007032 <__sflush_r+0x1a>
 80070f8:	6a21      	ldr	r1, [r4, #32]
 80070fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070fc:	4643      	mov	r3, r8
 80070fe:	463a      	mov	r2, r7
 8007100:	4628      	mov	r0, r5
 8007102:	47b0      	blx	r6
 8007104:	2800      	cmp	r0, #0
 8007106:	dc06      	bgt.n	8007116 <__sflush_r+0xfe>
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	f04f 30ff 	mov.w	r0, #4294967295
 8007114:	e78e      	b.n	8007034 <__sflush_r+0x1c>
 8007116:	4407      	add	r7, r0
 8007118:	eba8 0800 	sub.w	r8, r8, r0
 800711c:	e7e9      	b.n	80070f2 <__sflush_r+0xda>
 800711e:	bf00      	nop
 8007120:	20400001 	.word	0x20400001

08007124 <_fflush_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	690b      	ldr	r3, [r1, #16]
 8007128:	4605      	mov	r5, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b913      	cbnz	r3, 8007134 <_fflush_r+0x10>
 800712e:	2500      	movs	r5, #0
 8007130:	4628      	mov	r0, r5
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	b118      	cbz	r0, 800713e <_fflush_r+0x1a>
 8007136:	6983      	ldr	r3, [r0, #24]
 8007138:	b90b      	cbnz	r3, 800713e <_fflush_r+0x1a>
 800713a:	f000 f887 	bl	800724c <__sinit>
 800713e:	4b14      	ldr	r3, [pc, #80]	; (8007190 <_fflush_r+0x6c>)
 8007140:	429c      	cmp	r4, r3
 8007142:	d11b      	bne.n	800717c <_fflush_r+0x58>
 8007144:	686c      	ldr	r4, [r5, #4]
 8007146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0ef      	beq.n	800712e <_fflush_r+0xa>
 800714e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007150:	07d0      	lsls	r0, r2, #31
 8007152:	d404      	bmi.n	800715e <_fflush_r+0x3a>
 8007154:	0599      	lsls	r1, r3, #22
 8007156:	d402      	bmi.n	800715e <_fflush_r+0x3a>
 8007158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800715a:	f000 f915 	bl	8007388 <__retarget_lock_acquire_recursive>
 800715e:	4628      	mov	r0, r5
 8007160:	4621      	mov	r1, r4
 8007162:	f7ff ff59 	bl	8007018 <__sflush_r>
 8007166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007168:	07da      	lsls	r2, r3, #31
 800716a:	4605      	mov	r5, r0
 800716c:	d4e0      	bmi.n	8007130 <_fflush_r+0xc>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	059b      	lsls	r3, r3, #22
 8007172:	d4dd      	bmi.n	8007130 <_fflush_r+0xc>
 8007174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007176:	f000 f908 	bl	800738a <__retarget_lock_release_recursive>
 800717a:	e7d9      	b.n	8007130 <_fflush_r+0xc>
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <_fflush_r+0x70>)
 800717e:	429c      	cmp	r4, r3
 8007180:	d101      	bne.n	8007186 <_fflush_r+0x62>
 8007182:	68ac      	ldr	r4, [r5, #8]
 8007184:	e7df      	b.n	8007146 <_fflush_r+0x22>
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <_fflush_r+0x74>)
 8007188:	429c      	cmp	r4, r3
 800718a:	bf08      	it	eq
 800718c:	68ec      	ldreq	r4, [r5, #12]
 800718e:	e7da      	b.n	8007146 <_fflush_r+0x22>
 8007190:	08007a04 	.word	0x08007a04
 8007194:	08007a24 	.word	0x08007a24
 8007198:	080079e4 	.word	0x080079e4

0800719c <std>:
 800719c:	2300      	movs	r3, #0
 800719e:	b510      	push	{r4, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	e9c0 3300 	strd	r3, r3, [r0]
 80071a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071aa:	6083      	str	r3, [r0, #8]
 80071ac:	8181      	strh	r1, [r0, #12]
 80071ae:	6643      	str	r3, [r0, #100]	; 0x64
 80071b0:	81c2      	strh	r2, [r0, #14]
 80071b2:	6183      	str	r3, [r0, #24]
 80071b4:	4619      	mov	r1, r3
 80071b6:	2208      	movs	r2, #8
 80071b8:	305c      	adds	r0, #92	; 0x5c
 80071ba:	f7fd fd1f 	bl	8004bfc <memset>
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <std+0x38>)
 80071c0:	6263      	str	r3, [r4, #36]	; 0x24
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <std+0x3c>)
 80071c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <std+0x40>)
 80071c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x44>)
 80071cc:	6224      	str	r4, [r4, #32]
 80071ce:	6323      	str	r3, [r4, #48]	; 0x30
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	bf00      	nop
 80071d4:	080074e1 	.word	0x080074e1
 80071d8:	08007503 	.word	0x08007503
 80071dc:	0800753b 	.word	0x0800753b
 80071e0:	0800755f 	.word	0x0800755f

080071e4 <_cleanup_r>:
 80071e4:	4901      	ldr	r1, [pc, #4]	; (80071ec <_cleanup_r+0x8>)
 80071e6:	f000 b8af 	b.w	8007348 <_fwalk_reent>
 80071ea:	bf00      	nop
 80071ec:	08007125 	.word	0x08007125

080071f0 <__sfmoreglue>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	2268      	movs	r2, #104	; 0x68
 80071f4:	1e4d      	subs	r5, r1, #1
 80071f6:	4355      	muls	r5, r2
 80071f8:	460e      	mov	r6, r1
 80071fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071fe:	f7ff fc09 	bl	8006a14 <_malloc_r>
 8007202:	4604      	mov	r4, r0
 8007204:	b140      	cbz	r0, 8007218 <__sfmoreglue+0x28>
 8007206:	2100      	movs	r1, #0
 8007208:	e9c0 1600 	strd	r1, r6, [r0]
 800720c:	300c      	adds	r0, #12
 800720e:	60a0      	str	r0, [r4, #8]
 8007210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007214:	f7fd fcf2 	bl	8004bfc <memset>
 8007218:	4620      	mov	r0, r4
 800721a:	bd70      	pop	{r4, r5, r6, pc}

0800721c <__sfp_lock_acquire>:
 800721c:	4801      	ldr	r0, [pc, #4]	; (8007224 <__sfp_lock_acquire+0x8>)
 800721e:	f000 b8b3 	b.w	8007388 <__retarget_lock_acquire_recursive>
 8007222:	bf00      	nop
 8007224:	20000331 	.word	0x20000331

08007228 <__sfp_lock_release>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__sfp_lock_release+0x8>)
 800722a:	f000 b8ae 	b.w	800738a <__retarget_lock_release_recursive>
 800722e:	bf00      	nop
 8007230:	20000331 	.word	0x20000331

08007234 <__sinit_lock_acquire>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__sinit_lock_acquire+0x8>)
 8007236:	f000 b8a7 	b.w	8007388 <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	20000332 	.word	0x20000332

08007240 <__sinit_lock_release>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__sinit_lock_release+0x8>)
 8007242:	f000 b8a2 	b.w	800738a <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	20000332 	.word	0x20000332

0800724c <__sinit>:
 800724c:	b510      	push	{r4, lr}
 800724e:	4604      	mov	r4, r0
 8007250:	f7ff fff0 	bl	8007234 <__sinit_lock_acquire>
 8007254:	69a3      	ldr	r3, [r4, #24]
 8007256:	b11b      	cbz	r3, 8007260 <__sinit+0x14>
 8007258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725c:	f7ff bff0 	b.w	8007240 <__sinit_lock_release>
 8007260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007264:	6523      	str	r3, [r4, #80]	; 0x50
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <__sinit+0x68>)
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <__sinit+0x6c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	62a2      	str	r2, [r4, #40]	; 0x28
 800726e:	42a3      	cmp	r3, r4
 8007270:	bf04      	itt	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	61a3      	streq	r3, [r4, #24]
 8007276:	4620      	mov	r0, r4
 8007278:	f000 f820 	bl	80072bc <__sfp>
 800727c:	6060      	str	r0, [r4, #4]
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f81c 	bl	80072bc <__sfp>
 8007284:	60a0      	str	r0, [r4, #8]
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f818 	bl	80072bc <__sfp>
 800728c:	2200      	movs	r2, #0
 800728e:	60e0      	str	r0, [r4, #12]
 8007290:	2104      	movs	r1, #4
 8007292:	6860      	ldr	r0, [r4, #4]
 8007294:	f7ff ff82 	bl	800719c <std>
 8007298:	68a0      	ldr	r0, [r4, #8]
 800729a:	2201      	movs	r2, #1
 800729c:	2109      	movs	r1, #9
 800729e:	f7ff ff7d 	bl	800719c <std>
 80072a2:	68e0      	ldr	r0, [r4, #12]
 80072a4:	2202      	movs	r2, #2
 80072a6:	2112      	movs	r1, #18
 80072a8:	f7ff ff78 	bl	800719c <std>
 80072ac:	2301      	movs	r3, #1
 80072ae:	61a3      	str	r3, [r4, #24]
 80072b0:	e7d2      	b.n	8007258 <__sinit+0xc>
 80072b2:	bf00      	nop
 80072b4:	08007668 	.word	0x08007668
 80072b8:	080071e5 	.word	0x080071e5

080072bc <__sfp>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	4607      	mov	r7, r0
 80072c0:	f7ff ffac 	bl	800721c <__sfp_lock_acquire>
 80072c4:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <__sfp+0x84>)
 80072c6:	681e      	ldr	r6, [r3, #0]
 80072c8:	69b3      	ldr	r3, [r6, #24]
 80072ca:	b913      	cbnz	r3, 80072d2 <__sfp+0x16>
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff ffbd 	bl	800724c <__sinit>
 80072d2:	3648      	adds	r6, #72	; 0x48
 80072d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072d8:	3b01      	subs	r3, #1
 80072da:	d503      	bpl.n	80072e4 <__sfp+0x28>
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	b30b      	cbz	r3, 8007324 <__sfp+0x68>
 80072e0:	6836      	ldr	r6, [r6, #0]
 80072e2:	e7f7      	b.n	80072d4 <__sfp+0x18>
 80072e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072e8:	b9d5      	cbnz	r5, 8007320 <__sfp+0x64>
 80072ea:	4b16      	ldr	r3, [pc, #88]	; (8007344 <__sfp+0x88>)
 80072ec:	60e3      	str	r3, [r4, #12]
 80072ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072f2:	6665      	str	r5, [r4, #100]	; 0x64
 80072f4:	f000 f847 	bl	8007386 <__retarget_lock_init_recursive>
 80072f8:	f7ff ff96 	bl	8007228 <__sfp_lock_release>
 80072fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007304:	6025      	str	r5, [r4, #0]
 8007306:	61a5      	str	r5, [r4, #24]
 8007308:	2208      	movs	r2, #8
 800730a:	4629      	mov	r1, r5
 800730c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007310:	f7fd fc74 	bl	8004bfc <memset>
 8007314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800731c:	4620      	mov	r0, r4
 800731e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007320:	3468      	adds	r4, #104	; 0x68
 8007322:	e7d9      	b.n	80072d8 <__sfp+0x1c>
 8007324:	2104      	movs	r1, #4
 8007326:	4638      	mov	r0, r7
 8007328:	f7ff ff62 	bl	80071f0 <__sfmoreglue>
 800732c:	4604      	mov	r4, r0
 800732e:	6030      	str	r0, [r6, #0]
 8007330:	2800      	cmp	r0, #0
 8007332:	d1d5      	bne.n	80072e0 <__sfp+0x24>
 8007334:	f7ff ff78 	bl	8007228 <__sfp_lock_release>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	e7ee      	b.n	800731c <__sfp+0x60>
 800733e:	bf00      	nop
 8007340:	08007668 	.word	0x08007668
 8007344:	ffff0001 	.word	0xffff0001

08007348 <_fwalk_reent>:
 8007348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800734c:	4606      	mov	r6, r0
 800734e:	4688      	mov	r8, r1
 8007350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007354:	2700      	movs	r7, #0
 8007356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800735a:	f1b9 0901 	subs.w	r9, r9, #1
 800735e:	d505      	bpl.n	800736c <_fwalk_reent+0x24>
 8007360:	6824      	ldr	r4, [r4, #0]
 8007362:	2c00      	cmp	r4, #0
 8007364:	d1f7      	bne.n	8007356 <_fwalk_reent+0xe>
 8007366:	4638      	mov	r0, r7
 8007368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736c:	89ab      	ldrh	r3, [r5, #12]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d907      	bls.n	8007382 <_fwalk_reent+0x3a>
 8007372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007376:	3301      	adds	r3, #1
 8007378:	d003      	beq.n	8007382 <_fwalk_reent+0x3a>
 800737a:	4629      	mov	r1, r5
 800737c:	4630      	mov	r0, r6
 800737e:	47c0      	blx	r8
 8007380:	4307      	orrs	r7, r0
 8007382:	3568      	adds	r5, #104	; 0x68
 8007384:	e7e9      	b.n	800735a <_fwalk_reent+0x12>

08007386 <__retarget_lock_init_recursive>:
 8007386:	4770      	bx	lr

08007388 <__retarget_lock_acquire_recursive>:
 8007388:	4770      	bx	lr

0800738a <__retarget_lock_release_recursive>:
 800738a:	4770      	bx	lr

0800738c <__swhatbuf_r>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	460e      	mov	r6, r1
 8007390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007394:	2900      	cmp	r1, #0
 8007396:	b096      	sub	sp, #88	; 0x58
 8007398:	4614      	mov	r4, r2
 800739a:	461d      	mov	r5, r3
 800739c:	da08      	bge.n	80073b0 <__swhatbuf_r+0x24>
 800739e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	602a      	str	r2, [r5, #0]
 80073a6:	061a      	lsls	r2, r3, #24
 80073a8:	d410      	bmi.n	80073cc <__swhatbuf_r+0x40>
 80073aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ae:	e00e      	b.n	80073ce <__swhatbuf_r+0x42>
 80073b0:	466a      	mov	r2, sp
 80073b2:	f000 f8fb 	bl	80075ac <_fstat_r>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	dbf1      	blt.n	800739e <__swhatbuf_r+0x12>
 80073ba:	9a01      	ldr	r2, [sp, #4]
 80073bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073c4:	425a      	negs	r2, r3
 80073c6:	415a      	adcs	r2, r3
 80073c8:	602a      	str	r2, [r5, #0]
 80073ca:	e7ee      	b.n	80073aa <__swhatbuf_r+0x1e>
 80073cc:	2340      	movs	r3, #64	; 0x40
 80073ce:	2000      	movs	r0, #0
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	b016      	add	sp, #88	; 0x58
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080073d8 <__smakebuf_r>:
 80073d8:	898b      	ldrh	r3, [r1, #12]
 80073da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073dc:	079d      	lsls	r5, r3, #30
 80073de:	4606      	mov	r6, r0
 80073e0:	460c      	mov	r4, r1
 80073e2:	d507      	bpl.n	80073f4 <__smakebuf_r+0x1c>
 80073e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	2301      	movs	r3, #1
 80073ee:	6163      	str	r3, [r4, #20]
 80073f0:	b002      	add	sp, #8
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	ab01      	add	r3, sp, #4
 80073f6:	466a      	mov	r2, sp
 80073f8:	f7ff ffc8 	bl	800738c <__swhatbuf_r>
 80073fc:	9900      	ldr	r1, [sp, #0]
 80073fe:	4605      	mov	r5, r0
 8007400:	4630      	mov	r0, r6
 8007402:	f7ff fb07 	bl	8006a14 <_malloc_r>
 8007406:	b948      	cbnz	r0, 800741c <__smakebuf_r+0x44>
 8007408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740c:	059a      	lsls	r2, r3, #22
 800740e:	d4ef      	bmi.n	80073f0 <__smakebuf_r+0x18>
 8007410:	f023 0303 	bic.w	r3, r3, #3
 8007414:	f043 0302 	orr.w	r3, r3, #2
 8007418:	81a3      	strh	r3, [r4, #12]
 800741a:	e7e3      	b.n	80073e4 <__smakebuf_r+0xc>
 800741c:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <__smakebuf_r+0x7c>)
 800741e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	6020      	str	r0, [r4, #0]
 8007424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007428:	81a3      	strh	r3, [r4, #12]
 800742a:	9b00      	ldr	r3, [sp, #0]
 800742c:	6163      	str	r3, [r4, #20]
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	6120      	str	r0, [r4, #16]
 8007432:	b15b      	cbz	r3, 800744c <__smakebuf_r+0x74>
 8007434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007438:	4630      	mov	r0, r6
 800743a:	f000 f8c9 	bl	80075d0 <_isatty_r>
 800743e:	b128      	cbz	r0, 800744c <__smakebuf_r+0x74>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f023 0303 	bic.w	r3, r3, #3
 8007446:	f043 0301 	orr.w	r3, r3, #1
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	89a0      	ldrh	r0, [r4, #12]
 800744e:	4305      	orrs	r5, r0
 8007450:	81a5      	strh	r5, [r4, #12]
 8007452:	e7cd      	b.n	80073f0 <__smakebuf_r+0x18>
 8007454:	080071e5 	.word	0x080071e5

08007458 <_raise_r>:
 8007458:	291f      	cmp	r1, #31
 800745a:	b538      	push	{r3, r4, r5, lr}
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	d904      	bls.n	800746c <_raise_r+0x14>
 8007462:	2316      	movs	r3, #22
 8007464:	6003      	str	r3, [r0, #0]
 8007466:	f04f 30ff 	mov.w	r0, #4294967295
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800746e:	b112      	cbz	r2, 8007476 <_raise_r+0x1e>
 8007470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007474:	b94b      	cbnz	r3, 800748a <_raise_r+0x32>
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f830 	bl	80074dc <_getpid_r>
 800747c:	462a      	mov	r2, r5
 800747e:	4601      	mov	r1, r0
 8007480:	4620      	mov	r0, r4
 8007482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007486:	f000 b817 	b.w	80074b8 <_kill_r>
 800748a:	2b01      	cmp	r3, #1
 800748c:	d00a      	beq.n	80074a4 <_raise_r+0x4c>
 800748e:	1c59      	adds	r1, r3, #1
 8007490:	d103      	bne.n	800749a <_raise_r+0x42>
 8007492:	2316      	movs	r3, #22
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	2001      	movs	r0, #1
 8007498:	e7e7      	b.n	800746a <_raise_r+0x12>
 800749a:	2400      	movs	r4, #0
 800749c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074a0:	4628      	mov	r0, r5
 80074a2:	4798      	blx	r3
 80074a4:	2000      	movs	r0, #0
 80074a6:	e7e0      	b.n	800746a <_raise_r+0x12>

080074a8 <raise>:
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <raise+0xc>)
 80074aa:	4601      	mov	r1, r0
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	f7ff bfd3 	b.w	8007458 <_raise_r>
 80074b2:	bf00      	nop
 80074b4:	2000000c 	.word	0x2000000c

080074b8 <_kill_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4d07      	ldr	r5, [pc, #28]	; (80074d8 <_kill_r+0x20>)
 80074bc:	2300      	movs	r3, #0
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	f7fa fb13 	bl	8001af0 <_kill>
 80074ca:	1c43      	adds	r3, r0, #1
 80074cc:	d102      	bne.n	80074d4 <_kill_r+0x1c>
 80074ce:	682b      	ldr	r3, [r5, #0]
 80074d0:	b103      	cbz	r3, 80074d4 <_kill_r+0x1c>
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	bd38      	pop	{r3, r4, r5, pc}
 80074d6:	bf00      	nop
 80074d8:	2000032c 	.word	0x2000032c

080074dc <_getpid_r>:
 80074dc:	f7fa bb00 	b.w	8001ae0 <_getpid>

080074e0 <__sread>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	460c      	mov	r4, r1
 80074e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e8:	f000 f894 	bl	8007614 <_read_r>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	bfab      	itete	ge
 80074f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074f2:	89a3      	ldrhlt	r3, [r4, #12]
 80074f4:	181b      	addge	r3, r3, r0
 80074f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074fa:	bfac      	ite	ge
 80074fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074fe:	81a3      	strhlt	r3, [r4, #12]
 8007500:	bd10      	pop	{r4, pc}

08007502 <__swrite>:
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	461f      	mov	r7, r3
 8007508:	898b      	ldrh	r3, [r1, #12]
 800750a:	05db      	lsls	r3, r3, #23
 800750c:	4605      	mov	r5, r0
 800750e:	460c      	mov	r4, r1
 8007510:	4616      	mov	r6, r2
 8007512:	d505      	bpl.n	8007520 <__swrite+0x1e>
 8007514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007518:	2302      	movs	r3, #2
 800751a:	2200      	movs	r2, #0
 800751c:	f000 f868 	bl	80075f0 <_lseek_r>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	4628      	mov	r0, r5
 8007532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007536:	f000 b817 	b.w	8007568 <_write_r>

0800753a <__sseek>:
 800753a:	b510      	push	{r4, lr}
 800753c:	460c      	mov	r4, r1
 800753e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007542:	f000 f855 	bl	80075f0 <_lseek_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	bf15      	itete	ne
 800754c:	6560      	strne	r0, [r4, #84]	; 0x54
 800754e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007556:	81a3      	strheq	r3, [r4, #12]
 8007558:	bf18      	it	ne
 800755a:	81a3      	strhne	r3, [r4, #12]
 800755c:	bd10      	pop	{r4, pc}

0800755e <__sclose>:
 800755e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007562:	f000 b813 	b.w	800758c <_close_r>
	...

08007568 <_write_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d07      	ldr	r5, [pc, #28]	; (8007588 <_write_r+0x20>)
 800756c:	4604      	mov	r4, r0
 800756e:	4608      	mov	r0, r1
 8007570:	4611      	mov	r1, r2
 8007572:	2200      	movs	r2, #0
 8007574:	602a      	str	r2, [r5, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7fa faf1 	bl	8001b5e <_write>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_write_r+0x1e>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_write_r+0x1e>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	2000032c 	.word	0x2000032c

0800758c <_close_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d06      	ldr	r5, [pc, #24]	; (80075a8 <_close_r+0x1c>)
 8007590:	2300      	movs	r3, #0
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	602b      	str	r3, [r5, #0]
 8007598:	f7fa fafd 	bl	8001b96 <_close>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_close_r+0x1a>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_close_r+0x1a>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	2000032c 	.word	0x2000032c

080075ac <_fstat_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	; (80075cc <_fstat_r+0x20>)
 80075b0:	2300      	movs	r3, #0
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	602b      	str	r3, [r5, #0]
 80075ba:	f7fa faf8 	bl	8001bae <_fstat>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d102      	bne.n	80075c8 <_fstat_r+0x1c>
 80075c2:	682b      	ldr	r3, [r5, #0]
 80075c4:	b103      	cbz	r3, 80075c8 <_fstat_r+0x1c>
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	bd38      	pop	{r3, r4, r5, pc}
 80075ca:	bf00      	nop
 80075cc:	2000032c 	.word	0x2000032c

080075d0 <_isatty_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d06      	ldr	r5, [pc, #24]	; (80075ec <_isatty_r+0x1c>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	f7fa faf7 	bl	8001bce <_isatty>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_isatty_r+0x1a>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_isatty_r+0x1a>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	2000032c 	.word	0x2000032c

080075f0 <_lseek_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	; (8007610 <_lseek_r+0x20>)
 80075f4:	4604      	mov	r4, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7fa faf0 	bl	8001be4 <_lseek>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_lseek_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_lseek_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	2000032c 	.word	0x2000032c

08007614 <_read_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_read_r+0x20>)
 8007618:	4604      	mov	r4, r0
 800761a:	4608      	mov	r0, r1
 800761c:	4611      	mov	r1, r2
 800761e:	2200      	movs	r2, #0
 8007620:	602a      	str	r2, [r5, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	f7fa fa7e 	bl	8001b24 <_read>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_read_r+0x1e>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b103      	cbz	r3, 8007632 <_read_r+0x1e>
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	2000032c 	.word	0x2000032c

08007638 <_init>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr

08007644 <_fini>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr
