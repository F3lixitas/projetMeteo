
projetMeteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd0  08004cd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08004d48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004d48  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e778  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204a  00000000  00000000  0002e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00030868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  00031390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265ce  00000000  00000000  00031dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f488  00000000  00000000  0005838e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8798  00000000  00000000  00067816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ffae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003464  00000000  00000000  00150000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004bc0 	.word	0x08004bc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004bc0 	.word	0x08004bc0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b77      	ldr	r3, [pc, #476]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a76      	ldr	r2, [pc, #472]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b74      	ldr	r3, [pc, #464]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b71      	ldr	r3, [pc, #452]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a70      	ldr	r2, [pc, #448]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b6e      	ldr	r3, [pc, #440]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b6b      	ldr	r3, [pc, #428]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a6a      	ldr	r2, [pc, #424]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b68      	ldr	r3, [pc, #416]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b65      	ldr	r3, [pc, #404]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a64      	ldr	r2, [pc, #400]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b62      	ldr	r3, [pc, #392]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	4b5f      	ldr	r3, [pc, #380]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a5e      	ldr	r2, [pc, #376]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b5c      	ldr	r3, [pc, #368]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000642:	4b59      	ldr	r3, [pc, #356]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a58      	ldr	r2, [pc, #352]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b56      	ldr	r3, [pc, #344]	; (80007a8 <MX_GPIO_Init+0x1f4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000660:	4852      	ldr	r0, [pc, #328]	; (80007ac <MX_GPIO_Init+0x1f8>)
 8000662:	f000 ff17 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	4851      	ldr	r0, [pc, #324]	; (80007b0 <MX_GPIO_Init+0x1fc>)
 800066c:	f000 ff12 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	484b      	ldr	r0, [pc, #300]	; (80007b4 <MX_GPIO_Init+0x200>)
 8000688:	f000 fd58 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800068c:	2332      	movs	r3, #50	; 0x32
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800069c:	230b      	movs	r3, #11
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4843      	ldr	r0, [pc, #268]	; (80007b4 <MX_GPIO_Init+0x200>)
 80006a8:	f000 fd48 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ac:	2386      	movs	r3, #134	; 0x86
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006bc:	230b      	movs	r3, #11
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	483c      	ldr	r0, [pc, #240]	; (80007b8 <MX_GPIO_Init+0x204>)
 80006c8:	f000 fd38 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4831      	ldr	r0, [pc, #196]	; (80007ac <MX_GPIO_Init+0x1f8>)
 80006e6:	f000 fd29 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4829      	ldr	r0, [pc, #164]	; (80007ac <MX_GPIO_Init+0x1f8>)
 8000708:	f000 fd18 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800070c:	2340      	movs	r3, #64	; 0x40
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4823      	ldr	r0, [pc, #140]	; (80007b0 <MX_GPIO_Init+0x1fc>)
 8000724:	f000 fd0a 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	481d      	ldr	r0, [pc, #116]	; (80007b0 <MX_GPIO_Init+0x1fc>)
 800073c:	f000 fcfe 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000740:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000752:	230a      	movs	r3, #10
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <MX_GPIO_Init+0x204>)
 800075e:	f000 fced 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_GPIO_Init+0x204>)
 8000778:	f000 fce0 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800077c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_GPIO_Init+0x1fc>)
 800079a:	f000 fccf 	bl	800113c <HAL_GPIO_Init>

}
 800079e:	bf00      	nop
 80007a0:	3730      	adds	r7, #48	; 0x30
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020400 	.word	0x40020400
 80007b0:	40021800 	.word	0x40021800
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40020000 	.word	0x40020000

080007bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_I2C1_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_I2C1_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <MX_I2C1_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_I2C1_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_I2C1_Init+0x74>)
 80007f8:	f000 fe66 	bl	80014c8 <HAL_I2C_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000802:	f000 f971 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <MX_I2C1_Init+0x74>)
 800080a:	f001 fb61 	bl	8001ed0 <HAL_I2CEx_ConfigAnalogFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000814:	f000 f968 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_I2C1_Init+0x74>)
 800081c:	f001 fba3 	bl	8001f66 <HAL_I2CEx_ConfigDigitalFilter>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 f95f 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000008c 	.word	0x2000008c
 8000834:	40005400 	.word	0x40005400
 8000838:	00808cd2 	.word	0x00808cd2

0800083c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b0aa      	sub	sp, #168	; 0xa8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2284      	movs	r2, #132	; 0x84
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f003 f9a3 	bl	8003ba8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <HAL_I2C_MspInit+0xb4>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d13c      	bne.n	80008e6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800086c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000870:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000872:	2300      	movs	r3, #0
 8000874:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f89a 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000886:	f000 f92f 	bl	8000ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008aa:	2312      	movs	r3, #18
 80008ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008bc:	2304      	movs	r3, #4
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <HAL_I2C_MspInit+0xbc>)
 80008ca:	f000 fc37 	bl	800113c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 80008d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_I2C_MspInit+0xb8>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	37a8      	adds	r7, #168	; 0xa8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400

080008fc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000904:	1d39      	adds	r1, r7, #4
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	2201      	movs	r2, #1
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <__io_putchar+0x20>)
 800090e:	f002 fc8f 	bl	8003230 <HAL_UART_Transmit>
	return ch;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000e0 	.word	0x200000e0

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f000 faa2 	bl	8000e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f875 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f7ff fe41 	bl	80005b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000932:	f000 f9e3 	bl	8000cfc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000936:	f7ff ff41 	bl	80007bc <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000940:	482c      	ldr	r0, [pc, #176]	; (80009f4 <main+0xd4>)
 8000942:	f000 fda7 	bl	8001494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	482a      	ldr	r0, [pc, #168]	; (80009f4 <main+0xd4>)
 800094c:	f000 fda2 	bl	8001494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	4827      	ldr	r0, [pc, #156]	; (80009f4 <main+0xd4>)
 8000956:	f000 fd9d 	bl	8001494 <HAL_GPIO_WritePin>
  printf("test\r\n");
 800095a:	4827      	ldr	r0, [pc, #156]	; (80009f8 <main+0xd8>)
 800095c:	f003 f9b2 	bl	8003cc4 <puts>
  HAL_Delay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f000 fae0 	bl	8000f28 <HAL_Delay>
  for( i=0; i < 256; i++)
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <main+0xdc>)
 800096a:	2200      	movs	r2, #0
 800096c:	801a      	strh	r2, [r3, #0]
 800096e:	e01a      	b.n	80009a6 <main+0x86>
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1,i, 3,50);
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <main+0xdc>)
 8000972:	8819      	ldrh	r1, [r3, #0]
 8000974:	2332      	movs	r3, #50	; 0x32
 8000976:	2203      	movs	r2, #3
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <main+0xe0>)
 800097a:	f000 ff4f 	bl	800181c <HAL_I2C_IsDeviceReady>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <main+0xe4>)
 8000984:	701a      	strb	r2, [r3, #0]
	  if(ret == HAL_OK)
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <main+0xe4>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <main+0x7a>
	  {
		  printf("%d\n\r, ",i);
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <main+0xdc>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <main+0xe8>)
 8000996:	f003 f90f 	bl	8003bb8 <iprintf>
  for( i=0; i < 256; i++)
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <main+0xdc>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <main+0xdc>)
 80009a4:	801a      	strh	r2, [r3, #0]
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <main+0xdc>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	2bff      	cmp	r3, #255	; 0xff
 80009ac:	d9e0      	bls.n	8000970 <main+0x50>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f000 fab9 	bl	8000f28 <HAL_Delay>

	  ret = HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0b10111101, 1, &data, 1, 50);
 80009b6:	2332      	movs	r3, #50	; 0x32
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	2301      	movs	r3, #1
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <main+0xec>)
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2301      	movs	r3, #1
 80009c4:	22bd      	movs	r2, #189	; 0xbd
 80009c6:	21ba      	movs	r1, #186	; 0xba
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <main+0xe0>)
 80009ca:	f000 fe0d 	bl	80015e8 <HAL_I2C_Mem_Read>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <main+0xe4>)
 80009d4:	701a      	strb	r2, [r3, #0]
	  if(ret != HAL_OK){
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <main+0xe4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d003      	beq.n	80009e6 <main+0xc6>
		  printf("[CONNECTION ERROR] Unable to get data");
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <main+0xf0>)
 80009e0:	f003 f8ea 	bl	8003bb8 <iprintf>
 80009e4:	e7e3      	b.n	80009ae <main+0x8e>
	  }
	  else{
		  printf("%d\n\r", data);
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <main+0xec>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <main+0xf4>)
 80009ee:	f003 f8e3 	bl	8003bb8 <iprintf>
	  HAL_Delay(1000);
 80009f2:	e7dc      	b.n	80009ae <main+0x8e>
 80009f4:	40020400 	.word	0x40020400
 80009f8:	08004bd8 	.word	0x08004bd8
 80009fc:	200000d8 	.word	0x200000d8
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	200000da 	.word	0x200000da
 8000a08:	08004be0 	.word	0x08004be0
 8000a0c:	200000db 	.word	0x200000db
 8000a10:	08004be8 	.word	0x08004be8
 8000a14:	08004c10 	.word	0x08004c10

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 f8be 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a3c:	f001 fae0 	bl	8002000 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <SystemClock_Config+0xc8>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <SystemClock_Config+0xc8>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <SystemClock_Config+0xc8>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a60:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a8c:	2348      	movs	r3, #72	; 0x48
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a94:	2303      	movs	r3, #3
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fabf 	bl	8002020 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa8:	f000 f81e 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fd4d 	bl	8002568 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ad4:	f000 f808 	bl	8000ae8 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3750      	adds	r7, #80	; 0x50
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x44>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x44>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x44>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x44>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x44>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f9ae 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
	}

return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe89 	bl	80008fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf1      	blt.n	8000bdc <_write+0x12>
	}
	return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
	return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f002 ff5a 	bl	8003b54 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20050000 	.word	0x20050000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	200000dc 	.word	0x200000dc
 8000cd4:	20000178 	.word	0x20000178

08000cd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <MX_USART3_UART_Init+0x5c>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART3_UART_Init+0x58>)
 8000d40:	f002 fa28 	bl	8003194 <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f7ff fecd 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000e0 	.word	0x200000e0
 8000d58:	40004800 	.word	0x40004800

08000d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0aa      	sub	sp, #168	; 0xa8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2284      	movs	r2, #132	; 0x84
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 ff13 	bl	8003ba8 <memset>
  if(uartHandle->Instance==USART3)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_UART_MspInit+0xb4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d13c      	bne.n	8000e06 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fe0a 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000da6:	f7ff fe9f 	bl	8000ae8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_UART_MspInit+0xb8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_UART_MspInit+0xb8>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0xb8>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_UART_MspInit+0xb8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_UART_MspInit+0xb8>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_UART_MspInit+0xb8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df4:	2307      	movs	r3, #7
 8000df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_UART_MspInit+0xbc>)
 8000e02:	f000 f99b 	bl	800113c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	37a8      	adds	r7, #168	; 0xa8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ff47 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f002 fe89 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fd67 	bl	8000920 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e60:	08004cd8 	.word	0x08004cd8
  ldr r2, =_sbss
 8000e64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e68:	20000178 	.word	0x20000178

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>

08000e6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 f92e 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 f805 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7e:	f7ff fe39 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f93b 	bl	8001122 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f911 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000164 	.word	0x20000164

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000164 	.word	0x20000164

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0000 	.word	0x05fa0000

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e175      	b.n	8001448 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8164 	bne.w	8001442 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x56>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80be 	beq.w	8001442 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a65      	ldr	r2, [pc, #404]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b63      	ldr	r3, [pc, #396]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012de:	4a61      	ldr	r2, [pc, #388]	; (8001464 <HAL_GPIO_Init+0x328>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_GPIO_Init+0x32c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d037      	beq.n	800137a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a57      	ldr	r2, [pc, #348]	; (800146c <HAL_GPIO_Init+0x330>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d031      	beq.n	8001376 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a55      	ldr	r2, [pc, #340]	; (8001474 <HAL_GPIO_Init+0x338>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a54      	ldr	r2, [pc, #336]	; (8001478 <HAL_GPIO_Init+0x33c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a53      	ldr	r2, [pc, #332]	; (800147c <HAL_GPIO_Init+0x340>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x22a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_GPIO_Init+0x344>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a51      	ldr	r2, [pc, #324]	; (8001484 <HAL_GPIO_Init+0x348>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_GPIO_Init+0x34c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	; (800148c <HAL_GPIO_Init+0x350>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x21a>
 8001352:	2309      	movs	r3, #9
 8001354:	e012      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001356:	230a      	movs	r3, #10
 8001358:	e010      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135a:	2308      	movs	r3, #8
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135e:	2307      	movs	r3, #7
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x240>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x328>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_GPIO_Init+0x354>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_GPIO_Init+0x354>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae86 	bls.w	800115c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40021c00 	.word	0x40021c00
 8001488:	40022000 	.word	0x40022000
 800148c:	40022400 	.word	0x40022400
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07f      	b.n	80015da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff f9a4 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	e006      	b.n	8001550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800154e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d104      	bne.n	8001562 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_I2C_Init+0x11c>)
 800156e:	430b      	orrs	r3, r1
 8001570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69d9      	ldr	r1, [r3, #28]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2220      	movs	r2, #32
 80015c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	02008000 	.word	0x02008000

080015e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	817b      	strh	r3, [r7, #10]
 80015fa:	460b      	mov	r3, r1
 80015fc:	813b      	strh	r3, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	f040 80fd 	bne.w	800180a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <HAL_I2C_Mem_Read+0x34>
 8001616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0f1      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Mem_Read+0x4e>
 8001632:	2302      	movs	r3, #2
 8001634:	e0ea      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800163e:	f7ff fc67 	bl	8000f10 <HAL_GetTick>
 8001642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2319      	movs	r3, #25
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fa63 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0d5      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2222      	movs	r2, #34	; 0x22
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2240      	movs	r2, #64	; 0x40
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001688:	88f8      	ldrh	r0, [r7, #6]
 800168a:	893a      	ldrh	r2, [r7, #8]
 800168c:	8979      	ldrh	r1, [r7, #10]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4603      	mov	r3, r0
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f9c7 	bl	8001a2c <I2C_RequestMemoryRead>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0ad      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	d90e      	bls.n	80016d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	8979      	ldrh	r1, [r7, #10]
 80016c8:	4b52      	ldr	r3, [pc, #328]	; (8001814 <HAL_I2C_Mem_Read+0x22c>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fbcb 	bl	8001e6c <I2C_TransferConfig>
 80016d6:	e00f      	b.n	80016f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <HAL_I2C_Mem_Read+0x22c>)
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fbba 	bl	8001e6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	2200      	movs	r2, #0
 8001700:	2104      	movs	r1, #4
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fa0a 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e07c      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d034      	beq.n	80017b8 <HAL_I2C_Mem_Read+0x1d0>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	2b00      	cmp	r3, #0
 8001754:	d130      	bne.n	80017b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	2200      	movs	r2, #0
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f9db 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e04d      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	2bff      	cmp	r3, #255	; 0xff
 8001778:	d90e      	bls.n	8001798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	b2da      	uxtb	r2, r3
 8001786:	8979      	ldrh	r1, [r7, #10]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 fb6b 	bl	8001e6c <I2C_TransferConfig>
 8001796:	e00f      	b.n	80017b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	8979      	ldrh	r1, [r7, #10]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 fb5a 	bl	8001e6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d19a      	bne.n	80016f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fa28 	bl	8001c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e01a      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2220      	movs	r2, #32
 80017dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_I2C_Mem_Read+0x230>)
 80017ea:	400b      	ands	r3, r1
 80017ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	80002400 	.word	0x80002400
 8001818:	fe00e800 	.word	0xfe00e800

0800181c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	460b      	mov	r3, r1
 800182a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b20      	cmp	r3, #32
 800183a:	f040 80ef 	bne.w	8001a1c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800184c:	d101      	bne.n	8001852 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800184e:	2302      	movs	r3, #2
 8001850:	e0e5      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_I2C_IsDeviceReady+0x44>
 800185c:	2302      	movs	r3, #2
 800185e:	e0de      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2224      	movs	r2, #36	; 0x24
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_I2C_IsDeviceReady+0x6e>
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_I2C_IsDeviceReady+0x20c>)
 8001886:	4313      	orrs	r3, r2
 8001888:	e004      	b.n	8001894 <HAL_I2C_IsDeviceReady+0x78>
 800188a:	897b      	ldrh	r3, [r7, #10]
 800188c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001890:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fb39 	bl	8000f10 <HAL_GetTick>
 800189e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	bf0c      	ite	eq
 80018ae:	2301      	moveq	r3, #1
 80018b0:	2300      	movne	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018cc:	e034      	b.n	8001938 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d01a      	beq.n	800190c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018d6:	f7ff fb1b 	bl	8000f10 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <HAL_I2C_IsDeviceReady+0xd0>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10f      	bne.n	800190c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f043 0220 	orr.w	r2, r3, #32
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e088      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b20      	cmp	r3, #32
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b10      	cmp	r3, #16
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001938:	7ffb      	ldrb	r3, [r7, #31]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_I2C_IsDeviceReady+0x128>
 800193e:	7fbb      	ldrb	r3, [r7, #30]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0c4      	beq.n	80018ce <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b10      	cmp	r3, #16
 8001950:	d01a      	beq.n	8001988 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	2120      	movs	r1, #32
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f8dd 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e058      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2220      	movs	r2, #32
 8001972:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e04a      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	2120      	movs	r1, #32
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f8c2 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e03d      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2210      	movs	r2, #16
 80019a8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2220      	movs	r2, #32
 80019b0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d118      	bne.n	80019ec <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019c8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	2120      	movs	r1, #32
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f8a1 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e01c      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2220      	movs	r2, #32
 80019ea:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	f63f af3d 	bhi.w	8001876 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001a1c:	2302      	movs	r3, #2
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	02002000 	.word	0x02002000

08001a2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	817b      	strh	r3, [r7, #10]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	813b      	strh	r3, [r7, #8]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	8979      	ldrh	r1, [r7, #10]
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <I2C_RequestMemoryRead+0xa4>)
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fa0a 	bl	8001e6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f89d 	bl	8001b9c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e02c      	b.n	8001ac6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a72:	893b      	ldrh	r3, [r7, #8]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a7c:	e015      	b.n	8001aaa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a7e:	893b      	ldrh	r3, [r7, #8]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f883 	bl	8001b9c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e012      	b.n	8001ac6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aa0:	893b      	ldrh	r3, [r7, #8]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f831 	bl	8001b1c <I2C_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	80002000 	.word	0x80002000

08001ad4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d103      	bne.n	8001af2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d007      	beq.n	8001b10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	619a      	str	r2, [r3, #24]
  }
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b2c:	e022      	b.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d01e      	beq.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b36:	f7ff f9eb 	bl	8000f10 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d302      	bcc.n	8001b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d113      	bne.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f043 0220 	orr.w	r2, r3, #32
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e00f      	b.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d0cd      	beq.n	8001b2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ba8:	e02c      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f870 	bl	8001c94 <I2C_IsErrorOccurred>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e02a      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d01e      	beq.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff f9a3 	bl	8000f10 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d113      	bne.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f043 0220 	orr.w	r2, r3, #32
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e007      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d1cb      	bne.n	8001baa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c28:	e028      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f830 	bl	8001c94 <I2C_IsErrorOccurred>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e026      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7ff f967 	bl	8000f10 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d113      	bne.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e007      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d1cf      	bne.n	8001c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d075      	beq.n	8001dac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cc8:	e056      	b.n	8001d78 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d052      	beq.n	8001d78 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cd2:	f7ff f91d 	bl	8000f10 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d302      	bcc.n	8001ce8 <I2C_IsErrorOccurred+0x54>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d147      	bne.n	8001d78 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0a:	d12e      	bne.n	8001d6a <I2C_IsErrorOccurred+0xd6>
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d12:	d02a      	beq.n	8001d6a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d027      	beq.n	8001d6a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d28:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d2a:	f7ff f8f1 	bl	8000f10 <HAL_GetTick>
 8001d2e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d30:	e01b      	b.n	8001d6a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d32:	f7ff f8ed 	bl	8000f10 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b19      	cmp	r3, #25
 8001d3e:	d914      	bls.n	8001d6a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d1dc      	bne.n	8001d32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d003      	beq.n	8001d8e <I2C_IsErrorOccurred+0xfa>
 8001d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d09d      	beq.n	8001cca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00b      	beq.n	8001df8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01c      	beq.n	8001e5c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fe56 	bl	8001ad4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <I2C_IsErrorOccurred+0x1d4>)
 8001e34:	400b      	ands	r3, r1
 8001e36:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	fe00e800 	.word	0xfe00e800

08001e6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	817b      	strh	r3, [r7, #10]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e7e:	897b      	ldrh	r3, [r7, #10]
 8001e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e8c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e9a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	0d5b      	lsrs	r3, r3, #21
 8001ea6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <I2C_TransferConfig+0x60>)
 8001eac:	430b      	orrs	r3, r1
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	ea02 0103 	and.w	r1, r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	03ff63ff 	.word	0x03ff63ff

08001ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d138      	bne.n	8001f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e032      	b.n	8001f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	; 0x24
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e000      	b.n	8001f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d139      	bne.n	8001ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e033      	b.n	8001ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2224      	movs	r2, #36	; 0x24
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e291      	b.n	800255a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8087 	beq.w	8002152 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002044:	4b96      	ldr	r3, [pc, #600]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b04      	cmp	r3, #4
 800204e:	d00c      	beq.n	800206a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002050:	4b93      	ldr	r3, [pc, #588]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d112      	bne.n	8002082 <HAL_RCC_OscConfig+0x62>
 800205c:	4b90      	ldr	r3, [pc, #576]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002068:	d10b      	bne.n	8002082 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206a:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d06c      	beq.n	8002150 <HAL_RCC_OscConfig+0x130>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d168      	bne.n	8002150 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e26b      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x7a>
 800208c:	4b84      	ldr	r3, [pc, #528]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a83      	ldr	r2, [pc, #524]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e02e      	b.n	80020f8 <HAL_RCC_OscConfig+0xd8>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x9c>
 80020a2:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7e      	ldr	r2, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7b      	ldr	r2, [pc, #492]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e01d      	b.n	80020f8 <HAL_RCC_OscConfig+0xd8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020c6:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a72      	ldr	r2, [pc, #456]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0xd8>
 80020e0:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80020f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7fe ff06 	bl	8000f10 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7fe ff02 	bl	8000f10 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e21f      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0xe8>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe fef2 	bl	8000f10 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7fe feee 	bl	8000f10 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e20b      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	4b57      	ldr	r3, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x110>
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d069      	beq.n	8002232 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800215e:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d11c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x190>
 8002176:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_RCC_OscConfig+0x17a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e1df      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	493d      	ldr	r1, [pc, #244]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	e040      	b.n	8002232 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d023      	beq.n	8002200 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b8:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a38      	ldr	r2, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fea4 	bl	8000f10 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7fe fea0 	bl	8000f10 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1bd      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4929      	ldr	r1, [pc, #164]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
 80021fe:	e018      	b.n	8002232 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fe80 	bl	8000f10 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002214:	f7fe fe7c 	bl	8000f10 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e199      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d038      	beq.n	80022b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d019      	beq.n	800227a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7fe fe5d 	bl	8000f10 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225a:	f7fe fe59 	bl	8000f10 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e176      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800226e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x23a>
 8002278:	e01a      	b.n	80022b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 800227c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_RCC_OscConfig+0x280>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7fe fe43 	bl	8000f10 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228e:	f7fe fe3f 	bl	8000f10 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d903      	bls.n	80022a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e15c      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
 80022a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b91      	ldr	r3, [pc, #580]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ee      	bne.n	800228e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a4 	beq.w	8002406 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a87      	ldr	r2, [pc, #540]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b85      	ldr	r3, [pc, #532]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e6:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <HAL_RCC_OscConfig+0x4d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022f2:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_RCC_OscConfig+0x4d0>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fe07 	bl	8000f10 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7fe fe03 	bl	8000f10 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e120      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002318:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x4d0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x31a>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	e02d      	b.n	8002396 <HAL_RCC_OscConfig+0x376>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x33c>
 8002342:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6713      	str	r3, [r2, #112]	; 0x70
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	e01c      	b.n	8002396 <HAL_RCC_OscConfig+0x376>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x35e>
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a60      	ldr	r2, [pc, #384]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6713      	str	r3, [r2, #112]	; 0x70
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x376>
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	4b58      	ldr	r3, [pc, #352]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a57      	ldr	r2, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7fe fdb7 	bl	8000f10 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fdb3 	bl	8000f10 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0ce      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCC_OscConfig+0x386>
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7fe fda1 	bl	8000f10 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe fd9d 	bl	8000f10 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80a4 	beq.w	8002558 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d06b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d149      	bne.n	80024b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800242a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fd6e 	bl	8000f10 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fd6a 	bl	8000f10 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e087      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	019b      	lsls	r3, r3, #6
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	3b01      	subs	r3, #1
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	4313      	orrs	r3, r2
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800247e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002482:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fd3e 	bl	8000f10 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fd3a 	bl	8000f10 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e057      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x478>
 80024b6:	e04f      	b.n	8002558 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80024be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd24 	bl	8000f10 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fd20 	bl	8000f10 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e03d      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x4ac>
 80024ea:	e035      	b.n	8002558 <HAL_RCC_OscConfig+0x538>
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x544>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d028      	beq.n	8002554 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d121      	bne.n	8002554 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d11a      	bne.n	8002554 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800252a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800252c:	4293      	cmp	r3, r2
 800252e:	d111      	bne.n	8002554 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d107      	bne.n	8002554 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800

08002568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0d0      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 020f 	bic.w	r2, r3, #15
 8002596:	4965      	ldr	r1, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80025ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d040      	beq.n	800268c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e073      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06b      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4936      	ldr	r1, [pc, #216]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fc58 	bl	8000f10 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7fe fc54 	bl	8000f10 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e053      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d210      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 020f 	bic.w	r2, r3, #15
 80026a2:	4922      	ldr	r1, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1cc>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1d0>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1d4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fbb4 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00
 8002730:	40023800 	.word	0x40023800
 8002734:	08004c18 	.word	0x08004c18
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b094      	sub	sp, #80	; 0x50
 8002746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
 800274c:	2300      	movs	r3, #0
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002750:	2300      	movs	r3, #0
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d00d      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x40>
 8002764:	2b08      	cmp	r3, #8
 8002766:	f200 80e1 	bhi.w	800292c <HAL_RCC_GetSysClockFreq+0x1ec>
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x34>
 800276e:	2b04      	cmp	r3, #4
 8002770:	d003      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x3a>
 8002772:	e0db      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b73      	ldr	r3, [pc, #460]	; (8002944 <HAL_RCC_GetSysClockFreq+0x204>)
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002778:	e0db      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_GetSysClockFreq+0x208>)
 800277c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800277e:	e0d8      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002796:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	2200      	movs	r2, #0
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
 80027ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027b2:	4622      	mov	r2, r4
 80027b4:	462b      	mov	r3, r5
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c4:	0150      	lsls	r0, r2, #5
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4621      	mov	r1, r4
 80027cc:	1a51      	subs	r1, r2, r1
 80027ce:	6139      	str	r1, [r7, #16]
 80027d0:	4629      	mov	r1, r5
 80027d2:	eb63 0301 	sbc.w	r3, r3, r1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e4:	4659      	mov	r1, fp
 80027e6:	018b      	lsls	r3, r1, #6
 80027e8:	4651      	mov	r1, sl
 80027ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ee:	4651      	mov	r1, sl
 80027f0:	018a      	lsls	r2, r1, #6
 80027f2:	4651      	mov	r1, sl
 80027f4:	ebb2 0801 	subs.w	r8, r2, r1
 80027f8:	4659      	mov	r1, fp
 80027fa:	eb63 0901 	sbc.w	r9, r3, r1
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002812:	4690      	mov	r8, r2
 8002814:	4699      	mov	r9, r3
 8002816:	4623      	mov	r3, r4
 8002818:	eb18 0303 	adds.w	r3, r8, r3
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	462b      	mov	r3, r5
 8002820:	eb49 0303 	adc.w	r3, r9, r3
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002832:	4629      	mov	r1, r5
 8002834:	024b      	lsls	r3, r1, #9
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283c:	4621      	mov	r1, r4
 800283e:	024a      	lsls	r2, r1, #9
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002846:	2200      	movs	r2, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
 800284a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800284c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002850:	f7fd fd2e 	bl	80002b0 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	e058      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	2200      	movs	r2, #0
 8002866:	4618      	mov	r0, r3
 8002868:	4611      	mov	r1, r2
 800286a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800286e:	623b      	str	r3, [r7, #32]
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
 8002874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	0159      	lsls	r1, r3, #5
 8002886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288a:	0150      	lsls	r0, r2, #5
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4641      	mov	r1, r8
 8002892:	ebb2 0a01 	subs.w	sl, r2, r1
 8002896:	4649      	mov	r1, r9
 8002898:	eb63 0b01 	sbc.w	fp, r3, r1
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b0:	ebb2 040a 	subs.w	r4, r2, sl
 80028b4:	eb63 050b 	sbc.w	r5, r3, fp
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	00eb      	lsls	r3, r5, #3
 80028c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c6:	00e2      	lsls	r2, r4, #3
 80028c8:	4614      	mov	r4, r2
 80028ca:	461d      	mov	r5, r3
 80028cc:	4643      	mov	r3, r8
 80028ce:	18e3      	adds	r3, r4, r3
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	464b      	mov	r3, r9
 80028d4:	eb45 0303 	adc.w	r3, r5, r3
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e6:	4629      	mov	r1, r5
 80028e8:	028b      	lsls	r3, r1, #10
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f0:	4621      	mov	r1, r4
 80028f2:	028a      	lsls	r2, r1, #10
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fa:	2200      	movs	r2, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	61fa      	str	r2, [r7, #28]
 8002900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002904:	f7fd fcd4 	bl	80002b0 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_GetSysClockFreq+0x200>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetSysClockFreq+0x204>)
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002934:	4618      	mov	r0, r3
 8002936:	3750      	adds	r7, #80	; 0x50
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	00f42400 	.word	0x00f42400
 8002948:	007a1200 	.word	0x007a1200

0800294c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_GetHCLKFreq+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff0 	bl	800294c <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0a9b      	lsrs	r3, r3, #10
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	08004c28 	.word	0x08004c28

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffdc 	bl	800294c <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0b5b      	lsrs	r3, r3, #13
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08004c28 	.word	0x08004c28

080029b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d012      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029dc:	4b69      	ldr	r3, [pc, #420]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a68      	ldr	r2, [pc, #416]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029e6:	6093      	str	r3, [r2, #8]
 80029e8:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	4964      	ldr	r1, [pc, #400]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d017      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	4959      	ldr	r1, [pc, #356]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d017      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	494a      	ldr	r1, [pc, #296]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a68:	d101      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 808b 	beq.w	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a39      	ldr	r2, [pc, #228]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa4:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab0:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe fa28 	bl	8000f10 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fa24 	bl	8000f10 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e357      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d035      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d02e      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b22:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d114      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe f9ec 	bl	8000f10 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f9e8 	bl	8000f10 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e319      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	4901      	ldr	r1, [pc, #4]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
 8002b82:	e00b      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	0ffffcff 	.word	0x0ffffcff
 8002b90:	4baa      	ldr	r3, [pc, #680]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4aa9      	ldr	r2, [pc, #676]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b9a:	6093      	str	r3, [r2, #8]
 8002b9c:	4ba7      	ldr	r3, [pc, #668]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	49a4      	ldr	r1, [pc, #656]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d010      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bba:	4ba0      	ldr	r3, [pc, #640]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc0:	4a9e      	ldr	r2, [pc, #632]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bca:	4b9c      	ldr	r3, [pc, #624]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	4999      	ldr	r1, [pc, #612]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be8:	4b94      	ldr	r3, [pc, #592]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf6:	4991      	ldr	r1, [pc, #580]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c0a:	4b8c      	ldr	r3, [pc, #560]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c18:	4988      	ldr	r1, [pc, #544]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c2c:	4b83      	ldr	r3, [pc, #524]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3a:	4980      	ldr	r1, [pc, #512]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c4e:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4977      	ldr	r1, [pc, #476]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c70:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	496f      	ldr	r1, [pc, #444]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c92:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f023 020c 	bic.w	r2, r3, #12
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	4966      	ldr	r1, [pc, #408]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	495e      	ldr	r1, [pc, #376]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd6:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce4:	4955      	ldr	r1, [pc, #340]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	494d      	ldr	r1, [pc, #308]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d1a:	4b48      	ldr	r3, [pc, #288]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	4944      	ldr	r1, [pc, #272]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	493c      	ldr	r1, [pc, #240]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6c:	4933      	ldr	r1, [pc, #204]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d80:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d8e:	492b      	ldr	r1, [pc, #172]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d011      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db0:	4922      	ldr	r1, [pc, #136]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	4912      	ldr	r1, [pc, #72]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e04:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e14:	4909      	ldr	r1, [pc, #36]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d006      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80d9 	beq.w	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a01      	ldr	r2, [pc, #4]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e3a:	e001      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e42:	f7fe f865 	bl	8000f10 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e4a:	f7fe f861 	bl	8000f10 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e194      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d021      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e7c:	4b64      	ldr	r3, [pc, #400]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e8a:	4b61      	ldr	r3, [pc, #388]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e90:	0e1b      	lsrs	r3, r3, #24
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	019a      	lsls	r2, r3, #6
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	071b      	lsls	r3, r3, #28
 8002eb0:	4957      	ldr	r1, [pc, #348]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d02e      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee2:	d129      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef8:	0f1b      	lsrs	r3, r3, #28
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	019a      	lsls	r2, r3, #6
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	071b      	lsls	r3, r3, #28
 8002f18:	493d      	ldr	r1, [pc, #244]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f20:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f26:	f023 021f 	bic.w	r2, r3, #31
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	4937      	ldr	r1, [pc, #220]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01d      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	0e1b      	lsrs	r3, r3, #24
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f52:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	0f1b      	lsrs	r3, r3, #28
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	019a      	lsls	r2, r3, #6
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	071b      	lsls	r3, r3, #28
 8002f78:	4925      	ldr	r1, [pc, #148]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d011      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	019a      	lsls	r2, r3, #6
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	071b      	lsls	r3, r3, #28
 8002fa8:	4919      	ldr	r1, [pc, #100]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a16      	ldr	r2, [pc, #88]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fd ffa8 	bl	8000f10 <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc4:	f7fd ffa4 	bl	8000f10 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0d7      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 80cd 	bne.w	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff6:	f7fd ff8b 	bl	8000f10 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ffe:	f7fd ff87 	bl	8000f10 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	; 0x64
 800300a:	d903      	bls.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0ba      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003010:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003014:	4b5e      	ldr	r3, [pc, #376]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800301c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003020:	d0ed      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02e      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d12a      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800304a:	4b51      	ldr	r3, [pc, #324]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003058:	4b4d      	ldr	r3, [pc, #308]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	0f1b      	lsrs	r3, r3, #28
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	019a      	lsls	r2, r3, #6
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	041b      	lsls	r3, r3, #16
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	071b      	lsls	r3, r3, #28
 800307e:	4944      	ldr	r1, [pc, #272]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003086:	4b42      	ldr	r3, [pc, #264]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	493d      	ldr	r1, [pc, #244]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d022      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b4:	d11d      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030b6:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	0e1b      	lsrs	r3, r3, #24
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	0f1b      	lsrs	r3, r3, #28
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	019a      	lsls	r2, r3, #6
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	431a      	orrs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	071b      	lsls	r3, r3, #28
 80030ea:	4929      	ldr	r1, [pc, #164]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d028      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	0e1b      	lsrs	r3, r3, #24
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	0c1b      	lsrs	r3, r3, #16
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	019a      	lsls	r2, r3, #6
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	4917      	ldr	r1, [pc, #92]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800313c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4911      	ldr	r1, [pc, #68]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315c:	f7fd fed8 	bl	8000f10 <HAL_GetTick>
 8003160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003164:	f7fd fed4 	bl	8000f10 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e007      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003182:	d1ef      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e040      	b.n	8003228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fdd0 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8c0 	bl	8003358 <UART_SetConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e022      	b.n	8003228 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fb18 	bl	8003820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb9f 	bl	8003964 <UART_CheckIdleState>
 8003226:	4603      	mov	r3, r0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003244:	2b20      	cmp	r3, #32
 8003246:	f040 8081 	bne.w	800334c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_UART_Transmit+0x26>
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e079      	b.n	800334e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_UART_Transmit+0x38>
 8003264:	2302      	movs	r3, #2
 8003266:	e072      	b.n	800334e <HAL_UART_Transmit+0x11e>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2221      	movs	r2, #33	; 0x21
 800327c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327e:	f7fd fe47 	bl	8000f10 <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d108      	bne.n	80032b0 <HAL_UART_Transmit+0x80>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e003      	b.n	80032b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032c0:	e02c      	b.n	800331c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb7c 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e038      	b.n	800334e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3302      	adds	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e007      	b.n	800330a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1cc      	bne.n	80032c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2200      	movs	r2, #0
 8003330:	2140      	movs	r1, #64	; 0x40
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fb49 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e005      	b.n	800334e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4ba6      	ldr	r3, [pc, #664]	; (800361c <UART_SetConfig+0x2c4>)
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	6979      	ldr	r1, [r7, #20]
 800338c:	430b      	orrs	r3, r1
 800338e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a94      	ldr	r2, [pc, #592]	; (8003620 <UART_SetConfig+0x2c8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d120      	bne.n	8003416 <UART_SetConfig+0xbe>
 80033d4:	4b93      	ldr	r3, [pc, #588]	; (8003624 <UART_SetConfig+0x2cc>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d816      	bhi.n	8003410 <UART_SetConfig+0xb8>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0x90>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003405 	.word	0x08003405
 80033f0:	080033ff 	.word	0x080033ff
 80033f4:	0800340b 	.word	0x0800340b
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e150      	b.n	80036a0 <UART_SetConfig+0x348>
 80033fe:	2302      	movs	r3, #2
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e14d      	b.n	80036a0 <UART_SetConfig+0x348>
 8003404:	2304      	movs	r3, #4
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e14a      	b.n	80036a0 <UART_SetConfig+0x348>
 800340a:	2308      	movs	r3, #8
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e147      	b.n	80036a0 <UART_SetConfig+0x348>
 8003410:	2310      	movs	r3, #16
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e144      	b.n	80036a0 <UART_SetConfig+0x348>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a83      	ldr	r2, [pc, #524]	; (8003628 <UART_SetConfig+0x2d0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d132      	bne.n	8003486 <UART_SetConfig+0x12e>
 8003420:	4b80      	ldr	r3, [pc, #512]	; (8003624 <UART_SetConfig+0x2cc>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d828      	bhi.n	8003480 <UART_SetConfig+0x128>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0xdc>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003469 	.word	0x08003469
 8003438:	08003481 	.word	0x08003481
 800343c:	08003481 	.word	0x08003481
 8003440:	08003481 	.word	0x08003481
 8003444:	08003475 	.word	0x08003475
 8003448:	08003481 	.word	0x08003481
 800344c:	08003481 	.word	0x08003481
 8003450:	08003481 	.word	0x08003481
 8003454:	0800346f 	.word	0x0800346f
 8003458:	08003481 	.word	0x08003481
 800345c:	08003481 	.word	0x08003481
 8003460:	08003481 	.word	0x08003481
 8003464:	0800347b 	.word	0x0800347b
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e118      	b.n	80036a0 <UART_SetConfig+0x348>
 800346e:	2302      	movs	r3, #2
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e115      	b.n	80036a0 <UART_SetConfig+0x348>
 8003474:	2304      	movs	r3, #4
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e112      	b.n	80036a0 <UART_SetConfig+0x348>
 800347a:	2308      	movs	r3, #8
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e10f      	b.n	80036a0 <UART_SetConfig+0x348>
 8003480:	2310      	movs	r3, #16
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e10c      	b.n	80036a0 <UART_SetConfig+0x348>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a68      	ldr	r2, [pc, #416]	; (800362c <UART_SetConfig+0x2d4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d120      	bne.n	80034d2 <UART_SetConfig+0x17a>
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <UART_SetConfig+0x2cc>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800349a:	2b30      	cmp	r3, #48	; 0x30
 800349c:	d013      	beq.n	80034c6 <UART_SetConfig+0x16e>
 800349e:	2b30      	cmp	r3, #48	; 0x30
 80034a0:	d814      	bhi.n	80034cc <UART_SetConfig+0x174>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d009      	beq.n	80034ba <UART_SetConfig+0x162>
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d810      	bhi.n	80034cc <UART_SetConfig+0x174>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <UART_SetConfig+0x15c>
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d006      	beq.n	80034c0 <UART_SetConfig+0x168>
 80034b2:	e00b      	b.n	80034cc <UART_SetConfig+0x174>
 80034b4:	2300      	movs	r3, #0
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e0f2      	b.n	80036a0 <UART_SetConfig+0x348>
 80034ba:	2302      	movs	r3, #2
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e0ef      	b.n	80036a0 <UART_SetConfig+0x348>
 80034c0:	2304      	movs	r3, #4
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e0ec      	b.n	80036a0 <UART_SetConfig+0x348>
 80034c6:	2308      	movs	r3, #8
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e0e9      	b.n	80036a0 <UART_SetConfig+0x348>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e0e6      	b.n	80036a0 <UART_SetConfig+0x348>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a56      	ldr	r2, [pc, #344]	; (8003630 <UART_SetConfig+0x2d8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d120      	bne.n	800351e <UART_SetConfig+0x1c6>
 80034dc:	4b51      	ldr	r3, [pc, #324]	; (8003624 <UART_SetConfig+0x2cc>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034e6:	2bc0      	cmp	r3, #192	; 0xc0
 80034e8:	d013      	beq.n	8003512 <UART_SetConfig+0x1ba>
 80034ea:	2bc0      	cmp	r3, #192	; 0xc0
 80034ec:	d814      	bhi.n	8003518 <UART_SetConfig+0x1c0>
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d009      	beq.n	8003506 <UART_SetConfig+0x1ae>
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d810      	bhi.n	8003518 <UART_SetConfig+0x1c0>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <UART_SetConfig+0x1a8>
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d006      	beq.n	800350c <UART_SetConfig+0x1b4>
 80034fe:	e00b      	b.n	8003518 <UART_SetConfig+0x1c0>
 8003500:	2300      	movs	r3, #0
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e0cc      	b.n	80036a0 <UART_SetConfig+0x348>
 8003506:	2302      	movs	r3, #2
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e0c9      	b.n	80036a0 <UART_SetConfig+0x348>
 800350c:	2304      	movs	r3, #4
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e0c6      	b.n	80036a0 <UART_SetConfig+0x348>
 8003512:	2308      	movs	r3, #8
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e0c3      	b.n	80036a0 <UART_SetConfig+0x348>
 8003518:	2310      	movs	r3, #16
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e0c0      	b.n	80036a0 <UART_SetConfig+0x348>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a44      	ldr	r2, [pc, #272]	; (8003634 <UART_SetConfig+0x2dc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d125      	bne.n	8003574 <UART_SetConfig+0x21c>
 8003528:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <UART_SetConfig+0x2cc>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003536:	d017      	beq.n	8003568 <UART_SetConfig+0x210>
 8003538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800353c:	d817      	bhi.n	800356e <UART_SetConfig+0x216>
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d00b      	beq.n	800355c <UART_SetConfig+0x204>
 8003544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003548:	d811      	bhi.n	800356e <UART_SetConfig+0x216>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <UART_SetConfig+0x1fe>
 800354e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003552:	d006      	beq.n	8003562 <UART_SetConfig+0x20a>
 8003554:	e00b      	b.n	800356e <UART_SetConfig+0x216>
 8003556:	2300      	movs	r3, #0
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e0a1      	b.n	80036a0 <UART_SetConfig+0x348>
 800355c:	2302      	movs	r3, #2
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e09e      	b.n	80036a0 <UART_SetConfig+0x348>
 8003562:	2304      	movs	r3, #4
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e09b      	b.n	80036a0 <UART_SetConfig+0x348>
 8003568:	2308      	movs	r3, #8
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e098      	b.n	80036a0 <UART_SetConfig+0x348>
 800356e:	2310      	movs	r3, #16
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e095      	b.n	80036a0 <UART_SetConfig+0x348>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <UART_SetConfig+0x2e0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d125      	bne.n	80035ca <UART_SetConfig+0x272>
 800357e:	4b29      	ldr	r3, [pc, #164]	; (8003624 <UART_SetConfig+0x2cc>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800358c:	d017      	beq.n	80035be <UART_SetConfig+0x266>
 800358e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003592:	d817      	bhi.n	80035c4 <UART_SetConfig+0x26c>
 8003594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003598:	d00b      	beq.n	80035b2 <UART_SetConfig+0x25a>
 800359a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359e:	d811      	bhi.n	80035c4 <UART_SetConfig+0x26c>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <UART_SetConfig+0x254>
 80035a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a8:	d006      	beq.n	80035b8 <UART_SetConfig+0x260>
 80035aa:	e00b      	b.n	80035c4 <UART_SetConfig+0x26c>
 80035ac:	2301      	movs	r3, #1
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e076      	b.n	80036a0 <UART_SetConfig+0x348>
 80035b2:	2302      	movs	r3, #2
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e073      	b.n	80036a0 <UART_SetConfig+0x348>
 80035b8:	2304      	movs	r3, #4
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e070      	b.n	80036a0 <UART_SetConfig+0x348>
 80035be:	2308      	movs	r3, #8
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e06d      	b.n	80036a0 <UART_SetConfig+0x348>
 80035c4:	2310      	movs	r3, #16
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e06a      	b.n	80036a0 <UART_SetConfig+0x348>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1b      	ldr	r2, [pc, #108]	; (800363c <UART_SetConfig+0x2e4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d138      	bne.n	8003646 <UART_SetConfig+0x2ee>
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <UART_SetConfig+0x2cc>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035e2:	d017      	beq.n	8003614 <UART_SetConfig+0x2bc>
 80035e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035e8:	d82a      	bhi.n	8003640 <UART_SetConfig+0x2e8>
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ee:	d00b      	beq.n	8003608 <UART_SetConfig+0x2b0>
 80035f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f4:	d824      	bhi.n	8003640 <UART_SetConfig+0x2e8>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <UART_SetConfig+0x2aa>
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fe:	d006      	beq.n	800360e <UART_SetConfig+0x2b6>
 8003600:	e01e      	b.n	8003640 <UART_SetConfig+0x2e8>
 8003602:	2300      	movs	r3, #0
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e04b      	b.n	80036a0 <UART_SetConfig+0x348>
 8003608:	2302      	movs	r3, #2
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e048      	b.n	80036a0 <UART_SetConfig+0x348>
 800360e:	2304      	movs	r3, #4
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e045      	b.n	80036a0 <UART_SetConfig+0x348>
 8003614:	2308      	movs	r3, #8
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e042      	b.n	80036a0 <UART_SetConfig+0x348>
 800361a:	bf00      	nop
 800361c:	efff69f3 	.word	0xefff69f3
 8003620:	40011000 	.word	0x40011000
 8003624:	40023800 	.word	0x40023800
 8003628:	40004400 	.word	0x40004400
 800362c:	40004800 	.word	0x40004800
 8003630:	40004c00 	.word	0x40004c00
 8003634:	40005000 	.word	0x40005000
 8003638:	40011400 	.word	0x40011400
 800363c:	40007800 	.word	0x40007800
 8003640:	2310      	movs	r3, #16
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e02c      	b.n	80036a0 <UART_SetConfig+0x348>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a72      	ldr	r2, [pc, #456]	; (8003814 <UART_SetConfig+0x4bc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d125      	bne.n	800369c <UART_SetConfig+0x344>
 8003650:	4b71      	ldr	r3, [pc, #452]	; (8003818 <UART_SetConfig+0x4c0>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800365a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800365e:	d017      	beq.n	8003690 <UART_SetConfig+0x338>
 8003660:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003664:	d817      	bhi.n	8003696 <UART_SetConfig+0x33e>
 8003666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366a:	d00b      	beq.n	8003684 <UART_SetConfig+0x32c>
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003670:	d811      	bhi.n	8003696 <UART_SetConfig+0x33e>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <UART_SetConfig+0x326>
 8003676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367a:	d006      	beq.n	800368a <UART_SetConfig+0x332>
 800367c:	e00b      	b.n	8003696 <UART_SetConfig+0x33e>
 800367e:	2300      	movs	r3, #0
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e00d      	b.n	80036a0 <UART_SetConfig+0x348>
 8003684:	2302      	movs	r3, #2
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e00a      	b.n	80036a0 <UART_SetConfig+0x348>
 800368a:	2304      	movs	r3, #4
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e007      	b.n	80036a0 <UART_SetConfig+0x348>
 8003690:	2308      	movs	r3, #8
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e004      	b.n	80036a0 <UART_SetConfig+0x348>
 8003696:	2310      	movs	r3, #16
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e001      	b.n	80036a0 <UART_SetConfig+0x348>
 800369c:	2310      	movs	r3, #16
 800369e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a8:	d15b      	bne.n	8003762 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036aa:	7ffb      	ldrb	r3, [r7, #31]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d828      	bhi.n	8003702 <UART_SetConfig+0x3aa>
 80036b0:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0x360>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036ed 	.word	0x080036ed
 80036c4:	08003703 	.word	0x08003703
 80036c8:	080036f3 	.word	0x080036f3
 80036cc:	08003703 	.word	0x08003703
 80036d0:	08003703 	.word	0x08003703
 80036d4:	08003703 	.word	0x08003703
 80036d8:	080036fb 	.word	0x080036fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036dc:	f7ff f942 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 80036e0:	61b8      	str	r0, [r7, #24]
        break;
 80036e2:	e013      	b.n	800370c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e4:	f7ff f952 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e00f      	b.n	800370c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ec:	4b4b      	ldr	r3, [pc, #300]	; (800381c <UART_SetConfig+0x4c4>)
 80036ee:	61bb      	str	r3, [r7, #24]
        break;
 80036f0:	e00c      	b.n	800370c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f2:	f7ff f825 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80036f6:	61b8      	str	r0, [r7, #24]
        break;
 80036f8:	e008      	b.n	800370c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fe:	61bb      	str	r3, [r7, #24]
        break;
 8003700:	e004      	b.n	800370c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	77bb      	strb	r3, [r7, #30]
        break;
 800370a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d074      	beq.n	80037fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b0f      	cmp	r3, #15
 800372c:	d916      	bls.n	800375c <UART_SetConfig+0x404>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003734:	d212      	bcs.n	800375c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f023 030f 	bic.w	r3, r3, #15
 800373e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	b29a      	uxth	r2, r3
 800374c:	89fb      	ldrh	r3, [r7, #14]
 800374e:	4313      	orrs	r3, r2
 8003750:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	89fa      	ldrh	r2, [r7, #14]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e04f      	b.n	80037fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77bb      	strb	r3, [r7, #30]
 8003760:	e04c      	b.n	80037fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003762:	7ffb      	ldrb	r3, [r7, #31]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d828      	bhi.n	80037ba <UART_SetConfig+0x462>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0x418>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7ff f8e6 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8003798:	61b8      	str	r0, [r7, #24]
        break;
 800379a:	e013      	b.n	80037c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7ff f8f6 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 80037a0:	61b8      	str	r0, [r7, #24]
        break;
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <UART_SetConfig+0x4c4>)
 80037a6:	61bb      	str	r3, [r7, #24]
        break;
 80037a8:	e00c      	b.n	80037c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe ffc9 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80037ae:	61b8      	str	r0, [r7, #24]
        break;
 80037b0:	e008      	b.n	80037c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b6:	61bb      	str	r3, [r7, #24]
        break;
 80037b8:	e004      	b.n	80037c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	77bb      	strb	r3, [r7, #30]
        break;
 80037c2:	bf00      	nop
    }

    if (pclk != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	085a      	lsrs	r2, r3, #1
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	441a      	add	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b0f      	cmp	r3, #15
 80037e2:	d909      	bls.n	80037f8 <UART_SetConfig+0x4a0>
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ea:	d205      	bcs.n	80037f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	e001      	b.n	80037fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003808:	7fbb      	ldrb	r3, [r7, #30]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40007c00 	.word	0x40007c00
 8003818:	40023800 	.word	0x40023800
 800381c:	00f42400 	.word	0x00f42400

08003820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01a      	beq.n	8003936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800391e:	d10a      	bne.n	8003936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003974:	f7fd facc 	bl	8000f10 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d10e      	bne.n	80039a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f817 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e00d      	b.n	80039c2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b09c      	sub	sp, #112	; 0x70
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	e0a5      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	f000 80a1 	beq.w	8003b28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e6:	f7fd fa93 	bl	8000f10 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <UART_WaitOnFlagUntilTimeout+0x32>
 80039f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d13e      	bne.n	8003a7a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a10:	667b      	str	r3, [r7, #100]	; 0x64
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e6      	bne.n	80039fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	663b      	str	r3, [r7, #96]	; 0x60
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e5      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e067      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d04f      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a96:	d147      	bne.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003af4:	623a      	str	r2, [r7, #32]
 8003af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69f9      	ldr	r1, [r7, #28]
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e010      	b.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	f43f af4a 	beq.w	80039dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3770      	adds	r7, #112	; 0x70
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <__errno>:
 8003b54:	4b01      	ldr	r3, [pc, #4]	; (8003b5c <__errno+0x8>)
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	2000000c 	.word	0x2000000c

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	; (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	; (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	; (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	; (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f001 f824 	bl	8004bc0 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08004cd0 	.word	0x08004cd0
 8003b9c:	08004cd0 	.word	0x08004cd0
 8003ba0:	08004cd0 	.word	0x08004cd0
 8003ba4:	08004cd4 	.word	0x08004cd4

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <iprintf>:
 8003bb8:	b40f      	push	{r0, r1, r2, r3}
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <iprintf+0x2c>)
 8003bbc:	b513      	push	{r0, r1, r4, lr}
 8003bbe:	681c      	ldr	r4, [r3, #0]
 8003bc0:	b124      	cbz	r4, 8003bcc <iprintf+0x14>
 8003bc2:	69a3      	ldr	r3, [r4, #24]
 8003bc4:	b913      	cbnz	r3, 8003bcc <iprintf+0x14>
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 fa5e 	bl	8004088 <__sinit>
 8003bcc:	ab05      	add	r3, sp, #20
 8003bce:	9a04      	ldr	r2, [sp, #16]
 8003bd0:	68a1      	ldr	r1, [r4, #8]
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 fc67 	bl	80044a8 <_vfiprintf_r>
 8003bda:	b002      	add	sp, #8
 8003bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be0:	b004      	add	sp, #16
 8003be2:	4770      	bx	lr
 8003be4:	2000000c 	.word	0x2000000c

08003be8 <_puts_r>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	460e      	mov	r6, r1
 8003bec:	4605      	mov	r5, r0
 8003bee:	b118      	cbz	r0, 8003bf8 <_puts_r+0x10>
 8003bf0:	6983      	ldr	r3, [r0, #24]
 8003bf2:	b90b      	cbnz	r3, 8003bf8 <_puts_r+0x10>
 8003bf4:	f000 fa48 	bl	8004088 <__sinit>
 8003bf8:	69ab      	ldr	r3, [r5, #24]
 8003bfa:	68ac      	ldr	r4, [r5, #8]
 8003bfc:	b913      	cbnz	r3, 8003c04 <_puts_r+0x1c>
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f000 fa42 	bl	8004088 <__sinit>
 8003c04:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <_puts_r+0xd0>)
 8003c06:	429c      	cmp	r4, r3
 8003c08:	d120      	bne.n	8003c4c <_puts_r+0x64>
 8003c0a:	686c      	ldr	r4, [r5, #4]
 8003c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c0e:	07db      	lsls	r3, r3, #31
 8003c10:	d405      	bmi.n	8003c1e <_puts_r+0x36>
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	0598      	lsls	r0, r3, #22
 8003c16:	d402      	bmi.n	8003c1e <_puts_r+0x36>
 8003c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c1a:	f000 fad3 	bl	80041c4 <__retarget_lock_acquire_recursive>
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	0719      	lsls	r1, r3, #28
 8003c22:	d51d      	bpl.n	8003c60 <_puts_r+0x78>
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	b1db      	cbz	r3, 8003c60 <_puts_r+0x78>
 8003c28:	3e01      	subs	r6, #1
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c30:	3b01      	subs	r3, #1
 8003c32:	60a3      	str	r3, [r4, #8]
 8003c34:	bb39      	cbnz	r1, 8003c86 <_puts_r+0x9e>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da38      	bge.n	8003cac <_puts_r+0xc4>
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	210a      	movs	r1, #10
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 f848 	bl	8003cd4 <__swbuf_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d011      	beq.n	8003c6c <_puts_r+0x84>
 8003c48:	250a      	movs	r5, #10
 8003c4a:	e011      	b.n	8003c70 <_puts_r+0x88>
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <_puts_r+0xd4>)
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	d101      	bne.n	8003c56 <_puts_r+0x6e>
 8003c52:	68ac      	ldr	r4, [r5, #8]
 8003c54:	e7da      	b.n	8003c0c <_puts_r+0x24>
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <_puts_r+0xd8>)
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf08      	it	eq
 8003c5c:	68ec      	ldreq	r4, [r5, #12]
 8003c5e:	e7d5      	b.n	8003c0c <_puts_r+0x24>
 8003c60:	4621      	mov	r1, r4
 8003c62:	4628      	mov	r0, r5
 8003c64:	f000 f888 	bl	8003d78 <__swsetup_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d0dd      	beq.n	8003c28 <_puts_r+0x40>
 8003c6c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c72:	07da      	lsls	r2, r3, #31
 8003c74:	d405      	bmi.n	8003c82 <_puts_r+0x9a>
 8003c76:	89a3      	ldrh	r3, [r4, #12]
 8003c78:	059b      	lsls	r3, r3, #22
 8003c7a:	d402      	bmi.n	8003c82 <_puts_r+0x9a>
 8003c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c7e:	f000 faa2 	bl	80041c6 <__retarget_lock_release_recursive>
 8003c82:	4628      	mov	r0, r5
 8003c84:	bd70      	pop	{r4, r5, r6, pc}
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da04      	bge.n	8003c94 <_puts_r+0xac>
 8003c8a:	69a2      	ldr	r2, [r4, #24]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	dc06      	bgt.n	8003c9e <_puts_r+0xb6>
 8003c90:	290a      	cmp	r1, #10
 8003c92:	d004      	beq.n	8003c9e <_puts_r+0xb6>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	6022      	str	r2, [r4, #0]
 8003c9a:	7019      	strb	r1, [r3, #0]
 8003c9c:	e7c5      	b.n	8003c2a <_puts_r+0x42>
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 f817 	bl	8003cd4 <__swbuf_r>
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d1bf      	bne.n	8003c2a <_puts_r+0x42>
 8003caa:	e7df      	b.n	8003c6c <_puts_r+0x84>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	250a      	movs	r5, #10
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	6022      	str	r2, [r4, #0]
 8003cb4:	701d      	strb	r5, [r3, #0]
 8003cb6:	e7db      	b.n	8003c70 <_puts_r+0x88>
 8003cb8:	08004c54 	.word	0x08004c54
 8003cbc:	08004c74 	.word	0x08004c74
 8003cc0:	08004c34 	.word	0x08004c34

08003cc4 <puts>:
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <puts+0xc>)
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f7ff bf8d 	b.w	8003be8 <_puts_r>
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c

08003cd4 <__swbuf_r>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	460e      	mov	r6, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	4605      	mov	r5, r0
 8003cdc:	b118      	cbz	r0, 8003ce6 <__swbuf_r+0x12>
 8003cde:	6983      	ldr	r3, [r0, #24]
 8003ce0:	b90b      	cbnz	r3, 8003ce6 <__swbuf_r+0x12>
 8003ce2:	f000 f9d1 	bl	8004088 <__sinit>
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <__swbuf_r+0x98>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d12b      	bne.n	8003d44 <__swbuf_r+0x70>
 8003cec:	686c      	ldr	r4, [r5, #4]
 8003cee:	69a3      	ldr	r3, [r4, #24]
 8003cf0:	60a3      	str	r3, [r4, #8]
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	071a      	lsls	r2, r3, #28
 8003cf6:	d52f      	bpl.n	8003d58 <__swbuf_r+0x84>
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	b36b      	cbz	r3, 8003d58 <__swbuf_r+0x84>
 8003cfc:	6923      	ldr	r3, [r4, #16]
 8003cfe:	6820      	ldr	r0, [r4, #0]
 8003d00:	1ac0      	subs	r0, r0, r3
 8003d02:	6963      	ldr	r3, [r4, #20]
 8003d04:	b2f6      	uxtb	r6, r6
 8003d06:	4283      	cmp	r3, r0
 8003d08:	4637      	mov	r7, r6
 8003d0a:	dc04      	bgt.n	8003d16 <__swbuf_r+0x42>
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f000 f926 	bl	8003f60 <_fflush_r>
 8003d14:	bb30      	cbnz	r0, 8003d64 <__swbuf_r+0x90>
 8003d16:	68a3      	ldr	r3, [r4, #8]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	60a3      	str	r3, [r4, #8]
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	6022      	str	r2, [r4, #0]
 8003d22:	701e      	strb	r6, [r3, #0]
 8003d24:	6963      	ldr	r3, [r4, #20]
 8003d26:	3001      	adds	r0, #1
 8003d28:	4283      	cmp	r3, r0
 8003d2a:	d004      	beq.n	8003d36 <__swbuf_r+0x62>
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	07db      	lsls	r3, r3, #31
 8003d30:	d506      	bpl.n	8003d40 <__swbuf_r+0x6c>
 8003d32:	2e0a      	cmp	r6, #10
 8003d34:	d104      	bne.n	8003d40 <__swbuf_r+0x6c>
 8003d36:	4621      	mov	r1, r4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 f911 	bl	8003f60 <_fflush_r>
 8003d3e:	b988      	cbnz	r0, 8003d64 <__swbuf_r+0x90>
 8003d40:	4638      	mov	r0, r7
 8003d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <__swbuf_r+0x9c>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	d101      	bne.n	8003d4e <__swbuf_r+0x7a>
 8003d4a:	68ac      	ldr	r4, [r5, #8]
 8003d4c:	e7cf      	b.n	8003cee <__swbuf_r+0x1a>
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <__swbuf_r+0xa0>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	bf08      	it	eq
 8003d54:	68ec      	ldreq	r4, [r5, #12]
 8003d56:	e7ca      	b.n	8003cee <__swbuf_r+0x1a>
 8003d58:	4621      	mov	r1, r4
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 f80c 	bl	8003d78 <__swsetup_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d0cb      	beq.n	8003cfc <__swbuf_r+0x28>
 8003d64:	f04f 37ff 	mov.w	r7, #4294967295
 8003d68:	e7ea      	b.n	8003d40 <__swbuf_r+0x6c>
 8003d6a:	bf00      	nop
 8003d6c:	08004c54 	.word	0x08004c54
 8003d70:	08004c74 	.word	0x08004c74
 8003d74:	08004c34 	.word	0x08004c34

08003d78 <__swsetup_r>:
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <__swsetup_r+0xcc>)
 8003d7a:	b570      	push	{r4, r5, r6, lr}
 8003d7c:	681d      	ldr	r5, [r3, #0]
 8003d7e:	4606      	mov	r6, r0
 8003d80:	460c      	mov	r4, r1
 8003d82:	b125      	cbz	r5, 8003d8e <__swsetup_r+0x16>
 8003d84:	69ab      	ldr	r3, [r5, #24]
 8003d86:	b913      	cbnz	r3, 8003d8e <__swsetup_r+0x16>
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 f97d 	bl	8004088 <__sinit>
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <__swsetup_r+0xd0>)
 8003d90:	429c      	cmp	r4, r3
 8003d92:	d10f      	bne.n	8003db4 <__swsetup_r+0x3c>
 8003d94:	686c      	ldr	r4, [r5, #4]
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d9c:	0719      	lsls	r1, r3, #28
 8003d9e:	d42c      	bmi.n	8003dfa <__swsetup_r+0x82>
 8003da0:	06dd      	lsls	r5, r3, #27
 8003da2:	d411      	bmi.n	8003dc8 <__swsetup_r+0x50>
 8003da4:	2309      	movs	r3, #9
 8003da6:	6033      	str	r3, [r6, #0]
 8003da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dac:	81a3      	strh	r3, [r4, #12]
 8003dae:	f04f 30ff 	mov.w	r0, #4294967295
 8003db2:	e03e      	b.n	8003e32 <__swsetup_r+0xba>
 8003db4:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <__swsetup_r+0xd4>)
 8003db6:	429c      	cmp	r4, r3
 8003db8:	d101      	bne.n	8003dbe <__swsetup_r+0x46>
 8003dba:	68ac      	ldr	r4, [r5, #8]
 8003dbc:	e7eb      	b.n	8003d96 <__swsetup_r+0x1e>
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <__swsetup_r+0xd8>)
 8003dc0:	429c      	cmp	r4, r3
 8003dc2:	bf08      	it	eq
 8003dc4:	68ec      	ldreq	r4, [r5, #12]
 8003dc6:	e7e6      	b.n	8003d96 <__swsetup_r+0x1e>
 8003dc8:	0758      	lsls	r0, r3, #29
 8003dca:	d512      	bpl.n	8003df2 <__swsetup_r+0x7a>
 8003dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dce:	b141      	cbz	r1, 8003de2 <__swsetup_r+0x6a>
 8003dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd4:	4299      	cmp	r1, r3
 8003dd6:	d002      	beq.n	8003dde <__swsetup_r+0x66>
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f000 fa5b 	bl	8004294 <_free_r>
 8003dde:	2300      	movs	r3, #0
 8003de0:	6363      	str	r3, [r4, #52]	; 0x34
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	2300      	movs	r3, #0
 8003dec:	6063      	str	r3, [r4, #4]
 8003dee:	6923      	ldr	r3, [r4, #16]
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	f043 0308 	orr.w	r3, r3, #8
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	b94b      	cbnz	r3, 8003e12 <__swsetup_r+0x9a>
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d003      	beq.n	8003e12 <__swsetup_r+0x9a>
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 fa01 	bl	8004214 <__smakebuf_r>
 8003e12:	89a0      	ldrh	r0, [r4, #12]
 8003e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e18:	f010 0301 	ands.w	r3, r0, #1
 8003e1c:	d00a      	beq.n	8003e34 <__swsetup_r+0xbc>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	6963      	ldr	r3, [r4, #20]
 8003e24:	425b      	negs	r3, r3
 8003e26:	61a3      	str	r3, [r4, #24]
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	b943      	cbnz	r3, 8003e3e <__swsetup_r+0xc6>
 8003e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e30:	d1ba      	bne.n	8003da8 <__swsetup_r+0x30>
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	0781      	lsls	r1, r0, #30
 8003e36:	bf58      	it	pl
 8003e38:	6963      	ldrpl	r3, [r4, #20]
 8003e3a:	60a3      	str	r3, [r4, #8]
 8003e3c:	e7f4      	b.n	8003e28 <__swsetup_r+0xb0>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e7f7      	b.n	8003e32 <__swsetup_r+0xba>
 8003e42:	bf00      	nop
 8003e44:	2000000c 	.word	0x2000000c
 8003e48:	08004c54 	.word	0x08004c54
 8003e4c:	08004c74 	.word	0x08004c74
 8003e50:	08004c34 	.word	0x08004c34

08003e54 <__sflush_r>:
 8003e54:	898a      	ldrh	r2, [r1, #12]
 8003e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	0710      	lsls	r0, r2, #28
 8003e5e:	460c      	mov	r4, r1
 8003e60:	d458      	bmi.n	8003f14 <__sflush_r+0xc0>
 8003e62:	684b      	ldr	r3, [r1, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dc05      	bgt.n	8003e74 <__sflush_r+0x20>
 8003e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	dc02      	bgt.n	8003e74 <__sflush_r+0x20>
 8003e6e:	2000      	movs	r0, #0
 8003e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e76:	2e00      	cmp	r6, #0
 8003e78:	d0f9      	beq.n	8003e6e <__sflush_r+0x1a>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e80:	682f      	ldr	r7, [r5, #0]
 8003e82:	602b      	str	r3, [r5, #0]
 8003e84:	d032      	beq.n	8003eec <__sflush_r+0x98>
 8003e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	075a      	lsls	r2, r3, #29
 8003e8c:	d505      	bpl.n	8003e9a <__sflush_r+0x46>
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	1ac0      	subs	r0, r0, r3
 8003e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e94:	b10b      	cbz	r3, 8003e9a <__sflush_r+0x46>
 8003e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e98:	1ac0      	subs	r0, r0, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ea0:	6a21      	ldr	r1, [r4, #32]
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	47b0      	blx	r6
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	d106      	bne.n	8003eba <__sflush_r+0x66>
 8003eac:	6829      	ldr	r1, [r5, #0]
 8003eae:	291d      	cmp	r1, #29
 8003eb0:	d82c      	bhi.n	8003f0c <__sflush_r+0xb8>
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <__sflush_r+0x108>)
 8003eb4:	40ca      	lsrs	r2, r1
 8003eb6:	07d6      	lsls	r6, r2, #31
 8003eb8:	d528      	bpl.n	8003f0c <__sflush_r+0xb8>
 8003eba:	2200      	movs	r2, #0
 8003ebc:	6062      	str	r2, [r4, #4]
 8003ebe:	04d9      	lsls	r1, r3, #19
 8003ec0:	6922      	ldr	r2, [r4, #16]
 8003ec2:	6022      	str	r2, [r4, #0]
 8003ec4:	d504      	bpl.n	8003ed0 <__sflush_r+0x7c>
 8003ec6:	1c42      	adds	r2, r0, #1
 8003ec8:	d101      	bne.n	8003ece <__sflush_r+0x7a>
 8003eca:	682b      	ldr	r3, [r5, #0]
 8003ecc:	b903      	cbnz	r3, 8003ed0 <__sflush_r+0x7c>
 8003ece:	6560      	str	r0, [r4, #84]	; 0x54
 8003ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ed2:	602f      	str	r7, [r5, #0]
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	d0ca      	beq.n	8003e6e <__sflush_r+0x1a>
 8003ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003edc:	4299      	cmp	r1, r3
 8003ede:	d002      	beq.n	8003ee6 <__sflush_r+0x92>
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 f9d7 	bl	8004294 <_free_r>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8003eea:	e7c1      	b.n	8003e70 <__sflush_r+0x1c>
 8003eec:	6a21      	ldr	r1, [r4, #32]
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	47b0      	blx	r6
 8003ef4:	1c41      	adds	r1, r0, #1
 8003ef6:	d1c7      	bne.n	8003e88 <__sflush_r+0x34>
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0c4      	beq.n	8003e88 <__sflush_r+0x34>
 8003efe:	2b1d      	cmp	r3, #29
 8003f00:	d001      	beq.n	8003f06 <__sflush_r+0xb2>
 8003f02:	2b16      	cmp	r3, #22
 8003f04:	d101      	bne.n	8003f0a <__sflush_r+0xb6>
 8003f06:	602f      	str	r7, [r5, #0]
 8003f08:	e7b1      	b.n	8003e6e <__sflush_r+0x1a>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	e7ad      	b.n	8003e70 <__sflush_r+0x1c>
 8003f14:	690f      	ldr	r7, [r1, #16]
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	d0a9      	beq.n	8003e6e <__sflush_r+0x1a>
 8003f1a:	0793      	lsls	r3, r2, #30
 8003f1c:	680e      	ldr	r6, [r1, #0]
 8003f1e:	bf08      	it	eq
 8003f20:	694b      	ldreq	r3, [r1, #20]
 8003f22:	600f      	str	r7, [r1, #0]
 8003f24:	bf18      	it	ne
 8003f26:	2300      	movne	r3, #0
 8003f28:	eba6 0807 	sub.w	r8, r6, r7
 8003f2c:	608b      	str	r3, [r1, #8]
 8003f2e:	f1b8 0f00 	cmp.w	r8, #0
 8003f32:	dd9c      	ble.n	8003e6e <__sflush_r+0x1a>
 8003f34:	6a21      	ldr	r1, [r4, #32]
 8003f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f38:	4643      	mov	r3, r8
 8003f3a:	463a      	mov	r2, r7
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	47b0      	blx	r6
 8003f40:	2800      	cmp	r0, #0
 8003f42:	dc06      	bgt.n	8003f52 <__sflush_r+0xfe>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4a:	81a3      	strh	r3, [r4, #12]
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f50:	e78e      	b.n	8003e70 <__sflush_r+0x1c>
 8003f52:	4407      	add	r7, r0
 8003f54:	eba8 0800 	sub.w	r8, r8, r0
 8003f58:	e7e9      	b.n	8003f2e <__sflush_r+0xda>
 8003f5a:	bf00      	nop
 8003f5c:	20400001 	.word	0x20400001

08003f60 <_fflush_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	690b      	ldr	r3, [r1, #16]
 8003f64:	4605      	mov	r5, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	b913      	cbnz	r3, 8003f70 <_fflush_r+0x10>
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	b118      	cbz	r0, 8003f7a <_fflush_r+0x1a>
 8003f72:	6983      	ldr	r3, [r0, #24]
 8003f74:	b90b      	cbnz	r3, 8003f7a <_fflush_r+0x1a>
 8003f76:	f000 f887 	bl	8004088 <__sinit>
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <_fflush_r+0x6c>)
 8003f7c:	429c      	cmp	r4, r3
 8003f7e:	d11b      	bne.n	8003fb8 <_fflush_r+0x58>
 8003f80:	686c      	ldr	r4, [r5, #4]
 8003f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0ef      	beq.n	8003f6a <_fflush_r+0xa>
 8003f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f8c:	07d0      	lsls	r0, r2, #31
 8003f8e:	d404      	bmi.n	8003f9a <_fflush_r+0x3a>
 8003f90:	0599      	lsls	r1, r3, #22
 8003f92:	d402      	bmi.n	8003f9a <_fflush_r+0x3a>
 8003f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f96:	f000 f915 	bl	80041c4 <__retarget_lock_acquire_recursive>
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	f7ff ff59 	bl	8003e54 <__sflush_r>
 8003fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fa4:	07da      	lsls	r2, r3, #31
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	d4e0      	bmi.n	8003f6c <_fflush_r+0xc>
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	059b      	lsls	r3, r3, #22
 8003fae:	d4dd      	bmi.n	8003f6c <_fflush_r+0xc>
 8003fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fb2:	f000 f908 	bl	80041c6 <__retarget_lock_release_recursive>
 8003fb6:	e7d9      	b.n	8003f6c <_fflush_r+0xc>
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <_fflush_r+0x70>)
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	d101      	bne.n	8003fc2 <_fflush_r+0x62>
 8003fbe:	68ac      	ldr	r4, [r5, #8]
 8003fc0:	e7df      	b.n	8003f82 <_fflush_r+0x22>
 8003fc2:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <_fflush_r+0x74>)
 8003fc4:	429c      	cmp	r4, r3
 8003fc6:	bf08      	it	eq
 8003fc8:	68ec      	ldreq	r4, [r5, #12]
 8003fca:	e7da      	b.n	8003f82 <_fflush_r+0x22>
 8003fcc:	08004c54 	.word	0x08004c54
 8003fd0:	08004c74 	.word	0x08004c74
 8003fd4:	08004c34 	.word	0x08004c34

08003fd8 <std>:
 8003fd8:	2300      	movs	r3, #0
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	4604      	mov	r4, r0
 8003fde:	e9c0 3300 	strd	r3, r3, [r0]
 8003fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fe6:	6083      	str	r3, [r0, #8]
 8003fe8:	8181      	strh	r1, [r0, #12]
 8003fea:	6643      	str	r3, [r0, #100]	; 0x64
 8003fec:	81c2      	strh	r2, [r0, #14]
 8003fee:	6183      	str	r3, [r0, #24]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	305c      	adds	r0, #92	; 0x5c
 8003ff6:	f7ff fdd7 	bl	8003ba8 <memset>
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <std+0x38>)
 8003ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <std+0x3c>)
 8004000:	62a3      	str	r3, [r4, #40]	; 0x28
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <std+0x40>)
 8004004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <std+0x44>)
 8004008:	6224      	str	r4, [r4, #32]
 800400a:	6323      	str	r3, [r4, #48]	; 0x30
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	08004a51 	.word	0x08004a51
 8004014:	08004a73 	.word	0x08004a73
 8004018:	08004aab 	.word	0x08004aab
 800401c:	08004acf 	.word	0x08004acf

08004020 <_cleanup_r>:
 8004020:	4901      	ldr	r1, [pc, #4]	; (8004028 <_cleanup_r+0x8>)
 8004022:	f000 b8af 	b.w	8004184 <_fwalk_reent>
 8004026:	bf00      	nop
 8004028:	08003f61 	.word	0x08003f61

0800402c <__sfmoreglue>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	2268      	movs	r2, #104	; 0x68
 8004030:	1e4d      	subs	r5, r1, #1
 8004032:	4355      	muls	r5, r2
 8004034:	460e      	mov	r6, r1
 8004036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800403a:	f000 f997 	bl	800436c <_malloc_r>
 800403e:	4604      	mov	r4, r0
 8004040:	b140      	cbz	r0, 8004054 <__sfmoreglue+0x28>
 8004042:	2100      	movs	r1, #0
 8004044:	e9c0 1600 	strd	r1, r6, [r0]
 8004048:	300c      	adds	r0, #12
 800404a:	60a0      	str	r0, [r4, #8]
 800404c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004050:	f7ff fdaa 	bl	8003ba8 <memset>
 8004054:	4620      	mov	r0, r4
 8004056:	bd70      	pop	{r4, r5, r6, pc}

08004058 <__sfp_lock_acquire>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__sfp_lock_acquire+0x8>)
 800405a:	f000 b8b3 	b.w	80041c4 <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	20000169 	.word	0x20000169

08004064 <__sfp_lock_release>:
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <__sfp_lock_release+0x8>)
 8004066:	f000 b8ae 	b.w	80041c6 <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	20000169 	.word	0x20000169

08004070 <__sinit_lock_acquire>:
 8004070:	4801      	ldr	r0, [pc, #4]	; (8004078 <__sinit_lock_acquire+0x8>)
 8004072:	f000 b8a7 	b.w	80041c4 <__retarget_lock_acquire_recursive>
 8004076:	bf00      	nop
 8004078:	2000016a 	.word	0x2000016a

0800407c <__sinit_lock_release>:
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <__sinit_lock_release+0x8>)
 800407e:	f000 b8a2 	b.w	80041c6 <__retarget_lock_release_recursive>
 8004082:	bf00      	nop
 8004084:	2000016a 	.word	0x2000016a

08004088 <__sinit>:
 8004088:	b510      	push	{r4, lr}
 800408a:	4604      	mov	r4, r0
 800408c:	f7ff fff0 	bl	8004070 <__sinit_lock_acquire>
 8004090:	69a3      	ldr	r3, [r4, #24]
 8004092:	b11b      	cbz	r3, 800409c <__sinit+0x14>
 8004094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004098:	f7ff bff0 	b.w	800407c <__sinit_lock_release>
 800409c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80040a0:	6523      	str	r3, [r4, #80]	; 0x50
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <__sinit+0x68>)
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <__sinit+0x6c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80040aa:	42a3      	cmp	r3, r4
 80040ac:	bf04      	itt	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	61a3      	streq	r3, [r4, #24]
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 f820 	bl	80040f8 <__sfp>
 80040b8:	6060      	str	r0, [r4, #4]
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 f81c 	bl	80040f8 <__sfp>
 80040c0:	60a0      	str	r0, [r4, #8]
 80040c2:	4620      	mov	r0, r4
 80040c4:	f000 f818 	bl	80040f8 <__sfp>
 80040c8:	2200      	movs	r2, #0
 80040ca:	60e0      	str	r0, [r4, #12]
 80040cc:	2104      	movs	r1, #4
 80040ce:	6860      	ldr	r0, [r4, #4]
 80040d0:	f7ff ff82 	bl	8003fd8 <std>
 80040d4:	68a0      	ldr	r0, [r4, #8]
 80040d6:	2201      	movs	r2, #1
 80040d8:	2109      	movs	r1, #9
 80040da:	f7ff ff7d 	bl	8003fd8 <std>
 80040de:	68e0      	ldr	r0, [r4, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	2112      	movs	r1, #18
 80040e4:	f7ff ff78 	bl	8003fd8 <std>
 80040e8:	2301      	movs	r3, #1
 80040ea:	61a3      	str	r3, [r4, #24]
 80040ec:	e7d2      	b.n	8004094 <__sinit+0xc>
 80040ee:	bf00      	nop
 80040f0:	08004c30 	.word	0x08004c30
 80040f4:	08004021 	.word	0x08004021

080040f8 <__sfp>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	4607      	mov	r7, r0
 80040fc:	f7ff ffac 	bl	8004058 <__sfp_lock_acquire>
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <__sfp+0x84>)
 8004102:	681e      	ldr	r6, [r3, #0]
 8004104:	69b3      	ldr	r3, [r6, #24]
 8004106:	b913      	cbnz	r3, 800410e <__sfp+0x16>
 8004108:	4630      	mov	r0, r6
 800410a:	f7ff ffbd 	bl	8004088 <__sinit>
 800410e:	3648      	adds	r6, #72	; 0x48
 8004110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004114:	3b01      	subs	r3, #1
 8004116:	d503      	bpl.n	8004120 <__sfp+0x28>
 8004118:	6833      	ldr	r3, [r6, #0]
 800411a:	b30b      	cbz	r3, 8004160 <__sfp+0x68>
 800411c:	6836      	ldr	r6, [r6, #0]
 800411e:	e7f7      	b.n	8004110 <__sfp+0x18>
 8004120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004124:	b9d5      	cbnz	r5, 800415c <__sfp+0x64>
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <__sfp+0x88>)
 8004128:	60e3      	str	r3, [r4, #12]
 800412a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800412e:	6665      	str	r5, [r4, #100]	; 0x64
 8004130:	f000 f847 	bl	80041c2 <__retarget_lock_init_recursive>
 8004134:	f7ff ff96 	bl	8004064 <__sfp_lock_release>
 8004138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800413c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004140:	6025      	str	r5, [r4, #0]
 8004142:	61a5      	str	r5, [r4, #24]
 8004144:	2208      	movs	r2, #8
 8004146:	4629      	mov	r1, r5
 8004148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800414c:	f7ff fd2c 	bl	8003ba8 <memset>
 8004150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004158:	4620      	mov	r0, r4
 800415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415c:	3468      	adds	r4, #104	; 0x68
 800415e:	e7d9      	b.n	8004114 <__sfp+0x1c>
 8004160:	2104      	movs	r1, #4
 8004162:	4638      	mov	r0, r7
 8004164:	f7ff ff62 	bl	800402c <__sfmoreglue>
 8004168:	4604      	mov	r4, r0
 800416a:	6030      	str	r0, [r6, #0]
 800416c:	2800      	cmp	r0, #0
 800416e:	d1d5      	bne.n	800411c <__sfp+0x24>
 8004170:	f7ff ff78 	bl	8004064 <__sfp_lock_release>
 8004174:	230c      	movs	r3, #12
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	e7ee      	b.n	8004158 <__sfp+0x60>
 800417a:	bf00      	nop
 800417c:	08004c30 	.word	0x08004c30
 8004180:	ffff0001 	.word	0xffff0001

08004184 <_fwalk_reent>:
 8004184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004188:	4606      	mov	r6, r0
 800418a:	4688      	mov	r8, r1
 800418c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004190:	2700      	movs	r7, #0
 8004192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004196:	f1b9 0901 	subs.w	r9, r9, #1
 800419a:	d505      	bpl.n	80041a8 <_fwalk_reent+0x24>
 800419c:	6824      	ldr	r4, [r4, #0]
 800419e:	2c00      	cmp	r4, #0
 80041a0:	d1f7      	bne.n	8004192 <_fwalk_reent+0xe>
 80041a2:	4638      	mov	r0, r7
 80041a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a8:	89ab      	ldrh	r3, [r5, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d907      	bls.n	80041be <_fwalk_reent+0x3a>
 80041ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041b2:	3301      	adds	r3, #1
 80041b4:	d003      	beq.n	80041be <_fwalk_reent+0x3a>
 80041b6:	4629      	mov	r1, r5
 80041b8:	4630      	mov	r0, r6
 80041ba:	47c0      	blx	r8
 80041bc:	4307      	orrs	r7, r0
 80041be:	3568      	adds	r5, #104	; 0x68
 80041c0:	e7e9      	b.n	8004196 <_fwalk_reent+0x12>

080041c2 <__retarget_lock_init_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <__retarget_lock_acquire_recursive>:
 80041c4:	4770      	bx	lr

080041c6 <__retarget_lock_release_recursive>:
 80041c6:	4770      	bx	lr

080041c8 <__swhatbuf_r>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	460e      	mov	r6, r1
 80041cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d0:	2900      	cmp	r1, #0
 80041d2:	b096      	sub	sp, #88	; 0x58
 80041d4:	4614      	mov	r4, r2
 80041d6:	461d      	mov	r5, r3
 80041d8:	da08      	bge.n	80041ec <__swhatbuf_r+0x24>
 80041da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	602a      	str	r2, [r5, #0]
 80041e2:	061a      	lsls	r2, r3, #24
 80041e4:	d410      	bmi.n	8004208 <__swhatbuf_r+0x40>
 80041e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ea:	e00e      	b.n	800420a <__swhatbuf_r+0x42>
 80041ec:	466a      	mov	r2, sp
 80041ee:	f000 fc95 	bl	8004b1c <_fstat_r>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	dbf1      	blt.n	80041da <__swhatbuf_r+0x12>
 80041f6:	9a01      	ldr	r2, [sp, #4]
 80041f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004200:	425a      	negs	r2, r3
 8004202:	415a      	adcs	r2, r3
 8004204:	602a      	str	r2, [r5, #0]
 8004206:	e7ee      	b.n	80041e6 <__swhatbuf_r+0x1e>
 8004208:	2340      	movs	r3, #64	; 0x40
 800420a:	2000      	movs	r0, #0
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	b016      	add	sp, #88	; 0x58
 8004210:	bd70      	pop	{r4, r5, r6, pc}
	...

08004214 <__smakebuf_r>:
 8004214:	898b      	ldrh	r3, [r1, #12]
 8004216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004218:	079d      	lsls	r5, r3, #30
 800421a:	4606      	mov	r6, r0
 800421c:	460c      	mov	r4, r1
 800421e:	d507      	bpl.n	8004230 <__smakebuf_r+0x1c>
 8004220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	6123      	str	r3, [r4, #16]
 8004228:	2301      	movs	r3, #1
 800422a:	6163      	str	r3, [r4, #20]
 800422c:	b002      	add	sp, #8
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	ab01      	add	r3, sp, #4
 8004232:	466a      	mov	r2, sp
 8004234:	f7ff ffc8 	bl	80041c8 <__swhatbuf_r>
 8004238:	9900      	ldr	r1, [sp, #0]
 800423a:	4605      	mov	r5, r0
 800423c:	4630      	mov	r0, r6
 800423e:	f000 f895 	bl	800436c <_malloc_r>
 8004242:	b948      	cbnz	r0, 8004258 <__smakebuf_r+0x44>
 8004244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004248:	059a      	lsls	r2, r3, #22
 800424a:	d4ef      	bmi.n	800422c <__smakebuf_r+0x18>
 800424c:	f023 0303 	bic.w	r3, r3, #3
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	81a3      	strh	r3, [r4, #12]
 8004256:	e7e3      	b.n	8004220 <__smakebuf_r+0xc>
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <__smakebuf_r+0x7c>)
 800425a:	62b3      	str	r3, [r6, #40]	; 0x28
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	6020      	str	r0, [r4, #0]
 8004260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004264:	81a3      	strh	r3, [r4, #12]
 8004266:	9b00      	ldr	r3, [sp, #0]
 8004268:	6163      	str	r3, [r4, #20]
 800426a:	9b01      	ldr	r3, [sp, #4]
 800426c:	6120      	str	r0, [r4, #16]
 800426e:	b15b      	cbz	r3, 8004288 <__smakebuf_r+0x74>
 8004270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004274:	4630      	mov	r0, r6
 8004276:	f000 fc63 	bl	8004b40 <_isatty_r>
 800427a:	b128      	cbz	r0, 8004288 <__smakebuf_r+0x74>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	89a0      	ldrh	r0, [r4, #12]
 800428a:	4305      	orrs	r5, r0
 800428c:	81a5      	strh	r5, [r4, #12]
 800428e:	e7cd      	b.n	800422c <__smakebuf_r+0x18>
 8004290:	08004021 	.word	0x08004021

08004294 <_free_r>:
 8004294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004296:	2900      	cmp	r1, #0
 8004298:	d044      	beq.n	8004324 <_free_r+0x90>
 800429a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429e:	9001      	str	r0, [sp, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f1a1 0404 	sub.w	r4, r1, #4
 80042a6:	bfb8      	it	lt
 80042a8:	18e4      	addlt	r4, r4, r3
 80042aa:	f000 fc6b 	bl	8004b84 <__malloc_lock>
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <_free_r+0x94>)
 80042b0:	9801      	ldr	r0, [sp, #4]
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	b933      	cbnz	r3, 80042c4 <_free_r+0x30>
 80042b6:	6063      	str	r3, [r4, #4]
 80042b8:	6014      	str	r4, [r2, #0]
 80042ba:	b003      	add	sp, #12
 80042bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042c0:	f000 bc66 	b.w	8004b90 <__malloc_unlock>
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d908      	bls.n	80042da <_free_r+0x46>
 80042c8:	6825      	ldr	r5, [r4, #0]
 80042ca:	1961      	adds	r1, r4, r5
 80042cc:	428b      	cmp	r3, r1
 80042ce:	bf01      	itttt	eq
 80042d0:	6819      	ldreq	r1, [r3, #0]
 80042d2:	685b      	ldreq	r3, [r3, #4]
 80042d4:	1949      	addeq	r1, r1, r5
 80042d6:	6021      	streq	r1, [r4, #0]
 80042d8:	e7ed      	b.n	80042b6 <_free_r+0x22>
 80042da:	461a      	mov	r2, r3
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b10b      	cbz	r3, 80042e4 <_free_r+0x50>
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	d9fa      	bls.n	80042da <_free_r+0x46>
 80042e4:	6811      	ldr	r1, [r2, #0]
 80042e6:	1855      	adds	r5, r2, r1
 80042e8:	42a5      	cmp	r5, r4
 80042ea:	d10b      	bne.n	8004304 <_free_r+0x70>
 80042ec:	6824      	ldr	r4, [r4, #0]
 80042ee:	4421      	add	r1, r4
 80042f0:	1854      	adds	r4, r2, r1
 80042f2:	42a3      	cmp	r3, r4
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	d1e0      	bne.n	80042ba <_free_r+0x26>
 80042f8:	681c      	ldr	r4, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	6053      	str	r3, [r2, #4]
 80042fe:	4421      	add	r1, r4
 8004300:	6011      	str	r1, [r2, #0]
 8004302:	e7da      	b.n	80042ba <_free_r+0x26>
 8004304:	d902      	bls.n	800430c <_free_r+0x78>
 8004306:	230c      	movs	r3, #12
 8004308:	6003      	str	r3, [r0, #0]
 800430a:	e7d6      	b.n	80042ba <_free_r+0x26>
 800430c:	6825      	ldr	r5, [r4, #0]
 800430e:	1961      	adds	r1, r4, r5
 8004310:	428b      	cmp	r3, r1
 8004312:	bf04      	itt	eq
 8004314:	6819      	ldreq	r1, [r3, #0]
 8004316:	685b      	ldreq	r3, [r3, #4]
 8004318:	6063      	str	r3, [r4, #4]
 800431a:	bf04      	itt	eq
 800431c:	1949      	addeq	r1, r1, r5
 800431e:	6021      	streq	r1, [r4, #0]
 8004320:	6054      	str	r4, [r2, #4]
 8004322:	e7ca      	b.n	80042ba <_free_r+0x26>
 8004324:	b003      	add	sp, #12
 8004326:	bd30      	pop	{r4, r5, pc}
 8004328:	2000016c 	.word	0x2000016c

0800432c <sbrk_aligned>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4e0e      	ldr	r6, [pc, #56]	; (8004368 <sbrk_aligned+0x3c>)
 8004330:	460c      	mov	r4, r1
 8004332:	6831      	ldr	r1, [r6, #0]
 8004334:	4605      	mov	r5, r0
 8004336:	b911      	cbnz	r1, 800433e <sbrk_aligned+0x12>
 8004338:	f000 fb7a 	bl	8004a30 <_sbrk_r>
 800433c:	6030      	str	r0, [r6, #0]
 800433e:	4621      	mov	r1, r4
 8004340:	4628      	mov	r0, r5
 8004342:	f000 fb75 	bl	8004a30 <_sbrk_r>
 8004346:	1c43      	adds	r3, r0, #1
 8004348:	d00a      	beq.n	8004360 <sbrk_aligned+0x34>
 800434a:	1cc4      	adds	r4, r0, #3
 800434c:	f024 0403 	bic.w	r4, r4, #3
 8004350:	42a0      	cmp	r0, r4
 8004352:	d007      	beq.n	8004364 <sbrk_aligned+0x38>
 8004354:	1a21      	subs	r1, r4, r0
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fb6a 	bl	8004a30 <_sbrk_r>
 800435c:	3001      	adds	r0, #1
 800435e:	d101      	bne.n	8004364 <sbrk_aligned+0x38>
 8004360:	f04f 34ff 	mov.w	r4, #4294967295
 8004364:	4620      	mov	r0, r4
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	20000170 	.word	0x20000170

0800436c <_malloc_r>:
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	1ccd      	adds	r5, r1, #3
 8004372:	f025 0503 	bic.w	r5, r5, #3
 8004376:	3508      	adds	r5, #8
 8004378:	2d0c      	cmp	r5, #12
 800437a:	bf38      	it	cc
 800437c:	250c      	movcc	r5, #12
 800437e:	2d00      	cmp	r5, #0
 8004380:	4607      	mov	r7, r0
 8004382:	db01      	blt.n	8004388 <_malloc_r+0x1c>
 8004384:	42a9      	cmp	r1, r5
 8004386:	d905      	bls.n	8004394 <_malloc_r+0x28>
 8004388:	230c      	movs	r3, #12
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	2600      	movs	r6, #0
 800438e:	4630      	mov	r0, r6
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	4e2e      	ldr	r6, [pc, #184]	; (8004450 <_malloc_r+0xe4>)
 8004396:	f000 fbf5 	bl	8004b84 <__malloc_lock>
 800439a:	6833      	ldr	r3, [r6, #0]
 800439c:	461c      	mov	r4, r3
 800439e:	bb34      	cbnz	r4, 80043ee <_malloc_r+0x82>
 80043a0:	4629      	mov	r1, r5
 80043a2:	4638      	mov	r0, r7
 80043a4:	f7ff ffc2 	bl	800432c <sbrk_aligned>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	4604      	mov	r4, r0
 80043ac:	d14d      	bne.n	800444a <_malloc_r+0xde>
 80043ae:	6834      	ldr	r4, [r6, #0]
 80043b0:	4626      	mov	r6, r4
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	d140      	bne.n	8004438 <_malloc_r+0xcc>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	4631      	mov	r1, r6
 80043ba:	4638      	mov	r0, r7
 80043bc:	eb04 0803 	add.w	r8, r4, r3
 80043c0:	f000 fb36 	bl	8004a30 <_sbrk_r>
 80043c4:	4580      	cmp	r8, r0
 80043c6:	d13a      	bne.n	800443e <_malloc_r+0xd2>
 80043c8:	6821      	ldr	r1, [r4, #0]
 80043ca:	3503      	adds	r5, #3
 80043cc:	1a6d      	subs	r5, r5, r1
 80043ce:	f025 0503 	bic.w	r5, r5, #3
 80043d2:	3508      	adds	r5, #8
 80043d4:	2d0c      	cmp	r5, #12
 80043d6:	bf38      	it	cc
 80043d8:	250c      	movcc	r5, #12
 80043da:	4629      	mov	r1, r5
 80043dc:	4638      	mov	r0, r7
 80043de:	f7ff ffa5 	bl	800432c <sbrk_aligned>
 80043e2:	3001      	adds	r0, #1
 80043e4:	d02b      	beq.n	800443e <_malloc_r+0xd2>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	442b      	add	r3, r5
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	e00e      	b.n	800440c <_malloc_r+0xa0>
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	1b52      	subs	r2, r2, r5
 80043f2:	d41e      	bmi.n	8004432 <_malloc_r+0xc6>
 80043f4:	2a0b      	cmp	r2, #11
 80043f6:	d916      	bls.n	8004426 <_malloc_r+0xba>
 80043f8:	1961      	adds	r1, r4, r5
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	6025      	str	r5, [r4, #0]
 80043fe:	bf18      	it	ne
 8004400:	6059      	strne	r1, [r3, #4]
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	bf08      	it	eq
 8004406:	6031      	streq	r1, [r6, #0]
 8004408:	5162      	str	r2, [r4, r5]
 800440a:	604b      	str	r3, [r1, #4]
 800440c:	4638      	mov	r0, r7
 800440e:	f104 060b 	add.w	r6, r4, #11
 8004412:	f000 fbbd 	bl	8004b90 <__malloc_unlock>
 8004416:	f026 0607 	bic.w	r6, r6, #7
 800441a:	1d23      	adds	r3, r4, #4
 800441c:	1af2      	subs	r2, r6, r3
 800441e:	d0b6      	beq.n	800438e <_malloc_r+0x22>
 8004420:	1b9b      	subs	r3, r3, r6
 8004422:	50a3      	str	r3, [r4, r2]
 8004424:	e7b3      	b.n	800438e <_malloc_r+0x22>
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	42a3      	cmp	r3, r4
 800442a:	bf0c      	ite	eq
 800442c:	6032      	streq	r2, [r6, #0]
 800442e:	605a      	strne	r2, [r3, #4]
 8004430:	e7ec      	b.n	800440c <_malloc_r+0xa0>
 8004432:	4623      	mov	r3, r4
 8004434:	6864      	ldr	r4, [r4, #4]
 8004436:	e7b2      	b.n	800439e <_malloc_r+0x32>
 8004438:	4634      	mov	r4, r6
 800443a:	6876      	ldr	r6, [r6, #4]
 800443c:	e7b9      	b.n	80043b2 <_malloc_r+0x46>
 800443e:	230c      	movs	r3, #12
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4638      	mov	r0, r7
 8004444:	f000 fba4 	bl	8004b90 <__malloc_unlock>
 8004448:	e7a1      	b.n	800438e <_malloc_r+0x22>
 800444a:	6025      	str	r5, [r4, #0]
 800444c:	e7de      	b.n	800440c <_malloc_r+0xa0>
 800444e:	bf00      	nop
 8004450:	2000016c 	.word	0x2000016c

08004454 <__sfputc_r>:
 8004454:	6893      	ldr	r3, [r2, #8]
 8004456:	3b01      	subs	r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	b410      	push	{r4}
 800445c:	6093      	str	r3, [r2, #8]
 800445e:	da08      	bge.n	8004472 <__sfputc_r+0x1e>
 8004460:	6994      	ldr	r4, [r2, #24]
 8004462:	42a3      	cmp	r3, r4
 8004464:	db01      	blt.n	800446a <__sfputc_r+0x16>
 8004466:	290a      	cmp	r1, #10
 8004468:	d103      	bne.n	8004472 <__sfputc_r+0x1e>
 800446a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800446e:	f7ff bc31 	b.w	8003cd4 <__swbuf_r>
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	1c58      	adds	r0, r3, #1
 8004476:	6010      	str	r0, [r2, #0]
 8004478:	7019      	strb	r1, [r3, #0]
 800447a:	4608      	mov	r0, r1
 800447c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004480:	4770      	bx	lr

08004482 <__sfputs_r>:
 8004482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004484:	4606      	mov	r6, r0
 8004486:	460f      	mov	r7, r1
 8004488:	4614      	mov	r4, r2
 800448a:	18d5      	adds	r5, r2, r3
 800448c:	42ac      	cmp	r4, r5
 800448e:	d101      	bne.n	8004494 <__sfputs_r+0x12>
 8004490:	2000      	movs	r0, #0
 8004492:	e007      	b.n	80044a4 <__sfputs_r+0x22>
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	463a      	mov	r2, r7
 800449a:	4630      	mov	r0, r6
 800449c:	f7ff ffda 	bl	8004454 <__sfputc_r>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d1f3      	bne.n	800448c <__sfputs_r+0xa>
 80044a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044a8 <_vfiprintf_r>:
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	460d      	mov	r5, r1
 80044ae:	b09d      	sub	sp, #116	; 0x74
 80044b0:	4614      	mov	r4, r2
 80044b2:	4698      	mov	r8, r3
 80044b4:	4606      	mov	r6, r0
 80044b6:	b118      	cbz	r0, 80044c0 <_vfiprintf_r+0x18>
 80044b8:	6983      	ldr	r3, [r0, #24]
 80044ba:	b90b      	cbnz	r3, 80044c0 <_vfiprintf_r+0x18>
 80044bc:	f7ff fde4 	bl	8004088 <__sinit>
 80044c0:	4b89      	ldr	r3, [pc, #548]	; (80046e8 <_vfiprintf_r+0x240>)
 80044c2:	429d      	cmp	r5, r3
 80044c4:	d11b      	bne.n	80044fe <_vfiprintf_r+0x56>
 80044c6:	6875      	ldr	r5, [r6, #4]
 80044c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ca:	07d9      	lsls	r1, r3, #31
 80044cc:	d405      	bmi.n	80044da <_vfiprintf_r+0x32>
 80044ce:	89ab      	ldrh	r3, [r5, #12]
 80044d0:	059a      	lsls	r2, r3, #22
 80044d2:	d402      	bmi.n	80044da <_vfiprintf_r+0x32>
 80044d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044d6:	f7ff fe75 	bl	80041c4 <__retarget_lock_acquire_recursive>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	d501      	bpl.n	80044e4 <_vfiprintf_r+0x3c>
 80044e0:	692b      	ldr	r3, [r5, #16]
 80044e2:	b9eb      	cbnz	r3, 8004520 <_vfiprintf_r+0x78>
 80044e4:	4629      	mov	r1, r5
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7ff fc46 	bl	8003d78 <__swsetup_r>
 80044ec:	b1c0      	cbz	r0, 8004520 <_vfiprintf_r+0x78>
 80044ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044f0:	07dc      	lsls	r4, r3, #31
 80044f2:	d50e      	bpl.n	8004512 <_vfiprintf_r+0x6a>
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	b01d      	add	sp, #116	; 0x74
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <_vfiprintf_r+0x244>)
 8004500:	429d      	cmp	r5, r3
 8004502:	d101      	bne.n	8004508 <_vfiprintf_r+0x60>
 8004504:	68b5      	ldr	r5, [r6, #8]
 8004506:	e7df      	b.n	80044c8 <_vfiprintf_r+0x20>
 8004508:	4b79      	ldr	r3, [pc, #484]	; (80046f0 <_vfiprintf_r+0x248>)
 800450a:	429d      	cmp	r5, r3
 800450c:	bf08      	it	eq
 800450e:	68f5      	ldreq	r5, [r6, #12]
 8004510:	e7da      	b.n	80044c8 <_vfiprintf_r+0x20>
 8004512:	89ab      	ldrh	r3, [r5, #12]
 8004514:	0598      	lsls	r0, r3, #22
 8004516:	d4ed      	bmi.n	80044f4 <_vfiprintf_r+0x4c>
 8004518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800451a:	f7ff fe54 	bl	80041c6 <__retarget_lock_release_recursive>
 800451e:	e7e9      	b.n	80044f4 <_vfiprintf_r+0x4c>
 8004520:	2300      	movs	r3, #0
 8004522:	9309      	str	r3, [sp, #36]	; 0x24
 8004524:	2320      	movs	r3, #32
 8004526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800452a:	f8cd 800c 	str.w	r8, [sp, #12]
 800452e:	2330      	movs	r3, #48	; 0x30
 8004530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046f4 <_vfiprintf_r+0x24c>
 8004534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004538:	f04f 0901 	mov.w	r9, #1
 800453c:	4623      	mov	r3, r4
 800453e:	469a      	mov	sl, r3
 8004540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004544:	b10a      	cbz	r2, 800454a <_vfiprintf_r+0xa2>
 8004546:	2a25      	cmp	r2, #37	; 0x25
 8004548:	d1f9      	bne.n	800453e <_vfiprintf_r+0x96>
 800454a:	ebba 0b04 	subs.w	fp, sl, r4
 800454e:	d00b      	beq.n	8004568 <_vfiprintf_r+0xc0>
 8004550:	465b      	mov	r3, fp
 8004552:	4622      	mov	r2, r4
 8004554:	4629      	mov	r1, r5
 8004556:	4630      	mov	r0, r6
 8004558:	f7ff ff93 	bl	8004482 <__sfputs_r>
 800455c:	3001      	adds	r0, #1
 800455e:	f000 80aa 	beq.w	80046b6 <_vfiprintf_r+0x20e>
 8004562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004564:	445a      	add	r2, fp
 8004566:	9209      	str	r2, [sp, #36]	; 0x24
 8004568:	f89a 3000 	ldrb.w	r3, [sl]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a2 	beq.w	80046b6 <_vfiprintf_r+0x20e>
 8004572:	2300      	movs	r3, #0
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800457c:	f10a 0a01 	add.w	sl, sl, #1
 8004580:	9304      	str	r3, [sp, #16]
 8004582:	9307      	str	r3, [sp, #28]
 8004584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004588:	931a      	str	r3, [sp, #104]	; 0x68
 800458a:	4654      	mov	r4, sl
 800458c:	2205      	movs	r2, #5
 800458e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004592:	4858      	ldr	r0, [pc, #352]	; (80046f4 <_vfiprintf_r+0x24c>)
 8004594:	f7fb fe3c 	bl	8000210 <memchr>
 8004598:	9a04      	ldr	r2, [sp, #16]
 800459a:	b9d8      	cbnz	r0, 80045d4 <_vfiprintf_r+0x12c>
 800459c:	06d1      	lsls	r1, r2, #27
 800459e:	bf44      	itt	mi
 80045a0:	2320      	movmi	r3, #32
 80045a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a6:	0713      	lsls	r3, r2, #28
 80045a8:	bf44      	itt	mi
 80045aa:	232b      	movmi	r3, #43	; 0x2b
 80045ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b0:	f89a 3000 	ldrb.w	r3, [sl]
 80045b4:	2b2a      	cmp	r3, #42	; 0x2a
 80045b6:	d015      	beq.n	80045e4 <_vfiprintf_r+0x13c>
 80045b8:	9a07      	ldr	r2, [sp, #28]
 80045ba:	4654      	mov	r4, sl
 80045bc:	2000      	movs	r0, #0
 80045be:	f04f 0c0a 	mov.w	ip, #10
 80045c2:	4621      	mov	r1, r4
 80045c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c8:	3b30      	subs	r3, #48	; 0x30
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	d94e      	bls.n	800466c <_vfiprintf_r+0x1c4>
 80045ce:	b1b0      	cbz	r0, 80045fe <_vfiprintf_r+0x156>
 80045d0:	9207      	str	r2, [sp, #28]
 80045d2:	e014      	b.n	80045fe <_vfiprintf_r+0x156>
 80045d4:	eba0 0308 	sub.w	r3, r0, r8
 80045d8:	fa09 f303 	lsl.w	r3, r9, r3
 80045dc:	4313      	orrs	r3, r2
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	46a2      	mov	sl, r4
 80045e2:	e7d2      	b.n	800458a <_vfiprintf_r+0xe2>
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	1d19      	adds	r1, r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	9103      	str	r1, [sp, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bfbb      	ittet	lt
 80045f0:	425b      	neglt	r3, r3
 80045f2:	f042 0202 	orrlt.w	r2, r2, #2
 80045f6:	9307      	strge	r3, [sp, #28]
 80045f8:	9307      	strlt	r3, [sp, #28]
 80045fa:	bfb8      	it	lt
 80045fc:	9204      	strlt	r2, [sp, #16]
 80045fe:	7823      	ldrb	r3, [r4, #0]
 8004600:	2b2e      	cmp	r3, #46	; 0x2e
 8004602:	d10c      	bne.n	800461e <_vfiprintf_r+0x176>
 8004604:	7863      	ldrb	r3, [r4, #1]
 8004606:	2b2a      	cmp	r3, #42	; 0x2a
 8004608:	d135      	bne.n	8004676 <_vfiprintf_r+0x1ce>
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	9203      	str	r2, [sp, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfb8      	it	lt
 8004616:	f04f 33ff 	movlt.w	r3, #4294967295
 800461a:	3402      	adds	r4, #2
 800461c:	9305      	str	r3, [sp, #20]
 800461e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004704 <_vfiprintf_r+0x25c>
 8004622:	7821      	ldrb	r1, [r4, #0]
 8004624:	2203      	movs	r2, #3
 8004626:	4650      	mov	r0, sl
 8004628:	f7fb fdf2 	bl	8000210 <memchr>
 800462c:	b140      	cbz	r0, 8004640 <_vfiprintf_r+0x198>
 800462e:	2340      	movs	r3, #64	; 0x40
 8004630:	eba0 000a 	sub.w	r0, r0, sl
 8004634:	fa03 f000 	lsl.w	r0, r3, r0
 8004638:	9b04      	ldr	r3, [sp, #16]
 800463a:	4303      	orrs	r3, r0
 800463c:	3401      	adds	r4, #1
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	482c      	ldr	r0, [pc, #176]	; (80046f8 <_vfiprintf_r+0x250>)
 8004646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800464a:	2206      	movs	r2, #6
 800464c:	f7fb fde0 	bl	8000210 <memchr>
 8004650:	2800      	cmp	r0, #0
 8004652:	d03f      	beq.n	80046d4 <_vfiprintf_r+0x22c>
 8004654:	4b29      	ldr	r3, [pc, #164]	; (80046fc <_vfiprintf_r+0x254>)
 8004656:	bb1b      	cbnz	r3, 80046a0 <_vfiprintf_r+0x1f8>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	3307      	adds	r3, #7
 800465c:	f023 0307 	bic.w	r3, r3, #7
 8004660:	3308      	adds	r3, #8
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004666:	443b      	add	r3, r7
 8004668:	9309      	str	r3, [sp, #36]	; 0x24
 800466a:	e767      	b.n	800453c <_vfiprintf_r+0x94>
 800466c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004670:	460c      	mov	r4, r1
 8004672:	2001      	movs	r0, #1
 8004674:	e7a5      	b.n	80045c2 <_vfiprintf_r+0x11a>
 8004676:	2300      	movs	r3, #0
 8004678:	3401      	adds	r4, #1
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	4619      	mov	r1, r3
 800467e:	f04f 0c0a 	mov.w	ip, #10
 8004682:	4620      	mov	r0, r4
 8004684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004688:	3a30      	subs	r2, #48	; 0x30
 800468a:	2a09      	cmp	r2, #9
 800468c:	d903      	bls.n	8004696 <_vfiprintf_r+0x1ee>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0c5      	beq.n	800461e <_vfiprintf_r+0x176>
 8004692:	9105      	str	r1, [sp, #20]
 8004694:	e7c3      	b.n	800461e <_vfiprintf_r+0x176>
 8004696:	fb0c 2101 	mla	r1, ip, r1, r2
 800469a:	4604      	mov	r4, r0
 800469c:	2301      	movs	r3, #1
 800469e:	e7f0      	b.n	8004682 <_vfiprintf_r+0x1da>
 80046a0:	ab03      	add	r3, sp, #12
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	462a      	mov	r2, r5
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <_vfiprintf_r+0x258>)
 80046a8:	a904      	add	r1, sp, #16
 80046aa:	4630      	mov	r0, r6
 80046ac:	f3af 8000 	nop.w
 80046b0:	4607      	mov	r7, r0
 80046b2:	1c78      	adds	r0, r7, #1
 80046b4:	d1d6      	bne.n	8004664 <_vfiprintf_r+0x1bc>
 80046b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b8:	07d9      	lsls	r1, r3, #31
 80046ba:	d405      	bmi.n	80046c8 <_vfiprintf_r+0x220>
 80046bc:	89ab      	ldrh	r3, [r5, #12]
 80046be:	059a      	lsls	r2, r3, #22
 80046c0:	d402      	bmi.n	80046c8 <_vfiprintf_r+0x220>
 80046c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c4:	f7ff fd7f 	bl	80041c6 <__retarget_lock_release_recursive>
 80046c8:	89ab      	ldrh	r3, [r5, #12]
 80046ca:	065b      	lsls	r3, r3, #25
 80046cc:	f53f af12 	bmi.w	80044f4 <_vfiprintf_r+0x4c>
 80046d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046d2:	e711      	b.n	80044f8 <_vfiprintf_r+0x50>
 80046d4:	ab03      	add	r3, sp, #12
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	462a      	mov	r2, r5
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <_vfiprintf_r+0x258>)
 80046dc:	a904      	add	r1, sp, #16
 80046de:	4630      	mov	r0, r6
 80046e0:	f000 f880 	bl	80047e4 <_printf_i>
 80046e4:	e7e4      	b.n	80046b0 <_vfiprintf_r+0x208>
 80046e6:	bf00      	nop
 80046e8:	08004c54 	.word	0x08004c54
 80046ec:	08004c74 	.word	0x08004c74
 80046f0:	08004c34 	.word	0x08004c34
 80046f4:	08004c94 	.word	0x08004c94
 80046f8:	08004c9e 	.word	0x08004c9e
 80046fc:	00000000 	.word	0x00000000
 8004700:	08004483 	.word	0x08004483
 8004704:	08004c9a 	.word	0x08004c9a

08004708 <_printf_common>:
 8004708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	4616      	mov	r6, r2
 800470e:	4699      	mov	r9, r3
 8004710:	688a      	ldr	r2, [r1, #8]
 8004712:	690b      	ldr	r3, [r1, #16]
 8004714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004718:	4293      	cmp	r3, r2
 800471a:	bfb8      	it	lt
 800471c:	4613      	movlt	r3, r2
 800471e:	6033      	str	r3, [r6, #0]
 8004720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004724:	4607      	mov	r7, r0
 8004726:	460c      	mov	r4, r1
 8004728:	b10a      	cbz	r2, 800472e <_printf_common+0x26>
 800472a:	3301      	adds	r3, #1
 800472c:	6033      	str	r3, [r6, #0]
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	0699      	lsls	r1, r3, #26
 8004732:	bf42      	ittt	mi
 8004734:	6833      	ldrmi	r3, [r6, #0]
 8004736:	3302      	addmi	r3, #2
 8004738:	6033      	strmi	r3, [r6, #0]
 800473a:	6825      	ldr	r5, [r4, #0]
 800473c:	f015 0506 	ands.w	r5, r5, #6
 8004740:	d106      	bne.n	8004750 <_printf_common+0x48>
 8004742:	f104 0a19 	add.w	sl, r4, #25
 8004746:	68e3      	ldr	r3, [r4, #12]
 8004748:	6832      	ldr	r2, [r6, #0]
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	42ab      	cmp	r3, r5
 800474e:	dc26      	bgt.n	800479e <_printf_common+0x96>
 8004750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004754:	1e13      	subs	r3, r2, #0
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	bf18      	it	ne
 800475a:	2301      	movne	r3, #1
 800475c:	0692      	lsls	r2, r2, #26
 800475e:	d42b      	bmi.n	80047b8 <_printf_common+0xb0>
 8004760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004764:	4649      	mov	r1, r9
 8004766:	4638      	mov	r0, r7
 8004768:	47c0      	blx	r8
 800476a:	3001      	adds	r0, #1
 800476c:	d01e      	beq.n	80047ac <_printf_common+0xa4>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	68e5      	ldr	r5, [r4, #12]
 8004772:	6832      	ldr	r2, [r6, #0]
 8004774:	f003 0306 	and.w	r3, r3, #6
 8004778:	2b04      	cmp	r3, #4
 800477a:	bf08      	it	eq
 800477c:	1aad      	subeq	r5, r5, r2
 800477e:	68a3      	ldr	r3, [r4, #8]
 8004780:	6922      	ldr	r2, [r4, #16]
 8004782:	bf0c      	ite	eq
 8004784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004788:	2500      	movne	r5, #0
 800478a:	4293      	cmp	r3, r2
 800478c:	bfc4      	itt	gt
 800478e:	1a9b      	subgt	r3, r3, r2
 8004790:	18ed      	addgt	r5, r5, r3
 8004792:	2600      	movs	r6, #0
 8004794:	341a      	adds	r4, #26
 8004796:	42b5      	cmp	r5, r6
 8004798:	d11a      	bne.n	80047d0 <_printf_common+0xc8>
 800479a:	2000      	movs	r0, #0
 800479c:	e008      	b.n	80047b0 <_printf_common+0xa8>
 800479e:	2301      	movs	r3, #1
 80047a0:	4652      	mov	r2, sl
 80047a2:	4649      	mov	r1, r9
 80047a4:	4638      	mov	r0, r7
 80047a6:	47c0      	blx	r8
 80047a8:	3001      	adds	r0, #1
 80047aa:	d103      	bne.n	80047b4 <_printf_common+0xac>
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b4:	3501      	adds	r5, #1
 80047b6:	e7c6      	b.n	8004746 <_printf_common+0x3e>
 80047b8:	18e1      	adds	r1, r4, r3
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	2030      	movs	r0, #48	; 0x30
 80047be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c2:	4422      	add	r2, r4
 80047c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047cc:	3302      	adds	r3, #2
 80047ce:	e7c7      	b.n	8004760 <_printf_common+0x58>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4622      	mov	r2, r4
 80047d4:	4649      	mov	r1, r9
 80047d6:	4638      	mov	r0, r7
 80047d8:	47c0      	blx	r8
 80047da:	3001      	adds	r0, #1
 80047dc:	d0e6      	beq.n	80047ac <_printf_common+0xa4>
 80047de:	3601      	adds	r6, #1
 80047e0:	e7d9      	b.n	8004796 <_printf_common+0x8e>
	...

080047e4 <_printf_i>:
 80047e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	7e0f      	ldrb	r7, [r1, #24]
 80047ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047ec:	2f78      	cmp	r7, #120	; 0x78
 80047ee:	4691      	mov	r9, r2
 80047f0:	4680      	mov	r8, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	469a      	mov	sl, r3
 80047f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047fa:	d807      	bhi.n	800480c <_printf_i+0x28>
 80047fc:	2f62      	cmp	r7, #98	; 0x62
 80047fe:	d80a      	bhi.n	8004816 <_printf_i+0x32>
 8004800:	2f00      	cmp	r7, #0
 8004802:	f000 80d8 	beq.w	80049b6 <_printf_i+0x1d2>
 8004806:	2f58      	cmp	r7, #88	; 0x58
 8004808:	f000 80a3 	beq.w	8004952 <_printf_i+0x16e>
 800480c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004814:	e03a      	b.n	800488c <_printf_i+0xa8>
 8004816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800481a:	2b15      	cmp	r3, #21
 800481c:	d8f6      	bhi.n	800480c <_printf_i+0x28>
 800481e:	a101      	add	r1, pc, #4	; (adr r1, 8004824 <_printf_i+0x40>)
 8004820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004824:	0800487d 	.word	0x0800487d
 8004828:	08004891 	.word	0x08004891
 800482c:	0800480d 	.word	0x0800480d
 8004830:	0800480d 	.word	0x0800480d
 8004834:	0800480d 	.word	0x0800480d
 8004838:	0800480d 	.word	0x0800480d
 800483c:	08004891 	.word	0x08004891
 8004840:	0800480d 	.word	0x0800480d
 8004844:	0800480d 	.word	0x0800480d
 8004848:	0800480d 	.word	0x0800480d
 800484c:	0800480d 	.word	0x0800480d
 8004850:	0800499d 	.word	0x0800499d
 8004854:	080048c1 	.word	0x080048c1
 8004858:	0800497f 	.word	0x0800497f
 800485c:	0800480d 	.word	0x0800480d
 8004860:	0800480d 	.word	0x0800480d
 8004864:	080049bf 	.word	0x080049bf
 8004868:	0800480d 	.word	0x0800480d
 800486c:	080048c1 	.word	0x080048c1
 8004870:	0800480d 	.word	0x0800480d
 8004874:	0800480d 	.word	0x0800480d
 8004878:	08004987 	.word	0x08004987
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	602a      	str	r2, [r5, #0]
 8004884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800488c:	2301      	movs	r3, #1
 800488e:	e0a3      	b.n	80049d8 <_printf_i+0x1f4>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	6829      	ldr	r1, [r5, #0]
 8004894:	0606      	lsls	r6, r0, #24
 8004896:	f101 0304 	add.w	r3, r1, #4
 800489a:	d50a      	bpl.n	80048b2 <_printf_i+0xce>
 800489c:	680e      	ldr	r6, [r1, #0]
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	2e00      	cmp	r6, #0
 80048a2:	da03      	bge.n	80048ac <_printf_i+0xc8>
 80048a4:	232d      	movs	r3, #45	; 0x2d
 80048a6:	4276      	negs	r6, r6
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ac:	485e      	ldr	r0, [pc, #376]	; (8004a28 <_printf_i+0x244>)
 80048ae:	230a      	movs	r3, #10
 80048b0:	e019      	b.n	80048e6 <_printf_i+0x102>
 80048b2:	680e      	ldr	r6, [r1, #0]
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048ba:	bf18      	it	ne
 80048bc:	b236      	sxthne	r6, r6
 80048be:	e7ef      	b.n	80048a0 <_printf_i+0xbc>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	1d19      	adds	r1, r3, #4
 80048c6:	6029      	str	r1, [r5, #0]
 80048c8:	0601      	lsls	r1, r0, #24
 80048ca:	d501      	bpl.n	80048d0 <_printf_i+0xec>
 80048cc:	681e      	ldr	r6, [r3, #0]
 80048ce:	e002      	b.n	80048d6 <_printf_i+0xf2>
 80048d0:	0646      	lsls	r6, r0, #25
 80048d2:	d5fb      	bpl.n	80048cc <_printf_i+0xe8>
 80048d4:	881e      	ldrh	r6, [r3, #0]
 80048d6:	4854      	ldr	r0, [pc, #336]	; (8004a28 <_printf_i+0x244>)
 80048d8:	2f6f      	cmp	r7, #111	; 0x6f
 80048da:	bf0c      	ite	eq
 80048dc:	2308      	moveq	r3, #8
 80048de:	230a      	movne	r3, #10
 80048e0:	2100      	movs	r1, #0
 80048e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e6:	6865      	ldr	r5, [r4, #4]
 80048e8:	60a5      	str	r5, [r4, #8]
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	bfa2      	ittt	ge
 80048ee:	6821      	ldrge	r1, [r4, #0]
 80048f0:	f021 0104 	bicge.w	r1, r1, #4
 80048f4:	6021      	strge	r1, [r4, #0]
 80048f6:	b90e      	cbnz	r6, 80048fc <_printf_i+0x118>
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	d04d      	beq.n	8004998 <_printf_i+0x1b4>
 80048fc:	4615      	mov	r5, r2
 80048fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004902:	fb03 6711 	mls	r7, r3, r1, r6
 8004906:	5dc7      	ldrb	r7, [r0, r7]
 8004908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800490c:	4637      	mov	r7, r6
 800490e:	42bb      	cmp	r3, r7
 8004910:	460e      	mov	r6, r1
 8004912:	d9f4      	bls.n	80048fe <_printf_i+0x11a>
 8004914:	2b08      	cmp	r3, #8
 8004916:	d10b      	bne.n	8004930 <_printf_i+0x14c>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	07de      	lsls	r6, r3, #31
 800491c:	d508      	bpl.n	8004930 <_printf_i+0x14c>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	6861      	ldr	r1, [r4, #4]
 8004922:	4299      	cmp	r1, r3
 8004924:	bfde      	ittt	le
 8004926:	2330      	movle	r3, #48	; 0x30
 8004928:	f805 3c01 	strble.w	r3, [r5, #-1]
 800492c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004930:	1b52      	subs	r2, r2, r5
 8004932:	6122      	str	r2, [r4, #16]
 8004934:	f8cd a000 	str.w	sl, [sp]
 8004938:	464b      	mov	r3, r9
 800493a:	aa03      	add	r2, sp, #12
 800493c:	4621      	mov	r1, r4
 800493e:	4640      	mov	r0, r8
 8004940:	f7ff fee2 	bl	8004708 <_printf_common>
 8004944:	3001      	adds	r0, #1
 8004946:	d14c      	bne.n	80049e2 <_printf_i+0x1fe>
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	b004      	add	sp, #16
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004952:	4835      	ldr	r0, [pc, #212]	; (8004a28 <_printf_i+0x244>)
 8004954:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004958:	6829      	ldr	r1, [r5, #0]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004960:	6029      	str	r1, [r5, #0]
 8004962:	061d      	lsls	r5, r3, #24
 8004964:	d514      	bpl.n	8004990 <_printf_i+0x1ac>
 8004966:	07df      	lsls	r7, r3, #31
 8004968:	bf44      	itt	mi
 800496a:	f043 0320 	orrmi.w	r3, r3, #32
 800496e:	6023      	strmi	r3, [r4, #0]
 8004970:	b91e      	cbnz	r6, 800497a <_printf_i+0x196>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f023 0320 	bic.w	r3, r3, #32
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	2310      	movs	r3, #16
 800497c:	e7b0      	b.n	80048e0 <_printf_i+0xfc>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	f043 0320 	orr.w	r3, r3, #32
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	2378      	movs	r3, #120	; 0x78
 8004988:	4828      	ldr	r0, [pc, #160]	; (8004a2c <_printf_i+0x248>)
 800498a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800498e:	e7e3      	b.n	8004958 <_printf_i+0x174>
 8004990:	0659      	lsls	r1, r3, #25
 8004992:	bf48      	it	mi
 8004994:	b2b6      	uxthmi	r6, r6
 8004996:	e7e6      	b.n	8004966 <_printf_i+0x182>
 8004998:	4615      	mov	r5, r2
 800499a:	e7bb      	b.n	8004914 <_printf_i+0x130>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	6826      	ldr	r6, [r4, #0]
 80049a0:	6961      	ldr	r1, [r4, #20]
 80049a2:	1d18      	adds	r0, r3, #4
 80049a4:	6028      	str	r0, [r5, #0]
 80049a6:	0635      	lsls	r5, r6, #24
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	d501      	bpl.n	80049b0 <_printf_i+0x1cc>
 80049ac:	6019      	str	r1, [r3, #0]
 80049ae:	e002      	b.n	80049b6 <_printf_i+0x1d2>
 80049b0:	0670      	lsls	r0, r6, #25
 80049b2:	d5fb      	bpl.n	80049ac <_printf_i+0x1c8>
 80049b4:	8019      	strh	r1, [r3, #0]
 80049b6:	2300      	movs	r3, #0
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	4615      	mov	r5, r2
 80049bc:	e7ba      	b.n	8004934 <_printf_i+0x150>
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	1d1a      	adds	r2, r3, #4
 80049c2:	602a      	str	r2, [r5, #0]
 80049c4:	681d      	ldr	r5, [r3, #0]
 80049c6:	6862      	ldr	r2, [r4, #4]
 80049c8:	2100      	movs	r1, #0
 80049ca:	4628      	mov	r0, r5
 80049cc:	f7fb fc20 	bl	8000210 <memchr>
 80049d0:	b108      	cbz	r0, 80049d6 <_printf_i+0x1f2>
 80049d2:	1b40      	subs	r0, r0, r5
 80049d4:	6060      	str	r0, [r4, #4]
 80049d6:	6863      	ldr	r3, [r4, #4]
 80049d8:	6123      	str	r3, [r4, #16]
 80049da:	2300      	movs	r3, #0
 80049dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e0:	e7a8      	b.n	8004934 <_printf_i+0x150>
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	462a      	mov	r2, r5
 80049e6:	4649      	mov	r1, r9
 80049e8:	4640      	mov	r0, r8
 80049ea:	47d0      	blx	sl
 80049ec:	3001      	adds	r0, #1
 80049ee:	d0ab      	beq.n	8004948 <_printf_i+0x164>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	079b      	lsls	r3, r3, #30
 80049f4:	d413      	bmi.n	8004a1e <_printf_i+0x23a>
 80049f6:	68e0      	ldr	r0, [r4, #12]
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	4298      	cmp	r0, r3
 80049fc:	bfb8      	it	lt
 80049fe:	4618      	movlt	r0, r3
 8004a00:	e7a4      	b.n	800494c <_printf_i+0x168>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4632      	mov	r2, r6
 8004a06:	4649      	mov	r1, r9
 8004a08:	4640      	mov	r0, r8
 8004a0a:	47d0      	blx	sl
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d09b      	beq.n	8004948 <_printf_i+0x164>
 8004a10:	3501      	adds	r5, #1
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	9903      	ldr	r1, [sp, #12]
 8004a16:	1a5b      	subs	r3, r3, r1
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	dcf2      	bgt.n	8004a02 <_printf_i+0x21e>
 8004a1c:	e7eb      	b.n	80049f6 <_printf_i+0x212>
 8004a1e:	2500      	movs	r5, #0
 8004a20:	f104 0619 	add.w	r6, r4, #25
 8004a24:	e7f5      	b.n	8004a12 <_printf_i+0x22e>
 8004a26:	bf00      	nop
 8004a28:	08004ca5 	.word	0x08004ca5
 8004a2c:	08004cb6 	.word	0x08004cb6

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d06      	ldr	r5, [pc, #24]	; (8004a4c <_sbrk_r+0x1c>)
 8004a34:	2300      	movs	r3, #0
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f7fc f916 	bl	8000c6c <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20000174 	.word	0x20000174

08004a50 <__sread>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	460c      	mov	r4, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	f000 f8a0 	bl	8004b9c <_read_r>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	bfab      	itete	ge
 8004a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a62:	89a3      	ldrhlt	r3, [r4, #12]
 8004a64:	181b      	addge	r3, r3, r0
 8004a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a6a:	bfac      	ite	ge
 8004a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a6e:	81a3      	strhlt	r3, [r4, #12]
 8004a70:	bd10      	pop	{r4, pc}

08004a72 <__swrite>:
 8004a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a76:	461f      	mov	r7, r3
 8004a78:	898b      	ldrh	r3, [r1, #12]
 8004a7a:	05db      	lsls	r3, r3, #23
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4616      	mov	r6, r2
 8004a82:	d505      	bpl.n	8004a90 <__swrite+0x1e>
 8004a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a88:	2302      	movs	r3, #2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f000 f868 	bl	8004b60 <_lseek_r>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	f000 b817 	b.w	8004ad8 <_write_r>

08004aaa <__sseek>:
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	460c      	mov	r4, r1
 8004aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab2:	f000 f855 	bl	8004b60 <_lseek_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	bf15      	itete	ne
 8004abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ac6:	81a3      	strheq	r3, [r4, #12]
 8004ac8:	bf18      	it	ne
 8004aca:	81a3      	strhne	r3, [r4, #12]
 8004acc:	bd10      	pop	{r4, pc}

08004ace <__sclose>:
 8004ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad2:	f000 b813 	b.w	8004afc <_close_r>
	...

08004ad8 <_write_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d07      	ldr	r5, [pc, #28]	; (8004af8 <_write_r+0x20>)
 8004adc:	4604      	mov	r4, r0
 8004ade:	4608      	mov	r0, r1
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	602a      	str	r2, [r5, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7fc f86f 	bl	8000bca <_write>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_write_r+0x1e>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_write_r+0x1e>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20000174 	.word	0x20000174

08004afc <_close_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d06      	ldr	r5, [pc, #24]	; (8004b18 <_close_r+0x1c>)
 8004b00:	2300      	movs	r3, #0
 8004b02:	4604      	mov	r4, r0
 8004b04:	4608      	mov	r0, r1
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	f7fc f87b 	bl	8000c02 <_close>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_close_r+0x1a>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_close_r+0x1a>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	20000174 	.word	0x20000174

08004b1c <_fstat_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4d07      	ldr	r5, [pc, #28]	; (8004b3c <_fstat_r+0x20>)
 8004b20:	2300      	movs	r3, #0
 8004b22:	4604      	mov	r4, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	f7fc f876 	bl	8000c1a <_fstat>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d102      	bne.n	8004b38 <_fstat_r+0x1c>
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	b103      	cbz	r3, 8004b38 <_fstat_r+0x1c>
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000174 	.word	0x20000174

08004b40 <_isatty_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d06      	ldr	r5, [pc, #24]	; (8004b5c <_isatty_r+0x1c>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	f7fc f875 	bl	8000c3a <_isatty>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_isatty_r+0x1a>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_isatty_r+0x1a>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000174 	.word	0x20000174

08004b60 <_lseek_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4d07      	ldr	r5, [pc, #28]	; (8004b80 <_lseek_r+0x20>)
 8004b64:	4604      	mov	r4, r0
 8004b66:	4608      	mov	r0, r1
 8004b68:	4611      	mov	r1, r2
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	602a      	str	r2, [r5, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f7fc f86e 	bl	8000c50 <_lseek>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_lseek_r+0x1e>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_lseek_r+0x1e>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	20000174 	.word	0x20000174

08004b84 <__malloc_lock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__malloc_lock+0x8>)
 8004b86:	f7ff bb1d 	b.w	80041c4 <__retarget_lock_acquire_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	20000168 	.word	0x20000168

08004b90 <__malloc_unlock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	; (8004b98 <__malloc_unlock+0x8>)
 8004b92:	f7ff bb18 	b.w	80041c6 <__retarget_lock_release_recursive>
 8004b96:	bf00      	nop
 8004b98:	20000168 	.word	0x20000168

08004b9c <_read_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4d07      	ldr	r5, [pc, #28]	; (8004bbc <_read_r+0x20>)
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	4608      	mov	r0, r1
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	602a      	str	r2, [r5, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f7fb fff0 	bl	8000b90 <_read>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_read_r+0x1e>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_read_r+0x1e>
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	20000174 	.word	0x20000174

08004bc0 <_init>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr

08004bcc <_fini>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr
