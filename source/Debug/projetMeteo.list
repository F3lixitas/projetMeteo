
projetMeteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005324  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055dc  080055dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055e0  080055e0  000155e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08005654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005654  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e787  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205f  00000000  00000000  0002e827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00030888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  000313b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265da  00000000  00000000  00031de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4af  00000000  00000000  000583ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e889c  00000000  00000000  00067869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003548  00000000  00000000  00150158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054dc 	.word	0x080054dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080054dc 	.word	0x080054dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b77      	ldr	r3, [pc, #476]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a76      	ldr	r2, [pc, #472]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a70      	ldr	r2, [pc, #448]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a6a      	ldr	r2, [pc, #424]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b65      	ldr	r3, [pc, #404]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a64      	ldr	r2, [pc, #400]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b62      	ldr	r3, [pc, #392]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a5e      	ldr	r2, [pc, #376]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7e:	4b59      	ldr	r3, [pc, #356]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a58      	ldr	r2, [pc, #352]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <MX_GPIO_Init+0x1f4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e9c:	4852      	ldr	r0, [pc, #328]	; (8000fe8 <MX_GPIO_Init+0x1f8>)
 8000e9e:	f000 ff9d 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2140      	movs	r1, #64	; 0x40
 8000ea6:	4851      	ldr	r0, [pc, #324]	; (8000fec <MX_GPIO_Init+0x1fc>)
 8000ea8:	f000 ff98 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	484b      	ldr	r0, [pc, #300]	; (8000ff0 <MX_GPIO_Init+0x200>)
 8000ec4:	f000 fdde 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ec8:	2332      	movs	r3, #50	; 0x32
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed8:	230b      	movs	r3, #11
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4843      	ldr	r0, [pc, #268]	; (8000ff0 <MX_GPIO_Init+0x200>)
 8000ee4:	f000 fdce 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ee8:	2386      	movs	r3, #134	; 0x86
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	483c      	ldr	r0, [pc, #240]	; (8000ff4 <MX_GPIO_Init+0x204>)
 8000f04:	f000 fdbe 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f08:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <MX_GPIO_Init+0x1f8>)
 8000f22:	f000 fdaf 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4829      	ldr	r0, [pc, #164]	; (8000fe8 <MX_GPIO_Init+0x1f8>)
 8000f44:	f000 fd9e 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f48:	2340      	movs	r3, #64	; 0x40
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4823      	ldr	r0, [pc, #140]	; (8000fec <MX_GPIO_Init+0x1fc>)
 8000f60:	f000 fd90 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	481d      	ldr	r0, [pc, #116]	; (8000fec <MX_GPIO_Init+0x1fc>)
 8000f78:	f000 fd84 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f7c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f8e:	230a      	movs	r3, #10
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4816      	ldr	r0, [pc, #88]	; (8000ff4 <MX_GPIO_Init+0x204>)
 8000f9a:	f000 fd73 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <MX_GPIO_Init+0x204>)
 8000fb4:	f000 fd66 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_GPIO_Init+0x1fc>)
 8000fd6:	f000 fd55 	bl	8001a84 <HAL_GPIO_Init>

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_I2C1_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_I2C1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_I2C1_Init+0x74>)
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <MX_I2C1_Init+0x7c>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_I2C1_Init+0x74>)
 8001010:	2201      	movs	r2, #1
 8001012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_I2C1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_I2C1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <MX_I2C1_Init+0x74>)
 8001034:	f000 feec 	bl	8001e10 <HAL_I2C_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800103e:	f000 f9f7 	bl	8001430 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <MX_I2C1_Init+0x74>)
 8001046:	f001 fc47 	bl	80028d8 <HAL_I2CEx_ConfigAnalogFilter>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001050:	f000 f9ee 	bl	8001430 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_I2C1_Init+0x74>)
 8001058:	f001 fc89 	bl	800296e <HAL_I2CEx_ConfigDigitalFilter>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001062:	f000 f9e5 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000008c 	.word	0x2000008c
 8001070:	40005400 	.word	0x40005400
 8001074:	00808cd2 	.word	0x00808cd2

08001078 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0aa      	sub	sp, #168	; 0xa8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2284      	movs	r2, #132	; 0x84
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fa89 	bl	80045b0 <memset>
  if(i2cHandle->Instance==I2C1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a22      	ldr	r2, [pc, #136]	; (800112c <HAL_I2C_MspInit+0xb4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d13c      	bne.n	8001122 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f980 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010c2:	f000 f9b5 	bl	8001430 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_I2C_MspInit+0xb8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_I2C_MspInit+0xb8>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_I2C_MspInit+0xb8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001102:	4619      	mov	r1, r3
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_I2C_MspInit+0xbc>)
 8001106:	f000 fcbd 	bl	8001a84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_I2C_MspInit+0xb8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_I2C_MspInit+0xb8>)
 8001110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_I2C_MspInit+0xb8>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	37a8      	adds	r7, #168	; 0xa8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40005400 	.word	0x40005400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020400 	.word	0x40020400

08001138 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001140:	1d39      	adds	r1, r7, #4
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2201      	movs	r2, #1
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <__io_putchar+0x20>)
 800114a:	f002 fd75 	bl	8003c38 <HAL_UART_Transmit>
	return ch;
 800114e:	687b      	ldr	r3, [r7, #4]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200000f4 	.word	0x200000f4

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f000 fb28 	bl	80017b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f8fb 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f7ff fe41 	bl	8000df0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800116e:	f000 fa69 	bl	8001644 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001172:	f7ff ff41 	bl	8000ff8 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  data = (uint8_t)(DATA_RATE_1Hz | PRESSURE_POWER_DOWN);
 8001176:	4b69      	ldr	r3, [pc, #420]	; (800131c <main+0x1c0>)
 8001178:	2290      	movs	r2, #144	; 0x90
 800117a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, PRESSURE_SENSOR_ADDR, 0x20, 1, &data, 1, 50);
 800117c:	2332      	movs	r3, #50	; 0x32
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	2301      	movs	r3, #1
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	4b65      	ldr	r3, [pc, #404]	; (800131c <main+0x1c0>)
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	2220      	movs	r2, #32
 800118c:	21ba      	movs	r1, #186	; 0xba
 800118e:	4864      	ldr	r0, [pc, #400]	; (8001320 <main+0x1c4>)
 8001190:	f000 fece 	bl	8001f30 <HAL_I2C_Mem_Write>
  data = 0;
 8001194:	4b61      	ldr	r3, [pc, #388]	; (800131c <main+0x1c0>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, PRESSURE_SENSOR_ADDR, 0x10, 1, &data, 1, 50);
 800119a:	2332      	movs	r3, #50	; 0x32
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <main+0x1c0>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	2210      	movs	r2, #16
 80011aa:	21ba      	movs	r1, #186	; 0xba
 80011ac:	485c      	ldr	r0, [pc, #368]	; (8001320 <main+0x1c4>)
 80011ae:	f000 febf 	bl	8001f30 <HAL_I2C_Mem_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f000 fb5b 	bl	8001870 <HAL_Delay>

	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x28, 1, &rawPressureData[0], 1, 50);
 80011ba:	2332      	movs	r3, #50	; 0x32
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	4b58      	ldr	r3, [pc, #352]	; (8001324 <main+0x1c8>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	2228      	movs	r2, #40	; 0x28
 80011ca:	21ba      	movs	r1, #186	; 0xba
 80011cc:	4854      	ldr	r0, [pc, #336]	; (8001320 <main+0x1c4>)
 80011ce:	f000 ffc3 	bl	8002158 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x29, 1, &rawPressureData[1], 1, 50);
 80011d2:	2332      	movs	r3, #50	; 0x32
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <main+0x1cc>)
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2229      	movs	r2, #41	; 0x29
 80011e2:	21ba      	movs	r1, #186	; 0xba
 80011e4:	484e      	ldr	r0, [pc, #312]	; (8001320 <main+0x1c4>)
 80011e6:	f000 ffb7 	bl	8002158 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x2A, 1, &rawPressureData[2], 1, 50);
 80011ea:	2332      	movs	r3, #50	; 0x32
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	4b4e      	ldr	r3, [pc, #312]	; (800132c <main+0x1d0>)
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2301      	movs	r3, #1
 80011f8:	222a      	movs	r2, #42	; 0x2a
 80011fa:	21ba      	movs	r1, #186	; 0xba
 80011fc:	4848      	ldr	r0, [pc, #288]	; (8001320 <main+0x1c4>)
 80011fe:	f000 ffab 	bl	8002158 <HAL_I2C_Mem_Read>

	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x2B, 1, &rawTemperatureData[0], 1, 50);
 8001202:	2332      	movs	r3, #50	; 0x32
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2301      	movs	r3, #1
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <main+0x1d4>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	222b      	movs	r2, #43	; 0x2b
 8001212:	21ba      	movs	r1, #186	; 0xba
 8001214:	4842      	ldr	r0, [pc, #264]	; (8001320 <main+0x1c4>)
 8001216:	f000 ff9f 	bl	8002158 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, PRESSURE_SENSOR_ADDR, 0x2C, 1, &rawTemperatureData[1], 1, 50);
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <main+0x1d8>)
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	222c      	movs	r2, #44	; 0x2c
 800122a:	21ba      	movs	r1, #186	; 0xba
 800122c:	483c      	ldr	r0, [pc, #240]	; (8001320 <main+0x1c4>)
 800122e:	f000 ff93 	bl	8002158 <HAL_I2C_Mem_Read>

	  pressureData = rawPressureData[0];
 8001232:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <main+0x1c8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <main+0x1dc>)
 800123a:	601a      	str	r2, [r3, #0]
	  pressureData |= (rawPressureData[1] << 8);
 800123c:	4b39      	ldr	r3, [pc, #228]	; (8001324 <main+0x1c8>)
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	021a      	lsls	r2, r3, #8
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <main+0x1dc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <main+0x1dc>)
 800124a:	6013      	str	r3, [r2, #0]
	  if(rawPressureData[2] & 0x80){
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <main+0x1c8>)
 800124e:	789b      	ldrb	r3, [r3, #2]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	da0e      	bge.n	8001274 <main+0x118>
		  pressureData |= (rawPressureData[2] << 16);
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <main+0x1c8>)
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <main+0x1dc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4313      	orrs	r3, r2
 8001262:	4a35      	ldr	r2, [pc, #212]	; (8001338 <main+0x1dc>)
 8001264:	6013      	str	r3, [r2, #0]
		  pressureData |= (0xFF << 24);
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <main+0x1dc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <main+0x1dc>)
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e007      	b.n	8001284 <main+0x128>
	  }else{
		  pressureData |= (rawPressureData[2] << 16);
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <main+0x1c8>)
 8001276:	789b      	ldrb	r3, [r3, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <main+0x1dc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <main+0x1dc>)
 8001282:	6013      	str	r3, [r2, #0]
	  }
	  pressure = pressureData/4096.0;
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <main+0x1dc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f963 	bl	8000554 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <main+0x1e0>)
 8001294:	f7ff faf2 	bl	800087c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fbd4 	bl	8000a4c <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <main+0x1e4>)
 80012a8:	6013      	str	r3, [r2, #0]

	  temperatureData = rawTemperatureData[0] + (rawTemperatureData[1] << 8);
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <main+0x1d4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <main+0x1d4>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b21a      	sxth	r2, r3
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <main+0x1e8>)
 80012c2:	801a      	strh	r2, [r3, #0]
	  temperature = 42.5 + temperatureData/480.0;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <main+0x1e8>)
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f942 	bl	8000554 <__aeabi_i2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <main+0x1ec>)
 80012d6:	f7ff fad1 	bl	800087c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <main+0x1f0>)
 80012e8:	f7fe ffe8 	bl	80002bc <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fbaa 	bl	8000a4c <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <main+0x1f4>)
 80012fc:	6013      	str	r3, [r2, #0]

	  if(ret != HAL_OK){
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <main+0x1f8>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <main+0x1b2>
		  printf("[CONNECTION ERROR] Unable to get data");
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <main+0x1fc>)
 8001308:	f003 f95a 	bl	80045c0 <iprintf>
 800130c:	e751      	b.n	80011b2 <main+0x56>
	  }
	  else{
		  printf("%d\n\r", data);
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <main+0x1c0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	4811      	ldr	r0, [pc, #68]	; (800135c <main+0x200>)
 8001316:	f003 f953 	bl	80045c0 <iprintf>
	  HAL_Delay(1000);
 800131a:	e74a      	b.n	80011b2 <main+0x56>
 800131c:	200000d9 	.word	0x200000d9
 8001320:	2000008c 	.word	0x2000008c
 8001324:	200000dc 	.word	0x200000dc
 8001328:	200000dd 	.word	0x200000dd
 800132c:	200000de 	.word	0x200000de
 8001330:	200000e8 	.word	0x200000e8
 8001334:	200000e9 	.word	0x200000e9
 8001338:	200000e0 	.word	0x200000e0
 800133c:	40b00000 	.word	0x40b00000
 8001340:	200000e4 	.word	0x200000e4
 8001344:	200000ea 	.word	0x200000ea
 8001348:	407e0000 	.word	0x407e0000
 800134c:	40454000 	.word	0x40454000
 8001350:	200000ec 	.word	0x200000ec
 8001354:	200000d8 	.word	0x200000d8
 8001358:	080054f4 	.word	0x080054f4
 800135c:	0800551c 	.word	0x0800551c

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2230      	movs	r2, #48	; 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f003 f91e 	bl	80045b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001384:	f001 fb40 	bl	8002a08 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <SystemClock_Config+0xc8>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <SystemClock_Config+0xc8>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <SystemClock_Config+0xc8>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <SystemClock_Config+0xcc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a8:	4a20      	ldr	r2, [pc, #128]	; (800142c <SystemClock_Config+0xcc>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <SystemClock_Config+0xcc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013bc:	2301      	movs	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c6:	2302      	movs	r3, #2
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013d4:	2348      	movs	r3, #72	; 0x48
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d8:	2302      	movs	r3, #2
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013dc:	2303      	movs	r3, #3
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fb1f 	bl	8002a28 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013f0:	f000 f81e 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2102      	movs	r1, #2
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fdad 	bl	8002f70 <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800141c:	f000 f808 	bl	8001430 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	3750      	adds	r7, #80	; 0x50
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x44>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_MspInit+0x44>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x44>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x44>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x44>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x44>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f9ae 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ea:	f3af 8000 	nop.w
 80014ee:	4601      	mov	r1, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf0      	blt.n	80014ea <_read+0x12>
	}

return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e009      	b.n	8001538 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fe03 	bl	8001138 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf1      	blt.n	8001524 <_write+0x12>
	}
	return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_close>:

int _close(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	605a      	str	r2, [r3, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f002 ffba 	bl	800455c <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20050000 	.word	0x20050000
 8001614:	00000400 	.word	0x00000400
 8001618:	200000f0 	.word	0x200000f0
 800161c:	20000190 	.word	0x20000190

08001620 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_USART3_UART_Init+0x58>)
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_USART3_UART_Init+0x5c>)
 800164c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_USART3_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART3_UART_Init+0x58>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART3_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART3_UART_Init+0x58>)
 8001688:	f002 fa88 	bl	8003b9c <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001692:	f7ff fecd 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000f4 	.word	0x200000f4
 80016a0:	40004800 	.word	0x40004800

080016a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0aa      	sub	sp, #168	; 0xa8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	2284      	movs	r2, #132	; 0x84
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 ff73 	bl	80045b0 <memset>
  if(uartHandle->Instance==USART3)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_UART_MspInit+0xb4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d13c      	bne.n	800174e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016da:	2300      	movs	r3, #0
 80016dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fe6a 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016ee:	f7ff fe9f 	bl	8001430 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_UART_MspInit+0xb8>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_UART_MspInit+0xb8>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_UART_MspInit+0xb8>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_UART_MspInit+0xb8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_UART_MspInit+0xb8>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_UART_MspInit+0xb8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800173c:	2307      	movs	r3, #7
 800173e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_UART_MspInit+0xbc>)
 800174a:	f000 f99b 	bl	8001a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800174e:	bf00      	nop
 8001750:	37a8      	adds	r7, #168	; 0xa8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40004800 	.word	0x40004800
 800175c:	40023800 	.word	0x40023800
 8001760:	40020c00 	.word	0x40020c00

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176a:	490e      	ldr	r1, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001780:	4c0b      	ldr	r4, [pc, #44]	; (80017b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800178e:	f7ff ff47 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f002 fee9 	bl	8004568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fce1 	bl	800115c <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017a8:	080055e4 	.word	0x080055e4
  ldr r2, =_sbss
 80017ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017b0:	2000018c 	.word	0x2000018c

080017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>

080017b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ba:	2003      	movs	r0, #3
 80017bc:	f000 f92e 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 f805 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c6:	f7ff fe39 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f93b 	bl	8001a6a <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f911 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000000 	.word	0x20000000
 8001828:	20000008 	.word	0x20000008
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008
 8001854:	20000178 	.word	0x20000178

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000178 	.word	0x20000178

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	05fa0000 	.word	0x05fa0000

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	; (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff47 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff5c 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff8e 	bl	8001970 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffb0 	bl	80019d8 <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e175      	b.n	8001d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8164 	bne.w	8001d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_GPIO_Init+0x56>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d130      	bne.n	8001b3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0201 	and.w	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d017      	beq.n	8001b78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80be 	beq.w	8001d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <HAL_GPIO_Init+0x324>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <HAL_GPIO_Init+0x324>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_GPIO_Init+0x324>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c26:	4a61      	ldr	r2, [pc, #388]	; (8001dac <HAL_GPIO_Init+0x328>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_GPIO_Init+0x32c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d037      	beq.n	8001cc2 <HAL_GPIO_Init+0x23e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a57      	ldr	r2, [pc, #348]	; (8001db4 <HAL_GPIO_Init+0x330>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d031      	beq.n	8001cbe <HAL_GPIO_Init+0x23a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a56      	ldr	r2, [pc, #344]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02b      	beq.n	8001cba <HAL_GPIO_Init+0x236>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a55      	ldr	r2, [pc, #340]	; (8001dbc <HAL_GPIO_Init+0x338>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_Init+0x232>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a54      	ldr	r2, [pc, #336]	; (8001dc0 <HAL_GPIO_Init+0x33c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_Init+0x22e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a53      	ldr	r2, [pc, #332]	; (8001dc4 <HAL_GPIO_Init+0x340>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x22a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_GPIO_Init+0x344>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x226>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <HAL_GPIO_Init+0x348>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x222>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <HAL_GPIO_Init+0x34c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x21e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x21a>
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	e012      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	e010      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	e00e      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e00c      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e00a      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e008      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f002 0203 	and.w	r2, r2, #3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cd4:	4935      	ldr	r1, [pc, #212]	; (8001dac <HAL_GPIO_Init+0x328>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a34      	ldr	r2, [pc, #208]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	f67f ae86 	bls.w	8001aa4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40013800 	.word	0x40013800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40021400 	.word	0x40021400
 8001dc8:	40021800 	.word	0x40021800
 8001dcc:	40021c00 	.word	0x40021c00
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40022400 	.word	0x40022400
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff f91e 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	; 0x24
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e006      	b.n	8001e98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d104      	bne.n	8001eaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_I2C_Init+0x11c>)
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69d9      	ldr	r1, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	02008000 	.word	0x02008000

08001f30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	460b      	mov	r3, r1
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	f040 80f9 	bne.w	800214a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x34>
 8001f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0ed      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Mem_Write+0x4e>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0e6      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f86:	f7ff fc67 	bl	8001858 <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2319      	movs	r3, #25
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fac3 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d1      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2221      	movs	r2, #33	; 0x21
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fd0:	88f8      	ldrh	r0, [r7, #6]
 8001fd2:	893a      	ldrh	r2, [r7, #8]
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4603      	mov	r3, r0
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f9d3 	bl	800238c <I2C_RequestMemoryWrite>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0a9      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d90e      	bls.n	8002020 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	22ff      	movs	r2, #255	; 0xff
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	b2da      	uxtb	r2, r3
 800200e:	8979      	ldrh	r1, [r7, #10]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fc2b 	bl	8002874 <I2C_TransferConfig>
 800201e:	e00f      	b.n	8002040 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	b2da      	uxtb	r2, r3
 8002030:	8979      	ldrh	r1, [r7, #10]
 8002032:	2300      	movs	r3, #0
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fc1a 	bl	8002874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 faad 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e07b      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d034      	beq.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d130      	bne.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	2200      	movs	r2, #0
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fa3f 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04d      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d90e      	bls.n	80020d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fbcf 	bl	8002874 <I2C_TransferConfig>
 80020d6:	e00f      	b.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	2300      	movs	r3, #0
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fbbe 	bl	8002874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d19e      	bne.n	8002040 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fa8c 	bl	8002624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e01a      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2220      	movs	r2, #32
 800211c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_I2C_Mem_Write+0x224>)
 800212a:	400b      	ands	r3, r1
 800212c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
  }
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	fe00e800 	.word	0xfe00e800

08002158 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	817b      	strh	r3, [r7, #10]
 800216a:	460b      	mov	r3, r1
 800216c:	813b      	strh	r3, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	f040 80fd 	bne.w	800237a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_I2C_Mem_Read+0x34>
 8002186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0f1      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_I2C_Mem_Read+0x4e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e0ea      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021ae:	f7ff fb53 	bl	8001858 <HAL_GetTick>
 80021b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2319      	movs	r3, #25
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f9af 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0d5      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2222      	movs	r2, #34	; 0x22
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f8:	88f8      	ldrh	r0, [r7, #6]
 80021fa:	893a      	ldrh	r2, [r7, #8]
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4603      	mov	r3, r0
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f913 	bl	8002434 <I2C_RequestMemoryRead>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0ad      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d90e      	bls.n	8002248 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	22ff      	movs	r2, #255	; 0xff
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	b2da      	uxtb	r2, r3
 8002236:	8979      	ldrh	r1, [r7, #10]
 8002238:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_I2C_Mem_Read+0x22c>)
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fb17 	bl	8002874 <I2C_TransferConfig>
 8002246:	e00f      	b.n	8002268 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	b2da      	uxtb	r2, r3
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_I2C_Mem_Read+0x22c>)
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fb06 	bl	8002874 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	2200      	movs	r2, #0
 8002270:	2104      	movs	r1, #4
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f956 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07c      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d034      	beq.n	8002328 <HAL_I2C_Mem_Read+0x1d0>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d130      	bne.n	8002328 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	2200      	movs	r2, #0
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f927 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e04d      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d90e      	bls.n	8002308 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	8979      	ldrh	r1, [r7, #10]
 80022f8:	2300      	movs	r3, #0
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fab7 	bl	8002874 <I2C_TransferConfig>
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	2300      	movs	r3, #0
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 faa6 	bl	8002874 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d19a      	bne.n	8002268 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f974 	bl	8002624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e01a      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2220      	movs	r2, #32
 800234c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_I2C_Mem_Read+0x230>)
 800235a:	400b      	ands	r3, r1
 800235c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	80002400 	.word	0x80002400
 8002388:	fe00e800 	.word	0xfe00e800

0800238c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	8979      	ldrh	r1, [r7, #10]
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <I2C_RequestMemoryWrite+0xa4>)
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fa5d 	bl	8002874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8f0 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e02c      	b.n	8002428 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023d4:	893b      	ldrh	r3, [r7, #8]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
 80023de:	e015      	b.n	800240c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023e0:	893b      	ldrh	r3, [r7, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	69b9      	ldr	r1, [r7, #24]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f8d6 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e012      	b.n	8002428 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002402:	893b      	ldrh	r3, [r7, #8]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2200      	movs	r2, #0
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f884 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	80002000 	.word	0x80002000

08002434 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	8979      	ldrh	r1, [r7, #10]
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <I2C_RequestMemoryRead+0xa4>)
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa0a 	bl	8002874 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f89d 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e02c      	b.n	80024ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800247a:	893b      	ldrh	r3, [r7, #8]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
 8002484:	e015      	b.n	80024b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002486:	893b      	ldrh	r3, [r7, #8]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b29b      	uxth	r3, r3
 800248c:	b2da      	uxtb	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f883 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e012      	b.n	80024ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024a8:	893b      	ldrh	r3, [r7, #8]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f831 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	80002000 	.word	0x80002000

080024dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d103      	bne.n	80024fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d007      	beq.n	8002518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	619a      	str	r2, [r3, #24]
  }
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	e022      	b.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d01e      	beq.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f98b 	bl	8001858 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e00f      	b.n	800259c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d0cd      	beq.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025b0:	e02c      	b.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f870 	bl	800269c <I2C_IsErrorOccurred>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e02a      	b.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d01e      	beq.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7ff f943 	bl	8001858 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d113      	bne.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e007      	b.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d1cb      	bne.n	80025b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002630:	e028      	b.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f830 	bl	800269c <I2C_IsErrorOccurred>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e026      	b.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7ff f907 	bl	8001858 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d113      	bne.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e007      	b.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b20      	cmp	r3, #32
 8002690:	d1cf      	bne.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d075      	beq.n	80027b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2210      	movs	r2, #16
 80026ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026d0:	e056      	b.n	8002780 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d052      	beq.n	8002780 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7ff f8bd 	bl	8001858 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_IsErrorOccurred+0x54>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d147      	bne.n	8002780 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002702:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002712:	d12e      	bne.n	8002772 <I2C_IsErrorOccurred+0xd6>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800271a:	d02a      	beq.n	8002772 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	2b20      	cmp	r3, #32
 8002720:	d027      	beq.n	8002772 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002730:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002732:	f7ff f891 	bl	8001858 <HAL_GetTick>
 8002736:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002738:	e01b      	b.n	8002772 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800273a:	f7ff f88d 	bl	8001858 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b19      	cmp	r3, #25
 8002746:	d914      	bls.n	8002772 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d1dc      	bne.n	800273a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b20      	cmp	r3, #32
 800278c:	d003      	beq.n	8002796 <I2C_IsErrorOccurred+0xfa>
 800278e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002792:	2b00      	cmp	r3, #0
 8002794:	d09d      	beq.n	80026d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2220      	movs	r2, #32
 80027a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f043 0308 	orr.w	r3, r3, #8
 80027ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01c      	beq.n	8002864 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fe56 	bl	80024dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <I2C_IsErrorOccurred+0x1d4>)
 800283c:	400b      	ands	r3, r1
 800283e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002868:	4618      	mov	r0, r3
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	fe00e800 	.word	0xfe00e800

08002874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	817b      	strh	r3, [r7, #10]
 8002882:	4613      	mov	r3, r2
 8002884:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800288c:	7a7b      	ldrb	r3, [r7, #9]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002894:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	4313      	orrs	r3, r2
 800289e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028a2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	0d5b      	lsrs	r3, r3, #21
 80028ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <I2C_TransferConfig+0x60>)
 80028b4:	430b      	orrs	r3, r1
 80028b6:	43db      	mvns	r3, r3
 80028b8:	ea02 0103 	and.w	r1, r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	03ff63ff 	.word	0x03ff63ff

080028d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d138      	bne.n	8002960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e032      	b.n	8002962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800292a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	e000      	b.n	8002962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b20      	cmp	r3, #32
 8002982:	d139      	bne.n	80029f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800298e:	2302      	movs	r3, #2
 8002990:	e033      	b.n	80029fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2224      	movs	r2, #36	; 0x24
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40007000 	.word	0x40007000

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e291      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8087 	beq.w	8002b5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4c:	4b96      	ldr	r3, [pc, #600]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a58:	4b93      	ldr	r3, [pc, #588]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d112      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62>
 8002a64:	4b90      	ldr	r3, [pc, #576]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	4b8d      	ldr	r3, [pc, #564]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x130>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d168      	bne.n	8002b58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e26b      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x7a>
 8002a94:	4b84      	ldr	r3, [pc, #528]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a83      	ldr	r2, [pc, #524]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e02e      	b.n	8002b00 <HAL_RCC_OscConfig+0xd8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x9c>
 8002aaa:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7e      	ldr	r2, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7b      	ldr	r2, [pc, #492]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xd8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002ace:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a75      	ldr	r2, [pc, #468]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b73      	ldr	r3, [pc, #460]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a72      	ldr	r2, [pc, #456]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xd8>
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6e      	ldr	r2, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6b      	ldr	r2, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fea6 	bl	8001858 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fea2 	bl	8001858 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e21f      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fe92 	bl	8001858 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fe8e 	bl	8001858 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e20b      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x110>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d069      	beq.n	8002c3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x190>
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x17a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1df      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	493d      	ldr	r1, [pc, #244]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e040      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d023      	beq.n	8002c08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a38      	ldr	r2, [pc, #224]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fe44 	bl	8001858 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fe40 	bl	8001858 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1bd      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4929      	ldr	r1, [pc, #164]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
 8002c06:	e018      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a26      	ldr	r2, [pc, #152]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fe20 	bl	8001858 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7fe fe1c 	bl	8001858 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e199      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d038      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d019      	beq.n	8002c82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fdfd 	bl	8001858 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe fdf9 	bl	8001858 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e176      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x23a>
 8002c80:	e01a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x280>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fde3 	bl	8001858 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe fddf 	bl	8001858 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d903      	bls.n	8002cac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e15c      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
 8002ca8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b91      	ldr	r3, [pc, #580]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ee      	bne.n	8002c96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80a4 	beq.w	8002e0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCC_OscConfig+0x4d0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d06:	f7fe fda7 	bl	8001858 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7fe fda3 	bl	8001858 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b64      	cmp	r3, #100	; 0x64
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e120      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x31a>
 8002d34:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d40:	e02d      	b.n	8002d9e <HAL_RCC_OscConfig+0x376>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x33c>
 8002d4a:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a69      	ldr	r2, [pc, #420]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a66      	ldr	r2, [pc, #408]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
 8002d62:	e01c      	b.n	8002d9e <HAL_RCC_OscConfig+0x376>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0x35e>
 8002d6c:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a60      	ldr	r2, [pc, #384]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6713      	str	r3, [r2, #112]	; 0x70
 8002d84:	e00b      	b.n	8002d9e <HAL_RCC_OscConfig+0x376>
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a5a      	ldr	r2, [pc, #360]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da6:	f7fe fd57 	bl	8001858 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe fd53 	bl	8001858 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0ce      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ee      	beq.n	8002dae <HAL_RCC_OscConfig+0x386>
 8002dd0:	e014      	b.n	8002dfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fd41 	bl	8001858 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe fd3d 	bl	8001858 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0b8      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ee      	bne.n	8002dda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e02:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80a4 	beq.w	8002f60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d06b      	beq.n	8002efc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d149      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fd0e 	bl	8001858 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe fd0a 	bl	8001858 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e087      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	019b      	lsls	r3, r3, #6
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	3b01      	subs	r3, #1
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	4313      	orrs	r3, r2
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fcde 	bl	8001858 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fcda 	bl	8001858 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e057      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x478>
 8002ebe:	e04f      	b.n	8002f60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fcc4 	bl	8001858 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe fcc0 	bl	8001858 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e03d      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4ac>
 8002ef2:	e035      	b.n	8002f60 <HAL_RCC_OscConfig+0x538>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x544>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d028      	beq.n	8002f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d121      	bne.n	8002f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d11a      	bne.n	8002f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d111      	bne.n	8002f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	3b01      	subs	r3, #1
 8002f46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe fbf8 	bl	8001858 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fbf4 	bl	8001858 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1cc>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1d0>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fb54 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023c00 	.word	0x40023c00
 8003138:	40023800 	.word	0x40023800
 800313c:	08005524 	.word	0x08005524
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800314c:	b094      	sub	sp, #80	; 0x50
 800314e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	647b      	str	r3, [r7, #68]	; 0x44
 8003154:	2300      	movs	r3, #0
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003158:	2300      	movs	r3, #0
 800315a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003160:	4b79      	ldr	r3, [pc, #484]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d00d      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x40>
 800316c:	2b08      	cmp	r3, #8
 800316e:	f200 80e1 	bhi.w	8003334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x34>
 8003176:	2b04      	cmp	r3, #4
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x3a>
 800317a:	e0db      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b73      	ldr	r3, [pc, #460]	; (800334c <HAL_RCC_GetSysClockFreq+0x204>)
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003180:	e0db      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_RCC_GetSysClockFreq+0x208>)
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003186:	e0d8      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003192:	4b6d      	ldr	r3, [pc, #436]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	2200      	movs	r2, #0
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
 80031b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ba:	4622      	mov	r2, r4
 80031bc:	462b      	mov	r3, r5
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	0159      	lsls	r1, r3, #5
 80031c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031cc:	0150      	lsls	r0, r2, #5
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4621      	mov	r1, r4
 80031d4:	1a51      	subs	r1, r2, r1
 80031d6:	6139      	str	r1, [r7, #16]
 80031d8:	4629      	mov	r1, r5
 80031da:	eb63 0301 	sbc.w	r3, r3, r1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ec:	4659      	mov	r1, fp
 80031ee:	018b      	lsls	r3, r1, #6
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031f6:	4651      	mov	r1, sl
 80031f8:	018a      	lsls	r2, r1, #6
 80031fa:	4651      	mov	r1, sl
 80031fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003200:	4659      	mov	r1, fp
 8003202:	eb63 0901 	sbc.w	r9, r3, r1
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800321a:	4690      	mov	r8, r2
 800321c:	4699      	mov	r9, r3
 800321e:	4623      	mov	r3, r4
 8003220:	eb18 0303 	adds.w	r3, r8, r3
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	462b      	mov	r3, r5
 8003228:	eb49 0303 	adc.w	r3, r9, r3
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800323a:	4629      	mov	r1, r5
 800323c:	024b      	lsls	r3, r1, #9
 800323e:	4621      	mov	r1, r4
 8003240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003244:	4621      	mov	r1, r4
 8003246:	024a      	lsls	r2, r1, #9
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324e:	2200      	movs	r2, #0
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
 8003252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003258:	f7fd fc48 	bl	8000aec <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003264:	e058      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003266:	4b38      	ldr	r3, [pc, #224]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	2200      	movs	r2, #0
 800326e:	4618      	mov	r0, r3
 8003270:	4611      	mov	r1, r2
 8003272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	0159      	lsls	r1, r3, #5
 800328e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003292:	0150      	lsls	r0, r2, #5
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4641      	mov	r1, r8
 800329a:	ebb2 0a01 	subs.w	sl, r2, r1
 800329e:	4649      	mov	r1, r9
 80032a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032b8:	ebb2 040a 	subs.w	r4, r2, sl
 80032bc:	eb63 050b 	sbc.w	r5, r3, fp
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	00eb      	lsls	r3, r5, #3
 80032ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ce:	00e2      	lsls	r2, r4, #3
 80032d0:	4614      	mov	r4, r2
 80032d2:	461d      	mov	r5, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	18e3      	adds	r3, r4, r3
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	464b      	mov	r3, r9
 80032dc:	eb45 0303 	adc.w	r3, r5, r3
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ee:	4629      	mov	r1, r5
 80032f0:	028b      	lsls	r3, r1, #10
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f8:	4621      	mov	r1, r4
 80032fa:	028a      	lsls	r2, r1, #10
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003302:	2200      	movs	r2, #0
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	61fa      	str	r2, [r7, #28]
 8003308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800330c:	f7fd fbee 	bl	8000aec <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_GetSysClockFreq+0x200>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetSysClockFreq+0x204>)
 8003336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800333c:	4618      	mov	r0, r3
 800333e:	3750      	adds	r7, #80	; 0x50
 8003340:	46bd      	mov	sp, r7
 8003342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	00f42400 	.word	0x00f42400
 8003350:	007a1200 	.word	0x007a1200

08003354 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	08005534 	.word	0x08005534

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003398:	f7ff ffdc 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0b5b      	lsrs	r3, r3, #13
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08005534 	.word	0x08005534

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033e4:	4b69      	ldr	r3, [pc, #420]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a68      	ldr	r2, [pc, #416]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033ee:	6093      	str	r3, [r2, #8]
 80033f0:	4b66      	ldr	r3, [pc, #408]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	4964      	ldr	r1, [pc, #400]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d017      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800341c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	4959      	ldr	r1, [pc, #356]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003434:	d101      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003442:	2301      	movs	r3, #1
 8003444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d017      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003452:	4b4e      	ldr	r3, [pc, #312]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	494a      	ldr	r1, [pc, #296]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 808b 	beq.w	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b3a      	ldr	r3, [pc, #232]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	4a39      	ldr	r2, [pc, #228]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6413      	str	r3, [r2, #64]	; 0x40
 80034ac:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a34      	ldr	r2, [pc, #208]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c4:	f7fe f9c8 	bl	8001858 <HAL_GetTick>
 80034c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034cc:	f7fe f9c4 	bl	8001858 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e357      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d035      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d02e      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003508:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003510:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800352a:	4a18      	ldr	r2, [pc, #96]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003530:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d114      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe f98c 	bl	8001858 <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe f988 	bl	8001858 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e319      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ee      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003572:	d111      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003582:	400b      	ands	r3, r1
 8003584:	4901      	ldr	r1, [pc, #4]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
 800358a:	e00b      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800358c:	40023800 	.word	0x40023800
 8003590:	40007000 	.word	0x40007000
 8003594:	0ffffcff 	.word	0x0ffffcff
 8003598:	4baa      	ldr	r3, [pc, #680]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4aa9      	ldr	r2, [pc, #676]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035a2:	6093      	str	r3, [r2, #8]
 80035a4:	4ba7      	ldr	r3, [pc, #668]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b0:	49a4      	ldr	r1, [pc, #656]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d010      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035c2:	4ba0      	ldr	r3, [pc, #640]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c8:	4a9e      	ldr	r2, [pc, #632]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035d2:	4b9c      	ldr	r3, [pc, #624]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	4999      	ldr	r1, [pc, #612]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f0:	4b94      	ldr	r3, [pc, #592]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035fe:	4991      	ldr	r1, [pc, #580]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003612:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003620:	4988      	ldr	r1, [pc, #544]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003634:	4b83      	ldr	r3, [pc, #524]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	4980      	ldr	r1, [pc, #512]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003656:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4977      	ldr	r1, [pc, #476]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003678:	4b72      	ldr	r3, [pc, #456]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f023 0203 	bic.w	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	496f      	ldr	r1, [pc, #444]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800369a:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f023 020c 	bic.w	r2, r3, #12
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	4966      	ldr	r1, [pc, #408]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036bc:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	495e      	ldr	r1, [pc, #376]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	4955      	ldr	r1, [pc, #340]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	494d      	ldr	r1, [pc, #308]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	4944      	ldr	r1, [pc, #272]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	493c      	ldr	r1, [pc, #240]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003766:	4b37      	ldr	r3, [pc, #220]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003774:	4933      	ldr	r1, [pc, #204]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003796:	492b      	ldr	r1, [pc, #172]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b8:	4922      	ldr	r1, [pc, #136]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c8:	d101      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	4912      	ldr	r1, [pc, #72]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381c:	4909      	ldr	r1, [pc, #36]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d006      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80d9 	beq.w	80039ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003838:	4b02      	ldr	r3, [pc, #8]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a01      	ldr	r2, [pc, #4]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003844:	40023800 	.word	0x40023800
 8003848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384a:	f7fe f805 	bl	8001858 <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003852:	f7fe f801 	bl	8001858 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b64      	cmp	r3, #100	; 0x64
 800385e:	d901      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e194      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003864:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d021      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11d      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003884:	4b64      	ldr	r3, [pc, #400]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003892:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003898:	0e1b      	lsrs	r3, r3, #24
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	019a      	lsls	r2, r3, #6
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	061b      	lsls	r3, r3, #24
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	071b      	lsls	r3, r3, #28
 80038b8:	4957      	ldr	r1, [pc, #348]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d02e      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ea:	d129      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038ec:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003900:	0f1b      	lsrs	r3, r3, #28
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	019a      	lsls	r2, r3, #6
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	431a      	orrs	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	071b      	lsls	r3, r3, #28
 8003920:	493d      	ldr	r1, [pc, #244]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392e:	f023 021f 	bic.w	r2, r3, #31
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	3b01      	subs	r3, #1
 8003938:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01d      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003952:	0e1b      	lsrs	r3, r3, #24
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800395c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003960:	0f1b      	lsrs	r3, r3, #28
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	019a      	lsls	r2, r3, #6
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	431a      	orrs	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	071b      	lsls	r3, r3, #28
 8003980:	4925      	ldr	r1, [pc, #148]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d011      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	019a      	lsls	r2, r3, #6
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	071b      	lsls	r3, r3, #28
 80039b0:	4919      	ldr	r1, [pc, #100]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039b8:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fd ff48 	bl	8001858 <HAL_GetTick>
 80039c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039cc:	f7fd ff44 	bl	8001858 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0d7      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 80cd 	bne.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fe:	f7fd ff2b 	bl	8001858 <HAL_GetTick>
 8003a02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a06:	f7fd ff27 	bl	8001858 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	; 0x64
 8003a12:	d903      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e0ba      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a1c:	4b5e      	ldr	r3, [pc, #376]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a28:	d0ed      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d12a      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a52:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a60:	4b4d      	ldr	r3, [pc, #308]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	0f1b      	lsrs	r3, r3, #28
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4944      	ldr	r1, [pc, #272]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a8e:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	493d      	ldr	r1, [pc, #244]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d022      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abc:	d11d      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	0e1b      	lsrs	r3, r3, #24
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003acc:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	0f1b      	lsrs	r3, r3, #28
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	019a      	lsls	r2, r3, #6
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	071b      	lsls	r3, r3, #28
 8003af2:	4929      	ldr	r1, [pc, #164]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d028      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	0e1b      	lsrs	r3, r3, #24
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b14:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	019a      	lsls	r2, r3, #6
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	061b      	lsls	r3, r3, #24
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	071b      	lsls	r3, r3, #28
 8003b3a:	4917      	ldr	r1, [pc, #92]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	4911      	ldr	r1, [pc, #68]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b64:	f7fd fe78 	bl	8001858 <HAL_GetTick>
 8003b68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b6c:	f7fd fe74 	bl	8001858 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e007      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b8a:	d1ef      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800

08003b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e040      	b.n	8003c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fd70 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8c0 	bl	8003d60 <UART_SetConfig>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e022      	b.n	8003c30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fb18 	bl	8004228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fb9f 	bl	800436c <UART_CheckIdleState>
 8003c2e:	4603      	mov	r3, r0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	f040 8081 	bne.w	8003d54 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_Transmit+0x26>
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e079      	b.n	8003d56 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit+0x38>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e072      	b.n	8003d56 <HAL_UART_Transmit+0x11e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fd fde7 	bl	8001858 <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_UART_Transmit+0x80>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e003      	b.n	8003cc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003cc8:	e02c      	b.n	8003d24 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fb7c 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e038      	b.n	8003d56 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e007      	b.n	8003d12 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1cc      	bne.n	8003cca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fb49 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e005      	b.n	8003d56 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4ba6      	ldr	r3, [pc, #664]	; (8004024 <UART_SetConfig+0x2c4>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	6979      	ldr	r1, [r7, #20]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a94      	ldr	r2, [pc, #592]	; (8004028 <UART_SetConfig+0x2c8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d120      	bne.n	8003e1e <UART_SetConfig+0xbe>
 8003ddc:	4b93      	ldr	r3, [pc, #588]	; (800402c <UART_SetConfig+0x2cc>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d816      	bhi.n	8003e18 <UART_SetConfig+0xb8>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x90>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e0d 	.word	0x08003e0d
 8003df8:	08003e07 	.word	0x08003e07
 8003dfc:	08003e13 	.word	0x08003e13
 8003e00:	2301      	movs	r3, #1
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e150      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e06:	2302      	movs	r3, #2
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e14d      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e14a      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e12:	2308      	movs	r3, #8
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e147      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e144      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a83      	ldr	r2, [pc, #524]	; (8004030 <UART_SetConfig+0x2d0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d132      	bne.n	8003e8e <UART_SetConfig+0x12e>
 8003e28:	4b80      	ldr	r3, [pc, #512]	; (800402c <UART_SetConfig+0x2cc>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d828      	bhi.n	8003e88 <UART_SetConfig+0x128>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0xdc>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08003e89 	.word	0x08003e89
 8003e44:	08003e89 	.word	0x08003e89
 8003e48:	08003e89 	.word	0x08003e89
 8003e4c:	08003e7d 	.word	0x08003e7d
 8003e50:	08003e89 	.word	0x08003e89
 8003e54:	08003e89 	.word	0x08003e89
 8003e58:	08003e89 	.word	0x08003e89
 8003e5c:	08003e77 	.word	0x08003e77
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e89 	.word	0x08003e89
 8003e6c:	08003e83 	.word	0x08003e83
 8003e70:	2300      	movs	r3, #0
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e118      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e76:	2302      	movs	r3, #2
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e115      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e112      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e82:	2308      	movs	r3, #8
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e10f      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e10c      	b.n	80040a8 <UART_SetConfig+0x348>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a68      	ldr	r2, [pc, #416]	; (8004034 <UART_SetConfig+0x2d4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d120      	bne.n	8003eda <UART_SetConfig+0x17a>
 8003e98:	4b64      	ldr	r3, [pc, #400]	; (800402c <UART_SetConfig+0x2cc>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d013      	beq.n	8003ece <UART_SetConfig+0x16e>
 8003ea6:	2b30      	cmp	r3, #48	; 0x30
 8003ea8:	d814      	bhi.n	8003ed4 <UART_SetConfig+0x174>
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d009      	beq.n	8003ec2 <UART_SetConfig+0x162>
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d810      	bhi.n	8003ed4 <UART_SetConfig+0x174>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <UART_SetConfig+0x15c>
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d006      	beq.n	8003ec8 <UART_SetConfig+0x168>
 8003eba:	e00b      	b.n	8003ed4 <UART_SetConfig+0x174>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e0f2      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e0ef      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e0ec      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e0e9      	b.n	80040a8 <UART_SetConfig+0x348>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e0e6      	b.n	80040a8 <UART_SetConfig+0x348>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a56      	ldr	r2, [pc, #344]	; (8004038 <UART_SetConfig+0x2d8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d120      	bne.n	8003f26 <UART_SetConfig+0x1c6>
 8003ee4:	4b51      	ldr	r3, [pc, #324]	; (800402c <UART_SetConfig+0x2cc>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef0:	d013      	beq.n	8003f1a <UART_SetConfig+0x1ba>
 8003ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef4:	d814      	bhi.n	8003f20 <UART_SetConfig+0x1c0>
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d009      	beq.n	8003f0e <UART_SetConfig+0x1ae>
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d810      	bhi.n	8003f20 <UART_SetConfig+0x1c0>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <UART_SetConfig+0x1a8>
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d006      	beq.n	8003f14 <UART_SetConfig+0x1b4>
 8003f06:	e00b      	b.n	8003f20 <UART_SetConfig+0x1c0>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e0cc      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e0c9      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f14:	2304      	movs	r3, #4
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e0c6      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e0c3      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f20:	2310      	movs	r3, #16
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e0c0      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a44      	ldr	r2, [pc, #272]	; (800403c <UART_SetConfig+0x2dc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d125      	bne.n	8003f7c <UART_SetConfig+0x21c>
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <UART_SetConfig+0x2cc>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3e:	d017      	beq.n	8003f70 <UART_SetConfig+0x210>
 8003f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f44:	d817      	bhi.n	8003f76 <UART_SetConfig+0x216>
 8003f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4a:	d00b      	beq.n	8003f64 <UART_SetConfig+0x204>
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f50:	d811      	bhi.n	8003f76 <UART_SetConfig+0x216>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <UART_SetConfig+0x1fe>
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5a:	d006      	beq.n	8003f6a <UART_SetConfig+0x20a>
 8003f5c:	e00b      	b.n	8003f76 <UART_SetConfig+0x216>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e0a1      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f64:	2302      	movs	r3, #2
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e09e      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e09b      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f70:	2308      	movs	r3, #8
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e098      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f76:	2310      	movs	r3, #16
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e095      	b.n	80040a8 <UART_SetConfig+0x348>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <UART_SetConfig+0x2e0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d125      	bne.n	8003fd2 <UART_SetConfig+0x272>
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <UART_SetConfig+0x2cc>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f94:	d017      	beq.n	8003fc6 <UART_SetConfig+0x266>
 8003f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9a:	d817      	bhi.n	8003fcc <UART_SetConfig+0x26c>
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa0:	d00b      	beq.n	8003fba <UART_SetConfig+0x25a>
 8003fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa6:	d811      	bhi.n	8003fcc <UART_SetConfig+0x26c>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <UART_SetConfig+0x254>
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d006      	beq.n	8003fc0 <UART_SetConfig+0x260>
 8003fb2:	e00b      	b.n	8003fcc <UART_SetConfig+0x26c>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e076      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e073      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e070      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e06d      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e06a      	b.n	80040a8 <UART_SetConfig+0x348>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <UART_SetConfig+0x2e4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d138      	bne.n	800404e <UART_SetConfig+0x2ee>
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <UART_SetConfig+0x2cc>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fe6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fea:	d017      	beq.n	800401c <UART_SetConfig+0x2bc>
 8003fec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ff0:	d82a      	bhi.n	8004048 <UART_SetConfig+0x2e8>
 8003ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff6:	d00b      	beq.n	8004010 <UART_SetConfig+0x2b0>
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d824      	bhi.n	8004048 <UART_SetConfig+0x2e8>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <UART_SetConfig+0x2aa>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	d006      	beq.n	8004016 <UART_SetConfig+0x2b6>
 8004008:	e01e      	b.n	8004048 <UART_SetConfig+0x2e8>
 800400a:	2300      	movs	r3, #0
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e04b      	b.n	80040a8 <UART_SetConfig+0x348>
 8004010:	2302      	movs	r3, #2
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e048      	b.n	80040a8 <UART_SetConfig+0x348>
 8004016:	2304      	movs	r3, #4
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e045      	b.n	80040a8 <UART_SetConfig+0x348>
 800401c:	2308      	movs	r3, #8
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e042      	b.n	80040a8 <UART_SetConfig+0x348>
 8004022:	bf00      	nop
 8004024:	efff69f3 	.word	0xefff69f3
 8004028:	40011000 	.word	0x40011000
 800402c:	40023800 	.word	0x40023800
 8004030:	40004400 	.word	0x40004400
 8004034:	40004800 	.word	0x40004800
 8004038:	40004c00 	.word	0x40004c00
 800403c:	40005000 	.word	0x40005000
 8004040:	40011400 	.word	0x40011400
 8004044:	40007800 	.word	0x40007800
 8004048:	2310      	movs	r3, #16
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e02c      	b.n	80040a8 <UART_SetConfig+0x348>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a72      	ldr	r2, [pc, #456]	; (800421c <UART_SetConfig+0x4bc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d125      	bne.n	80040a4 <UART_SetConfig+0x344>
 8004058:	4b71      	ldr	r3, [pc, #452]	; (8004220 <UART_SetConfig+0x4c0>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004062:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004066:	d017      	beq.n	8004098 <UART_SetConfig+0x338>
 8004068:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800406c:	d817      	bhi.n	800409e <UART_SetConfig+0x33e>
 800406e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004072:	d00b      	beq.n	800408c <UART_SetConfig+0x32c>
 8004074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004078:	d811      	bhi.n	800409e <UART_SetConfig+0x33e>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <UART_SetConfig+0x326>
 800407e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004082:	d006      	beq.n	8004092 <UART_SetConfig+0x332>
 8004084:	e00b      	b.n	800409e <UART_SetConfig+0x33e>
 8004086:	2300      	movs	r3, #0
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e00d      	b.n	80040a8 <UART_SetConfig+0x348>
 800408c:	2302      	movs	r3, #2
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e00a      	b.n	80040a8 <UART_SetConfig+0x348>
 8004092:	2304      	movs	r3, #4
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e007      	b.n	80040a8 <UART_SetConfig+0x348>
 8004098:	2308      	movs	r3, #8
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e004      	b.n	80040a8 <UART_SetConfig+0x348>
 800409e:	2310      	movs	r3, #16
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e001      	b.n	80040a8 <UART_SetConfig+0x348>
 80040a4:	2310      	movs	r3, #16
 80040a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b0:	d15b      	bne.n	800416a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040b2:	7ffb      	ldrb	r3, [r7, #31]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d828      	bhi.n	800410a <UART_SetConfig+0x3aa>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0x360>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7ff f942 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 80040e8:	61b8      	str	r0, [r7, #24]
        break;
 80040ea:	e013      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7ff f952 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 80040f0:	61b8      	str	r0, [r7, #24]
        break;
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <UART_SetConfig+0x4c4>)
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e00c      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7ff f825 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80040fe:	61b8      	str	r0, [r7, #24]
        break;
 8004100:	e008      	b.n	8004114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	61bb      	str	r3, [r7, #24]
        break;
 8004108:	e004      	b.n	8004114 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	77bb      	strb	r3, [r7, #30]
        break;
 8004112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d074      	beq.n	8004204 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	005a      	lsls	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b0f      	cmp	r3, #15
 8004134:	d916      	bls.n	8004164 <UART_SetConfig+0x404>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d212      	bcs.n	8004164 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f023 030f 	bic.w	r3, r3, #15
 8004146:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	b29b      	uxth	r3, r3
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	b29a      	uxth	r2, r3
 8004154:	89fb      	ldrh	r3, [r7, #14]
 8004156:	4313      	orrs	r3, r2
 8004158:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	89fa      	ldrh	r2, [r7, #14]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	e04f      	b.n	8004204 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	77bb      	strb	r3, [r7, #30]
 8004168:	e04c      	b.n	8004204 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d828      	bhi.n	80041c2 <UART_SetConfig+0x462>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0x418>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7ff f8e6 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 80041a0:	61b8      	str	r0, [r7, #24]
        break;
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7ff f8f6 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 80041a8:	61b8      	str	r0, [r7, #24]
        break;
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <UART_SetConfig+0x4c4>)
 80041ae:	61bb      	str	r3, [r7, #24]
        break;
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe ffc9 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80041b6:	61b8      	str	r0, [r7, #24]
        break;
 80041b8:	e008      	b.n	80041cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	61bb      	str	r3, [r7, #24]
        break;
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	77bb      	strb	r3, [r7, #30]
        break;
 80041ca:	bf00      	nop
    }

    if (pclk != 0U)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085a      	lsrs	r2, r3, #1
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	441a      	add	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d909      	bls.n	8004200 <UART_SetConfig+0x4a0>
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d205      	bcs.n	8004200 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004210:	7fbb      	ldrb	r3, [r7, #30]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40007c00 	.word	0x40007c00
 8004220:	40023800 	.word	0x40023800
 8004224:	00f42400 	.word	0x00f42400

08004228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01a      	beq.n	800433e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004326:	d10a      	bne.n	800433e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af02      	add	r7, sp, #8
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800437c:	f7fd fa6c 	bl	8001858 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d10e      	bne.n	80043ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f817 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00d      	b.n	80043ca <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b09c      	sub	sp, #112	; 0x70
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e2:	e0a5      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	f000 80a1 	beq.w	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fd fa33 	bl	8001858 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <UART_WaitOnFlagUntilTimeout+0x32>
 80043fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004400:	2b00      	cmp	r3, #0
 8004402:	d13e      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004418:	667b      	str	r3, [r7, #100]	; 0x64
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004424:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e6      	bne.n	8004404 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	663b      	str	r3, [r7, #96]	; 0x60
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3308      	adds	r3, #8
 8004454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004456:	64ba      	str	r2, [r7, #72]	; 0x48
 8004458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800445c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e067      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d04f      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449e:	d147      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	613b      	str	r3, [r7, #16]
   return(result);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3308      	adds	r3, #8
 80044fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044fc:	623a      	str	r2, [r7, #32]
 80044fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	69f9      	ldr	r1, [r7, #28]
 8004502:	6a3a      	ldr	r2, [r7, #32]
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	61bb      	str	r3, [r7, #24]
   return(result);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e010      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	f43f af4a 	beq.w	80043e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3770      	adds	r7, #112	; 0x70
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <__errno>:
 800455c:	4b01      	ldr	r3, [pc, #4]	; (8004564 <__errno+0x8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4d0d      	ldr	r5, [pc, #52]	; (80045a0 <__libc_init_array+0x38>)
 800456c:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 800456e:	1b64      	subs	r4, r4, r5
 8004570:	10a4      	asrs	r4, r4, #2
 8004572:	2600      	movs	r6, #0
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	4d0b      	ldr	r5, [pc, #44]	; (80045a8 <__libc_init_array+0x40>)
 800457a:	4c0c      	ldr	r4, [pc, #48]	; (80045ac <__libc_init_array+0x44>)
 800457c:	f000 ffae 	bl	80054dc <_init>
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	2600      	movs	r6, #0
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	080055dc 	.word	0x080055dc
 80045a4:	080055dc 	.word	0x080055dc
 80045a8:	080055dc 	.word	0x080055dc
 80045ac:	080055e0 	.word	0x080055e0

080045b0 <memset>:
 80045b0:	4402      	add	r2, r0
 80045b2:	4603      	mov	r3, r0
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d100      	bne.n	80045ba <memset+0xa>
 80045b8:	4770      	bx	lr
 80045ba:	f803 1b01 	strb.w	r1, [r3], #1
 80045be:	e7f9      	b.n	80045b4 <memset+0x4>

080045c0 <iprintf>:
 80045c0:	b40f      	push	{r0, r1, r2, r3}
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <iprintf+0x2c>)
 80045c4:	b513      	push	{r0, r1, r4, lr}
 80045c6:	681c      	ldr	r4, [r3, #0]
 80045c8:	b124      	cbz	r4, 80045d4 <iprintf+0x14>
 80045ca:	69a3      	ldr	r3, [r4, #24]
 80045cc:	b913      	cbnz	r3, 80045d4 <iprintf+0x14>
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 f866 	bl	80046a0 <__sinit>
 80045d4:	ab05      	add	r3, sp, #20
 80045d6:	9a04      	ldr	r2, [sp, #16]
 80045d8:	68a1      	ldr	r1, [r4, #8]
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 f9bd 	bl	800495c <_vfiprintf_r>
 80045e2:	b002      	add	sp, #8
 80045e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e8:	b004      	add	sp, #16
 80045ea:	4770      	bx	lr
 80045ec:	2000000c 	.word	0x2000000c

080045f0 <std>:
 80045f0:	2300      	movs	r3, #0
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
 80045f6:	e9c0 3300 	strd	r3, r3, [r0]
 80045fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045fe:	6083      	str	r3, [r0, #8]
 8004600:	8181      	strh	r1, [r0, #12]
 8004602:	6643      	str	r3, [r0, #100]	; 0x64
 8004604:	81c2      	strh	r2, [r0, #14]
 8004606:	6183      	str	r3, [r0, #24]
 8004608:	4619      	mov	r1, r3
 800460a:	2208      	movs	r2, #8
 800460c:	305c      	adds	r0, #92	; 0x5c
 800460e:	f7ff ffcf 	bl	80045b0 <memset>
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <std+0x38>)
 8004614:	6263      	str	r3, [r4, #36]	; 0x24
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <std+0x3c>)
 8004618:	62a3      	str	r3, [r4, #40]	; 0x28
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <std+0x40>)
 800461c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <std+0x44>)
 8004620:	6224      	str	r4, [r4, #32]
 8004622:	6323      	str	r3, [r4, #48]	; 0x30
 8004624:	bd10      	pop	{r4, pc}
 8004626:	bf00      	nop
 8004628:	08004f05 	.word	0x08004f05
 800462c:	08004f27 	.word	0x08004f27
 8004630:	08004f5f 	.word	0x08004f5f
 8004634:	08004f83 	.word	0x08004f83

08004638 <_cleanup_r>:
 8004638:	4901      	ldr	r1, [pc, #4]	; (8004640 <_cleanup_r+0x8>)
 800463a:	f000 b8af 	b.w	800479c <_fwalk_reent>
 800463e:	bf00      	nop
 8004640:	0800525d 	.word	0x0800525d

08004644 <__sfmoreglue>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	2268      	movs	r2, #104	; 0x68
 8004648:	1e4d      	subs	r5, r1, #1
 800464a:	4355      	muls	r5, r2
 800464c:	460e      	mov	r6, r1
 800464e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004652:	f000 f8e5 	bl	8004820 <_malloc_r>
 8004656:	4604      	mov	r4, r0
 8004658:	b140      	cbz	r0, 800466c <__sfmoreglue+0x28>
 800465a:	2100      	movs	r1, #0
 800465c:	e9c0 1600 	strd	r1, r6, [r0]
 8004660:	300c      	adds	r0, #12
 8004662:	60a0      	str	r0, [r4, #8]
 8004664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004668:	f7ff ffa2 	bl	80045b0 <memset>
 800466c:	4620      	mov	r0, r4
 800466e:	bd70      	pop	{r4, r5, r6, pc}

08004670 <__sfp_lock_acquire>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__sfp_lock_acquire+0x8>)
 8004672:	f000 b8b3 	b.w	80047dc <__retarget_lock_acquire_recursive>
 8004676:	bf00      	nop
 8004678:	2000017d 	.word	0x2000017d

0800467c <__sfp_lock_release>:
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <__sfp_lock_release+0x8>)
 800467e:	f000 b8ae 	b.w	80047de <__retarget_lock_release_recursive>
 8004682:	bf00      	nop
 8004684:	2000017d 	.word	0x2000017d

08004688 <__sinit_lock_acquire>:
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <__sinit_lock_acquire+0x8>)
 800468a:	f000 b8a7 	b.w	80047dc <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	2000017e 	.word	0x2000017e

08004694 <__sinit_lock_release>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__sinit_lock_release+0x8>)
 8004696:	f000 b8a2 	b.w	80047de <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	2000017e 	.word	0x2000017e

080046a0 <__sinit>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	4604      	mov	r4, r0
 80046a4:	f7ff fff0 	bl	8004688 <__sinit_lock_acquire>
 80046a8:	69a3      	ldr	r3, [r4, #24]
 80046aa:	b11b      	cbz	r3, 80046b4 <__sinit+0x14>
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b0:	f7ff bff0 	b.w	8004694 <__sinit_lock_release>
 80046b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046b8:	6523      	str	r3, [r4, #80]	; 0x50
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <__sinit+0x68>)
 80046bc:	4a13      	ldr	r2, [pc, #76]	; (800470c <__sinit+0x6c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80046c2:	42a3      	cmp	r3, r4
 80046c4:	bf04      	itt	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	61a3      	streq	r3, [r4, #24]
 80046ca:	4620      	mov	r0, r4
 80046cc:	f000 f820 	bl	8004710 <__sfp>
 80046d0:	6060      	str	r0, [r4, #4]
 80046d2:	4620      	mov	r0, r4
 80046d4:	f000 f81c 	bl	8004710 <__sfp>
 80046d8:	60a0      	str	r0, [r4, #8]
 80046da:	4620      	mov	r0, r4
 80046dc:	f000 f818 	bl	8004710 <__sfp>
 80046e0:	2200      	movs	r2, #0
 80046e2:	60e0      	str	r0, [r4, #12]
 80046e4:	2104      	movs	r1, #4
 80046e6:	6860      	ldr	r0, [r4, #4]
 80046e8:	f7ff ff82 	bl	80045f0 <std>
 80046ec:	68a0      	ldr	r0, [r4, #8]
 80046ee:	2201      	movs	r2, #1
 80046f0:	2109      	movs	r1, #9
 80046f2:	f7ff ff7d 	bl	80045f0 <std>
 80046f6:	68e0      	ldr	r0, [r4, #12]
 80046f8:	2202      	movs	r2, #2
 80046fa:	2112      	movs	r1, #18
 80046fc:	f7ff ff78 	bl	80045f0 <std>
 8004700:	2301      	movs	r3, #1
 8004702:	61a3      	str	r3, [r4, #24]
 8004704:	e7d2      	b.n	80046ac <__sinit+0xc>
 8004706:	bf00      	nop
 8004708:	0800553c 	.word	0x0800553c
 800470c:	08004639 	.word	0x08004639

08004710 <__sfp>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	4607      	mov	r7, r0
 8004714:	f7ff ffac 	bl	8004670 <__sfp_lock_acquire>
 8004718:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <__sfp+0x84>)
 800471a:	681e      	ldr	r6, [r3, #0]
 800471c:	69b3      	ldr	r3, [r6, #24]
 800471e:	b913      	cbnz	r3, 8004726 <__sfp+0x16>
 8004720:	4630      	mov	r0, r6
 8004722:	f7ff ffbd 	bl	80046a0 <__sinit>
 8004726:	3648      	adds	r6, #72	; 0x48
 8004728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800472c:	3b01      	subs	r3, #1
 800472e:	d503      	bpl.n	8004738 <__sfp+0x28>
 8004730:	6833      	ldr	r3, [r6, #0]
 8004732:	b30b      	cbz	r3, 8004778 <__sfp+0x68>
 8004734:	6836      	ldr	r6, [r6, #0]
 8004736:	e7f7      	b.n	8004728 <__sfp+0x18>
 8004738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800473c:	b9d5      	cbnz	r5, 8004774 <__sfp+0x64>
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <__sfp+0x88>)
 8004740:	60e3      	str	r3, [r4, #12]
 8004742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004746:	6665      	str	r5, [r4, #100]	; 0x64
 8004748:	f000 f847 	bl	80047da <__retarget_lock_init_recursive>
 800474c:	f7ff ff96 	bl	800467c <__sfp_lock_release>
 8004750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004758:	6025      	str	r5, [r4, #0]
 800475a:	61a5      	str	r5, [r4, #24]
 800475c:	2208      	movs	r2, #8
 800475e:	4629      	mov	r1, r5
 8004760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004764:	f7ff ff24 	bl	80045b0 <memset>
 8004768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800476c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004770:	4620      	mov	r0, r4
 8004772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004774:	3468      	adds	r4, #104	; 0x68
 8004776:	e7d9      	b.n	800472c <__sfp+0x1c>
 8004778:	2104      	movs	r1, #4
 800477a:	4638      	mov	r0, r7
 800477c:	f7ff ff62 	bl	8004644 <__sfmoreglue>
 8004780:	4604      	mov	r4, r0
 8004782:	6030      	str	r0, [r6, #0]
 8004784:	2800      	cmp	r0, #0
 8004786:	d1d5      	bne.n	8004734 <__sfp+0x24>
 8004788:	f7ff ff78 	bl	800467c <__sfp_lock_release>
 800478c:	230c      	movs	r3, #12
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	e7ee      	b.n	8004770 <__sfp+0x60>
 8004792:	bf00      	nop
 8004794:	0800553c 	.word	0x0800553c
 8004798:	ffff0001 	.word	0xffff0001

0800479c <_fwalk_reent>:
 800479c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a0:	4606      	mov	r6, r0
 80047a2:	4688      	mov	r8, r1
 80047a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047a8:	2700      	movs	r7, #0
 80047aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047ae:	f1b9 0901 	subs.w	r9, r9, #1
 80047b2:	d505      	bpl.n	80047c0 <_fwalk_reent+0x24>
 80047b4:	6824      	ldr	r4, [r4, #0]
 80047b6:	2c00      	cmp	r4, #0
 80047b8:	d1f7      	bne.n	80047aa <_fwalk_reent+0xe>
 80047ba:	4638      	mov	r0, r7
 80047bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047c0:	89ab      	ldrh	r3, [r5, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d907      	bls.n	80047d6 <_fwalk_reent+0x3a>
 80047c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ca:	3301      	adds	r3, #1
 80047cc:	d003      	beq.n	80047d6 <_fwalk_reent+0x3a>
 80047ce:	4629      	mov	r1, r5
 80047d0:	4630      	mov	r0, r6
 80047d2:	47c0      	blx	r8
 80047d4:	4307      	orrs	r7, r0
 80047d6:	3568      	adds	r5, #104	; 0x68
 80047d8:	e7e9      	b.n	80047ae <_fwalk_reent+0x12>

080047da <__retarget_lock_init_recursive>:
 80047da:	4770      	bx	lr

080047dc <__retarget_lock_acquire_recursive>:
 80047dc:	4770      	bx	lr

080047de <__retarget_lock_release_recursive>:
 80047de:	4770      	bx	lr

080047e0 <sbrk_aligned>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4e0e      	ldr	r6, [pc, #56]	; (800481c <sbrk_aligned+0x3c>)
 80047e4:	460c      	mov	r4, r1
 80047e6:	6831      	ldr	r1, [r6, #0]
 80047e8:	4605      	mov	r5, r0
 80047ea:	b911      	cbnz	r1, 80047f2 <sbrk_aligned+0x12>
 80047ec:	f000 fb7a 	bl	8004ee4 <_sbrk_r>
 80047f0:	6030      	str	r0, [r6, #0]
 80047f2:	4621      	mov	r1, r4
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 fb75 	bl	8004ee4 <_sbrk_r>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	d00a      	beq.n	8004814 <sbrk_aligned+0x34>
 80047fe:	1cc4      	adds	r4, r0, #3
 8004800:	f024 0403 	bic.w	r4, r4, #3
 8004804:	42a0      	cmp	r0, r4
 8004806:	d007      	beq.n	8004818 <sbrk_aligned+0x38>
 8004808:	1a21      	subs	r1, r4, r0
 800480a:	4628      	mov	r0, r5
 800480c:	f000 fb6a 	bl	8004ee4 <_sbrk_r>
 8004810:	3001      	adds	r0, #1
 8004812:	d101      	bne.n	8004818 <sbrk_aligned+0x38>
 8004814:	f04f 34ff 	mov.w	r4, #4294967295
 8004818:	4620      	mov	r0, r4
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	20000184 	.word	0x20000184

08004820 <_malloc_r>:
 8004820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004824:	1ccd      	adds	r5, r1, #3
 8004826:	f025 0503 	bic.w	r5, r5, #3
 800482a:	3508      	adds	r5, #8
 800482c:	2d0c      	cmp	r5, #12
 800482e:	bf38      	it	cc
 8004830:	250c      	movcc	r5, #12
 8004832:	2d00      	cmp	r5, #0
 8004834:	4607      	mov	r7, r0
 8004836:	db01      	blt.n	800483c <_malloc_r+0x1c>
 8004838:	42a9      	cmp	r1, r5
 800483a:	d905      	bls.n	8004848 <_malloc_r+0x28>
 800483c:	230c      	movs	r3, #12
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	2600      	movs	r6, #0
 8004842:	4630      	mov	r0, r6
 8004844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004848:	4e2e      	ldr	r6, [pc, #184]	; (8004904 <_malloc_r+0xe4>)
 800484a:	f000 fdbb 	bl	80053c4 <__malloc_lock>
 800484e:	6833      	ldr	r3, [r6, #0]
 8004850:	461c      	mov	r4, r3
 8004852:	bb34      	cbnz	r4, 80048a2 <_malloc_r+0x82>
 8004854:	4629      	mov	r1, r5
 8004856:	4638      	mov	r0, r7
 8004858:	f7ff ffc2 	bl	80047e0 <sbrk_aligned>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	4604      	mov	r4, r0
 8004860:	d14d      	bne.n	80048fe <_malloc_r+0xde>
 8004862:	6834      	ldr	r4, [r6, #0]
 8004864:	4626      	mov	r6, r4
 8004866:	2e00      	cmp	r6, #0
 8004868:	d140      	bne.n	80048ec <_malloc_r+0xcc>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	4631      	mov	r1, r6
 800486e:	4638      	mov	r0, r7
 8004870:	eb04 0803 	add.w	r8, r4, r3
 8004874:	f000 fb36 	bl	8004ee4 <_sbrk_r>
 8004878:	4580      	cmp	r8, r0
 800487a:	d13a      	bne.n	80048f2 <_malloc_r+0xd2>
 800487c:	6821      	ldr	r1, [r4, #0]
 800487e:	3503      	adds	r5, #3
 8004880:	1a6d      	subs	r5, r5, r1
 8004882:	f025 0503 	bic.w	r5, r5, #3
 8004886:	3508      	adds	r5, #8
 8004888:	2d0c      	cmp	r5, #12
 800488a:	bf38      	it	cc
 800488c:	250c      	movcc	r5, #12
 800488e:	4629      	mov	r1, r5
 8004890:	4638      	mov	r0, r7
 8004892:	f7ff ffa5 	bl	80047e0 <sbrk_aligned>
 8004896:	3001      	adds	r0, #1
 8004898:	d02b      	beq.n	80048f2 <_malloc_r+0xd2>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	442b      	add	r3, r5
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	e00e      	b.n	80048c0 <_malloc_r+0xa0>
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	1b52      	subs	r2, r2, r5
 80048a6:	d41e      	bmi.n	80048e6 <_malloc_r+0xc6>
 80048a8:	2a0b      	cmp	r2, #11
 80048aa:	d916      	bls.n	80048da <_malloc_r+0xba>
 80048ac:	1961      	adds	r1, r4, r5
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	6025      	str	r5, [r4, #0]
 80048b2:	bf18      	it	ne
 80048b4:	6059      	strne	r1, [r3, #4]
 80048b6:	6863      	ldr	r3, [r4, #4]
 80048b8:	bf08      	it	eq
 80048ba:	6031      	streq	r1, [r6, #0]
 80048bc:	5162      	str	r2, [r4, r5]
 80048be:	604b      	str	r3, [r1, #4]
 80048c0:	4638      	mov	r0, r7
 80048c2:	f104 060b 	add.w	r6, r4, #11
 80048c6:	f000 fd83 	bl	80053d0 <__malloc_unlock>
 80048ca:	f026 0607 	bic.w	r6, r6, #7
 80048ce:	1d23      	adds	r3, r4, #4
 80048d0:	1af2      	subs	r2, r6, r3
 80048d2:	d0b6      	beq.n	8004842 <_malloc_r+0x22>
 80048d4:	1b9b      	subs	r3, r3, r6
 80048d6:	50a3      	str	r3, [r4, r2]
 80048d8:	e7b3      	b.n	8004842 <_malloc_r+0x22>
 80048da:	6862      	ldr	r2, [r4, #4]
 80048dc:	42a3      	cmp	r3, r4
 80048de:	bf0c      	ite	eq
 80048e0:	6032      	streq	r2, [r6, #0]
 80048e2:	605a      	strne	r2, [r3, #4]
 80048e4:	e7ec      	b.n	80048c0 <_malloc_r+0xa0>
 80048e6:	4623      	mov	r3, r4
 80048e8:	6864      	ldr	r4, [r4, #4]
 80048ea:	e7b2      	b.n	8004852 <_malloc_r+0x32>
 80048ec:	4634      	mov	r4, r6
 80048ee:	6876      	ldr	r6, [r6, #4]
 80048f0:	e7b9      	b.n	8004866 <_malloc_r+0x46>
 80048f2:	230c      	movs	r3, #12
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	4638      	mov	r0, r7
 80048f8:	f000 fd6a 	bl	80053d0 <__malloc_unlock>
 80048fc:	e7a1      	b.n	8004842 <_malloc_r+0x22>
 80048fe:	6025      	str	r5, [r4, #0]
 8004900:	e7de      	b.n	80048c0 <_malloc_r+0xa0>
 8004902:	bf00      	nop
 8004904:	20000180 	.word	0x20000180

08004908 <__sfputc_r>:
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	3b01      	subs	r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	b410      	push	{r4}
 8004910:	6093      	str	r3, [r2, #8]
 8004912:	da08      	bge.n	8004926 <__sfputc_r+0x1e>
 8004914:	6994      	ldr	r4, [r2, #24]
 8004916:	42a3      	cmp	r3, r4
 8004918:	db01      	blt.n	800491e <__sfputc_r+0x16>
 800491a:	290a      	cmp	r1, #10
 800491c:	d103      	bne.n	8004926 <__sfputc_r+0x1e>
 800491e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004922:	f000 bb33 	b.w	8004f8c <__swbuf_r>
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	1c58      	adds	r0, r3, #1
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	7019      	strb	r1, [r3, #0]
 800492e:	4608      	mov	r0, r1
 8004930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004934:	4770      	bx	lr

08004936 <__sfputs_r>:
 8004936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004938:	4606      	mov	r6, r0
 800493a:	460f      	mov	r7, r1
 800493c:	4614      	mov	r4, r2
 800493e:	18d5      	adds	r5, r2, r3
 8004940:	42ac      	cmp	r4, r5
 8004942:	d101      	bne.n	8004948 <__sfputs_r+0x12>
 8004944:	2000      	movs	r0, #0
 8004946:	e007      	b.n	8004958 <__sfputs_r+0x22>
 8004948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494c:	463a      	mov	r2, r7
 800494e:	4630      	mov	r0, r6
 8004950:	f7ff ffda 	bl	8004908 <__sfputc_r>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d1f3      	bne.n	8004940 <__sfputs_r+0xa>
 8004958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800495c <_vfiprintf_r>:
 800495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004960:	460d      	mov	r5, r1
 8004962:	b09d      	sub	sp, #116	; 0x74
 8004964:	4614      	mov	r4, r2
 8004966:	4698      	mov	r8, r3
 8004968:	4606      	mov	r6, r0
 800496a:	b118      	cbz	r0, 8004974 <_vfiprintf_r+0x18>
 800496c:	6983      	ldr	r3, [r0, #24]
 800496e:	b90b      	cbnz	r3, 8004974 <_vfiprintf_r+0x18>
 8004970:	f7ff fe96 	bl	80046a0 <__sinit>
 8004974:	4b89      	ldr	r3, [pc, #548]	; (8004b9c <_vfiprintf_r+0x240>)
 8004976:	429d      	cmp	r5, r3
 8004978:	d11b      	bne.n	80049b2 <_vfiprintf_r+0x56>
 800497a:	6875      	ldr	r5, [r6, #4]
 800497c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800497e:	07d9      	lsls	r1, r3, #31
 8004980:	d405      	bmi.n	800498e <_vfiprintf_r+0x32>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	059a      	lsls	r2, r3, #22
 8004986:	d402      	bmi.n	800498e <_vfiprintf_r+0x32>
 8004988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800498a:	f7ff ff27 	bl	80047dc <__retarget_lock_acquire_recursive>
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	d501      	bpl.n	8004998 <_vfiprintf_r+0x3c>
 8004994:	692b      	ldr	r3, [r5, #16]
 8004996:	b9eb      	cbnz	r3, 80049d4 <_vfiprintf_r+0x78>
 8004998:	4629      	mov	r1, r5
 800499a:	4630      	mov	r0, r6
 800499c:	f000 fb5a 	bl	8005054 <__swsetup_r>
 80049a0:	b1c0      	cbz	r0, 80049d4 <_vfiprintf_r+0x78>
 80049a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049a4:	07dc      	lsls	r4, r3, #31
 80049a6:	d50e      	bpl.n	80049c6 <_vfiprintf_r+0x6a>
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	b01d      	add	sp, #116	; 0x74
 80049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b2:	4b7b      	ldr	r3, [pc, #492]	; (8004ba0 <_vfiprintf_r+0x244>)
 80049b4:	429d      	cmp	r5, r3
 80049b6:	d101      	bne.n	80049bc <_vfiprintf_r+0x60>
 80049b8:	68b5      	ldr	r5, [r6, #8]
 80049ba:	e7df      	b.n	800497c <_vfiprintf_r+0x20>
 80049bc:	4b79      	ldr	r3, [pc, #484]	; (8004ba4 <_vfiprintf_r+0x248>)
 80049be:	429d      	cmp	r5, r3
 80049c0:	bf08      	it	eq
 80049c2:	68f5      	ldreq	r5, [r6, #12]
 80049c4:	e7da      	b.n	800497c <_vfiprintf_r+0x20>
 80049c6:	89ab      	ldrh	r3, [r5, #12]
 80049c8:	0598      	lsls	r0, r3, #22
 80049ca:	d4ed      	bmi.n	80049a8 <_vfiprintf_r+0x4c>
 80049cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ce:	f7ff ff06 	bl	80047de <__retarget_lock_release_recursive>
 80049d2:	e7e9      	b.n	80049a8 <_vfiprintf_r+0x4c>
 80049d4:	2300      	movs	r3, #0
 80049d6:	9309      	str	r3, [sp, #36]	; 0x24
 80049d8:	2320      	movs	r3, #32
 80049da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049de:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e2:	2330      	movs	r3, #48	; 0x30
 80049e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ba8 <_vfiprintf_r+0x24c>
 80049e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049ec:	f04f 0901 	mov.w	r9, #1
 80049f0:	4623      	mov	r3, r4
 80049f2:	469a      	mov	sl, r3
 80049f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f8:	b10a      	cbz	r2, 80049fe <_vfiprintf_r+0xa2>
 80049fa:	2a25      	cmp	r2, #37	; 0x25
 80049fc:	d1f9      	bne.n	80049f2 <_vfiprintf_r+0x96>
 80049fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004a02:	d00b      	beq.n	8004a1c <_vfiprintf_r+0xc0>
 8004a04:	465b      	mov	r3, fp
 8004a06:	4622      	mov	r2, r4
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ff93 	bl	8004936 <__sfputs_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	f000 80aa 	beq.w	8004b6a <_vfiprintf_r+0x20e>
 8004a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a18:	445a      	add	r2, fp
 8004a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80a2 	beq.w	8004b6a <_vfiprintf_r+0x20e>
 8004a26:	2300      	movs	r3, #0
 8004a28:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a30:	f10a 0a01 	add.w	sl, sl, #1
 8004a34:	9304      	str	r3, [sp, #16]
 8004a36:	9307      	str	r3, [sp, #28]
 8004a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a3e:	4654      	mov	r4, sl
 8004a40:	2205      	movs	r2, #5
 8004a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a46:	4858      	ldr	r0, [pc, #352]	; (8004ba8 <_vfiprintf_r+0x24c>)
 8004a48:	f7fb fbe2 	bl	8000210 <memchr>
 8004a4c:	9a04      	ldr	r2, [sp, #16]
 8004a4e:	b9d8      	cbnz	r0, 8004a88 <_vfiprintf_r+0x12c>
 8004a50:	06d1      	lsls	r1, r2, #27
 8004a52:	bf44      	itt	mi
 8004a54:	2320      	movmi	r3, #32
 8004a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5a:	0713      	lsls	r3, r2, #28
 8004a5c:	bf44      	itt	mi
 8004a5e:	232b      	movmi	r3, #43	; 0x2b
 8004a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a64:	f89a 3000 	ldrb.w	r3, [sl]
 8004a68:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6a:	d015      	beq.n	8004a98 <_vfiprintf_r+0x13c>
 8004a6c:	9a07      	ldr	r2, [sp, #28]
 8004a6e:	4654      	mov	r4, sl
 8004a70:	2000      	movs	r0, #0
 8004a72:	f04f 0c0a 	mov.w	ip, #10
 8004a76:	4621      	mov	r1, r4
 8004a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a7c:	3b30      	subs	r3, #48	; 0x30
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	d94e      	bls.n	8004b20 <_vfiprintf_r+0x1c4>
 8004a82:	b1b0      	cbz	r0, 8004ab2 <_vfiprintf_r+0x156>
 8004a84:	9207      	str	r2, [sp, #28]
 8004a86:	e014      	b.n	8004ab2 <_vfiprintf_r+0x156>
 8004a88:	eba0 0308 	sub.w	r3, r0, r8
 8004a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a90:	4313      	orrs	r3, r2
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	46a2      	mov	sl, r4
 8004a96:	e7d2      	b.n	8004a3e <_vfiprintf_r+0xe2>
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	1d19      	adds	r1, r3, #4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	9103      	str	r1, [sp, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bfbb      	ittet	lt
 8004aa4:	425b      	neglt	r3, r3
 8004aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8004aaa:	9307      	strge	r3, [sp, #28]
 8004aac:	9307      	strlt	r3, [sp, #28]
 8004aae:	bfb8      	it	lt
 8004ab0:	9204      	strlt	r2, [sp, #16]
 8004ab2:	7823      	ldrb	r3, [r4, #0]
 8004ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ab6:	d10c      	bne.n	8004ad2 <_vfiprintf_r+0x176>
 8004ab8:	7863      	ldrb	r3, [r4, #1]
 8004aba:	2b2a      	cmp	r3, #42	; 0x2a
 8004abc:	d135      	bne.n	8004b2a <_vfiprintf_r+0x1ce>
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	1d1a      	adds	r2, r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	9203      	str	r2, [sp, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfb8      	it	lt
 8004aca:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ace:	3402      	adds	r4, #2
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bb8 <_vfiprintf_r+0x25c>
 8004ad6:	7821      	ldrb	r1, [r4, #0]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	4650      	mov	r0, sl
 8004adc:	f7fb fb98 	bl	8000210 <memchr>
 8004ae0:	b140      	cbz	r0, 8004af4 <_vfiprintf_r+0x198>
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	eba0 000a 	sub.w	r0, r0, sl
 8004ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8004aec:	9b04      	ldr	r3, [sp, #16]
 8004aee:	4303      	orrs	r3, r0
 8004af0:	3401      	adds	r4, #1
 8004af2:	9304      	str	r3, [sp, #16]
 8004af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af8:	482c      	ldr	r0, [pc, #176]	; (8004bac <_vfiprintf_r+0x250>)
 8004afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004afe:	2206      	movs	r2, #6
 8004b00:	f7fb fb86 	bl	8000210 <memchr>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d03f      	beq.n	8004b88 <_vfiprintf_r+0x22c>
 8004b08:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <_vfiprintf_r+0x254>)
 8004b0a:	bb1b      	cbnz	r3, 8004b54 <_vfiprintf_r+0x1f8>
 8004b0c:	9b03      	ldr	r3, [sp, #12]
 8004b0e:	3307      	adds	r3, #7
 8004b10:	f023 0307 	bic.w	r3, r3, #7
 8004b14:	3308      	adds	r3, #8
 8004b16:	9303      	str	r3, [sp, #12]
 8004b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1a:	443b      	add	r3, r7
 8004b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b1e:	e767      	b.n	80049f0 <_vfiprintf_r+0x94>
 8004b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b24:	460c      	mov	r4, r1
 8004b26:	2001      	movs	r0, #1
 8004b28:	e7a5      	b.n	8004a76 <_vfiprintf_r+0x11a>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	3401      	adds	r4, #1
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f04f 0c0a 	mov.w	ip, #10
 8004b36:	4620      	mov	r0, r4
 8004b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b3c:	3a30      	subs	r2, #48	; 0x30
 8004b3e:	2a09      	cmp	r2, #9
 8004b40:	d903      	bls.n	8004b4a <_vfiprintf_r+0x1ee>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0c5      	beq.n	8004ad2 <_vfiprintf_r+0x176>
 8004b46:	9105      	str	r1, [sp, #20]
 8004b48:	e7c3      	b.n	8004ad2 <_vfiprintf_r+0x176>
 8004b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b4e:	4604      	mov	r4, r0
 8004b50:	2301      	movs	r3, #1
 8004b52:	e7f0      	b.n	8004b36 <_vfiprintf_r+0x1da>
 8004b54:	ab03      	add	r3, sp, #12
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	462a      	mov	r2, r5
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <_vfiprintf_r+0x258>)
 8004b5c:	a904      	add	r1, sp, #16
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f3af 8000 	nop.w
 8004b64:	4607      	mov	r7, r0
 8004b66:	1c78      	adds	r0, r7, #1
 8004b68:	d1d6      	bne.n	8004b18 <_vfiprintf_r+0x1bc>
 8004b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b6c:	07d9      	lsls	r1, r3, #31
 8004b6e:	d405      	bmi.n	8004b7c <_vfiprintf_r+0x220>
 8004b70:	89ab      	ldrh	r3, [r5, #12]
 8004b72:	059a      	lsls	r2, r3, #22
 8004b74:	d402      	bmi.n	8004b7c <_vfiprintf_r+0x220>
 8004b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b78:	f7ff fe31 	bl	80047de <__retarget_lock_release_recursive>
 8004b7c:	89ab      	ldrh	r3, [r5, #12]
 8004b7e:	065b      	lsls	r3, r3, #25
 8004b80:	f53f af12 	bmi.w	80049a8 <_vfiprintf_r+0x4c>
 8004b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b86:	e711      	b.n	80049ac <_vfiprintf_r+0x50>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <_vfiprintf_r+0x258>)
 8004b90:	a904      	add	r1, sp, #16
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 f880 	bl	8004c98 <_printf_i>
 8004b98:	e7e4      	b.n	8004b64 <_vfiprintf_r+0x208>
 8004b9a:	bf00      	nop
 8004b9c:	08005560 	.word	0x08005560
 8004ba0:	08005580 	.word	0x08005580
 8004ba4:	08005540 	.word	0x08005540
 8004ba8:	080055a0 	.word	0x080055a0
 8004bac:	080055aa 	.word	0x080055aa
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	08004937 	.word	0x08004937
 8004bb8:	080055a6 	.word	0x080055a6

08004bbc <_printf_common>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	4699      	mov	r9, r3
 8004bc4:	688a      	ldr	r2, [r1, #8]
 8004bc6:	690b      	ldr	r3, [r1, #16]
 8004bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bfb8      	it	lt
 8004bd0:	4613      	movlt	r3, r2
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bd8:	4607      	mov	r7, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	b10a      	cbz	r2, 8004be2 <_printf_common+0x26>
 8004bde:	3301      	adds	r3, #1
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	0699      	lsls	r1, r3, #26
 8004be6:	bf42      	ittt	mi
 8004be8:	6833      	ldrmi	r3, [r6, #0]
 8004bea:	3302      	addmi	r3, #2
 8004bec:	6033      	strmi	r3, [r6, #0]
 8004bee:	6825      	ldr	r5, [r4, #0]
 8004bf0:	f015 0506 	ands.w	r5, r5, #6
 8004bf4:	d106      	bne.n	8004c04 <_printf_common+0x48>
 8004bf6:	f104 0a19 	add.w	sl, r4, #25
 8004bfa:	68e3      	ldr	r3, [r4, #12]
 8004bfc:	6832      	ldr	r2, [r6, #0]
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	42ab      	cmp	r3, r5
 8004c02:	dc26      	bgt.n	8004c52 <_printf_common+0x96>
 8004c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c08:	1e13      	subs	r3, r2, #0
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	bf18      	it	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	0692      	lsls	r2, r2, #26
 8004c12:	d42b      	bmi.n	8004c6c <_printf_common+0xb0>
 8004c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c18:	4649      	mov	r1, r9
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c0      	blx	r8
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d01e      	beq.n	8004c60 <_printf_common+0xa4>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	68e5      	ldr	r5, [r4, #12]
 8004c26:	6832      	ldr	r2, [r6, #0]
 8004c28:	f003 0306 	and.w	r3, r3, #6
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	bf08      	it	eq
 8004c30:	1aad      	subeq	r5, r5, r2
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	6922      	ldr	r2, [r4, #16]
 8004c36:	bf0c      	ite	eq
 8004c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c3c:	2500      	movne	r5, #0
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	bfc4      	itt	gt
 8004c42:	1a9b      	subgt	r3, r3, r2
 8004c44:	18ed      	addgt	r5, r5, r3
 8004c46:	2600      	movs	r6, #0
 8004c48:	341a      	adds	r4, #26
 8004c4a:	42b5      	cmp	r5, r6
 8004c4c:	d11a      	bne.n	8004c84 <_printf_common+0xc8>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e008      	b.n	8004c64 <_printf_common+0xa8>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4652      	mov	r2, sl
 8004c56:	4649      	mov	r1, r9
 8004c58:	4638      	mov	r0, r7
 8004c5a:	47c0      	blx	r8
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d103      	bne.n	8004c68 <_printf_common+0xac>
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c68:	3501      	adds	r5, #1
 8004c6a:	e7c6      	b.n	8004bfa <_printf_common+0x3e>
 8004c6c:	18e1      	adds	r1, r4, r3
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	2030      	movs	r0, #48	; 0x30
 8004c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c76:	4422      	add	r2, r4
 8004c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c80:	3302      	adds	r3, #2
 8004c82:	e7c7      	b.n	8004c14 <_printf_common+0x58>
 8004c84:	2301      	movs	r3, #1
 8004c86:	4622      	mov	r2, r4
 8004c88:	4649      	mov	r1, r9
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	47c0      	blx	r8
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d0e6      	beq.n	8004c60 <_printf_common+0xa4>
 8004c92:	3601      	adds	r6, #1
 8004c94:	e7d9      	b.n	8004c4a <_printf_common+0x8e>
	...

08004c98 <_printf_i>:
 8004c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	7e0f      	ldrb	r7, [r1, #24]
 8004c9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ca0:	2f78      	cmp	r7, #120	; 0x78
 8004ca2:	4691      	mov	r9, r2
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	469a      	mov	sl, r3
 8004caa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cae:	d807      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cb0:	2f62      	cmp	r7, #98	; 0x62
 8004cb2:	d80a      	bhi.n	8004cca <_printf_i+0x32>
 8004cb4:	2f00      	cmp	r7, #0
 8004cb6:	f000 80d8 	beq.w	8004e6a <_printf_i+0x1d2>
 8004cba:	2f58      	cmp	r7, #88	; 0x58
 8004cbc:	f000 80a3 	beq.w	8004e06 <_printf_i+0x16e>
 8004cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cc8:	e03a      	b.n	8004d40 <_printf_i+0xa8>
 8004cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cce:	2b15      	cmp	r3, #21
 8004cd0:	d8f6      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cd2:	a101      	add	r1, pc, #4	; (adr r1, 8004cd8 <_printf_i+0x40>)
 8004cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d45 	.word	0x08004d45
 8004ce0:	08004cc1 	.word	0x08004cc1
 8004ce4:	08004cc1 	.word	0x08004cc1
 8004ce8:	08004cc1 	.word	0x08004cc1
 8004cec:	08004cc1 	.word	0x08004cc1
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004cc1 	.word	0x08004cc1
 8004cf8:	08004cc1 	.word	0x08004cc1
 8004cfc:	08004cc1 	.word	0x08004cc1
 8004d00:	08004cc1 	.word	0x08004cc1
 8004d04:	08004e51 	.word	0x08004e51
 8004d08:	08004d75 	.word	0x08004d75
 8004d0c:	08004e33 	.word	0x08004e33
 8004d10:	08004cc1 	.word	0x08004cc1
 8004d14:	08004cc1 	.word	0x08004cc1
 8004d18:	08004e73 	.word	0x08004e73
 8004d1c:	08004cc1 	.word	0x08004cc1
 8004d20:	08004d75 	.word	0x08004d75
 8004d24:	08004cc1 	.word	0x08004cc1
 8004d28:	08004cc1 	.word	0x08004cc1
 8004d2c:	08004e3b 	.word	0x08004e3b
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	602a      	str	r2, [r5, #0]
 8004d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0a3      	b.n	8004e8c <_printf_i+0x1f4>
 8004d44:	6820      	ldr	r0, [r4, #0]
 8004d46:	6829      	ldr	r1, [r5, #0]
 8004d48:	0606      	lsls	r6, r0, #24
 8004d4a:	f101 0304 	add.w	r3, r1, #4
 8004d4e:	d50a      	bpl.n	8004d66 <_printf_i+0xce>
 8004d50:	680e      	ldr	r6, [r1, #0]
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	2e00      	cmp	r6, #0
 8004d56:	da03      	bge.n	8004d60 <_printf_i+0xc8>
 8004d58:	232d      	movs	r3, #45	; 0x2d
 8004d5a:	4276      	negs	r6, r6
 8004d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d60:	485e      	ldr	r0, [pc, #376]	; (8004edc <_printf_i+0x244>)
 8004d62:	230a      	movs	r3, #10
 8004d64:	e019      	b.n	8004d9a <_printf_i+0x102>
 8004d66:	680e      	ldr	r6, [r1, #0]
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d6e:	bf18      	it	ne
 8004d70:	b236      	sxthne	r6, r6
 8004d72:	e7ef      	b.n	8004d54 <_printf_i+0xbc>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	6029      	str	r1, [r5, #0]
 8004d7c:	0601      	lsls	r1, r0, #24
 8004d7e:	d501      	bpl.n	8004d84 <_printf_i+0xec>
 8004d80:	681e      	ldr	r6, [r3, #0]
 8004d82:	e002      	b.n	8004d8a <_printf_i+0xf2>
 8004d84:	0646      	lsls	r6, r0, #25
 8004d86:	d5fb      	bpl.n	8004d80 <_printf_i+0xe8>
 8004d88:	881e      	ldrh	r6, [r3, #0]
 8004d8a:	4854      	ldr	r0, [pc, #336]	; (8004edc <_printf_i+0x244>)
 8004d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d8e:	bf0c      	ite	eq
 8004d90:	2308      	moveq	r3, #8
 8004d92:	230a      	movne	r3, #10
 8004d94:	2100      	movs	r1, #0
 8004d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d9a:	6865      	ldr	r5, [r4, #4]
 8004d9c:	60a5      	str	r5, [r4, #8]
 8004d9e:	2d00      	cmp	r5, #0
 8004da0:	bfa2      	ittt	ge
 8004da2:	6821      	ldrge	r1, [r4, #0]
 8004da4:	f021 0104 	bicge.w	r1, r1, #4
 8004da8:	6021      	strge	r1, [r4, #0]
 8004daa:	b90e      	cbnz	r6, 8004db0 <_printf_i+0x118>
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	d04d      	beq.n	8004e4c <_printf_i+0x1b4>
 8004db0:	4615      	mov	r5, r2
 8004db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004db6:	fb03 6711 	mls	r7, r3, r1, r6
 8004dba:	5dc7      	ldrb	r7, [r0, r7]
 8004dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dc0:	4637      	mov	r7, r6
 8004dc2:	42bb      	cmp	r3, r7
 8004dc4:	460e      	mov	r6, r1
 8004dc6:	d9f4      	bls.n	8004db2 <_printf_i+0x11a>
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d10b      	bne.n	8004de4 <_printf_i+0x14c>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	07de      	lsls	r6, r3, #31
 8004dd0:	d508      	bpl.n	8004de4 <_printf_i+0x14c>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	6861      	ldr	r1, [r4, #4]
 8004dd6:	4299      	cmp	r1, r3
 8004dd8:	bfde      	ittt	le
 8004dda:	2330      	movle	r3, #48	; 0x30
 8004ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004de4:	1b52      	subs	r2, r2, r5
 8004de6:	6122      	str	r2, [r4, #16]
 8004de8:	f8cd a000 	str.w	sl, [sp]
 8004dec:	464b      	mov	r3, r9
 8004dee:	aa03      	add	r2, sp, #12
 8004df0:	4621      	mov	r1, r4
 8004df2:	4640      	mov	r0, r8
 8004df4:	f7ff fee2 	bl	8004bbc <_printf_common>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d14c      	bne.n	8004e96 <_printf_i+0x1fe>
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	b004      	add	sp, #16
 8004e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e06:	4835      	ldr	r0, [pc, #212]	; (8004edc <_printf_i+0x244>)
 8004e08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e0c:	6829      	ldr	r1, [r5, #0]
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e14:	6029      	str	r1, [r5, #0]
 8004e16:	061d      	lsls	r5, r3, #24
 8004e18:	d514      	bpl.n	8004e44 <_printf_i+0x1ac>
 8004e1a:	07df      	lsls	r7, r3, #31
 8004e1c:	bf44      	itt	mi
 8004e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e22:	6023      	strmi	r3, [r4, #0]
 8004e24:	b91e      	cbnz	r6, 8004e2e <_printf_i+0x196>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	f023 0320 	bic.w	r3, r3, #32
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	2310      	movs	r3, #16
 8004e30:	e7b0      	b.n	8004d94 <_printf_i+0xfc>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	f043 0320 	orr.w	r3, r3, #32
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	2378      	movs	r3, #120	; 0x78
 8004e3c:	4828      	ldr	r0, [pc, #160]	; (8004ee0 <_printf_i+0x248>)
 8004e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e42:	e7e3      	b.n	8004e0c <_printf_i+0x174>
 8004e44:	0659      	lsls	r1, r3, #25
 8004e46:	bf48      	it	mi
 8004e48:	b2b6      	uxthmi	r6, r6
 8004e4a:	e7e6      	b.n	8004e1a <_printf_i+0x182>
 8004e4c:	4615      	mov	r5, r2
 8004e4e:	e7bb      	b.n	8004dc8 <_printf_i+0x130>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	6826      	ldr	r6, [r4, #0]
 8004e54:	6961      	ldr	r1, [r4, #20]
 8004e56:	1d18      	adds	r0, r3, #4
 8004e58:	6028      	str	r0, [r5, #0]
 8004e5a:	0635      	lsls	r5, r6, #24
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	d501      	bpl.n	8004e64 <_printf_i+0x1cc>
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	e002      	b.n	8004e6a <_printf_i+0x1d2>
 8004e64:	0670      	lsls	r0, r6, #25
 8004e66:	d5fb      	bpl.n	8004e60 <_printf_i+0x1c8>
 8004e68:	8019      	strh	r1, [r3, #0]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6123      	str	r3, [r4, #16]
 8004e6e:	4615      	mov	r5, r2
 8004e70:	e7ba      	b.n	8004de8 <_printf_i+0x150>
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	1d1a      	adds	r2, r3, #4
 8004e76:	602a      	str	r2, [r5, #0]
 8004e78:	681d      	ldr	r5, [r3, #0]
 8004e7a:	6862      	ldr	r2, [r4, #4]
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f7fb f9c6 	bl	8000210 <memchr>
 8004e84:	b108      	cbz	r0, 8004e8a <_printf_i+0x1f2>
 8004e86:	1b40      	subs	r0, r0, r5
 8004e88:	6060      	str	r0, [r4, #4]
 8004e8a:	6863      	ldr	r3, [r4, #4]
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e94:	e7a8      	b.n	8004de8 <_printf_i+0x150>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	462a      	mov	r2, r5
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	47d0      	blx	sl
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d0ab      	beq.n	8004dfc <_printf_i+0x164>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	079b      	lsls	r3, r3, #30
 8004ea8:	d413      	bmi.n	8004ed2 <_printf_i+0x23a>
 8004eaa:	68e0      	ldr	r0, [r4, #12]
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	bfb8      	it	lt
 8004eb2:	4618      	movlt	r0, r3
 8004eb4:	e7a4      	b.n	8004e00 <_printf_i+0x168>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4649      	mov	r1, r9
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	47d0      	blx	sl
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d09b      	beq.n	8004dfc <_printf_i+0x164>
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	9903      	ldr	r1, [sp, #12]
 8004eca:	1a5b      	subs	r3, r3, r1
 8004ecc:	42ab      	cmp	r3, r5
 8004ece:	dcf2      	bgt.n	8004eb6 <_printf_i+0x21e>
 8004ed0:	e7eb      	b.n	8004eaa <_printf_i+0x212>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	f104 0619 	add.w	r6, r4, #25
 8004ed8:	e7f5      	b.n	8004ec6 <_printf_i+0x22e>
 8004eda:	bf00      	nop
 8004edc:	080055b1 	.word	0x080055b1
 8004ee0:	080055c2 	.word	0x080055c2

08004ee4 <_sbrk_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4d06      	ldr	r5, [pc, #24]	; (8004f00 <_sbrk_r+0x1c>)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4604      	mov	r4, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	f7fc fb60 	bl	80015b4 <_sbrk>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_sbrk_r+0x1a>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_sbrk_r+0x1a>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	20000188 	.word	0x20000188

08004f04 <__sread>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	460c      	mov	r4, r1
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	f000 fab2 	bl	8005474 <_read_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	bfab      	itete	ge
 8004f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f16:	89a3      	ldrhlt	r3, [r4, #12]
 8004f18:	181b      	addge	r3, r3, r0
 8004f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f1e:	bfac      	ite	ge
 8004f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f22:	81a3      	strhlt	r3, [r4, #12]
 8004f24:	bd10      	pop	{r4, pc}

08004f26 <__swrite>:
 8004f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2a:	461f      	mov	r7, r3
 8004f2c:	898b      	ldrh	r3, [r1, #12]
 8004f2e:	05db      	lsls	r3, r3, #23
 8004f30:	4605      	mov	r5, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	4616      	mov	r6, r2
 8004f36:	d505      	bpl.n	8004f44 <__swrite+0x1e>
 8004f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f000 f9c8 	bl	80052d4 <_lseek_r>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	4632      	mov	r2, r6
 8004f52:	463b      	mov	r3, r7
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5a:	f000 b869 	b.w	8005030 <_write_r>

08004f5e <__sseek>:
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	460c      	mov	r4, r1
 8004f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f66:	f000 f9b5 	bl	80052d4 <_lseek_r>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	bf15      	itete	ne
 8004f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f7a:	81a3      	strheq	r3, [r4, #12]
 8004f7c:	bf18      	it	ne
 8004f7e:	81a3      	strhne	r3, [r4, #12]
 8004f80:	bd10      	pop	{r4, pc}

08004f82 <__sclose>:
 8004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f86:	f000 b8d3 	b.w	8005130 <_close_r>
	...

08004f8c <__swbuf_r>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	460e      	mov	r6, r1
 8004f90:	4614      	mov	r4, r2
 8004f92:	4605      	mov	r5, r0
 8004f94:	b118      	cbz	r0, 8004f9e <__swbuf_r+0x12>
 8004f96:	6983      	ldr	r3, [r0, #24]
 8004f98:	b90b      	cbnz	r3, 8004f9e <__swbuf_r+0x12>
 8004f9a:	f7ff fb81 	bl	80046a0 <__sinit>
 8004f9e:	4b21      	ldr	r3, [pc, #132]	; (8005024 <__swbuf_r+0x98>)
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	d12b      	bne.n	8004ffc <__swbuf_r+0x70>
 8004fa4:	686c      	ldr	r4, [r5, #4]
 8004fa6:	69a3      	ldr	r3, [r4, #24]
 8004fa8:	60a3      	str	r3, [r4, #8]
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	071a      	lsls	r2, r3, #28
 8004fae:	d52f      	bpl.n	8005010 <__swbuf_r+0x84>
 8004fb0:	6923      	ldr	r3, [r4, #16]
 8004fb2:	b36b      	cbz	r3, 8005010 <__swbuf_r+0x84>
 8004fb4:	6923      	ldr	r3, [r4, #16]
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	1ac0      	subs	r0, r0, r3
 8004fba:	6963      	ldr	r3, [r4, #20]
 8004fbc:	b2f6      	uxtb	r6, r6
 8004fbe:	4283      	cmp	r3, r0
 8004fc0:	4637      	mov	r7, r6
 8004fc2:	dc04      	bgt.n	8004fce <__swbuf_r+0x42>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f948 	bl	800525c <_fflush_r>
 8004fcc:	bb30      	cbnz	r0, 800501c <__swbuf_r+0x90>
 8004fce:	68a3      	ldr	r3, [r4, #8]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	701e      	strb	r6, [r3, #0]
 8004fdc:	6963      	ldr	r3, [r4, #20]
 8004fde:	3001      	adds	r0, #1
 8004fe0:	4283      	cmp	r3, r0
 8004fe2:	d004      	beq.n	8004fee <__swbuf_r+0x62>
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	07db      	lsls	r3, r3, #31
 8004fe8:	d506      	bpl.n	8004ff8 <__swbuf_r+0x6c>
 8004fea:	2e0a      	cmp	r6, #10
 8004fec:	d104      	bne.n	8004ff8 <__swbuf_r+0x6c>
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f000 f933 	bl	800525c <_fflush_r>
 8004ff6:	b988      	cbnz	r0, 800501c <__swbuf_r+0x90>
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <__swbuf_r+0x9c>)
 8004ffe:	429c      	cmp	r4, r3
 8005000:	d101      	bne.n	8005006 <__swbuf_r+0x7a>
 8005002:	68ac      	ldr	r4, [r5, #8]
 8005004:	e7cf      	b.n	8004fa6 <__swbuf_r+0x1a>
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <__swbuf_r+0xa0>)
 8005008:	429c      	cmp	r4, r3
 800500a:	bf08      	it	eq
 800500c:	68ec      	ldreq	r4, [r5, #12]
 800500e:	e7ca      	b.n	8004fa6 <__swbuf_r+0x1a>
 8005010:	4621      	mov	r1, r4
 8005012:	4628      	mov	r0, r5
 8005014:	f000 f81e 	bl	8005054 <__swsetup_r>
 8005018:	2800      	cmp	r0, #0
 800501a:	d0cb      	beq.n	8004fb4 <__swbuf_r+0x28>
 800501c:	f04f 37ff 	mov.w	r7, #4294967295
 8005020:	e7ea      	b.n	8004ff8 <__swbuf_r+0x6c>
 8005022:	bf00      	nop
 8005024:	08005560 	.word	0x08005560
 8005028:	08005580 	.word	0x08005580
 800502c:	08005540 	.word	0x08005540

08005030 <_write_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4d07      	ldr	r5, [pc, #28]	; (8005050 <_write_r+0x20>)
 8005034:	4604      	mov	r4, r0
 8005036:	4608      	mov	r0, r1
 8005038:	4611      	mov	r1, r2
 800503a:	2200      	movs	r2, #0
 800503c:	602a      	str	r2, [r5, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	f7fc fa67 	bl	8001512 <_write>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_write_r+0x1e>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_write_r+0x1e>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000188 	.word	0x20000188

08005054 <__swsetup_r>:
 8005054:	4b32      	ldr	r3, [pc, #200]	; (8005120 <__swsetup_r+0xcc>)
 8005056:	b570      	push	{r4, r5, r6, lr}
 8005058:	681d      	ldr	r5, [r3, #0]
 800505a:	4606      	mov	r6, r0
 800505c:	460c      	mov	r4, r1
 800505e:	b125      	cbz	r5, 800506a <__swsetup_r+0x16>
 8005060:	69ab      	ldr	r3, [r5, #24]
 8005062:	b913      	cbnz	r3, 800506a <__swsetup_r+0x16>
 8005064:	4628      	mov	r0, r5
 8005066:	f7ff fb1b 	bl	80046a0 <__sinit>
 800506a:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <__swsetup_r+0xd0>)
 800506c:	429c      	cmp	r4, r3
 800506e:	d10f      	bne.n	8005090 <__swsetup_r+0x3c>
 8005070:	686c      	ldr	r4, [r5, #4]
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005078:	0719      	lsls	r1, r3, #28
 800507a:	d42c      	bmi.n	80050d6 <__swsetup_r+0x82>
 800507c:	06dd      	lsls	r5, r3, #27
 800507e:	d411      	bmi.n	80050a4 <__swsetup_r+0x50>
 8005080:	2309      	movs	r3, #9
 8005082:	6033      	str	r3, [r6, #0]
 8005084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	f04f 30ff 	mov.w	r0, #4294967295
 800508e:	e03e      	b.n	800510e <__swsetup_r+0xba>
 8005090:	4b25      	ldr	r3, [pc, #148]	; (8005128 <__swsetup_r+0xd4>)
 8005092:	429c      	cmp	r4, r3
 8005094:	d101      	bne.n	800509a <__swsetup_r+0x46>
 8005096:	68ac      	ldr	r4, [r5, #8]
 8005098:	e7eb      	b.n	8005072 <__swsetup_r+0x1e>
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <__swsetup_r+0xd8>)
 800509c:	429c      	cmp	r4, r3
 800509e:	bf08      	it	eq
 80050a0:	68ec      	ldreq	r4, [r5, #12]
 80050a2:	e7e6      	b.n	8005072 <__swsetup_r+0x1e>
 80050a4:	0758      	lsls	r0, r3, #29
 80050a6:	d512      	bpl.n	80050ce <__swsetup_r+0x7a>
 80050a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050aa:	b141      	cbz	r1, 80050be <__swsetup_r+0x6a>
 80050ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b0:	4299      	cmp	r1, r3
 80050b2:	d002      	beq.n	80050ba <__swsetup_r+0x66>
 80050b4:	4630      	mov	r0, r6
 80050b6:	f000 f991 	bl	80053dc <_free_r>
 80050ba:	2300      	movs	r3, #0
 80050bc:	6363      	str	r3, [r4, #52]	; 0x34
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	2300      	movs	r3, #0
 80050c8:	6063      	str	r3, [r4, #4]
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f043 0308 	orr.w	r3, r3, #8
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	6923      	ldr	r3, [r4, #16]
 80050d8:	b94b      	cbnz	r3, 80050ee <__swsetup_r+0x9a>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e4:	d003      	beq.n	80050ee <__swsetup_r+0x9a>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 f92b 	bl	8005344 <__smakebuf_r>
 80050ee:	89a0      	ldrh	r0, [r4, #12]
 80050f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050f4:	f010 0301 	ands.w	r3, r0, #1
 80050f8:	d00a      	beq.n	8005110 <__swsetup_r+0xbc>
 80050fa:	2300      	movs	r3, #0
 80050fc:	60a3      	str	r3, [r4, #8]
 80050fe:	6963      	ldr	r3, [r4, #20]
 8005100:	425b      	negs	r3, r3
 8005102:	61a3      	str	r3, [r4, #24]
 8005104:	6923      	ldr	r3, [r4, #16]
 8005106:	b943      	cbnz	r3, 800511a <__swsetup_r+0xc6>
 8005108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800510c:	d1ba      	bne.n	8005084 <__swsetup_r+0x30>
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	0781      	lsls	r1, r0, #30
 8005112:	bf58      	it	pl
 8005114:	6963      	ldrpl	r3, [r4, #20]
 8005116:	60a3      	str	r3, [r4, #8]
 8005118:	e7f4      	b.n	8005104 <__swsetup_r+0xb0>
 800511a:	2000      	movs	r0, #0
 800511c:	e7f7      	b.n	800510e <__swsetup_r+0xba>
 800511e:	bf00      	nop
 8005120:	2000000c 	.word	0x2000000c
 8005124:	08005560 	.word	0x08005560
 8005128:	08005580 	.word	0x08005580
 800512c:	08005540 	.word	0x08005540

08005130 <_close_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4d06      	ldr	r5, [pc, #24]	; (800514c <_close_r+0x1c>)
 8005134:	2300      	movs	r3, #0
 8005136:	4604      	mov	r4, r0
 8005138:	4608      	mov	r0, r1
 800513a:	602b      	str	r3, [r5, #0]
 800513c:	f7fc fa05 	bl	800154a <_close>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d102      	bne.n	800514a <_close_r+0x1a>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	b103      	cbz	r3, 800514a <_close_r+0x1a>
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	bd38      	pop	{r3, r4, r5, pc}
 800514c:	20000188 	.word	0x20000188

08005150 <__sflush_r>:
 8005150:	898a      	ldrh	r2, [r1, #12]
 8005152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005156:	4605      	mov	r5, r0
 8005158:	0710      	lsls	r0, r2, #28
 800515a:	460c      	mov	r4, r1
 800515c:	d458      	bmi.n	8005210 <__sflush_r+0xc0>
 800515e:	684b      	ldr	r3, [r1, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	dc05      	bgt.n	8005170 <__sflush_r+0x20>
 8005164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	dc02      	bgt.n	8005170 <__sflush_r+0x20>
 800516a:	2000      	movs	r0, #0
 800516c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005172:	2e00      	cmp	r6, #0
 8005174:	d0f9      	beq.n	800516a <__sflush_r+0x1a>
 8005176:	2300      	movs	r3, #0
 8005178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800517c:	682f      	ldr	r7, [r5, #0]
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	d032      	beq.n	80051e8 <__sflush_r+0x98>
 8005182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	075a      	lsls	r2, r3, #29
 8005188:	d505      	bpl.n	8005196 <__sflush_r+0x46>
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	1ac0      	subs	r0, r0, r3
 800518e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005190:	b10b      	cbz	r3, 8005196 <__sflush_r+0x46>
 8005192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005194:	1ac0      	subs	r0, r0, r3
 8005196:	2300      	movs	r3, #0
 8005198:	4602      	mov	r2, r0
 800519a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800519c:	6a21      	ldr	r1, [r4, #32]
 800519e:	4628      	mov	r0, r5
 80051a0:	47b0      	blx	r6
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	d106      	bne.n	80051b6 <__sflush_r+0x66>
 80051a8:	6829      	ldr	r1, [r5, #0]
 80051aa:	291d      	cmp	r1, #29
 80051ac:	d82c      	bhi.n	8005208 <__sflush_r+0xb8>
 80051ae:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <__sflush_r+0x108>)
 80051b0:	40ca      	lsrs	r2, r1
 80051b2:	07d6      	lsls	r6, r2, #31
 80051b4:	d528      	bpl.n	8005208 <__sflush_r+0xb8>
 80051b6:	2200      	movs	r2, #0
 80051b8:	6062      	str	r2, [r4, #4]
 80051ba:	04d9      	lsls	r1, r3, #19
 80051bc:	6922      	ldr	r2, [r4, #16]
 80051be:	6022      	str	r2, [r4, #0]
 80051c0:	d504      	bpl.n	80051cc <__sflush_r+0x7c>
 80051c2:	1c42      	adds	r2, r0, #1
 80051c4:	d101      	bne.n	80051ca <__sflush_r+0x7a>
 80051c6:	682b      	ldr	r3, [r5, #0]
 80051c8:	b903      	cbnz	r3, 80051cc <__sflush_r+0x7c>
 80051ca:	6560      	str	r0, [r4, #84]	; 0x54
 80051cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ce:	602f      	str	r7, [r5, #0]
 80051d0:	2900      	cmp	r1, #0
 80051d2:	d0ca      	beq.n	800516a <__sflush_r+0x1a>
 80051d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051d8:	4299      	cmp	r1, r3
 80051da:	d002      	beq.n	80051e2 <__sflush_r+0x92>
 80051dc:	4628      	mov	r0, r5
 80051de:	f000 f8fd 	bl	80053dc <_free_r>
 80051e2:	2000      	movs	r0, #0
 80051e4:	6360      	str	r0, [r4, #52]	; 0x34
 80051e6:	e7c1      	b.n	800516c <__sflush_r+0x1c>
 80051e8:	6a21      	ldr	r1, [r4, #32]
 80051ea:	2301      	movs	r3, #1
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b0      	blx	r6
 80051f0:	1c41      	adds	r1, r0, #1
 80051f2:	d1c7      	bne.n	8005184 <__sflush_r+0x34>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0c4      	beq.n	8005184 <__sflush_r+0x34>
 80051fa:	2b1d      	cmp	r3, #29
 80051fc:	d001      	beq.n	8005202 <__sflush_r+0xb2>
 80051fe:	2b16      	cmp	r3, #22
 8005200:	d101      	bne.n	8005206 <__sflush_r+0xb6>
 8005202:	602f      	str	r7, [r5, #0]
 8005204:	e7b1      	b.n	800516a <__sflush_r+0x1a>
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	e7ad      	b.n	800516c <__sflush_r+0x1c>
 8005210:	690f      	ldr	r7, [r1, #16]
 8005212:	2f00      	cmp	r7, #0
 8005214:	d0a9      	beq.n	800516a <__sflush_r+0x1a>
 8005216:	0793      	lsls	r3, r2, #30
 8005218:	680e      	ldr	r6, [r1, #0]
 800521a:	bf08      	it	eq
 800521c:	694b      	ldreq	r3, [r1, #20]
 800521e:	600f      	str	r7, [r1, #0]
 8005220:	bf18      	it	ne
 8005222:	2300      	movne	r3, #0
 8005224:	eba6 0807 	sub.w	r8, r6, r7
 8005228:	608b      	str	r3, [r1, #8]
 800522a:	f1b8 0f00 	cmp.w	r8, #0
 800522e:	dd9c      	ble.n	800516a <__sflush_r+0x1a>
 8005230:	6a21      	ldr	r1, [r4, #32]
 8005232:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005234:	4643      	mov	r3, r8
 8005236:	463a      	mov	r2, r7
 8005238:	4628      	mov	r0, r5
 800523a:	47b0      	blx	r6
 800523c:	2800      	cmp	r0, #0
 800523e:	dc06      	bgt.n	800524e <__sflush_r+0xfe>
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005246:	81a3      	strh	r3, [r4, #12]
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	e78e      	b.n	800516c <__sflush_r+0x1c>
 800524e:	4407      	add	r7, r0
 8005250:	eba8 0800 	sub.w	r8, r8, r0
 8005254:	e7e9      	b.n	800522a <__sflush_r+0xda>
 8005256:	bf00      	nop
 8005258:	20400001 	.word	0x20400001

0800525c <_fflush_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	690b      	ldr	r3, [r1, #16]
 8005260:	4605      	mov	r5, r0
 8005262:	460c      	mov	r4, r1
 8005264:	b913      	cbnz	r3, 800526c <_fflush_r+0x10>
 8005266:	2500      	movs	r5, #0
 8005268:	4628      	mov	r0, r5
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	b118      	cbz	r0, 8005276 <_fflush_r+0x1a>
 800526e:	6983      	ldr	r3, [r0, #24]
 8005270:	b90b      	cbnz	r3, 8005276 <_fflush_r+0x1a>
 8005272:	f7ff fa15 	bl	80046a0 <__sinit>
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <_fflush_r+0x6c>)
 8005278:	429c      	cmp	r4, r3
 800527a:	d11b      	bne.n	80052b4 <_fflush_r+0x58>
 800527c:	686c      	ldr	r4, [r5, #4]
 800527e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ef      	beq.n	8005266 <_fflush_r+0xa>
 8005286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005288:	07d0      	lsls	r0, r2, #31
 800528a:	d404      	bmi.n	8005296 <_fflush_r+0x3a>
 800528c:	0599      	lsls	r1, r3, #22
 800528e:	d402      	bmi.n	8005296 <_fflush_r+0x3a>
 8005290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005292:	f7ff faa3 	bl	80047dc <__retarget_lock_acquire_recursive>
 8005296:	4628      	mov	r0, r5
 8005298:	4621      	mov	r1, r4
 800529a:	f7ff ff59 	bl	8005150 <__sflush_r>
 800529e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a0:	07da      	lsls	r2, r3, #31
 80052a2:	4605      	mov	r5, r0
 80052a4:	d4e0      	bmi.n	8005268 <_fflush_r+0xc>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	059b      	lsls	r3, r3, #22
 80052aa:	d4dd      	bmi.n	8005268 <_fflush_r+0xc>
 80052ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ae:	f7ff fa96 	bl	80047de <__retarget_lock_release_recursive>
 80052b2:	e7d9      	b.n	8005268 <_fflush_r+0xc>
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <_fflush_r+0x70>)
 80052b6:	429c      	cmp	r4, r3
 80052b8:	d101      	bne.n	80052be <_fflush_r+0x62>
 80052ba:	68ac      	ldr	r4, [r5, #8]
 80052bc:	e7df      	b.n	800527e <_fflush_r+0x22>
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <_fflush_r+0x74>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	bf08      	it	eq
 80052c4:	68ec      	ldreq	r4, [r5, #12]
 80052c6:	e7da      	b.n	800527e <_fflush_r+0x22>
 80052c8:	08005560 	.word	0x08005560
 80052cc:	08005580 	.word	0x08005580
 80052d0:	08005540 	.word	0x08005540

080052d4 <_lseek_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	; (80052f4 <_lseek_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fc f958 	bl	8001598 <_lseek>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_lseek_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_lseek_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20000188 	.word	0x20000188

080052f8 <__swhatbuf_r>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	460e      	mov	r6, r1
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	2900      	cmp	r1, #0
 8005302:	b096      	sub	sp, #88	; 0x58
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	da08      	bge.n	800531c <__swhatbuf_r+0x24>
 800530a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	602a      	str	r2, [r5, #0]
 8005312:	061a      	lsls	r2, r3, #24
 8005314:	d410      	bmi.n	8005338 <__swhatbuf_r+0x40>
 8005316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531a:	e00e      	b.n	800533a <__swhatbuf_r+0x42>
 800531c:	466a      	mov	r2, sp
 800531e:	f000 f8bb 	bl	8005498 <_fstat_r>
 8005322:	2800      	cmp	r0, #0
 8005324:	dbf1      	blt.n	800530a <__swhatbuf_r+0x12>
 8005326:	9a01      	ldr	r2, [sp, #4]
 8005328:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800532c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005330:	425a      	negs	r2, r3
 8005332:	415a      	adcs	r2, r3
 8005334:	602a      	str	r2, [r5, #0]
 8005336:	e7ee      	b.n	8005316 <__swhatbuf_r+0x1e>
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	2000      	movs	r0, #0
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	b016      	add	sp, #88	; 0x58
 8005340:	bd70      	pop	{r4, r5, r6, pc}
	...

08005344 <__smakebuf_r>:
 8005344:	898b      	ldrh	r3, [r1, #12]
 8005346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005348:	079d      	lsls	r5, r3, #30
 800534a:	4606      	mov	r6, r0
 800534c:	460c      	mov	r4, r1
 800534e:	d507      	bpl.n	8005360 <__smakebuf_r+0x1c>
 8005350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	2301      	movs	r3, #1
 800535a:	6163      	str	r3, [r4, #20]
 800535c:	b002      	add	sp, #8
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	ab01      	add	r3, sp, #4
 8005362:	466a      	mov	r2, sp
 8005364:	f7ff ffc8 	bl	80052f8 <__swhatbuf_r>
 8005368:	9900      	ldr	r1, [sp, #0]
 800536a:	4605      	mov	r5, r0
 800536c:	4630      	mov	r0, r6
 800536e:	f7ff fa57 	bl	8004820 <_malloc_r>
 8005372:	b948      	cbnz	r0, 8005388 <__smakebuf_r+0x44>
 8005374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005378:	059a      	lsls	r2, r3, #22
 800537a:	d4ef      	bmi.n	800535c <__smakebuf_r+0x18>
 800537c:	f023 0303 	bic.w	r3, r3, #3
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e7e3      	b.n	8005350 <__smakebuf_r+0xc>
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <__smakebuf_r+0x7c>)
 800538a:	62b3      	str	r3, [r6, #40]	; 0x28
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	6020      	str	r0, [r4, #0]
 8005390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	9b00      	ldr	r3, [sp, #0]
 8005398:	6163      	str	r3, [r4, #20]
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	6120      	str	r0, [r4, #16]
 800539e:	b15b      	cbz	r3, 80053b8 <__smakebuf_r+0x74>
 80053a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f889 	bl	80054bc <_isatty_r>
 80053aa:	b128      	cbz	r0, 80053b8 <__smakebuf_r+0x74>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	89a0      	ldrh	r0, [r4, #12]
 80053ba:	4305      	orrs	r5, r0
 80053bc:	81a5      	strh	r5, [r4, #12]
 80053be:	e7cd      	b.n	800535c <__smakebuf_r+0x18>
 80053c0:	08004639 	.word	0x08004639

080053c4 <__malloc_lock>:
 80053c4:	4801      	ldr	r0, [pc, #4]	; (80053cc <__malloc_lock+0x8>)
 80053c6:	f7ff ba09 	b.w	80047dc <__retarget_lock_acquire_recursive>
 80053ca:	bf00      	nop
 80053cc:	2000017c 	.word	0x2000017c

080053d0 <__malloc_unlock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_unlock+0x8>)
 80053d2:	f7ff ba04 	b.w	80047de <__retarget_lock_release_recursive>
 80053d6:	bf00      	nop
 80053d8:	2000017c 	.word	0x2000017c

080053dc <_free_r>:
 80053dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053de:	2900      	cmp	r1, #0
 80053e0:	d044      	beq.n	800546c <_free_r+0x90>
 80053e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e6:	9001      	str	r0, [sp, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f1a1 0404 	sub.w	r4, r1, #4
 80053ee:	bfb8      	it	lt
 80053f0:	18e4      	addlt	r4, r4, r3
 80053f2:	f7ff ffe7 	bl	80053c4 <__malloc_lock>
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <_free_r+0x94>)
 80053f8:	9801      	ldr	r0, [sp, #4]
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	b933      	cbnz	r3, 800540c <_free_r+0x30>
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	b003      	add	sp, #12
 8005404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005408:	f7ff bfe2 	b.w	80053d0 <__malloc_unlock>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d908      	bls.n	8005422 <_free_r+0x46>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	1961      	adds	r1, r4, r5
 8005414:	428b      	cmp	r3, r1
 8005416:	bf01      	itttt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	1949      	addeq	r1, r1, r5
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	e7ed      	b.n	80053fe <_free_r+0x22>
 8005422:	461a      	mov	r2, r3
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b10b      	cbz	r3, 800542c <_free_r+0x50>
 8005428:	42a3      	cmp	r3, r4
 800542a:	d9fa      	bls.n	8005422 <_free_r+0x46>
 800542c:	6811      	ldr	r1, [r2, #0]
 800542e:	1855      	adds	r5, r2, r1
 8005430:	42a5      	cmp	r5, r4
 8005432:	d10b      	bne.n	800544c <_free_r+0x70>
 8005434:	6824      	ldr	r4, [r4, #0]
 8005436:	4421      	add	r1, r4
 8005438:	1854      	adds	r4, r2, r1
 800543a:	42a3      	cmp	r3, r4
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	d1e0      	bne.n	8005402 <_free_r+0x26>
 8005440:	681c      	ldr	r4, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	6053      	str	r3, [r2, #4]
 8005446:	4421      	add	r1, r4
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	e7da      	b.n	8005402 <_free_r+0x26>
 800544c:	d902      	bls.n	8005454 <_free_r+0x78>
 800544e:	230c      	movs	r3, #12
 8005450:	6003      	str	r3, [r0, #0]
 8005452:	e7d6      	b.n	8005402 <_free_r+0x26>
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	1961      	adds	r1, r4, r5
 8005458:	428b      	cmp	r3, r1
 800545a:	bf04      	itt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	bf04      	itt	eq
 8005464:	1949      	addeq	r1, r1, r5
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	6054      	str	r4, [r2, #4]
 800546a:	e7ca      	b.n	8005402 <_free_r+0x26>
 800546c:	b003      	add	sp, #12
 800546e:	bd30      	pop	{r4, r5, pc}
 8005470:	20000180 	.word	0x20000180

08005474 <_read_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d07      	ldr	r5, [pc, #28]	; (8005494 <_read_r+0x20>)
 8005478:	4604      	mov	r4, r0
 800547a:	4608      	mov	r0, r1
 800547c:	4611      	mov	r1, r2
 800547e:	2200      	movs	r2, #0
 8005480:	602a      	str	r2, [r5, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	f7fc f828 	bl	80014d8 <_read>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_read_r+0x1e>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_read_r+0x1e>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	20000188 	.word	0x20000188

08005498 <_fstat_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d07      	ldr	r5, [pc, #28]	; (80054b8 <_fstat_r+0x20>)
 800549c:	2300      	movs	r3, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	602b      	str	r3, [r5, #0]
 80054a6:	f7fc f85c 	bl	8001562 <_fstat>
 80054aa:	1c43      	adds	r3, r0, #1
 80054ac:	d102      	bne.n	80054b4 <_fstat_r+0x1c>
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	b103      	cbz	r3, 80054b4 <_fstat_r+0x1c>
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	bd38      	pop	{r3, r4, r5, pc}
 80054b6:	bf00      	nop
 80054b8:	20000188 	.word	0x20000188

080054bc <_isatty_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d06      	ldr	r5, [pc, #24]	; (80054d8 <_isatty_r+0x1c>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	602b      	str	r3, [r5, #0]
 80054c8:	f7fc f85b 	bl	8001582 <_isatty>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d102      	bne.n	80054d6 <_isatty_r+0x1a>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	b103      	cbz	r3, 80054d6 <_isatty_r+0x1a>
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	20000188 	.word	0x20000188

080054dc <_init>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr

080054e8 <_fini>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr
